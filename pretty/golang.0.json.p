{
    "anchor": 0,
    "found_anchor": false,
    "found_newest": true,
    "found_oldest": true,
    "history_limited": false,
    "messages": [
        {
            "avatar_url": "https://secure.gravatar.com/avatar/a04b9dcd66595ebe5cdaa7a28411daae?d=identicon&version=1",
            "client": "website",
            "content": "<p>thanks for adding @<strong>Travis McDemus</strong></p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 6430665,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "tom@buchok.com",
            "sender_full_name": "Tom Buchok (S'13)",
            "sender_id": 2112,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "(no subject)",
            "submessages": [],
            "timestamp": 1370279724,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/1380ded36dafac0d6f808b9b7b6c4e85266428a1?x=x&version=1",
            "client": "website",
            "content": "<p>Sure thing.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 6430671,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "travis@mcdem.us",
            "sender_full_name": "Travis McDemus (S'13)",
            "sender_id": 2139,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "(no subject)",
            "submessages": [],
            "timestamp": 1370279734,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/1380ded36dafac0d6f808b9b7b6c4e85266428a1?x=x&version=1",
            "client": "website",
            "content": "<p>I was looking for other people who may have interest in the Go language, so feel free to recruit 'em as we run into them :) </p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 6430681,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "travis@mcdem.us",
            "sender_full_name": "Travis McDemus (S'13)",
            "sender_id": 2139,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "(no subject)",
            "submessages": [],
            "timestamp": 1370279758,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/a04b9dcd66595ebe5cdaa7a28411daae?d=identicon&version=1",
            "client": "website",
            "content": "<p>how does humbug work, like is #golang it's own subject matter or a sub-set of #programming ?</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 6430722,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "tom@buchok.com",
            "sender_full_name": "Tom Buchok (S'13)",
            "sender_id": 2112,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "(no subject)",
            "submessages": [],
            "timestamp": 1370279785,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/a04b9dcd66595ebe5cdaa7a28411daae?d=identicon&version=1",
            "client": "website",
            "content": "<p>i'm entirely confused, but like this thing.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 6430728,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "tom@buchok.com",
            "sender_full_name": "Tom Buchok (S'13)",
            "sender_id": 2112,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "(no subject)",
            "submessages": [],
            "timestamp": 1370279805,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/1380ded36dafac0d6f808b9b7b6c4e85266428a1?x=x&version=1",
            "client": "website",
            "content": "<p>It seems to be  a fusion between an IRC chatroom and email threads (with subjects)</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 6430960,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "travis@mcdem.us",
            "sender_full_name": "Travis McDemus (S'13)",
            "sender_id": 2139,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "stream",
            "submessages": [],
            "timestamp": 1370280129,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/1380ded36dafac0d6f808b9b7b6c4e85266428a1?x=x&version=1",
            "client": "website",
            "content": "<p>So in this case, golang is its own stream, which can be added by anybody and then split up into related subjects (questions, discussion of a certain library).</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 6430998,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "travis@mcdem.us",
            "sender_full_name": "Travis McDemus (S'13)",
            "sender_id": 2139,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "stream",
            "submessages": [],
            "timestamp": 1370280206,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/1380ded36dafac0d6f808b9b7b6c4e85266428a1?x=x&version=1",
            "client": "website",
            "content": "<p>honestly, I joined the python and clojure ones and thought it'd be good if this existed as well :) </p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 6431001,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "travis@mcdem.us",
            "sender_full_name": "Travis McDemus (S'13)",
            "sender_id": 2139,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "(no subject)",
            "submessages": [],
            "timestamp": 1370280226,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/a04b9dcd66595ebe5cdaa7a28411daae?d=identicon&version=1",
            "client": "website",
            "content": "<p>perfect.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 6431046,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "tom@buchok.com",
            "sender_full_name": "Tom Buchok (S'13)",
            "sender_id": 2112,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "(no subject)",
            "submessages": [],
            "timestamp": 1370280287,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/1380ded36dafac0d6f808b9b7b6c4e85266428a1?x=x&version=1",
            "client": "website",
            "content": "<p>Did you get lunch already?</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 6431110,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "travis@mcdem.us",
            "sender_full_name": "Travis McDemus (S'13)",
            "sender_id": 2139,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "(no subject)",
            "submessages": [],
            "timestamp": 1370280389,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/a04b9dcd66595ebe5cdaa7a28411daae?d=identicon&version=1",
            "client": "website",
            "content": "<p>no. i'm hungry.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 6431380,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "tom@buchok.com",
            "sender_full_name": "Tom Buchok (S'13)",
            "sender_id": 2112,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "(no subject)",
            "submessages": [],
            "timestamp": 1370280961,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/a04b9dcd66595ebe5cdaa7a28411daae?d=identicon&version=1",
            "client": "website",
            "content": "<p>let's go grab food. @<strong>Martin T\u00f6rnwall</strong>is coming too.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 6431431,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "tom@buchok.com",
            "sender_full_name": "Tom Buchok (S'13)",
            "sender_id": 2112,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "(no subject)",
            "submessages": [],
            "timestamp": 1370281023,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/1380ded36dafac0d6f808b9b7b6c4e85266428a1?x=x&version=1",
            "client": "website",
            "content": "<p>I'd be into heading out now if you're interested.  I'm sitting near the group \"Hopper\" (outside the glass conference room in the center of the space).</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 6431439,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "travis@mcdem.us",
            "sender_full_name": "Travis McDemus (S'13)",
            "sender_id": 2139,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "(no subject)",
            "submessages": [],
            "timestamp": 1370281056,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/a04b9dcd66595ebe5cdaa7a28411daae?d=identicon&version=1",
            "client": "website",
            "content": "<p>10-4</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 6431444,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "tom@buchok.com",
            "sender_full_name": "Tom Buchok (S'13)",
            "sender_id": 2112,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "(no subject)",
            "submessages": [],
            "timestamp": 1370281079,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/a179bb8c3fc4ab0975954f57d47fa6c53a8c2dad?x=x&version=2",
            "client": "website",
            "content": "<p>Are you guys currently writing any Golang? Right now, I'm just tinkering to see if I can make a fast vector / matrix package. Not sure if it will bear any fruit.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 6466334,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "jay@jayschwa.net",
            "sender_full_name": "Jay Weisskopf Petacat (W2'17)",
            "sender_id": 829,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "project",
            "submessages": [],
            "timestamp": 1370358650,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/1380ded36dafac0d6f808b9b7b6c4e85266428a1?x=x&version=1",
            "client": "website",
            "content": "<p>I'm currently working with some C libraries that I will write some Go wrappers / replacement libraries for</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 6466592,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "travis@mcdem.us",
            "sender_full_name": "Travis McDemus (S'13)",
            "sender_id": 2139,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "project",
            "submessages": [],
            "timestamp": 1370359239,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/a179bb8c3fc4ab0975954f57d47fa6c53a8c2dad?x=x&version=2",
            "client": "website",
            "content": "<p>Are there any text editors or IDEs with solid support for Go? I find myself missing the Refactor functionality that Eclipse has for Java, for example.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 6703700,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "jay@jayschwa.net",
            "sender_full_name": "Jay Weisskopf Petacat (W2'17)",
            "sender_id": 829,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "editors",
            "submessages": [],
            "timestamp": 1370903534,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/a179bb8c3fc4ab0975954f57d47fa6c53a8c2dad?x=x&version=2",
            "client": "website",
            "content": "<p>or maybe it's Rename. I don't remember which. I just know you can change the name of a variable in one spot and it updates everywhere else.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 6703704,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "jay@jayschwa.net",
            "sender_full_name": "Jay Weisskopf Petacat (W2'17)",
            "sender_id": 829,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "editors",
            "submessages": [],
            "timestamp": 1370903566,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/1380ded36dafac0d6f808b9b7b6c4e85266428a1?x=x&version=1",
            "client": "website",
            "content": "<p>I've got MacVim, Sublime Text 2, and Acme set up to work with Go code. Stop by for a tour of any of them.    I haven't checked out the Xcode and Eclipse plugins, but they exist: <br>\n<a href=\"http://go-lang.cat-v.org/text-editors/\" target=\"_blank\" title=\"http://go-lang.cat-v.org/text-editors/\">http://go-lang.cat-v.org/text-editors/</a></p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 6728440,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "travis@mcdem.us",
            "sender_full_name": "Travis McDemus (S'13)",
            "sender_id": 2139,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "editors",
            "submessages": [],
            "timestamp": 1370964224,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/727381701627014419ca0b85a84c6ae7?d=identicon&version=1",
            "client": "website",
            "content": "<p>I'm reading the Tour of Go and I've just completed the exercise at page <a href=\"http://tour.golang.org/#69\" target=\"_blank\" title=\"http://tour.golang.org/#69\">#69</a>.</p>\n<p>This is my solution:</p>\n<div class=\"codehilite\"><pre><span class=\"k\">package</span> <span class=\"n\">main</span>\n\n<span class=\"k\">import</span> <span class=\"p\">(</span>\n    <span class=\"s\">&quot;code.google.com/p/go-tour/tree&quot;</span>\n    <span class=\"s\">&quot;fmt&quot;</span>\n<span class=\"p\">)</span>\n\n<span class=\"c1\">// Walk walks the tree t sending all values</span>\n<span class=\"c1\">// from the tree to the channel ch.</span>\n<span class=\"k\">func</span> <span class=\"n\">Walk</span><span class=\"p\">(</span><span class=\"n\">t</span> <span class=\"p\">*</span><span class=\"n\">tree</span><span class=\"p\">.</span><span class=\"n\">Tree</span><span class=\"p\">,</span> <span class=\"n\">ch</span> <span class=\"k\">chan</span> <span class=\"nb\">int</span><span class=\"p\">)</span> <span class=\"p\">{</span>    \n    <span class=\"k\">var</span> <span class=\"n\">walk</span> <span class=\"k\">func</span><span class=\"p\">(</span><span class=\"n\">t</span> <span class=\"p\">*</span><span class=\"n\">tree</span><span class=\"p\">.</span><span class=\"n\">Tree</span><span class=\"p\">)</span>\n    <span class=\"n\">walk</span> <span class=\"p\">=</span> <span class=\"k\">func</span><span class=\"p\">(</span><span class=\"n\">t</span> <span class=\"p\">*</span><span class=\"n\">tree</span><span class=\"p\">.</span><span class=\"n\">Tree</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"k\">if</span> <span class=\"n\">t</span> <span class=\"p\">==</span> <span class=\"n\">nil</span> <span class=\"p\">{</span>\n            <span class=\"k\">return</span>\n        <span class=\"p\">}</span>\n\n        <span class=\"n\">walk</span><span class=\"p\">(</span><span class=\"n\">t</span><span class=\"p\">.</span><span class=\"n\">Left</span><span class=\"p\">)</span>\n        <span class=\"n\">ch</span> <span class=\"p\">&lt;-</span> <span class=\"n\">t</span><span class=\"p\">.</span><span class=\"n\">Value</span>\n        <span class=\"n\">walk</span><span class=\"p\">(</span><span class=\"n\">t</span><span class=\"p\">.</span><span class=\"n\">Right</span><span class=\"p\">)</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"n\">walk</span><span class=\"p\">(</span><span class=\"n\">t</span><span class=\"p\">)</span>\n    <span class=\"nb\">close</span><span class=\"p\">(</span><span class=\"n\">ch</span><span class=\"p\">)</span>\n<span class=\"p\">}</span>\n\n<span class=\"c1\">// Same determines whether the trees</span>\n<span class=\"c1\">// t1 and t2 contain the same values.</span>\n<span class=\"k\">func</span> <span class=\"n\">Same</span><span class=\"p\">(</span><span class=\"n\">t1</span><span class=\"p\">,</span> <span class=\"n\">t2</span> <span class=\"p\">*</span><span class=\"n\">tree</span><span class=\"p\">.</span><span class=\"n\">Tree</span><span class=\"p\">)</span> <span class=\"n\">bool</span> <span class=\"p\">{</span>\n    <span class=\"n\">ch1</span> <span class=\"p\">:=</span> <span class=\"nb\">make</span><span class=\"p\">(</span><span class=\"k\">chan</span> <span class=\"nb\">int</span><span class=\"p\">)</span>\n    <span class=\"n\">ch2</span> <span class=\"p\">:=</span> <span class=\"nb\">make</span><span class=\"p\">(</span><span class=\"k\">chan</span> <span class=\"nb\">int</span><span class=\"p\">)</span>\n\n    <span class=\"k\">go</span> <span class=\"n\">Walk</span><span class=\"p\">(</span><span class=\"n\">t1</span><span class=\"p\">,</span> <span class=\"n\">ch1</span><span class=\"p\">)</span>\n    <span class=\"k\">go</span> <span class=\"n\">Walk</span><span class=\"p\">(</span><span class=\"n\">t2</span><span class=\"p\">,</span> <span class=\"n\">ch2</span><span class=\"p\">)</span>\n\n    <span class=\"k\">for</span> <span class=\"p\">{</span>\n        <span class=\"n\">n1</span><span class=\"p\">,</span> <span class=\"n\">ok1</span> <span class=\"p\">:=</span> <span class=\"p\">&lt;-</span> <span class=\"n\">ch1</span>\n        <span class=\"n\">n2</span><span class=\"p\">,</span> <span class=\"n\">ok2</span> <span class=\"p\">:=</span> <span class=\"p\">&lt;-</span> <span class=\"n\">ch2</span>\n\n        <span class=\"k\">if</span> <span class=\"n\">n1</span> <span class=\"p\">!=</span> <span class=\"n\">n2</span> <span class=\"p\">||</span> <span class=\"n\">ok1</span> <span class=\"p\">!=</span> <span class=\"n\">ok2</span> <span class=\"p\">{</span>\n            <span class=\"k\">return</span> <span class=\"n\">false</span>\n        <span class=\"p\">}</span>\n\n        <span class=\"k\">if</span> <span class=\"p\">!</span><span class=\"n\">ok1</span> <span class=\"p\">&amp;&amp;</span> <span class=\"p\">!</span><span class=\"n\">ok2</span> <span class=\"p\">{</span>\n            <span class=\"k\">return</span> <span class=\"n\">true</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">}</span>    \n<span class=\"p\">}</span>\n\n<span class=\"k\">func</span> <span class=\"n\">main</span><span class=\"p\">()</span> <span class=\"p\">{</span>    \n    <span class=\"n\">res</span> <span class=\"p\">:=</span> <span class=\"n\">Same</span><span class=\"p\">(</span><span class=\"n\">tree</span><span class=\"p\">.</span><span class=\"n\">New</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">),</span> <span class=\"n\">tree</span><span class=\"p\">.</span><span class=\"n\">New</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">))</span>\n    <span class=\"n\">fmt</span><span class=\"p\">.</span><span class=\"n\">Println</span><span class=\"p\">(</span><span class=\"n\">res</span><span class=\"p\">)</span>\n<span class=\"p\">}</span>\n</pre></div>\n\n\n<p>What do you think? Is there a better way to solve this problem?<br>\nThanks <img alt=\":smile:\" class=\"emoji\" src=\"static/third/gemoji/images/emoji/smile.png\" title=\":smile:\"></p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 7033279,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "paolo.moretti85@gmail.com",
            "sender_full_name": "Paolo Moretti (S'13)",
            "sender_id": 2114,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "a tour of go",
            "submessages": [],
            "timestamp": 1371679839,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/a179bb8c3fc4ab0975954f57d47fa6c53a8c2dad?x=x&version=2",
            "client": "website",
            "content": "<p>@<strong>Paolo Moretti</strong>, I would create a separate <code>walk</code> function rather than creating a new function for every call of <code>Walk</code>:<br>\n<a href=\"http://play.golang.org/p/CSHvGNVLaf\" target=\"_blank\" title=\"http://play.golang.org/p/CSHvGNVLaf\">http://play.golang.org/p/CSHvGNVLaf</a></p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 7033607,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "jay@jayschwa.net",
            "sender_full_name": "Jay Weisskopf Petacat (W2'17)",
            "sender_id": 829,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "a tour of go",
            "submessages": [],
            "timestamp": 1371680519,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/a179bb8c3fc4ab0975954f57d47fa6c53a8c2dad?x=x&version=2",
            "client": "website",
            "content": "<p>Actually, I'm mistaken. Yours would only create <code>walk</code> once.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 7033726,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "jay@jayschwa.net",
            "sender_full_name": "Jay Weisskopf Petacat (W2'17)",
            "sender_id": 829,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "a tour of go",
            "submessages": [],
            "timestamp": 1371680721,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/a179bb8c3fc4ab0975954f57d47fa6c53a8c2dad?x=x&version=2",
            "client": "website",
            "content": "<p>Nevermind.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 7033732,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "jay@jayschwa.net",
            "sender_full_name": "Jay Weisskopf Petacat (W2'17)",
            "sender_id": 829,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "a tour of go",
            "submessages": [],
            "timestamp": 1371680744,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/727381701627014419ca0b85a84c6ae7?d=identicon&version=1",
            "client": "website",
            "content": "<p>@<strong>Jay Weisskopf</strong> Can you explain me why <code>walk</code> is only created once? Because from my understanding it's a function closure that should be created every time I call the <code>Walk</code> (with the capital W) function. Thank you.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 7034272,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "paolo.moretti85@gmail.com",
            "sender_full_name": "Paolo Moretti (S'13)",
            "sender_id": 2114,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "a tour of go",
            "submessages": [],
            "timestamp": 1371681935,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/a179bb8c3fc4ab0975954f57d47fa6c53a8c2dad?x=x&version=2",
            "client": "website",
            "content": "<p>It's created once per call to <code>Walk</code>. I initially thought it was being created for every tree level.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 7035079,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "jay@jayschwa.net",
            "sender_full_name": "Jay Weisskopf Petacat (W2'17)",
            "sender_id": 829,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "a tour of go",
            "submessages": [],
            "timestamp": 1371683860,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/727381701627014419ca0b85a84c6ae7?d=identicon&version=1",
            "client": "website",
            "content": "<p>Cool, that's what I was thinking <img alt=\":smile:\" class=\"emoji\" src=\"static/third/gemoji/images/emoji/smile.png\" title=\":smile:\"></p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 7036117,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "paolo.moretti85@gmail.com",
            "sender_full_name": "Paolo Moretti (S'13)",
            "sender_id": 2114,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "a tour of go",
            "submessages": [],
            "timestamp": 1371686307,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/1380ded36dafac0d6f808b9b7b6c4e85266428a1?x=x&version=1",
            "client": "website",
            "content": "<p>@all, we're doing a quick crash course on Go after the morning check-ins. We're set up in the Church room.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 7056566,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "travis@mcdem.us",
            "sender_full_name": "Travis McDemus (S'13)",
            "sender_id": 2139,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "(no subject)",
            "submessages": [],
            "timestamp": 1371739493,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/2aff223681817a0fadddb6a94a4860b8?d=identicon&version=1",
            "client": "website",
            "content": "<p>Hey y'all! Last batch @<strong>Tom Ballinger</strong> and I built a really silly web crawler in Go and I thought it demonstrated Go's concurrency very well so I'm going to be doing a blog post series about a similar project. The first post is just setting up the tech stack I'll be using, but there will be more posts soon! Keep an eye on Blaggarator :)</p>\n<p>First post: <a href=\"http://chuckha.com/blog/2013/06/20/building-a-web-crawler-intro/\" target=\"_blank\" title=\"http://chuckha.com/blog/2013/06/20/building-a-web-crawler-intro/\">http://chuckha.com/blog/2013/06/20/building-a-web-crawler-intro/</a></p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 7062436,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "ha.chuck@gmail.com",
            "sender_full_name": "Chuck Ha (W'13)",
            "sender_id": 819,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "building a web crawler",
            "submessages": [],
            "timestamp": 1371750966,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/a04b9dcd66595ebe5cdaa7a28411daae?d=identicon&version=1",
            "client": "website",
            "content": "<p>thanks for the rocking walk-through today, @<strong>Travis McDemus</strong>. we can definitely build upon this, but here's a thing hitting a redis store. would be fun to add more to this repo and looking forward to it. code review welcome!</p>\n<p><a href=\"https://github.com/tbuchok/go-have-fun\" target=\"_blank\" title=\"https://github.com/tbuchok/go-have-fun\">https://github.com/tbuchok/go-have-fun</a></p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 7075190,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "tom@buchok.com",
            "sender_full_name": "Tom Buchok (S'13)",
            "sender_id": 2112,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "(no subject)",
            "submessages": [],
            "timestamp": 1371775289,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/a04b9dcd66595ebe5cdaa7a28411daae?d=identicon&version=1",
            "client": "website",
            "content": "<p>will take a look at this tomorrow, @<strong>Chuck</strong></p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 7075248,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "tom@buchok.com",
            "sender_full_name": "Tom Buchok (S'13)",
            "sender_id": 2112,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "building a web crawler",
            "submessages": [],
            "timestamp": 1371775395,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/1380ded36dafac0d6f808b9b7b6c4e85266428a1?x=x&version=1",
            "client": "website",
            "content": "<p>I'm going to build a small web crawler / scraper today. Anyone want to pair or trade notes on different ways of doing it?  (I'm trying out the goquery API for scraping instead of pkg/encoding/xml or libxml wrappers.)</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 7193269,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "travis@mcdem.us",
            "sender_full_name": "Travis McDemus (S'13)",
            "sender_id": 2139,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "building a web crawler",
            "submessages": [],
            "timestamp": 1372086043,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/2aff223681817a0fadddb6a94a4860b8?d=identicon&version=1",
            "client": "website",
            "content": "<p>let me know how you deal with robots.txt, i found building a parser was less straightforward than it seemed... &lt;/optimisticdev&gt;</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 7193389,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "ha.chuck@gmail.com",
            "sender_full_name": "Chuck Ha (W'13)",
            "sender_id": 819,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "building a web crawler",
            "submessages": [],
            "timestamp": 1372086293,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/2aff223681817a0fadddb6a94a4860b8?d=identicon&version=1",
            "client": "website",
            "content": "<p>^ @<strong>Travis McDemus</strong></p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 7193399,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "ha.chuck@gmail.com",
            "sender_full_name": "Chuck Ha (W'13)",
            "sender_id": 819,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "building a web crawler",
            "submessages": [],
            "timestamp": 1372086305,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/a179bb8c3fc4ab0975954f57d47fa6c53a8c2dad?x=x&version=2",
            "client": "website",
            "content": "<p>@<strong>Chuck</strong>, our scraper is evil.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 7193991,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "jay@jayschwa.net",
            "sender_full_name": "Jay Weisskopf Petacat (W2'17)",
            "sender_id": 829,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "building a web crawler",
            "submessages": [],
            "timestamp": 1372087278,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/3fcb27e39d2ff47357a803e91347fee4?d=identicon&version=1",
            "client": "website",
            "content": "<p>@<strong>Travis McDemus</strong> I'm the resident this week. Writing scrapers is one of my favorite things :) Happy to chat about it.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 7194192,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "al3x@al3x.net",
            "sender_full_name": "Alex Payne",
            "sender_id": 943,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "building a web crawler",
            "submessages": [],
            "timestamp": 1372087621,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/a179bb8c3fc4ab0975954f57d47fa6c53a8c2dad?x=x&version=2",
            "client": "website",
            "content": "<p>@<strong>Alex Payne</strong>, where are you sitting? @<strong>Travis McDemus</strong> and I are in one of the smaller side rooms if you were to walk straight down the hallway after coming up the stairs.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 7194606,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "jay@jayschwa.net",
            "sender_full_name": "Jay Weisskopf Petacat (W2'17)",
            "sender_id": 829,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "building a web crawler",
            "submessages": [],
            "timestamp": 1372088367,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/a04b9dcd66595ebe5cdaa7a28411daae?d=identicon&version=1",
            "client": "website",
            "content": "<p>anyone else going?<br>\n===<br>\nTime: 6:30 - 9:00 PM<br>\nDate: June 24th<br>\nLocation: Yext HQ at<br>\nOne Madison Avenue - 5th Floor<br>\n- on the North side of 23rd Street between Park &amp; Madison<br>\nSpeaker: Rob Figueiredo, creator of the Revel framework for Go<br>\nSecurity: You're on our security list. You'll need to show ID with the exact name you registered under. </p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 7198880,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "tom@buchok.com",
            "sender_full_name": "Tom Buchok (S'13)",
            "sender_id": 2112,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "reven framework preso",
            "submessages": [],
            "timestamp": 1372096815,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/2aff223681817a0fadddb6a94a4860b8?d=identicon&version=1",
            "client": "website",
            "content": "<p>yep, I'll be there</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 7198949,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "ha.chuck@gmail.com",
            "sender_full_name": "Chuck Ha (W'13)",
            "sender_id": 819,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "reven framework preso",
            "submessages": [],
            "timestamp": 1372096945,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/1380ded36dafac0d6f808b9b7b6c4e85266428a1?x=x&version=1",
            "client": "website",
            "content": "<p>@<strong>Tom Buchok</strong>, I'm signed up as well, so let's travel together. </p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 7202809,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "travis@mcdem.us",
            "sender_full_name": "Travis McDemus (S'13)",
            "sender_id": 2139,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "reven framework preso",
            "submessages": [],
            "timestamp": 1372104069,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/5ac24ef595f7d1cd016bc3de24f78e60?d=identicon&version=1",
            "client": "website",
            "content": "<p>Anyone care to give me some advice on how to approach a concurrency problem with go?</p>\n<p>It might take a little bit to explain, so I'd prefer to meet up for a few minutes.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 7204196,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "simon@simonmweber.com",
            "sender_full_name": "Simon Weber (he) (S'13)",
            "sender_id": 2111,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "concurrency?",
            "submessages": [],
            "timestamp": 1372106295,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/3fcb27e39d2ff47357a803e91347fee4?d=identicon&version=1",
            "client": "website",
            "content": "<p>@<strong>Simon Weber</strong>I'm not a Go expert but I'd be happy to talk it through</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 7206552,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "al3x@al3x.net",
            "sender_full_name": "Alex Payne",
            "sender_id": 943,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "concurrency?",
            "submessages": [],
            "timestamp": 1372110542,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/5ac24ef595f7d1cd016bc3de24f78e60?d=identicon&version=1",
            "client": "website",
            "content": "<p>@<strong>Alex Payne</strong> super; where are you?</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 7206560,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "simon@simonmweber.com",
            "sender_full_name": "Simon Weber (he) (S'13)",
            "sender_id": 2111,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "concurrency?",
            "submessages": [],
            "timestamp": 1372110573,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/3fcb27e39d2ff47357a803e91347fee4?d=identicon&version=1",
            "client": "website",
            "content": "<p>I'm by Steele, under the Hacker School logo on the wall.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 7206614,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "al3x@al3x.net",
            "sender_full_name": "Alex Payne",
            "sender_id": 943,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "concurrency?",
            "submessages": [],
            "timestamp": 1372110627,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/a04b9dcd66595ebe5cdaa7a28411daae?d=identicon&version=1",
            "client": "website",
            "content": "<p>spoke a bit with @<strong>Chuck</strong> re: channels and trying to get my head outside of \"nodeland\" with callbacks and events, growing this stupid repo with more trivial examples:</p>\n<p><a href=\"https://github.com/tbuchok/go-have-fun/\" target=\"_blank\" title=\"https://github.com/tbuchok/go-have-fun/\">https://github.com/tbuchok/go-have-fun/</a></p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 7216672,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "tom@buchok.com",
            "sender_full_name": "Tom Buchok (S'13)",
            "sender_id": 2112,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "channels",
            "submessages": [],
            "timestamp": 1372133460,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/5ac24ef595f7d1cd016bc3de24f78e60?d=identicon&version=1",
            "client": "website",
            "content": "<p>@<strong>Travis McDemus</strong> @<strong>Jay Weisskopf</strong> here's that blog post I was talking about: <a href=\"http://gowithconfidence.tumblr.com/post/31431608488/muxing\" target=\"_blank\" title=\"http://gowithconfidence.tumblr.com/post/31431608488/muxing\">gowithconfidence.tumblr.com/post/31431608488/muxing</a></p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 7269812,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "simon@simonmweber.com",
            "sender_full_name": "Simon Weber (he) (S'13)",
            "sender_id": 2111,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "muxing",
            "submessages": [],
            "timestamp": 1372257981,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/5ac24ef595f7d1cd016bc3de24f78e60?d=identicon&version=1",
            "client": "website",
            "content": "<p>this pattern is useful, too: <a href=\"http://gowithconfidence.tumblr.com/post/31426832143/stacked-channels\" target=\"_blank\" title=\"http://gowithconfidence.tumblr.com/post/31426832143/stacked-channels\">http://gowithconfidence.tumblr.com/post/31426832143/stacked-channels</a></p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 7269814,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "simon@simonmweber.com",
            "sender_full_name": "Simon Weber (he) (S'13)",
            "sender_id": 2111,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "muxing",
            "submessages": [],
            "timestamp": 1372258001,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/1380ded36dafac0d6f808b9b7b6c4e85266428a1?x=x&version=1",
            "client": "website",
            "content": "<p>Dave Cheney (maintainer of the unofficial ARM Go distribution) wrote a tutorial on benchmarking in Go this past weekend.   I'll be reading through it today if anyone wants to discuss or benchmark some code later.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 7443965,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "travis@mcdem.us",
            "sender_full_name": "Travis McDemus (S'13)",
            "sender_id": 2139,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "benchmarking",
            "submessages": [],
            "timestamp": 1372690350,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/1380ded36dafac0d6f808b9b7b6c4e85266428a1?x=x&version=1",
            "client": "website",
            "content": "<p>I posted a Manager / Worker toy example on the mailing list for feedback: </p>\n<p>My example:  <a href=\"http://play.golang.org/p/SWG05adnjo\" target=\"_blank\" title=\"http://play.golang.org/p/SWG05adnjo\">http://play.golang.org/p/SWG05adnjo</a><br>\nReply from the list: <a href=\"http://play.golang.org/p/NDmq3Nkszw\" target=\"_blank\" title=\"http://play.golang.org/p/NDmq3Nkszw\">http://play.golang.org/p/NDmq3Nkszw</a></p>\n<p>I'd like to reimplement my web crawler this week to be more like the reply if anyone wants to pair. (It may take under an hour.)</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 7444220,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "travis@mcdem.us",
            "sender_full_name": "Travis McDemus (S'13)",
            "sender_id": 2139,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "concurrency",
            "submessages": [],
            "timestamp": 1372690909,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/1380ded36dafac0d6f808b9b7b6c4e85266428a1?x=x&version=1",
            "client": "website",
            "content": "<p>It would have been useful had I linked the URL.... <a href=\"http://dave.cheney.net/2013/06/30/how-to-write-benchmarks-in-go\" target=\"_blank\" title=\"http://dave.cheney.net/2013/06/30/how-to-write-benchmarks-in-go\">http://dave.cheney.net/2013/06/30/how-to-write-benchmarks-in-go</a></p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 7444542,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "travis@mcdem.us",
            "sender_full_name": "Travis McDemus (S'13)",
            "sender_id": 2139,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "benchmarking",
            "submessages": [],
            "timestamp": 1372691445,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/727381701627014419ca0b85a84c6ae7?d=identicon&version=1",
            "client": "website",
            "content": "<p>How do I compare slices? I found <a href=\"http://golang.org/pkg/bytes/#Equal\" target=\"_blank\" title=\"http://golang.org/pkg/bytes/#Equal\"><code>bytes.Equal</code></a>, but in my case I need to compare two <code>[]int</code>slices. <br>\nDo I have to write a boring function like this one for every type, or am I missing something?</p>\n<div class=\"codehilite\"><pre><span class=\"k\">func</span> <span class=\"n\">Equal</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span> <span class=\"p\">[]</span><span class=\"nb\">int</span><span class=\"p\">)</span> <span class=\"n\">bool</span> <span class=\"p\">{</span>\n    <span class=\"k\">if</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">)</span> <span class=\"p\">!=</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">b</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"k\">return</span> <span class=\"n\">false</span>\n    <span class=\"p\">}</span>\n    <span class=\"k\">for</span> <span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"n\">c</span> <span class=\"p\">:=</span> <span class=\"k\">range</span> <span class=\"n\">a</span> <span class=\"p\">{</span>\n        <span class=\"k\">if</span> <span class=\"n\">c</span> <span class=\"p\">!=</span> <span class=\"n\">b</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"p\">{</span>\n            <span class=\"k\">return</span> <span class=\"n\">false</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n    <span class=\"k\">return</span> <span class=\"n\">true</span>\n<span class=\"p\">}</span>\n</pre></div>\n\n\n<p>Why the standard library does not have a \"generic\" <code>Equal</code>?</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 7526196,
            "is_me_message": false,
            "last_edit_timestamp": 1372876907,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "paolo.moretti85@gmail.com",
            "sender_full_name": "Paolo Moretti (S'13)",
            "sender_id": 2114,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "compare slices",
            "submessages": [],
            "timestamp": 1372876882,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/2aff223681817a0fadddb6a94a4860b8?d=identicon&version=1",
            "client": "website",
            "content": "<p>I bet you could do something with the reflect, but i bet it would be way slower</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 7526467,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "ha.chuck@gmail.com",
            "sender_full_name": "Chuck Ha (W'13)",
            "sender_id": 819,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "compare slices",
            "submessages": [],
            "timestamp": 1372877460,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/727381701627014419ca0b85a84c6ae7?d=identicon&version=1",
            "client": "website",
            "content": "<p>@Chuck I tried implementing something like this <code>func Equal(a, b []interface{}) bool { ... }</code>, but the problem is that I can't cast an <code>[]int</code> slice to an <code>[]interface{}</code> slice, because they are different types with different sizes and memory layouts.<br>\nI'd really like something like generics or c++ templates in go!</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 7526831,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "paolo.moretti85@gmail.com",
            "sender_full_name": "Paolo Moretti (S'13)",
            "sender_id": 2114,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "compare slices",
            "submessages": [],
            "timestamp": 1372878231,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/2aff223681817a0fadddb6a94a4860b8?d=identicon&version=1",
            "client": "website",
            "content": "<p><a href=\"http://golang.org/doc/faq#generics\" target=\"_blank\" title=\"http://golang.org/doc/faq#generics\">http://golang.org/doc/faq#generics</a> maybe one day!</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 7526932,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "ha.chuck@gmail.com",
            "sender_full_name": "Chuck Ha (W'13)",
            "sender_id": 819,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "compare slices",
            "submessages": [],
            "timestamp": 1372878380,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/727381701627014419ca0b85a84c6ae7?d=identicon&version=1",
            "client": "website",
            "content": "<p>I hope so <img alt=\":disappointed_relieved:\" class=\"emoji\" src=\"static/third/gemoji/images/emoji/disappointed_relieved.png\" title=\":disappointed_relieved:\"></p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 7527008,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "paolo.moretti85@gmail.com",
            "sender_full_name": "Paolo Moretti (S'13)",
            "sender_id": 2114,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "compare slices",
            "submessages": [],
            "timestamp": 1372878555,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/2aff223681817a0fadddb6a94a4860b8?d=identicon&version=1",
            "client": "website",
            "content": "<p>you could change the problem slightly and be way more inefficient :) <a href=\"http://play.golang.org/p/8QIb1eUnIk\" target=\"_blank\" title=\"http://play.golang.org/p/8QIb1eUnIk\">http://play.golang.org/p/8QIb1eUnIk</a></p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 7527199,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "ha.chuck@gmail.com",
            "sender_full_name": "Chuck Ha (W'13)",
            "sender_id": 819,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "compare slices",
            "submessages": [],
            "timestamp": 1372878898,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/727381701627014419ca0b85a84c6ae7?d=identicon&version=1",
            "client": "website",
            "content": "<p>@<strong>Chuck</strong> Yeah, I was thinking too about creating a new <code>[]interface{}</code> slice from my <code>[]int</code> slice...but then I have to create new slices every time I want to use my function, so it's probably not what I'm looking for.</p>\n<p>I want generics now! <img alt=\":smile:\" class=\"emoji\" src=\"static/third/gemoji/images/emoji/smile.png\" title=\":smile:\"><br>\n<a href=\"http://i.qkme.me/3v25j1.jpg\" target=\"_blank\" title=\"http://i.qkme.me/3v25j1.jpg\">http://i.qkme.me/3v25j1.jpg</a></p>\n<div class=\"message_inline_image\"><a href=\"http://i.qkme.me/3v25j1.jpg\" target=\"_blank\" title=\"http://i.qkme.me/3v25j1.jpg\"><img src=\"http://i.qkme.me/3v25j1.jpg\"></a></div>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 7527552,
            "is_me_message": false,
            "last_edit_timestamp": 1372879815,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "paolo.moretti85@gmail.com",
            "sender_full_name": "Paolo Moretti (S'13)",
            "sender_id": 2114,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "compare slices",
            "submessages": [],
            "timestamp": 1372879625,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/a179bb8c3fc4ab0975954f57d47fa6c53a8c2dad?x=x&version=2",
            "client": "website",
            "content": "<p>Reflection sucks. It's not an adequate substitute for generics.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 7532481,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "jay@jayschwa.net",
            "sender_full_name": "Jay Weisskopf Petacat (W2'17)",
            "sender_id": 829,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "compare slices",
            "submessages": [],
            "timestamp": 1372888403,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/5ac24ef595f7d1cd016bc3de24f78e60?d=identicon&version=1",
            "client": "website",
            "content": "<p>I'm trying to fix openshift support for go, and I'm running into the problem described here: <a href=\"http://comments.gmane.org/gmane.comp.lang.go.general/102486\" target=\"_blank\" title=\"http://comments.gmane.org/gmane.comp.lang.go.general/102486\">http://comments.gmane.org/gmane.comp.lang.go.general/102486</a>.</p>\n<p>Can anyone explain to me what that error means?</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 8011883,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "simon@simonmweber.com",
            "sender_full_name": "Simon Weber (he) (S'13)",
            "sender_id": 2111,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "go get error",
            "submessages": [],
            "timestamp": 1373926118,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/5ac24ef595f7d1cd016bc3de24f78e60?d=identicon&version=1",
            "client": "website",
            "content": "<p>The specific instance of the error is: <a href=\"http://pastebin.com/E0azARBM\" target=\"_blank\" title=\"http://pastebin.com/E0azARBM\">http://pastebin.com/E0azARBM</a>.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 8011894,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "simon@simonmweber.com",
            "sender_full_name": "Simon Weber (he) (S'13)",
            "sender_id": 2111,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "go get error",
            "submessages": [],
            "timestamp": 1373926159,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/1380ded36dafac0d6f808b9b7b6c4e85266428a1?x=x&version=1",
            "client": "website",
            "content": "<p>I don't know if I've ever mentioned this library, but it rules for pretty printing data structures with field names and values:  <a href=\"https://github.com/davecgh/go-spew\" target=\"_blank\" title=\"https://github.com/davecgh/go-spew\">https://github.com/davecgh/go-spew</a></p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 8525815,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "travis@mcdem.us",
            "sender_full_name": "Travis McDemus (S'13)",
            "sender_id": 2139,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "3rd party libraries",
            "submessages": [],
            "timestamp": 1375134024,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/5ac24ef595f7d1cd016bc3de24f78e60?d=identicon&version=1",
            "client": "website",
            "content": "<p>it's got my thoughts on go, for those interested: <a href=\"http://www.simonmweber.com/2013/07/31/go-openshift-and-strangers.html\" target=\"_blank\" title=\"http://www.simonmweber.com/2013/07/31/go-openshift-and-strangers.html\">http://www.simonmweber.com/2013/07/31/go-openshift-and-strangers.html</a></p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 8604820,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "simon@simonmweber.com",
            "sender_full_name": "Simon Weber (he) (S'13)",
            "sender_id": 2111,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "blog post",
            "submessages": [],
            "timestamp": 1375305902,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/3d7b72d70ff07f8186126a4464bc6166?d=identicon&version=1",
            "client": "website",
            "content": "<p>hackerschool, you've seriously spoiled me for the outside world. i was looking into subscribing to <a href=\"https://groups.google.com/forum/#!forum/golang-nuts\" target=\"_blank\" title=\"https://groups.google.com/forum/#!forum/golang-nuts\">golang-nuts</a> &amp; i spent the next 3 minutes laughing or rolling my eyes. THE INTERNET, HOW ARE YOU SO RIDICULOUS.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 8891025,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "emmbeezee@gmail.com",
            "sender_full_name": "Maggie Zhou (she) (S'13)",
            "sender_id": 2161,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "golang-nuts",
            "submessages": [],
            "timestamp": 1375980548,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/3d7b72d70ff07f8186126a4464bc6166?d=identicon&version=1",
            "client": "website",
            "content": "<p>direct quote: \"How can you call your self a C-like language and NOT have the ternary<br>\noperator? But seriously, why isn't it in Go? This could be a deal-<br>\nbreaker for me\"</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 8891028,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "emmbeezee@gmail.com",
            "sender_full_name": "Maggie Zhou (she) (S'13)",
            "sender_id": 2161,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "golang-nuts",
            "submessages": [],
            "timestamp": 1375980564,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/a179bb8c3fc4ab0975954f57d47fa6c53a8c2dad?x=x&version=2",
            "client": "website",
            "content": "<p>Cripes, even Go itself builds super fast. After unzipping the source tarball, I had a working toolchain in 2 minutes.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 9024053,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "jay@jayschwa.net",
            "sender_full_name": "Jay Weisskopf Petacat (W2'17)",
            "sender_id": 829,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "build speed",
            "submessages": [],
            "timestamp": 1376322045,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/3d7b72d70ff07f8186126a4464bc6166?d=identicon&version=1",
            "client": "website",
            "content": "<p>YAY you've joined the go chain! </p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 9024055,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "emmbeezee@gmail.com",
            "sender_full_name": "Maggie Zhou (she) (S'13)",
            "sender_id": 2161,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "build speed",
            "submessages": [],
            "timestamp": 1376322069,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/a179bb8c3fc4ab0975954f57d47fa6c53a8c2dad?x=x&version=2",
            "client": "website",
            "content": "<p>I was in the Go stream *before* it was mainstream <img alt=\":wink:\" class=\"emoji\" src=\"static/third/gemoji/images/emoji/wink.png\" title=\":wink:\"> </p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 9024068,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "jay@jayschwa.net",
            "sender_full_name": "Jay Weisskopf Petacat (W2'17)",
            "sender_id": 829,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "build speed",
            "submessages": [],
            "timestamp": 1376322109,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/a179bb8c3fc4ab0975954f57d47fa6c53a8c2dad?x=x&version=2",
            "client": "website",
            "content": "<p>Considering how fast the toolchain built, I'd guess the source for Go itself must be relatively small and sanely organized. It might be fun to tinker with it.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 9024129,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "jay@jayschwa.net",
            "sender_full_name": "Jay Weisskopf Petacat (W2'17)",
            "sender_id": 829,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "build speed",
            "submessages": [],
            "timestamp": 1376322198,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/a179bb8c3fc4ab0975954f57d47fa6c53a8c2dad?x=x&version=2",
            "client": "website",
            "content": "<p>Has anybody else built the toolchain? Apparently godoc got moved out of the main repo and into the go.tools repo some time ago, but I can't figure out how to build it.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 9107769,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "jay@jayschwa.net",
            "sender_full_name": "Jay Weisskopf Petacat (W2'17)",
            "sender_id": 829,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "toolchain",
            "submessages": [],
            "timestamp": 1376507551,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/a179bb8c3fc4ab0975954f57d47fa6c53a8c2dad?x=x&version=2",
            "client": "website",
            "content": "<p>Just found relevant issue. I might be on the right track now. <a href=\"https://code.google.com/p/go/issues/detail?id=6010\" target=\"_blank\" title=\"https://code.google.com/p/go/issues/detail?id=6010\">https://code.google.com/p/go/issues/detail?id=6010</a></p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 9107864,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "jay@jayschwa.net",
            "sender_full_name": "Jay Weisskopf Petacat (W2'17)",
            "sender_id": 829,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "toolchain",
            "submessages": [],
            "timestamp": 1376507720,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/aa92b21f4a06f87dae635ed43f9595f5?d=identicon&version=1",
            "client": "website",
            "content": "<p>does Go have a fold/reduce function?</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 9277801,
            "is_me_message": false,
            "last_edit_timestamp": 1377022876,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "robert.buonpastore@gmail.com",
            "sender_full_name": "Robert Buonpastore (S'13)",
            "sender_id": 2126,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "fold/reduce",
            "submessages": [],
            "timestamp": 1376928113,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/1380ded36dafac0d6f808b9b7b6c4e85266428a1?x=x&version=1",
            "client": "website",
            "content": "<p>Officially, no.  This is because Go doesn't have generics (yet - <a href=\"http://golang.org/doc/faq#generics\" target=\"_blank\" title=\"http://golang.org/doc/faq#generics\">http://golang.org/doc/faq#generics</a>). </p>\n<p>Someone tacked on a prototype system to Go that has Map, Reduce, Filter, etc. :<br>\n<a href=\"https://github.com/eblume/proto\" target=\"_blank\" title=\"https://github.com/eblume/proto\">https://github.com/eblume/proto</a></p>\n<p>I haven't checked it out - I'm not sure how it is using interface{} and reflection, but there could be  speed decrease when leveraging those Go features. </p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 9320715,
            "is_me_message": false,
            "last_edit_timestamp": 1377022851,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "travis@mcdem.us",
            "sender_full_name": "Travis McDemus (S'13)",
            "sender_id": 2139,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "fold/reduce",
            "submessages": [],
            "timestamp": 1377022525,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/aa92b21f4a06f87dae635ed43f9595f5?d=identicon&version=1",
            "client": "website",
            "content": "<p>thanks for the super delayed response. <img alt=\":smiley:\" class=\"emoji\" src=\"static/third/gemoji/images/emoji/smiley.png\" title=\":smiley:\"> </p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 9320769,
            "is_me_message": false,
            "last_edit_timestamp": 1377022888,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "robert.buonpastore@gmail.com",
            "sender_full_name": "Robert Buonpastore (S'13)",
            "sender_id": 2126,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "fold/reduce",
            "submessages": [],
            "timestamp": 1377022628,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/3d7b72d70ff07f8186126a4464bc6166?d=identicon&version=1",
            "client": "website",
            "content": "<p>Huh. I would...never think to use fold/reduce in a language like Go. It doesn't seem idiomatic. Y'all functional programmers be craaaayyyy. I'm not sure what the recursion speed hit in Go is, but I suspect the answer is \"better than python, worse than C\"</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 9320774,
            "is_me_message": false,
            "last_edit_timestamp": 1377022892,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "emmbeezee@gmail.com",
            "sender_full_name": "Maggie Zhou (she) (S'13)",
            "sender_id": 2161,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "fold/reduce",
            "submessages": [],
            "timestamp": 1377022664,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/aa92b21f4a06f87dae635ed43f9595f5?d=identicon&version=1",
            "client": "website",
            "content": "<p>it blows my mind that Go didn't have generics out of the box. did they not learn from java, c#?</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 9320777,
            "is_me_message": false,
            "last_edit_timestamp": 1377022895,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "robert.buonpastore@gmail.com",
            "sender_full_name": "Robert Buonpastore (S'13)",
            "sender_id": 2126,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "fold/reduce",
            "submessages": [],
            "timestamp": 1377022671,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/3d7b72d70ff07f8186126a4464bc6166?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"robert.buonpastore@gmail.com\">@Rob Buonpastore</span> what do you mean?</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 9320805,
            "is_me_message": false,
            "last_edit_timestamp": 1377022898,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "emmbeezee@gmail.com",
            "sender_full_name": "Maggie Zhou (she) (S'13)",
            "sender_id": 2161,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "fold/reduce",
            "submessages": [],
            "timestamp": 1377022686,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/aa92b21f4a06f87dae635ed43f9595f5?d=identicon&version=1",
            "client": "website",
            "content": "<p>umm i'm not sure what do you mean what do i mean?</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 9320826,
            "is_me_message": false,
            "last_edit_timestamp": 1377022902,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "robert.buonpastore@gmail.com",
            "sender_full_name": "Robert Buonpastore (S'13)",
            "sender_id": 2126,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "fold/reduce",
            "submessages": [],
            "timestamp": 1377022720,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/aa92b21f4a06f87dae635ed43f9595f5?d=identicon&version=1",
            "client": "website",
            "content": "<p>java didn't have generics until jdk5 so everyone was stuck casting everything</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 9320831,
            "is_me_message": false,
            "last_edit_timestamp": 1377022905,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "robert.buonpastore@gmail.com",
            "sender_full_name": "Robert Buonpastore (S'13)",
            "sender_id": 2126,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "fold/reduce",
            "submessages": [],
            "timestamp": 1377022753,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/3d7b72d70ff07f8186126a4464bc6166?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"robert.buonpastore@gmail.com\">@Rob Buonpastore</span> I wanted to hear an argument for generics. I honestly don't think they're worth the additional complexity in most cases (have you SEEN HOW VERBOSE JAVA GETS)</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 9320833,
            "is_me_message": false,
            "last_edit_timestamp": 1377022907,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "emmbeezee@gmail.com",
            "sender_full_name": "Maggie Zhou (she) (S'13)",
            "sender_id": 2161,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "fold/reduce",
            "submessages": [],
            "timestamp": 1377022758,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/aa92b21f4a06f87dae635ed43f9595f5?d=identicon&version=1",
            "client": "website",
            "content": "<p>yes and without generics its worse, i'm talking about collections particularly.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 9320844,
            "is_me_message": false,
            "last_edit_timestamp": 1377022910,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "robert.buonpastore@gmail.com",
            "sender_full_name": "Robert Buonpastore (S'13)",
            "sender_id": 2126,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "fold/reduce",
            "submessages": [],
            "timestamp": 1377022796,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/3d7b72d70ff07f8186126a4464bc6166?d=identicon&version=1",
            "client": "website",
            "content": "<p>*shrug* the casting always seemed to me due to poor otherwise code design.....with generics, in cases in which you'd otherwise cast you end up just &lt;&lt;&lt;&lt;&gt;&gt;&gt;&gt;&gt; all over the place</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 9320867,
            "is_me_message": false,
            "last_edit_timestamp": 1377022913,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "emmbeezee@gmail.com",
            "sender_full_name": "Maggie Zhou (she) (S'13)",
            "sender_id": 2161,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "fold/reduce",
            "submessages": [],
            "timestamp": 1377022806,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/aa92b21f4a06f87dae635ed43f9595f5?d=identicon&version=1",
            "client": "website",
            "content": "<p>how would you design around it? you wouldn't be able to call methods since Java boxes everything it puts in a collection.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 9320945,
            "is_me_message": false,
            "last_edit_timestamp": 1377029171,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "robert.buonpastore@gmail.com",
            "sender_full_name": "Robert Buonpastore (S'13)",
            "sender_id": 2126,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "generics",
            "submessages": [],
            "timestamp": 1377022947,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/aa92b21f4a06f87dae635ed43f9595f5?d=identicon&version=1",
            "client": "website",
            "content": "<p>but Go's a different language so I'm definitely talking over my head when it comes to generics in Go.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 9320961,
            "is_me_message": false,
            "last_edit_timestamp": 1377029190,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "robert.buonpastore@gmail.com",
            "sender_full_name": "Robert Buonpastore (S'13)",
            "sender_id": 2126,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "generics",
            "submessages": [],
            "timestamp": 1377023032,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/3d7b72d70ff07f8186126a4464bc6166?d=identicon&version=1",
            "client": "website",
            "content": "<p>what do you mean by \"java boxes everything it puts in a collection\"? This conversation might be better done in person. I'm not completely sure how you're using vocab.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 9320996,
            "is_me_message": false,
            "last_edit_timestamp": 1377029382,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "emmbeezee@gmail.com",
            "sender_full_name": "Maggie Zhou (she) (S'13)",
            "sender_id": 2161,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "generics",
            "submessages": [],
            "timestamp": 1377023050,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/aa92b21f4a06f87dae635ed43f9595f5?d=identicon&version=1",
            "client": "website",
            "content": "<p>haha perhaps. In pre-jdk5 if you create a collection and add an instance of some class <code>Foo</code> to a collection, when you pull it out of the collection Java doesn't know it is a <code>Foo</code>, only that it is an <code>Object</code> so you have to cast it.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 9321070,
            "is_me_message": false,
            "last_edit_timestamp": 1377029390,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "robert.buonpastore@gmail.com",
            "sender_full_name": "Robert Buonpastore (S'13)",
            "sender_id": 2126,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "generics",
            "submessages": [],
            "timestamp": 1377023203,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/c52df4d54166ed7db0141bdb21c7935e502d6ddc?x=x&version=1",
            "client": "website",
            "content": "<p>ML's an example of an imperative language with generics not overburdened with declarations.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 9321299,
            "is_me_message": false,
            "last_edit_timestamp": 1377029394,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "darius@wry.me",
            "sender_full_name": "Darius Bacon (W1'16)",
            "sender_id": 902,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "generics",
            "submessages": [],
            "timestamp": 1377023570,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/c52df4d54166ed7db0141bdb21c7935e502d6ddc?x=x&version=1",
            "client": "website",
            "content": "<p>It does make it harder for the compiler to allocate things unboxed -- so Go's design doesn't seem crazy.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 9321313,
            "is_me_message": false,
            "last_edit_timestamp": 1377029399,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "darius@wry.me",
            "sender_full_name": "Darius Bacon (W1'16)",
            "sender_id": 902,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "generics",
            "submessages": [],
            "timestamp": 1377023628,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/aa92b21f4a06f87dae635ed43f9595f5?d=identicon&version=1",
            "client": "website",
            "content": "<p>boxes wasn't the right word, though I suppose it would box if you were to add a primitive like <code>int</code> to a collection.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 9321315,
            "is_me_message": false,
            "last_edit_timestamp": 1377029404,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "robert.buonpastore@gmail.com",
            "sender_full_name": "Robert Buonpastore (S'13)",
            "sender_id": 2126,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "generics",
            "submessages": [],
            "timestamp": 1377023630,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/a179bb8c3fc4ab0975954f57d47fa6c53a8c2dad?x=x&version=2",
            "client": "website",
            "content": "<p>Go uses empty interfaces for supporting multiple types. I really don't care for it though. It wrecks static type checking and reflection is very slow. I hope they improve this one day.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 9321616,
            "is_me_message": false,
            "last_edit_timestamp": 1377029409,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "jay@jayschwa.net",
            "sender_full_name": "Jay Weisskopf Petacat (W2'17)",
            "sender_id": 829,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "generics",
            "submessages": [],
            "timestamp": 1377024225,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/727381701627014419ca0b85a84c6ae7?d=identicon&version=1",
            "client": "website",
            "content": "<p>I honestly think that a static typed language needs some kind of generic programming, in order to follow the DRY principle. <br>\nTry to use one of these packages: <br>\n<a href=\"http://golang.org/pkg/container/\" target=\"_blank\" title=\"http://golang.org/pkg/container/\">http://golang.org/pkg/container/</a><br>\nDo you honestly think it's OK to perform a cast every time you need the actual type?<br>\nAnd what's the point of using a static typed language if every time you need a flexible data structure you have to use the <code>interface{}</code> type?</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 9324172,
            "is_me_message": false,
            "last_edit_timestamp": 1377029361,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "paolo.moretti85@gmail.com",
            "sender_full_name": "Paolo Moretti (S'13)",
            "sender_id": 2114,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "generics",
            "submessages": [],
            "timestamp": 1377028881,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/c52df4d54166ed7db0141bdb21c7935e502d6ddc?x=x&version=1",
            "client": "website",
            "content": "<p>More re data representations: there's one ML compiler that works hard at keeping data unboxed, mlton, but it relies on whole-program analysis, which takes a long time. Go prioritizes fast compiles and predictably efficient data representation. I don't know of a system that has those and generics too -- maybe C#?</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 9324427,
            "is_me_message": false,
            "last_edit_timestamp": 1377029370,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "darius@wry.me",
            "sender_full_name": "Darius Bacon (W1'16)",
            "sender_id": 902,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "generics",
            "submessages": [],
            "timestamp": 1377029334,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/aa92b21f4a06f87dae635ed43f9595f5?d=identicon&version=1",
            "client": "website",
            "content": "<p>What are the disadvantages of boxing aside from a performance hit?</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 9324858,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "robert.buonpastore@gmail.com",
            "sender_full_name": "Robert Buonpastore (S'13)",
            "sender_id": 2126,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "generics",
            "submessages": [],
            "timestamp": 1377030138,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/727381701627014419ca0b85a84c6ae7?d=identicon&version=1",
            "client": "website",
            "content": "<p>Yeah,  generics implementation in Java is really inefficient, since Java simply stores all type parameter data as <code>Object</code> class references and do the upcasts for you.<br>\nIn C# instead the JIT compiler  compiles every use of the generic class into a separate native code, so there is no boxing/unboxing/casts.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 9324931,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "paolo.moretti85@gmail.com",
            "sender_full_name": "Paolo Moretti (S'13)",
            "sender_id": 2114,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "generics",
            "submessages": [],
            "timestamp": 1377030295,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/aa92b21f4a06f87dae635ed43f9595f5?d=identicon&version=1",
            "client": "website",
            "content": "<p>nice.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 9325078,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "robert.buonpastore@gmail.com",
            "sender_full_name": "Robert Buonpastore (S'13)",
            "sender_id": 2126,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "generics",
            "submessages": [],
            "timestamp": 1377030542,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/eac0aafb77a926e0ef53779ce873a472?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"paolo.moretti85@gmail.com\">@Paolo Moretti</span> Java approach to generics (a fiction) is also awesome for dynamic languages. Reified generics as far as I understand it complicate implementation.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 9325131,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "david.nolen@gmail.com",
            "sender_full_name": "David Nolen",
            "sender_id": 931,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "generics",
            "submessages": [],
            "timestamp": 1377030606,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/a179bb8c3fc4ab0975954f57d47fa6c53a8c2dad?x=x&version=2",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"paolo.moretti85@gmail.com\">@Paolo Moretti</span>, I hadn't really examined the container package before, but that looks like a pretty good case for generics. <code>interface{}</code> everywhere and casting smells bad.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 9325265,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "jay@jayschwa.net",
            "sender_full_name": "Jay Weisskopf Petacat (W2'17)",
            "sender_id": 829,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "generics",
            "submessages": [],
            "timestamp": 1377030790,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/727381701627014419ca0b85a84c6ae7?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"david.nolen@gmail.com\">@David Nolen</span>  Yeah, I agree. But in C# you can always use the <code>dynamic</code> type that basically bypasses the static type checking</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 9325438,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "paolo.moretti85@gmail.com",
            "sender_full_name": "Paolo Moretti (S'13)",
            "sender_id": 2114,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "generics",
            "submessages": [],
            "timestamp": 1377031146,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/3d7b72d70ff07f8186126a4464bc6166?d=identicon&version=1",
            "client": "website",
            "content": "<p>I found this <a href=\"http://www.jprl.com/Blog/archive/development/2007/Aug-31.html\" target=\"_blank\" title=\"http://www.jprl.com/Blog/archive/development/2007/Aug-31.html\">discussion</a> while doing some googling on C# vs java generics, if it's of interest to any of y'all.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 9325909,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "emmbeezee@gmail.com",
            "sender_full_name": "Maggie Zhou (she) (S'13)",
            "sender_id": 2161,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "generics",
            "submessages": [],
            "timestamp": 1377031977,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/eac0aafb77a926e0ef53779ce873a472?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"paolo.moretti85@gmail.com\">@Paolo Moretti</span> but is something that's well supported at the CLR level? And do dynamic languages have to eat a cost to interop w/ host reified generic types.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 9325965,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "david.nolen@gmail.com",
            "sender_full_name": "David Nolen",
            "sender_id": 931,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "generics",
            "submessages": [],
            "timestamp": 1377032077,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/727381701627014419ca0b85a84c6ae7?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"david.nolen@gmail.com\">@David Nolen</span>  From the perspective of the CLR, there is no such thing as dynamic: <br>\nby the time the code actually runs, all instances of <code>dynamic</code> have been replaced with <code>object</code> in the generated code.</p>\n<p>The DLR (Dynamic Language Runtime) treats expressions of type dynamic exactly as expressions of type object, except that all operations on the value of that expression are analyzed, compiled and executed at runtime based on the runtime type of the instance:<br>\n<a href=\"http://stackoverflow.com/a/7480977/63011\" target=\"_blank\" title=\"http://stackoverflow.com/a/7480977/63011\">http://stackoverflow.com/a/7480977/63011</a></p>\n<p>Here's are some benchmarks:<br>\n<a href=\"http://stackoverflow.com/a/13193865/63011\" target=\"_blank\" title=\"http://stackoverflow.com/a/13193865/63011\">http://stackoverflow.com/a/13193865/63011</a></p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 9326947,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "paolo.moretti85@gmail.com",
            "sender_full_name": "Paolo Moretti (S'13)",
            "sender_id": 2114,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "generics",
            "submessages": [],
            "timestamp": 1377033830,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/eac0aafb77a926e0ef53779ce873a472?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"paolo.moretti85@gmail.com\">@Paolo Moretti</span> thank for the links!</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 9327353,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "david.nolen@gmail.com",
            "sender_full_name": "David Nolen",
            "sender_id": 931,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "generics",
            "submessages": [],
            "timestamp": 1377034531,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/1380ded36dafac0d6f808b9b7b6c4e85266428a1?x=x&version=1",
            "client": "desktop app 0.3.6",
            "content": "<p>I'm messing around  with data structures.<br>\nHere's an example of using the <code>interface{}</code> type as a replacement for generics:<br>\n<a href=\"https://gist.github.com/aoeu/6481141\" target=\"_blank\" title=\"https://gist.github.com/aoeu/6481141\">https://gist.github.com/aoeu/6481141</a></p>\n<p>Note that Go is keeping track of the underlying type when I pop values back out of the stack - what I'm getting back from the stack isn't an <code>interface{}</code> type, it is an int or whatever I pushed in.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 9982757,
            "is_me_message": false,
            "last_edit_timestamp": 1378604712,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "travis@mcdem.us",
            "sender_full_name": "Travis McDemus (S'13)",
            "sender_id": 2139,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "generics",
            "submessages": [],
            "timestamp": 1378604249,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/a179bb8c3fc4ab0975954f57d47fa6c53a8c2dad?x=x&version=2",
            "client": "website",
            "content": "<p>I haven't tested it yet, but I'm pretty sure you're getting back an <code>interface{}</code>. The reason it appears to work is because the <code>==</code> and <code>!=</code> operators are smart enough to compare against the underlying primitive or struct. If you were to try passing one of <code>Pop</code>'s return values to a function that had an <code>int</code> or <code>string</code> parameter, it would be a type mismatch compilation error.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 9983237,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "jay@jayschwa.net",
            "sender_full_name": "Jay Weisskopf Petacat (W2'17)",
            "sender_id": 829,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "generics",
            "submessages": [],
            "timestamp": 1378605422,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/a179bb8c3fc4ab0975954f57d47fa6c53a8c2dad?x=x&version=2",
            "client": "website",
            "content": "<p>Okay, now I've tested: <a href=\"http://play.golang.org/p/GnPNRVI9CC\" target=\"_blank\" title=\"http://play.golang.org/p/GnPNRVI9CC\">http://play.golang.org/p/GnPNRVI9CC</a></p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 9983380,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "jay@jayschwa.net",
            "sender_full_name": "Jay Weisskopf Petacat (W2'17)",
            "sender_id": 829,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "generics",
            "submessages": [],
            "timestamp": 1378605751,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/1380ded36dafac0d6f808b9b7b6c4e85266428a1?x=x&version=1",
            "client": "desktop app 0.3.6",
            "content": "<p>And here I thought my IntStack , StringStack, etc. were unecessary for a minute... <br>\nIt is really annoying to me that the == and != operators examine the primitives and none of the others do. <br>\nAll or nothing preferred. </p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 10011756,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "travis@mcdem.us",
            "sender_full_name": "Travis McDemus (S'13)",
            "sender_id": 2139,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "generics",
            "submessages": [],
            "timestamp": 1378678105,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/1380ded36dafac0d6f808b9b7b6c4e85266428a1?x=x&version=1",
            "client": "desktop app 0.3.6",
            "content": "<p>Has anyone dealt with a lot of JSON via Go?<br>\n</p>\n<p>If so, are you marshalling / unmarshalling to explicitly built structs, unboxing maps and slices of interfaces as you use the values,  or using a library to help you along with the process? </p>\n<p>I typically do the first of those options, but its consistenly easier to use gobs. Looking for JSON pro-tips since a few people out in the Real World seem to like JSON as a format.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 10532755,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "travis@mcdem.us",
            "sender_full_name": "Travis McDemus (S'13)",
            "sender_id": 2139,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "JSON",
            "submessages": [],
            "timestamp": 1379816065,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/a179bb8c3fc4ab0975954f57d47fa6c53a8c2dad?x=x&version=2",
            "client": "website",
            "content": "<p>What kind of data are you reading in?</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 10536541,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "jay@jayschwa.net",
            "sender_full_name": "Jay Weisskopf Petacat (W2'17)",
            "sender_id": 829,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "JSON",
            "submessages": [],
            "timestamp": 1379824999,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/c5b4e77efa6e623fbd38ca2747865ce7?d=identicon&version=1",
            "client": "website",
            "content": "<p>I haven't done it in Go specifically, but C# also allows you to tag class members as JSON properties and unmarshal the whole class. Usually I'd write a set of classes that mirror the structure of the JSON document and then have a pass that transforms them into whatever internal data structures my program uses. You get type safety (sorta) and a declarative language for specifying the document structure, which I find nice.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 10541144,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "martin@tornwall.net",
            "sender_full_name": "Martin T\u00f6rnwall (S'13)",
            "sender_id": 2124,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "JSON",
            "submessages": [],
            "timestamp": 1379836931,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/a179bb8c3fc4ab0975954f57d47fa6c53a8c2dad?x=x&version=2",
            "client": "website",
            "content": "<p>Yeah, I feel like <code>struct</code>s would still be the way to do it in Go as well. If the data you're reading in doesn't conform to any of the <code>struct</code>s, return an <code>error</code>.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 10554106,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "jay@jayschwa.net",
            "sender_full_name": "Jay Weisskopf Petacat (W2'17)",
            "sender_id": 829,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "JSON",
            "submessages": [],
            "timestamp": 1379872700,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/5ac24ef595f7d1cd016bc3de24f78e60?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"travis@mcdem.us\">@Travis McDemus</span> I think structs are absolutely the way to go if you know what you're dealing with in advance -- it's simple and reads well.</p>\n<p><a href=\"https://github.com/bitly/go-simplejson\" target=\"_blank\" title=\"https://github.com/bitly/go-simplejson\">https://github.com/bitly/go-simplejson</a> eased some of the pain when I was dealing with arbitrary json.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 10565069,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "simon@simonmweber.com",
            "sender_full_name": "Simon Weber (he) (S'13)",
            "sender_id": 2111,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "JSON",
            "submessages": [],
            "timestamp": 1379899626,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/1380ded36dafac0d6f808b9b7b6c4e85266428a1?x=x&version=1",
            "client": "desktop app Mac 0.3.8",
            "content": "<p>I was going to stop in tomorrow for Alumni thursdays.   I did a crash-course in the cool stuff you can do with Go a couple times in my batch.  Would anyone want to do that tomorrow? It takes about an hour.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 12110636,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "travis@mcdem.us",
            "sender_full_name": "Travis McDemus (S'13)",
            "sender_id": 2139,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "(no topic)",
            "submessages": [],
            "timestamp": 1383167659,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/1380ded36dafac0d6f808b9b7b6c4e85266428a1?x=x&version=1",
            "client": "desktop app Mac 0.3.8",
            "content": "<p>Here's a really presentation / introduction to Go by Brad Fitzpatrick (e.g. creator of Live Journal and memcached, member of the Go team, featured in Coders At Work.)<br>\n<a href=\"http://www.youtube.com/watch?v=GHaXN8G10fI\" target=\"_blank\" title=\"http://www.youtube.com/watch?v=GHaXN8G10fI\">http://www.youtube.com/watch?v=GHaXN8G10fI</a><br>\nHe doesn't teach how to code the language, but really effectively presents what makes Go different, Go's design decisions, and what Go can be good for. </p>\n<div class=\"message_inline_image\"><a href=\"http://www.youtube.com/watch?v=GHaXN8G10fI\" target=\"_blank\" title=\"http://www.youtube.com/watch?v=GHaXN8G10fI\"><img src=\"https://i.ytimg.com/vi/GHaXN8G10fI/default.jpg\"></a></div>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 12118487,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "travis@mcdem.us",
            "sender_full_name": "Travis McDemus (S'13)",
            "sender_id": 2139,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "talks and learning resources",
            "submessages": [],
            "timestamp": 1383182060,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/1380ded36dafac0d6f808b9b7b6c4e85266428a1?x=x&version=1",
            "client": "desktop app Mac 0.3.9",
            "content": "<p>I condensed some links and info into a blog post:<br>\n<a href=\"http://bitbarf.in/blog/2013/11/05/an-abridged-introduction-to-go/\" target=\"_blank\" title=\"http://bitbarf.in/blog/2013/11/05/an-abridged-introduction-to-go/\">http://bitbarf.in/blog/2013/11/05/an-abridged-introduction-to-go/</a></p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 12365761,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "travis@mcdem.us",
            "sender_full_name": "Travis McDemus (S'13)",
            "sender_id": 2139,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "talks and learning resources",
            "submessages": [],
            "timestamp": 1383682104,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/eb83a236abf1b10c096dc6b656ae856aa58dfeee?x=x&version=2",
            "client": "website",
            "content": "<p>What do you guys think of using <a href=\"http://blog.labix.org/2011/10/09/death-of-goroutines-under-control\" target=\"_blank\" title=\"http://blog.labix.org/2011/10/09/death-of-goroutines-under-control\">http://blog.labix.org/2011/10/09/death-of-goroutines-under-control</a> and <a href=\"http://godoc.org/launchpad.net/tomb\" target=\"_blank\" title=\"http://godoc.org/launchpad.net/tomb\">http://godoc.org/launchpad.net/tomb</a>?</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 12369776,
            "is_me_message": false,
            "last_edit_timestamp": 1383687523,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "jari@takkala.net",
            "sender_full_name": "Jari Takkala (F2'17)",
            "sender_id": 2853,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "concurrency",
            "submessages": [],
            "timestamp": 1383687510,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/eb83a236abf1b10c096dc6b656ae856aa58dfeee?x=x&version=2",
            "client": "website",
            "content": "<p>Anyone know how to iterate over a slice like you do with range, but in an unsorted fashion?</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 12511414,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "jari@takkala.net",
            "sender_full_name": "Jari Takkala (F2'17)",
            "sender_id": 2853,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "unsorted range",
            "submessages": [],
            "timestamp": 1383944746,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/eb83a236abf1b10c096dc6b656ae856aa58dfeee?x=x&version=2",
            "client": "website",
            "content": "<p>nevermind, I was using foo := range ... instead of _, foo := range ....</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 12511562,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "jari@takkala.net",
            "sender_full_name": "Jari Takkala (F2'17)",
            "sender_id": 2853,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "unsorted range",
            "submessages": [],
            "timestamp": 1383944966,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/1380ded36dafac0d6f808b9b7b6c4e85266428a1?x=x&version=1",
            "client": "website",
            "content": "<p>Long version:  I've seen Tomb before and understand what it adds, but I haven't run into any case where I'd need or want to use it. <br>\nWhen I use goroutines and channels, I'm usually kicking off a function with the go keyword, feeding it a channel as a parameter (to return data on), and then forgetting about it.  I know the data I need will come back on the channel, any errors could come back on a separate channel, and I can clean up nicely by using a separate \"quit\" channel. The appeal is I don't have to do any book-keeping with the goroutines - Tomb, however, adds features for book-keeping goroutines.  Tomb seems philosophically contradictory from the built in concurrency features, but maybe I'm not understanding the type of problem it's good for.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 12568274,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "travis@mcdem.us",
            "sender_full_name": "Travis McDemus (S'13)",
            "sender_id": 2139,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "concurrency",
            "submessages": [],
            "timestamp": 1384049184,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/1380ded36dafac0d6f808b9b7b6c4e85266428a1?x=x&version=1",
            "client": "website",
            "content": "<p>Short version:  I haven't run into a concurrency problem that I would want or need Tomb for.  What sorts of problems would it be useful for? (It's extremely possible I don't work with the sort of problems that Tomb caters to.) </p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 12568308,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "travis@mcdem.us",
            "sender_full_name": "Travis McDemus (S'13)",
            "sender_id": 2139,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "concurrency",
            "submessages": [],
            "timestamp": 1384049288,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/1380ded36dafac0d6f808b9b7b6c4e85266428a1?x=x&version=1",
            "client": "desktop app Mac 0.3.10",
            "content": "<p>Today is Go's fourth birthday. They wrote up a \"state of the language\" article and Go is getting used in production for some pretty cool stuff:  <a href=\"http://blog.golang.org/4years\" target=\"_blank\" title=\"http://blog.golang.org/4years\">http://blog.golang.org/4years</a></p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 12609106,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "travis@mcdem.us",
            "sender_full_name": "Travis McDemus (S'13)",
            "sender_id": 2139,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "talks and learning resources",
            "submessages": [],
            "timestamp": 1384139129,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/a179bb8c3fc4ab0975954f57d47fa6c53a8c2dad?x=x&version=2",
            "client": "website",
            "content": "<p>If I have my druthers, Go will eventually be used in production at eBay for a service I'm slated to rewrite in the coming year or so. <img alt=\":wink:\" class=\"emoji\" src=\"static/third/gemoji/images/emoji/wink.png\" title=\":wink:\"> </p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 12610758,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "jay@jayschwa.net",
            "sender_full_name": "Jay Weisskopf Petacat (W2'17)",
            "sender_id": 829,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "talks and learning resources",
            "submessages": [],
            "timestamp": 1384142844,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/3d7b72d70ff07f8186126a4464bc6166?d=identicon&version=1",
            "client": "website",
            "content": "<p>+1</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 12610811,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "emmbeezee@gmail.com",
            "sender_full_name": "Maggie Zhou (she) (S'13)",
            "sender_id": 2161,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "talks and learning resources",
            "submessages": [],
            "timestamp": 1384142948,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/eb83a236abf1b10c096dc6b656ae856aa58dfeee?x=x&version=2",
            "client": "website",
            "content": "<p><a href=\"http://nf.wh3rd.net/10things\" target=\"_blank\" title=\"http://nf.wh3rd.net/10things\">http://nf.wh3rd.net/10things</a></p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 12642696,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "jari@takkala.net",
            "sender_full_name": "Jari Takkala (F2'17)",
            "sender_id": 2853,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "tips",
            "submessages": [],
            "timestamp": 1384197237,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/3d8a0205f76df6ec7742292f8635addd71801017?x=x&version=1",
            "client": "desktop app Mac 0.3.8",
            "content": "<p>Tip #8 (Send and receive on the same channel) is really strange. I've been looking at it for a couple minutes and am still trying to understand what it's doing. </p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 12645631,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "briandignan@gmail.com",
            "sender_full_name": "Brian Dignan (F'13)",
            "sender_id": 2886,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "tips",
            "submessages": [],
            "timestamp": 1384201530,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/3d8a0205f76df6ec7742292f8635addd71801017?x=x&version=1",
            "client": "desktop app Mac 0.3.8",
            "content": "<p>Tip #8 from that link is a weird adaptation of the match function from this link: <a href=\"http://talks.golang.org/2012/chat.slide#22\" target=\"_blank\" title=\"http://talks.golang.org/2012/chat.slide#22\">http://talks.golang.org/2012/chat.slide#22</a></p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 12649402,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "briandignan@gmail.com",
            "sender_full_name": "Brian Dignan (F'13)",
            "sender_id": 2886,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "tips",
            "submessages": [],
            "timestamp": 1384207073,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/3d8a0205f76df6ec7742292f8635addd71801017?x=x&version=1",
            "client": "desktop app Mac 0.3.8",
            "content": "<p>There's a blog post titled \"Share Memory By Communicating\" that discusses concurrency in Go here: <a href=\"http://blog.golang.org/share-memory-by-communicating\" target=\"_blank\" title=\"http://blog.golang.org/share-memory-by-communicating\">http://blog.golang.org/share-memory-by-communicating</a> </p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 12650758,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "briandignan@gmail.com",
            "sender_full_name": "Brian Dignan (F'13)",
            "sender_id": 2886,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "Send copy or reference over channel?",
            "submessages": [],
            "timestamp": 1384209214,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/3d8a0205f76df6ec7742292f8635addd71801017?x=x&version=1",
            "client": "desktop app Mac 0.3.8",
            "content": "<p>I'm a bit confused about a part where it says \"Go encourages the use of channels to pass references to data between goroutines. This approach ensures that only one goroutine has access to the data at a given time. \"</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 12650799,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "briandignan@gmail.com",
            "sender_full_name": "Brian Dignan (F'13)",
            "sender_id": 2886,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "Send copy or reference over channel?",
            "submessages": [],
            "timestamp": 1384209262,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/3d8a0205f76df6ec7742292f8635addd71801017?x=x&version=1",
            "client": "desktop app Mac 0.3.8",
            "content": "<p>If you pass references (instead of copies) over channels between goroutines, wouldn't multiple routines have simultaneous access to the same data at the same time (bad?).   </p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 12650819,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "briandignan@gmail.com",
            "sender_full_name": "Brian Dignan (F'13)",
            "sender_id": 2886,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "Send copy or reference over channel?",
            "submessages": [],
            "timestamp": 1384209315,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/b4d94d953db52e1e7cfc3724b95a6dc906fa9d58?x=x&version=2",
            "client": "website",
            "content": "<p>The distinction made there isn't \"copy vs reference,\" but instead \"pass reference vs both have a reference\"</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 12650893,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "me@ballingt.com",
            "sender_full_name": "Tom Ballinger (he) (W'12)",
            "sender_id": 807,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "Send copy or reference over channel?",
            "submessages": [],
            "timestamp": 1384209466,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/3d8a0205f76df6ec7742292f8635addd71801017?x=x&version=1",
            "client": "desktop app Mac 0.3.8",
            "content": "<p>Thanks. So when one routine is finished with it, it passes it along to the next routine? If multiple goroutines aren't actively using the reference at the same time, then that makes sense.   </p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 12651008,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "briandignan@gmail.com",
            "sender_full_name": "Brian Dignan (F'13)",
            "sender_id": 2886,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "Send copy or reference over channel?",
            "submessages": [],
            "timestamp": 1384209620,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/b4d94d953db52e1e7cfc3724b95a6dc906fa9d58?x=x&version=2",
            "client": "website",
            "content": "<p>That's my take.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 12651422,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "me@ballingt.com",
            "sender_full_name": "Tom Ballinger (he) (W'12)",
            "sender_id": 807,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "Send copy or reference over channel?",
            "submessages": [],
            "timestamp": 1384210235,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/3d8a0205f76df6ec7742292f8635addd71801017?x=x&version=1",
            "client": "desktop app Mac 0.3.8",
            "content": "<p>That makes sense. The idea of passing references around still makes me a little uncomfortable because it presents the possibility of race conditions if multiple goroutines simultaneously read/write to the data. I guess you need to be careful in how you code it.   </p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 12652012,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "briandignan@gmail.com",
            "sender_full_name": "Brian Dignan (F'13)",
            "sender_id": 2886,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "Send copy or reference over channel?",
            "submessages": [],
            "timestamp": 1384211013,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/eb83a236abf1b10c096dc6b656ae856aa58dfeee?x=x&version=2",
            "client": "website",
            "content": "<p>Go Advanced Concurrency Patterns: <a href=\"http://www.youtube.com/watch?v=QDDwwePbDtw\" target=\"_blank\" title=\"http://www.youtube.com/watch?v=QDDwwePbDtw\">http://www.youtube.com/watch?v=QDDwwePbDtw</a>, <a href=\"http://talks.golang.org/2013/advconc.slide#1\" target=\"_blank\" title=\"http://talks.golang.org/2013/advconc.slide#1\">http://talks.golang.org/2013/advconc.slide#1</a></p>\n<div class=\"message_inline_image\"><a href=\"http://www.youtube.com/watch?v=QDDwwePbDtw\" target=\"_blank\" title=\"http://www.youtube.com/watch?v=QDDwwePbDtw\"><img src=\"https://i.ytimg.com/vi/QDDwwePbDtw/default.jpg\"></a></div>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 12681231,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "jari@takkala.net",
            "sender_full_name": "Jari Takkala (F2'17)",
            "sender_id": 2853,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "concurrency",
            "submessages": [],
            "timestamp": 1384271805,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/eb83a236abf1b10c096dc6b656ae856aa58dfeee?x=x&version=2",
            "client": "website",
            "content": "<p>and discussion here, <a href=\"https://news.ycombinator.com/item?id=5760532\" target=\"_blank\" title=\"https://news.ycombinator.com/item?id=5760532\">https://news.ycombinator.com/item?id=5760532</a></p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 12681237,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "jari@takkala.net",
            "sender_full_name": "Jari Takkala (F2'17)",
            "sender_id": 2853,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "concurrency",
            "submessages": [],
            "timestamp": 1384271827,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/1380ded36dafac0d6f808b9b7b6c4e85266428a1?x=x&version=1",
            "client": "desktop app Mac 0.3.10",
            "content": "<p>If you're transmitting any value (this includes references) over a go channel, it is not possible for two goroutines (that each know about the channel) to recieve that single value.  Think of channels like queues - one of the goroutines is going to pop a value off of the channel first. <br>\nNext, you often don't want or need the goroutine to store the reference - if anything, it'll modify the underlying struct or whatever, then send the reference (i.e. feed it into) to another return channel.  Alternatively, maybe one goroutine is processing all \"results\" from that return channel and maintaining a data structure (and is the only goroutine touching that data structure).</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 12692834,
            "is_me_message": false,
            "last_edit_timestamp": 1384288789,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "travis@mcdem.us",
            "sender_full_name": "Travis McDemus (S'13)",
            "sender_id": 2139,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "Send copy or reference over channel?",
            "submessages": [],
            "timestamp": 1384288699,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/1380ded36dafac0d6f808b9b7b6c4e85266428a1?x=x&version=1",
            "client": "desktop app Mac 0.3.10",
            "content": "<p>You Go <span class=\"user-mention\" data-user-email=\"jay@jayschwa.net\">@Jay Weisskopf (W'13)</span> , you Go.   (Yes, puns intended.)</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 12692937,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "travis@mcdem.us",
            "sender_full_name": "Travis McDemus (S'13)",
            "sender_id": 2139,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "talks and learning resources",
            "submessages": [],
            "timestamp": 1384288899,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/3d8a0205f76df6ec7742292f8635addd71801017?x=x&version=1",
            "client": "desktop app Mac 0.3.8",
            "content": "<p>Thanks Travis. Not storing the reference in the receiving goroutine sounds like the key point. </p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 12725810,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "briandignan@gmail.com",
            "sender_full_name": "Brian Dignan (F'13)",
            "sender_id": 2886,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "Send copy or reference over channel?",
            "submessages": [],
            "timestamp": 1384356214,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/1380ded36dafac0d6f808b9b7b6c4e85266428a1?x=x&version=1",
            "client": "desktop app Mac 0.3.10",
            "content": "<p>Brad Fitzpatrick wrote a fork of gofmt to automatically generate and remove imports: <br>\n<a href=\"https://github.com/bradfitz/goimports/\" target=\"_blank\" title=\"https://github.com/bradfitz/goimports/\">https://github.com/bradfitz/goimports/</a></p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 12893856,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "travis@mcdem.us",
            "sender_full_name": "Travis McDemus (S'13)",
            "sender_id": 2139,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "go get github.com/bradfitz/goimports",
            "submessages": [],
            "timestamp": 1384651181,
            "topic_links": [
                "https://github.com/bradfitz/goimports"
            ],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/a179bb8c3fc4ab0975954f57d47fa6c53a8c2dad?x=x&version=2",
            "client": "website",
            "content": "<p>(deleted)</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 13036741,
            "is_me_message": false,
            "last_edit_timestamp": 1384924966,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "jay@jayschwa.net",
            "sender_full_name": "Jay Weisskopf Petacat (W2'17)",
            "sender_id": 829,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "gopher",
            "submessages": [],
            "timestamp": 1384924839,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/eb83a236abf1b10c096dc6b656ae856aa58dfeee?x=x&version=2",
            "client": "website",
            "content": "<p>How do you discover the methods of an error type? If net.DialTCP returns an error, how can I know what methods I can call on the error interface? For example, DialTCP() may contain a net.OpError within the error type, which I can access via a type assertion: err.(*net.OpError). Then I can check if the error matches syscall.ECONNREFUSED. See <a href=\"https://github.com/jtakkala/tulva/blob/master/peer.go#L176-185\" target=\"_blank\" title=\"https://github.com/jtakkala/tulva/blob/master/peer.go#L176-185\">https://github.com/jtakkala/tulva/blob/master/peer.go#L176-185</a> for an example. How do I go about discovering these possible error values? Are they documented somewhere?</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 13564406,
            "is_me_message": false,
            "last_edit_timestamp": 1386009459,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "jari@takkala.net",
            "sender_full_name": "Jari Takkala (F2'17)",
            "sender_id": 2853,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "errors",
            "submessages": [],
            "timestamp": 1386009417,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/a179bb8c3fc4ab0975954f57d47fa6c53a8c2dad?x=x&version=2",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"jari@takkala.net\">@Jari Takkala (F'13)</span> are you referring to possible <code>syscall</code> error values?</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 13564880,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "jay@jayschwa.net",
            "sender_full_name": "Jay Weisskopf Petacat (W2'17)",
            "sender_id": 829,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "errors",
            "submessages": [],
            "timestamp": 1386010024,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/eb83a236abf1b10c096dc6b656ae856aa58dfeee?x=x&version=2",
            "client": "website",
            "content": "<p>I'm wondering first of all how can I find that DialTCP has a net.OpError</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 13564895,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "jari@takkala.net",
            "sender_full_name": "Jari Takkala (F2'17)",
            "sender_id": 2853,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "errors",
            "submessages": [],
            "timestamp": 1386010054,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/eb83a236abf1b10c096dc6b656ae856aa58dfeee?x=x&version=2",
            "client": "website",
            "content": "<p>it doesn't seem to be documented on the package docs</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 13564908,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "jari@takkala.net",
            "sender_full_name": "Jari Takkala (F2'17)",
            "sender_id": 2853,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "errors",
            "submessages": [],
            "timestamp": 1386010073,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/a179bb8c3fc4ab0975954f57d47fa6c53a8c2dad?x=x&version=2",
            "client": "website",
            "content": "<p>You're right, it's not.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 13564955,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "jay@jayschwa.net",
            "sender_full_name": "Jay Weisskopf Petacat (W2'17)",
            "sender_id": 829,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "errors",
            "submessages": [],
            "timestamp": 1386010113,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/a179bb8c3fc4ab0975954f57d47fa6c53a8c2dad?x=x&version=2",
            "client": "website",
            "content": "<p>I guess the only way to tell is by looking at the code (which I'm guessing is how you noticed it in the first place).</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 13564980,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "jay@jayschwa.net",
            "sender_full_name": "Jay Weisskopf Petacat (W2'17)",
            "sender_id": 829,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "errors",
            "submessages": [],
            "timestamp": 1386010163,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/eb83a236abf1b10c096dc6b656ae856aa58dfeee?x=x&version=2",
            "client": "website",
            "content": "<p>I have the same issue with a Conn interface and its Write method, not sure how to know what kinds of possible error values I have to handle</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 13564992,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "jari@takkala.net",
            "sender_full_name": "Jari Takkala (F2'17)",
            "sender_id": 2853,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "errors",
            "submessages": [],
            "timestamp": 1386010196,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/a179bb8c3fc4ab0975954f57d47fa6c53a8c2dad?x=x&version=2",
            "client": "website",
            "content": "<p>Since they're exposing a generic <code>error</code> and not a specialized error type, they probably did not feel special handling was needed. I would personally treat all errors the same way except for very specific cases (such as your example).</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 13565249,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "jay@jayschwa.net",
            "sender_full_name": "Jay Weisskopf Petacat (W2'17)",
            "sender_id": 829,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "errors",
            "submessages": [],
            "timestamp": 1386010494,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/a179bb8c3fc4ab0975954f57d47fa6c53a8c2dad?x=x&version=2",
            "client": "website",
            "content": "<p>For cases like <code>Write</code>, they can't return anything other than <code>error</code> or it wouldn't satisfy the <code>io.Writer</code> interface.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 13565264,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "jay@jayschwa.net",
            "sender_full_name": "Jay Weisskopf Petacat (W2'17)",
            "sender_id": 829,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "errors",
            "submessages": [],
            "timestamp": 1386010524,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/eb83a236abf1b10c096dc6b656ae856aa58dfeee?x=x&version=2",
            "client": "website",
            "content": "<p>it's just a ball ache to discover what those methods are though. I had to do a lot of googling or reading the source. I thought surely there should be a better way to find out the possible values</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 13565355,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "jari@takkala.net",
            "sender_full_name": "Jari Takkala (F2'17)",
            "sender_id": 2853,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "errors",
            "submessages": [],
            "timestamp": 1386010617,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/a179bb8c3fc4ab0975954f57d47fa6c53a8c2dad?x=x&version=2",
            "client": "website",
            "content": "<p>I assume you want to know all possible \"less bad\" errors since you're calling <code>Fatal</code> by default? Perhaps just make any error not fatal?</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 13565358,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "jay@jayschwa.net",
            "sender_full_name": "Jay Weisskopf Petacat (W2'17)",
            "sender_id": 829,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "errors",
            "submessages": [],
            "timestamp": 1386010621,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/eb83a236abf1b10c096dc6b656ae856aa58dfeee?x=x&version=2",
            "client": "website",
            "content": "<p>yeah</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 13565364,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "jari@takkala.net",
            "sender_full_name": "Jari Takkala (F2'17)",
            "sender_id": 2853,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "errors",
            "submessages": [],
            "timestamp": 1386010627,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/eb83a236abf1b10c096dc6b656ae856aa58dfeee?x=x&version=2",
            "client": "website",
            "content": "<p>I guess I should teardown the connection but not call fatal</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 13565382,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "jari@takkala.net",
            "sender_full_name": "Jari Takkala (F2'17)",
            "sender_id": 2853,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "errors",
            "submessages": [],
            "timestamp": 1386010658,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/eb83a236abf1b10c096dc6b656ae856aa58dfeee?x=x&version=2",
            "client": "website",
            "content": "<p>anyway, thanks for your help Jay :)</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 13566307,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "jari@takkala.net",
            "sender_full_name": "Jari Takkala (F2'17)",
            "sender_id": 2853,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "errors",
            "submessages": [],
            "timestamp": 1386011814,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/a179bb8c3fc4ab0975954f57d47fa6c53a8c2dad?x=x&version=2",
            "client": "website",
            "content": "<p><a href=\"http://www.meetup.com/golangny/events/138551432/?a=md1_grp&amp;rv=md1&amp;_af_eid=138551432&amp;_af=event\" target=\"_blank\" title=\"http://www.meetup.com/golangny/events/138551432/?a=md1_grp&amp;rv=md1&amp;_af_eid=138551432&amp;_af=event\">http://www.meetup.com/golangny/events/138551432/?a=md1_grp&amp;rv=md1&amp;_af_eid=138551432&amp;_af=event</a></p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 13567407,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "jay@jayschwa.net",
            "sender_full_name": "Jay Weisskopf Petacat (W2'17)",
            "sender_id": 829,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "hackfest tuesday @ 7pm",
            "submessages": [],
            "timestamp": 1386013193,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/a179bb8c3fc4ab0975954f57d47fa6c53a8c2dad?x=x&version=2",
            "client": "website",
            "content": "<p>I see <span class=\"user-mention\" data-user-email=\"superjoe30@gmail.com\">@Andrew Kelley (F'13)</span> is already RSVP'd <img alt=\":smile:\" class=\"emoji\" src=\"static/third/gemoji/images/emoji/smile.png\" title=\":smile:\"></p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 13567491,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "jay@jayschwa.net",
            "sender_full_name": "Jay Weisskopf Petacat (W2'17)",
            "sender_id": 829,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "hackfest tuesday @ 7pm",
            "submessages": [],
            "timestamp": 1386013270,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/1920d37780c9a711b0030870b0c726098e0efb10?x=x&version=2",
            "client": "website",
            "content": "<p>whoa cool this is happening? I created this event like 2 months ago without a date</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 13571175,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "superjoe30@gmail.com",
            "sender_full_name": "Andrew Kelley (he) (SP1'17)",
            "sender_id": 2911,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "hackfest tuesday @ 7pm",
            "submessages": [],
            "timestamp": 1386018062,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/eb83a236abf1b10c096dc6b656ae856aa58dfeee?x=x&version=2",
            "client": "website",
            "content": "<p>Any good reason to read to use bytes.Buffer vs reading into a buffer created by make([]byte, ...)?</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 13573729,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "jari@takkala.net",
            "sender_full_name": "Jari Takkala (F2'17)",
            "sender_id": 2853,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "bytes",
            "submessages": [],
            "timestamp": 1386021613,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/1380ded36dafac0d6f808b9b7b6c4e85266428a1?x=x&version=1",
            "client": "website",
            "content": "<p>Just RSVP'd.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 13612424,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "travis@mcdem.us",
            "sender_full_name": "Travis McDemus (S'13)",
            "sender_id": 2139,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "hackfest tuesday @ 7pm",
            "submessages": [],
            "timestamp": 1386094490,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/1380ded36dafac0d6f808b9b7b6c4e85266428a1?x=x&version=1",
            "client": "website",
            "content": "<p>If you're reusing a buffer a lot (e.g. as with buffer for multimedia data or something), you might want all the convenience methods that are on bytes.Buffer (for clearing out data, truncating, etc.)    If just need a buffer for a  one-off  use case, making your own byte slice may be all you need.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 13612613,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "travis@mcdem.us",
            "sender_full_name": "Travis McDemus (S'13)",
            "sender_id": 2139,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "bytes",
            "submessages": [],
            "timestamp": 1386094695,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/1380ded36dafac0d6f808b9b7b6c4e85266428a1?x=x&version=1",
            "client": "website",
            "content": "<p>Actually, if you guys want to hack around on some small project, that might be fun.<br>\nIf nothing else, I'm going to write some algos to randomly generate some pseudo-musical MIDI data.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 13614618,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "travis@mcdem.us",
            "sender_full_name": "Travis McDemus (S'13)",
            "sender_id": 2139,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "hackfest tuesday @ 7pm",
            "submessages": [],
            "timestamp": 1386097180,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/a179bb8c3fc4ab0975954f57d47fa6c53a8c2dad?x=x&version=2",
            "client": "website",
            "content": "<p>I think I might try to hammer out a design doc for the <code>time</code> package updates we discussed last night.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 13620891,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "jay@jayschwa.net",
            "sender_full_name": "Jay Weisskopf Petacat (W2'17)",
            "sender_id": 829,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "hackfest tuesday @ 7pm",
            "submessages": [],
            "timestamp": 1386104233,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/1920d37780c9a711b0030870b0c726098e0efb10?x=x&version=2",
            "client": "website",
            "content": "<p>is anyone else at 455 broadway going to this or am I walking alone?</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 13625582,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "superjoe30@gmail.com",
            "sender_full_name": "Andrew Kelley (he) (SP1'17)",
            "sender_id": 2911,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "hackfest tuesday @ 7pm",
            "submessages": [],
            "timestamp": 1386110185,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/1920d37780c9a711b0030870b0c726098e0efb10?x=x&version=2",
            "client": "website",
            "content": "<p>go is cool and all, but I'm deep in the middle of coding something else</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 13625695,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "superjoe30@gmail.com",
            "sender_full_name": "Andrew Kelley (he) (SP1'17)",
            "sender_id": 2911,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "hackfest tuesday @ 7pm",
            "submessages": [],
            "timestamp": 1386110363,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/1920d37780c9a711b0030870b0c726098e0efb10?x=x&version=2",
            "client": "website",
            "content": "<p>I might have to flake out</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 13625700,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "superjoe30@gmail.com",
            "sender_full_name": "Andrew Kelley (he) (SP1'17)",
            "sender_id": 2911,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "hackfest tuesday @ 7pm",
            "submessages": [],
            "timestamp": 1386110368,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/eb83a236abf1b10c096dc6b656ae856aa58dfeee?x=x&version=2",
            "client": "website",
            "content": "<p>Just want to point out that there's a series of blog posts about Go this month on Gopher Academy, one post a day until Christmas: <a href=\"http://blog.gopheracademy.com/\" target=\"_blank\" title=\"http://blog.gopheracademy.com/\">http://blog.gopheracademy.com/</a></p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 13708345,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "jari@takkala.net",
            "sender_full_name": "Jari Takkala (F2'17)",
            "sender_id": 2853,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "blog",
            "submessages": [],
            "timestamp": 1386264948,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/1380ded36dafac0d6f808b9b7b6c4e85266428a1?x=x&version=1",
            "client": "website",
            "content": "<p>I haven't tried this yet, but it looks interesting:<br>\n<a href=\"http://clipperhouse.github.io/gen/\" target=\"_blank\" title=\"http://clipperhouse.github.io/gen/\">http://clipperhouse.github.io/gen/</a></p>\n<p>It's a template based tool that generates code for your project based on your defined types you specify to the tool.<br>\nI haven't read all the source code yet, but it'll at least give you heap sorts, merge sorts, etc. on the generated types so you don't have to deal with implementing sort.Sort (or the slowness penalty of interface{} boxing / unboxing). </p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 13872953,
            "is_me_message": false,
            "last_edit_timestamp": 1386611644,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "travis@mcdem.us",
            "sender_full_name": "Travis McDemus (S'13)",
            "sender_id": 2139,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "generics",
            "submessages": [],
            "timestamp": 1386611632,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/eb83a236abf1b10c096dc6b656ae856aa58dfeee?x=x&version=2",
            "client": "website",
            "content": "<p>any gophers available to look at a memory leak Brian and I are having?</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 13875572,
            "is_me_message": false,
            "last_edit_timestamp": 1386615619,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "jari@takkala.net",
            "sender_full_name": "Jari Takkala (F2'17)",
            "sender_id": 2853,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "memory leak",
            "submessages": [],
            "timestamp": 1386615604,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/a179bb8c3fc4ab0975954f57d47fa6c53a8c2dad?x=x&version=2",
            "client": "website",
            "content": "<p>ooo, that sounds interesting. I'm at work now though :-(</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 13880936,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "jay@jayschwa.net",
            "sender_full_name": "Jay Weisskopf Petacat (W2'17)",
            "sender_id": 829,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "memory leak",
            "submessages": [],
            "timestamp": 1386622703,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/eb83a236abf1b10c096dc6b656ae856aa58dfeee?x=x&version=2",
            "client": "website",
            "content": "<p>can brief you about it a bit later</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 13880949,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "jari@takkala.net",
            "sender_full_name": "Jari Takkala (F2'17)",
            "sender_id": 2853,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "memory leak",
            "submessages": [],
            "timestamp": 1386622751,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/eb83a236abf1b10c096dc6b656ae856aa58dfeee?x=x&version=2",
            "client": "website",
            "content": "<p>we've worked around it, but we didn't get to the root cause, and we're unsatisfied with that since we don't know why it's happening</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 13880955,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "jari@takkala.net",
            "sender_full_name": "Jari Takkala (F2'17)",
            "sender_id": 2853,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "memory leak",
            "submessages": [],
            "timestamp": 1386622775,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/a179bb8c3fc4ab0975954f57d47fa6c53a8c2dad?x=x&version=2",
            "client": "website",
            "content": "<p>if you have a workaround, then you've at least isolated what seemed to be causing it?</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 13881029,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "jay@jayschwa.net",
            "sender_full_name": "Jay Weisskopf Petacat (W2'17)",
            "sender_id": 829,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "memory leak",
            "submessages": [],
            "timestamp": 1386622842,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/eb83a236abf1b10c096dc6b656ae856aa58dfeee?x=x&version=2",
            "client": "website",
            "content": "<p>yeah</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 13881150,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "jari@takkala.net",
            "sender_full_name": "Jari Takkala (F2'17)",
            "sender_id": 2853,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "memory leak",
            "submessages": [],
            "timestamp": 1386623013,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/a179bb8c3fc4ab0975954f57d47fa6c53a8c2dad?x=x&version=2",
            "client": "website",
            "content": "<p>Small enough to copy-pasta?</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 13881159,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "jay@jayschwa.net",
            "sender_full_name": "Jay Weisskopf Petacat (W2'17)",
            "sender_id": 829,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "memory leak",
            "submessages": [],
            "timestamp": 1386623029,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/eb83a236abf1b10c096dc6b656ae856aa58dfeee?x=x&version=2",
            "client": "website",
            "content": "<p>we understand where the leak is</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 13881164,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "jari@takkala.net",
            "sender_full_name": "Jari Takkala (F2'17)",
            "sender_id": 2853,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "memory leak",
            "submessages": [],
            "timestamp": 1386623033,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/eb83a236abf1b10c096dc6b656ae856aa58dfeee?x=x&version=2",
            "client": "website",
            "content": "<p>here, one sec</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 13881169,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "jari@takkala.net",
            "sender_full_name": "Jari Takkala (F2'17)",
            "sender_id": 2853,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "memory leak",
            "submessages": [],
            "timestamp": 1386623037,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/eb83a236abf1b10c096dc6b656ae856aa58dfeee?x=x&version=2",
            "client": "website",
            "content": "<p>I'll give you some links</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 13881176,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "jari@takkala.net",
            "sender_full_name": "Jari Takkala (F2'17)",
            "sender_id": 2853,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "memory leak",
            "submessages": [],
            "timestamp": 1386623042,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/eb83a236abf1b10c096dc6b656ae856aa58dfeee?x=x&version=2",
            "client": "website",
            "content": "<p>the leak is in <a href=\"https://github.com/jtakkala/tulva/blob/master/peer.go#L88-95\" target=\"_blank\" title=\"https://github.com/jtakkala/tulva/blob/master/peer.go#L88-95\">https://github.com/jtakkala/tulva/blob/master/peer.go#L88-95</a></p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 13881227,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "jari@takkala.net",
            "sender_full_name": "Jari Takkala (F2'17)",
            "sender_id": 2853,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "memory leak",
            "submessages": [],
            "timestamp": 1386623066,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/eb83a236abf1b10c096dc6b656ae856aa58dfeee?x=x&version=2",
            "client": "website",
            "content": "<p>newPieceDownload</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 13881228,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "jari@takkala.net",
            "sender_full_name": "Jari Takkala (F2'17)",
            "sender_id": 2853,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "memory leak",
            "submessages": [],
            "timestamp": 1386623069,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/eb83a236abf1b10c096dc6b656ae856aa58dfeee?x=x&version=2",
            "client": "website",
            "content": "<p>well, more specifically, newPieceDownload is called from Peer's Run() method</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 13881244,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "jari@takkala.net",
            "sender_full_name": "Jari Takkala (F2'17)",
            "sender_id": 2853,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "memory leak",
            "submessages": [],
            "timestamp": 1386623095,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/eb83a236abf1b10c096dc6b656ae856aa58dfeee?x=x&version=2",
            "client": "website",
            "content": "<p><a href=\"https://github.com/jtakkala/tulva/blob/master/peer.go#L1037-1041\" target=\"_blank\" title=\"https://github.com/jtakkala/tulva/blob/master/peer.go#L1037-1041\">https://github.com/jtakkala/tulva/blob/master/peer.go#L1037-1041</a></p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 13881245,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "jari@takkala.net",
            "sender_full_name": "Jari Takkala (F2'17)",
            "sender_id": 2853,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "memory leak",
            "submessages": [],
            "timestamp": 1386623096,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/eb83a236abf1b10c096dc6b656ae856aa58dfeee?x=x&version=2",
            "client": "website",
            "content": "<p>each time we start to download a new piece, we call it, and it creates a byte slice of the length of the piece to download</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 13881261,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "jari@takkala.net",
            "sender_full_name": "Jari Takkala (F2'17)",
            "sender_id": 2853,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "memory leak",
            "submessages": [],
            "timestamp": 1386623116,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/eb83a236abf1b10c096dc6b656ae856aa58dfeee?x=x&version=2",
            "client": "website",
            "content": "<p>so, around 500K in a typical case</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 13881267,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "jari@takkala.net",
            "sender_full_name": "Jari Takkala (F2'17)",
            "sender_id": 2853,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "memory leak",
            "submessages": [],
            "timestamp": 1386623124,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/eb83a236abf1b10c096dc6b656ae856aa58dfeee?x=x&version=2",
            "client": "website",
            "content": "<p>whenever we receive a block, we check if the piece has completed downloading:</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 13881326,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "jari@takkala.net",
            "sender_full_name": "Jari Takkala (F2'17)",
            "sender_id": 2853,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "memory leak",
            "submessages": [],
            "timestamp": 1386623175,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/eb83a236abf1b10c096dc6b656ae856aa58dfeee?x=x&version=2",
            "client": "website",
            "content": "<p><a href=\"https://github.com/jtakkala/tulva/blob/master/peer.go#L548-596\" target=\"_blank\" title=\"https://github.com/jtakkala/tulva/blob/master/peer.go#L548-596\">https://github.com/jtakkala/tulva/blob/master/peer.go#L548-596</a></p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 13881327,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "jari@takkala.net",
            "sender_full_name": "Jari Takkala (F2'17)",
            "sender_id": 2853,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "memory leak",
            "submessages": [],
            "timestamp": 1386623175,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/eb83a236abf1b10c096dc6b656ae856aa58dfeee?x=x&version=2",
            "client": "website",
            "content": "<p>once it's done, we send the completed piece data and piece number to diskIO for writing to disk, p.sendFinishedPieceToDiskIO</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 13881341,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "jari@takkala.net",
            "sender_full_name": "Jari Takkala (F2'17)",
            "sender_id": 2853,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "memory leak",
            "submessages": [],
            "timestamp": 1386623202,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/eb83a236abf1b10c096dc6b656ae856aa58dfeee?x=x&version=2",
            "client": "website",
            "content": "<p>at line 588</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 13881344,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "jari@takkala.net",
            "sender_full_name": "Jari Takkala (F2'17)",
            "sender_id": 2853,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "memory leak",
            "submessages": [],
            "timestamp": 1386623208,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/eb83a236abf1b10c096dc6b656ae856aa58dfeee?x=x&version=2",
            "client": "website",
            "content": "<p>once the piece has been written to disk, diskIO tells the controller, <a href=\"https://github.com/jtakkala/tulva/blob/master/diskio.go#L281-285\" target=\"_blank\" title=\"https://github.com/jtakkala/tulva/blob/master/diskio.go#L281-285\">https://github.com/jtakkala/tulva/blob/master/diskio.go#L281-285</a></p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 13881414,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "jari@takkala.net",
            "sender_full_name": "Jari Takkala (F2'17)",
            "sender_id": 2853,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "memory leak",
            "submessages": [],
            "timestamp": 1386623302,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/eb83a236abf1b10c096dc6b656ae856aa58dfeee?x=x&version=2",
            "client": "website",
            "content": "<p>and the controller then tells Peer to download a new piece <a href=\"https://github.com/jtakkala/tulva/blob/master/peer.go#L1023\" target=\"_blank\" title=\"https://github.com/jtakkala/tulva/blob/master/peer.go#L1023\">https://github.com/jtakkala/tulva/blob/master/peer.go#L1023</a></p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 13881420,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "jari@takkala.net",
            "sender_full_name": "Jari Takkala (F2'17)",
            "sender_id": 2853,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "memory leak",
            "submessages": [],
            "timestamp": 1386623329,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/eb83a236abf1b10c096dc6b656ae856aa58dfeee?x=x&version=2",
            "client": "website",
            "content": "<p>there shouldn't be any more references to the old piece</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 13881426,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "jari@takkala.net",
            "sender_full_name": "Jari Takkala (F2'17)",
            "sender_id": 2853,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "memory leak",
            "submessages": [],
            "timestamp": 1386623344,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/eb83a236abf1b10c096dc6b656ae856aa58dfeee?x=x&version=2",
            "client": "website",
            "content": "<p>but there must be something hanging around somewhere, although we've looked at everything</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 13881434,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "jari@takkala.net",
            "sender_full_name": "Jari Takkala (F2'17)",
            "sender_id": 2853,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "memory leak",
            "submessages": [],
            "timestamp": 1386623354,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/eb83a236abf1b10c096dc6b656ae856aa58dfeee?x=x&version=2",
            "client": "website",
            "content": "<p>so if you have any thoughts on what may be happening, we'd really apprecaite it</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 13881442,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "jari@takkala.net",
            "sender_full_name": "Jari Takkala (F2'17)",
            "sender_id": 2853,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "memory leak",
            "submessages": [],
            "timestamp": 1386623372,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/eb83a236abf1b10c096dc6b656ae856aa58dfeee?x=x&version=2",
            "client": "website",
            "content": "<p>*apprecaite</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 13881445,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "jari@takkala.net",
            "sender_full_name": "Jari Takkala (F2'17)",
            "sender_id": 2853,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "memory leak",
            "submessages": [],
            "timestamp": 1386623377,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/eb83a236abf1b10c096dc6b656ae856aa58dfeee?x=x&version=2",
            "client": "website",
            "content": "<p>nevermind, can't spell</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 13881450,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "jari@takkala.net",
            "sender_full_name": "Jari Takkala (F2'17)",
            "sender_id": 2853,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "memory leak",
            "submessages": [],
            "timestamp": 1386623381,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/a179bb8c3fc4ab0975954f57d47fa6c53a8c2dad?x=x&version=2",
            "client": "website",
            "content": "<p>Have you tried forcing a <code>runtime.GC()</code> to verify that it's actually leaking and not just GC not running for some reason?</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 13881512,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "jay@jayschwa.net",
            "sender_full_name": "Jay Weisskopf Petacat (W2'17)",
            "sender_id": 829,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "memory leak",
            "submessages": [],
            "timestamp": 1386623447,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/eb83a236abf1b10c096dc6b656ae856aa58dfeee?x=x&version=2",
            "client": "website",
            "content": "<p>yes</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 13881524,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "jari@takkala.net",
            "sender_full_name": "Jari Takkala (F2'17)",
            "sender_id": 2853,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "memory leak",
            "submessages": [],
            "timestamp": 1386623472,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/eb83a236abf1b10c096dc6b656ae856aa58dfeee?x=x&version=2",
            "client": "website",
            "content": "<p>have tried that</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 13881526,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "jari@takkala.net",
            "sender_full_name": "Jari Takkala (F2'17)",
            "sender_id": 2853,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "memory leak",
            "submessages": [],
            "timestamp": 1386623474,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/a179bb8c3fc4ab0975954f57d47fa6c53a8c2dad?x=x&version=2",
            "client": "website",
            "content": "<p>So memory just keeps ballooning for each pieceDownload created?</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 13881944,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "jay@jayschwa.net",
            "sender_full_name": "Jay Weisskopf Petacat (W2'17)",
            "sender_id": 829,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "memory leak",
            "submessages": [],
            "timestamp": 1386624003,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/eb83a236abf1b10c096dc6b656ae856aa58dfeee?x=x&version=2",
            "client": "website",
            "content": "<p>pretty much yeah</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 13881974,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "jari@takkala.net",
            "sender_full_name": "Jari Takkala (F2'17)",
            "sender_id": 2853,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "memory leak",
            "submessages": [],
            "timestamp": 1386624019,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/eb83a236abf1b10c096dc6b656ae856aa58dfeee?x=x&version=2",
            "client": "website",
            "content": "<p>I can send you an svg from ppprof</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 13881979,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "jari@takkala.net",
            "sender_full_name": "Jari Takkala (F2'17)",
            "sender_id": 2853,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "memory leak",
            "submessages": [],
            "timestamp": 1386624029,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/a179bb8c3fc4ab0975954f57d47fa6c53a8c2dad?x=x&version=2",
            "client": "website",
            "content": "<p>And forcing the pointers to nil seems to fix it?</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 13881985,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "jay@jayschwa.net",
            "sender_full_name": "Jay Weisskopf Petacat (W2'17)",
            "sender_id": 829,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "memory leak",
            "submessages": [],
            "timestamp": 1386624037,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/a179bb8c3fc4ab0975954f57d47fa6c53a8c2dad?x=x&version=2",
            "client": "website",
            "content": "<p>Yeah, let's see it. You can probably drag-and-drop it into Zulip.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 13881997,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "jay@jayschwa.net",
            "sender_full_name": "Jay Weisskopf Petacat (W2'17)",
            "sender_id": 829,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "memory leak",
            "submessages": [],
            "timestamp": 1386624061,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/eb83a236abf1b10c096dc6b656ae856aa58dfeee?x=x&version=2",
            "client": "website",
            "content": "<p>well, I think there are a couple of cases where we force it to nil</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 13881998,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "jari@takkala.net",
            "sender_full_name": "Jari Takkala (F2'17)",
            "sender_id": 2853,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "memory leak",
            "submessages": [],
            "timestamp": 1386624067,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/eb83a236abf1b10c096dc6b656ae856aa58dfeee?x=x&version=2",
            "client": "website",
            "content": "<p>but otherwise we just replace it with a new struct</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 13882003,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "jari@takkala.net",
            "sender_full_name": "Jari Takkala (F2'17)",
            "sender_id": 2853,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "memory leak",
            "submessages": [],
            "timestamp": 1386624076,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/eb83a236abf1b10c096dc6b656ae856aa58dfeee?x=x&version=2",
            "client": "website",
            "content": "<p><a href=\"https://humbug-user-uploads.s3.amazonaws.com/t1ES2_fTRH8O9qcIHMO1j11N/leak.svg\" target=\"_blank\" title=\"leak.svg\">leak.svg</a> </p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 13882061,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "jari@takkala.net",
            "sender_full_name": "Jari Takkala (F2'17)",
            "sender_id": 2853,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "memory leak",
            "submessages": [],
            "timestamp": 1386624141,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/a179bb8c3fc4ab0975954f57d47fa6c53a8c2dad?x=x&version=2",
            "client": "website",
            "content": "<p>I didn't know pprof could generate svgs. That's pretty cool!</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 13882292,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "jay@jayschwa.net",
            "sender_full_name": "Jay Weisskopf Petacat (W2'17)",
            "sender_id": 829,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "memory leak",
            "submessages": [],
            "timestamp": 1386624448,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/1380ded36dafac0d6f808b9b7b6c4e85266428a1?x=x&version=1",
            "client": "website",
            "content": "<p>This is completely based off of heuristic, but it sounds like: <br>\na) Something is not a pointer that should be a pointer, and superfluous copies are hanging out in memory.  (Double check both the bindings and the parameters of method signatures.)<br>\nb) A pointer is not being nil'd out, deleted from it's holding data structure, or something of the sort. </p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 13887949,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "travis@mcdem.us",
            "sender_full_name": "Travis McDemus (S'13)",
            "sender_id": 2139,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "memory leak",
            "submessages": [],
            "timestamp": 1386631668,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/a179bb8c3fc4ab0975954f57d47fa6c53a8c2dad?x=x&version=2",
            "client": "website",
            "content": "<p>I don't feel like one should have to <code>nil</code> things out after use. If it's not referenced anywhere, it should go away automatically. They explicitly <code>nil</code> as part of their workaround.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 13888092,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "jay@jayschwa.net",
            "sender_full_name": "Jay Weisskopf Petacat (W2'17)",
            "sender_id": 829,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "memory leak",
            "submessages": [],
            "timestamp": 1386631877,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/3d8a0205f76df6ec7742292f8635addd71801017?x=x&version=1",
            "client": "desktop app Mac 0.4.1",
            "content": "<p>We never really got to the root of the issue. Our workaround was to re-use the same structs (each containing a large byte slice) instead of creating new ones each time.  </p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 13920393,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "briandignan@gmail.com",
            "sender_full_name": "Brian Dignan (F'13)",
            "sender_id": 2886,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "memory leak",
            "submessages": [],
            "timestamp": 1386695463,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/1380ded36dafac0d6f808b9b7b6c4e85266428a1?x=x&version=1",
            "client": "desktop app Mac 0.4.1",
            "content": "<p>I posted this to the golang newsgroup: <a href=\"https://groups.google.com/forum/#!topic/golang-nuts/H9igrFl9ULU\" target=\"_blank\" title=\"https://groups.google.com/forum/#!topic/golang-nuts/H9igrFl9ULU\">https://groups.google.com/forum/#!topic/golang-nuts/H9igrFl9ULU</a><br>\nI'm open to ideas. I can't think of anything that's not going to be getting really hacky, verbose or using the reflect package, and I'd like to avoid that.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 14122627,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "travis@mcdem.us",
            "sender_full_name": "Travis McDemus (S'13)",
            "sender_id": 2139,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "Ignoring  channels",
            "submessages": [],
            "timestamp": 1387070750,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/5ac24ef595f7d1cd016bc3de24f78e60?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"travis@mcdem.us\">@Travis McDemus (S'13)</span> I don't know what you're actually doing, but maybe it'd be easier with a single output channel? Then you can either:</p>\n<ul>\n<li>filter on your end by having the client declare what kinds of events they're interested in, or</li>\n<li>push filtering to the client by sending all events with a type</li>\n</ul>\n<p>I did the latter in the omegle client library I wrote, though that might not be viable if you need high throughput.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 14157837,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "simon@simonmweber.com",
            "sender_full_name": "Simon Weber (he) (S'13)",
            "sender_id": 2111,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "Ignoring  channels",
            "submessages": [],
            "timestamp": 1387157084,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/a179bb8c3fc4ab0975954f57d47fa6c53a8c2dad?x=x&version=2",
            "client": "website",
            "content": "<p>First the linker, and now the compiler. Looks like Go will be self-hosted! <a href=\"https://docs.google.com/document/d/1P3BLR31VA8cvLJLfMibSuTdwTuF7WWLux71CYD0eeD8/preview?sle=true\" target=\"_blank\" title=\"https://docs.google.com/document/d/1P3BLR31VA8cvLJLfMibSuTdwTuF7WWLux71CYD0eeD8/preview?sle=true\">https://docs.google.com/document/d/1P3BLR31VA8cvLJLfMibSuTdwTuF7WWLux71CYD0eeD8/preview?sle=true</a></p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 14301667,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "jay@jayschwa.net",
            "sender_full_name": "Jay Weisskopf Petacat (W2'17)",
            "sender_id": 829,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "self-hosting",
            "submessages": [],
            "timestamp": 1387416160,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/21aeae1f260365557523718bc19640f7?d=identicon&version=1",
            "client": "desktop app Mac 0.4.1",
            "content": "<p>Their strategy is interesting. They get a free C-to-Go translator out of it :-)</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 14307276,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "stefan@karpinski.org",
            "sender_full_name": "Stefan Karpinski",
            "sender_id": 892,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "self-hosting",
            "submessages": [],
            "timestamp": 1387428027,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/a179bb8c3fc4ab0975954f57d47fa6c53a8c2dad?x=x&version=2",
            "client": "website",
            "content": "<p>Yeah, I thought that was an interesting strategy.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 14307780,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "jay@jayschwa.net",
            "sender_full_name": "Jay Weisskopf Petacat (W2'17)",
            "sender_id": 829,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "self-hosting",
            "submessages": [],
            "timestamp": 1387429137,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/21aeae1f260365557523718bc19640f7?d=identicon&version=1",
            "client": "desktop app Mac 0.4.1",
            "content": "<p>Their analysis makes a fair bit of sense and given the similarity of C and Go for that kind of programming, it seems quite doable.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 14308761,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "stefan@karpinski.org",
            "sender_full_name": "Stefan Karpinski",
            "sender_id": 892,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "self-hosting",
            "submessages": [],
            "timestamp": 1387431233,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/a179bb8c3fc4ab0975954f57d47fa6c53a8c2dad?x=x&version=2",
            "client": "website",
            "content": "<p>I bought a ticket to Gophercon when I was drunk last night.</p>\n<p><span class=\"user-mention\" data-user-email=\"travis@mcdem.us\">@Travis McDemus (S'13)</span> </p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 14380152,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "jay@jayschwa.net",
            "sender_full_name": "Jay Weisskopf Petacat (W2'17)",
            "sender_id": 829,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "gophercon",
            "submessages": [],
            "timestamp": 1387568065,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/1380ded36dafac0d6f808b9b7b6c4e85266428a1?x=x&version=1",
            "client": "desktop app Mac 0.4.1",
            "content": "<p>Awesome. let's coordinate on it, imma going.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 14526753,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "travis@mcdem.us",
            "sender_full_name": "Travis McDemus (S'13)",
            "sender_id": 2139,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "gophercon",
            "submessages": [],
            "timestamp": 1387906917,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/a179bb8c3fc4ab0975954f57d47fa6c53a8c2dad?x=x&version=2",
            "client": "Android",
            "content": "<p>It seems like there aren't any rooms left at the convention hotel, but there's probably plenty of things within walking distance. I'm also contemplating coming several days early for exploration purposes.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 14526927,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "jay@jayschwa.net",
            "sender_full_name": "Jay Weisskopf Petacat (W2'17)",
            "sender_id": 829,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "gophercon",
            "submessages": [],
            "timestamp": 1387907336,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/3d7b72d70ff07f8186126a4464bc6166?d=identicon&version=1",
            "client": "website",
            "content": "<p>aaghhh i want to go. </p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 14542425,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "emmbeezee@gmail.com",
            "sender_full_name": "Maggie Zhou (she) (S'13)",
            "sender_id": 2161,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "gophercon",
            "submessages": [],
            "timestamp": 1387943493,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/1380ded36dafac0d6f808b9b7b6c4e85266428a1?x=x&version=1",
            "client": "desktop app Mac 0.4.1",
            "content": "<p>Really distilling the problem down, and prototyping a solution, I have something that works by hacking a Go-channel into acting like a ring buffer.   Requires a buffered channel and an auxilllary function to send values on it, but keeps my client code the same and I haven't run into performance issues (yet).   Still feels hacky.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 14561702,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "travis@mcdem.us",
            "sender_full_name": "Travis McDemus (S'13)",
            "sender_id": 2139,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "Ignoring  channels",
            "submessages": [],
            "timestamp": 1387994619,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/a179bb8c3fc4ab0975954f57d47fa6c53a8c2dad?x=x&version=2",
            "client": "website",
            "content": "<p>FYI, now seems like a good time to book things. I just bought round trip tickets from NYC to Denver for $275. I think that's the cheapest I've personally ever seen airfare.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 14681159,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "jay@jayschwa.net",
            "sender_full_name": "Jay Weisskopf Petacat (W2'17)",
            "sender_id": 829,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "gophercon",
            "submessages": [],
            "timestamp": 1388276844,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/a179bb8c3fc4ab0975954f57d47fa6c53a8c2dad?x=x&version=2",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"travis@mcdem.us\">@Travis McDemus (S'13)</span> ^</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 14681163,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "jay@jayschwa.net",
            "sender_full_name": "Jay Weisskopf Petacat (W2'17)",
            "sender_id": 829,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "gophercon",
            "submessages": [],
            "timestamp": 1388276853,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/a179bb8c3fc4ab0975954f57d47fa6c53a8c2dad?x=x&version=2",
            "client": "website",
            "content": "<p>I'm taking a crack at my first runtime change: switching from calendar time to elapsed time for scheduling. Currently, Go will lose its marbles if calendar time jumps too much. <a href=\"https://github.com/jayschwa/golang/compare/master...monotonic\" target=\"_blank\" title=\"https://github.com/jayschwa/golang/compare/master...monotonic\">https://github.com/jayschwa/golang/compare/master...monotonic</a></p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 15188294,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "jay@jayschwa.net",
            "sender_full_name": "Jay Weisskopf Petacat (W2'17)",
            "sender_id": 829,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "monotonic timers",
            "submessages": [],
            "timestamp": 1389334419,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/a179bb8c3fc4ab0975954f57d47fa6c53a8c2dad?x=x&version=2",
            "client": "website",
            "content": "<p>Also, the <code>set[Read|Write]Deadline</code> methods in the <code>net.Conn</code> interface are stupid. Timeouts are set with calendar time instead of a relative duration... wtf. Not only does that not make sense, it forces every use of that function to have boilerplate like <code>setDeadline(time.Now().Add(30*time.Seconds))</code> instead of just <code>(30*time.Seconds)</code>.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 15188491,
            "is_me_message": false,
            "last_edit_timestamp": 1389334995,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "jay@jayschwa.net",
            "sender_full_name": "Jay Weisskopf Petacat (W2'17)",
            "sender_id": 829,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "monotonic timers",
            "submessages": [],
            "timestamp": 1389334922,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/1380ded36dafac0d6f808b9b7b6c4e85266428a1?x=x&version=1",
            "client": "desktop app Mac 0.4.1",
            "content": "<p>This blog post was published on the subject yesterday, featuring direct links to <span class=\"user-mention\" data-user-email=\"jay@jayschwa.net\">@Jay Weisskopf (W'13)</span> 's contributions to the Go packages for Go 1.3: <a href=\"http://blog.cloudflare.com/its-go-time-on-linux\" target=\"_blank\" title=\"http://blog.cloudflare.com/its-go-time-on-linux\">http://blog.cloudflare.com/its-go-time-on-linux</a></p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 18020132,
            "is_me_message": false,
            "last_edit_timestamp": 1394153364,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "travis@mcdem.us",
            "sender_full_name": "Travis McDemus (S'13)",
            "sender_id": 2139,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "monotonic timers",
            "submessages": [],
            "timestamp": 1394153347,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/3d7b72d70ff07f8186126a4464bc6166?d=identicon&version=1",
            "client": "website",
            "content": "<p>FUCK YEAH</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 18020742,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "emmbeezee@gmail.com",
            "sender_full_name": "Maggie Zhou (she) (S'13)",
            "sender_id": 2161,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "monotonic timers",
            "submessages": [],
            "timestamp": 1394154412,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/a179bb8c3fc4ab0975954f57d47fa6c53a8c2dad?x=x&version=2",
            "client": "website",
            "content": "<p>I'm blog famous!</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 18020813,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "jay@jayschwa.net",
            "sender_full_name": "Jay Weisskopf Petacat (W2'17)",
            "sender_id": 829,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "monotonic timers",
            "submessages": [],
            "timestamp": 1394154591,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/a179bb8c3fc4ab0975954f57d47fa6c53a8c2dad?x=x&version=2",
            "client": "website",
            "content": "<p>I wonder if <span class=\"user-mention\" data-user-email=\"majek04@gmail.com\">@Marek Majkowski (W'13)</span> had a hand in the post.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 18020868,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "jay@jayschwa.net",
            "sender_full_name": "Jay Weisskopf Petacat (W2'17)",
            "sender_id": 829,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "monotonic timers",
            "submessages": [],
            "timestamp": 1394154669,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/d4e1d473a995ef37b3e03e9e6006c3e3?d=identicon&version=1",
            "client": "website",
            "content": "<p>Not this time :) But yeah, Albert is knowledgable :)</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 18036637,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "majek04@gmail.com",
            "sender_full_name": "Marek Majkowski (W'13)",
            "sender_id": 824,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "monotonic timers",
            "submessages": [],
            "timestamp": 1394184711,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/b4d94d953db52e1e7cfc3724b95a6dc906fa9d58?x=x&version=2",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"mark.samman@gmail.com\">@Mark Samman (W'14)</span> and I have Dialtcp working for google on port 80 and localhost, but not other servers I can connect to</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 19027366,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "me@ballingt.com",
            "sender_full_name": "Tom Ballinger (he) (W'12)",
            "sender_id": 807,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "dialtcp",
            "submessages": [],
            "timestamp": 1395870779,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/b4d94d953db52e1e7cfc3724b95a6dc906fa9d58?x=x&version=2",
            "client": "website",
            "content": "<p>with telnet etc.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 19027384,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "me@ballingt.com",
            "sender_full_name": "Tom Ballinger (he) (W'12)",
            "sender_id": 807,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "dialtcp",
            "submessages": [],
            "timestamp": 1395870808,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/b4d94d953db52e1e7cfc3724b95a6dc906fa9d58?x=x&version=2",
            "client": "website",
            "content": "<p>Found our bug, it was a &amp; -&gt; % typo</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 19029009,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "me@ballingt.com",
            "sender_full_name": "Tom Ballinger (he) (W'12)",
            "sender_id": 807,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "dialtcp",
            "submessages": [],
            "timestamp": 1395872602,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/a179bb8c3fc4ab0975954f57d47fa6c53a8c2dad?x=x&version=2",
            "client": "website",
            "content": "<p><a href=\"https://humbug-user-uploads.s3.amazonaws.com/Jilp1SgPEZp6Upf1KobSWurm/img_20140424_093124.jpg\" target=\"_blank\" title=\"img_20140424_093124.jpg\">img_20140424_093124.jpg</a> </p>\n<div class=\"message_inline_image\"><a href=\"https://humbug-user-uploads.s3.amazonaws.com/Jilp1SgPEZp6Upf1KobSWurm/img_20140424_093124.jpg\" target=\"_blank\" title=\"img_20140424_093124.jpg\"><img src=\"https://humbug-user-uploads.s3.amazonaws.com/Jilp1SgPEZp6Upf1KobSWurm/img_20140424_093124.jpg\"></a></div>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 20585517,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "jay@jayschwa.net",
            "sender_full_name": "Jay Weisskopf Petacat (W2'17)",
            "sender_id": 829,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "gophercon",
            "submessages": [],
            "timestamp": 1398353784,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/f6bd929465d6d225def8062d5a9d3f3f?d=identicon&version=1",
            "client": "website",
            "content": "<p>Huh. I just now realized that the go mascot is a gopher, and not just some generic round-cute thing.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 20590306,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "danluu@gmail.com",
            "sender_full_name": "Dan Luu (W'13)",
            "sender_id": 820,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "gophercon",
            "submessages": [],
            "timestamp": 1398355806,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/1380ded36dafac0d6f808b9b7b6c4e85266428a1?x=x&version=1",
            "client": "desktop app Mac 0.4.1",
            "content": "<p>Anyone have the present tool successfully running? </p>\n<div class=\"codehilite\"><pre>Here&#39;s the recipe I used:\n1. go get code.google.com/p/go.talks/present\n2. Write your .slide file in the format specified by http://godoc.org/code.google.com/p/go.talks/pkg/present\n3. Run $GOPATH/bin/present\n4. Open http://localhost:3999/\n</pre></div>\n\n\n<p>I'm having trouble with slides from gophercon, but I'm running the offical 1.2 build, so maybe formats have changed. I also had to run <code>go get -u code.google.com/p/go.tools/playground/socket</code> to update <code>socket</code>.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 20883096,
            "is_me_message": false,
            "last_edit_timestamp": 1398823483,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "travis@mcdem.us",
            "sender_full_name": "Travis McDemus (S'13)",
            "sender_id": 2139,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "slides",
            "submessages": [],
            "timestamp": 1398823458,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/1380ded36dafac0d6f808b9b7b6c4e85266428a1?x=x&version=1",
            "client": "desktop app Mac 0.4.1",
            "content": "<p>I can only reason the go team is running bleeding edge builds, but thought I'd try with 1.2. Might have to just switch back to running everything from source.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 20883132,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "travis@mcdem.us",
            "sender_full_name": "Travis McDemus (S'13)",
            "sender_id": 2139,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "slides",
            "submessages": [],
            "timestamp": 1398823561,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/1380ded36dafac0d6f808b9b7b6c4e85266428a1?x=x&version=1",
            "client": "desktop app Mac 0.4.1",
            "content": "<p>I guess they're balancing out the blue ones with the pink ones, and more power to 'em.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 20883208,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "travis@mcdem.us",
            "sender_full_name": "Travis McDemus (S'13)",
            "sender_id": 2139,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "gophercon",
            "submessages": [],
            "timestamp": 1398823684,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/eb83a236abf1b10c096dc6b656ae856aa58dfeee?x=x&version=2",
            "client": "website",
            "content": "<p>Why are the brackets required around (*ints)[i] in this code, <a href=\"https://github.com/jtakkala/tulva/commit/ca11a73708105968c156d57651aa263f7617ebf4\" target=\"_blank\" title=\"https://github.com/jtakkala/tulva/commit/ca11a73708105968c156d57651aa263f7617ebf4\">https://github.com/jtakkala/tulva/commit/ca11a73708105968c156d57651aa263f7617ebf4</a>? I can't find anything in the reference spec about what the ()'s do, but it won't compile without them.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 21717830,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "jari@takkala.net",
            "sender_full_name": "Jari Takkala (F2'17)",
            "sender_id": 2853,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "pointers",
            "submessages": [],
            "timestamp": 1400080335,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/c52df4d54166ed7db0141bdb21c7935e502d6ddc?x=x&version=1",
            "client": "website",
            "content": "<p>In C, *foo[bar] means *(foo[bar]) -- I guess Go must be similar.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 21717998,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "darius@wry.me",
            "sender_full_name": "Darius Bacon (W1'16)",
            "sender_id": 902,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "pointers",
            "submessages": [],
            "timestamp": 1400080582,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/c52df4d54166ed7db0141bdb21c7935e502d6ddc?x=x&version=1",
            "client": "website",
            "content": "<p>So it'd just mean to take *ints before derefencing with [i].</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 21718011,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "darius@wry.me",
            "sender_full_name": "Darius Bacon (W1'16)",
            "sender_id": 902,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "pointers",
            "submessages": [],
            "timestamp": 1400080625,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/eb83a236abf1b10c096dc6b656ae856aa58dfeee?x=x&version=2",
            "client": "website",
            "content": "<p>so if I write just *ints[i], that means de-reference whatever the address ints[i] points at?</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 21718037,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "jari@takkala.net",
            "sender_full_name": "Jari Takkala (F2'17)",
            "sender_id": 2853,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "pointers",
            "submessages": [],
            "timestamp": 1400080682,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/eb83a236abf1b10c096dc6b656ae856aa58dfeee?x=x&version=2",
            "client": "website",
            "content": "<p>as opposed to de-reference ints first, and then look look up the element?</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 21718079,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "jari@takkala.net",
            "sender_full_name": "Jari Takkala (F2'17)",
            "sender_id": 2853,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "pointers",
            "submessages": [],
            "timestamp": 1400080706,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/eb83a236abf1b10c096dc6b656ae856aa58dfeee?x=x&version=2",
            "client": "website",
            "content": "<p>I'm having trouble visualizing it...</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 21718089,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "jari@takkala.net",
            "sender_full_name": "Jari Takkala (F2'17)",
            "sender_id": 2853,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "pointers",
            "submessages": [],
            "timestamp": 1400080733,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/c52df4d54166ed7db0141bdb21c7935e502d6ddc?x=x&version=1",
            "client": "website",
            "content": "<p>That's what I think! I haven't gone beyond the online Go tutorial, though.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 21718194,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "darius@wry.me",
            "sender_full_name": "Darius Bacon (W1'16)",
            "sender_id": 902,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "pointers",
            "submessages": [],
            "timestamp": 1400080873,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/044b59a59f2bfb736b3142db2cd025ca?d=identicon&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>It's probably in the operators priority section</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 21718394,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "hi@filippo.io",
            "sender_full_name": "Filippo Valsorda (F2'17)",
            "sender_id": 2884,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "pointers",
            "submessages": [],
            "timestamp": 1400081134,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/a179bb8c3fc4ab0975954f57d47fa6c53a8c2dad?x=x&version=2",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"jari@takkala.net\">@Jari Takkala (F'13)</span> <code>func shuffle(ints *[]int)</code>has a code smell to me. Slices are already pointers, so why have a pointer to a slice?</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 21718407,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "jay@jayschwa.net",
            "sender_full_name": "Jay Weisskopf Petacat (W2'17)",
            "sender_id": 829,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "pointers",
            "submessages": [],
            "timestamp": 1400081151,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/044b59a59f2bfb736b3142db2cd025ca?d=identicon&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>I guess that [n] has higher priority than *</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 21718436,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "hi@filippo.io",
            "sender_full_name": "Filippo Valsorda (F2'17)",
            "sender_id": 2884,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "pointers",
            "submessages": [],
            "timestamp": 1400081165,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/eb83a236abf1b10c096dc6b656ae856aa58dfeee?x=x&version=2",
            "client": "website",
            "content": "<p>this was probably some stackoverflow copy and paste ;)</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 21718459,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "jari@takkala.net",
            "sender_full_name": "Jari Takkala (F2'17)",
            "sender_id": 2853,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "pointers",
            "submessages": [],
            "timestamp": 1400081173,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/044b59a59f2bfb736b3142db2cd025ca?d=identicon&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>Also, Jay's point make a lot of sense</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 21718465,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "hi@filippo.io",
            "sender_full_name": "Filippo Valsorda (F2'17)",
            "sender_id": 2884,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "pointers",
            "submessages": [],
            "timestamp": 1400081179,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/eb83a236abf1b10c096dc6b656ae856aa58dfeee?x=x&version=2",
            "client": "website",
            "content": "<p>I was thinking something similar though</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 21718468,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "jari@takkala.net",
            "sender_full_name": "Jari Takkala (F2'17)",
            "sender_id": 2853,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "pointers",
            "submessages": [],
            "timestamp": 1400081183,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/044b59a59f2bfb736b3142db2cd025ca?d=identicon&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>Actually, I can see a case when passing a slice by reference would make sense</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 21718492,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "hi@filippo.io",
            "sender_full_name": "Filippo Valsorda (F2'17)",
            "sender_id": 2884,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "pointers",
            "submessages": [],
            "timestamp": 1400081221,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/044b59a59f2bfb736b3142db2cd025ca?d=identicon&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>If you are changing the slice len and want that to have effect outside the current scope</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 21718505,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "hi@filippo.io",
            "sender_full_name": "Filippo Valsorda (F2'17)",
            "sender_id": 2884,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "pointers",
            "submessages": [],
            "timestamp": 1400081249,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/044b59a59f2bfb736b3142db2cd025ca?d=identicon&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>But still you should probably refactor to return the new slice in that case</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 21718523,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "hi@filippo.io",
            "sender_full_name": "Filippo Valsorda (F2'17)",
            "sender_id": 2884,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "pointers",
            "submessages": [],
            "timestamp": 1400081272,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/a179bb8c3fc4ab0975954f57d47fa6c53a8c2dad?x=x&version=2",
            "client": "website",
            "content": "<p>Yes. This is how built-in functions like <code>append</code> do it.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 21718606,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "jay@jayschwa.net",
            "sender_full_name": "Jay Weisskopf Petacat (W2'17)",
            "sender_id": 829,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "pointers",
            "submessages": [],
            "timestamp": 1400081341,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/72d03dbb9ec7ac92767a0db7ac17250842ba370b?x=x&version=1",
            "client": "website",
            "content": "<p>I was wondering which was more idiomatic:</p>\n<div class=\"codehilite\"><pre><span class=\"n\">t</span> <span class=\"p\">:=</span> <span class=\"nb\">new</span><span class=\"p\">(</span><span class=\"n\">Type</span><span class=\"p\">)</span>\n</pre></div>\n\n\n<p>or...</p>\n<div class=\"codehilite\"><pre><span class=\"n\">t</span> <span class=\"p\">:=</span> <span class=\"p\">&amp;</span><span class=\"n\">Type</span><span class=\"p\">{}</span>\n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 23479713,
            "is_me_message": false,
            "last_edit_timestamp": 1403137697,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "samer@samertm.com",
            "sender_full_name": "Samer Masterson (S1'14)",
            "sender_id": 5874,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "new vs &type{}",
            "submessages": [],
            "timestamp": 1403137659,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/72d03dbb9ec7ac92767a0db7ac17250842ba370b?x=x&version=1",
            "client": "website",
            "content": "<p>I rarely use <code>new</code> in my code</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 23479780,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "samer@samertm.com",
            "sender_full_name": "Samer Masterson (S1'14)",
            "sender_id": 5874,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "new vs &type{}",
            "submessages": [],
            "timestamp": 1403137745,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/a179bb8c3fc4ab0975954f57d47fa6c53a8c2dad?x=x&version=2",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"samer@samertm.com\">@Samer Masterson (S'14)</span> I don't think there's a clear consensus on that. Grepping the standard library, I found 633 occurrences of <code>new(Foo)</code> and 158 occurrences of <code>&amp;Foo{}</code>. I personally tend to use <code>new</code>.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 23481664,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "jay@jayschwa.net",
            "sender_full_name": "Jay Weisskopf Petacat (W2'17)",
            "sender_id": 829,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "new vs &type{}",
            "submessages": [],
            "timestamp": 1403140619,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/a179bb8c3fc4ab0975954f57d47fa6c53a8c2dad?x=x&version=2",
            "client": "website",
            "content": "<p>I don't think one way is more clear than the other. You probably just want to be consistent about it.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 23481681,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "jay@jayschwa.net",
            "sender_full_name": "Jay Weisskopf Petacat (W2'17)",
            "sender_id": 829,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "new vs &type{}",
            "submessages": [],
            "timestamp": 1403140661,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/a179bb8c3fc4ab0975954f57d47fa6c53a8c2dad?x=x&version=2",
            "client": "website",
            "content": "<p>I vaguely recall one of the Go designers lamenting the inclusion of <code>new</code> since it is redundant.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 23481744,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "jay@jayschwa.net",
            "sender_full_name": "Jay Weisskopf Petacat (W2'17)",
            "sender_id": 829,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "new vs &type{}",
            "submessages": [],
            "timestamp": 1403140726,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/72d03dbb9ec7ac92767a0db7ac17250842ba370b?x=x&version=1",
            "client": "website",
            "content": "<p>okay, interesting! thanks!</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 23482060,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "samer@samertm.com",
            "sender_full_name": "Samer Masterson (S1'14)",
            "sender_id": 5874,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "new vs &type{}",
            "submessages": [],
            "timestamp": 1403141352,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/048837dd1707e891a4e916295440c13a?d=identicon&version=1",
            "client": "website",
            "content": "<p>As someone who just read a bunch of effective go this morning, <code>&amp;Type{}</code> is what I read over and over. Maybe that helps?</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 23623892,
            "is_me_message": false,
            "last_edit_timestamp": 1403399563,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "jdennis@gmail.com",
            "sender_full_name": "James Dennis (S'11)",
            "sender_id": 971,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "new vs &type{}",
            "submessages": [],
            "timestamp": 1403399533,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/a179bb8c3fc4ab0975954f57d47fa6c53a8c2dad?x=x&version=2",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"jdennis@gmail.com\">@James Dennis (S'11)</span> re: your email:</p>\n<p>My favorite thing about Go is that it's simplistic to a fault.</p>\n<p>I think what I dislike the most is <code>GOPATH</code>. I just find it annoying, not helpful.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 23624150,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "jay@jayschwa.net",
            "sender_full_name": "Jay Weisskopf Petacat (W2'17)",
            "sender_id": 829,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "learning go",
            "submessages": [],
            "timestamp": 1403399783,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/048837dd1707e891a4e916295440c13a?d=identicon&version=1",
            "client": "website",
            "content": "<p>Oh yeah, I find that a little weird after python's virtualenv.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 23624161,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "jdennis@gmail.com",
            "sender_full_name": "James Dennis (S'11)",
            "sender_id": 971,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "learning go",
            "submessages": [],
            "timestamp": 1403399857,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/048837dd1707e891a4e916295440c13a?d=identicon&version=1",
            "client": "website",
            "content": "<p>I think it'd be cool to hack something to make it nicer tho</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 23624165,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "jdennis@gmail.com",
            "sender_full_name": "James Dennis (S'11)",
            "sender_id": 971,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "learning go",
            "submessages": [],
            "timestamp": 1403399868,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/a179bb8c3fc4ab0975954f57d47fa6c53a8c2dad?x=x&version=2",
            "client": "website",
            "content": "<p>One of my pie in the sky ideas is to have a patchset called \"Go with the Flow\" that smooths some of those things over. I want things like a sane GOPATH default and unused package errors changed to warnings.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 23624217,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "jay@jayschwa.net",
            "sender_full_name": "Jay Weisskopf Petacat (W2'17)",
            "sender_id": 829,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "learning go",
            "submessages": [],
            "timestamp": 1403399957,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/048837dd1707e891a4e916295440c13a?d=identicon&version=1",
            "client": "website",
            "content": "<p>What would a smoother system look like?</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 23624265,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "jdennis@gmail.com",
            "sender_full_name": "James Dennis (S'11)",
            "sender_id": 971,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "learning go",
            "submessages": [],
            "timestamp": 1403400038,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/a179bb8c3fc4ab0975954f57d47fa6c53a8c2dad?x=x&version=2",
            "client": "website",
            "content": "<p>The things I mentioned were what I could think of off the top of my head. I don't like it when my tools nag me.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 23624273,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "jay@jayschwa.net",
            "sender_full_name": "Jay Weisskopf Petacat (W2'17)",
            "sender_id": 829,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "learning go",
            "submessages": [],
            "timestamp": 1403400103,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/048837dd1707e891a4e916295440c13a?d=identicon&version=1",
            "client": "website",
            "content": "<p>I kinda like the idea of a function in my shell that walks up a directory structure until it finds a .flow file. That file specifies that a directory is a GOPATH. If you have a GOPATH and this is different, change it. If you have this one, you're obvz fine, and if you don't find a .flow file, unset GOPATH.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 23624332,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "jdennis@gmail.com",
            "sender_full_name": "James Dennis (S'11)",
            "sender_id": 971,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "learning go",
            "submessages": [],
            "timestamp": 1403400227,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/048837dd1707e891a4e916295440c13a?d=identicon&version=1",
            "client": "website",
            "content": "<p>Thoughts? That's my first guess after only a short time with go</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 23624335,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "jdennis@gmail.com",
            "sender_full_name": "James Dennis (S'11)",
            "sender_id": 971,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "learning go",
            "submessages": [],
            "timestamp": 1403400240,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/a179bb8c3fc4ab0975954f57d47fa6c53a8c2dad?x=x&version=2",
            "client": "website",
            "content": "<p>I think just about every time I do something, GOPATH is set to $PWD, so having it default to the current directory would be fine by me. I could see some contexts where that might not work well though. I'd also be content if it defaulted to $HOME or $HOME/.go or something.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 23624388,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "jay@jayschwa.net",
            "sender_full_name": "Jay Weisskopf Petacat (W2'17)",
            "sender_id": 829,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "learning go",
            "submessages": [],
            "timestamp": 1403400338,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/048837dd1707e891a4e916295440c13a?d=identicon&version=1",
            "client": "website",
            "content": "<p>interesting. is typical to use just one workspace for a lot of work?</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 23624430,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "jdennis@gmail.com",
            "sender_full_name": "James Dennis (S'11)",
            "sender_id": 971,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "learning go",
            "submessages": [],
            "timestamp": 1403400384,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/a179bb8c3fc4ab0975954f57d47fa6c53a8c2dad?x=x&version=2",
            "client": "website",
            "content": "<p>I think <span class=\"user-mention\" data-user-email=\"travis@mcdem.us\">@Travis McDemus (S'13)</span> said he does it that way.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 23624443,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "jay@jayschwa.net",
            "sender_full_name": "Jay Weisskopf Petacat (W2'17)",
            "sender_id": 829,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "learning go",
            "submessages": [],
            "timestamp": 1403400463,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/a179bb8c3fc4ab0975954f57d47fa6c53a8c2dad?x=x&version=2",
            "client": "website",
            "content": "<p>I probably just need to rewatch <a href=\"https://www.youtube.com/watch?v=XCsL89YtqCs\" target=\"_blank\" title=\"https://www.youtube.com/watch?v=XCsL89YtqCs\">https://www.youtube.com/watch?v=XCsL89YtqCs</a> <img alt=\":smiley:\" class=\"emoji\" src=\"static/third/gemoji/images/emoji/smiley.png\" title=\":smiley:\"> </p>\n<div class=\"message_inline_image\"><a href=\"https://www.youtube.com/watch?v=XCsL89YtqCs\" target=\"_blank\" title=\"https://www.youtube.com/watch?v=XCsL89YtqCs\"><img src=\"https://i.ytimg.com/vi/XCsL89YtqCs/default.jpg\"></a></div>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 23624494,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "jay@jayschwa.net",
            "sender_full_name": "Jay Weisskopf Petacat (W2'17)",
            "sender_id": 829,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "learning go",
            "submessages": [],
            "timestamp": 1403400586,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/72d03dbb9ec7ac92767a0db7ac17250842ba370b?x=x&version=1",
            "client": "website",
            "content": "<p>oooooooo nice find</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 23624533,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "samer@samertm.com",
            "sender_full_name": "Samer Masterson (S1'14)",
            "sender_id": 5874,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "learning go",
            "submessages": [],
            "timestamp": 1403400626,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/a179bb8c3fc4ab0975954f57d47fa6c53a8c2dad?x=x&version=2",
            "client": "website",
            "content": "<p><a href=\"http://dave.cheney.net/resources-for-new-go-programmers\" target=\"_blank\" title=\"http://dave.cheney.net/resources-for-new-go-programmers\">http://dave.cheney.net/resources-for-new-go-programmers</a></p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 23624540,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "jay@jayschwa.net",
            "sender_full_name": "Jay Weisskopf Petacat (W2'17)",
            "sender_id": 829,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "learning go",
            "submessages": [],
            "timestamp": 1403400640,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/a179bb8c3fc4ab0975954f57d47fa6c53a8c2dad?x=x&version=2",
            "client": "website",
            "content": "<p>GopherCon 2014 videos: <a href=\"https://www.youtube.com/playlist?list=PLE7tQUdRKcyb-k4TMNm2K59-sVlUJumw7\" target=\"_blank\" title=\"https://www.youtube.com/playlist?list=PLE7tQUdRKcyb-k4TMNm2K59-sVlUJumw7\">https://www.youtube.com/playlist?list=PLE7tQUdRKcyb-k4TMNm2K59-sVlUJumw7</a></p>\n<p>I'd recommend all the videos by the Go devs. There a few other interesting ones as well. I really enjoyed the \"best practices for production\" talk.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 23624594,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "jay@jayschwa.net",
            "sender_full_name": "Jay Weisskopf Petacat (W2'17)",
            "sender_id": 829,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "learning go",
            "submessages": [],
            "timestamp": 1403400742,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/05023e2779bfc2793d79ee30c81af6ca291539ce?x=x&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"jdennis@gmail.com\">@James Dennis (S'11)</span> don't try to make it python.  it's not concurrent python.  just roll with it.  i have just one directory, ~/go, and i put everything in there, and it works fine.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 23624799,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "jordanorelli@gmail.com",
            "sender_full_name": "Jordan Orelli (F'11)",
            "sender_id": 872,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "learning go",
            "submessages": [],
            "timestamp": 1403401214,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/05023e2779bfc2793d79ee30c81af6ca291539ce?x=x&version=1",
            "client": "website",
            "content": "<p>the whole \"but you want multiple versions of the same library\" thing isn't worth worrying about up front.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 23624810,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "jordanorelli@gmail.com",
            "sender_full_name": "Jordan Orelli (F'11)",
            "sender_id": 872,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "learning go",
            "submessages": [],
            "timestamp": 1403401237,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/05023e2779bfc2793d79ee30c81af6ca291539ce?x=x&version=1",
            "client": "website",
            "content": "<p>and also read my blog posts :) <a href=\"http://jordanorelli.com/post/32665860244/how-to-use-interfaces-in-go\" target=\"_blank\" title=\"http://jordanorelli.com/post/32665860244/how-to-use-interfaces-in-go\">http://jordanorelli.com/post/32665860244/how-to-use-interfaces-in-go</a> <a href=\"http://jordanorelli.com/post/42369331748/function-types-in-go-golang\" target=\"_blank\" title=\"http://jordanorelli.com/post/42369331748/function-types-in-go-golang\">http://jordanorelli.com/post/42369331748/function-types-in-go-golang</a></p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 23624815,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "jordanorelli@gmail.com",
            "sender_full_name": "Jordan Orelli (F'11)",
            "sender_id": 872,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "learning go",
            "submessages": [],
            "timestamp": 1403401269,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/05023e2779bfc2793d79ee30c81af6ca291539ce?x=x&version=1",
            "client": "website",
            "content": "<p>and the \"lexical scanning in Go\" talk that samer mentioned on the email is definitely the best, so i'll second that.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 23624844,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "jordanorelli@gmail.com",
            "sender_full_name": "Jordan Orelli (F'11)",
            "sender_id": 872,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "learning go",
            "submessages": [],
            "timestamp": 1403401325,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/044b59a59f2bfb736b3142db2cd025ca?d=identicon&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>I have GOPATH in the top10 of the things I like the most in Go instead, it makes everything tidy by default</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 23641126,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "hi@filippo.io",
            "sender_full_name": "Filippo Valsorda (F2'17)",
            "sender_id": 2884,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "learning go",
            "submessages": [],
            "timestamp": 1403441422,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/044b59a59f2bfb736b3142db2cd025ca?d=identicon&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>I just have one, vendor if I need (I don't), have my public code in <a href=\"http://github.com/FiloSottile\" target=\"_blank\" title=\"http://github.com/FiloSottile\">github.com/FiloSottile</a> and my private code in <a href=\"http://filippo.io\" target=\"_blank\" title=\"http://filippo.io\">filippo.io</a></p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 23641129,
            "is_me_message": false,
            "last_edit_timestamp": 1403441810,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "hi@filippo.io",
            "sender_full_name": "Filippo Valsorda (F2'17)",
            "sender_id": 2884,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "learning go",
            "submessages": [],
            "timestamp": 1403441462,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/044b59a59f2bfb736b3142db2cd025ca?d=identicon&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>It's elegant, IMHO, and makes importing a sure thing</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 23641132,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "hi@filippo.io",
            "sender_full_name": "Filippo Valsorda (F2'17)",
            "sender_id": 2884,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "learning go",
            "submessages": [],
            "timestamp": 1403441477,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/048837dd1707e891a4e916295440c13a?d=identicon&version=1",
            "client": "website",
            "content": "<p>yeah, i can dig that. i always had a single virtualenv that i used as my default, that i had to explicitly activate every time.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 23642002,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "jdennis@gmail.com",
            "sender_full_name": "James Dennis (S'11)",
            "sender_id": 971,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "learning go",
            "submessages": [],
            "timestamp": 1403443684,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/1380ded36dafac0d6f808b9b7b6c4e85266428a1?x=x&version=1",
            "client": "desktop app Mac 0.4.1",
            "content": "<p>I use settings like this: </p>\n<div class=\"codehilite\"><pre>$ go env \nGOARCH=&quot;amd64&quot;\nGOBIN=&quot;&quot;\nGOCHAR=&quot;6&quot;\nGOEXE=&quot;&quot;\nGOHOSTARCH=&quot;amd64&quot;\nGOHOSTOS=&quot;darwin&quot;\nGOOS=&quot;darwin&quot;\nGOPATH=&quot;/Users/me/Documents/Code/Projects/go&quot;\nGORACE=&quot;&quot;\nGOROOT=&quot;/usr/local/go&quot;\nGOTOOLDIR=&quot;/usr/local/go/pkg/tool/darwin_amd64&quot;\nCC=&quot;gcc&quot;\nGOGCCFLAGS=&quot;-g -O2 -fPIC -m64 -pthread -fno-common&quot;\nCGO_ENABLED=&quot;1&quot;\n</pre></div>\n\n\n<p>GOPATH is the folder I develop all my go libraries under, and they are separate git repositories for easy importing by other gophers.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 23730807,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "travis@mcdem.us",
            "sender_full_name": "Travis McDemus (S'13)",
            "sender_id": 2139,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "go environment",
            "submessages": [],
            "timestamp": 1403612208,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/1380ded36dafac0d6f808b9b7b6c4e85266428a1?x=x&version=1",
            "client": "desktop app Mac 0.4.1",
            "content": "<p><span class=\"user-mention\" data-user-email=\"jdennis@gmail.com\">@James Dennis (S'11)</span> , I meant to tag you in that. <span class=\"user-mention\" data-user-email=\"jay@jayschwa.net\">@Jay Weisskopf (W'13)</span> was correct in that I develop everything under one GOPATH. </p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 23730817,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "travis@mcdem.us",
            "sender_full_name": "Travis McDemus (S'13)",
            "sender_id": 2139,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "go environment",
            "submessages": [],
            "timestamp": 1403612243,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/1380ded36dafac0d6f808b9b7b6c4e85266428a1?x=x&version=1",
            "client": "desktop app Mac 0.4.1",
            "content": "<p><span class=\"user-mention\" data-user-email=\"jdennis@gmail.com\">@James Dennis (S'11)</span>,  if you learn by doing, just write some small programs in Go that do one thing.<br>\n- Write a program that gets a URI of data, filters to data you want, and outputs that on a terminal. (MTA data comes to mind, or maybe just dumping out the URL of the comic on the xkcd website.) <br>\n- Rewrite a small (&lt; 2000 lines?) program that you've already written in another language - Python, Ruby, Java, and C come to mind. (Maybe one for each?)<br>\n- Mimic a small C program - something that helps you do things on the shell that you'd maybe write a small bash script or function for.</p>\n<p>I'll brain dump some simple exercises for concurrency later. If you're out at Fat Cat tonight, let's talk. </p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 23730996,
            "is_me_message": false,
            "last_edit_timestamp": 1403612603,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "travis@mcdem.us",
            "sender_full_name": "Travis McDemus (S'13)",
            "sender_id": 2139,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "learning go",
            "submessages": [],
            "timestamp": 1403612583,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/1380ded36dafac0d6f808b9b7b6c4e85266428a1?x=x&version=1",
            "client": "desktop app Mac 0.4.1",
            "content": "<p>Hey HS gophers, it'd be awesome to catch up with you all in person at Fat Cat tonight. I can't stay very long, but it'd be great to hear what everyone is up to. Paging <span class=\"user-mention\" data-user-email=\"jay@jayschwa.net\">@Jay Weisskopf (W'13)</span> , <span class=\"user-mention\" data-user-email=\"jordanorelli@gmail.com\">@Jordan Orelli (F'11)</span> , <span class=\"user-mention\" data-user-email=\"ha.chuck@gmail.com\">@Chuck Ha (W'13)</span>  O_O </p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 23731054,
            "is_me_message": false,
            "last_edit_timestamp": 1403612692,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "travis@mcdem.us",
            "sender_full_name": "Travis McDemus (S'13)",
            "sender_id": 2139,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "Fat Cat tonight",
            "submessages": [],
            "timestamp": 1403612669,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/044b59a59f2bfb736b3142db2cd025ca?d=identicon&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>Hey :) I'd love to but I'll arrive late, I have a talk at 7pm</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 23731066,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "hi@filippo.io",
            "sender_full_name": "Filippo Valsorda (F2'17)",
            "sender_id": 2884,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "Fat Cat tonight",
            "submessages": [],
            "timestamp": 1403612703,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/1380ded36dafac0d6f808b9b7b6c4e85266428a1?x=x&version=1",
            "client": "desktop app Mac 0.4.1",
            "content": "<p><span class=\"user-mention\" data-user-email=\"filippo.valsorda@gmail.com\">@Filippo Valsorda (F'13)</span> , I didn't realize you were still hacking around in Go, and I think that's awesome :)    Hopefully I get to see you then.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 23731087,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "travis@mcdem.us",
            "sender_full_name": "Travis McDemus (S'13)",
            "sender_id": 2139,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "Fat Cat tonight",
            "submessages": [],
            "timestamp": 1403612750,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/044b59a59f2bfb736b3142db2cd025ca?d=identicon&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>The Heartbleed test was in Go, and I'm in LOVE with Go :D</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 23731223,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "hi@filippo.io",
            "sender_full_name": "Filippo Valsorda (F2'17)",
            "sender_id": 2884,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "Fat Cat tonight",
            "submessages": [],
            "timestamp": 1403612945,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/048837dd1707e891a4e916295440c13a?d=identicon&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>I might be at fat cat. I have read a whole lot of stuff and am now starting to write some things and test my knowledge. </p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 23738656,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "jdennis@gmail.com",
            "sender_full_name": "James Dennis (S'11)",
            "sender_id": 971,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "learning go",
            "submessages": [],
            "timestamp": 1403624615,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/05023e2779bfc2793d79ee30c81af6ca291539ce?x=x&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"travis@mcdem.us\">@Travis McDemus (S'13)</span> I'd love to but I have standing double-date plans for tonight, so I can't make it :-\\</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 23747276,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "jordanorelli@gmail.com",
            "sender_full_name": "Jordan Orelli (F'11)",
            "sender_id": 872,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "Fat Cat tonight",
            "submessages": [],
            "timestamp": 1403634827,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/70292d91a79cfd0fb1c8ad4f650480d631a56e9e?x=x&version=1",
            "client": "website",
            "content": "<p>Yo, been working in go professionally for the past 5 months. Would love to hear why you guys love go so much. I agree that channels are pretty awesome, but the lack of generics really bothers me, especially coming from scala.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 23749935,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "lawrence.trey@gmail.com",
            "sender_full_name": "Trey Lawrence (F1'16)",
            "sender_id": 911,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "learning go",
            "submessages": [],
            "timestamp": 1403638087,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/05023e2779bfc2793d79ee30c81af6ca291539ce?x=x&version=1",
            "client": "website",
            "content": "<p>all of our bigdata stuff is in scala at etsy.  I have zero curiosity to play with it.  Zero at all. </p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 23755563,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "jordanorelli@gmail.com",
            "sender_full_name": "Jordan Orelli (F'11)",
            "sender_id": 872,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "learning go",
            "submessages": [],
            "timestamp": 1403644550,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/05023e2779bfc2793d79ee30c81af6ca291539ce?x=x&version=1",
            "client": "website",
            "content": "<p>I *despise* the idea of being able to define arbitrary implicit conversions everywhere.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 23755613,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "jordanorelli@gmail.com",
            "sender_full_name": "Jordan Orelli (F'11)",
            "sender_id": 872,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "learning go",
            "submessages": [],
            "timestamp": 1403644572,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/05023e2779bfc2793d79ee30c81af6ca291539ce?x=x&version=1",
            "client": "website",
            "content": "<p>I absolutely loathe the process of having to go on safari through a codebase to find out where things are coming from.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 23755627,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "jordanorelli@gmail.com",
            "sender_full_name": "Jordan Orelli (F'11)",
            "sender_id": 872,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "learning go",
            "submessages": [],
            "timestamp": 1403644594,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/05023e2779bfc2793d79ee30c81af6ca291539ce?x=x&version=1",
            "client": "website",
            "content": "<p>I *love* how insanely simple Go is; how outrageously dumb and straightforward the code is.  I don't like fancy things.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 23755637,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "jordanorelli@gmail.com",
            "sender_full_name": "Jordan Orelli (F'11)",
            "sender_id": 872,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "learning go",
            "submessages": [],
            "timestamp": 1403644619,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/70292d91a79cfd0fb1c8ad4f650480d631a56e9e?x=x&version=1",
            "client": "website",
            "content": "<p>Yeah, I get the simplicity of go. It definitely is appealing in the sense that you have one way to do things. I agree that scala is probably on the opposite end providing too much choice with every paradigm known to man wrapped into the language.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 23765314,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "lawrence.trey@gmail.com",
            "sender_full_name": "Trey Lawrence (F1'16)",
            "sender_id": 911,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "learning go",
            "submessages": [],
            "timestamp": 1403659455,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/70292d91a79cfd0fb1c8ad4f650480d631a56e9e?x=x&version=1",
            "client": "website",
            "content": "<p>Probably 80% of my time is dealing with collections. And when a language has a shitty collections library, it really hurts your productivity. If they added generics, that would fix things.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 23765383,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "lawrence.trey@gmail.com",
            "sender_full_name": "Trey Lawrence (F1'16)",
            "sender_id": 911,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "learning go",
            "submessages": [],
            "timestamp": 1403659624,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/048837dd1707e891a4e916295440c13a?d=identicon&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>Trey, would you mind elaborating on why the collections library is bad? I'm still learning Go and haven't gotten there yet.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 23787891,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "jdennis@gmail.com",
            "sender_full_name": "James Dennis (S'11)",
            "sender_id": 971,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "learning go",
            "submessages": [],
            "timestamp": 1403694626,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/70292d91a79cfd0fb1c8ad4f650480d631a56e9e?x=x&version=1",
            "client": "website",
            "content": "<p>A good collections library will provide commonly used functions that allow you to repeat yourself less. Some example functions would be zip, map, filter, reduce, max, min, sort, etc. It also provides you specialized data structures like lists, sets, queues, tree maps, sortedSets, etc. All of these functions and data structures can be applied to all types.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 23805767,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "lawrence.trey@gmail.com",
            "sender_full_name": "Trey Lawrence (F1'16)",
            "sender_id": 911,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "learning go",
            "submessages": [],
            "timestamp": 1403720199,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/70292d91a79cfd0fb1c8ad4f650480d631a56e9e?x=x&version=1",
            "client": "website",
            "content": "<p>In go, you only have two \"hardcoded\" collection types that use generics: array and map. Because of this, you end up repeating yourself a lot. Something you wrote for one type won't apply to another type. I guess the creators of the language favored simplicity of the core language over DRY. Unfortunately the best thing I've found so far is a code generation tool: <a href=\"http://clipperhouse.github.io/gen/\" target=\"_blank\" title=\"http://clipperhouse.github.io/gen/\">http://clipperhouse.github.io/gen/</a></p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 23805795,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "lawrence.trey@gmail.com",
            "sender_full_name": "Trey Lawrence (F1'16)",
            "sender_id": 911,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "learning go",
            "submessages": [],
            "timestamp": 1403720258,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/048837dd1707e891a4e916295440c13a?d=identicon&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>oh dang... code generation as a solution. :(</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 23806380,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "jdennis@gmail.com",
            "sender_full_name": "James Dennis (S'11)",
            "sender_id": 971,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "learning go",
            "submessages": [],
            "timestamp": 1403720921,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/70292d91a79cfd0fb1c8ad4f650480d631a56e9e?x=x&version=1",
            "client": "website",
            "content": "<p>There are also 17 types of numerics: <a href=\"http://golang.org/ref/spec#Numeric_types\" target=\"_blank\" title=\"http://golang.org/ref/spec#Numeric_types\">http://golang.org/ref/spec#Numeric_types</a><br>\nWith the builtin libraries not really having a standardization on which they return, so you end up having to cast a lot.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 23807688,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "lawrence.trey@gmail.com",
            "sender_full_name": "Trey Lawrence (F1'16)",
            "sender_id": 911,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "learning go",
            "submessages": [],
            "timestamp": 1403722298,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/048837dd1707e891a4e916295440c13a?d=identicon&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>are there any plans for generics? i was stoked to see them in swift and then immediately missed them in go.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 23808332,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "jdennis@gmail.com",
            "sender_full_name": "James Dennis (S'11)",
            "sender_id": 971,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "learning go",
            "submessages": [],
            "timestamp": 1403722942,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/048837dd1707e891a4e916295440c13a?d=identicon&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>I'm brand new to go tho.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 23808337,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "jdennis@gmail.com",
            "sender_full_name": "James Dennis (S'11)",
            "sender_id": 971,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "learning go",
            "submessages": [],
            "timestamp": 1403722946,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/048837dd1707e891a4e916295440c13a?d=identicon&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>possibly interesting, in the FAQ they have a \"why does go not have generic types\" question: <a href=\"http://golang.org/doc/faq\" target=\"_blank\" title=\"http://golang.org/doc/faq\">http://golang.org/doc/faq</a></p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 23808455,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "jdennis@gmail.com",
            "sender_full_name": "James Dennis (S'11)",
            "sender_id": 971,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "learning go",
            "submessages": [],
            "timestamp": 1403723065,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/a179bb8c3fc4ab0975954f57d47fa6c53a8c2dad?x=x&version=2",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"jdennis@gmail.com\">@James Dennis (S'11)</span> I don't think there are any concrete plans for generics right now. I think bradfitz (core dev) is in favor of adding them and has experimented with them privately. Francesc, another team member, also told me that it was a topic of debate within the team. I would be surprised if they ever got added for Go 1.x though.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 23808919,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "jay@jayschwa.net",
            "sender_full_name": "Jay Weisskopf Petacat (W2'17)",
            "sender_id": 829,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "learning go",
            "submessages": [],
            "timestamp": 1403723572,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/048837dd1707e891a4e916295440c13a?d=identicon&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>oh nice, didn't know brad fitz was a core dev. he's done lots of great stuff</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 23808975,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "jdennis@gmail.com",
            "sender_full_name": "James Dennis (S'11)",
            "sender_id": 971,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "learning go",
            "submessages": [],
            "timestamp": 1403723639,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4f5279e356a105513701942b5b6af05f?d=identicon&version=1",
            "client": "website",
            "content": "<p>I'm surprised too.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 23809146,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "clemmer.alexander@gmail.com",
            "sender_full_name": "Alex Clemmer (S'13)",
            "sender_id": 2132,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "learning go",
            "submessages": [],
            "timestamp": 1403723787,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/048837dd1707e891a4e916295440c13a?d=identicon&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>I was thinking I might try giving this HLS server in Go a whirl soon: <a href=\"https://github.com/kz26/gohls\" target=\"_blank\" title=\"https://github.com/kz26/gohls\">https://github.com/kz26/gohls</a> - I have been thinking, perhaps, on building my own HLS server, perhaps backed by S3 or Riak, and see how it performs relative to companies you pay</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 23809552,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "jdennis@gmail.com",
            "sender_full_name": "James Dennis (S'11)",
            "sender_id": 971,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "hls",
            "submessages": [],
            "timestamp": 1403724322,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/05023e2779bfc2793d79ee30c81af6ca291539ce?x=x&version=1",
            "client": "website",
            "content": "<p>Java 1 didn't have generics, either.  They haven't said they won't do it, they've said they don't have a design proposal that works with the language correctly.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 23814224,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "jordanorelli@gmail.com",
            "sender_full_name": "Jordan Orelli (F'11)",
            "sender_id": 872,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "learning go",
            "submessages": [],
            "timestamp": 1403729282,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/05023e2779bfc2793d79ee30c81af6ca291539ce?x=x&version=1",
            "client": "website",
            "content": "<p>it comes up so often that I think they're just quite frankly exhausted of talking about it.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 23814271,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "jordanorelli@gmail.com",
            "sender_full_name": "Jordan Orelli (F'11)",
            "sender_id": 872,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "learning go",
            "submessages": [],
            "timestamp": 1403729294,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/05023e2779bfc2793d79ee30c81af6ca291539ce?x=x&version=1",
            "client": "website",
            "content": "<p>anyway, you can use <code>interface{}</code> for the time being, which is what they do in things like <code>container/list</code>.  It's pretty gross.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 23814316,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "jordanorelli@gmail.com",
            "sender_full_name": "Jordan Orelli (F'11)",
            "sender_id": 872,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "learning go",
            "submessages": [],
            "timestamp": 1403729365,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/05023e2779bfc2793d79ee30c81af6ca291539ce?x=x&version=1",
            "client": "website",
            "content": "<p>it's definitely one of the less than amazing things in the language.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 23814371,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "jordanorelli@gmail.com",
            "sender_full_name": "Jordan Orelli (F'11)",
            "sender_id": 872,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "learning go",
            "submessages": [],
            "timestamp": 1403729407,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/1380ded36dafac0d6f808b9b7b6c4e85266428a1?x=x&version=1",
            "client": "desktop app Mac 0.4.1",
            "content": "<p>(deleted)</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 23826622,
            "is_me_message": false,
            "last_edit_timestamp": 1403750936,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "travis@mcdem.us",
            "sender_full_name": "Travis McDemus (S'13)",
            "sender_id": 2139,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "generics",
            "submessages": [],
            "timestamp": 1403745158,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/1380ded36dafac0d6f808b9b7b6c4e85266428a1?x=x&version=1",
            "client": "desktop app Mac 0.4.1",
            "content": "<p>(deleted)</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 23826629,
            "is_me_message": false,
            "last_edit_timestamp": 1403750958,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "travis@mcdem.us",
            "sender_full_name": "Travis McDemus (S'13)",
            "sender_id": 2139,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "generics",
            "submessages": [],
            "timestamp": 1403745217,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/1380ded36dafac0d6f808b9b7b6c4e85266428a1?x=x&version=1",
            "client": "desktop app Mac 0.4.1",
            "content": "<p>I saw that Brad Fitzpatrick is doing a talk about camlistore at Google IO tomorrow.  Has anyone tried it out yet? Cruising through the source now. <a href=\"https://camlistore.org/\" target=\"_blank\" title=\"https://camlistore.org/\">https://camlistore.org/</a></p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 23826766,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "travis@mcdem.us",
            "sender_full_name": "Travis McDemus (S'13)",
            "sender_id": 2139,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "camlistore",
            "submessages": [],
            "timestamp": 1403745486,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/70292d91a79cfd0fb1c8ad4f650480d631a56e9e?x=x&version=1",
            "client": "website",
            "content": "<p>Not sure if this should be allowed:<br>\n<a href=\"http://play.golang.org/p/M3wxcZLtPW\" target=\"_blank\" title=\"http://play.golang.org/p/M3wxcZLtPW\">http://play.golang.org/p/M3wxcZLtPW</a></p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 23871757,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "lawrence.trey@gmail.com",
            "sender_full_name": "Trey Lawrence (F1'16)",
            "sender_id": 911,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "trickiness",
            "submessages": [],
            "timestamp": 1403818968,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/05023e2779bfc2793d79ee30c81af6ca291539ce?x=x&version=1",
            "client": "website",
            "content": "<p>why not?</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 23872058,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "jordanorelli@gmail.com",
            "sender_full_name": "Jordan Orelli (F'11)",
            "sender_id": 872,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "trickiness",
            "submessages": [],
            "timestamp": 1403819382,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/05023e2779bfc2793d79ee30c81af6ca291539ce?x=x&version=1",
            "client": "website",
            "content": "<p>it's just shadowing.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 23872060,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "jordanorelli@gmail.com",
            "sender_full_name": "Jordan Orelli (F'11)",
            "sender_id": 872,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "trickiness",
            "submessages": [],
            "timestamp": 1403819386,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/70292d91a79cfd0fb1c8ad4f650480d631a56e9e?x=x&version=1",
            "client": "website",
            "content": "<p>ah, I guess it's this: <a href=\"http://en.wikipedia.org/wiki/Variable_shadowing\" target=\"_blank\" title=\"http://en.wikipedia.org/wiki/Variable_shadowing\">http://en.wikipedia.org/wiki/Variable_shadowing</a></p>\n<p>Just seems more confusing with colons</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 23872065,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "lawrence.trey@gmail.com",
            "sender_full_name": "Trey Lawrence (F1'16)",
            "sender_id": 911,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "trickiness",
            "submessages": [],
            "timestamp": 1403819391,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/05023e2779bfc2793d79ee30c81af6ca291539ce?x=x&version=1",
            "client": "website",
            "content": "<p>block scope, yo.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 23872067,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "jordanorelli@gmail.com",
            "sender_full_name": "Jordan Orelli (F'11)",
            "sender_id": 872,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "trickiness",
            "submessages": [],
            "timestamp": 1403819392,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/70292d91a79cfd0fb1c8ad4f650480d631a56e9e?x=x&version=1",
            "client": "website",
            "content": "<p>one character bugs</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 23872122,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "lawrence.trey@gmail.com",
            "sender_full_name": "Trey Lawrence (F1'16)",
            "sender_id": 911,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "trickiness",
            "submessages": [],
            "timestamp": 1403819412,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/05023e2779bfc2793d79ee30c81af6ca291539ce?x=x&version=1",
            "client": "website",
            "content": "<p>you don't even need the conditional.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 23872133,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "jordanorelli@gmail.com",
            "sender_full_name": "Jordan Orelli (F'11)",
            "sender_id": 872,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "trickiness",
            "submessages": [],
            "timestamp": 1403819434,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/05023e2779bfc2793d79ee30c81af6ca291539ce?x=x&version=1",
            "client": "website",
            "content": "<p><a href=\"http://play.golang.org/p/RQd4AR5ajh\" target=\"_blank\" title=\"http://play.golang.org/p/RQd4AR5ajh\">http://play.golang.org/p/RQd4AR5ajh</a></p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 23872135,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "jordanorelli@gmail.com",
            "sender_full_name": "Jordan Orelli (F'11)",
            "sender_id": 872,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "trickiness",
            "submessages": [],
            "timestamp": 1403819435,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/05023e2779bfc2793d79ee30c81af6ca291539ce?x=x&version=1",
            "client": "website",
            "content": "<p>you can create a new scope whenever you want by just making a block.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 23872144,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "jordanorelli@gmail.com",
            "sender_full_name": "Jordan Orelli (F'11)",
            "sender_id": 872,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "trickiness",
            "submessages": [],
            "timestamp": 1403819451,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/70292d91a79cfd0fb1c8ad4f650480d631a56e9e?x=x&version=1",
            "client": "website",
            "content": "<p>yeah, same as C</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 23872156,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "lawrence.trey@gmail.com",
            "sender_full_name": "Trey Lawrence (F1'16)",
            "sender_id": 911,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "trickiness",
            "submessages": [],
            "timestamp": 1403819465,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/a179bb8c3fc4ab0975954f57d47fa6c53a8c2dad?x=x&version=2",
            "client": "website",
            "content": "<p>I've been burnt by shadowing before, particularly with named return values.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 23873449,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "jay@jayschwa.net",
            "sender_full_name": "Jay Weisskopf Petacat (W2'17)",
            "sender_id": 829,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "trickiness",
            "submessages": [],
            "timestamp": 1403821124,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/05023e2779bfc2793d79ee30c81af6ca291539ce?x=x&version=1",
            "client": "website",
            "content": "<p>that's more or less why i don't use named return values.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 23873503,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "jordanorelli@gmail.com",
            "sender_full_name": "Jordan Orelli (F'11)",
            "sender_id": 872,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "trickiness",
            "submessages": [],
            "timestamp": 1403821198,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/05023e2779bfc2793d79ee30c81af6ca291539ce?x=x&version=1",
            "client": "website",
            "content": "<p>i don't really see the point of them.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 23873550,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "jordanorelli@gmail.com",
            "sender_full_name": "Jordan Orelli (F'11)",
            "sender_id": 872,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "trickiness",
            "submessages": [],
            "timestamp": 1403821212,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/a179bb8c3fc4ab0975954f57d47fa6c53a8c2dad?x=x&version=2",
            "client": "website",
            "content": "<p>I think they can be nice for self-documenting multiple return values. However, I stopped using naked <code>return</code>s. I always include the values now.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 23873673,
            "is_me_message": false,
            "last_edit_timestamp": 1403821426,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "jay@jayschwa.net",
            "sender_full_name": "Jay Weisskopf Petacat (W2'17)",
            "sender_id": 829,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "trickiness",
            "submessages": [],
            "timestamp": 1403821403,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/72d03dbb9ec7ac92767a0db7ac17250842ba370b?x=x&version=1",
            "client": "website",
            "content": "<p>heh, <span class=\"user-mention\" data-user-email=\"filippo.valsorda@gmail.com\">@Filippo Valsorda (F'13)</span> and I played with this today: <a href=\"http://play.golang.org/p/OD_IsA8p8v\" target=\"_blank\" title=\"http://play.golang.org/p/OD_IsA8p8v\">http://play.golang.org/p/OD_IsA8p8v</a></p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 23879434,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "samer@samertm.com",
            "sender_full_name": "Samer Masterson (S1'14)",
            "sender_id": 5874,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "trickiness",
            "submessages": [],
            "timestamp": 1403830414,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/70292d91a79cfd0fb1c8ad4f650480d631a56e9e?x=x&version=1",
            "client": "website",
            "content": "<p>It would be fun to write some really obfuscated go:<br>\n<a href=\"http://play.golang.org/p/8D4ZX9r30x\" target=\"_blank\" title=\"http://play.golang.org/p/8D4ZX9r30x\">http://play.golang.org/p/8D4ZX9r30x</a></p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 23889791,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "lawrence.trey@gmail.com",
            "sender_full_name": "Trey Lawrence (F1'16)",
            "sender_id": 911,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "trickiness",
            "submessages": [],
            "timestamp": 1403850543,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/a179bb8c3fc4ab0975954f57d47fa6c53a8c2dad?x=x&version=2",
            "client": "website",
            "content": "<p>Gross.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 23889923,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "jay@jayschwa.net",
            "sender_full_name": "Jay Weisskopf Petacat (W2'17)",
            "sender_id": 829,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "trickiness",
            "submessages": [],
            "timestamp": 1403850789,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/05023e2779bfc2793d79ee30c81af6ca291539ce?x=x&version=1",
            "client": "website",
            "content": "<p>\"is Go a great language? false\" I mean if you really try to hate a language, you'll hate it.  They're all terrible.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 23897818,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "jordanorelli@gmail.com",
            "sender_full_name": "Jordan Orelli (F'11)",
            "sender_id": 872,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "trickiness",
            "submessages": [],
            "timestamp": 1403868488,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/05023e2779bfc2793d79ee30c81af6ca291539ce?x=x&version=1",
            "client": "website",
            "content": "<p>the mind ... can make a heaven of hell, a hell of heaven.  something to that effect.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 23897831,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "jordanorelli@gmail.com",
            "sender_full_name": "Jordan Orelli (F'11)",
            "sender_id": 872,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "trickiness",
            "submessages": [],
            "timestamp": 1403868520,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/72d03dbb9ec7ac92767a0db7ac17250842ba370b?x=x&version=1",
            "client": "website",
            "content": "<p><img alt=\":laughing:\" class=\"emoji\" src=\"static/third/gemoji/images/emoji/laughing.png\" title=\":laughing:\"> dude, write a go parser! You learn all the corners of the language that nobody ever uses, ever. <a href=\"http://play.golang.org/p/8gR7aO4ZPV\" target=\"_blank\" title=\"http://play.golang.org/p/8gR7aO4ZPV\">http://play.golang.org/p/8gR7aO4ZPV</a></p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 23903983,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "samer@samertm.com",
            "sender_full_name": "Samer Masterson (S1'14)",
            "sender_id": 5874,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "trickiness",
            "submessages": [],
            "timestamp": 1403880093,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/044b59a59f2bfb736b3142db2cd025ca?d=identicon&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>Niiiice</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 23904033,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "hi@filippo.io",
            "sender_full_name": "Filippo Valsorda (F2'17)",
            "sender_id": 2884,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "trickiness",
            "submessages": [],
            "timestamp": 1403880150,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/72d03dbb9ec7ac92767a0db7ac17250842ba370b?x=x&version=1",
            "client": "website",
            "content": "<p>haha, gofmt will remove redundant parantheses! that's cool.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 23904061,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "samer@samertm.com",
            "sender_full_name": "Samer Masterson (S1'14)",
            "sender_id": 5874,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "trickiness",
            "submessages": [],
            "timestamp": 1403880233,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/70292d91a79cfd0fb1c8ad4f650480d631a56e9e?x=x&version=1",
            "client": "website",
            "content": "<p>Jordan, just me being a troll. I knew you would take the bate.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 23906074,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "lawrence.trey@gmail.com",
            "sender_full_name": "Trey Lawrence (F1'16)",
            "sender_id": 911,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "trickiness",
            "submessages": [],
            "timestamp": 1403882889,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/048837dd1707e891a4e916295440c13a?d=identicon&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>pumped. oauth2 support with osin seems to be pretty solid.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 24596437,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "jdennis@gmail.com",
            "sender_full_name": "James Dennis (S'11)",
            "sender_id": 971,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "oauth2",
            "submessages": [],
            "timestamp": 1405044794,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/048837dd1707e891a4e916295440c13a?d=identicon&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>oauth2 providing, i should say</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 24596441,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "jdennis@gmail.com",
            "sender_full_name": "James Dennis (S'11)",
            "sender_id": 971,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "oauth2",
            "submessages": [],
            "timestamp": 1405044803,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/72d03dbb9ec7ac92767a0db7ac17250842ba370b?x=x&version=1",
            "client": "website",
            "content": "<p>hey guys, i'm going to the golang nyc meetup on tuesday. they don't say what the talk is gonna be on <img alt=\":sweat_smile:\" class=\"emoji\" src=\"static/third/gemoji/images/emoji/sweat_smile.png\" title=\":sweat_smile:\"> but it should be cool. anyone want to tag along?</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 24625045,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "samer@samertm.com",
            "sender_full_name": "Samer Masterson (S1'14)",
            "sender_id": 5874,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "golang meetup!",
            "submessages": [],
            "timestamp": 1405098424,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/b850936c0011b8c05e23dc6289b55c7e5c2dfd7e?x=x&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>where is it? time? i will probably join you </p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 24625733,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "jorge@izqui.me",
            "sender_full_name": "Jorge Izquierdo (S1'14)",
            "sender_id": 5873,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "golang meetup!",
            "submessages": [],
            "timestamp": 1405099296,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/048837dd1707e891a4e916295440c13a?d=identicon&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>I've never been to the golang meetup in nyc. Is it good?</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 24626305,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "jdennis@gmail.com",
            "sender_full_name": "James Dennis (S'11)",
            "sender_id": 971,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "golang meetup!",
            "submessages": [],
            "timestamp": 1405100006,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/72d03dbb9ec7ac92767a0db7ac17250842ba370b?x=x&version=1",
            "client": "website",
            "content": "<p>it's on tuesday at 6 pm in manhattan</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 24630980,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "samer@samertm.com",
            "sender_full_name": "Samer Masterson (S1'14)",
            "sender_id": 5874,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "golang meetup!",
            "submessages": [],
            "timestamp": 1405105842,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/72d03dbb9ec7ac92767a0db7ac17250842ba370b?x=x&version=1",
            "client": "website",
            "content": "<p>i have no idea if it's gonna be cool ^_^</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 24630990,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "samer@samertm.com",
            "sender_full_name": "Samer Masterson (S1'14)",
            "sender_id": 5874,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "golang meetup!",
            "submessages": [],
            "timestamp": 1405105853,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/b850936c0011b8c05e23dc6289b55c7e5c2dfd7e?x=x&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>It is not this tuesday but next tuesday (22nd), I think I won't be able to make it in the 22nd :(</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 24670653,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "jorge@izqui.me",
            "sender_full_name": "Jorge Izquierdo (S1'14)",
            "sender_id": 5873,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "golang meetup!",
            "submessages": [],
            "timestamp": 1405188900,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/72d03dbb9ec7ac92767a0db7ac17250842ba370b?x=x&version=1",
            "client": "website",
            "content": "<p>hey gophers, I've written a parser for a subset of Go in Go. You can check it out at <a href=\"http://github.com/samertm/chompy\" target=\"_blank\" title=\"http://github.com/samertm/chompy\">github.com/samertm/chompy</a>. You might be interested in the design of the parser type, in the file parser.go.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 24815913,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "samer@samertm.com",
            "sender_full_name": "Samer Masterson (S1'14)",
            "sender_id": 5874,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "code review for parser",
            "submessages": [],
            "timestamp": 1405459416,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/72d03dbb9ec7ac92767a0db7ac17250842ba370b?x=x&version=1",
            "client": "website",
            "content": "<p>(everything related to parsing is in the directory parse/)</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 24815944,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "samer@samertm.com",
            "sender_full_name": "Samer Masterson (S1'14)",
            "sender_id": 5874,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "code review for parser",
            "submessages": [],
            "timestamp": 1405459444,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/72d03dbb9ec7ac92767a0db7ac17250842ba370b?x=x&version=1",
            "client": "website",
            "content": "<p>I can print out the tree right now, but I'm having trouble coming up with a design for a pretty printer for the nodes of the tree (relevant: nodes.go)</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 24816006,
            "is_me_message": false,
            "last_edit_timestamp": 1405459795,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "samer@samertm.com",
            "sender_full_name": "Samer Masterson (S1'14)",
            "sender_id": 5874,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "code review for parser",
            "submessages": [],
            "timestamp": 1405459500,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/72d03dbb9ec7ac92767a0db7ac17250842ba370b?x=x&version=1",
            "client": "website",
            "content": "<p>which would indent the code. for instance, right now a section of the abstract syntax tree might print itself as:</p>\n<div class=\"codehilite\"><pre>start call\nopname: hello\nend call\n</pre></div>\n\n\n<p>and I want it to indent, like:</p>\n<div class=\"codehilite\"><pre>start call\n    opname: hello\nend call\n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 24816067,
            "is_me_message": false,
            "last_edit_timestamp": 1405459653,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "samer@samertm.com",
            "sender_full_name": "Samer Masterson (S1'14)",
            "sender_id": 5874,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "code review for parser",
            "submessages": [],
            "timestamp": 1405459559,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/72d03dbb9ec7ac92767a0db7ac17250842ba370b?x=x&version=1",
            "client": "website",
            "content": "<p>I've toyed around with having a <code>prettyPrint</code> function that takes a string and replace all newlines (except the last one) with a newline and some spaces, but it didn't work the way I expected after attaching it to the end of every single String() function call</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 24816263,
            "is_me_message": false,
            "last_edit_timestamp": 1405459756,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "samer@samertm.com",
            "sender_full_name": "Samer Masterson (S1'14)",
            "sender_id": 5874,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "code review for parser",
            "submessages": [],
            "timestamp": 1405459708,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/72d03dbb9ec7ac92767a0db7ac17250842ba370b?x=x&version=1",
            "client": "website",
            "content": "<p>I wonder if I'm on the right track, but I should be more selective about what I actually pretty print </p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 24816291,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "samer@samertm.com",
            "sender_full_name": "Samer Masterson (S1'14)",
            "sender_id": 5874,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "code review for parser",
            "submessages": [],
            "timestamp": 1405459731,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/72d03dbb9ec7ac92767a0db7ac17250842ba370b?x=x&version=1",
            "client": "website",
            "content": "<p>interesting article! <a href=\"http://arslan.io/ten-useful-techniques-in-go\" target=\"_blank\" title=\"http://arslan.io/ten-useful-techniques-in-go\">http://arslan.io/ten-useful-techniques-in-go</a></p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 24889897,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "samer@samertm.com",
            "sender_full_name": "Samer Masterson (S1'14)",
            "sender_id": 5874,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "\"Ten Useful Techniques in Go\"",
            "submessages": [],
            "timestamp": 1405576101,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/72d03dbb9ec7ac92767a0db7ac17250842ba370b?x=x&version=1",
            "client": "website",
            "content": "<p>I think \"9. withContext wrapper functions\" is super clever</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 24889901,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "samer@samertm.com",
            "sender_full_name": "Samer Masterson (S1'14)",
            "sender_id": 5874,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "\"Ten Useful Techniques in Go\"",
            "submessages": [],
            "timestamp": 1405576123,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/048837dd1707e891a4e916295440c13a?d=identicon&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>My exloration of Go lead me to Docker and then to CoreOS and I'm pretty into both of them so far.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 24959873,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "jdennis@gmail.com",
            "sender_full_name": "James Dennis (S'11)",
            "sender_id": 971,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "CoreOS & Docker",
            "submessages": [],
            "timestamp": 1405697921,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/048837dd1707e891a4e916295440c13a?d=identicon&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>Anyone here have an opinion on either?</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 24959876,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "jdennis@gmail.com",
            "sender_full_name": "James Dennis (S'11)",
            "sender_id": 971,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "CoreOS & Docker",
            "submessages": [],
            "timestamp": 1405697932,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/72d03dbb9ec7ac92767a0db7ac17250842ba370b?x=x&version=1",
            "client": "website",
            "content": "<p>hey guys! we should take a quick tally of who wants to go</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 25088587,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "samer@samertm.com",
            "sender_full_name": "Samer Masterson (S1'14)",
            "sender_id": 5874,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "planning for the go meetup",
            "submessages": [],
            "timestamp": 1405968128,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/72d03dbb9ec7ac92767a0db7ac17250842ba370b?x=x&version=1",
            "client": "website",
            "content": "<p>I can bring two people, I assume that includes <span class=\"user-mention\" data-user-email=\"jdennis@gmail.com\">@James Dennis (S'11)</span> </p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 25088613,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "samer@samertm.com",
            "sender_full_name": "Samer Masterson (S1'14)",
            "sender_id": 5874,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "planning for the go meetup",
            "submessages": [],
            "timestamp": 1405968148,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/72d03dbb9ec7ac92767a0db7ac17250842ba370b?x=x&version=1",
            "client": "website",
            "content": "<p>it's 5 bucks a person (:O wot), so be prepared</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 25088637,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "samer@samertm.com",
            "sender_full_name": "Samer Masterson (S1'14)",
            "sender_id": 5874,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "planning for the go meetup",
            "submessages": [],
            "timestamp": 1405968198,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/9081c59d52b332dd7a8b9a40d1037305?d=identicon&version=1",
            "client": "website",
            "content": "<p>I'm signed up.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 25088705,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "se@n-garb.org",
            "sender_full_name": "Sean Garborg (S1'14)",
            "sender_id": 5859,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "planning for the go meetup",
            "submessages": [],
            "timestamp": 1405968256,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/72d03dbb9ec7ac92767a0db7ac17250842ba370b?x=x&version=1",
            "client": "website",
            "content": "<p>woo!</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 25088733,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "samer@samertm.com",
            "sender_full_name": "Samer Masterson (S1'14)",
            "sender_id": 5874,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "planning for the go meetup",
            "submessages": [],
            "timestamp": 1405968306,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/72d03dbb9ec7ac92767a0db7ac17250842ba370b?x=x&version=1",
            "client": "website",
            "content": "<p>pinging <span class=\"user-mention\" data-user-email=\"jay@jayschwa.net\">@Jay Weisskopf (W'13)</span> <span class=\"user-mention\" data-user-email=\"travis@mcdem.us\">@Travis McDemus (S'13)</span> : should we look for you guys at the meet up?</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 25119497,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "samer@samertm.com",
            "sender_full_name": "Samer Masterson (S1'14)",
            "sender_id": 5874,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "planning for the go meetup",
            "submessages": [],
            "timestamp": 1406018997,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/1380ded36dafac0d6f808b9b7b6c4e85266428a1?x=x&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"samer@samertm.com\">@Samer Masterson (S'14)</span> , yeah, I'm signed up as of now.  I'll probably be there a bit after 6:00pm</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 25125090,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "travis@mcdem.us",
            "sender_full_name": "Travis McDemus (S'13)",
            "sender_id": 2139,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "planning for the go meetup",
            "submessages": [],
            "timestamp": 1406031890,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/38a517585080f3641d2f0f3c6a4e90ea?d=identicon&version=1",
            "client": "website",
            "content": "<p>for friday's job prep exercise, we built a toy version control system. i did it by recursively calling a function that called ioutil.ReadDir(), but i thought it would be more idiomatic to re-do it using filepath.Walk(), which takes in a function of type Walkfn() that it then calls. </p>\n<p>filepath.Walkfn is: </p>\n<div class=\"codehilite\"><pre><span class=\"k\">type</span> <span class=\"k\">func</span><span class=\"p\">(</span><span class=\"n\">path</span> <span class=\"nb\">string</span><span class=\"p\">,</span> <span class=\"n\">info</span> <span class=\"n\">os</span><span class=\"p\">.</span><span class=\"n\">FileInfo</span><span class=\"p\">,</span> <span class=\"n\">err</span> <span class=\"n\">error</span><span class=\"p\">)</span> <span class=\"n\">error</span> \n</pre></div>\n\n\n<p>, but to do the vcs, you need to insert your vcs's directory into the path. i was handling this by passing two parts to my function: the absolute path and the relative path, and then using filepath.Join(basepath, \".myvcs\", relativepath) . </p>\n<p>one solution to this is to have it be a limitation of the program to only work in the current directory, but i wanted to be able to pass in the directory to use as an argument. i basically arrived at the answer \"it can't be done cleanly and idiomatically\" but was wondering if any other gophers saw something i didn't. </p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 25420004,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "bcgraham@gmail.com",
            "sender_full_name": "Brian Graham (S2'14)",
            "sender_id": 6166,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "filepath.Walk",
            "submessages": [],
            "timestamp": 1406557444,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/a179bb8c3fc4ab0975954f57d47fa6c53a8c2dad?x=x&version=2",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"bcgraham@gmail.com\">@Brian Graham (S'14)</span> I'm afraid I don't follow.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 25440924,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "jay@jayschwa.net",
            "sender_full_name": "Jay Weisskopf Petacat (W2'17)",
            "sender_id": 829,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "filepath.Walk",
            "submessages": [],
            "timestamp": 1406583578,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/38a517585080f3641d2f0f3c6a4e90ea?d=identicon&version=1",
            "client": "website",
            "content": "<p>sure, sorry about that. where do i stop making sense? </p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 25441033,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "bcgraham@gmail.com",
            "sender_full_name": "Brian Graham (S2'14)",
            "sender_id": 6166,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "filepath.Walk",
            "submessages": [],
            "timestamp": 1406583718,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/a179bb8c3fc4ab0975954f57d47fa6c53a8c2dad?x=x&version=2",
            "client": "website",
            "content": "<p>So you had some part of your VCS implemented with <code>ioutil.ReadDir()</code> (scanning for changes or something) and you wanted to switch that to <code>Walk</code>?</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 25441158,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "jay@jayschwa.net",
            "sender_full_name": "Jay Weisskopf Petacat (W2'17)",
            "sender_id": 829,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "filepath.Walk",
            "submessages": [],
            "timestamp": 1406583896,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/a179bb8c3fc4ab0975954f57d47fa6c53a8c2dad?x=x&version=2",
            "client": "website",
            "content": "<p>and absolute vs relative paths was causing some issue with Walk?</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 25441328,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "jay@jayschwa.net",
            "sender_full_name": "Jay Weisskopf Petacat (W2'17)",
            "sender_id": 829,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "filepath.Walk",
            "submessages": [],
            "timestamp": 1406584093,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/38a517585080f3641d2f0f3c6a4e90ea?d=identicon&version=1",
            "client": "website",
            "content": "<p>right, basically</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 25441346,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "bcgraham@gmail.com",
            "sender_full_name": "Brian Graham (S2'14)",
            "sender_id": 6166,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "filepath.Walk",
            "submessages": [],
            "timestamp": 1406584108,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/a179bb8c3fc4ab0975954f57d47fa6c53a8c2dad?x=x&version=2",
            "client": "website",
            "content": "<p>and \"relative\" in this case means \"relative to .myvcs\", not \"relative to pwd\"?</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 25441358,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "jay@jayschwa.net",
            "sender_full_name": "Jay Weisskopf Petacat (W2'17)",
            "sender_id": 829,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "filepath.Walk",
            "submessages": [],
            "timestamp": 1406584134,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/38a517585080f3641d2f0f3c6a4e90ea?d=identicon&version=1",
            "client": "website",
            "content": "<p>right, making a copy of the current directory and putting it into a directory called .myvcs inside the top-level folder. i.e., if i'm running it from /dir/, and dir is populated with /dir/subdir1 and /dir/subdir2, i will need to copy subdir1 and contents into /dir/.myvcs/subdir1</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 25441362,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "bcgraham@gmail.com",
            "sender_full_name": "Brian Graham (S2'14)",
            "sender_id": 6166,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "filepath.Walk",
            "submessages": [],
            "timestamp": 1406584140,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/38a517585080f3641d2f0f3c6a4e90ea?d=identicon&version=1",
            "client": "website",
            "content": "<p>relative to pwd</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 25441379,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "bcgraham@gmail.com",
            "sender_full_name": "Brian Graham (S2'14)",
            "sender_id": 6166,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "filepath.Walk",
            "submessages": [],
            "timestamp": 1406584166,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/38a517585080f3641d2f0f3c6a4e90ea?d=identicon&version=1",
            "client": "website",
            "content": "<p>because when walkfn() gets called, it will get called with \"/dir/subdir1\", but i'll need to turn that into \"/dir/.myvcs/subdir1\" </p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 25441441,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "bcgraham@gmail.com",
            "sender_full_name": "Brian Graham (S2'14)",
            "sender_id": 6166,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "filepath.Walk",
            "submessages": [],
            "timestamp": 1406584227,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/38a517585080f3641d2f0f3c6a4e90ea?d=identicon&version=1",
            "client": "website",
            "content": "<p>i just wasn't sure how to back into that information - walkfn() doesn't get called with \"base path\" and \"current path\" arguments</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 25441472,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "bcgraham@gmail.com",
            "sender_full_name": "Brian Graham (S2'14)",
            "sender_id": 6166,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "filepath.Walk",
            "submessages": [],
            "timestamp": 1406584316,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/a179bb8c3fc4ab0975954f57d47fa6c53a8c2dad?x=x&version=2",
            "client": "website",
            "content": "<p>I still don't understand, but if you want the implementation of your <code>WalkFunc</code> to have access to extra info, I suppose you could make it a closure:</p>\n<div class=\"codehilite\"><pre><span class=\"k\">func</span> <span class=\"n\">foo</span><span class=\"p\">(</span><span class=\"n\">redpath</span><span class=\"p\">,</span> <span class=\"n\">bluepath</span> <span class=\"nb\">string</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"n\">walkfn</span> <span class=\"p\">:=</span> <span class=\"k\">func</span><span class=\"p\">(</span><span class=\"n\">path</span> <span class=\"nb\">string</span><span class=\"p\">,</span> <span class=\"n\">info</span> <span class=\"n\">os</span><span class=\"p\">.</span><span class=\"n\">FileInfo</span><span class=\"p\">,</span> <span class=\"n\">err</span> <span class=\"n\">error</span><span class=\"p\">)</span> <span class=\"n\">error</span> <span class=\"p\">{</span>\n        <span class=\"c1\">// redpath and bluepath are known from here</span>\n        <span class=\"n\">fmt</span><span class=\"p\">.</span><span class=\"n\">Println</span><span class=\"p\">(</span><span class=\"n\">redpath</span><span class=\"p\">,</span> <span class=\"n\">bluepath</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">nil</span>\n    <span class=\"p\">}</span>\n    <span class=\"n\">filepath</span><span class=\"p\">.</span><span class=\"n\">Walk</span><span class=\"p\">(</span><span class=\"s\">&quot;foo/bar&quot;</span><span class=\"p\">,</span> <span class=\"n\">walkfn</span><span class=\"p\">)</span>\n<span class=\"p\">}</span>\n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 25441786,
            "is_me_message": false,
            "last_edit_timestamp": 1406585113,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "jay@jayschwa.net",
            "sender_full_name": "Jay Weisskopf Petacat (W2'17)",
            "sender_id": 829,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "filepath.Walk",
            "submessages": [],
            "timestamp": 1406584707,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/38a517585080f3641d2f0f3c6a4e90ea?d=identicon&version=1",
            "client": "website",
            "content": "<p>thanks very much, that's what i was hoping for</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 25441827,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "bcgraham@gmail.com",
            "sender_full_name": "Brian Graham (S2'14)",
            "sender_id": 6166,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "filepath.Walk",
            "submessages": [],
            "timestamp": 1406584788,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/a179bb8c3fc4ab0975954f57d47fa6c53a8c2dad?x=x&version=2",
            "client": "website",
            "content": "<p>I work at eBay, so feel free to track me down tonight. Maybe it'll be easier to explain in person <img alt=\":grin:\" class=\"emoji\" src=\"static/third/gemoji/images/emoji/grin.png\" title=\":grin:\"> </p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 25441875,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "jay@jayschwa.net",
            "sender_full_name": "Jay Weisskopf Petacat (W2'17)",
            "sender_id": 829,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "filepath.Walk",
            "submessages": [],
            "timestamp": 1406584811,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/38a517585080f3641d2f0f3c6a4e90ea?d=identicon&version=1",
            "client": "website",
            "content": "<p>haha okay thanks! :) </p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 25441882,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "bcgraham@gmail.com",
            "sender_full_name": "Brian Graham (S2'14)",
            "sender_id": 6166,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "filepath.Walk",
            "submessages": [],
            "timestamp": 1406584827,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/38a517585080f3641d2f0f3c6a4e90ea?d=identicon&version=1",
            "client": "website",
            "content": "<p>hey Jay, missed you yesterday but i'm sure there will be another over the next few months :) thanks for the offer! </p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 25470502,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "bcgraham@gmail.com",
            "sender_full_name": "Brian Graham (S2'14)",
            "sender_id": 6166,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "filepath.Walk",
            "submessages": [],
            "timestamp": 1406639989,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/048837dd1707e891a4e916295440c13a?d=identicon&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>Sorry... I'm over a week late to this. I was busy and not paying attention to zulip. </p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 25482907,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "jdennis@gmail.com",
            "sender_full_name": "James Dennis (S'11)",
            "sender_id": 971,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "planning for the go meetup",
            "submessages": [],
            "timestamp": 1406656680,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/72d03dbb9ec7ac92767a0db7ac17250842ba370b?x=x&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"jdennis@gmail.com\">@James Dennis (S'11)</span> it's fine! :D</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 25483116,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "samer@samertm.com",
            "sender_full_name": "Samer Masterson (S1'14)",
            "sender_id": 5874,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "planning for the go meetup",
            "submessages": [],
            "timestamp": 1406656912,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/048837dd1707e891a4e916295440c13a?d=identicon&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>how was it? i've never been to a golang meetup</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 25483234,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "jdennis@gmail.com",
            "sender_full_name": "James Dennis (S'11)",
            "sender_id": 971,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "planning for the go meetup",
            "submessages": [],
            "timestamp": 1406657035,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/72d03dbb9ec7ac92767a0db7ac17250842ba370b?x=x&version=1",
            "client": "website",
            "content": "<p>it was a lot of fun! it was kind of corporate (i'm not sure if you got the emails about it, but apparently this social media firm got a hold of the meetup, so there was a lot of talk about \"networking\" and \"go strategy\"), but two go-related talks were really good</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 25483456,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "samer@samertm.com",
            "sender_full_name": "Samer Masterson (S1'14)",
            "sender_id": 5874,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "planning for the go meetup",
            "submessages": [],
            "timestamp": 1406657213,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/72d03dbb9ec7ac92767a0db7ac17250842ba370b?x=x&version=1",
            "client": "website",
            "content": "<p>the main talk rebutted the blog post that was big on hacker news about how go sucks :P</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 25483473,
            "is_me_message": false,
            "last_edit_timestamp": 1406657239,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "samer@samertm.com",
            "sender_full_name": "Samer Masterson (S1'14)",
            "sender_id": 5874,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "planning for the go meetup",
            "submessages": [],
            "timestamp": 1406657231,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/048837dd1707e891a4e916295440c13a?d=identicon&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>Baaah... bums me out when meetups get a little corporate.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 25483705,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "jdennis@gmail.com",
            "sender_full_name": "James Dennis (S'11)",
            "sender_id": 971,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "planning for the go meetup",
            "submessages": [],
            "timestamp": 1406657510,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/048837dd1707e891a4e916295440c13a?d=identicon&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>With Hack And Tell, we give corporate anything an experience they never want to come back for :)</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 25483758,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "jdennis@gmail.com",
            "sender_full_name": "James Dennis (S'11)",
            "sender_id": 971,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "planning for the go meetup",
            "submessages": [],
            "timestamp": 1406657536,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/72d03dbb9ec7ac92767a0db7ac17250842ba370b?x=x&version=1",
            "client": "website",
            "content": "<p>yeah, that part was weird :P the next meet up should be \"normal\", though, because the old organizers are in charge again.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 25483792,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "samer@samertm.com",
            "sender_full_name": "Samer Masterson (S1'14)",
            "sender_id": 5874,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "planning for the go meetup",
            "submessages": [],
            "timestamp": 1406657595,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/a179bb8c3fc4ab0975954f57d47fa6c53a8c2dad?x=x&version=2",
            "client": "website",
            "content": "<p>FWIW, the previous Go meetups (under the old organizers) didn't feel corporate at all to me. There would just be a brief \"Thanks to company X for hosting us and providing food\" at the beginning.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 25484242,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "jay@jayschwa.net",
            "sender_full_name": "Jay Weisskopf Petacat (W2'17)",
            "sender_id": 829,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "planning for the go meetup",
            "submessages": [],
            "timestamp": 1406658091,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/70292d91a79cfd0fb1c8ad4f650480d631a56e9e?x=x&version=1",
            "client": "website",
            "content": "<p>Weird non-compatability between 1.2 and 1.3:<br>\n<a href=\"http://play.golang.org/p/zvwEnIKMl5\" target=\"_blank\" title=\"http://play.golang.org/p/zvwEnIKMl5\">http://play.golang.org/p/zvwEnIKMl5</a><br>\nIf you compile that with 1.2,  you'll get:<br>\nFails 999<br>\nWorks 999<br>\nWorks 999</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 25601010,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "lawrence.trey@gmail.com",
            "sender_full_name": "Trey Lawrence (F1'16)",
            "sender_id": 911,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "trickiness",
            "submessages": [],
            "timestamp": 1406844080,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/044b59a59f2bfb736b3142db2cd025ca?d=identicon&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>Is this discussed on golang-nuts?</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 25608495,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "hi@filippo.io",
            "sender_full_name": "Filippo Valsorda (F2'17)",
            "sender_id": 2884,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "trickiness",
            "submessages": [],
            "timestamp": 1406855299,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/a179bb8c3fc4ab0975954f57d47fa6c53a8c2dad?x=x&version=2",
            "client": "website",
            "content": "<p>Tricky indeed. Intuitively, I would expect fail's result to yield 999, not 0. I can only fathom 0 being correct if they're doing some kind of \"lazy\" execution where the first return value is copied into place first before evaluating what the rest of the return values will be.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 25609016,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "jay@jayschwa.net",
            "sender_full_name": "Jay Weisskopf Petacat (W2'17)",
            "sender_id": 829,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "trickiness",
            "submessages": [],
            "timestamp": 1406856303,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/a179bb8c3fc4ab0975954f57d47fa6c53a8c2dad?x=x&version=2",
            "client": "website",
            "content": "<p>Either way, it seems like something the spec should cover (if it doesn't already).</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 25609023,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "jay@jayschwa.net",
            "sender_full_name": "Jay Weisskopf Petacat (W2'17)",
            "sender_id": 829,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "trickiness",
            "submessages": [],
            "timestamp": 1406856335,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/a179bb8c3fc4ab0975954f57d47fa6c53a8c2dad?x=x&version=2",
            "client": "website",
            "content": "<p>... but it only happens when the return value is an interface? wat?</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 25609070,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "jay@jayschwa.net",
            "sender_full_name": "Jay Weisskopf Petacat (W2'17)",
            "sender_id": 829,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "trickiness",
            "submessages": [],
            "timestamp": 1406856395,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/a179bb8c3fc4ab0975954f57d47fa6c53a8c2dad?x=x&version=2",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"lawrence.trey@gmail.com\">@Trey Lawrence (S'12)</span> I think you should ask about this on golang-dev.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 25609092,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "jay@jayschwa.net",
            "sender_full_name": "Jay Weisskopf Petacat (W2'17)",
            "sender_id": 829,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "trickiness",
            "submessages": [],
            "timestamp": 1406856453,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/70292d91a79cfd0fb1c8ad4f650480d631a56e9e?x=x&version=1",
            "client": "website",
            "content": "<p>Cool. Never have posted to golang-nuts. Is that the same as golang-dev?</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 25609915,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "lawrence.trey@gmail.com",
            "sender_full_name": "Trey Lawrence (F1'16)",
            "sender_id": 911,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "trickiness",
            "submessages": [],
            "timestamp": 1406857939,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/70292d91a79cfd0fb1c8ad4f650480d631a56e9e?x=x&version=1",
            "client": "website",
            "content": "<p><a href=\"https://groups.google.com/forum/#!topic/golang-nuts/tIdYIHDMgF8\" target=\"_blank\" title=\"https://groups.google.com/forum/#!topic/golang-nuts/tIdYIHDMgF8\">https://groups.google.com/forum/#!topic/golang-nuts/tIdYIHDMgF8</a></p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 25610535,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "lawrence.trey@gmail.com",
            "sender_full_name": "Trey Lawrence (F1'16)",
            "sender_id": 911,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "trickiness",
            "submessages": [],
            "timestamp": 1406858953,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/a179bb8c3fc4ab0975954f57d47fa6c53a8c2dad?x=x&version=2",
            "client": "website",
            "content": "<p>First reply: \"Don't do that.\"</p>\n<p>Ah, classic mailing list...</p>\n<p>At least he linked to the spec. I haven't fully grokked it yet, but it sounds like the order is defined as being undefined (and thus left to implementation).</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 25613978,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "jay@jayschwa.net",
            "sender_full_name": "Jay Weisskopf Petacat (W2'17)",
            "sender_id": 829,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "trickiness",
            "submessages": [],
            "timestamp": 1406864650,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/a179bb8c3fc4ab0975954f57d47fa6c53a8c2dad?x=x&version=2",
            "client": "website",
            "content": "<p>From the spec:</p>\n<div class=\"codehilite\"><pre><span class=\"n\">a</span> <span class=\"p\">:=</span> <span class=\"mi\">1</span>\n<span class=\"n\">f</span> <span class=\"p\">:=</span> <span class=\"k\">func</span><span class=\"p\">()</span> <span class=\"nb\">int</span> <span class=\"p\">{</span> <span class=\"n\">a</span><span class=\"p\">++;</span> <span class=\"k\">return</span> <span class=\"n\">a</span> <span class=\"p\">}</span>\n<span class=\"n\">x</span> <span class=\"p\">:=</span> <span class=\"p\">[]</span><span class=\"nb\">int</span><span class=\"p\">{</span><span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">f</span><span class=\"p\">()}</span> <span class=\"c1\">// x may be [1, 2] or [2, 2]: evaluation order between a and f() is not specified</span>\n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 25614107,
            "is_me_message": false,
            "last_edit_timestamp": 1406864992,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "jay@jayschwa.net",
            "sender_full_name": "Jay Weisskopf Petacat (W2'17)",
            "sender_id": 829,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "trickiness",
            "submessages": [],
            "timestamp": 1406864977,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/044b59a59f2bfb736b3142db2cd025ca?d=identicon&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>I'm not sure I understand the point.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 25628249,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "hi@filippo.io",
            "sender_full_name": "Filippo Valsorda (F2'17)",
            "sender_id": 2884,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "trickiness",
            "submessages": [],
            "timestamp": 1406897166,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/044b59a59f2bfb736b3142db2cd025ca?d=identicon&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>Is x returned by value or by reference?</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 25628262,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "hi@filippo.io",
            "sender_full_name": "Filippo Valsorda (F2'17)",
            "sender_id": 2884,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "trickiness",
            "submessages": [],
            "timestamp": 1406897176,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/044b59a59f2bfb736b3142db2cd025ca?d=identicon&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>Value, I guess. So yeah, I kinda understand. x is copied before being mutated</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 25628265,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "hi@filippo.io",
            "sender_full_name": "Filippo Valsorda (F2'17)",
            "sender_id": 2884,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "trickiness",
            "submessages": [],
            "timestamp": 1406897198,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/72d03dbb9ec7ac92767a0db7ac17250842ba370b?x=x&version=1",
            "client": "website",
            "content": "<p>interesting talk: <a href=\"http://www.hakkalabs.co/articles/state-go\" target=\"_blank\" title=\"http://www.hakkalabs.co/articles/state-go\">http://www.hakkalabs.co/articles/state-go</a></p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 25799293,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "samer@samertm.com",
            "sender_full_name": "Samer Masterson (S1'14)",
            "sender_id": 5874,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "the state of go",
            "submessages": [],
            "timestamp": 1407229140,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/72d03dbb9ec7ac92767a0db7ac17250842ba370b?x=x&version=1",
            "client": "website",
            "content": "<p>talks about the history of the language, and what to expect in 1.4</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 25799295,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "samer@samertm.com",
            "sender_full_name": "Samer Masterson (S1'14)",
            "sender_id": 5874,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "the state of go",
            "submessages": [],
            "timestamp": 1407229162,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/72d03dbb9ec7ac92767a0db7ac17250842ba370b?x=x&version=1",
            "client": "website",
            "content": "<p><a href=\"http://mwholt.blogspot.co.uk/2014/08/maximizing-use-of-interfaces-in-go.html\" target=\"_blank\" title=\"http://mwholt.blogspot.co.uk/2014/08/maximizing-use-of-interfaces-in-go.html\">http://mwholt.blogspot.co.uk/2014/08/maximizing-use-of-interfaces-in-go.html</a></p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 25846502,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "samer@samertm.com",
            "sender_full_name": "Samer Masterson (S1'14)",
            "sender_id": 5874,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "Maximizing the Use of Interfaces in Go",
            "submessages": [],
            "timestamp": 1407297945,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/72d03dbb9ec7ac92767a0db7ac17250842ba370b?x=x&version=1",
            "client": "website",
            "content": "<p>interesting article on interfaces</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 25846503,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "samer@samertm.com",
            "sender_full_name": "Samer Masterson (S1'14)",
            "sender_id": 5874,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "Maximizing the Use of Interfaces in Go",
            "submessages": [],
            "timestamp": 1407297951,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/b850936c0011b8c05e23dc6289b55c7e5c2dfd7e?x=x&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p><span class=\"user-mention\" data-user-email=\"samer@samertm.com\">@Samer Masterson (S'14)</span>  thanks for sharing. the talk you posted yesterday was very good! </p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 25866364,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "jorge@izqui.me",
            "sender_full_name": "Jorge Izquierdo (S1'14)",
            "sender_id": 5873,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "Maximizing the Use of Interfaces in Go",
            "submessages": [],
            "timestamp": 1407338260,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/70292d91a79cfd0fb1c8ad4f650480d631a56e9e?x=x&version=1",
            "client": "website",
            "content": "<p>Woah, built-in code generation in 1.4!!<br>\n<a href=\"https://docs.google.com/document/d/1V03LUfjSADDooDMhe-_K59EgpTEm3V8uvQRuNMAEnjg/preview?pli=1&amp;sle=true\" target=\"_blank\" title=\"https://docs.google.com/document/d/1V03LUfjSADDooDMhe-_K59EgpTEm3V8uvQRuNMAEnjg/preview?pli=1&amp;sle=true\">https://docs.google.com/document/d/1V03LUfjSADDooDMhe-_K59EgpTEm3V8uvQRuNMAEnjg/preview?pli=1&amp;sle=true</a></p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 26237423,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "lawrence.trey@gmail.com",
            "sender_full_name": "Trey Lawrence (F1'16)",
            "sender_id": 911,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "the state of go",
            "submessages": [],
            "timestamp": 1407993796,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/72d03dbb9ec7ac92767a0db7ac17250842ba370b?x=x&version=1",
            "client": "website",
            "content": "<p>cool!</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 26254553,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "samer@samertm.com",
            "sender_full_name": "Samer Masterson (S1'14)",
            "sender_id": 5874,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "the state of go",
            "submessages": [],
            "timestamp": 1408028981,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/72d03dbb9ec7ac92767a0db7ac17250842ba370b?x=x&version=1",
            "client": "website",
            "content": "<p>also, I just learned that you can specify rewriting rules using gofmt</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 26254602,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "samer@samertm.com",
            "sender_full_name": "Samer Masterson (S1'14)",
            "sender_id": 5874,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "the state of go",
            "submessages": [],
            "timestamp": 1408029017,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/72d03dbb9ec7ac92767a0db7ac17250842ba370b?x=x&version=1",
            "client": "website",
            "content": "<p>hmm</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 26254627,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "samer@samertm.com",
            "sender_full_name": "Samer Masterson (S1'14)",
            "sender_id": 5874,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "the state of go",
            "submessages": [],
            "timestamp": 1408029086,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/72d03dbb9ec7ac92767a0db7ac17250842ba370b?x=x&version=1",
            "client": "website",
            "content": "<p>can you use it to make a type exported?</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 26254633,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "samer@samertm.com",
            "sender_full_name": "Samer Masterson (S1'14)",
            "sender_id": 5874,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "the state of go",
            "submessages": [],
            "timestamp": 1408029099,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/72d03dbb9ec7ac92767a0db7ac17250842ba370b?x=x&version=1",
            "client": "website",
            "content": "<p>you can :O</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 26254711,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "samer@samertm.com",
            "sender_full_name": "Samer Masterson (S1'14)",
            "sender_id": 5874,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "the state of go",
            "submessages": [],
            "timestamp": 1408029202,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/72d03dbb9ec7ac92767a0db7ac17250842ba370b?x=x&version=1",
            "client": "website",
            "content": "<p>it's not super powerful, though. 'gofmt -r \"flower -&gt; Flower\"' will do what you expect, but 'gofmt -r \"<a href=\"http://flower.id\" target=\"_blank\" title=\"http://flower.id\">flower.id</a> -&gt; flower.Id\"' will not</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 26254975,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "samer@samertm.com",
            "sender_full_name": "Samer Masterson (S1'14)",
            "sender_id": 5874,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "the state of go",
            "submessages": [],
            "timestamp": 1408029563,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/72d03dbb9ec7ac92767a0db7ac17250842ba370b?x=x&version=1",
            "client": "website",
            "content": "<p>well, unless you expect it to do nothing :P</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 26254989,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "samer@samertm.com",
            "sender_full_name": "Samer Masterson (S1'14)",
            "sender_id": 5874,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "the state of go",
            "submessages": [],
            "timestamp": 1408029576,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/72d03dbb9ec7ac92767a0db7ac17250842ba370b?x=x&version=1",
            "client": "website",
            "content": "<p>but it would be cool to have a tool where you could run the latter pattern, and have \"id\" changed to \"Id\" wherever it's used by flower</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 26255051,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "samer@samertm.com",
            "sender_full_name": "Samer Masterson (S1'14)",
            "sender_id": 5874,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "the state of go",
            "submessages": [],
            "timestamp": 1408029621,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/72d03dbb9ec7ac92767a0db7ac17250842ba370b?x=x&version=1",
            "client": "website",
            "content": "<p>including the struct declaration and all definitions</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 26255080,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "samer@samertm.com",
            "sender_full_name": "Samer Masterson (S1'14)",
            "sender_id": 5874,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "the state of go",
            "submessages": [],
            "timestamp": 1408029674,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/72d03dbb9ec7ac92767a0db7ac17250842ba370b?x=x&version=1",
            "client": "website",
            "content": "<p>HMM</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 26255099,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "samer@samertm.com",
            "sender_full_name": "Samer Masterson (S1'14)",
            "sender_id": 5874,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "the state of go",
            "submessages": [],
            "timestamp": 1408029698,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/b850936c0011b8c05e23dc6289b55c7e5c2dfd7e?x=x&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>I'm not sure whether this was already shared here, but this presentation is pretty cool: <a href=\"https://talks.golang.org/2012/10things.slide\" target=\"_blank\" title=\"https://talks.golang.org/2012/10things.slide\">https://talks.golang.org/2012/10things.slide</a></p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 26554487,
            "is_me_message": false,
            "last_edit_timestamp": 1408572816,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "jorge@izqui.me",
            "sender_full_name": "Jorge Izquierdo (S1'14)",
            "sender_id": 5873,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "10 things",
            "submessages": [],
            "timestamp": 1408572785,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/b850936c0011b8c05e23dc6289b55c7e5c2dfd7e?x=x&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>Using an anonymous struct for keeping track of a global state object</p>\n<div class=\"codehilite\"><pre>self = struct {\n        *Keypair\n        *Blockchain\n        NodeSlice\n        ConnectionsQueue\n        Address *string\n    }{nil, nil, nil, nil, address}\n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 26554542,
            "is_me_message": false,
            "last_edit_timestamp": 1408572905,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "jorge@izqui.me",
            "sender_full_name": "Jorge Izquierdo (S1'14)",
            "sender_id": 5873,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "10 things",
            "submessages": [],
            "timestamp": 1408572868,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/38a517585080f3641d2f0f3c6a4e90ea?d=identicon&version=1",
            "client": "website",
            "content": "<p>i knew a lot of those but the one i didn't know that i really liked was on <a href=\"https://talks.golang.org/2012/10things.slide#4\" target=\"_blank\" title=\"https://talks.golang.org/2012/10things.slide#4\">https://talks.golang.org/2012/10things.slide#4</a></p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 26555805,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "bcgraham@gmail.com",
            "sender_full_name": "Brian Graham (S2'14)",
            "sender_id": 6166,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "10 things",
            "submessages": [],
            "timestamp": 1408574836,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/38a517585080f3641d2f0f3c6a4e90ea?d=identicon&version=1",
            "client": "website",
            "content": "<p>i never liked having to break out my structs for json data that could be seven or 8 levels deep, that will be a big improvement</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 26555863,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "bcgraham@gmail.com",
            "sender_full_name": "Brian Graham (S2'14)",
            "sender_id": 6166,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "10 things",
            "submessages": [],
            "timestamp": 1408574909,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/38a517585080f3641d2f0f3c6a4e90ea?d=identicon&version=1",
            "client": "website",
            "content": "<p>(deleted)</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 26651749,
            "is_me_message": false,
            "last_edit_timestamp": 1408740959,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "bcgraham@gmail.com",
            "sender_full_name": "Brian Graham (S2'14)",
            "sender_id": 6166,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "question",
            "submessages": [],
            "timestamp": 1408740654,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/1380ded36dafac0d6f808b9b7b6c4e85266428a1?x=x&version=1",
            "client": "website",
            "content": "<p>Hey, is anyone in the latest batch (new timers)  or overlapping batch (old timers) hacking around with Go?</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 27521646,
            "is_me_message": false,
            "last_edit_timestamp": 1410397639,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "travis@mcdem.us",
            "sender_full_name": "Travis McDemus (S'13)",
            "sender_id": 2139,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "who's hacking?",
            "submessages": [],
            "timestamp": 1410397565,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/38a517585080f3641d2f0f3c6a4e90ea?d=identicon&version=1",
            "client": "website",
            "content": "<p>i am, pretty much all the time, what's up?</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 27546165,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "bcgraham@gmail.com",
            "sender_full_name": "Brian Graham (S2'14)",
            "sender_id": 6166,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "who's hacking?",
            "submessages": [],
            "timestamp": 1410447220,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/a0e3966cc5772329ab92ae1414600e4e?d=identicon&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>if an argument to a function in Go is allowed to be nil, do you have to actually call it with nil, or do you just leave it blank?</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 28327769,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "lauter.miriam@gmail.com",
            "sender_full_name": "Miriam Lauter (S2'14)",
            "sender_id": 6181,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "nil arguments",
            "submessages": [],
            "timestamp": 1411851374,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/fcd73cb735a7c0f50049f6bea94233f17eaee624?x=x&version=1",
            "client": "desktop app Windows 0.4.4",
            "content": "<p>You have to call it with nil. Go doesn't have default values for arguments.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 28328140,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "mark.samman@gmail.com",
            "sender_full_name": "Mark Samman (W'14)",
            "sender_id": 5004,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "nil arguments",
            "submessages": [],
            "timestamp": 1411852253,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/a0e3966cc5772329ab92ae1414600e4e?d=identicon&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>thanks!</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 28328682,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "lauter.miriam@gmail.com",
            "sender_full_name": "Miriam Lauter (S2'14)",
            "sender_id": 6181,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "nil arguments",
            "submessages": [],
            "timestamp": 1411853555,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/a0e3966cc5772329ab92ae1414600e4e?d=identicon&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>anyone want to pair with me for a bit on the irc client i'm writing?</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 28394396,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "lauter.miriam@gmail.com",
            "sender_full_name": "Miriam Lauter (S2'14)",
            "sender_id": 6181,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "irc client",
            "submessages": [],
            "timestamp": 1412004258,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/38a517585080f3641d2f0f3c6a4e90ea?d=identicon&version=1",
            "client": "website",
            "content": "<p>part of the gophercon panel with the go authors was rob pike mentioning robert griesemer's \"code rewriting packages\", i've looked around a little for that but can't find anything. does anyone in this channel know what he was talking about?</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 28448775,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "bcgraham@gmail.com",
            "sender_full_name": "Brian Graham (S2'14)",
            "sender_id": 6166,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "code rewriting package(s)",
            "submessages": [],
            "timestamp": 1412088197,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/1380ded36dafac0d6f808b9b7b6c4e85266428a1?x=x&version=1",
            "client": "website",
            "content": "<p>Hey, <span class=\"user-mention\" data-user-email=\"bcgraham@gmail.com\">@Brian Graham (S'14)</span> and I have been discussing writing some code together in lieu of any quality Go meetups.  Specifically, we wanted to start with a crawler / scraper.  Anyone want to do this tonight if we stop by the space?    My default is to do this solo at  Tipping Point (where Perka is)  if no one is available / interested. </p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 28864760,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "travis@mcdem.us",
            "sender_full_name": "Travis McDemus (S'13)",
            "sender_id": 2139,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "let's code",
            "submessages": [],
            "timestamp": 1412862687,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/1380ded36dafac0d6f808b9b7b6c4e85266428a1?x=x&version=1",
            "client": "website",
            "content": "<p>FWIW, I was planning on doing this between 7:00 and 9:00ish. </p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 28864885,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "travis@mcdem.us",
            "sender_full_name": "Travis McDemus (S'13)",
            "sender_id": 2139,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "let's code",
            "submessages": [],
            "timestamp": 1412862933,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/0baa75c82ed02d819be85a4b24b0f4d3?d=identicon&version=1",
            "client": "website",
            "content": "<p>Hey! I'm down.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 28871095,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "mdparker89@gmail.com",
            "sender_full_name": "Matthew Parker (F2'14)",
            "sender_id": 6698,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "let's code",
            "submessages": [],
            "timestamp": 1412870840,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/1380ded36dafac0d6f808b9b7b6c4e85266428a1?x=x&version=1",
            "client": "website",
            "content": "<p>Cool.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 28874674,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "travis@mcdem.us",
            "sender_full_name": "Travis McDemus (S'13)",
            "sender_id": 2139,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "let's code",
            "submessages": [],
            "timestamp": 1412875156,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/1380ded36dafac0d6f808b9b7b6c4e85266428a1?x=x&version=1",
            "client": "website",
            "content": "<p>Plan on meeting at the space at 7:00 then? </p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 28874745,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "travis@mcdem.us",
            "sender_full_name": "Travis McDemus (S'13)",
            "sender_id": 2139,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "let's code",
            "submessages": [],
            "timestamp": 1412875214,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/0baa75c82ed02d819be85a4b24b0f4d3?d=identicon&version=1",
            "client": "website",
            "content": "<p>Sounds good. See you then.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 28876524,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "mdparker89@gmail.com",
            "sender_full_name": "Matthew Parker (F2'14)",
            "sender_id": 6698,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "let's code",
            "submessages": [],
            "timestamp": 1412877416,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/1380ded36dafac0d6f808b9b7b6c4e85266428a1?x=x&version=1",
            "client": "website",
            "content": "<p>Biking up to there now. Brian and I may be in closer to 7:15</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 28889386,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "travis@mcdem.us",
            "sender_full_name": "Travis McDemus (S'13)",
            "sender_id": 2139,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "let's code",
            "submessages": [],
            "timestamp": 1412894750,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/0baa75c82ed02d819be85a4b24b0f4d3?d=identicon&version=1",
            "client": "website",
            "content": "<p>No worries. I'm going to step out to grab some food anyway.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 28889493,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "mdparker89@gmail.com",
            "sender_full_name": "Matthew Parker (F2'14)",
            "sender_id": 6698,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "let's code",
            "submessages": [],
            "timestamp": 1412894884,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/38a517585080f3641d2f0f3c6a4e90ea?d=identicon&version=1",
            "client": "website",
            "content": "<p>hey all, we have a spot?</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 28891112,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "bcgraham@gmail.com",
            "sender_full_name": "Brian Graham (S2'14)",
            "sender_id": 6166,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "let's code",
            "submessages": [],
            "timestamp": 1412897470,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/38a517585080f3641d2f0f3c6a4e90ea?d=identicon&version=1",
            "client": "website",
            "content": "<p>walked in a few minutes ago</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 28891114,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "bcgraham@gmail.com",
            "sender_full_name": "Brian Graham (S2'14)",
            "sender_id": 6166,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "let's code",
            "submessages": [],
            "timestamp": 1412897474,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/61f7402a76ff0aff964da46bd7948ca20279ae1f?x=x&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"stan@schwertly.com\">@Stan Schwertly (F2'14)</span> I have a bug in this Go code, maybe you can spot it... <a href=\"https://github.com/wallyqs/exercises-in-programming-style/blob/buggy-go/03-monolith/tf-03.go\" target=\"_blank\" title=\"https://github.com/wallyqs/exercises-in-programming-style/blob/buggy-go/03-monolith/tf-03.go\">https://github.com/wallyqs/exercises-in-programming-style/blob/buggy-go/03-monolith/tf-03.go</a> , my notes =&gt; <a href=\"https://github.com/wallyqs/exercises-in-org/blob/master/org/prog-styles/03-monolith/go.org#todo-implementation\" target=\"_blank\" title=\"https://github.com/wallyqs/exercises-in-org/blob/master/org/prog-styles/03-monolith/go.org#todo-implementation\">https://github.com/wallyqs/exercises-in-org/blob/master/org/prog-styles/03-monolith/go.org#todo-implementation</a></p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 29320121,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "waldemar.quevedo@gmail.com",
            "sender_full_name": "Waldemar Quevedo (F2'14)",
            "sender_id": 6706,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "buggy-go",
            "submessages": [],
            "timestamp": 1413689319,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/61f7402a76ff0aff964da46bd7948ca20279ae1f?x=x&version=1",
            "client": "website",
            "content": "<p>results should be  <a href=\"https://github.com/wallyqs/exercises-in-programming-style/blob/buggy-go/test/pride-and-prejudice.txt\" target=\"_blank\" title=\"https://github.com/wallyqs/exercises-in-programming-style/blob/buggy-go/test/pride-and-prejudice.txt\">https://github.com/wallyqs/exercises-in-programming-style/blob/buggy-go/test/pride-and-prejudice.txt</a></p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 29320127,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "waldemar.quevedo@gmail.com",
            "sender_full_name": "Waldemar Quevedo (F2'14)",
            "sender_id": 6706,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "buggy-go",
            "submessages": [],
            "timestamp": 1413689347,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/a4b3598d81f87cf19c089df9707ede15?d=identicon&version=1",
            "client": "website",
            "content": "<p>pulling the code down now, maybe something about capitalization since the buggy output's numbers are lower?</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 29320556,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "stan@schwertly.com",
            "sender_full_name": "Stan Schwertly (F2'14)",
            "sender_id": 6674,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "buggy-go",
            "submessages": [],
            "timestamp": 1413690293,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/a179bb8c3fc4ab0975954f57d47fa6c53a8c2dad?x=x&version=2",
            "client": "website",
            "content": "<p>I suggest using a custom <code>SplitFunc</code> for scanner that spits out single words as tokens.<br>\n<a href=\"http://godoc.org/bufio#SplitFunc\" target=\"_blank\" title=\"http://godoc.org/bufio#SplitFunc\">http://godoc.org/bufio#SplitFunc</a></p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 29320656,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "jay@jayschwa.net",
            "sender_full_name": "Jay Weisskopf Petacat (W2'17)",
            "sender_id": 829,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "buggy-go",
            "submessages": [],
            "timestamp": 1413690522,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/a4b3598d81f87cf19c089df9707ede15?d=identicon&version=1",
            "client": "website",
            "content": "<p>Yeah. I think it's actually bugging on char==32 since some lines end with \\n</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 29320660,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "stan@schwertly.com",
            "sender_full_name": "Stan Schwertly (F2'14)",
            "sender_id": 6674,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "buggy-go",
            "submessages": [],
            "timestamp": 1413690549,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/a179bb8c3fc4ab0975954f57d47fa6c53a8c2dad?x=x&version=2",
            "client": "website",
            "content": "<p>Good eye <span class=\"user-mention\" data-user-email=\"stan@schwertly.com\">@Stan Schwertly (F2'14)</span>, I bet you're right.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 29320706,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "jay@jayschwa.net",
            "sender_full_name": "Jay Weisskopf Petacat (W2'17)",
            "sender_id": 829,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "buggy-go",
            "submessages": [],
            "timestamp": 1413690632,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/a4b3598d81f87cf19c089df9707ede15?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"waldemar.quevedo@gmail.com\">@Waldemar Quevedo (F2'14)</span> I have a feeling that replacing the word-splitting you're doing with <span class=\"user-mention\" data-user-email=\"jay@jayschwa.net\">@Jay Weisskopf (W'13)</span> 's suggestion would eliminate the bug</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 29320766,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "stan@schwertly.com",
            "sender_full_name": "Stan Schwertly (F2'14)",
            "sender_id": 6674,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "buggy-go",
            "submessages": [],
            "timestamp": 1413690816,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/a179bb8c3fc4ab0975954f57d47fa6c53a8c2dad?x=x&version=2",
            "client": "website",
            "content": "<p>There is a <code>ScanWords</code> function out of the box, but I think it only uses white space as delimiters. If the text has punctuation, you might need to write a custom <code>SplitFunc</code> to handle that as well. Either way, I think it'll be a little cleaner than scanning by line and then scanning each character.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 29320850,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "jay@jayschwa.net",
            "sender_full_name": "Jay Weisskopf Petacat (W2'17)",
            "sender_id": 829,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "buggy-go",
            "submessages": [],
            "timestamp": 1413690989,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/a4b3598d81f87cf19c089df9707ede15?d=identicon&version=1",
            "client": "website",
            "content": "<p>I added some extra safety checks to make sure words were being at the end of a pass of a line,  when a non-expected character happened (for instance, \"elizabeth--intelligence\" was breaking it), and in the default case (dont add zero-length words) and it works now. <a href=\"https://gist.github.com/Stantheman/609b36fd60e805adca28\" target=\"_blank\" title=\"https://gist.github.com/Stantheman/609b36fd60e805adca28\">https://gist.github.com/Stantheman/609b36fd60e805adca28</a></p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 29321289,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "stan@schwertly.com",
            "sender_full_name": "Stan Schwertly (F2'14)",
            "sender_id": 6674,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "buggy-go",
            "submessages": [],
            "timestamp": 1413692149,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/a4b3598d81f87cf19c089df9707ede15?d=identicon&version=1",
            "client": "website",
            "content": "<p>In the gist I modified the file-path stuff so I wouldn't copy the whole part, the middle is the only special bit</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 29321328,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "stan@schwertly.com",
            "sender_full_name": "Stan Schwertly (F2'14)",
            "sender_id": 6674,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "buggy-go",
            "submessages": [],
            "timestamp": 1413692173,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/a4b3598d81f87cf19c089df9707ede15?d=identicon&version=1",
            "client": "website",
            "content": "<p>It'd probably still be better with the stuff Jay mentioned, but now it works \\o/</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 29321333,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "stan@schwertly.com",
            "sender_full_name": "Stan Schwertly (F2'14)",
            "sender_id": 6674,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "buggy-go",
            "submessages": [],
            "timestamp": 1413692198,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/61f7402a76ff0aff964da46bd7948ca20279ae1f?x=x&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"stan@schwertly.com\">@Stan Schwertly (F2'14)</span> and <span class=\"user-mention\" data-user-email=\"jay@jayschwa.net\">@Jay Weisskopf (W'13)</span> , I see now my whitespace checking was unecessary.. Thanks Stan, that did it! :) <a href=\"https://github.com/wallyqs/exercises-in-org/commit/75967620cbe761830159aef00344364306ef9731#diff-2fde5cb891bafc551bfee64c06b8cd41L102\" target=\"_blank\" title=\"https://github.com/wallyqs/exercises-in-org/commit/75967620cbe761830159aef00344364306ef9731#diff-2fde5cb891bafc551bfee64c06b8cd41L102\">https://github.com/wallyqs/exercises-in-org/commit/75967620cbe761830159aef00344364306ef9731#diff-2fde5cb891bafc551bfee64c06b8cd41L102</a></p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 29322915,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "waldemar.quevedo@gmail.com",
            "sender_full_name": "Waldemar Quevedo (F2'14)",
            "sender_id": 6706,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "buggy-go",
            "submessages": [],
            "timestamp": 1413696205,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/a179bb8c3fc4ab0975954f57d47fa6c53a8c2dad?x=x&version=2",
            "client": "website",
            "content": "<p>I found this blog post interesting.<br>\n<a href=\"https://medium.com/@rakyll/interface-pollution-in-go-7d58bccec275\" target=\"_blank\" title=\"https://medium.com/@rakyll/interface-pollution-in-go-7d58bccec275\">https://medium.com/@rakyll/interface-pollution-in-go-7d58bccec275</a></p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 29351471,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "jay@jayschwa.net",
            "sender_full_name": "Jay Weisskopf Petacat (W2'17)",
            "sender_id": 829,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "interface pollution in go",
            "submessages": [],
            "timestamp": 1413764834,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/9b7fe7ecbea69ba0bf0166b2d8c21b5f?d=identicon&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p><span class=\"user-mention\" data-user-email=\"*\">@all</span> We're <a href=\"https://github.com/mitchellh/packer/issues/283\" target=\"_blank\" title=\"https://github.com/mitchellh/packer/issues/283\">discussing here</a> options for stripping comments out of JSON config files for Packer. Packer is written in Go. One of the suggestions is to port <a href=\"https://github.com/douglascrockford/JSMin/blob/master/jsmin.c\" target=\"_blank\" title=\"https://github.com/douglascrockford/JSMin/blob/master/jsmin.c\">JSMin</a> from C to Go and just use that in Packer to strip comments from the JSON. JSMin was written by Douglas Crockford, the author of the JSON spec, to \"minify\" JavaScript by doing things like stripping out comments. It seems pretty short.</p>\n<p>Would anyone here be interested in porting this thing to Go and releasing it with a small test suite and under a permissive license? If nothing else, it would be a fun exercise, and as a bonus we may be able to get the Packer project to use it! I don't know any Go, but I'd be down to pair with someone on cranking this out.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 29391984,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "nicholas.chammas@gmail.com",
            "sender_full_name": "Nicholas Chammas (F2'14)",
            "sender_id": 6686,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "Port JSMin from C to Go",
            "submessages": [],
            "timestamp": 1413836911,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/7e511d706bbf8980211504de6fcc0bba?d=identicon&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p><span class=\"user-mention\" data-user-email=\"nicholas.chammas@gmail.com\">@Nicholas Chammas (F2'14)</span> I'd be down</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 29392019,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "alan.mit@gmail.com",
            "sender_full_name": "Alan Cohen (F2'14)",
            "sender_id": 6681,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "Port JSMin from C to Go",
            "submessages": [],
            "timestamp": 1413836968,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/556318094ee6dbabf9570403d54e02f3?d=identicon&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>Stripping comments out of JSON?</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 29392023,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "tacla.yamada@gmail.com",
            "sender_full_name": "Pedro Tacla Yamada (F2'14)",
            "sender_id": 6682,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "Port JSMin from C to Go",
            "submessages": [],
            "timestamp": 1413836973,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/556318094ee6dbabf9570403d54e02f3?d=identicon&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>What comments?</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 29392030,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "tacla.yamada@gmail.com",
            "sender_full_name": "Pedro Tacla Yamada (F2'14)",
            "sender_id": 6682,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "Port JSMin from C to Go",
            "submessages": [],
            "timestamp": 1413836981,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/7e511d706bbf8980211504de6fcc0bba?d=identicon&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>Something like this i think: <a href=\"https://github.com/getify/JSON.minify\" target=\"_blank\" title=\"https://github.com/getify/JSON.minify\">https://github.com/getify/JSON.minify</a></p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 29392103,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "alan.mit@gmail.com",
            "sender_full_name": "Alan Cohen (F2'14)",
            "sender_id": 6681,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "Port JSMin from C to Go",
            "submessages": [],
            "timestamp": 1413837030,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/7e511d706bbf8980211504de6fcc0bba?d=identicon&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<blockquote>\n<p>\"A JSON encoder MUST NOT output comments. A JSON decoder MAY accept and ignore comments.\"</p>\n</blockquote>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 29392128,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "alan.mit@gmail.com",
            "sender_full_name": "Alan Cohen (F2'14)",
            "sender_id": 6681,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "Port JSMin from C to Go",
            "submessages": [],
            "timestamp": 1413837043,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/ae8dfd31299fb204434caa2f82cf4fc9?d=identicon&version=1",
            "client": "website",
            "content": "<p>I'm guessing it's really stripping comments out of js files to minimize them.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 29392133,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "timur.ridjanovic@gmail.com",
            "sender_full_name": "Timur Ridjanovic (F'13)",
            "sender_id": 2859,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "Port JSMin from C to Go",
            "submessages": [],
            "timestamp": 1413837046,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/556318094ee6dbabf9570403d54e02f3?d=identicon&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>Oh...</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 29392159,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "tacla.yamada@gmail.com",
            "sender_full_name": "Pedro Tacla Yamada (F2'14)",
            "sender_id": 6682,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "Port JSMin from C to Go",
            "submessages": [],
            "timestamp": 1413837073,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/9b7fe7ecbea69ba0bf0166b2d8c21b5f?d=identicon&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>Hehe, good catch <span class=\"user-mention\" data-user-email=\"tacla.yamada@gmail.com\">@Pedro Tacla Yamada (F2'14)</span>. Packer uses JSON for config files. Users of Packer are complaining (and I'm one of them) that not being able to comment your config files sucks.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 29392161,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "nicholas.chammas@gmail.com",
            "sender_full_name": "Nicholas Chammas (F2'14)",
            "sender_id": 6686,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "Port JSMin from C to Go",
            "submessages": [],
            "timestamp": 1413837076,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/556318094ee6dbabf9570403d54e02f3?d=identicon&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>Comments aren't valid JSON...</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 29392169,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "tacla.yamada@gmail.com",
            "sender_full_name": "Pedro Tacla Yamada (F2'14)",
            "sender_id": 6682,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "Port JSMin from C to Go",
            "submessages": [],
            "timestamp": 1413837087,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/7e511d706bbf8980211504de6fcc0bba?d=identicon&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>Yea, agreed</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 29392171,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "alan.mit@gmail.com",
            "sender_full_name": "Alan Cohen (F2'14)",
            "sender_id": 6681,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "Port JSMin from C to Go",
            "submessages": [],
            "timestamp": 1413837087,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/7e511d706bbf8980211504de6fcc0bba?d=identicon&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>correct</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 29392174,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "alan.mit@gmail.com",
            "sender_full_name": "Alan Cohen (F2'14)",
            "sender_id": 6681,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "Port JSMin from C to Go",
            "submessages": [],
            "timestamp": 1413837091,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/7e511d706bbf8980211504de6fcc0bba?d=identicon&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>I quoted the JSON spec</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 29392179,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "alan.mit@gmail.com",
            "sender_full_name": "Alan Cohen (F2'14)",
            "sender_id": 6681,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "Port JSMin from C to Go",
            "submessages": [],
            "timestamp": 1413837097,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/7e511d706bbf8980211504de6fcc0bba?d=identicon&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>(i think)</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 29392190,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "alan.mit@gmail.com",
            "sender_full_name": "Alan Cohen (F2'14)",
            "sender_id": 6681,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "Port JSMin from C to Go",
            "submessages": [],
            "timestamp": 1413837109,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/9b7fe7ecbea69ba0bf0166b2d8c21b5f?d=identicon&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>So one suggestion is to allow comments in the files and strip them out using something like JSMin before interpreting them as usual.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 29392219,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "nicholas.chammas@gmail.com",
            "sender_full_name": "Nicholas Chammas (F2'14)",
            "sender_id": 6686,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "Port JSMin from C to Go",
            "submessages": [],
            "timestamp": 1413837125,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/7e511d706bbf8980211504de6fcc0bba?d=identicon&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>i think the quote was actually crockford</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 29392242,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "alan.mit@gmail.com",
            "sender_full_name": "Alan Cohen (F2'14)",
            "sender_id": 6681,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "Port JSMin from C to Go",
            "submessages": [],
            "timestamp": 1413837144,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/9b7fe7ecbea69ba0bf0166b2d8c21b5f?d=identicon&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>This is actually the suggestion of Douglas Crockford, who authored the JSON spec: <a href=\"https://plus.google.com/+DouglasCrockfordEsq/posts/RK8qyGVaGSr\" target=\"_blank\" title=\"https://plus.google.com/+DouglasCrockfordEsq/posts/RK8qyGVaGSr\">https://plus.google.com/+DouglasCrockfordEsq/posts/RK8qyGVaGSr</a></p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 29392250,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "nicholas.chammas@gmail.com",
            "sender_full_name": "Nicholas Chammas (F2'14)",
            "sender_id": 6686,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "Port JSMin from C to Go",
            "submessages": [],
            "timestamp": 1413837159,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/556318094ee6dbabf9570403d54e02f3?d=identicon&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>What's done in <code>package.json</code> manifests, sometimes, and is valid-ish JSON is to do:</p>\n<div class=\"codehilite\"><pre>{\n  &quot;dependencies&quot;: &quot;here I talk about dependencies and it&#39;ll be ignored when the next field is parsed&quot;,\n  &quot;dependencies&quot;: {\n  }\n}\n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 29392256,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "tacla.yamada@gmail.com",
            "sender_full_name": "Pedro Tacla Yamada (F2'14)",
            "sender_id": 6682,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "Port JSMin from C to Go",
            "submessages": [],
            "timestamp": 1413837165,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/556318094ee6dbabf9570403d54e02f3?d=identicon&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>Interesting...</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 29392281,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "tacla.yamada@gmail.com",
            "sender_full_name": "Pedro Tacla Yamada (F2'14)",
            "sender_id": 6682,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "Port JSMin from C to Go",
            "submessages": [],
            "timestamp": 1413837219,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/7e511d706bbf8980211504de6fcc0bba?d=identicon&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>is this what we're going for here?</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 29392288,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "alan.mit@gmail.com",
            "sender_full_name": "Alan Cohen (F2'14)",
            "sender_id": 6681,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "Port JSMin from C to Go",
            "submessages": [],
            "timestamp": 1413837222,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/7e511d706bbf8980211504de6fcc0bba?d=identicon&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>/code var myjson = JSON.minify( '{ /* comment */ \"foo\": 42 \\n }' ); // {\"foo\":42}</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 29392289,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "alan.mit@gmail.com",
            "sender_full_name": "Alan Cohen (F2'14)",
            "sender_id": 6681,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "Port JSMin from C to Go",
            "submessages": [],
            "timestamp": 1413837223,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/9b7fe7ecbea69ba0bf0166b2d8c21b5f?d=identicon&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p><a href=\"https://plus.google.com/+DouglasCrockfordEsq/posts/RK8qyGVaGSr\" target=\"_blank\" title=\"https://plus.google.com/+DouglasCrockfordEsq/posts/RK8qyGVaGSr\">Crockford</a>:</p>\n<blockquote>\n<p>Suppose you are using JSON to keep configuration files, which you would like to annotate. Go ahead and insert all the comments you like. Then pipe it through JSMin before handing it to your JSON parser.\ufeff</p>\n</blockquote>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 29392291,
            "is_me_message": false,
            "last_edit_timestamp": 1413837256,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "nicholas.chammas@gmail.com",
            "sender_full_name": "Nicholas Chammas (F2'14)",
            "sender_id": 6686,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "Port JSMin from C to Go",
            "submessages": [],
            "timestamp": 1413837226,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/7e511d706bbf8980211504de6fcc0bba?d=identicon&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<div class=\"codehilite\"><pre>var myjson = JSON.minify( &#39;{ /* comment */ &quot;foo&quot;: 42 \\n }&#39; ); // {&quot;foo&quot;:42}\n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 29392301,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "alan.mit@gmail.com",
            "sender_full_name": "Alan Cohen (F2'14)",
            "sender_id": 6681,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "Port JSMin from C to Go",
            "submessages": [],
            "timestamp": 1413837236,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/556318094ee6dbabf9570403d54e02f3?d=identicon&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>Regexps FTW</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 29392352,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "tacla.yamada@gmail.com",
            "sender_full_name": "Pedro Tacla Yamada (F2'14)",
            "sender_id": 6682,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "Port JSMin from C to Go",
            "submessages": [],
            "timestamp": 1413837268,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/9b7fe7ecbea69ba0bf0166b2d8c21b5f?d=identicon&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>I think copying <a href=\"https://github.com/douglascrockford/JSMin\" target=\"_blank\" title=\"https://github.com/douglascrockford/JSMin\">JSMin's interface</a> is a good start.</p>\n<blockquote>\n<p><code>jsmin &lt;jslint.js &gt;jslint.min.js</code></p>\n</blockquote>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 29392406,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "nicholas.chammas@gmail.com",
            "sender_full_name": "Nicholas Chammas (F2'14)",
            "sender_id": 6686,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "Port JSMin from C to Go",
            "submessages": [],
            "timestamp": 1413837362,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/9b7fe7ecbea69ba0bf0166b2d8c21b5f?d=identicon&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>A simple command-line tool. Give it a file, get a file.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 29392442,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "nicholas.chammas@gmail.com",
            "sender_full_name": "Nicholas Chammas (F2'14)",
            "sender_id": 6686,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "Port JSMin from C to Go",
            "submessages": [],
            "timestamp": 1413837386,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/9b7fe7ecbea69ba0bf0166b2d8c21b5f?d=identicon&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p><span class=\"user-mention\" data-user-email=\"tacla.yamada@gmail.com\">@Pedro Tacla Yamada (F2'14)</span> Repeating keys is indeed valid JSON and a neat way to implement \"comments\", though having the semantics dependent on the key ordering is scary. It also doesn't give you the ability to quickly comment out stuff or annotate things. </p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 29392527,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "nicholas.chammas@gmail.com",
            "sender_full_name": "Nicholas Chammas (F2'14)",
            "sender_id": 6686,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "Port JSMin from C to Go",
            "submessages": [],
            "timestamp": 1413837519,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/556318094ee6dbabf9570403d54e02f3?d=identicon&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>Yep</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 29392569,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "tacla.yamada@gmail.com",
            "sender_full_name": "Pedro Tacla Yamada (F2'14)",
            "sender_id": 6682,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "Port JSMin from C to Go",
            "submessages": [],
            "timestamp": 1413837569,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/9b7fe7ecbea69ba0bf0166b2d8c21b5f?d=identicon&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>The approach I'm following is to let Packer continue to use JSON for its config files but give users a way to comment stuff like they would in any other config file. Hence the Crockford approach of commenting then minifying.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 29392576,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "nicholas.chammas@gmail.com",
            "sender_full_name": "Nicholas Chammas (F2'14)",
            "sender_id": 6686,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "Port JSMin from C to Go",
            "submessages": [],
            "timestamp": 1413837579,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/9b7fe7ecbea69ba0bf0166b2d8c21b5f?d=identicon&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>Makes you wonder why they didn't just allow comments to begin with... The minification step is just an inconvenience.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 29392639,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "nicholas.chammas@gmail.com",
            "sender_full_name": "Nicholas Chammas (F2'14)",
            "sender_id": 6686,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "Port JSMin from C to Go",
            "submessages": [],
            "timestamp": 1413837623,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/7e511d706bbf8980211504de6fcc0bba?d=identicon&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p><span class=\"user-mention\" data-user-email=\"nicholas.chammas@gmail.com\">@Nicholas Chammas (F2'14)</span> if you really want to know... <a href=\"http://blog.getify.com/json-comments/\" target=\"_blank\" title=\"http://blog.getify.com/json-comments/\">http://blog.getify.com/json-comments/</a></p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 29392652,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "alan.mit@gmail.com",
            "sender_full_name": "Alan Cohen (F2'14)",
            "sender_id": 6681,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "Port JSMin from C to Go",
            "submessages": [],
            "timestamp": 1413837641,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/7e511d706bbf8980211504de6fcc0bba?d=identicon&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<blockquote>\n<p>The main reason I took comments out was that I saw people who were trying to control what the parser would do based on what was in the comments, and that totally broke interoperability. There\u2019s no way I could control the way they were using comments, so the most effective fix was to take the comments out. -- Crockford</p>\n</blockquote>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 29392657,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "alan.mit@gmail.com",
            "sender_full_name": "Alan Cohen (F2'14)",
            "sender_id": 6681,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "Port JSMin from C to Go",
            "submessages": [],
            "timestamp": 1413837661,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/9b7fe7ecbea69ba0bf0166b2d8c21b5f?d=identicon&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>Word. That's a good link.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 29392682,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "nicholas.chammas@gmail.com",
            "sender_full_name": "Nicholas Chammas (F2'14)",
            "sender_id": 6686,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "Port JSMin from C to Go",
            "submessages": [],
            "timestamp": 1413837711,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/7e511d706bbf8980211504de6fcc0bba?d=identicon&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>More about JSON than I ever wanted to know</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 29392732,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "alan.mit@gmail.com",
            "sender_full_name": "Alan Cohen (F2'14)",
            "sender_id": 6681,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "Port JSMin from C to Go",
            "submessages": [],
            "timestamp": 1413837745,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/9b7fe7ecbea69ba0bf0166b2d8c21b5f?d=identicon&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>The \"MAY accept and ignore comments\" seems to be key, though it's annoying that most JSON libraries opt not to do so.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 29392733,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "nicholas.chammas@gmail.com",
            "sender_full_name": "Nicholas Chammas (F2'14)",
            "sender_id": 6686,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "Port JSMin from C to Go",
            "submessages": [],
            "timestamp": 1413837746,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/9b7fe7ecbea69ba0bf0166b2d8c21b5f?d=identicon&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>So <span class=\"user-mention\" data-user-email=\"alan.mit@gmail.com\">@Alan Cohen (F2'14)</span> are you game for porting this thing together later this week? Does it seem like a small, fun, and well-contained project? I ask you because I know 0 about Go.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 29392813,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "nicholas.chammas@gmail.com",
            "sender_full_name": "Nicholas Chammas (F2'14)",
            "sender_id": 6686,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "Port JSMin from C to Go",
            "submessages": [],
            "timestamp": 1413837854,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/7e511d706bbf8980211504de6fcc0bba?d=identicon&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>Yea!</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 29392822,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "alan.mit@gmail.com",
            "sender_full_name": "Alan Cohen (F2'14)",
            "sender_id": 6681,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "Port JSMin from C to Go",
            "submessages": [],
            "timestamp": 1413837871,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/7e511d706bbf8980211504de6fcc0bba?d=identicon&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>I know -0 about Go</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 29392825,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "alan.mit@gmail.com",
            "sender_full_name": "Alan Cohen (F2'14)",
            "sender_id": 6681,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "Port JSMin from C to Go",
            "submessages": [],
            "timestamp": 1413837876,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/7e511d706bbf8980211504de6fcc0bba?d=identicon&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>But, I do want to learn a bit, and this seems like a good exercise for it</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 29392935,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "alan.mit@gmail.com",
            "sender_full_name": "Alan Cohen (F2'14)",
            "sender_id": 6681,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "Port JSMin from C to Go",
            "submessages": [],
            "timestamp": 1413838010,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/9b7fe7ecbea69ba0bf0166b2d8c21b5f?d=identicon&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>OK, so let's plan to stumble through this shit together then, shall we? lol</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 29393002,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "nicholas.chammas@gmail.com",
            "sender_full_name": "Nicholas Chammas (F2'14)",
            "sender_id": 6686,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "Port JSMin from C to Go",
            "submessages": [],
            "timestamp": 1413838094,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/7e511d706bbf8980211504de6fcc0bba?d=identicon&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>yea, let's do it. Tomorrow?</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 29393515,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "alan.mit@gmail.com",
            "sender_full_name": "Alan Cohen (F2'14)",
            "sender_id": 6681,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "Port JSMin from C to Go",
            "submessages": [],
            "timestamp": 1413838719,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/9b7fe7ecbea69ba0bf0166b2d8c21b5f?d=identicon&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>Sure, sounds good to me.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 29393599,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "nicholas.chammas@gmail.com",
            "sender_full_name": "Nicholas Chammas (F2'14)",
            "sender_id": 6686,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "Port JSMin from C to Go",
            "submessages": [],
            "timestamp": 1413838851,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/556318094ee6dbabf9570403d54e02f3?d=identicon&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>I made a prototype which doesn't strip whitespace <span class=\"user-mention\" data-user-email=\"nicholas.chammas@gmail.com\">@Nicholas Chammas (F2'14)</span> <span class=\"user-mention\" data-user-email=\"alan.mit@gmail.com\">@Alan Cohen (F2'14)</span> <br>\n<a href=\"https://gist.github.com/230a606902b83358b538\" target=\"_blank\" title=\"https://gist.github.com/230a606902b83358b538\">https://gist.github.com/230a606902b83358b538</a><br>\nI don't really know Go.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 29394644,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "tacla.yamada@gmail.com",
            "sender_full_name": "Pedro Tacla Yamada (F2'14)",
            "sender_id": 6682,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "Port JSMin from C to Go",
            "submessages": [],
            "timestamp": 1413840296,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/556318094ee6dbabf9570403d54e02f3?d=identicon&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>This input:</p>\n<div class=\"codehilite\"><pre>{\n  // comments here\n  &quot;cabal&quot;: {\n    &quot;is&quot;: &quot;not&quot;,\n    &quot;a&quot;: &quot;good&quot;,\n    /* invalid json */\n    &quot;source&quot;: &quot;to&quot;, /* junk\nmulti-line\n all around*/ &quot;expend&quot;: &quot;your&quot;,\n    &quot;night&quot;: &quot;in&quot;\n  },\n  &quot;stuff inside delimiters shouldn&#39;t be messed with though&quot;: &quot;unless we want json hell&quot;\n}\n</pre></div>\n\n\n<p>Provides this output:</p>\n<div class=\"codehilite\"><pre>{\n\n  &quot;cabal&quot;: {\n    &quot;is&quot;: &quot;not&quot;,\n    &quot;a&quot;: &quot;good&quot;,\n\n    &quot;source&quot;: &quot;to&quot;,  &quot;expend&quot;: &quot;your&quot;,\n    &quot;night&quot;: &quot;in&quot;\n  },\n  &quot;stuff inside delimiters shouldn&#39;t be messed with though&quot;: &quot;unless we want json hell&quot;\n}\n</pre></div>\n\n\n<p>Good enough?</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 29394684,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "tacla.yamada@gmail.com",
            "sender_full_name": "Pedro Tacla Yamada (F2'14)",
            "sender_id": 6682,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "Port JSMin from C to Go",
            "submessages": [],
            "timestamp": 1413840355,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/556318094ee6dbabf9570403d54e02f3?d=identicon&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>\"Monolith Style\" haha</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 29394739,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "tacla.yamada@gmail.com",
            "sender_full_name": "Pedro Tacla Yamada (F2'14)",
            "sender_id": 6682,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "Port JSMin from C to Go",
            "submessages": [],
            "timestamp": 1413840414,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/556318094ee6dbabf9570403d54e02f3?d=identicon&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>Plus, the regexp default of not matching <code>\\n</code> with <code>.</code> is weird.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 29394754,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "tacla.yamada@gmail.com",
            "sender_full_name": "Pedro Tacla Yamada (F2'14)",
            "sender_id": 6682,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "Port JSMin from C to Go",
            "submessages": [],
            "timestamp": 1413840447,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/556318094ee6dbabf9570403d54e02f3?d=identicon&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>I bet regexps are faster than the hand-written C iterative program, btw (or at least JS regexps).</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 29394993,
            "is_me_message": false,
            "last_edit_timestamp": 1413840756,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "tacla.yamada@gmail.com",
            "sender_full_name": "Pedro Tacla Yamada (F2'14)",
            "sender_id": 6682,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "Port JSMin from C to Go",
            "submessages": [],
            "timestamp": 1413840740,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/a179bb8c3fc4ab0975954f57d47fa6c53a8c2dad?x=x&version=2",
            "client": "website",
            "content": "<p>Go's regex implementation isn't very fast, but probably still \"fast enough\".</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 29395164,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "jay@jayschwa.net",
            "sender_full_name": "Jay Weisskopf Petacat (W2'17)",
            "sender_id": 829,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "Port JSMin from C to Go",
            "submessages": [],
            "timestamp": 1413841006,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/556318094ee6dbabf9570403d54e02f3?d=identicon&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>Is it faster than hand-written code though?</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 29395225,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "tacla.yamada@gmail.com",
            "sender_full_name": "Pedro Tacla Yamada (F2'14)",
            "sender_id": 6682,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "Port JSMin from C to Go",
            "submessages": [],
            "timestamp": 1413841093,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/a179bb8c3fc4ab0975954f57d47fa6c53a8c2dad?x=x&version=2",
            "client": "website",
            "content": "<p>Doubtful.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 29395255,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "jay@jayschwa.net",
            "sender_full_name": "Jay Weisskopf Petacat (W2'17)",
            "sender_id": 829,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "Port JSMin from C to Go",
            "submessages": [],
            "timestamp": 1413841171,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/556318094ee6dbabf9570403d54e02f3?d=identicon&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>Well; testing against ~3mb files doesn't show much difference between both; though the regex matching version isn't replacing whitespace. What's funny is that Crockford's C program compiled with <code>gcc -Ofast</code> has 13K and the Go program has 2.4MB</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 29396192,
            "is_me_message": false,
            "last_edit_timestamp": 1413842483,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "tacla.yamada@gmail.com",
            "sender_full_name": "Pedro Tacla Yamada (F2'14)",
            "sender_id": 6682,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "Port JSMin from C to Go",
            "submessages": [],
            "timestamp": 1413842451,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/556318094ee6dbabf9570403d54e02f3?d=identicon&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>Is there a way to turn on optimizations/tree-shaking on go?</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 29396198,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "tacla.yamada@gmail.com",
            "sender_full_name": "Pedro Tacla Yamada (F2'14)",
            "sender_id": 6682,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "Port JSMin from C to Go",
            "submessages": [],
            "timestamp": 1413842467,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/9b7fe7ecbea69ba0bf0166b2d8c21b5f?d=identicon&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>Oh nice <span class=\"user-mention\" data-user-email=\"tacla.yamada@gmail.com\">@Pedro Tacla Yamada (F2'14)</span>. <span class=\"user-mention\" data-user-email=\"alan.mit@gmail.com\">@Alan Cohen (F2'14)</span> and I will check out your solution tomorrow and perhaps use it as a reference.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 29397099,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "nicholas.chammas@gmail.com",
            "sender_full_name": "Nicholas Chammas (F2'14)",
            "sender_id": 6686,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "Port JSMin from C to Go",
            "submessages": [],
            "timestamp": 1413843900,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/ed4374e96a4fe9337a0d110b869f5b61?d=identicon&version=1",
            "client": "website",
            "content": "<p>is anyone headed to GothamGo conference on Fri/Sat? I have a ticket :)</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 30613955,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "georgiknox@gmail.com",
            "sender_full_name": "Georgi Knox (S1'14)",
            "sender_id": 5858,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "GothamGo",
            "submessages": [],
            "timestamp": 1415804646,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/a4b3598d81f87cf19c089df9707ede15?d=identicon&version=1",
            "client": "website",
            "content": "<p>! I didn't get one because it was pricey. I'm going to the meetup tomorrow night though</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 30613979,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "stan@schwertly.com",
            "sender_full_name": "Stan Schwertly (F2'14)",
            "sender_id": 6674,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "GothamGo",
            "submessages": [],
            "timestamp": 1415804678,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/a4b3598d81f87cf19c089df9707ede15?d=identicon&version=1",
            "client": "website",
            "content": "<p>are you going to the meetup?</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 30613982,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "stan@schwertly.com",
            "sender_full_name": "Stan Schwertly (F2'14)",
            "sender_id": 6674,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "GothamGo",
            "submessages": [],
            "timestamp": 1415804693,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/ed4374e96a4fe9337a0d110b869f5b61?d=identicon&version=1",
            "client": "website",
            "content": "<p>not to the meetup. </p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 30614629,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "georgiknox@gmail.com",
            "sender_full_name": "Georgi Knox (S1'14)",
            "sender_id": 5858,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "GothamGo",
            "submessages": [],
            "timestamp": 1415805526,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/a4b3598d81f87cf19c089df9707ede15?d=identicon&version=1",
            "client": "website",
            "content": "<p>ah okay. yeah, the conference looks cool though!</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 30614640,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "stan@schwertly.com",
            "sender_full_name": "Stan Schwertly (F2'14)",
            "sender_id": 6674,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "GothamGo",
            "submessages": [],
            "timestamp": 1415805556,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/a4b3598d81f87cf19c089df9707ede15?d=identicon&version=1",
            "client": "website",
            "content": "<p>I forgot about the end-of-batch party on Thursday, so I guess I'm not going to the meetup</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 30616034,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "stan@schwertly.com",
            "sender_full_name": "Stan Schwertly (F2'14)",
            "sender_id": 6674,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "GothamGo",
            "submessages": [],
            "timestamp": 1415807201,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/a179bb8c3fc4ab0975954f57d47fa6c53a8c2dad?x=x&version=2",
            "client": "website",
            "content": "<p>Where was the convention advertised? I only found out about it a couple days ago. I probably would have attended had I planned in advance.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 30616172,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "jay@jayschwa.net",
            "sender_full_name": "Jay Weisskopf Petacat (W2'17)",
            "sender_id": 829,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "GothamGo",
            "submessages": [],
            "timestamp": 1415807375,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/a4b3598d81f87cf19c089df9707ede15?d=identicon&version=1",
            "client": "website",
            "content": "<p>I also only saw it a couple days ago -- from the Go blog post about the 5 year mark iirc</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 30616928,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "stan@schwertly.com",
            "sender_full_name": "Stan Schwertly (F2'14)",
            "sender_id": 6674,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "GothamGo",
            "submessages": [],
            "timestamp": 1415808214,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/a179bb8c3fc4ab0975954f57d47fa6c53a8c2dad?x=x&version=2",
            "client": "website",
            "content": "<p><a href=\"https://groups.google.com/forum/#!topic/golang-dev/sckirqOWepg\" target=\"_blank\" title=\"https://groups.google.com/forum/#!topic/golang-dev/sckirqOWepg\">https://groups.google.com/forum/#!topic/golang-dev/sckirqOWepg</a></p>\n<p>The Go project is moving off of Google Code and over to GitHub. For anyone who has contributed to the project (even just leaving comments on issues), you can authorize their migration tool to tie everything to your GitHub account upon migration.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 30710072,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "jay@jayschwa.net",
            "sender_full_name": "Jay Weisskopf Petacat (W2'17)",
            "sender_id": 829,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "go is moving to github",
            "submessages": [],
            "timestamp": 1415937930,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/1380ded36dafac0d6f808b9b7b6c4e85266428a1?x=x&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"georgiknox@gmail.com\">@Georgi Knox (S'14)</span>, I have a ticket too. Send me a message then, let's say hi there tomorrow.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 30726652,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "travis@mcdem.us",
            "sender_full_name": "Travis McDemus (S'13)",
            "sender_id": 2139,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "GothamGo",
            "submessages": [],
            "timestamp": 1415969810,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/1380ded36dafac0d6f808b9b7b6c4e85266428a1?x=x&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"jay@jayschwa.net\">@Jay Weisskopf (W'13)</span> I'm not sure where I saw it, but it was not obvious.  (I may have been searching for something related to David Crawshaw and found it that way.)  Could we broadcast events here as we see them?  Various meetups have been off my radar in the past, so I'd find that useful.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 30726917,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "travis@mcdem.us",
            "sender_full_name": "Travis McDemus (S'13)",
            "sender_id": 2139,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "GothamGo",
            "submessages": [],
            "timestamp": 1415970296,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/ed4374e96a4fe9337a0d110b869f5b61?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"jay@jayschwa.net\">@Jay Weisskopf (W'13)</span> and <span class=\"user-mention\" data-user-email=\"travis@mcdem.us\">@Travis McDemus (S'13)</span>  -&gt; perhaps we need a Technical Events stream? Ive missed out on stuff too.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 30738756,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "georgiknox@gmail.com",
            "sender_full_name": "Georgi Knox (S1'14)",
            "sender_id": 5858,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "GothamGo",
            "submessages": [],
            "timestamp": 1415987493,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/c86bac9adf1f2fdf58ddc72ac543bcf0?d=identicon&version=1",
            "client": "website",
            "content": "<p><a href=\"https://zulip.com/#narrow/near/30790901/stream/go/topic/how.20to.20configure.20your.20go.20env\" target=\"_blank\" title=\"https://zulip.com/#narrow/near/30790901/stream/go/topic/how.20to.20configure.20your.20go.20env\">https://zulip.com/#narrow/near/30790901/stream/go/topic/how.20to.20configure.20your.20go.20env</a></p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 30791508,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "isaac@overttone.com",
            "sender_full_name": "Isaac Gonzalez (W'12)",
            "sender_id": 6213,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "how to configure your go env",
            "submessages": [],
            "timestamp": 1416083016,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/a179bb8c3fc4ab0975954f57d47fa6c53a8c2dad?x=x&version=2",
            "client": "website",
            "content": "<p>I still think <code>GOPATH</code> should have a default value.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 30823723,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "jay@jayschwa.net",
            "sender_full_name": "Jay Weisskopf Petacat (W2'17)",
            "sender_id": 829,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "how to configure your go env",
            "submessages": [],
            "timestamp": 1416151388,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/a179bb8c3fc4ab0975954f57d47fa6c53a8c2dad?x=x&version=2",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"georgiknox@gmail.com\">@Georgi Knox (S'14)</span> <span class=\"user-mention\" data-user-email=\"travis@mcdem.us\">@Travis McDemus (S'13)</span> how was it?</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 30911818,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "jay@jayschwa.net",
            "sender_full_name": "Jay Weisskopf Petacat (W2'17)",
            "sender_id": 829,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "GothamGo",
            "submessages": [],
            "timestamp": 1416286465,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/ed4374e96a4fe9337a0d110b869f5b61?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"jay@jayschwa.net\">@Jay Weisskopf (W'13)</span>  the videos of the conference should be posted in a few days. The contents of the workshop on teh Friday were excellent.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 31011267,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "georgiknox@gmail.com",
            "sender_full_name": "Georgi Knox (S1'14)",
            "sender_id": 5858,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "GothamGo",
            "submessages": [],
            "timestamp": 1416429927,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/1380ded36dafac0d6f808b9b7b6c4e85266428a1?x=x&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"jay@jayschwa.net\">@Jay Weisskopf (W'13)</span> I had fun with it, but I can't compare to many other conferences or Gophercon itself (since I haven't been to either).  It jumped around from advanced stuff, to intro stuff, to \"standard library practical usage\" stuff. I think it would have helped people of varying skill-sets and experience to do all of that in a different order, but I still liked the talks.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 31054147,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "travis@mcdem.us",
            "sender_full_name": "Travis McDemus (S'13)",
            "sender_id": 2139,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "GothamGo",
            "submessages": [],
            "timestamp": 1416497184,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/1380ded36dafac0d6f808b9b7b6c4e85266428a1?x=x&version=1",
            "client": "website",
            "content": "<p>I'll brain dump more when I'm scrambling around less, but it has been fun to see David Crawshaw's \"experiments\" on the mobile actually work, although things are still nascent there. I got to talk with Sameer and David directly too, and got advice on how to better multi-plex out the MIDI byte stream stuff I was working on during our batch. </p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 31054271,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "travis@mcdem.us",
            "sender_full_name": "Travis McDemus (S'13)",
            "sender_id": 2139,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "GothamGo",
            "submessages": [],
            "timestamp": 1416497359,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/1380ded36dafac0d6f808b9b7b6c4e85266428a1?x=x&version=1",
            "client": "website",
            "content": "<p>So, like, that alone was worth it to me. </p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 31054407,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "travis@mcdem.us",
            "sender_full_name": "Travis McDemus (S'13)",
            "sender_id": 2139,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "GothamGo",
            "submessages": [],
            "timestamp": 1416497488,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/61f7402a76ff0aff964da46bd7948ca20279ae1f?x=x&version=1",
            "client": "website",
            "content": "<p>it took me a while to understand how to initialize an embedded type... <a href=\"https://groups.google.com/forum/#!topic/golang-nuts/rTAaXJafG6w\" target=\"_blank\" title=\"https://groups.google.com/forum/#!topic/golang-nuts/rTAaXJafG6w\">https://groups.google.com/forum/#!topic/golang-nuts/rTAaXJafG6w</a></p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 31281381,
            "is_me_message": false,
            "last_edit_timestamp": 1416886268,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "waldemar.quevedo@gmail.com",
            "sender_full_name": "Waldemar Quevedo (F2'14)",
            "sender_id": 6706,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "go-noob",
            "submessages": [],
            "timestamp": 1416886171,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/a179bb8c3fc4ab0975954f57d47fa6c53a8c2dad?x=x&version=2",
            "client": "website",
            "content": "<p>Last call to authorize Google to migrate comments on Go over to GitHub.<br>\n<a href=\"https://groups.google.com/forum/#!topic/golang-dev/fWYRRBRwjNg\" target=\"_blank\" title=\"https://groups.google.com/forum/#!topic/golang-dev/fWYRRBRwjNg\">https://groups.google.com/forum/#!topic/golang-dev/fWYRRBRwjNg</a></p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 31712695,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "jay@jayschwa.net",
            "sender_full_name": "Jay Weisskopf Petacat (W2'17)",
            "sender_id": 829,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "last call",
            "submessages": [],
            "timestamp": 1417497278,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/61f7402a76ff0aff964da46bd7948ca20279ae1f?x=x&version=1",
            "client": "website",
            "content": "<p>Rob Pike shared this trick to get rid of continuously doing <code>if err != nil</code> checks at the Gocon in Tokyo: <a href=\"http://jxck.hatenablog.com/entry/golang-error-handling-lesson-by-rob-pike\" target=\"_blank\" title=\"http://jxck.hatenablog.com/entry/golang-error-handling-lesson-by-rob-pike\">http://jxck.hatenablog.com/entry/golang-error-handling-lesson-by-rob-pike</a></p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 32321883,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "waldemar.quevedo@gmail.com",
            "sender_full_name": "Waldemar Quevedo (F2'14)",
            "sender_id": 6706,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "rob-pike-err-handling-trick",
            "submessages": [],
            "timestamp": 1418597746,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/a4b3598d81f87cf19c089df9707ede15?d=identicon&version=1",
            "client": "website",
            "content": "<p>For a while in SublimeText I've been using GoSublime for automatic gofmt on save and some other niceties,  but I recently added golint and 'go vet' packages into the mix and I definitely recommend. I had heard of golint before, but only used 'go vet' after being curious about what it did</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 32512658,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "stan@schwertly.com",
            "sender_full_name": "Stan Schwertly (F2'14)",
            "sender_id": 6674,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "automatic better",
            "submessages": [],
            "timestamp": 1418928632,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/a4b3598d81f87cf19c089df9707ede15?d=identicon&version=1",
            "client": "website",
            "content": "<p>Go vet does nice things like noticing a \\n at the end of a println. Golint is great for style things like documenting exported functions</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 32512670,
            "is_me_message": false,
            "last_edit_timestamp": 1418928690,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "stan@schwertly.com",
            "sender_full_name": "Stan Schwertly (F2'14)",
            "sender_id": 6674,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "automatic better",
            "submessages": [],
            "timestamp": 1418928660,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/a4b3598d81f87cf19c089df9707ede15?d=identicon&version=1",
            "client": "website",
            "content": "<p>Last night at a Go meetup, someone from Google showed off \"oracle\". It's another tool that will take a selected piece of code and tell you things like \"who implements this\". I think it had 6 different types of questions you could ask -- super interesting stuff</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 32512834,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "stan@schwertly.com",
            "sender_full_name": "Stan Schwertly (F2'14)",
            "sender_id": 6674,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "automatic better",
            "submessages": [],
            "timestamp": 1418928836,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/70292d91a79cfd0fb1c8ad4f650480d631a56e9e?x=x&version=1",
            "client": "website",
            "content": "<p>I recently upgraded my vim-go and they added oracle to that. Pretty slick.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 32727770,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "lawrence.trey@gmail.com",
            "sender_full_name": "Trey Lawrence (F1'16)",
            "sender_id": 911,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "automatic better",
            "submessages": [],
            "timestamp": 1419368662,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/70292d91a79cfd0fb1c8ad4f650480d631a56e9e?x=x&version=1",
            "client": "website",
            "content": "<p><a href=\"https://github.com/fatih/vim-go\" target=\"_blank\" title=\"https://github.com/fatih/vim-go\">https://github.com/fatih/vim-go</a></p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 32727772,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "lawrence.trey@gmail.com",
            "sender_full_name": "Trey Lawrence (F1'16)",
            "sender_id": 911,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "automatic better",
            "submessages": [],
            "timestamp": 1419368664,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/f6bd929465d6d225def8062d5a9d3f3f?d=identicon&version=1",
            "client": "website",
            "content": "<p>How come <a href=\"http://play.golang.org/p/RzUmOxufHe\" target=\"_blank\" title=\"http://play.golang.org/p/RzUmOxufHe\">this works</a> but <a href=\"http://play.golang.org/p/4EJaVj2h4e\" target=\"_blank\" title=\"http://play.golang.org/p/4EJaVj2h4e\">this doesn't</a>? The only difference is that the field names in the former start with an uppercase letter. </p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 32826863,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "danluu@gmail.com",
            "sender_full_name": "Dan Luu (W'13)",
            "sender_id": 820,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "This has to be uppercase? Why?",
            "submessages": [],
            "timestamp": 1419608358,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/a4b3598d81f87cf19c089df9707ede15?d=identicon&version=1",
            "client": "WebService::Zulip v",
            "content": "<p>capitalized struct fields are exported. it's like private/public </p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 32827330,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "stan@schwertly.com",
            "sender_full_name": "Stan Schwertly (F2'14)",
            "sender_id": 6674,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "This has to be uppercase? Why?",
            "submessages": [],
            "timestamp": 1419609115,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/f6bd929465d6d225def8062d5a9d3f3f?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"stan@schwertly.com\">@Stan Schwertly (F2'14)</span> Huh. That makes sense, although I find it a bit odd. Thanks.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 32827452,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "danluu@gmail.com",
            "sender_full_name": "Dan Luu (W'13)",
            "sender_id": 820,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "This has to be uppercase? Why?",
            "submessages": [],
            "timestamp": 1419609158,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/a179bb8c3fc4ab0975954f57d47fa6c53a8c2dad?x=x&version=2",
            "client": "website",
            "content": "<p><a href=\"https://www.youtube.com/watch?v=1rZ-JorHJEY\" target=\"_blank\" title=\"https://www.youtube.com/watch?v=1rZ-JorHJEY\">https://www.youtube.com/watch?v=1rZ-JorHJEY</a></p>\n<div class=\"message_inline_image\"><a href=\"https://www.youtube.com/watch?v=1rZ-JorHJEY\" target=\"_blank\" title=\"https://www.youtube.com/watch?v=1rZ-JorHJEY\"><img src=\"https://i.ytimg.com/vi/1rZ-JorHJEY/default.jpg\"></a></div>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 33402540,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "jay@jayschwa.net",
            "sender_full_name": "Jay Weisskopf Petacat (W2'17)",
            "sender_id": 829,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "adg and bradfitz pair program",
            "submessages": [],
            "timestamp": 1420773761,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/1380ded36dafac0d6f808b9b7b6c4e85266428a1?x=x&version=1",
            "client": "website",
            "content": "<p>2015 early bird tickets are open now: <a href=\"https://ti.to/gophercon/gophercon-2015\" target=\"_blank\" title=\"https://ti.to/gophercon/gophercon-2015\">https://ti.to/gophercon/gophercon-2015</a></p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 33950033,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "travis@mcdem.us",
            "sender_full_name": "Travis McDemus (S'13)",
            "sender_id": 2139,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "gophercon",
            "submessages": [],
            "timestamp": 1421789411,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/1380ded36dafac0d6f808b9b7b6c4e85266428a1?x=x&version=1",
            "client": "website",
            "content": "<p>I just bought a ticket. </p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 33950205,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "travis@mcdem.us",
            "sender_full_name": "Travis McDemus (S'13)",
            "sender_id": 2139,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "gophercon",
            "submessages": [],
            "timestamp": 1421789607,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/1380ded36dafac0d6f808b9b7b6c4e85266428a1?x=x&version=1",
            "client": "website",
            "content": "<p>This weekend is the first Gopher Gala: <a href=\"http://gophergala.com/\" target=\"_blank\" title=\"http://gophergala.com/\">http://gophergala.com/</a></p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 34086464,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "travis@mcdem.us",
            "sender_full_name": "Travis McDemus (S'13)",
            "sender_id": 2139,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "gopher gala",
            "submessages": [],
            "timestamp": 1422022843,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/1380ded36dafac0d6f808b9b7b6c4e85266428a1?x=x&version=1",
            "client": "website",
            "content": "<p>While this happens concurrently as the Monthly Music Hackathon at Spotify in NYC, maybe they don't have to be mutually exclusive activities? (*hint*)</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 34086601,
            "is_me_message": false,
            "last_edit_timestamp": 1422023491,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "travis@mcdem.us",
            "sender_full_name": "Travis McDemus (S'13)",
            "sender_id": 2139,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "gopher gala",
            "submessages": [],
            "timestamp": 1422023141,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/1380ded36dafac0d6f808b9b7b6c4e85266428a1?x=x&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"bcgraham@gmail.com\">@Brian Graham (S'14)</span> and I are planning to meet up on Tuesday 1/27 at 7:00pm at 455 Broadway to code some stuff. I think we'll be exploring the idea of a \"micro service\" and ways of implementing one. </p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 34086742,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "travis@mcdem.us",
            "sender_full_name": "Travis McDemus (S'13)",
            "sender_id": 2139,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "hacking on tuesday",
            "submessages": [],
            "timestamp": 1422023404,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/1380ded36dafac0d6f808b9b7b6c4e85266428a1?x=x&version=1",
            "client": "website",
            "content": "<p>paging <span class=\"user-mention\" data-user-email=\"mdparker89@gmail.com\">@Matthew Parker (F2'14)</span> and <span class=\"user-mention\" data-user-email=\"jay@jayschwa.net\">@Jay Weisskopf (W'13)</span> o_O </p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 34086774,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "travis@mcdem.us",
            "sender_full_name": "Travis McDemus (S'13)",
            "sender_id": 2139,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "hacking on tuesday",
            "submessages": [],
            "timestamp": 1422023437,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/0baa75c82ed02d819be85a4b24b0f4d3?d=identicon&version=1",
            "client": "website",
            "content": "<p>I'll come by. I like this topic. The micro services I've built were in Go.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 34087487,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "mdparker89@gmail.com",
            "sender_full_name": "Matthew Parker (F2'14)",
            "sender_id": 6698,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "hacking on tuesday",
            "submessages": [],
            "timestamp": 1422024722,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/a4b3598d81f87cf19c089df9707ede15?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"travis@mcdem.us\">@Travis McDemus (S'13)</span> whoah, I had no idea the monthly music hackathon was a thing</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 34088857,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "stan@schwertly.com",
            "sender_full_name": "Stan Schwertly (F2'14)",
            "sender_id": 6674,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "gopher gala",
            "submessages": [],
            "timestamp": 1422026991,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/a4b3598d81f87cf19c089df9707ede15?d=identicon&version=1",
            "client": "website",
            "content": "<p>I didn't get a ticket, but this reminded me to watch to 2014 talks :P</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 34088911,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "stan@schwertly.com",
            "sender_full_name": "Stan Schwertly (F2'14)",
            "sender_id": 6674,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "gophercon",
            "submessages": [],
            "timestamp": 1422027012,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/391eb183c3474a15bf9ad0e87d3ff118?d=identicon&version=1",
            "client": "website",
            "content": "<p>I totally wanted to get in on this. But there just to much going on this weekend. I opted for the  screening the<code>future of programming</code> event at HS.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 34120881,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "ghthor@gmail.com",
            "sender_full_name": "Will Drengwitz (he) (W1'17)",
            "sender_id": 7099,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "gopher gala",
            "submessages": [],
            "timestamp": 1422077174,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/391eb183c3474a15bf9ad0e87d3ff118?d=identicon&version=1",
            "client": "website",
            "content": "<p>Just found the tool list[1] today. I knew most of these existed, but this should be useful for anyone looking for a hammer.</p>\n<p>[1] <a href=\"https://golang.org/x/tools\" target=\"_blank\" title=\"https://golang.org/x/tools\">https://golang.org/x/tools</a></p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 34195789,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "ghthor@gmail.com",
            "sender_full_name": "Will Drengwitz (he) (W1'17)",
            "sender_id": 7099,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "tools",
            "submessages": [],
            "timestamp": 1422269777,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/391eb183c3474a15bf9ad0e87d3ff118?d=identicon&version=1",
            "client": "website",
            "content": "<p>The commands that can be used from the command line are in the <code>cmd/</code> directory. Some notable gems look at are <code>stringer</code>, <code>gorename</code>, <code>gomvpkg</code>. I've beening using <code>gorename</code> a lot. The only issue with it is also a good thing, everything involved the pkg your trying to rename a type/variable/something in MUST be able to compile. This includes all packages that import the targeted pkg. But this is awesome because it won't just rename within a single package, but across every pkg in your gopath. Pretty awesome!</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 34195907,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "ghthor@gmail.com",
            "sender_full_name": "Will Drengwitz (he) (W1'17)",
            "sender_id": 7099,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "tools",
            "submessages": [],
            "timestamp": 1422270093,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/03cff489ede3515ab64c9db9d96e362f?d=identicon&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>If this is postponed due to blizzards and the like, I'll attend. I'm a Go beginner and I've been interested in microservices since the start of my batch. I'd like to watch and repeat later (<a href=\"http://codekata.com/\" target=\"_blank\" title=\"http://codekata.com/\">Code Kata</a>!). </p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 34230845,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "fernando.neto@gmail.com",
            "sender_full_name": "Fernando Andrade (W1'14)",
            "sender_id": 6923,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "hacking on tuesday",
            "submessages": [],
            "timestamp": 1422319952,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/1380ded36dafac0d6f808b9b7b6c4e85266428a1?x=x&version=1",
            "client": "website",
            "content": "<p>I think we're waiting to see if MTA is running, and if people are at the space. If those things line up I think, <span class=\"user-mention\" data-user-email=\"bcgraham@gmail.com\">@Brian Graham (S'14)</span> and I at least are still into going.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 34231130,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "travis@mcdem.us",
            "sender_full_name": "Travis McDemus (S'13)",
            "sender_id": 2139,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "hacking on tuesday",
            "submessages": [],
            "timestamp": 1422320428,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/1380ded36dafac0d6f808b9b7b6c4e85266428a1?x=x&version=1",
            "client": "website",
            "content": "<p>7:00 !</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 34279412,
            "is_me_message": false,
            "last_edit_timestamp": 1422399006,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "travis@mcdem.us",
            "sender_full_name": "Travis McDemus (S'13)",
            "sender_id": 2139,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "hacking on wednesday",
            "submessages": [],
            "timestamp": 1422398991,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/1380ded36dafac0d6f808b9b7b6c4e85266428a1?x=x&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"mdparker89@gmail.com\">@Matthew Parker (F2'14)</span> <span class=\"user-mention\" data-user-email=\"fernando.neto@gmail.com\">@Fernando a Cunha Andrade Neto (W1'14)</span>  We're opting to do this tomorrow (Wednesday) at 7:00 still.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 34279472,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "travis@mcdem.us",
            "sender_full_name": "Travis McDemus (S'13)",
            "sender_id": 2139,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "hacking on tuesday",
            "submessages": [],
            "timestamp": 1422399039,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/03cff489ede3515ab64c9db9d96e362f?d=identicon&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>Awesome, count me in.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 34279498,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "fernando.neto@gmail.com",
            "sender_full_name": "Fernando Andrade (W1'14)",
            "sender_id": 6923,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "hacking on tuesday",
            "submessages": [],
            "timestamp": 1422399094,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/0baa75c82ed02d819be85a4b24b0f4d3?d=identicon&version=1",
            "client": "website",
            "content": "<p>Yea that would be great!</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 34282088,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "mdparker89@gmail.com",
            "sender_full_name": "Matthew Parker (F2'14)",
            "sender_id": 6698,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "hacking on tuesday",
            "submessages": [],
            "timestamp": 1422402870,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/1380ded36dafac0d6f808b9b7b6c4e85266428a1?x=x&version=1",
            "client": "website",
            "content": "<p>del</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 34333582,
            "is_me_message": false,
            "last_edit_timestamp": 1422543471,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "travis@mcdem.us",
            "sender_full_name": "Travis McDemus (S'13)",
            "sender_id": 2139,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "hacking on wednesday",
            "submessages": [],
            "timestamp": 1422489951,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/1380ded36dafac0d6f808b9b7b6c4e85266428a1?x=x&version=1",
            "client": "website",
            "content": "<p>leaving work late, be there in a bit.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 34334084,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "travis@mcdem.us",
            "sender_full_name": "Travis McDemus (S'13)",
            "sender_id": 2139,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "hacking on wednesday",
            "submessages": [],
            "timestamp": 1422490567,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/1380ded36dafac0d6f808b9b7b6c4e85266428a1?x=x&version=1",
            "client": "website",
            "content": "<p>leaving work late, be there in a bit</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 34334095,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "travis@mcdem.us",
            "sender_full_name": "Travis McDemus (S'13)",
            "sender_id": 2139,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "hacking on tuesday",
            "submessages": [],
            "timestamp": 1422490575,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/a4b3598d81f87cf19c089df9707ede15?d=identicon&version=1",
            "client": "website",
            "content": "<p>oh crud, I missed the postponement. have fun everyone</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 34334359,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "stan@schwertly.com",
            "sender_full_name": "Stan Schwertly (F2'14)",
            "sender_id": 6674,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "hacking on tuesday",
            "submessages": [],
            "timestamp": 1422490929,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/1380ded36dafac0d6f808b9b7b6c4e85266428a1?x=x&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"max.t.mcdonnell@gmail.com\">@Max McDonnell (W2'15)</span> : <a href=\"http://web.mta.info/status/serviceStatus.txt\" target=\"_blank\" title=\"http://web.mta.info/status/serviceStatus.txt\">http://web.mta.info/status/serviceStatus.txt</a></p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 34335790,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "travis@mcdem.us",
            "sender_full_name": "Travis McDemus (S'13)",
            "sender_id": 2139,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "hacking on tuesday",
            "submessages": [],
            "timestamp": 1422493199,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/1380ded36dafac0d6f808b9b7b6c4e85266428a1?x=x&version=1",
            "client": "website",
            "content": "<p>I'm in the main room with my back to the kitchen, on a questionable, stickered-out chromebook.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 34600968,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "travis@mcdem.us",
            "sender_full_name": "Travis McDemus (S'13)",
            "sender_id": 2139,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "hacking on tuesday",
            "submessages": [],
            "timestamp": 1423007984,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/f6bd929465d6d225def8062d5a9d3f3f?d=identicon&version=1",
            "client": "website",
            "content": "<p>What should I use if I want to serialize / deserialize an array of structs with string and int members? There seem to be multiple options and I'm not really familiar with the pros/cons of each.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 34788063,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "danluu@gmail.com",
            "sender_full_name": "Dan Luu (W'13)",
            "sender_id": 820,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "serialization",
            "submessages": [],
            "timestamp": 1423345810,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/f6bd929465d6d225def8062d5a9d3f3f?d=identicon&version=1",
            "client": "website",
            "content": "<p>I don't care about performance at all; just ease of use and simplicity.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 34788071,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "danluu@gmail.com",
            "sender_full_name": "Dan Luu (W'13)",
            "sender_id": 820,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "serialization",
            "submessages": [],
            "timestamp": 1423345835,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/a179bb8c3fc4ab0975954f57d47fa6c53a8c2dad?x=x&version=2",
            "client": "website",
            "content": "<p>If performance isn't important, then JSON seems like a good choice. Widely-supported. Human-readable/writeable.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 34788636,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "jay@jayschwa.net",
            "sender_full_name": "Jay Weisskopf Petacat (W2'17)",
            "sender_id": 829,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "serialization",
            "submessages": [],
            "timestamp": 1423347163,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/fcd73cb735a7c0f50049f6bea94233f17eaee624?x=x&version=1",
            "client": "desktop app Windows 0.4.4",
            "content": "<p>I second the JSON suggestion, it's in the standard library so you just import encoding/json and call json.Marshal/json.Unmarshal. Just make sure the structs data members are exported, otherwise they won't be serialized.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 34788695,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "mark.samman@gmail.com",
            "sender_full_name": "Mark Samman (W'14)",
            "sender_id": 5004,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "serialization",
            "submessages": [],
            "timestamp": 1423347252,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/1380ded36dafac0d6f808b9b7b6c4e85266428a1?x=x&version=1",
            "client": "website",
            "content": "<p>Is there a disadvantage to gobs? <a href=\"http://golang.org/pkg/encoding/gob/\" target=\"_blank\" title=\"http://golang.org/pkg/encoding/gob/\">http://golang.org/pkg/encoding/gob/</a></p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 35167927,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "travis@mcdem.us",
            "sender_full_name": "Travis McDemus (S'13)",
            "sender_id": 2139,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "serialization",
            "submessages": [],
            "timestamp": 1424050083,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/1380ded36dafac0d6f808b9b7b6c4e85266428a1?x=x&version=1",
            "client": "website",
            "content": "<p>Not being human readable / writeable seems like a drawback, but I'm wondering if there are enough benefits from other aspects of it that it evens out.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 35167961,
            "is_me_message": false,
            "last_edit_timestamp": 1424050174,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "travis@mcdem.us",
            "sender_full_name": "Travis McDemus (S'13)",
            "sender_id": 2139,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "serialization",
            "submessages": [],
            "timestamp": 1424050143,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/a4b3598d81f87cf19c089df9707ede15?d=identicon&version=1",
            "client": "WebService::Zulip v",
            "content": "<p>downside is it's only good between go processes</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 35168069,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "stan@schwertly.com",
            "sender_full_name": "Stan Schwertly (F2'14)",
            "sender_id": 6674,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "serialization",
            "submessages": [],
            "timestamp": 1424050349,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/a179bb8c3fc4ab0975954f57d47fa6c53a8c2dad?x=x&version=2",
            "client": "website",
            "content": "<p>Gobs are apparently slow. <a href=\"https://github.com/alecthomas/go_serialization_benchmarks\" target=\"_blank\" title=\"https://github.com/alecthomas/go_serialization_benchmarks\">https://github.com/alecthomas/go_serialization_benchmarks</a></p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 35169196,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "jay@jayschwa.net",
            "sender_full_name": "Jay Weisskopf Petacat (W2'17)",
            "sender_id": 829,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "serialization",
            "submessages": [],
            "timestamp": 1424053028,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/1380ded36dafac0d6f808b9b7b6c4e85266428a1?x=x&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"jay@jayschwa.net\">@Jay Weisskopf (W'13)</span> whoa, that's the stuff. </p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 35169505,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "travis@mcdem.us",
            "sender_full_name": "Travis McDemus (S'13)",
            "sender_id": 2139,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "serialization",
            "submessages": [],
            "timestamp": 1424053773,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/1380ded36dafac0d6f808b9b7b6c4e85266428a1?x=x&version=1",
            "client": "website",
            "content": "<p>nice find.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 35169509,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "travis@mcdem.us",
            "sender_full_name": "Travis McDemus (S'13)",
            "sender_id": 2139,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "serialization",
            "submessages": [],
            "timestamp": 1424053785,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/1380ded36dafac0d6f808b9b7b6c4e85266428a1?x=x&version=1",
            "client": "website",
            "content": "<p>what's the point of these things, then? its less bytes maybe than the alternatives once gob encoded? future-proofing of integers? </p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 35170397,
            "is_me_message": false,
            "last_edit_timestamp": 1424055743,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "travis@mcdem.us",
            "sender_full_name": "Travis McDemus (S'13)",
            "sender_id": 2139,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "serialization",
            "submessages": [],
            "timestamp": 1424055705,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/a179bb8c3fc4ab0975954f57d47fa6c53a8c2dad?x=x&version=2",
            "client": "website",
            "content": "<p>I believe it's used for remote procedure calls.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 35170436,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "jay@jayschwa.net",
            "sender_full_name": "Jay Weisskopf Petacat (W2'17)",
            "sender_id": 829,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "serialization",
            "submessages": [],
            "timestamp": 1424055741,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/1380ded36dafac0d6f808b9b7b6c4e85266428a1?x=x&version=1",
            "client": "website",
            "content": "<p>yeah, looks like the rpc stuff is gob dependent: <a href=\"http://golang.org/pkg/net/rpc/\" target=\"_blank\" title=\"http://golang.org/pkg/net/rpc/\">http://golang.org/pkg/net/rpc/</a></p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 35170490,
            "is_me_message": false,
            "last_edit_timestamp": 1424055923,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "travis@mcdem.us",
            "sender_full_name": "Travis McDemus (S'13)",
            "sender_id": 2139,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "serialization",
            "submessages": [],
            "timestamp": 1424055908,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/a4b3598d81f87cf19c089df9707ede15?d=identicon&version=1",
            "client": "website",
            "content": "<p>I think the idea was that you get a smaller wire size, without the pain of having an external definition of what the data looks like (which I think is required if you're doing full-on protobuf)</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 35170547,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "stan@schwertly.com",
            "sender_full_name": "Stan Schwertly (F2'14)",
            "sender_id": 6674,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "serialization",
            "submessages": [],
            "timestamp": 1424056065,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/a4b3598d81f87cf19c089df9707ede15?d=identicon&version=1",
            "client": "website",
            "content": "<p>definitely not super versed in this stuff though, so somebody else here might have better insight</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 35170593,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "stan@schwertly.com",
            "sender_full_name": "Stan Schwertly (F2'14)",
            "sender_id": 6674,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "serialization",
            "submessages": [],
            "timestamp": 1424056110,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/1380ded36dafac0d6f808b9b7b6c4e85266428a1?x=x&version=1",
            "client": "website",
            "content": "<p>yeah, me neither, and I'm getting more curious. (now I just need... more time to ease that curiosity)</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 35170922,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "travis@mcdem.us",
            "sender_full_name": "Travis McDemus (S'13)",
            "sender_id": 2139,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "serialization",
            "submessages": [],
            "timestamp": 1424056812,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4f5279e356a105513701942b5b6af05f?d=identicon&version=1",
            "client": "website",
            "content": "<p>Protocol Buffers, Thrift, Avro, etc., are all designed for a completely different purpose. Basically, their point is: any scale distributed system will be written in many languages, not just one language, and so in order to have a mutually-intelligible way for all these different components to talk about the same data, you need a common type system for talking about data. That is what they do.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 35170945,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "clemmer.alexander@gmail.com",
            "sender_full_name": "Alex Clemmer (S'13)",
            "sender_id": 2132,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "serialization",
            "submessages": [],
            "timestamp": 1424056902,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4f5279e356a105513701942b5b6af05f?d=identicon&version=1",
            "client": "website",
            "content": "<p>But for a particular language, it is often worth it to have a built-in serialization system for itself.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 35170979,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "clemmer.alexander@gmail.com",
            "sender_full_name": "Alex Clemmer (S'13)",
            "sender_id": 2132,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "serialization",
            "submessages": [],
            "timestamp": 1424056928,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4f5279e356a105513701942b5b6af05f?d=identicon&version=1",
            "client": "website",
            "content": "<p>It makes a lot of things very simple, like go-to-go RPC.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 35170993,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "clemmer.alexander@gmail.com",
            "sender_full_name": "Alex Clemmer (S'13)",
            "sender_id": 2132,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "serialization",
            "submessages": [],
            "timestamp": 1424056943,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4f5279e356a105513701942b5b6af05f?d=identicon&version=1",
            "client": "website",
            "content": "<p>Arguably it's not \"necessary\", but not everything has to be portable, and you don't want to necessarily take a dependency on an outside library to do internal stuff.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 35170998,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "clemmer.alexander@gmail.com",
            "sender_full_name": "Alex Clemmer (S'13)",
            "sender_id": 2132,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "serialization",
            "submessages": [],
            "timestamp": 1424056978,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4f5279e356a105513701942b5b6af05f?d=identicon&version=1",
            "client": "website",
            "content": "<p>At least not that sort of internal stuff.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 35171048,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "clemmer.alexander@gmail.com",
            "sender_full_name": "Alex Clemmer (S'13)",
            "sender_id": 2132,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "serialization",
            "submessages": [],
            "timestamp": 1424057078,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4f5279e356a105513701942b5b6af05f?d=identicon&version=1",
            "client": "website",
            "content": "<p>Does that make sense?</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 35171049,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "clemmer.alexander@gmail.com",
            "sender_full_name": "Alex Clemmer (S'13)",
            "sender_id": 2132,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "serialization",
            "submessages": [],
            "timestamp": 1424057083,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4f5279e356a105513701942b5b6af05f?d=identicon&version=1",
            "client": "website",
            "content": "<p>(This is something I know a fair amount about because I have written real, production, very-very-very-high-scale serialization systems before.)</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 35171095,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "clemmer.alexander@gmail.com",
            "sender_full_name": "Alex Clemmer (S'13)",
            "sender_id": 2132,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "serialization",
            "submessages": [],
            "timestamp": 1424057179,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/1380ded36dafac0d6f808b9b7b6c4e85266428a1?x=x&version=1",
            "client": "website",
            "content": "<p>yeah, that does, thanks.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 35171096,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "travis@mcdem.us",
            "sender_full_name": "Travis McDemus (S'13)",
            "sender_id": 2139,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "serialization",
            "submessages": [],
            "timestamp": 1424057182,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/1380ded36dafac0d6f808b9b7b6c4e85266428a1?x=x&version=1",
            "client": "website",
            "content": "<p>also, I just found this on those benchmarks: \"gob is designed for serializing streams or vectors of a single type, not individual values\" </p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 35171102,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "travis@mcdem.us",
            "sender_full_name": "Travis McDemus (S'13)",
            "sender_id": 2139,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "serialization",
            "submessages": [],
            "timestamp": 1424057236,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4f5279e356a105513701942b5b6af05f?d=identicon&version=1",
            "client": "website",
            "content": "<p>That is pretty standard.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 35171152,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "clemmer.alexander@gmail.com",
            "sender_full_name": "Alex Clemmer (S'13)",
            "sender_id": 2132,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "serialization",
            "submessages": [],
            "timestamp": 1424057307,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4f5279e356a105513701942b5b6af05f?d=identicon&version=1",
            "client": "website",
            "content": "<p>Some people don't believe in \"scalar serialization\", i.e., serialization of individual, non-schema types like <code>int</code>. I disagree with this viewpoint, but ....</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 35171160,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "clemmer.alexander@gmail.com",
            "sender_full_name": "Alex Clemmer (S'13)",
            "sender_id": 2132,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "serialization",
            "submessages": [],
            "timestamp": 1424057351,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/1380ded36dafac0d6f808b9b7b6c4e85266428a1?x=x&version=1",
            "client": "website",
            "content": "<p>does non-schema mean anything that's \"not structs\" (golang) or \"not objects\" (smalltalk derivatives)? </p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 35171323,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "travis@mcdem.us",
            "sender_full_name": "Travis McDemus (S'13)",
            "sender_id": 2139,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "serialization",
            "submessages": [],
            "timestamp": 1424057722,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4f5279e356a105513701942b5b6af05f?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"travis@mcdem.us\">@Travis McDemus (S'13)</span> Yes, non-structs in the go sense</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 35171366,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "clemmer.alexander@gmail.com",
            "sender_full_name": "Alex Clemmer (S'13)",
            "sender_id": 2132,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "serialization",
            "submessages": [],
            "timestamp": 1424057798,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4f5279e356a105513701942b5b6af05f?d=identicon&version=1",
            "client": "website",
            "content": "<p>So like, one school of thought about serialization is: you don't serialize a thing, you serialize its members/fields/whatever.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 35171374,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "clemmer.alexander@gmail.com",
            "sender_full_name": "Alex Clemmer (S'13)",
            "sender_id": 2132,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "serialization",
            "submessages": [],
            "timestamp": 1424057833,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/1380ded36dafac0d6f808b9b7b6c4e85266428a1?x=x&version=1",
            "client": "website",
            "content": "<p>so, why would people not want to do scalar serialization? it seems like you'd end up with a bunch of \"type aliasing\", and that leaves room for error on both sides.  </p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 35171375,
            "is_me_message": false,
            "last_edit_timestamp": 1424057852,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "travis@mcdem.us",
            "sender_full_name": "Travis McDemus (S'13)",
            "sender_id": 2139,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "serialization",
            "submessages": [],
            "timestamp": 1424057835,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4f5279e356a105513701942b5b6af05f?d=identicon&version=1",
            "client": "website",
            "content": "<p>Mainly because most people don't think of recording something like an <code>int</code> on disk as serialization.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 35171421,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "clemmer.alexander@gmail.com",
            "sender_full_name": "Alex Clemmer (S'13)",
            "sender_id": 2132,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "serialization",
            "submessages": [],
            "timestamp": 1424057889,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4f5279e356a105513701942b5b6af05f?d=identicon&version=1",
            "client": "website",
            "content": "<p>They think of that as writing down an into on disk.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 35171428,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "clemmer.alexander@gmail.com",
            "sender_full_name": "Alex Clemmer (S'13)",
            "sender_id": 2132,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "serialization",
            "submessages": [],
            "timestamp": 1424057924,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4f5279e356a105513701942b5b6af05f?d=identicon&version=1",
            "client": "website",
            "content": "<p>In most serialization systems you have a strong notion of what it means to do something like version a schema.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 35171433,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "clemmer.alexander@gmail.com",
            "sender_full_name": "Alex Clemmer (S'13)",
            "sender_id": 2132,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "serialization",
            "submessages": [],
            "timestamp": 1424057961,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/1380ded36dafac0d6f808b9b7b6c4e85266428a1?x=x&version=1",
            "client": "website",
            "content": "<p>hmm. </p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 35171438,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "travis@mcdem.us",
            "sender_full_name": "Travis McDemus (S'13)",
            "sender_id": 2139,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "serialization",
            "submessages": [],
            "timestamp": 1424057995,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4f5279e356a105513701942b5b6af05f?d=identicon&version=1",
            "client": "website",
            "content": "<p>If you're serializing an int you have no control over that really. It's not a \"schema\" in the same sense, because you typically have no way of saying \"ok, this field you're serializing is required and that one is optional\" because you don't own the int class.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 35171440,
            "is_me_message": false,
            "last_edit_timestamp": 1424058030,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "clemmer.alexander@gmail.com",
            "sender_full_name": "Alex Clemmer (S'13)",
            "sender_id": 2132,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "serialization",
            "submessages": [],
            "timestamp": 1424058001,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4f5279e356a105513701942b5b6af05f?d=identicon&version=1",
            "client": "website",
            "content": "<p>See?</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 35171443,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "clemmer.alexander@gmail.com",
            "sender_full_name": "Alex Clemmer (S'13)",
            "sender_id": 2132,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "serialization",
            "submessages": [],
            "timestamp": 1424058002,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/1380ded36dafac0d6f808b9b7b6c4e85266428a1?x=x&version=1",
            "client": "website",
            "content": "<p>yah, that makes more sense now. </p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 35171483,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "travis@mcdem.us",
            "sender_full_name": "Travis McDemus (S'13)",
            "sender_id": 2139,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "serialization",
            "submessages": [],
            "timestamp": 1424058047,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4f5279e356a105513701942b5b6af05f?d=identicon&version=1",
            "client": "website",
            "content": "<p>So in other words, a struct that you can serialize is really a bunch of fields, some of which are required and some of which are not.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 35171485,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "clemmer.alexander@gmail.com",
            "sender_full_name": "Alex Clemmer (S'13)",
            "sender_id": 2132,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "serialization",
            "submessages": [],
            "timestamp": 1424058054,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/1380ded36dafac0d6f808b9b7b6c4e85266428a1?x=x&version=1",
            "client": "website",
            "content": "<p>and if the idea is to not serialize The Thing, but serialize its members, does that mean a bunch of nested structs (within The Thing) would get \"flattened\" and serialized out as just a series of values in an expected order?</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 35171528,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "travis@mcdem.us",
            "sender_full_name": "Travis McDemus (S'13)",
            "sender_id": 2139,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "serialization",
            "submessages": [],
            "timestamp": 1424058137,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/1380ded36dafac0d6f808b9b7b6c4e85266428a1?x=x&version=1",
            "client": "website",
            "content": "<p>(I guess that's where a version number would get important, if that's how some of this stuff actually works under the hood.)</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 35171534,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "travis@mcdem.us",
            "sender_full_name": "Travis McDemus (S'13)",
            "sender_id": 2139,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "serialization",
            "submessages": [],
            "timestamp": 1424058234,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4f5279e356a105513701942b5b6af05f?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"travis@mcdem.us\">@Travis McDemus (S'13)</span> Depends on the serialization system.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 35171575,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "clemmer.alexander@gmail.com",
            "sender_full_name": "Alex Clemmer (S'13)",
            "sender_id": 2132,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "serialization",
            "submessages": [],
            "timestamp": 1424058303,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4f5279e356a105513701942b5b6af05f?d=identicon&version=1",
            "client": "website",
            "content": "<p>In <a href=\"https://github.com/Microsoft/bond\" target=\"_blank\" title=\"https://github.com/Microsoft/bond\">Bond</a> (the system I worked on) yes, this is true.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 35171582,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "clemmer.alexander@gmail.com",
            "sender_full_name": "Alex Clemmer (S'13)",
            "sender_id": 2132,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "serialization",
            "submessages": [],
            "timestamp": 1424058333,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/1380ded36dafac0d6f808b9b7b6c4e85266428a1?x=x&version=1",
            "client": "website",
            "content": "<p>That's neat, reading more about Bond later.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 35171715,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "travis@mcdem.us",
            "sender_full_name": "Travis McDemus (S'13)",
            "sender_id": 2139,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "serialization",
            "submessages": [],
            "timestamp": 1424058689,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/136a93069037c07b62cfe137a3cd1270ee524327?x=x&version=3",
            "client": "website",
            "content": "<p>Hello everyone, I'm trying to build a little ad blocking proxy based on a simple idea; check all http request that go outside from my computer and if they are targeting an ad provider block them. To do that I assume that I will have look into the request url inside the header, but I don't know how to do that in Go :( What I'm doing right now is launching ListenAndServe on 8080 but I don't know if I'm going to the right direction. Has someone worked on something similar that could help me just pointing a finger on the right direction?</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 35540541,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "alcara_m@pm.me",
            "sender_full_name": "Mar\u00edn Alcaraz (he) (W2'15)",
            "sender_id": 7082,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "Toy Proxy",
            "submessages": [],
            "timestamp": 1424711724,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/a179bb8c3fc4ab0975954f57d47fa6c53a8c2dad?x=x&version=2",
            "client": "website",
            "content": "<p>The <code>http.Request</code> type has a <code>URL</code> field. <a href=\"http://godoc.org/net/http#Request\" target=\"_blank\" title=\"http://godoc.org/net/http#Request\">http://godoc.org/net/http#Request</a></p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 35542065,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "jay@jayschwa.net",
            "sender_full_name": "Jay Weisskopf Petacat (W2'17)",
            "sender_id": 829,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "Toy Proxy",
            "submessages": [],
            "timestamp": 1424713337,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/5d46121e9a899e151cfcd0e59aa9e9f8a78989e8?x=x&version=1",
            "client": "desktop app Linux 0.4.4",
            "content": "<p>Shameless plug:  this will take care of all your woes when defining structs for JSON decoding: <a href=\"https://github.com/ChimeraCoder/gojson\" target=\"_blank\" title=\"https://github.com/ChimeraCoder/gojson\">https://github.com/ChimeraCoder/gojson</a></p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 35549374,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "aditya@adityamukerjee.net",
            "sender_full_name": "Aditya Mukerjee (he) (SP1'15)",
            "sender_id": 7644,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "serialization",
            "submessages": [],
            "timestamp": 1424722238,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/136a93069037c07b62cfe137a3cd1270ee524327?x=x&version=3",
            "client": "website",
            "content": "<p>Thank you :) now I just need a way to \"re-request\" (?) if it's not an ad provider url</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 35551678,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "alcara_m@pm.me",
            "sender_full_name": "Mar\u00edn Alcaraz (he) (W2'15)",
            "sender_id": 7082,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "Toy Proxy",
            "submessages": [],
            "timestamp": 1424724942,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/136a93069037c07b62cfe137a3cd1270ee524327?x=x&version=3",
            "client": "website",
            "content": "<p>Hello everyone :) can someone review my code making observations oriented to the idiomatic way to do things in go and the use of requests? I'll really appreaciate your feedback :) <a href=\"https://github.com/marinhero/goxy/blob/master/proxy.go\" target=\"_blank\" title=\"https://github.com/marinhero/goxy/blob/master/proxy.go\">https://github.com/marinhero/goxy/blob/master/proxy.go</a> less than a 100 lines :)</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 35617792,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "alcara_m@pm.me",
            "sender_full_name": "Mar\u00edn Alcaraz (he) (W2'15)",
            "sender_id": 7082,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "Toy Proxy",
            "submessages": [],
            "timestamp": 1424825231,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/136a93069037c07b62cfe137a3cd1270ee524327?x=x&version=3",
            "client": "website",
            "content": "<p>Also: the proxy doesn't work in POST requests... I don't know why :( I tried to copy al the form data from the original request but it doesn't seem to work !</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 35617854,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "alcara_m@pm.me",
            "sender_full_name": "Mar\u00edn Alcaraz (he) (W2'15)",
            "sender_id": 7082,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "Toy Proxy",
            "submessages": [],
            "timestamp": 1424825299,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/a179bb8c3fc4ab0975954f57d47fa6c53a8c2dad?x=x&version=2",
            "client": "website",
            "content": "<p>Is blacklist.csv some kind of standard format? Why does it have so many empty columns?</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 35617991,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "jay@jayschwa.net",
            "sender_full_name": "Jay Weisskopf Petacat (W2'17)",
            "sender_id": 829,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "Toy Proxy",
            "submessages": [],
            "timestamp": 1424825541,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/136a93069037c07b62cfe137a3cd1270ee524327?x=x&version=3",
            "client": "website",
            "content": "<p>Oh, you are right. I guess Numbers did that :( let me fix it and I'll push it</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 35618110,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "alcara_m@pm.me",
            "sender_full_name": "Mar\u00edn Alcaraz (he) (W2'15)",
            "sender_id": 7082,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "Toy Proxy",
            "submessages": [],
            "timestamp": 1424825764,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/136a93069037c07b62cfe137a3cd1270ee524327?x=x&version=3",
            "client": "website",
            "content": "<p>even though, right not it won't filter pretty much anything because I'm not making pattern matching for the target urls and the blacklisted urls. If the url is exactly the same it will work otherwise it will process a \"normal\" request (except if is post :( )</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 35618201,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "alcara_m@pm.me",
            "sender_full_name": "Mar\u00edn Alcaraz (he) (W2'15)",
            "sender_id": 7082,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "Toy Proxy",
            "submessages": [],
            "timestamp": 1424825937,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/136a93069037c07b62cfe137a3cd1270ee524327?x=x&version=3",
            "client": "website",
            "content": "<p>fix is up :)</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 35618277,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "alcara_m@pm.me",
            "sender_full_name": "Mar\u00edn Alcaraz (he) (W2'15)",
            "sender_id": 7082,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "Toy Proxy",
            "submessages": [],
            "timestamp": 1424826081,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/a179bb8c3fc4ab0975954f57d47fa6c53a8c2dad?x=x&version=2",
            "client": "website",
            "content": "<p>If you don't intend to have more than just a list of hosts, then it probably doesn't even need to be a CSV.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 35618329,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "jay@jayschwa.net",
            "sender_full_name": "Jay Weisskopf Petacat (W2'17)",
            "sender_id": 829,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "Toy Proxy",
            "submessages": [],
            "timestamp": 1424826132,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/136a93069037c07b62cfe137a3cd1270ee524327?x=x&version=3",
            "client": "website",
            "content": "<p>I guess you are right, it's not a long list. What would you suggest instead ?</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 35618359,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "alcara_m@pm.me",
            "sender_full_name": "Mar\u00edn Alcaraz (he) (W2'15)",
            "sender_id": 7082,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "Toy Proxy",
            "submessages": [],
            "timestamp": 1424826215,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/a179bb8c3fc4ab0975954f57d47fa6c53a8c2dad?x=x&version=2",
            "client": "website",
            "content": "<p>Anyhow, some comments on the code:<br>\nSince <code>blackList</code> contains just a slice of strings, you can make that the type itself rather than having it in a <code>struct</code>. i.e. <code>type blacklist []string</code></p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 35618360,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "jay@jayschwa.net",
            "sender_full_name": "Jay Weisskopf Petacat (W2'17)",
            "sender_id": 829,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "Toy Proxy",
            "submessages": [],
            "timestamp": 1424826223,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/a179bb8c3fc4ab0975954f57d47fa6c53a8c2dad?x=x&version=2",
            "client": "website",
            "content": "<p>Just a list of hosts, newline separated</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 35618366,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "jay@jayschwa.net",
            "sender_full_name": "Jay Weisskopf Petacat (W2'17)",
            "sender_id": 829,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "Toy Proxy",
            "submessages": [],
            "timestamp": 1424826233,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/a179bb8c3fc4ab0975954f57d47fa6c53a8c2dad?x=x&version=2",
            "client": "website",
            "content": "<p>I would also remove the <code>populateBlackList()</code> method from <code>blackList</code>. Where the data comes from should be decoupled from the type.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 35618488,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "jay@jayschwa.net",
            "sender_full_name": "Jay Weisskopf Petacat (W2'17)",
            "sender_id": 829,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "Toy Proxy",
            "submessages": [],
            "timestamp": 1424826385,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/a179bb8c3fc4ab0975954f57d47fa6c53a8c2dad?x=x&version=2",
            "client": "website",
            "content": "<p>Implement the <code>sort.Sort</code> interface so that you can do a binary instead of a linear search for <code>isInBlacklist</code> <a href=\"http://godoc.org/sort\" target=\"_blank\" title=\"http://godoc.org/sort\">http://godoc.org/sort</a></p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 35618499,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "jay@jayschwa.net",
            "sender_full_name": "Jay Weisskopf Petacat (W2'17)",
            "sender_id": 829,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "Toy Proxy",
            "submessages": [],
            "timestamp": 1424826442,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/a179bb8c3fc4ab0975954f57d47fa6c53a8c2dad?x=x&version=2",
            "client": "website",
            "content": "<p><code>isInBlacklist</code> is also kind of a mouthful. I'd suggest renaming it to <code>Contains</code>.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 35618555,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "jay@jayschwa.net",
            "sender_full_name": "Jay Weisskopf Petacat (W2'17)",
            "sender_id": 829,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "Toy Proxy",
            "submessages": [],
            "timestamp": 1424826542,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/136a93069037c07b62cfe137a3cd1270ee524327?x=x&version=3",
            "client": "website",
            "content": "<p>:) Thanks for all your suggestions, I will modify all of them ! Thanks for taking the time!</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 35618753,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "alcara_m@pm.me",
            "sender_full_name": "Mar\u00edn Alcaraz (he) (W2'15)",
            "sender_id": 7082,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "Toy Proxy",
            "submessages": [],
            "timestamp": 1424826864,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/a179bb8c3fc4ab0975954f57d47fa6c53a8c2dad?x=x&version=2",
            "client": "website",
            "content": "<p>I'd suggest changing</p>\n<div class=\"codehilite\"><pre>if hostBlackList.isInBlackList(target) {\n        io.Copy(w, nil)\n    }\n</pre></div>\n\n\n<p>to use <a href=\"http://godoc.org/net/http#NotFound\" target=\"_blank\" title=\"http://godoc.org/net/http#NotFound\">http://godoc.org/net/http#NotFound</a> instead</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 35618762,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "jay@jayschwa.net",
            "sender_full_name": "Jay Weisskopf Petacat (W2'17)",
            "sender_id": 829,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "Toy Proxy",
            "submessages": [],
            "timestamp": 1424826893,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/136a93069037c07b62cfe137a3cd1270ee524327?x=x&version=3",
            "client": "website",
            "content": "<p>oh! that's great :D</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 35618774,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "alcara_m@pm.me",
            "sender_full_name": "Mar\u00edn Alcaraz (he) (W2'15)",
            "sender_id": 7082,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "Toy Proxy",
            "submessages": [],
            "timestamp": 1424826921,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/136a93069037c07b62cfe137a3cd1270ee524327?x=x&version=3",
            "client": "website",
            "content": "<p>do you have any idea why the post request doesn't work ?</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 35618792,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "alcara_m@pm.me",
            "sender_full_name": "Mar\u00edn Alcaraz (he) (W2'15)",
            "sender_id": 7082,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "Toy Proxy",
            "submessages": [],
            "timestamp": 1424826963,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/b4d94d953db52e1e7cfc3724b95a6dc906fa9d58?x=x&version=2",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"marin.alcaraz@gmail.com\">@Mar\u00edn Alcaraz C\u00f3rdova (W2'15)</span> You should wireshark this, I'd love to see that output</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 35618898,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "me@ballingt.com",
            "sender_full_name": "Tom Ballinger (he) (W'12)",
            "sender_id": 807,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "Toy Proxy",
            "submessages": [],
            "timestamp": 1424827117,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/a179bb8c3fc4ab0975954f57d47fa6c53a8c2dad?x=x&version=2",
            "client": "website",
            "content": "<p>Not sure. How does one use the proxy?</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 35618899,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "jay@jayschwa.net",
            "sender_full_name": "Jay Weisskopf Petacat (W2'17)",
            "sender_id": 829,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "Toy Proxy",
            "submessages": [],
            "timestamp": 1424827118,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/136a93069037c07b62cfe137a3cd1270ee524327?x=x&version=3",
            "client": "website",
            "content": "<p>go run proxy.go and set your browser proxy to 127.0.0.1 in 8080 </p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 35618919,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "alcara_m@pm.me",
            "sender_full_name": "Mar\u00edn Alcaraz (he) (W2'15)",
            "sender_id": 7082,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "Toy Proxy",
            "submessages": [],
            "timestamp": 1424827195,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/a179bb8c3fc4ab0975954f57d47fa6c53a8c2dad?x=x&version=2",
            "client": "website",
            "content": "<p>Off-hand, I'd think you could skip creating <code>proxyRequest</code> and just pass the original <code>req</code> straight to <code>http.Do</code>. Then the only things you have to do afterwards is copy the headers, body, and status code between responses.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 35618950,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "jay@jayschwa.net",
            "sender_full_name": "Jay Weisskopf Petacat (W2'17)",
            "sender_id": 829,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "Toy Proxy",
            "submessages": [],
            "timestamp": 1424827207,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/136a93069037c07b62cfe137a3cd1270ee524327?x=x&version=3",
            "client": "website",
            "content": "<p>Any time you make a post request you will get the same website unaltered </p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 35618972,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "alcara_m@pm.me",
            "sender_full_name": "Mar\u00edn Alcaraz (he) (W2'15)",
            "sender_id": 7082,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "Toy Proxy",
            "submessages": [],
            "timestamp": 1424827227,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/136a93069037c07b62cfe137a3cd1270ee524327?x=x&version=3",
            "client": "website",
            "content": "<p>I tried, it doesn't work, returns empty data :/</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 35618978,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "alcara_m@pm.me",
            "sender_full_name": "Mar\u00edn Alcaraz (he) (W2'15)",
            "sender_id": 7082,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "Toy Proxy",
            "submessages": [],
            "timestamp": 1424827245,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/136a93069037c07b62cfe137a3cd1270ee524327?x=x&version=3",
            "client": "website",
            "content": "<p>oh, didn't tried the second part though, I'll check it :)</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 35618989,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "alcara_m@pm.me",
            "sender_full_name": "Mar\u00edn Alcaraz (he) (W2'15)",
            "sender_id": 7082,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "Toy Proxy",
            "submessages": [],
            "timestamp": 1424827272,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/136a93069037c07b62cfe137a3cd1270ee524327?x=x&version=3",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"tom@hackerschool.com\">@Tom Ballinger</span> I did but didn't invested much time on that, I'll show it to you tomorrow </p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 35619051,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "alcara_m@pm.me",
            "sender_full_name": "Mar\u00edn Alcaraz (he) (W2'15)",
            "sender_id": 7082,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "Toy Proxy",
            "submessages": [],
            "timestamp": 1424827339,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/a179bb8c3fc4ab0975954f57d47fa6c53a8c2dad?x=x&version=2",
            "client": "website",
            "content": "<p>Just be careful about copying the things from <code>proxyResponse</code> to <code>w</code> in the correct order. Probably first <code>w.WriteHeader(proxyResponse.StatusCode)</code>, then</p>\n<div class=\"codehilite\"><pre>for k, v := range proxyResponse.Header {\n    w.Header().Add(k, v)\n}\n</pre></div>\n\n\n<p>and finally the <code>io.Copy(w, proxyResponse.Body)</code>.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 35619230,
            "is_me_message": false,
            "last_edit_timestamp": 1424827618,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "jay@jayschwa.net",
            "sender_full_name": "Jay Weisskopf Petacat (W2'17)",
            "sender_id": 829,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "Toy Proxy",
            "submessages": [],
            "timestamp": 1424827608,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/b4d94d953db52e1e7cfc3724b95a6dc906fa9d58?x=x&version=2",
            "client": "website",
            "content": "<p>When I did this in Python a few years ago I mostly ignored the http protocol and shuttled the bytes through - just read the first ~200 bytes to see where it wanted to go and then sent it all the bytes there.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 35619321,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "me@ballingt.com",
            "sender_full_name": "Tom Ballinger (he) (W'12)",
            "sender_id": 807,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "Toy Proxy",
            "submessages": [],
            "timestamp": 1424827746,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/a179bb8c3fc4ab0975954f57d47fa6c53a8c2dad?x=x&version=2",
            "client": "website",
            "content": "<p>I also suggest removing <code>client := &amp;http.Client{}</code> and using <code>http.DefaultClient</code> instead.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 35619338,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "jay@jayschwa.net",
            "sender_full_name": "Jay Weisskopf Petacat (W2'17)",
            "sender_id": 829,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "Toy Proxy",
            "submessages": [],
            "timestamp": 1424827776,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/a179bb8c3fc4ab0975954f57d47fa6c53a8c2dad?x=x&version=2",
            "client": "website",
            "content": "<p>Cool project! I look forward to seeing it come along. Time for me to go eat supper :-)</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 35619396,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "jay@jayschwa.net",
            "sender_full_name": "Jay Weisskopf Petacat (W2'17)",
            "sender_id": 829,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "Toy Proxy",
            "submessages": [],
            "timestamp": 1424827818,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/136a93069037c07b62cfe137a3cd1270ee524327?x=x&version=3",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"jay@jayschwa.net\">@Jay Weisskopf (W'13)</span> I'll post the changelog here :) thank you for your feedback! bon appetit!</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 35619488,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "alcara_m@pm.me",
            "sender_full_name": "Mar\u00edn Alcaraz (he) (W2'15)",
            "sender_id": 7082,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "Toy Proxy",
            "submessages": [],
            "timestamp": 1424827935,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/f6bd929465d6d225def8062d5a9d3f3f?d=identicon&version=1",
            "client": "website",
            "content": "<p>I just tried building a fresh copy of the go source, and it only takes a minute to build. Like, a single minute. That's pretty amazing, after having played with a couple languages where a fresh build takes well over an hour. I guess that's one advantage of not relying on and having to build llvm to build the language.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 35622520,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "danluu@gmail.com",
            "sender_full_name": "Dan Luu (W'13)",
            "sender_id": 820,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "build times",
            "submessages": [],
            "timestamp": 1424833055,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/a179bb8c3fc4ab0975954f57d47fa6c53a8c2dad?x=x&version=2",
            "client": "website",
            "content": "<p>I know, right?</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 35623147,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "jay@jayschwa.net",
            "sender_full_name": "Jay Weisskopf Petacat (W2'17)",
            "sender_id": 829,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "build times",
            "submessages": [],
            "timestamp": 1424834208,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/1c860d00a4cedc01147fbb2e0533c37b?d=identicon&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>Trying to build an html parser using xpath that is versital enough to accept patterns from a json configuration file.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 35650811,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "corydominguez@gmail.com",
            "sender_full_name": "Cory Michael Dominguez (he) (SP1'15)",
            "sender_id": 7625,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "First class functions",
            "submessages": [],
            "timestamp": 1424883907,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/1c860d00a4cedc01147fbb2e0533c37b?d=identicon&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>Found gokogiri. Anyone have experience using xpath in go? Maybe recommend another library?</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 35650838,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "corydominguez@gmail.com",
            "sender_full_name": "Cory Michael Dominguez (he) (SP1'15)",
            "sender_id": 7625,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "First class functions",
            "submessages": [],
            "timestamp": 1424883951,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/61f7402a76ff0aff964da46bd7948ca20279ae1f?x=x&version=1",
            "client": "website",
            "content": "<p>Mesos-go bindings were pretty cool, I wrote a little on how I used them: <a href=\"http://literateinfrastructure.org/posts/2015/02/25/ob-mesos/\" target=\"_blank\" title=\"http://literateinfrastructure.org/posts/2015/02/25/ob-mesos/\">http://literateinfrastructure.org/posts/2015/02/25/ob-mesos/</a></p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 35651136,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "waldemar.quevedo@gmail.com",
            "sender_full_name": "Waldemar Quevedo (F2'14)",
            "sender_id": 6706,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "mesos+go+docker+org-mode",
            "submessages": [],
            "timestamp": 1424884254,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/61f7402a76ff0aff964da46bd7948ca20279ae1f?x=x&version=1",
            "client": "website",
            "content": "<p>I added an http api to it and named the project Borges, hope someone finds it interesting!<br>\n<a href=\"https://github.com/wallyqs/borges\" target=\"_blank\" title=\"https://github.com/wallyqs/borges\">https://github.com/wallyqs/borges</a></p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 35862548,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "waldemar.quevedo@gmail.com",
            "sender_full_name": "Waldemar Quevedo (F2'14)",
            "sender_id": 6706,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "mesos+go+docker+org-mode",
            "submessages": [],
            "timestamp": 1425214294,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/61f7402a76ff0aff964da46bd7948ca20279ae1f?x=x&version=1",
            "client": "website",
            "content": "<p>Hey Gophers, I don't think I'm getting this implementation: <a href=\"https://gist.github.com/jedy/3357393\" target=\"_blank\" title=\"https://gist.github.com/jedy/3357393\">https://gist.github.com/jedy/3357393</a></p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 35946295,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "waldemar.quevedo@gmail.com",
            "sender_full_name": "Waldemar Quevedo (F2'14)",
            "sender_id": 6706,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "scp-in-golang",
            "submessages": [],
            "timestamp": 1425348679,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/61f7402a76ff0aff964da46bd7948ca20279ae1f?x=x&version=1",
            "client": "website",
            "content": "<p>Code snippet:</p>\n<div class=\"codehilite\"><pre>    <span class=\"n\">session</span><span class=\"p\">,</span> <span class=\"n\">err</span> <span class=\"p\">:=</span> <span class=\"n\">client</span><span class=\"p\">.</span><span class=\"n\">NewSession</span><span class=\"p\">()</span>\n    <span class=\"k\">if</span> <span class=\"n\">err</span> <span class=\"p\">!=</span> <span class=\"n\">nil</span> <span class=\"p\">{</span>\n        <span class=\"n\">panic</span><span class=\"p\">(</span><span class=\"s\">&quot;Failed to create session: &quot;</span> <span class=\"p\">+</span> <span class=\"n\">err</span><span class=\"p\">.</span><span class=\"n\">Error</span><span class=\"p\">())</span>\n    <span class=\"p\">}</span>\n    <span class=\"k\">defer</span> <span class=\"n\">session</span><span class=\"p\">.</span><span class=\"n\">Close</span><span class=\"p\">()</span>\n    <span class=\"k\">go</span> <span class=\"k\">func</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n        <span class=\"n\">w</span><span class=\"p\">,</span> <span class=\"n\">_</span> <span class=\"p\">:=</span> <span class=\"n\">session</span><span class=\"p\">.</span><span class=\"n\">StdinPipe</span><span class=\"p\">()</span>\n        <span class=\"k\">defer</span> <span class=\"n\">w</span><span class=\"p\">.</span><span class=\"n\">Close</span><span class=\"p\">()</span>\n        <span class=\"n\">content</span> <span class=\"p\">:=</span> <span class=\"s\">&quot;123456789\\n&quot;</span>\n        <span class=\"n\">fmt</span><span class=\"p\">.</span><span class=\"n\">Fprintln</span><span class=\"p\">(</span><span class=\"n\">w</span><span class=\"p\">,</span> <span class=\"s\">&quot;C0644&quot;</span><span class=\"p\">,</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">content</span><span class=\"p\">),</span> <span class=\"s\">&quot;testfile&quot;</span><span class=\"p\">)</span>\n        <span class=\"n\">fmt</span><span class=\"p\">.</span><span class=\"n\">Fprint</span><span class=\"p\">(</span><span class=\"n\">w</span><span class=\"p\">,</span> <span class=\"n\">content</span><span class=\"p\">)</span>\n        <span class=\"n\">fmt</span><span class=\"p\">.</span><span class=\"n\">Fprint</span><span class=\"p\">(</span><span class=\"n\">w</span><span class=\"p\">,</span> <span class=\"s\">&quot;\\x00&quot;</span><span class=\"p\">)</span> <span class=\"c1\">// \u4f20\u8f93\u4ee5\\x00\u7ed3\u675f</span>\n    <span class=\"p\">}()</span>\n    <span class=\"k\">if</span> <span class=\"n\">err</span> <span class=\"p\">:=</span> <span class=\"n\">session</span><span class=\"p\">.</span><span class=\"n\">Run</span><span class=\"p\">(</span><span class=\"s\">&quot;/usr/bin/scp -qrt ./&quot;</span><span class=\"p\">);</span> <span class=\"n\">err</span> <span class=\"p\">!=</span> <span class=\"n\">nil</span> <span class=\"p\">{</span>\n        <span class=\"n\">panic</span><span class=\"p\">(</span><span class=\"s\">&quot;Failed to run: &quot;</span> <span class=\"p\">+</span> <span class=\"n\">err</span><span class=\"p\">.</span><span class=\"n\">Error</span><span class=\"p\">())</span>\n    <span class=\"p\">}</span>\n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 35946307,
            "is_me_message": false,
            "last_edit_timestamp": 1425348720,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "waldemar.quevedo@gmail.com",
            "sender_full_name": "Waldemar Quevedo (F2'14)",
            "sender_id": 6706,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "scp-in-golang",
            "submessages": [],
            "timestamp": 1425348712,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/61f7402a76ff0aff964da46bd7948ca20279ae1f?x=x&version=1",
            "client": "website",
            "content": "<p>So with <code>session.Run(\"/usr/bin/scp -qrt ./\")</code> we are starting scp *remotely*, then piping the bytes into it? Is that how scp works???</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 35946372,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "waldemar.quevedo@gmail.com",
            "sender_full_name": "Waldemar Quevedo (F2'14)",
            "sender_id": 6706,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "scp-in-golang",
            "submessages": [],
            "timestamp": 1425348782,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/1380ded36dafac0d6f808b9b7b6c4e85266428a1?x=x&version=1",
            "client": "website",
            "content": "<p>I'd have to read the source to say for sure, but it looks that code establishes an SSH session to a remote server (via that <code>client</code> struct and the NewSession method), then the code runs <code>scp</code> on the remote server, thus recursively copying all the files down from the remote machine to the \"client\" machine (that is executing the Go code).</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 35969005,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "travis@mcdem.us",
            "sender_full_name": "Travis McDemus (S'13)",
            "sender_id": 2139,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "scp-in-golang",
            "submessages": [],
            "timestamp": 1425388585,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/1380ded36dafac0d6f808b9b7b6c4e85266428a1?x=x&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"waldemar.quevedo@gmail.com\">@Waldemar Quevedo (F2'14)</span> That's sort of a guess, though - I've only ever used <code>scp</code> to fling tarballs or whatever between servers (e.g. something like <code>scp aoeu@remote_eu:/tmp/blah.tar.gz  htns@remote_us:/tmp/blah_backup.tar.gz</code>)</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 35969080,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "travis@mcdem.us",
            "sender_full_name": "Travis McDemus (S'13)",
            "sender_id": 2139,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "scp-in-golang",
            "submessages": [],
            "timestamp": 1425388712,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/1380ded36dafac0d6f808b9b7b6c4e85266428a1?x=x&version=1",
            "client": "website",
            "content": "<p>I'll be around the space at 6:30pm tonight to pair on some Go with Brian if you want to read through any of it together, I'm curious about it now.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 35969151,
            "is_me_message": false,
            "last_edit_timestamp": 1425388830,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "travis@mcdem.us",
            "sender_full_name": "Travis McDemus (S'13)",
            "sender_id": 2139,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "scp-in-golang",
            "submessages": [],
            "timestamp": 1425388817,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/61f7402a76ff0aff964da46bd7948ca20279ae1f?x=x&version=1",
            "client": "website",
            "content": "<p>Thanks for the reply! I would love to join but I'm not in NYC atm..<br>\nI've been looking at other implementations in Go of the scp command as well, and I see a similar usage for example in Packer: <a href=\"https://github.com/mitchellh/packer/blob/aa59cd55ae4fe5ef6e0cf79d779de69588b087e4/communicator/ssh/communicator.go#L263\" target=\"_blank\" title=\"https://github.com/mitchellh/packer/blob/aa59cd55ae4fe5ef6e0cf79d779de69588b087e4/communicator/ssh/communicator.go#L263\">https://github.com/mitchellh/packer/blob/aa59cd55ae4fe5ef6e0cf79d779de69588b087e4/communicator/ssh/communicator.go#L263</a></p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 35974789,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "waldemar.quevedo@gmail.com",
            "sender_full_name": "Waldemar Quevedo (F2'14)",
            "sender_id": 6706,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "scp-in-golang",
            "submessages": [],
            "timestamp": 1425397238,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/61f7402a76ff0aff964da46bd7948ca20279ae1f?x=x&version=1",
            "client": "website",
            "content": "<p>Also: <a href=\"https://github.com/mitchellh/packer/blob/aa59cd55ae4fe5ef6e0cf79d779de69588b087e4/communicator/ssh/communicator.go#L295\" target=\"_blank\" title=\"https://github.com/mitchellh/packer/blob/aa59cd55ae4fe5ef6e0cf79d779de69588b087e4/communicator/ssh/communicator.go#L295\">https://github.com/mitchellh/packer/blob/aa59cd55ae4fe5ef6e0cf79d779de69588b087e4/communicator/ssh/communicator.go#L295</a></p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 35974830,
            "is_me_message": false,
            "last_edit_timestamp": 1425397419,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "waldemar.quevedo@gmail.com",
            "sender_full_name": "Waldemar Quevedo (F2'14)",
            "sender_id": 6706,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "scp-in-golang",
            "submessages": [],
            "timestamp": 1425397305,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/61f7402a76ff0aff964da46bd7948ca20279ae1f?x=x&version=1",
            "client": "website",
            "content": "<p>But yeah it seems that a remote scp process in <code>sink mode</code> is necessary for the transfer to happen..</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 35975027,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "waldemar.quevedo@gmail.com",
            "sender_full_name": "Waldemar Quevedo (F2'14)",
            "sender_id": 6706,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "scp-in-golang",
            "submessages": [],
            "timestamp": 1425397530,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/391eb183c3474a15bf9ad0e87d3ff118?d=identicon&version=1",
            "client": "website",
            "content": "<p>All function calls are by default assumed blocking[1] as opposed to non blocking. Enables using net.Conn interfaces, among other things.<br>\n[1] <a href=\"https://github.com/gopherjs/gopherjs/issues/89\" target=\"_blank\" title=\"https://github.com/gopherjs/gopherjs/issues/89\">https://github.com/gopherjs/gopherjs/issues/89</a></p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 35984573,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "ghthor@gmail.com",
            "sender_full_name": "Will Drengwitz (he) (W1'17)",
            "sender_id": 7099,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "gopherjs just got real",
            "submessages": [],
            "timestamp": 1425408685,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/5d46121e9a899e151cfcd0e59aa9e9f8a78989e8?x=x&version=1",
            "client": "desktop app Linux 0.4.4",
            "content": "<p>I saw this! So exciting. Just in time for my upcoming Full Stack Go workshop! :D</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 35985734,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "aditya@adityamukerjee.net",
            "sender_full_name": "Aditya Mukerjee (he) (SP1'15)",
            "sender_id": 7644,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "gopherjs just got real",
            "submessages": [],
            "timestamp": 1425409246,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/a179bb8c3fc4ab0975954f57d47fa6c53a8c2dad?x=x&version=2",
            "client": "website",
            "content": "<p>Anyone looked at the proposal on golang-dev? It seems like a mess to me.<br>\n<a href=\"https://groups.google.com/forum/#!topic/golang-dev/nMWoEAG55v8\" target=\"_blank\" title=\"https://groups.google.com/forum/#!topic/golang-dev/nMWoEAG55v8\">https://groups.google.com/forum/#!topic/golang-dev/nMWoEAG55v8</a></p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 35993025,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "jay@jayschwa.net",
            "sender_full_name": "Jay Weisskopf Petacat (W2'17)",
            "sender_id": 829,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "dependencies and vendoring",
            "submessages": [],
            "timestamp": 1425415405,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/5d46121e9a899e151cfcd0e59aa9e9f8a78989e8?x=x&version=1",
            "client": "desktop app Linux 0.4.4",
            "content": "<p>I hadn't esen this</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 35993606,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "aditya@adityamukerjee.net",
            "sender_full_name": "Aditya Mukerjee (he) (SP1'15)",
            "sender_id": 7644,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "dependencies and vendoring",
            "submessages": [],
            "timestamp": 1425416143,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/5d46121e9a899e151cfcd0e59aa9e9f8a78989e8?x=x&version=1",
            "client": "desktop app Linux 0.4.4",
            "content": "<p>Thanks for posting this - I'm taking a look now</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 35993607,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "aditya@adityamukerjee.net",
            "sender_full_name": "Aditya Mukerjee (he) (SP1'15)",
            "sender_id": 7644,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "dependencies and vendoring",
            "submessages": [],
            "timestamp": 1425416143,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/61f7402a76ff0aff964da46bd7948ca20279ae1f?x=x&version=1",
            "client": "website",
            "content": "<p>for completeness, this is the scp protocol<br>\n<a href=\"/user_uploads/13/VQUKpwa3dwHlcs7X1SDZgcU9/pasted_image.png\" target=\"_blank\" title=\"pasted_image.png\">pasted image</a> </p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/13/VQUKpwa3dwHlcs7X1SDZgcU9/pasted_image.png\" target=\"_blank\" title=\"pasted_image.png\"><img src=\"/user_uploads/13/VQUKpwa3dwHlcs7X1SDZgcU9/pasted_image.png\"></a></div>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 36019684,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "waldemar.quevedo@gmail.com",
            "sender_full_name": "Waldemar Quevedo (F2'14)",
            "sender_id": 6706,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "scp-in-golang",
            "submessages": [],
            "timestamp": 1425450350,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/61f7402a76ff0aff964da46bd7948ca20279ae1f?x=x&version=1",
            "client": "website",
            "content": "<p>this is a sample:</p>\n<div class=\"codehilite\"><pre>{ echo D0755 0 testdir; echo C0644 6 test;  printf &quot;hello\\\\n&quot;; echo E; } | scp -rt /tmp\n</pre></div>\n\n\n<p>this article was great in explaining how it works: <a href=\"https://blogs.oracle.com/janp/entry/how_the_scp_protocol_works\" target=\"_blank\" title=\"https://blogs.oracle.com/janp/entry/how_the_scp_protocol_works\">https://blogs.oracle.com/janp/entry/how_the_scp_protocol_works</a><br>\n(had no idea this is how I worked!)</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 36019904,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "waldemar.quevedo@gmail.com",
            "sender_full_name": "Waldemar Quevedo (F2'14)",
            "sender_id": 6706,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "scp-in-golang",
            "submessages": [],
            "timestamp": 1425450750,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/391eb183c3474a15bf9ad0e87d3ff118?d=identicon&version=1",
            "client": "website",
            "content": "<p>Missed this beginning while I was neck deep in JS all day. I will keep myself up to speed on this discussion at the expense of my other projects.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 36020560,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "ghthor@gmail.com",
            "sender_full_name": "Will Drengwitz (he) (W1'17)",
            "sender_id": 7099,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "dependencies and vendoring",
            "submessages": [],
            "timestamp": 1425452969,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/5d46121e9a899e151cfcd0e59aa9e9f8a78989e8?x=x&version=1",
            "client": "desktop app Linux 0.4.4",
            "content": "<p>I really, really hope they use gcfg (<a href=\"https://code.google.com/p/gcfg/\" target=\"_blank\" title=\"https://code.google.com/p/gcfg/\">https://code.google.com/p/gcfg/</a>) instead of JSON</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 36035690,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "aditya@adityamukerjee.net",
            "sender_full_name": "Aditya Mukerjee (he) (SP1'15)",
            "sender_id": 7644,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "dependencies and vendoring",
            "submessages": [],
            "timestamp": 1425482335,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/5d46121e9a899e151cfcd0e59aa9e9f8a78989e8?x=x&version=1",
            "client": "desktop app Linux 0.4.4",
            "content": "<p>JSON has really nothing going for it except that it's interoperable with other platforms, but that's not even an issue when we're talking about a part of the Go build system!</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 36035911,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "aditya@adityamukerjee.net",
            "sender_full_name": "Aditya Mukerjee (he) (SP1'15)",
            "sender_id": 7644,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "dependencies and vendoring",
            "submessages": [],
            "timestamp": 1425482560,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/1c860d00a4cedc01147fbb2e0533c37b?d=identicon&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>There are a lot of these  new \"alternatve to json\" message libraries poping up. <a href=\"http://msgpack.org/\" target=\"_blank\" title=\"http://msgpack.org/\">http://msgpack.org/</a> and <a href=\"https://github.com/grpc/grpc\" target=\"_blank\" title=\"https://github.com/grpc/grpc\">https://github.com/grpc/grpc</a> seem to have a lot of hype.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 36036090,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "corydominguez@gmail.com",
            "sender_full_name": "Cory Michael Dominguez (he) (SP1'15)",
            "sender_id": 7625,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "dependencies and vendoring",
            "submessages": [],
            "timestamp": 1425482765,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/5d46121e9a899e151cfcd0e59aa9e9f8a78989e8?x=x&version=1",
            "client": "desktop app Linux 0.4.4",
            "content": "<p>yeah, I don't like JSON for web programming either, but for Go vendoring specifically, the only thing that matters is that it can be parsed easily in Go - it doesn't need to play well with any other language</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 36036143,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "aditya@adityamukerjee.net",
            "sender_full_name": "Aditya Mukerjee (he) (SP1'15)",
            "sender_id": 7644,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "dependencies and vendoring",
            "submessages": [],
            "timestamp": 1425482814,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/5d46121e9a899e151cfcd0e59aa9e9f8a78989e8?x=x&version=1",
            "client": "desktop app Linux 0.4.4",
            "content": "<p>and parsing JSON in Go is a huge pain</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 36036151,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "aditya@adityamukerjee.net",
            "sender_full_name": "Aditya Mukerjee (he) (SP1'15)",
            "sender_id": 7644,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "dependencies and vendoring",
            "submessages": [],
            "timestamp": 1425482822,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/5d46121e9a899e151cfcd0e59aa9e9f8a78989e8?x=x&version=1",
            "client": "desktop app Linux 0.4.4",
            "content": "<p>(hence why I wrote <a href=\"https://github.com/ChimeraCoder/gojson\" target=\"_blank\" title=\"https://github.com/ChimeraCoder/gojson\">https://github.com/ChimeraCoder/gojson</a>)</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 36036160,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "aditya@adityamukerjee.net",
            "sender_full_name": "Aditya Mukerjee (he) (SP1'15)",
            "sender_id": 7644,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "dependencies and vendoring",
            "submessages": [],
            "timestamp": 1425482831,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/1380ded36dafac0d6f808b9b7b6c4e85266428a1?x=x&version=1",
            "client": "website",
            "content": "<p>I've got a matrix of numbers or strings or runes or bytes or whatever that I'd like to pretty print on a terminal. (You know, with nice, uniform spacing for cells.) Anyone know if there's something like this floating around the standard library already? I don't want to use anything third party. </p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 36036349,
            "is_me_message": false,
            "last_edit_timestamp": 1425483040,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "travis@mcdem.us",
            "sender_full_name": "Travis McDemus (S'13)",
            "sender_id": 2139,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "pretty printing",
            "submessages": [],
            "timestamp": 1425483024,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/5d46121e9a899e151cfcd0e59aa9e9f8a78989e8?x=x&version=1",
            "client": "desktop app Linux 0.4.4",
            "content": "<p>you mean Printf(\"%+v\", foo)?</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 36037476,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "aditya@adityamukerjee.net",
            "sender_full_name": "Aditya Mukerjee (he) (SP1'15)",
            "sender_id": 7644,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "pretty printing",
            "submessages": [],
            "timestamp": 1425484100,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/5d46121e9a899e151cfcd0e59aa9e9f8a78989e8?x=x&version=1",
            "client": "desktop app Linux 0.4.4",
            "content": "<p>(%+v as opposed to %v will print the field names for structs, not just the values)</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 36037499,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "aditya@adityamukerjee.net",
            "sender_full_name": "Aditya Mukerjee (he) (SP1'15)",
            "sender_id": 7644,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "pretty printing",
            "submessages": [],
            "timestamp": 1425484133,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/a179bb8c3fc4ab0975954f57d47fa6c53a8c2dad?x=x&version=2",
            "client": "website",
            "content": "<p><a href=\"https://godoc.org/text/tabwriter\" target=\"_blank\" title=\"https://godoc.org/text/tabwriter\">https://godoc.org/text/tabwriter</a></p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 36037531,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "jay@jayschwa.net",
            "sender_full_name": "Jay Weisskopf Petacat (W2'17)",
            "sender_id": 829,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "pretty printing",
            "submessages": [],
            "timestamp": 1425484173,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/1380ded36dafac0d6f808b9b7b6c4e85266428a1?x=x&version=1",
            "client": "website",
            "content": "<p>That looks like The Thing, thanks. <span class=\"user-mention\" data-user-email=\"aditya@adityamukerjee.net\">@Aditya Mukerjee (SP1'15)</span> , I might do something like that with Sprintf's, but it is the automatic tabbing that I'm really seeking. </p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 36051085,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "travis@mcdem.us",
            "sender_full_name": "Travis McDemus (S'13)",
            "sender_id": 2139,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "pretty printing",
            "submessages": [],
            "timestamp": 1425498438,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/1380ded36dafac0d6f808b9b7b6c4e85266428a1?x=x&version=1",
            "client": "website",
            "content": "<p>Although I want some batteries on this thing. Or maybe I don't understand what's there. But I'm writing my own variadic function to Sprintf out a string with tab separators that I can then use with a Write from tabwriter, and it's slightly heavier lifting than I was going for. </p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 36051974,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "travis@mcdem.us",
            "sender_full_name": "Travis McDemus (S'13)",
            "sender_id": 2139,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "pretty printing",
            "submessages": [],
            "timestamp": 1425499292,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/5d46121e9a899e151cfcd0e59aa9e9f8a78989e8?x=x&version=1",
            "client": "desktop app Linux 0.4.4",
            "content": "<p>Are you sure you don't just want to provide your own String() function to a custom type?</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 36052741,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "aditya@adityamukerjee.net",
            "sender_full_name": "Aditya Mukerjee (he) (SP1'15)",
            "sender_id": 7644,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "pretty printing",
            "submessages": [],
            "timestamp": 1425500122,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/5d46121e9a899e151cfcd0e59aa9e9f8a78989e8?x=x&version=1",
            "client": "desktop app Linux 0.4.4",
            "content": "<p>e.g. </p>\n<p>type Foo []Bar</p>\n<p>func (f Foo) String(){<br>\n    // my pretty print<br>\n}</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 36052769,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "aditya@adityamukerjee.net",
            "sender_full_name": "Aditya Mukerjee (he) (SP1'15)",
            "sender_id": 7644,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "pretty printing",
            "submessages": [],
            "timestamp": 1425500157,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/1380ded36dafac0d6f808b9b7b6c4e85266428a1?x=x&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"aditya@adityamukerjee.net\">@Aditya Mukerjee (SP1'15)</span> Good point. I basically ended up doing a light amount of type aliasing on some map[string][]bytes and other such types I was using, bound String methods to fulfill the Stringer interface, and *then* fed them into tabwriter. </p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 36132874,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "travis@mcdem.us",
            "sender_full_name": "Travis McDemus (S'13)",
            "sender_id": 2139,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "pretty printing",
            "submessages": [],
            "timestamp": 1425612519,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/1380ded36dafac0d6f808b9b7b6c4e85266428a1?x=x&version=1",
            "client": "website",
            "content": "<p>It at least breaks it out into a few pieces. Made the some other structs read a little nice too since things like \"map[string][]byte\" isn't the easiest to read.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 36133139,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "travis@mcdem.us",
            "sender_full_name": "Travis McDemus (S'13)",
            "sender_id": 2139,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "pretty printing",
            "submessages": [],
            "timestamp": 1425612628,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/1380ded36dafac0d6f808b9b7b6c4e85266428a1?x=x&version=1",
            "client": "website",
            "content": "<p><img alt=\":gopher:\" class=\"emoji\" src=\"https://golang.org/doc/gopher/gopherbw.png\" title=\":gopher:\"> <img alt=\":gopher:\" class=\"emoji\" src=\"https://golang.org/doc/gopher/gopherbw.png\" title=\":gopher:\"> <img alt=\":gopher:\" class=\"emoji\" src=\"https://golang.org/doc/gopher/gopherbw.png\" title=\":gopher:\"> </p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 36133300,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "travis@mcdem.us",
            "sender_full_name": "Travis McDemus (S'13)",
            "sender_id": 2139,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "we got gophers",
            "submessages": [],
            "timestamp": 1425612702,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/1380ded36dafac0d6f808b9b7b6c4e85266428a1?x=x&version=1",
            "client": "website",
            "content": "<p>because <span class=\"user-mention\" data-user-email=\"lfranchi@kde.org\">@Leo Franchi (F'12)</span> is a <img alt=\":wizard_hat:\" class=\"emoji\" src=\"https://external-content.zulipcdn.net/7aff1f535fada1ea9dd6f9e5625741f1f2503a8a/687474703a2f2f7765622e6d69742e6564752f6a657373746573732f7777772f7265616c6d656d6f6a692f77697a6172645f6861742e706e67\" title=\":wizard_hat:\"> <img alt=\":bangbang:\" class=\"emoji\" src=\"static/third/gemoji/images/emoji/bangbang.png\" title=\":bangbang:\"> </p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 36133400,
            "is_me_message": false,
            "last_edit_timestamp": 1425612778,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "travis@mcdem.us",
            "sender_full_name": "Travis McDemus (S'13)",
            "sender_id": 2139,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "we got gophers",
            "submessages": [],
            "timestamp": 1425612732,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/a179bb8c3fc4ab0975954f57d47fa6c53a8c2dad?x=x&version=2",
            "client": "website",
            "content": "<p><img alt=\":gopher:\" class=\"emoji\" src=\"https://golang.org/doc/gopher/gopherbw.png\" title=\":gopher:\"><br>\n<img alt=\":octopus:\" class=\"emoji\" src=\"static/third/gemoji/images/emoji/octopus.png\" title=\":octopus:\"> </p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 36136274,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "jay@jayschwa.net",
            "sender_full_name": "Jay Weisskopf Petacat (W2'17)",
            "sender_id": 829,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "we got gophers",
            "submessages": [],
            "timestamp": 1425617761,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/1380ded36dafac0d6f808b9b7b6c4e85266428a1?x=x&version=1",
            "client": "website",
            "content": "<p>I ended up finding this as a result of that emoji collage : <a href=\"https://github.com/mholt/golang-graphics/blob/master/png/octogopher.png\" target=\"_blank\" title=\"https://github.com/mholt/golang-graphics/blob/master/png/octogopher.png\">https://github.com/mholt/golang-graphics/blob/master/png/octogopher.png</a></p>\n<div class=\"message_inline_image\"><a href=\"https://github.com/mholt/golang-graphics/blob/master/png/octogopher.png\" target=\"_blank\" title=\"https://github.com/mholt/golang-graphics/blob/master/png/octogopher.png\"><img src=\"https://github.com/mholt/golang-graphics/blob/master/png/octogopher.png\"></a></div>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 36136504,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "travis@mcdem.us",
            "sender_full_name": "Travis McDemus (S'13)",
            "sender_id": 2139,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "we got gophers",
            "submessages": [],
            "timestamp": 1425618242,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/1380ded36dafac0d6f808b9b7b6c4e85266428a1?x=x&version=1",
            "client": "website",
            "content": "<p>I often find myself writing packages, and then tiny little \"main\" package programs that serve as an example or a utility. I'll usually put these in a subdirectory of the \"real\" package and name that directory \"examples\". </p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 36152147,
            "is_me_message": false,
            "last_edit_timestamp": 1425651990,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "travis@mcdem.us",
            "sender_full_name": "Travis McDemus (S'13)",
            "sender_id": 2139,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "package organization",
            "submessages": [],
            "timestamp": 1425651974,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/1380ded36dafac0d6f808b9b7b6c4e85266428a1?x=x&version=1",
            "client": "website",
            "content": "<p>Something still doesn't feel right about that.  First off \"examples\" isn't a good name for utilities.  (Thoughts?) Secondly, I've seen people use  github subrepositories for this kind of thing (and link to the \"real\" package from a repo with all the little example programs). </p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 36152235,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "travis@mcdem.us",
            "sender_full_name": "Travis McDemus (S'13)",
            "sender_id": 2139,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "package organization",
            "submessages": [],
            "timestamp": 1425652125,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/1380ded36dafac0d6f808b9b7b6c4e85266428a1?x=x&version=1",
            "client": "website",
            "content": "<p>Or, hey, use a monorepo. </p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 36152246,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "travis@mcdem.us",
            "sender_full_name": "Travis McDemus (S'13)",
            "sender_id": 2139,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "package organization",
            "submessages": [],
            "timestamp": 1425652200,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/1380ded36dafac0d6f808b9b7b6c4e85266428a1?x=x&version=1",
            "client": "website",
            "content": "<p>In any case, does anyone have a best practice for organizing their packages *with* little programs that use that package?</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 36152309,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "travis@mcdem.us",
            "sender_full_name": "Travis McDemus (S'13)",
            "sender_id": 2139,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "package organization",
            "submessages": [],
            "timestamp": 1425652267,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/0baa75c82ed02d819be85a4b24b0f4d3?d=identicon&version=1",
            "client": "website",
            "content": "<p>The standard is to have a cmd subdirectory and in cmd you put all of your main packages.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 36167339,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "mdparker89@gmail.com",
            "sender_full_name": "Matthew Parker (F2'14)",
            "sender_id": 6698,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "package organization",
            "submessages": [],
            "timestamp": 1425668848,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/0baa75c82ed02d819be85a4b24b0f4d3?d=identicon&version=1",
            "client": "website",
            "content": "<p>The benefit of this is that you can build your package as the core and then have a command line interface, web interface, etc under cmd. In this case you can have lots of little examples that are separate from the core package.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 36167438,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "mdparker89@gmail.com",
            "sender_full_name": "Matthew Parker (F2'14)",
            "sender_id": 6698,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "package organization",
            "submessages": [],
            "timestamp": 1425668950,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/5d46121e9a899e151cfcd0e59aa9e9f8a78989e8?x=x&version=1",
            "client": "desktop app Linux 0.4.4",
            "content": "<p>A few related thoughts:</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 36185390,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "aditya@adityamukerjee.net",
            "sender_full_name": "Aditya Mukerjee (he) (SP1'15)",
            "sender_id": 7644,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "package organization",
            "submessages": [],
            "timestamp": 1425687131,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/5d46121e9a899e151cfcd0e59aa9e9f8a78989e8?x=x&version=1",
            "client": "desktop app Linux 0.4.4",
            "content": "<p>1. \"util\" directories are an antipattern for a number of reasons, so I'd shy away from those<br>\n2.  git submodules are likewise an antipattern; I'd recommend not learning that one the hard was (as I did)</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 36185404,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "aditya@adityamukerjee.net",
            "sender_full_name": "Aditya Mukerjee (he) (SP1'15)",
            "sender_id": 7644,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "package organization",
            "submessages": [],
            "timestamp": 1425687183,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/5d46121e9a899e151cfcd0e59aa9e9f8a78989e8?x=x&version=1",
            "client": "desktop app Linux 0.4.4",
            "content": "<p>However, having multiple packages within a repository is very powerful. E.g: <a href=\"https://github.com/ChimeraCoder/gopherbot\" target=\"_blank\" title=\"https://github.com/ChimeraCoder/gopherbot\">https://github.com/ChimeraCoder/gopherbot</a></p>\n<p>In this case, notice how plugins are loaded in plugins/url, plugins/whois, etc. It's not obvious at first glance, but those plugins rae 100% independent of the bot that happens to reside in the parent directory - this is a common pattern I've seen used elsewhere</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 36185460,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "aditya@adityamukerjee.net",
            "sender_full_name": "Aditya Mukerjee (he) (SP1'15)",
            "sender_id": 7644,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "package organization",
            "submessages": [],
            "timestamp": 1425687256,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/5d46121e9a899e151cfcd0e59aa9e9f8a78989e8?x=x&version=1",
            "client": "desktop app Linux 0.4.4",
            "content": "<p>It's nice because in this case, other IRC bots can use those plugins without doing anything special, and without using the code from the rest of the bot, but they're still contained and maintained together, and you do'nt have all the awful consistency problems of git's submodules</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 36185472,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "aditya@adityamukerjee.net",
            "sender_full_name": "Aditya Mukerjee (he) (SP1'15)",
            "sender_id": 7644,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "package organization",
            "submessages": [],
            "timestamp": 1425687295,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/1380ded36dafac0d6f808b9b7b6c4e85266428a1?x=x&version=1",
            "client": "website",
            "content": "<p>Thanks <span class=\"user-mention\" data-user-email=\"mdparker89@gmail.com\">@Matthew Parker (F2'14)</span> , <span class=\"user-mention\" data-user-email=\"aditya@adityamukerjee.net\">@Aditya Mukerjee (SP1'15)</span> , all of that makes sense. I'm landing on a <code>cmd</code> directory, which I'm modeling a bit off of the go.tools repository. </p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 36189117,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "travis@mcdem.us",
            "sender_full_name": "Travis McDemus (S'13)",
            "sender_id": 2139,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "package organization",
            "submessages": [],
            "timestamp": 1425693427,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/a179bb8c3fc4ab0975954f57d47fa6c53a8c2dad?x=x&version=2",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"travis@mcdem.us\">@Travis McDemus (S'13)</span> see <a href=\"http://godoc.org/testing#hdr-Examples\" target=\"_blank\" title=\"http://godoc.org/testing#hdr-Examples\">http://godoc.org/testing#hdr-Examples</a> for constructing small examples.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 36190144,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "jay@jayschwa.net",
            "sender_full_name": "Jay Weisskopf Petacat (W2'17)",
            "sender_id": 829,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "package organization",
            "submessages": [],
            "timestamp": 1425695226,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/1380ded36dafac0d6f808b9b7b6c4e85266428a1?x=x&version=1",
            "client": "website",
            "content": "<p>This is making me think that some quantity of the code could actually be tests... </p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 36190174,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "travis@mcdem.us",
            "sender_full_name": "Travis McDemus (S'13)",
            "sender_id": 2139,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "package organization",
            "submessages": [],
            "timestamp": 1425695287,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/1380ded36dafac0d6f808b9b7b6c4e85266428a1?x=x&version=1",
            "client": "website",
            "content": "<p>Some of it is legitimately commands, though. (I wrote a thing that does frequency analysis of byte values at corresponding offsets of multiple files.) </p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 36190232,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "travis@mcdem.us",
            "sender_full_name": "Travis McDemus (S'13)",
            "sender_id": 2139,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "package organization",
            "submessages": [],
            "timestamp": 1425695409,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/5d46121e9a899e151cfcd0e59aa9e9f8a78989e8?x=x&version=1",
            "client": "Android",
            "content": "<p>Yeah, that makes sense. What I said about util applied to util libraries, not a cmd directory for binary commands, in case that was ambiguous. </p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 36191497,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "aditya@adityamukerjee.net",
            "sender_full_name": "Aditya Mukerjee (he) (SP1'15)",
            "sender_id": 7644,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "package organization",
            "submessages": [],
            "timestamp": 1425698099,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/391eb183c3474a15bf9ad0e87d3ff118?d=identicon&version=1",
            "client": "website",
            "content": "<p>So. I took the plunge and have started \"rewriting\" my MMO client using gopherjs. I am very pleased with the code from the move. To avoid wrapping reactjs and my rendering library, gopherjs never touches the dom. Instead, the gopherjs module emits events that my UI and render-er are listening for, enabling them to be all none the wiser that they are subservient to the all mighty and powerful gopher gods.</p>\n<p>To check this out look at <a href=\"https://github.com/ghthor/aodd/blob/master/www/js/init.js\" target=\"_blank\" title=\"https://github.com/ghthor/aodd/blob/master/www/js/init.js\">init.js</a> which is my requirejs entry point. It depends on app/app.js which is generated from <a href=\"https://github.com/ghthor/aodd/blob/master/www/js/app/main.go\" target=\"_blank\" title=\"https://github.com/ghthor/aodd/blob/master/www/js/app/main.go\">main.go</a>. app provides a function <a href=\"https://github.com/ghthor/aodd/blob/master/www/js/app/main.go#L74\" target=\"_blank\" title=\"https://github.com/ghthor/aodd/blob/master/www/js/app/main.go#L74\">dial()</a> that expects a jsobject as a parameter that the events will be emitted on. I currently using the <a href=\"https://github.com/ghthor/aodd/blob/master/www/js/ui/login.js#L184\" target=\"_blank\" title=\"https://github.com/ghthor/aodd/blob/master/www/js/ui/login.js#L184\">LoginUI</a> object as this event emitter, but I'm not exactly happy with that and this may change in the future.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 36266888,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "ghthor@gmail.com",
            "sender_full_name": "Will Drengwitz (he) (W1'17)",
            "sender_id": 7099,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "gopherjs just got real",
            "submessages": [],
            "timestamp": 1425834087,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/1380ded36dafac0d6f808b9b7b6c4e85266428a1?x=x&version=1",
            "client": "website",
            "content": "<p>Nice!</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 36479817,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "travis@mcdem.us",
            "sender_full_name": "Travis McDemus (S'13)",
            "sender_id": 2139,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "gopherjs just got real",
            "submessages": [],
            "timestamp": 1426111978,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/1380ded36dafac0d6f808b9b7b6c4e85266428a1?x=x&version=1",
            "client": "website",
            "content": "<p>I'm trying to understand the encoding packages a little better. <a href=\"http://golang.org/pkg/encoding/\" target=\"_blank\" title=\"http://golang.org/pkg/encoding/\">http://golang.org/pkg/encoding/</a> has a few interfaces, but I don't see that the sub-packages all implement those. Why?</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 36479993,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "travis@mcdem.us",
            "sender_full_name": "Travis McDemus (S'13)",
            "sender_id": 2139,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "encoding packages",
            "submessages": [],
            "timestamp": 1426112197,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/1380ded36dafac0d6f808b9b7b6c4e85266428a1?x=x&version=1",
            "client": "website",
            "content": "<p>Also, some of the formats under pkg/encoding/* have Unmarshal, some have Marshal, and they all seem to have Encode(...) and Decode(...) .  Is there a pattern to implementations (e.g. always satisfy some specific interfaces) or is it a free-for-all based on the encoding type? (pkg/encoding/csv doesn't have Unmarshal / Marshal , for example.) </p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 36480089,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "travis@mcdem.us",
            "sender_full_name": "Travis McDemus (S'13)",
            "sender_id": 2139,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "encoding packages",
            "submessages": [],
            "timestamp": 1426112315,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/1380ded36dafac0d6f808b9b7b6c4e85266428a1?x=x&version=1",
            "client": "website",
            "content": "<p>Does anyone know a quick way to see all the interfaces that a given type satisfies?</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 36480211,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "travis@mcdem.us",
            "sender_full_name": "Travis McDemus (S'13)",
            "sender_id": 2139,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "interfaces",
            "submessages": [],
            "timestamp": 1426112480,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/1380ded36dafac0d6f808b9b7b6c4e85266428a1?x=x&version=1",
            "client": "website",
            "content": "<p>Blasting out a program that shows this with graphviz or something sounds fun, but I seriously doubt I'm the only person to have asked that question.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 36480274,
            "is_me_message": false,
            "last_edit_timestamp": 1426112553,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "travis@mcdem.us",
            "sender_full_name": "Travis McDemus (S'13)",
            "sender_id": 2139,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "interfaces",
            "submessages": [],
            "timestamp": 1426112537,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/136a93069037c07b62cfe137a3cd1270ee524327?x=x&version=3",
            "client": "website",
            "content": "<p>this ? <a href=\"https://github.com/dominikh/implements\" target=\"_blank\" title=\"https://github.com/dominikh/implements\">https://github.com/dominikh/implements</a> </p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 36480391,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "alcara_m@pm.me",
            "sender_full_name": "Mar\u00edn Alcaraz (he) (W2'15)",
            "sender_id": 7082,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "interfaces",
            "submessages": [],
            "timestamp": 1426112690,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/136a93069037c07b62cfe137a3cd1270ee524327?x=x&version=3",
            "client": "website",
            "content": "<p>I think it's also included in vim-go</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 36480422,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "alcara_m@pm.me",
            "sender_full_name": "Mar\u00edn Alcaraz (he) (W2'15)",
            "sender_id": 7082,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "interfaces",
            "submessages": [],
            "timestamp": 1426112744,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/1380ded36dafac0d6f808b9b7b6c4e85266428a1?x=x&version=1",
            "client": "website",
            "content": "<p>Yeah! that. </p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 36480426,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "travis@mcdem.us",
            "sender_full_name": "Travis McDemus (S'13)",
            "sender_id": 2139,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "interfaces",
            "submessages": [],
            "timestamp": 1426112750,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/136a93069037c07b62cfe137a3cd1270ee524327?x=x&version=3",
            "client": "website",
            "content": "<p>:D</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 36480454,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "alcara_m@pm.me",
            "sender_full_name": "Mar\u00edn Alcaraz (he) (W2'15)",
            "sender_id": 7082,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "interfaces",
            "submessages": [],
            "timestamp": 1426112764,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/1380ded36dafac0d6f808b9b7b6c4e85266428a1?x=x&version=1",
            "client": "website",
            "content": "<p>Thanks, I'm going to try running with that. It seems to be targeting the use case I want... just seeing what interfaces in the standard library a random type happens to implement. </p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 36480520,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "travis@mcdem.us",
            "sender_full_name": "Travis McDemus (S'13)",
            "sender_id": 2139,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "interfaces",
            "submessages": [],
            "timestamp": 1426112829,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/136a93069037c07b62cfe137a3cd1270ee524327?x=x&version=3",
            "client": "website",
            "content": "<p>OK! glad it helps!</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 36480622,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "alcara_m@pm.me",
            "sender_full_name": "Mar\u00edn Alcaraz (he) (W2'15)",
            "sender_id": 7082,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "interfaces",
            "submessages": [],
            "timestamp": 1426112956,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/a179bb8c3fc4ab0975954f57d47fa6c53a8c2dad?x=x&version=2",
            "client": "website",
            "content": "<p>A few people have mentioned Go Oracle for this type of thing in the past.<br>\n<code>go get golang.org/x/tools/cmd/oracle</code><br>\n<a href=\"https://docs.google.com/document/d/1SLk36YRjjMgKqe490mSRzOPYEDe0Y_WQNRv-EiFYUyw/view\" target=\"_blank\" title=\"https://docs.google.com/document/d/1SLk36YRjjMgKqe490mSRzOPYEDe0Y_WQNRv-EiFYUyw/view\">https://docs.google.com/document/d/1SLk36YRjjMgKqe490mSRzOPYEDe0Y_WQNRv-EiFYUyw/view</a></p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 36487628,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "jay@jayschwa.net",
            "sender_full_name": "Jay Weisskopf Petacat (W2'17)",
            "sender_id": 829,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "interfaces",
            "submessages": [],
            "timestamp": 1426121374,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/a179bb8c3fc4ab0975954f57d47fa6c53a8c2dad?x=x&version=2",
            "client": "website",
            "content": "<p>I swear I've also come across a fork of <a href=\"http://godoc.org\" target=\"_blank\" title=\"http://godoc.org\">godoc.org</a> that answers that sort of question, but I don't remember it off the top of my head.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 36487764,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "jay@jayschwa.net",
            "sender_full_name": "Jay Weisskopf Petacat (W2'17)",
            "sender_id": 829,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "interfaces",
            "submessages": [],
            "timestamp": 1426121529,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/a179bb8c3fc4ab0975954f57d47fa6c53a8c2dad?x=x&version=2",
            "client": "website",
            "content": "<p>The interfaces in <code>encoding</code> aren't meant to be implemented by the sub-packages, they're meant to be used by the sub-packages. If you create your own type that implements the <code>encoding</code> interfaces, then <code>encoding/foo</code> automatically knows how to use it.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 36487946,
            "is_me_message": false,
            "last_edit_timestamp": 1426121880,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "jay@jayschwa.net",
            "sender_full_name": "Jay Weisskopf Petacat (W2'17)",
            "sender_id": 829,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "encoding packages",
            "submessages": [],
            "timestamp": 1426121862,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/a179bb8c3fc4ab0975954f57d47fa6c53a8c2dad?x=x&version=2",
            "client": "website",
            "content": "<p>As for the differences between sub-packages wrt naming, I think some of that is just organic inconsistencies. Though I've noticed that \"de|encode\" seems to be used for streams and [un]marshal seems to be used for discrete chunks/values.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 36488078,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "jay@jayschwa.net",
            "sender_full_name": "Jay Weisskopf Petacat (W2'17)",
            "sender_id": 829,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "encoding packages",
            "submessages": [],
            "timestamp": 1426122055,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/1380ded36dafac0d6f808b9b7b6c4e85266428a1?x=x&version=1",
            "client": "website",
            "content": "<p>Thanks, that tool looks useful, although I have to punt on actually learning to use it properly :/</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 36510265,
            "is_me_message": false,
            "last_edit_timestamp": 1426163187,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "travis@mcdem.us",
            "sender_full_name": "Travis McDemus (S'13)",
            "sender_id": 2139,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "interfaces",
            "submessages": [],
            "timestamp": 1426163170,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/1380ded36dafac0d6f808b9b7b6c4e85266428a1?x=x&version=1",
            "client": "website",
            "content": "<p>Ah, that all makes more sense now. Thanks!! </p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 36510329,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "travis@mcdem.us",
            "sender_full_name": "Travis McDemus (S'13)",
            "sender_id": 2139,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "encoding packages",
            "submessages": [],
            "timestamp": 1426163344,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/1380ded36dafac0d6f808b9b7b6c4e85266428a1?x=x&version=1",
            "client": "website",
            "content": "<p>If a string is a slice of bytes, and multiple bytes may compose a rune, how do I convert a rune to a slice of bytes?</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 36543682,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "travis@mcdem.us",
            "sender_full_name": "Travis McDemus (S'13)",
            "sender_id": 2139,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "runes",
            "submessages": [],
            "timestamp": 1426205127,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/1380ded36dafac0d6f808b9b7b6c4e85266428a1?x=x&version=1",
            "client": "website",
            "content": "<p>Or am I totally not groking the relation of strings, bytes, and runes?</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 36543690,
            "is_me_message": false,
            "last_edit_timestamp": 1426205171,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "travis@mcdem.us",
            "sender_full_name": "Travis McDemus (S'13)",
            "sender_id": 2139,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "runes",
            "submessages": [],
            "timestamp": 1426205155,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/1380ded36dafac0d6f808b9b7b6c4e85266428a1?x=x&version=1",
            "client": "website",
            "content": "<p>Hmm. <a href=\"http://golang.org/pkg/builtin/#rune\" target=\"_blank\" title=\"http://golang.org/pkg/builtin/#rune\">http://golang.org/pkg/builtin/#rune</a></p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 36543896,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "travis@mcdem.us",
            "sender_full_name": "Travis McDemus (S'13)",
            "sender_id": 2139,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "runes",
            "submessages": [],
            "timestamp": 1426205418,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/a179bb8c3fc4ab0975954f57d47fa6c53a8c2dad?x=x&version=2",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"travis@mcdem.us\">@Travis McDemus (S'13)</span> <a href=\"http://play.golang.org/p/tN6EoZ2bT9\" target=\"_blank\" title=\"http://play.golang.org/p/tN6EoZ2bT9\">http://play.golang.org/p/tN6EoZ2bT9</a></p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 36549917,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "jay@jayschwa.net",
            "sender_full_name": "Jay Weisskopf Petacat (W2'17)",
            "sender_id": 829,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "runes",
            "submessages": [],
            "timestamp": 1426216302,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/a179bb8c3fc4ab0975954f57d47fa6c53a8c2dad?x=x&version=2",
            "client": "website",
            "content": "<p>Another way to convert from <code>rune</code> to <code>[]byte</code> could be <a href=\"http://godoc.org/bytes#Buffer\" target=\"_blank\" title=\"http://godoc.org/bytes#Buffer\">http://godoc.org/bytes#Buffer</a> using the <code>WriteRune</code> and <code>Bytes</code> methods.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 36549979,
            "is_me_message": false,
            "last_edit_timestamp": 1426216861,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "jay@jayschwa.net",
            "sender_full_name": "Jay Weisskopf Petacat (W2'17)",
            "sender_id": 829,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "runes",
            "submessages": [],
            "timestamp": 1426216406,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/a179bb8c3fc4ab0975954f57d47fa6c53a8c2dad?x=x&version=2",
            "client": "website",
            "content": "<p><code>rune</code> is actually just a type alias for <code>int32</code>, so it'd be the same as however you like to convert an <code>int</code> to <code>[]byte</code>.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 36550218,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "jay@jayschwa.net",
            "sender_full_name": "Jay Weisskopf Petacat (W2'17)",
            "sender_id": 829,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "runes",
            "submessages": [],
            "timestamp": 1426216920,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/1380ded36dafac0d6f808b9b7b6c4e85266428a1?x=x&version=1",
            "client": "website",
            "content": "<p>ahhhhhh</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 36551332,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "travis@mcdem.us",
            "sender_full_name": "Travis McDemus (S'13)",
            "sender_id": 2139,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "runes",
            "submessages": [],
            "timestamp": 1426219509,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/1380ded36dafac0d6f808b9b7b6c4e85266428a1?x=x&version=1",
            "client": "website",
            "content": "<p>OK, so I just wrote up this example and saw your latest responses: <a href=\"http://play.golang.org/p/Avoy8_tXZl\" target=\"_blank\" title=\"http://play.golang.org/p/Avoy8_tXZl\">http://play.golang.org/p/Avoy8_tXZl</a></p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 36551335,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "travis@mcdem.us",
            "sender_full_name": "Travis McDemus (S'13)",
            "sender_id": 2139,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "runes",
            "submessages": [],
            "timestamp": 1426219531,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/1380ded36dafac0d6f808b9b7b6c4e85266428a1?x=x&version=1",
            "client": "website",
            "content": "<p>It's the WriteRune method that I overlooked.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 36551336,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "travis@mcdem.us",
            "sender_full_name": "Travis McDemus (S'13)",
            "sender_id": 2139,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "runes",
            "submessages": [],
            "timestamp": 1426219553,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/1380ded36dafac0d6f808b9b7b6c4e85266428a1?x=x&version=1",
            "client": "website",
            "content": "<p>I get it now, thanks for the example on the playground.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 36551376,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "travis@mcdem.us",
            "sender_full_name": "Travis McDemus (S'13)",
            "sender_id": 2139,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "runes",
            "submessages": [],
            "timestamp": 1426219588,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/1380ded36dafac0d6f808b9b7b6c4e85266428a1?x=x&version=1",
            "client": "website",
            "content": "<p>Some of this stuff isn't super obvious though... especially considering it's  runes when ranging over a string. (I was using these in switches and pushing other runes as bytes into a buffer...)</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 36551415,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "travis@mcdem.us",
            "sender_full_name": "Travis McDemus (S'13)",
            "sender_id": 2139,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "runes",
            "submessages": [],
            "timestamp": 1426219692,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/1380ded36dafac0d6f808b9b7b6c4e85266428a1?x=x&version=1",
            "client": "website",
            "content": "<p>FWIW, this is also what threw me off: <a href=\"http://golang.org/pkg/unicode/utf8/#EncodeRune\" target=\"_blank\" title=\"http://golang.org/pkg/unicode/utf8/#EncodeRune\">http://golang.org/pkg/unicode/utf8/#EncodeRune</a></p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 36551507,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "travis@mcdem.us",
            "sender_full_name": "Travis McDemus (S'13)",
            "sender_id": 2139,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "runes",
            "submessages": [],
            "timestamp": 1426219927,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/1380ded36dafac0d6f808b9b7b6c4e85266428a1?x=x&version=1",
            "client": "website",
            "content": "<p>You have to provide the slice up front. That's kind of weird to me. I just wanted something that was \"rune in\" and \"slice of bytes out\" in a single call.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 36551520,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "travis@mcdem.us",
            "sender_full_name": "Travis McDemus (S'13)",
            "sender_id": 2139,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "runes",
            "submessages": [],
            "timestamp": 1426219980,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/1380ded36dafac0d6f808b9b7b6c4e85266428a1?x=x&version=1",
            "client": "website",
            "content": "<p>But that'd be with bytes.Buffer.WriteRune(...)  and bytes.Buffer.Bytes(), I guess.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 36551525,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "travis@mcdem.us",
            "sender_full_name": "Travis McDemus (S'13)",
            "sender_id": 2139,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "runes",
            "submessages": [],
            "timestamp": 1426220029,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/a179bb8c3fc4ab0975954f57d47fa6c53a8c2dad?x=x&version=2",
            "client": "website",
            "content": "<p>Nice find. EncodeRune is probably more efficient if you're only handling one rune at a time since you know the upper-bound is 4 bytes.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 36551660,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "jay@jayschwa.net",
            "sender_full_name": "Jay Weisskopf Petacat (W2'17)",
            "sender_id": 829,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "runes",
            "submessages": [],
            "timestamp": 1426220389,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/1380ded36dafac0d6f808b9b7b6c4e85266428a1?x=x&version=1",
            "client": "website",
            "content": "<p>I did the first Go Challenge, and it'd be really useful to me if I could get code review on any aspect of it. (I'm talking even file system organization, names of things, whether it makes sense or not, etc.) <a href=\"https://github.com/aoeu/splice\" target=\"_blank\" title=\"https://github.com/aoeu/splice\">https://github.com/aoeu/splice</a></p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 36621668,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "travis@mcdem.us",
            "sender_full_name": "Travis McDemus (S'13)",
            "sender_id": 2139,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "code review",
            "submessages": [],
            "timestamp": 1426348747,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/1380ded36dafac0d6f808b9b7b6c4e85266428a1?x=x&version=1",
            "client": "website",
            "content": "<p>I reason I'm not doing some things optimally, and maybe I don't know some idioms yet, but it'd like to improve it before adding a lot more to it. (I want to keep working on it, I wasn't doing it for the contest so much as it was fun.)</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 36621731,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "travis@mcdem.us",
            "sender_full_name": "Travis McDemus (S'13)",
            "sender_id": 2139,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "code review",
            "submessages": [],
            "timestamp": 1426348918,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/f6bd929465d6d225def8062d5a9d3f3f?d=identicon&version=1",
            "client": "website",
            "content": "<p>If I have a collection of types that satisfy some interface, is there a simple way to write tests that run across every type that satisfies the interface? I see two links here that (I guess) can be used to help do that, but that seems a bit complicated for a question that seems like it ought to be simple?</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 36634823,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "danluu@gmail.com",
            "sender_full_name": "Dan Luu (W'13)",
            "sender_id": 820,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "interfaces",
            "submessages": [],
            "timestamp": 1426379914,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/a179bb8c3fc4ab0975954f57d47fa6c53a8c2dad?x=x&version=2",
            "client": "website",
            "content": "<p>I'm not clear what you mean. You want to know if types satisfy an interface or you want to write tests that pass/fail depending on interface satisfaction?</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 36634956,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "jay@jayschwa.net",
            "sender_full_name": "Jay Weisskopf Petacat (W2'17)",
            "sender_id": 829,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "interfaces",
            "submessages": [],
            "timestamp": 1426380287,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/f6bd929465d6d225def8062d5a9d3f3f?d=identicon&version=1",
            "client": "website",
            "content": "<p>Ok, let me make up a pseduo-concrete example. Say the interface is for a balanced binary tree, and I have N different implementations. Is there an easy way to write a tests against the balanced binary tree interface that will run against all the implementations?</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 36636103,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "danluu@gmail.com",
            "sender_full_name": "Dan Luu (W'13)",
            "sender_id": 820,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "interfaces",
            "submessages": [],
            "timestamp": 1426382975,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/f6bd929465d6d225def8062d5a9d3f3f?d=identicon&version=1",
            "client": "website",
            "content": "<p>I guess, for each test, I can make an array of the interface type of the concrete things and loop over the array, which isn't too bad, but still seems kinda ugly.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 36636143,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "danluu@gmail.com",
            "sender_full_name": "Dan Luu (W'13)",
            "sender_id": 820,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "interfaces",
            "submessages": [],
            "timestamp": 1426383013,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/f6bd929465d6d225def8062d5a9d3f3f?d=identicon&version=1",
            "client": "website",
            "content": "<p>Although maybe that's just because I don't really know go and interfaces seem messy to me.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 36636148,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "danluu@gmail.com",
            "sender_full_name": "Dan Luu (W'13)",
            "sender_id": 820,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "interfaces",
            "submessages": [],
            "timestamp": 1426383050,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/a179bb8c3fc4ab0975954f57d47fa6c53a8c2dad?x=x&version=2",
            "client": "website",
            "content": "<p>There isn't a way for implicitly doing that.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 36636400,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "jay@jayschwa.net",
            "sender_full_name": "Jay Weisskopf Petacat (W2'17)",
            "sender_id": 829,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "interfaces",
            "submessages": [],
            "timestamp": 1426383618,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/0baa75c82ed02d819be85a4b24b0f4d3?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"danluu@gmail.com\">@Dan Luu (W'13)</span> I would say the array is the Go way. Table-driven tests are pretty common.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 36636464,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "mdparker89@gmail.com",
            "sender_full_name": "Matthew Parker (F2'14)",
            "sender_id": 6698,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "interfaces",
            "submessages": [],
            "timestamp": 1426383793,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/a179bb8c3fc4ab0975954f57d47fa6c53a8c2dad?x=x&version=2",
            "client": "website",
            "content": "<p>I think he means a test that doesn't depend on implementation details. I think it would be possible to write one, but you'd still have to call it explicitly for the implementations.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 36636511,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "jay@jayschwa.net",
            "sender_full_name": "Jay Weisskopf Petacat (W2'17)",
            "sender_id": 829,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "interfaces",
            "submessages": [],
            "timestamp": 1426383883,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/a179bb8c3fc4ab0975954f57d47fa6c53a8c2dad?x=x&version=2",
            "client": "website",
            "content": "<div class=\"codehilite\"><pre>type BinaryTree interface {\n    Left() BinaryTree\n    Right() BinaryTree\n    Value() int // or whatever the value type is\n}\n\nfunc testBalance(t BinaryTree) {\n    // stuff\n}\n\nfunc testFooTree() {\n    var foo FooTree\n    testBalance(foo)\n}\n\nfunc testBarTree() {\n    var bar BarTree\n    testBalance(bar)\n}\n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 36636565,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "jay@jayschwa.net",
            "sender_full_name": "Jay Weisskopf Petacat (W2'17)",
            "sender_id": 829,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "interfaces",
            "submessages": [],
            "timestamp": 1426384019,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/0baa75c82ed02d819be85a4b24b0f4d3?d=identicon&version=1",
            "client": "website",
            "content": "<div class=\"codehilite\"><pre>type BinaryTree interface {\n    Insert(int)\n   Search(int) bool\n}\ntype Implementation1 struct{\n}\ntype Implementation2 struct{\n}\n\nfunc TestBinaryTree(t *testing.T){\n    var testCases []BinaryTree{\n                         &amp;Implementation1{},\n                         &amp;Implementation2{}\n  }\n  for _, testCase := range testCases{\n       value := 100\n       testCase.Insert(value)\n       if !testCase.Search(value){\n            t.Error(&quot;Test failed&quot;)\n       }\n  }\n}\n</pre></div>\n\n\n<p>Makes it a bit easier to add more implementations</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 36636757,
            "is_me_message": false,
            "last_edit_timestamp": 1426384554,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "mdparker89@gmail.com",
            "sender_full_name": "Matthew Parker (F2'14)",
            "sender_id": 6698,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "interfaces",
            "submessages": [],
            "timestamp": 1426384533,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/a179bb8c3fc4ab0975954f57d47fa6c53a8c2dad?x=x&version=2",
            "client": "website",
            "content": "<p>Ah, yes <code>[]BinaryTree</code> makes it pretty easy to glob a bunch of different implementations together.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 36636842,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "jay@jayschwa.net",
            "sender_full_name": "Jay Weisskopf Petacat (W2'17)",
            "sender_id": 829,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "interfaces",
            "submessages": [],
            "timestamp": 1426384694,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/a179bb8c3fc4ab0975954f57d47fa6c53a8c2dad?x=x&version=2",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"danluu@gmail.com\">@Dan Luu (W'13)</span> ^</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 36636846,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "jay@jayschwa.net",
            "sender_full_name": "Jay Weisskopf Petacat (W2'17)",
            "sender_id": 829,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "interfaces",
            "submessages": [],
            "timestamp": 1426384712,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/f6bd929465d6d225def8062d5a9d3f3f?d=identicon&version=1",
            "client": "website",
            "content": "<p>Thanks for the help, <span class=\"user-mention\" data-user-email=\"jay@jayschwa.net\">@Jay Weisskopf (W'13)</span> <span class=\"user-mention\" data-user-email=\"mdparker89@gmail.com\">@Matthew Parker (F2'14)</span> <img alt=\":smile_cat:\" class=\"emoji\" src=\"static/third/gemoji/images/emoji/smile_cat.png\" title=\":smile_cat:\"> </p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 36637095,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "danluu@gmail.com",
            "sender_full_name": "Dan Luu (W'13)",
            "sender_id": 820,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "interfaces",
            "submessages": [],
            "timestamp": 1426385326,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/a179bb8c3fc4ab0975954f57d47fa6c53a8c2dad?x=x&version=2",
            "client": "website",
            "content": "<p>Is that what you were looking for?</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 36637135,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "jay@jayschwa.net",
            "sender_full_name": "Jay Weisskopf Petacat (W2'17)",
            "sender_id": 829,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "interfaces",
            "submessages": [],
            "timestamp": 1426385416,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/f6bd929465d6d225def8062d5a9d3f3f?d=identicon&version=1",
            "client": "website",
            "content": "<p>Yeah. I mean, I'd prefer that the language had some kind of reflection that made it easy to avoid the boilerplate, but given that it doesn't, I'll make do.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 36637762,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "danluu@gmail.com",
            "sender_full_name": "Dan Luu (W'13)",
            "sender_id": 820,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "interfaces",
            "submessages": [],
            "timestamp": 1426387138,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/f6bd929465d6d225def8062d5a9d3f3f?d=identicon&version=1",
            "client": "website",
            "content": "<p>What do people do in circumstances where you'd normally want a debugger? <a href=\"https://golang.org/doc/gdb\" target=\"_blank\" title=\"https://golang.org/doc/gdb\">This official looking doc on using gdb as a debugger makes it sound like a bad option</a>.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 36696632,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "danluu@gmail.com",
            "sender_full_name": "Dan Luu (W'13)",
            "sender_id": 820,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "debugging",
            "submessages": [],
            "timestamp": 1426524648,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/1380ded36dafac0d6f808b9b7b6c4e85266428a1?x=x&version=1",
            "client": "website",
            "content": "<p>I think about what the code in doing, use unit tests, and use carefully placed print statements. Yes, I'm serious, and no, I'm not attempting to troll. </p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 36701883,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "travis@mcdem.us",
            "sender_full_name": "Travis McDemus (S'13)",
            "sender_id": 2139,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "debugging",
            "submessages": [],
            "timestamp": 1426530892,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/1380ded36dafac0d6f808b9b7b6c4e85266428a1?x=x&version=1",
            "client": "website",
            "content": "<p>Maybe that approach works for me since any code I write in golang is pretty small. (I'd like to increase my \"code radius,\" and maybe some other tools and techniques will be really necessary as that happens.)</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 36702014,
            "is_me_message": false,
            "last_edit_timestamp": 1426531134,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "travis@mcdem.us",
            "sender_full_name": "Travis McDemus (S'13)",
            "sender_id": 2139,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "debugging",
            "submessages": [],
            "timestamp": 1426531018,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/5d46121e9a899e151cfcd0e59aa9e9f8a78989e8?x=x&version=1",
            "client": "desktop app Linux 0.4.4",
            "content": "<p><span class=\"user-mention\" data-user-email=\"danluu@gmail.com\">@Dan Luu (W'13)</span> If you have no goroutines, gdb will work okay. But yeah, I usually just do as Travis does</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 36702162,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "aditya@adityamukerjee.net",
            "sender_full_name": "Aditya Mukerjee (he) (SP1'15)",
            "sender_id": 7644,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "debugging",
            "submessages": [],
            "timestamp": 1426531164,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/5d46121e9a899e151cfcd0e59aa9e9f8a78989e8?x=x&version=1",
            "client": "desktop app Linux 0.4.4",
            "content": "<p><span class=\"user-mention\" data-user-email=\"danluu@gmail.com\">@Dan Luu (W'13)</span> Also, you can ignore most of that document if you use gccgo instead of gc (just pass the \"-compiler=gccgo\" flag to the build command)</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 36702179,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "aditya@adityamukerjee.net",
            "sender_full_name": "Aditya Mukerjee (he) (SP1'15)",
            "sender_id": 7644,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "debugging",
            "submessages": [],
            "timestamp": 1426531200,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/f6bd929465d6d225def8062d5a9d3f3f?d=identicon&version=1",
            "client": "website",
            "content": "<p>Yeah, I've tried writing small unit tests to debug cases where I would normally use a debugger. That works ok and the bonus is that I have a working test afterwards, but I'm not sure what to do when I run into a mystery bug where I can't narrow it down enough to even decide what should get tested.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 36707280,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "danluu@gmail.com",
            "sender_full_name": "Dan Luu (W'13)",
            "sender_id": 820,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "debugging",
            "submessages": [],
            "timestamp": 1426536349,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/5d46121e9a899e151cfcd0e59aa9e9f8a78989e8?x=x&version=1",
            "client": "desktop app Linux 0.4.4",
            "content": "<p>Aside from the fact that typing it out is kind of a pain, what is the information that you'd want from a debugger that log.Printf(\"%+v\") isn't giving you/</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 36707798,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "aditya@adityamukerjee.net",
            "sender_full_name": "Aditya Mukerjee (he) (SP1'15)",
            "sender_id": 7644,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "debugging",
            "submessages": [],
            "timestamp": 1426536906,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/f6bd929465d6d225def8062d5a9d3f3f?d=identicon&version=1",
            "client": "website",
            "content": "<p>Here is an example real bug where having a debugger was pretty useful (not from a Go program, but the same thing could happen in Go).</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 36707822,
            "is_me_message": false,
            "last_edit_timestamp": 1426541175,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "danluu@gmail.com",
            "sender_full_name": "Dan Luu (W'13)",
            "sender_id": 820,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "debugging",
            "submessages": [],
            "timestamp": 1426536958,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/f6bd929465d6d225def8062d5a9d3f3f?d=identicon&version=1",
            "client": "website",
            "content": "<p>I don't think it could have been debugging with logging in a reasonable timeframe, but I'd be happy to learn that I'm wrong!</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 36707871,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "danluu@gmail.com",
            "sender_full_name": "Dan Luu (W'13)",
            "sender_id": 820,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "debugging",
            "submessages": [],
            "timestamp": 1426536985,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/f6bd929465d6d225def8062d5a9d3f3f?d=identicon&version=1",
            "client": "website",
            "content": "<p>The program is a simulator which compiles a bunch of logic into a giant executable (like, 500megs, very few branches or loops, just straight line code) and then runs it.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 36707919,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "danluu@gmail.com",
            "sender_full_name": "Dan Luu (W'13)",
            "sender_id": 820,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "debugging",
            "submessages": [],
            "timestamp": 1426537062,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/f6bd929465d6d225def8062d5a9d3f3f?d=identicon&version=1",
            "client": "website",
            "content": "<p>And for some reason the program crashes periodically. We have 1000 machines running it and it crashes less than once a day, so it's at least 1000 machine-days per crash. Even though the code is single threaded, the failure is non-deterministic and no one is able to reproduce a crash.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 36707972,
            "is_me_message": false,
            "last_edit_timestamp": 1426539243,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "danluu@gmail.com",
            "sender_full_name": "Dan Luu (W'13)",
            "sender_id": 820,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "debugging",
            "submessages": [],
            "timestamp": 1426537096,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/f6bd929465d6d225def8062d5a9d3f3f?d=identicon&version=1",
            "client": "website",
            "content": "<p>Lots of people look at the traces/dumps from the crashes but there seems to be very little in common between them.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 36707988,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "danluu@gmail.com",
            "sender_full_name": "Dan Luu (W'13)",
            "sender_id": 820,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "debugging",
            "submessages": [],
            "timestamp": 1426537125,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/f6bd929465d6d225def8062d5a9d3f3f?d=identicon&version=1",
            "client": "website",
            "content": "<p>So someone has the idea of suspending the process when it would have crashed so we can go in and look around with a debugger.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 36707999,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "danluu@gmail.com",
            "sender_full_name": "Dan Luu (W'13)",
            "sender_id": 820,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "debugging",
            "submessages": [],
            "timestamp": 1426537147,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/f6bd929465d6d225def8062d5a9d3f3f?d=identicon&version=1",
            "client": "website",
            "content": "<p>And if you look around you'll see that somewhere a single bit has been flipped to cause the crash. In some cases there's no way that could have happened except due to a hardware error (like, a const was just set to 0 immediately before a memory load, but the value is somehow 0x10000000).</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 36708024,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "danluu@gmail.com",
            "sender_full_name": "Dan Luu (W'13)",
            "sender_id": 820,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "debugging",
            "submessages": [],
            "timestamp": 1426537193,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/f6bd929465d6d225def8062d5a9d3f3f?d=identicon&version=1",
            "client": "website",
            "content": "<p>So, bad RAM, probably! In retrospect it may have been this row hammer thing people are talking about now, but we just replaced the RAM on the bad machines and it seemed to be fine afterwards.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 36708072,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "danluu@gmail.com",
            "sender_full_name": "Dan Luu (W'13)",
            "sender_id": 820,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "debugging",
            "submessages": [],
            "timestamp": 1426537222,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/5d46121e9a899e151cfcd0e59aa9e9f8a78989e8?x=x&version=1",
            "client": "desktop app Linux 0.4.4",
            "content": "<p>the reason I ask is that I see incredible utility from gdb with C due to the classes of memory issues you have to worry about, but because many of those aren't as relevant in Go, the types of bugs that I end up having to track down in Go don't really use most of gdb's features</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 36708095,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "aditya@adityamukerjee.net",
            "sender_full_name": "Aditya Mukerjee (he) (SP1'15)",
            "sender_id": 7644,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "debugging",
            "submessages": [],
            "timestamp": 1426537271,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/5d46121e9a899e151cfcd0e59aa9e9f8a78989e8?x=x&version=1",
            "client": "desktop app Linux 0.4.4",
            "content": "<p>but I also haven't used gdb in ages</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 36708100,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "aditya@adityamukerjee.net",
            "sender_full_name": "Aditya Mukerjee (he) (SP1'15)",
            "sender_id": 7644,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "debugging",
            "submessages": [],
            "timestamp": 1426537284,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/5d46121e9a899e151cfcd0e59aa9e9f8a78989e8?x=x&version=1",
            "client": "desktop app Linux 0.4.4",
            "content": "<p>so I may be forgetting some of what it does</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 36708103,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "aditya@adityamukerjee.net",
            "sender_full_name": "Aditya Mukerjee (he) (SP1'15)",
            "sender_id": 7644,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "debugging",
            "submessages": [],
            "timestamp": 1426537289,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/f6bd929465d6d225def8062d5a9d3f3f?d=identicon&version=1",
            "client": "website",
            "content": "<p>Yeah this didn't really use any gdb feature except the ability to poke around in memory. I can think of a couple of other bugs that were fundamentally hardware or lower level infrastructure bugs where the same ability was super useful. I don't think language-level logging would have been granular enough to catch most of the instances of something crazy happening, and it also would have slowed down execution by a huge factor. Probably at least 3x if done with some incredibly fancy technique designed for speed, but well over 1000x if it was just printing to a log file. You'd basically have to log every memory load/store, and also some stuff between loads and stores.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 36708115,
            "is_me_message": false,
            "last_edit_timestamp": 1426537824,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "danluu@gmail.com",
            "sender_full_name": "Dan Luu (W'13)",
            "sender_id": 820,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "debugging",
            "submessages": [],
            "timestamp": 1426537318,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/f6bd929465d6d225def8062d5a9d3f3f?d=identicon&version=1",
            "client": "website",
            "content": "<p>In this case you could probably get away with gdb having no idea what to go code was, but I can also think of cases where you'd really want to know what was being executed at a higher level.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 36708177,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "danluu@gmail.com",
            "sender_full_name": "Dan Luu (W'13)",
            "sender_id": 820,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "debugging",
            "submessages": [],
            "timestamp": 1426537369,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/f6bd929465d6d225def8062d5a9d3f3f?d=identicon&version=1",
            "client": "website",
            "content": "<p>The other main use case where I really like debuggers is when debugging or otherwise trying to understand undocumented and untested code that 's written in some way that makes it really hard to read.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 36708197,
            "is_me_message": false,
            "last_edit_timestamp": 1426537466,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "danluu@gmail.com",
            "sender_full_name": "Dan Luu (W'13)",
            "sender_id": 820,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "debugging",
            "submessages": [],
            "timestamp": 1426537434,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/5d46121e9a899e151cfcd0e59aa9e9f8a78989e8?x=x&version=1",
            "client": "desktop app Linux 0.4.4",
            "content": "<p>Yeah, I can see that. I'd actually really love go-gdb, which is aware of the Go runtime and is able to facilitate debugging across multiple goroutines (including pausing all goroutines, resuming goroutines selectively, etc.)</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 36708251,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "aditya@adityamukerjee.net",
            "sender_full_name": "Aditya Mukerjee (he) (SP1'15)",
            "sender_id": 7644,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "debugging",
            "submessages": [],
            "timestamp": 1426537502,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/5d46121e9a899e151cfcd0e59aa9e9f8a78989e8?x=x&version=1",
            "client": "desktop app Linux 0.4.4",
            "content": "<p>(a lot of that is mitigated by the race detector, to be fair)</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 36708259,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "aditya@adityamukerjee.net",
            "sender_full_name": "Aditya Mukerjee (he) (SP1'15)",
            "sender_id": 7644,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "debugging",
            "submessages": [],
            "timestamp": 1426537512,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/391eb183c3474a15bf9ad0e87d3ff118?d=identicon&version=1",
            "client": "website",
            "content": "<p>You can potentially do what you want. You'd have to use something like <code>go generate</code> and a tool like <a href=\"https://docs.google.com/document/d/1SLk36YRjjMgKqe490mSRzOPYEDe0Y_WQNRv-EiFYUyw/view#heading=h.15us5y9rxrbh\" target=\"_blank\" title=\"https://docs.google.com/document/d/1SLk36YRjjMgKqe490mSRzOPYEDe0Y_WQNRv-EiFYUyw/view#heading=h.15us5y9rxrbh\">oracle</a> to identify the types that implement your interface and then generate the table that can be used in the tests.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 36811348,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "ghthor@gmail.com",
            "sender_full_name": "Will Drengwitz (he) (W1'17)",
            "sender_id": 7099,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "interfaces",
            "submessages": [],
            "timestamp": 1426700500,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/0a35beaf5a354dafdf10494c0313e10fffc154fd?x=x&version=1",
            "client": "website",
            "content": "<p>if any go-masters feel like sharing wisdom, i'll be in and out of this thread with misc. questions that pop up as i work through A Tour of Go</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37006476,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "maia.mcc@gmail.com",
            "sender_full_name": "Maia McCormick (she) (S2'14)",
            "sender_id": 6175,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "silly questions as i teach myself go",
            "submessages": [],
            "timestamp": 1427051260,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/0a35beaf5a354dafdf10494c0313e10fffc154fd?x=x&version=1",
            "client": "website",
            "content": "<p>first question: looking for some terminology clarification re: \"exported(/unexported) identifiers\". I get the capital/noncapital convention, where identifiers beginning with a capital letter are exported (i.e. accessible when one imports the package) and those with lowercase are not... but my question is basically, what's an \"identifier\"?</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37006520,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "maia.mcc@gmail.com",
            "sender_full_name": "Maia McCormick (she) (S2'14)",
            "sender_id": 6175,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "silly questions as i teach myself go",
            "submessages": [],
            "timestamp": 1427051323,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/0a35beaf5a354dafdf10494c0313e10fffc154fd?x=x&version=1",
            "client": "website",
            "content": "<p>is it literally any thing in the package (type, var, function, etc.)? So, functions must be named with a capital letter if you want them to be accessible from outside the package?</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37006564,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "maia.mcc@gmail.com",
            "sender_full_name": "Maia McCormick (she) (S2'14)",
            "sender_id": 6175,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "silly questions as i teach myself go",
            "submessages": [],
            "timestamp": 1427051423,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/0baa75c82ed02d819be85a4b24b0f4d3?d=identicon&version=1",
            "client": "website",
            "content": "<p>Yep functions, types, vars and struct fields all have to have capital letters to be accessible outside of the package.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37006658,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "mdparker89@gmail.com",
            "sender_full_name": "Matthew Parker (F2'14)",
            "sender_id": 6698,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "silly questions as i teach myself go",
            "submessages": [],
            "timestamp": 1427051706,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/0a35beaf5a354dafdf10494c0313e10fffc154fd?x=x&version=1",
            "client": "website",
            "content": "<p>craaaaazzzzy! cool</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37006706,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "maia.mcc@gmail.com",
            "sender_full_name": "Maia McCormick (she) (S2'14)",
            "sender_id": 6175,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "silly questions as i teach myself go",
            "submessages": [],
            "timestamp": 1427051770,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/0baa75c82ed02d819be85a4b24b0f4d3?d=identicon&version=1",
            "client": "website",
            "content": "<p>i'll be around on zulip for a bit if you have any other questions!</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37006717,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "mdparker89@gmail.com",
            "sender_full_name": "Matthew Parker (F2'14)",
            "sender_id": 6698,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "silly questions as i teach myself go",
            "submessages": [],
            "timestamp": 1427051849,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/0a35beaf5a354dafdf10494c0313e10fffc154fd?x=x&version=1",
            "client": "website",
            "content": "<p>awesome, thanks! i have no doubt i will <img alt=\":blush:\" class=\"emoji\" src=\"static/third/gemoji/images/emoji/blush.png\" title=\":blush:\"> </p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37006719,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "maia.mcc@gmail.com",
            "sender_full_name": "Maia McCormick (she) (S2'14)",
            "sender_id": 6175,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "silly questions as i teach myself go",
            "submessages": [],
            "timestamp": 1427051877,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/0a35beaf5a354dafdf10494c0313e10fffc154fd?x=x&version=1",
            "client": "website",
            "content": "<p>hmm <span class=\"user-mention\" data-user-email=\"mdparker89@gmail.com\">@Matthew Parker (F2'14)</span> , can you explain arrays and slices, and the differences between the two?</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37006762,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "maia.mcc@gmail.com",
            "sender_full_name": "Maia McCormick (she) (S2'14)",
            "sender_id": 6175,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "silly questions as i teach myself go",
            "submessages": [],
            "timestamp": 1427051979,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/0a35beaf5a354dafdf10494c0313e10fffc154fd?x=x&version=1",
            "client": "website",
            "content": "<p>(i'm coming from python-land, if that's any help)</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37006763,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "maia.mcc@gmail.com",
            "sender_full_name": "Maia McCormick (she) (S2'14)",
            "sender_id": 6175,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "silly questions as i teach myself go",
            "submessages": [],
            "timestamp": 1427051989,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/0baa75c82ed02d819be85a4b24b0f4d3?d=identicon&version=1",
            "client": "website",
            "content": "<p>an HSer had an awesome blog post on this</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37006804,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "mdparker89@gmail.com",
            "sender_full_name": "Matthew Parker (F2'14)",
            "sender_id": 6698,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "silly questions as i teach myself go",
            "submessages": [],
            "timestamp": 1427052019,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/0baa75c82ed02d819be85a4b24b0f4d3?d=identicon&version=1",
            "client": "website",
            "content": "<p>i'll try to find it</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37006808,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "mdparker89@gmail.com",
            "sender_full_name": "Matthew Parker (F2'14)",
            "sender_id": 6698,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "silly questions as i teach myself go",
            "submessages": [],
            "timestamp": 1427052022,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/0baa75c82ed02d819be85a4b24b0f4d3?d=identicon&version=1",
            "client": "website",
            "content": "<p>Here's a deep dive into how arrays work <a href=\"http://geekgirl.io/grokking-go-array-internals-the-call-stack-and-pass-by-value/\" target=\"_blank\" title=\"http://geekgirl.io/grokking-go-array-internals-the-call-stack-and-pass-by-value/\">http://geekgirl.io/grokking-go-array-internals-the-call-stack-and-pass-by-value/</a></p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37006995,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "mdparker89@gmail.com",
            "sender_full_name": "Matthew Parker (F2'14)",
            "sender_id": 6698,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "silly questions as i teach myself go",
            "submessages": [],
            "timestamp": 1427052495,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/0baa75c82ed02d819be85a4b24b0f4d3?d=identicon&version=1",
            "client": "website",
            "content": "<p>and slices vs arrays <a href=\"https://blog.golang.org/slices\" target=\"_blank\" title=\"https://blog.golang.org/slices\">https://blog.golang.org/slices</a></p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37006999,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "mdparker89@gmail.com",
            "sender_full_name": "Matthew Parker (F2'14)",
            "sender_id": 6698,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "silly questions as i teach myself go",
            "submessages": [],
            "timestamp": 1427052506,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/0a35beaf5a354dafdf10494c0313e10fffc154fd?x=x&version=1",
            "client": "website",
            "content": "<p>cool! and--how to format strings without printint?</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37007004,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "maia.mcc@gmail.com",
            "sender_full_name": "Maia McCormick (she) (S2'14)",
            "sender_id": 6175,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "silly questions as i teach myself go",
            "submessages": [],
            "timestamp": 1427052541,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/0a35beaf5a354dafdf10494c0313e10fffc154fd?x=x&version=1",
            "client": "website",
            "content": "<p>*printing.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37007005,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "maia.mcc@gmail.com",
            "sender_full_name": "Maia McCormick (she) (S2'14)",
            "sender_id": 6175,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "silly questions as i teach myself go",
            "submessages": [],
            "timestamp": 1427052543,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/0baa75c82ed02d819be85a4b24b0f4d3?d=identicon&version=1",
            "client": "website",
            "content": "<p>you still use the fmt package</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37007009,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "mdparker89@gmail.com",
            "sender_full_name": "Matthew Parker (F2'14)",
            "sender_id": 6698,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "silly questions as i teach myself go",
            "submessages": [],
            "timestamp": 1427052575,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/0baa75c82ed02d819be85a4b24b0f4d3?d=identicon&version=1",
            "client": "website",
            "content": "<p>fmt.Sprintf</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37007011,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "mdparker89@gmail.com",
            "sender_full_name": "Matthew Parker (F2'14)",
            "sender_id": 6698,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "silly questions as i teach myself go",
            "submessages": [],
            "timestamp": 1427052580,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/0a35beaf5a354dafdf10494c0313e10fffc154fd?x=x&version=1",
            "client": "website",
            "content": "<p>great!</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37007033,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "maia.mcc@gmail.com",
            "sender_full_name": "Maia McCormick (she) (S2'14)",
            "sender_id": 6175,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "silly questions as i teach myself go",
            "submessages": [],
            "timestamp": 1427052604,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/0a35beaf5a354dafdf10494c0313e10fffc154fd?x=x&version=1",
            "client": "website",
            "content": "<p>what's the naming convention there? (what does the <code>S</code> indicate,  i mean?)</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37007059,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "maia.mcc@gmail.com",
            "sender_full_name": "Maia McCormick (she) (S2'14)",
            "sender_id": 6175,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "silly questions as i teach myself go",
            "submessages": [],
            "timestamp": 1427052621,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/0baa75c82ed02d819be85a4b24b0f4d3?d=identicon&version=1",
            "client": "website",
            "content": "<p>the short answer on the arrays vs slices thing is that I think coming from python slices are like python arrays</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37007062,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "mdparker89@gmail.com",
            "sender_full_name": "Matthew Parker (F2'14)",
            "sender_id": 6698,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "silly questions as i teach myself go",
            "submessages": [],
            "timestamp": 1427052634,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/0baa75c82ed02d819be85a4b24b0f4d3?d=identicon&version=1",
            "client": "website",
            "content": "<p>and you'll mostly be dealing with slices in go</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37007063,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "mdparker89@gmail.com",
            "sender_full_name": "Matthew Parker (F2'14)",
            "sender_id": 6698,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "silly questions as i teach myself go",
            "submessages": [],
            "timestamp": 1427052643,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/0baa75c82ed02d819be85a4b24b0f4d3?d=identicon&version=1",
            "client": "website",
            "content": "<p>you can get pretty far without digging into slices vs arrays</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37007082,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "mdparker89@gmail.com",
            "sender_full_name": "Matthew Parker (F2'14)",
            "sender_id": 6698,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "silly questions as i teach myself go",
            "submessages": [],
            "timestamp": 1427052719,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/0baa75c82ed02d819be85a4b24b0f4d3?d=identicon&version=1",
            "client": "website",
            "content": "<p>I think the S is for string (I'm guessing)</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37007125,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "mdparker89@gmail.com",
            "sender_full_name": "Matthew Parker (F2'14)",
            "sender_id": 6698,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "silly questions as i teach myself go",
            "submessages": [],
            "timestamp": 1427052744,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/0baa75c82ed02d819be85a4b24b0f4d3?d=identicon&version=1",
            "client": "website",
            "content": "<p>Sprint returns a string rather than printing so String printing</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37007130,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "mdparker89@gmail.com",
            "sender_full_name": "Matthew Parker (F2'14)",
            "sender_id": 6698,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "silly questions as i teach myself go",
            "submessages": [],
            "timestamp": 1427052767,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/a179bb8c3fc4ab0975954f57d47fa6c53a8c2dad?x=x&version=2",
            "client": "website",
            "content": "<p>The fmt functions are largely named after their C ancestors. Printf means \"print this formatted string\". Sprintf uses the same conventions except that it returns a string with the output rather than printing the output. <a href=\"http://en.cppreference.com/w/c/io/fprintf\" target=\"_blank\" title=\"http://en.cppreference.com/w/c/io/fprintf\">http://en.cppreference.com/w/c/io/fprintf</a></p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37007240,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "jay@jayschwa.net",
            "sender_full_name": "Jay Weisskopf Petacat (W2'17)",
            "sender_id": 829,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "silly questions as i teach myself go",
            "submessages": [],
            "timestamp": 1427053076,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/0a35beaf5a354dafdf10494c0313e10fffc154fd?x=x&version=1",
            "client": "website",
            "content": "<p>ah, ok... it just seems weird to me that the function name contains 'print' but it doesn't print anything...</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37007413,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "maia.mcc@gmail.com",
            "sender_full_name": "Maia McCormick (she) (S2'14)",
            "sender_id": 6175,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "silly questions as i teach myself go",
            "submessages": [],
            "timestamp": 1427053454,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/a179bb8c3fc4ab0975954f57d47fa6c53a8c2dad?x=x&version=2",
            "client": "website",
            "content": "<p>Yeah, that's understandable. It seems like there are a lot of holdovers like that in Go (and programming in general).</p>\n<p>I've always thought \"string\" was a weird name for a type. Why not call it \"text\" or something? \"string\" is a holdover from when text was just a \"string of chars\" in a buffer, I guess.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37007575,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "jay@jayschwa.net",
            "sender_full_name": "Jay Weisskopf Petacat (W2'17)",
            "sender_id": 829,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "silly questions as i teach myself go",
            "submessages": [],
            "timestamp": 1427053909,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/5d46121e9a899e151cfcd0e59aa9e9f8a78989e8?x=x&version=1",
            "client": "desktop app Linux 0.4.4",
            "content": "<p><span class=\"user-mention\" data-user-email=\"maia.mcc@gmail.com\">@Maia McCormick (S'14)</span> welcome to the Go club! :D</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37018733,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "aditya@adityamukerjee.net",
            "sender_full_name": "Aditya Mukerjee (he) (SP1'15)",
            "sender_id": 7644,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "silly questions as i teach myself go",
            "submessages": [],
            "timestamp": 1427077067,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/0a35beaf5a354dafdf10494c0313e10fffc154fd?x=x&version=1",
            "client": "website",
            "content": "<p>hehe thanks <span class=\"user-mention\" data-user-email=\"aditya@adityamukerjee.net\">@Aditya Mukerjee (SP1'15)</span> ! <img alt=\":smile:\" class=\"emoji\" src=\"static/third/gemoji/images/emoji/smile.png\" title=\":smile:\"> <img alt=\":gopher:\" class=\"emoji\" src=\"https://golang.org/doc/gopher/gopherbw.png\" title=\":gopher:\"> </p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37116533,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "maia.mcc@gmail.com",
            "sender_full_name": "Maia McCormick (she) (S2'14)",
            "sender_id": 6175,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "silly questions as i teach myself go",
            "submessages": [],
            "timestamp": 1427230109,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/0a35beaf5a354dafdf10494c0313e10fffc154fd?x=x&version=1",
            "client": "website",
            "content": "<p>why declare variables? I'm working through <a href=\"https://tour.golang.org/basics/8\" target=\"_blank\" title=\"https://tour.golang.org/basics/8\">https://tour.golang.org/basics/8</a> right now:</p>\n<div class=\"codehilite\"><pre><span class=\"k\">package</span> <span class=\"n\">main</span>\n\n<span class=\"k\">import</span> <span class=\"s\">&quot;fmt&quot;</span>\n\n<span class=\"k\">var</span> <span class=\"n\">c</span><span class=\"p\">,</span> <span class=\"n\">python</span><span class=\"p\">,</span> <span class=\"n\">java</span> <span class=\"n\">bool</span>\n\n<span class=\"k\">func</span> <span class=\"n\">main</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n    <span class=\"k\">var</span> <span class=\"n\">i</span> <span class=\"nb\">int</span>\n    <span class=\"n\">fmt</span><span class=\"p\">.</span><span class=\"n\">Println</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"n\">c</span><span class=\"p\">,</span> <span class=\"n\">python</span><span class=\"p\">,</span> <span class=\"n\">java</span><span class=\"p\">)</span>\n<span class=\"p\">}</span>\n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37117038,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "maia.mcc@gmail.com",
            "sender_full_name": "Maia McCormick (she) (S2'14)",
            "sender_id": 6175,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "silly questions as i teach myself go",
            "submessages": [],
            "timestamp": 1427230685,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/0a35beaf5a354dafdf10494c0313e10fffc154fd?x=x&version=1",
            "client": "website",
            "content": "<p>I don't see why you need to declare var's like that, though--can't you just do this--</p>\n<div class=\"codehilite\"><pre><span class=\"k\">package</span> <span class=\"n\">main</span>\n\n<span class=\"k\">import</span> <span class=\"s\">&quot;fmt&quot;</span>\n\n<span class=\"k\">var</span> <span class=\"n\">python</span><span class=\"p\">,</span> <span class=\"n\">java</span> <span class=\"n\">bool</span>\n\n<span class=\"k\">func</span> <span class=\"n\">main</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n    <span class=\"n\">c</span> <span class=\"p\">:=</span> <span class=\"n\">true</span>\n    <span class=\"n\">i</span> <span class=\"p\">:=</span> <span class=\"mi\">5</span>\n    <span class=\"n\">fmt</span><span class=\"p\">.</span><span class=\"n\">Println</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"n\">c</span><span class=\"p\">,</span> <span class=\"n\">python</span><span class=\"p\">,</span> <span class=\"n\">java</span><span class=\"p\">)</span>\n<span class=\"p\">}</span>\n</pre></div>\n\n\n<p>--with no repercussions? (here, i don't declare c or i, just set their values)</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37117094,
            "is_me_message": false,
            "last_edit_timestamp": 1427230785,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "maia.mcc@gmail.com",
            "sender_full_name": "Maia McCormick (she) (S2'14)",
            "sender_id": 6175,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "silly questions as i teach myself go",
            "submessages": [],
            "timestamp": 1427230745,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/0a35beaf5a354dafdf10494c0313e10fffc154fd?x=x&version=1",
            "client": "website",
            "content": "<p>...i skipped ahead two lessons and answered my own question. <code>:=</code> functions as an initializer + value setter. whoops.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37117232,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "maia.mcc@gmail.com",
            "sender_full_name": "Maia McCormick (she) (S2'14)",
            "sender_id": 6175,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "silly questions as i teach myself go",
            "submessages": [],
            "timestamp": 1427230856,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/0a35beaf5a354dafdf10494c0313e10fffc154fd?x=x&version=1",
            "client": "website",
            "content": "<p>...don't mind me, i'll just go hide behind this tree. <img alt=\":deciduous_tree:\" class=\"emoji\" src=\"static/third/gemoji/images/emoji/deciduous_tree.png\" title=\":deciduous_tree:\"> </p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37117324,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "maia.mcc@gmail.com",
            "sender_full_name": "Maia McCormick (she) (S2'14)",
            "sender_id": 6175,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "silly questions as i teach myself go",
            "submessages": [],
            "timestamp": 1427230931,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/0baa75c82ed02d819be85a4b24b0f4d3?d=identicon&version=1",
            "client": "website",
            "content": "<p>lots of ways you can do var initialization.<br>\nc := true<br>\nvar c bool = true<br>\nvar c = true</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37126161,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "mdparker89@gmail.com",
            "sender_full_name": "Matthew Parker (F2'14)",
            "sender_id": 6698,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "silly questions as i teach myself go",
            "submessages": [],
            "timestamp": 1427242217,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/0baa75c82ed02d819be85a4b24b0f4d3?d=identicon&version=1",
            "client": "website",
            "content": "<p>I think I remember one of the core Golang team saying they wish they could go back and redo this</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37126176,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "mdparker89@gmail.com",
            "sender_full_name": "Matthew Parker (F2'14)",
            "sender_id": 6698,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "silly questions as i teach myself go",
            "submessages": [],
            "timestamp": 1427242268,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/0baa75c82ed02d819be85a4b24b0f4d3?d=identicon&version=1",
            "client": "website",
            "content": "<p>^^ <span class=\"user-mention\" data-user-email=\"maia.mcc@gmail.com\">@Maia McCormick (S'14)</span> </p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37126228,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "mdparker89@gmail.com",
            "sender_full_name": "Matthew Parker (F2'14)",
            "sender_id": 6698,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "silly questions as i teach myself go",
            "submessages": [],
            "timestamp": 1427242338,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/0a35beaf5a354dafdf10494c0313e10fffc154fd?x=x&version=1",
            "client": "website",
            "content": "<p><a href=\"https://tour.golang.org/flowcontrol/2\" target=\"_blank\" title=\"https://tour.golang.org/flowcontrol/2\">https://tour.golang.org/flowcontrol/2</a> &lt;-- am I right in saying that this ends up as basically a while loop?</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37164849,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "maia.mcc@gmail.com",
            "sender_full_name": "Maia McCormick (she) (S2'14)",
            "sender_id": 6175,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "silly questions as i teach myself go",
            "submessages": [],
            "timestamp": 1427306350,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/a179bb8c3fc4ab0975954f57d47fa6c53a8c2dad?x=x&version=2",
            "client": "website",
            "content": "<p>Yep.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37164857,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "jay@jayschwa.net",
            "sender_full_name": "Jay Weisskopf Petacat (W2'17)",
            "sender_id": 829,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "silly questions as i teach myself go",
            "submessages": [],
            "timestamp": 1427306372,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/a606e9bf03e17f889b759d952465d3f9?d=identicon&version=1",
            "client": "website",
            "content": "<p>Yes. Go uses <code>for</code> for all looping. Infinite loops are </p>\n<div class=\"codehilite\"><pre><span class=\"k\">for</span> <span class=\"p\">{</span>\n    <span class=\"c1\">// Do stuff forever</span>\n<span class=\"p\">}</span>\n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37164927,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "rmcase@gmail.com",
            "sender_full_name": "Ryan Case (S1'14)",
            "sender_id": 5881,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "silly questions as i teach myself go",
            "submessages": [],
            "timestamp": 1427306422,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/a606e9bf03e17f889b759d952465d3f9?d=identicon&version=1",
            "client": "website",
            "content": "<p>Though you can also just write that as </p>\n<div class=\"codehilite\"><pre><span class=\"k\">for</span> <span class=\"n\">sum</span> <span class=\"p\">&lt;</span> <span class=\"mi\">1000</span> <span class=\"p\">{</span>\n    <span class=\"c1\">// yada yada</span>\n<span class=\"p\">}</span>\n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37164961,
            "is_me_message": false,
            "last_edit_timestamp": 1427306485,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "rmcase@gmail.com",
            "sender_full_name": "Ryan Case (S1'14)",
            "sender_id": 5881,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "silly questions as i teach myself go",
            "submessages": [],
            "timestamp": 1427306473,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/a606e9bf03e17f889b759d952465d3f9?d=identicon&version=1",
            "client": "website",
            "content": "<p>Lol, the next page of the tour says all of that. </p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37165161,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "rmcase@gmail.com",
            "sender_full_name": "Ryan Case (S1'14)",
            "sender_id": 5881,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "silly questions as i teach myself go",
            "submessages": [],
            "timestamp": 1427306734,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/0a35beaf5a354dafdf10494c0313e10fffc154fd?x=x&version=1",
            "client": "website",
            "content": "<p>playing with the Tour code and getting funky errors I don't understand.  took the original code from <a href=\"https://tour.golang.org/flowcontrol/6\" target=\"_blank\" title=\"https://tour.golang.org/flowcontrol/6\">https://tour.golang.org/flowcontrol/6</a> and modified it so that there were two return values:</p>\n<div class=\"codehilite\"><pre><span class=\"k\">package</span> <span class=\"n\">main</span>\n\n<span class=\"k\">import</span> <span class=\"p\">(</span>\n    <span class=\"s\">&quot;fmt&quot;</span>\n    <span class=\"s\">&quot;math&quot;</span>\n<span class=\"p\">)</span>\n\n<span class=\"k\">func</span> <span class=\"n\">pow</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">n</span><span class=\"p\">,</span> <span class=\"n\">lim</span> <span class=\"nb\">float64</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"nb\">float64</span><span class=\"p\">,</span> <span class=\"nb\">float64</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"k\">if</span> <span class=\"n\">v</span> <span class=\"p\">:=</span> <span class=\"n\">math</span><span class=\"p\">.</span><span class=\"n\">Pow</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">n</span><span class=\"p\">);</span> <span class=\"n\">v</span> <span class=\"p\">&lt;</span> <span class=\"n\">lim</span> <span class=\"p\">{</span>\n        <span class=\"k\">return</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">v</span>\n    <span class=\"p\">}</span>\n    <span class=\"k\">return</span> <span class=\"n\">lim</span><span class=\"p\">,</span> <span class=\"mi\">0</span>\n<span class=\"p\">}</span>\n\n<span class=\"k\">func</span> <span class=\"n\">main</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n    <span class=\"n\">fmt</span><span class=\"p\">.</span><span class=\"n\">Println</span><span class=\"p\">(</span>\n        <span class=\"n\">pow</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">),</span>\n        <span class=\"n\">pow</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">20</span><span class=\"p\">),</span>\n    <span class=\"p\">)</span>\n<span class=\"p\">}</span>\n</pre></div>\n\n\n<p>but when I run it i get error, <code>multiple-value pow() in single-value context</code>. Can someone explain what that error means, and why I get it in this situation but not when my function returns only one value?</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37165757,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "maia.mcc@gmail.com",
            "sender_full_name": "Maia McCormick (she) (S2'14)",
            "sender_id": 6175,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "silly questions as i teach myself go",
            "submessages": [],
            "timestamp": 1427307447,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/0a35beaf5a354dafdf10494c0313e10fffc154fd?x=x&version=1",
            "client": "website",
            "content": "<div class=\"codehilite\"><pre><span class=\"k\">func</span> <span class=\"n\">main</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n    <span class=\"n\">fmt</span><span class=\"p\">.</span><span class=\"n\">Println</span><span class=\"p\">(</span><span class=\"n\">pow</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">))</span>\n<span class=\"p\">}</span>\n</pre></div>\n\n\n<p>however seems to work just fine with a function that returns two values</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37165808,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "maia.mcc@gmail.com",
            "sender_full_name": "Maia McCormick (she) (S2'14)",
            "sender_id": 6175,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "silly questions as i teach myself go",
            "submessages": [],
            "timestamp": 1427307488,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/a606e9bf03e17f889b759d952465d3f9?d=identicon&version=1",
            "client": "website",
            "content": "<p>The error is about not accounting for the right number of return values. I'm guessing that <code>Println</code> will work implicitly with multiple return when you are only printing one item. In all other contexts (like <code>Printf</code>) you get that error.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37166562,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "rmcase@gmail.com",
            "sender_full_name": "Ryan Case (S1'14)",
            "sender_id": 5881,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "silly questions as i teach myself go",
            "submessages": [],
            "timestamp": 1427308376,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/a606e9bf03e17f889b759d952465d3f9?d=identicon&version=1",
            "client": "website",
            "content": "<p>It's odd that <code>println(pow(3, 2, 10))</code> also raises an error. I would guess the exceptional behavior is meant as a debugging tool and it raises an error any time it thinks you might actually be doing that for non-debug purposes.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37166790,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "rmcase@gmail.com",
            "sender_full_name": "Ryan Case (S1'14)",
            "sender_id": 5881,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "silly questions as i teach myself go",
            "submessages": [],
            "timestamp": 1427308621,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/0a35beaf5a354dafdf10494c0313e10fffc154fd?x=x&version=1",
            "client": "website",
            "content": "<p>wait, ryan, really?</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37166981,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "maia.mcc@gmail.com",
            "sender_full_name": "Maia McCormick (she) (S2'14)",
            "sender_id": 6175,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "silly questions as i teach myself go",
            "submessages": [],
            "timestamp": 1427308805,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/f6bd929465d6d225def8062d5a9d3f3f?d=identicon&version=1",
            "client": "website",
            "content": "<p><a href=\"http://docs.huihoo.com/go/golang.org/doc/go_spec.html\" target=\"_blank\" title=\"http://docs.huihoo.com/go/golang.org/doc/go_spec.html\">There's something about this in the spec</a>. Ctrl+f for \"Except for one special case\".</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37167002,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "danluu@gmail.com",
            "sender_full_name": "Dan Luu (W'13)",
            "sender_id": 820,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "silly questions as i teach myself go",
            "submessages": [],
            "timestamp": 1427308817,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/f6bd929465d6d225def8062d5a9d3f3f?d=identicon&version=1",
            "client": "website",
            "content": "<p>This is one of my least favorite go features. Multiple return values are a special case hack and not a first-class thing (like they would be if tuples were a first-class thing, and multiple return values just returned a tuple), so they sometimes don't behave like you'd expect if you think of them as a first-class thing.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37167050,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "danluu@gmail.com",
            "sender_full_name": "Dan Luu (W'13)",
            "sender_id": 820,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "silly questions as i teach myself go",
            "submessages": [],
            "timestamp": 1427308892,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/a606e9bf03e17f889b759d952465d3f9?d=identicon&version=1",
            "client": "website",
            "content": "<p>wait, Maya, what?</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37167530,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "rmcase@gmail.com",
            "sender_full_name": "Ryan Case (S1'14)",
            "sender_id": 5881,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "silly questions as i teach myself go",
            "submessages": [],
            "timestamp": 1427309453,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/a606e9bf03e17f889b759d952465d3f9?d=identicon&version=1",
            "client": "website",
            "content": "<p>Also, to play devil's advocate here I think multiple return is a smart feature. It pushes errors to the part of the program best suited to deal with them and because it's not a tuple it allows for better type/arity checking. There have been plenty of times where I have nested functions only to be informed that one of them returns multiple values right when I save. It's a faster feedback cycle than waiting for a panic because I accidentally passed a tuple to something that can't use it.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37167723,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "rmcase@gmail.com",
            "sender_full_name": "Ryan Case (S1'14)",
            "sender_id": 5881,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "silly questions as i teach myself go",
            "submessages": [],
            "timestamp": 1427309750,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/a606e9bf03e17f889b759d952465d3f9?d=identicon&version=1",
            "client": "website",
            "content": "<p>That being said, I rarely use that feature for anything other than returning errors, I would agree that in an actual multiple return situation you'd probably just want to define a tuple struct and return that.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37167782,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "rmcase@gmail.com",
            "sender_full_name": "Ryan Case (S1'14)",
            "sender_id": 5881,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "silly questions as i teach myself go",
            "submessages": [],
            "timestamp": 1427309794,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/f6bd929465d6d225def8062d5a9d3f3f?d=identicon&version=1",
            "client": "website",
            "content": "<p>Why shouldn't a tuple be checked at compile time? In another hypothetical go,if you have a function that returns a 2-tuple and feed that result into a function that takes a single argument, why wouldn't that give you an error? Maybe I shouldn't use the word \"tuple\" because that's well defined to mean something specific that's not what I mean?</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37167866,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "danluu@gmail.com",
            "sender_full_name": "Dan Luu (W'13)",
            "sender_id": 820,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "silly questions as i teach myself go",
            "submessages": [],
            "timestamp": 1427309893,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/a606e9bf03e17f889b759d952465d3f9?d=identicon&version=1",
            "client": "website",
            "content": "<p>No you're right, that would be caught at compile time</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37167913,
            "is_me_message": false,
            "last_edit_timestamp": 1427310238,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "rmcase@gmail.com",
            "sender_full_name": "Ryan Case (S1'14)",
            "sender_id": 5881,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "silly questions as i teach myself go",
            "submessages": [],
            "timestamp": 1427309974,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/a606e9bf03e17f889b759d952465d3f9?d=identicon&version=1",
            "client": "website",
            "content": "<p>Not thinking straight today, need more coffee</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37168091,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "rmcase@gmail.com",
            "sender_full_name": "Ryan Case (S1'14)",
            "sender_id": 5881,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "silly questions as i teach myself go",
            "submessages": [],
            "timestamp": 1427310128,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/f6bd929465d6d225def8062d5a9d3f3f?d=identicon&version=1",
            "client": "website",
            "content": "<p><img alt=\":coffee:\" class=\"emoji\" src=\"static/third/gemoji/images/emoji/coffee.png\" title=\":coffee:\"> </p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37168189,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "danluu@gmail.com",
            "sender_full_name": "Dan Luu (W'13)",
            "sender_id": 820,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "silly questions as i teach myself go",
            "submessages": [],
            "timestamp": 1427310267,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/5d46121e9a899e151cfcd0e59aa9e9f8a78989e8?x=x&version=1",
            "client": "desktop app Linux 0.4.4",
            "content": "<p><span class=\"user-mention\" data-user-email=\"rmcase@gmail.com\">@Ryan Case (S'14)</span> It's more about not wanting to introduce a tuple type into the language, or having functions return []interface{}</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37168231,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "aditya@adityamukerjee.net",
            "sender_full_name": "Aditya Mukerjee (he) (SP1'15)",
            "sender_id": 7644,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "silly questions as i teach myself go",
            "submessages": [],
            "timestamp": 1427310362,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/5d46121e9a899e151cfcd0e59aa9e9f8a78989e8?x=x&version=1",
            "client": "desktop app Linux 0.4.4",
            "content": "<p>or worse, [2]interface{} (an array of 2 interfaces)</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37168271,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "aditya@adityamukerjee.net",
            "sender_full_name": "Aditya Mukerjee (he) (SP1'15)",
            "sender_id": 7644,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "silly questions as i teach myself go",
            "submessages": [],
            "timestamp": 1427310372,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/a606e9bf03e17f889b759d952465d3f9?d=identicon&version=1",
            "client": "website",
            "content": "<p>That was my other thought, that every return tuple would have to be typed in a way that might just add more complexity than they wanted</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37168462,
            "is_me_message": false,
            "last_edit_timestamp": 1427310677,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "rmcase@gmail.com",
            "sender_full_name": "Ryan Case (S1'14)",
            "sender_id": 5881,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "silly questions as i teach myself go",
            "submessages": [],
            "timestamp": 1427310656,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/a179bb8c3fc4ab0975954f57d47fa6c53a8c2dad?x=x&version=2",
            "client": "website",
            "content": "<p><a href=\"https://play.golang.org/p/716Bk4wpKu\" target=\"_blank\" title=\"https://play.golang.org/p/716Bk4wpKu\">https://play.golang.org/p/716Bk4wpKu</a></p>\n<div class=\"codehilite\"><pre>package main\n\nfunc TakesIFS(i int, f float64, s string) {}\n\nfunc GivesIFS() (i int, f float64, s string) {\n    return\n}\n\nfunc GivesIF() (i int, f float64) {\n    return\n}\n\nfunc main() {\n    var i int\n    var f float64\n    var s string\n\n    // Functions can take single values\n    TakesIFS(i, f, s)\n\n    // Functions can take the return values of functions that exactly match input values\n    TakesIFS(GivesIFS())\n\n    // It cannot be mixed and matched though\n    TakesIFS(GivesIF(), s)\n}\n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37168484,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "jay@jayschwa.net",
            "sender_full_name": "Jay Weisskopf Petacat (W2'17)",
            "sender_id": 829,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "silly questions as i teach myself go",
            "submessages": [],
            "timestamp": 1427310701,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/a179bb8c3fc4ab0975954f57d47fa6c53a8c2dad?x=x&version=2",
            "client": "website",
            "content": "<p>I can't think of a reason why mixing and matching couldn't be added in the future, but they probably just didn't want to do it for simplicity's sake.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37168549,
            "is_me_message": false,
            "last_edit_timestamp": 1427310766,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "jay@jayschwa.net",
            "sender_full_name": "Jay Weisskopf Petacat (W2'17)",
            "sender_id": 829,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "silly questions as i teach myself go",
            "submessages": [],
            "timestamp": 1427310756,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/a606e9bf03e17f889b759d952465d3f9?d=identicon&version=1",
            "client": "website",
            "content": "<p>Interesting, I didn't realize you could pass multiple return like that.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37168592,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "rmcase@gmail.com",
            "sender_full_name": "Ryan Case (S1'14)",
            "sender_id": 5881,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "silly questions as i teach myself go",
            "submessages": [],
            "timestamp": 1427310824,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/a179bb8c3fc4ab0975954f57d47fa6c53a8c2dad?x=x&version=2",
            "client": "website",
            "content": "<p>The reason why <code>fmt.Println</code> can work with any function is because it takes variadic <code>interface{}</code>, which will be satisfied by any and every type.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37168671,
            "is_me_message": false,
            "last_edit_timestamp": 1427310952,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "jay@jayschwa.net",
            "sender_full_name": "Jay Weisskopf Petacat (W2'17)",
            "sender_id": 829,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "silly questions as i teach myself go",
            "submessages": [],
            "timestamp": 1427310933,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/f6bd929465d6d225def8062d5a9d3f3f?d=identicon&version=1",
            "client": "website",
            "content": "<p>Unrelated question that seems appropriate for this thread: is there a collection of go data structures, kinda like the STL? I really like that I can get an implementation of a dequeue, balanced binary tree, etc., all in one place, all with the same interface.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37168676,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "danluu@gmail.com",
            "sender_full_name": "Dan Luu (W'13)",
            "sender_id": 820,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "silly questions as i teach myself go",
            "submessages": [],
            "timestamp": 1427310947,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/f6bd929465d6d225def8062d5a9d3f3f?d=identicon&version=1",
            "client": "website",
            "content": "<p>I sometimes search for individual things and then I get 5 different options all of unknown correctness and with various slightly different interfaces and then I just write my own since I don't really trust the correctness of some random implementation.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37168727,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "danluu@gmail.com",
            "sender_full_name": "Dan Luu (W'13)",
            "sender_id": 820,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "silly questions as i teach myself go",
            "submessages": [],
            "timestamp": 1427310988,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/f6bd929465d6d225def8062d5a9d3f3f?d=identicon&version=1",
            "client": "website",
            "content": "<p>But that's sort of horrible in its own way.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37168736,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "danluu@gmail.com",
            "sender_full_name": "Dan Luu (W'13)",
            "sender_id": 820,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "silly questions as i teach myself go",
            "submessages": [],
            "timestamp": 1427311003,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/a179bb8c3fc4ab0975954f57d47fa6c53a8c2dad?x=x&version=2",
            "client": "website",
            "content": "<p>Not really. For something like a queue, you're encouraged to just use a slice. The stdlib does have some containers, but I'm guessing they require ugly type casts. <a href=\"https://golang.org/pkg/container/\" target=\"_blank\" title=\"https://golang.org/pkg/container/\">https://golang.org/pkg/container/</a></p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37168775,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "jay@jayschwa.net",
            "sender_full_name": "Jay Weisskopf Petacat (W2'17)",
            "sender_id": 829,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "silly questions as i teach myself go",
            "submessages": [],
            "timestamp": 1427311056,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/a179bb8c3fc4ab0975954f57d47fa6c53a8c2dad?x=x&version=2",
            "client": "website",
            "content": "<p><a href=\"https://godoc.org/sort\" target=\"_blank\" title=\"https://godoc.org/sort\">https://godoc.org/sort</a> has facilities for doing binary searches on slices.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37168802,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "jay@jayschwa.net",
            "sender_full_name": "Jay Weisskopf Petacat (W2'17)",
            "sender_id": 829,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "silly questions as i teach myself go",
            "submessages": [],
            "timestamp": 1427311084,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/f6bd929465d6d225def8062d5a9d3f3f?d=identicon&version=1",
            "client": "website",
            "content": "<p>Isn't it pretty expensive to add and remove off of the front of a slice if it hits the beginning of the backing array?</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37168826,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "danluu@gmail.com",
            "sender_full_name": "Dan Luu (W'13)",
            "sender_id": 820,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "silly questions as i teach myself go",
            "submessages": [],
            "timestamp": 1427311099,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/f6bd929465d6d225def8062d5a9d3f3f?d=identicon&version=1",
            "client": "website",
            "content": "<p>I tried using a container/list once but the interface is bad, as is the performance.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37168844,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "danluu@gmail.com",
            "sender_full_name": "Dan Luu (W'13)",
            "sender_id": 820,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "silly questions as i teach myself go",
            "submessages": [],
            "timestamp": 1427311121,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/f6bd929465d6d225def8062d5a9d3f3f?d=identicon&version=1",
            "client": "website",
            "content": "<p>I mean, I guess I can use two slices and make a queue that's amortized fast, but then I might as well just make a real queue data structure and never have to about it again, but then I'm back to having my own custom data structures for everything. Same for implementing via circular buffer on top of a queue.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37168958,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "danluu@gmail.com",
            "sender_full_name": "Dan Luu (W'13)",
            "sender_id": 820,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "silly questions as i teach myself go",
            "submessages": [],
            "timestamp": 1427311269,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/a179bb8c3fc4ab0975954f57d47fa6c53a8c2dad?x=x&version=2",
            "client": "website",
            "content": "<p>I guess you'd use a slice for a LIFO and a buffered channel for a FIFO.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37169036,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "jay@jayschwa.net",
            "sender_full_name": "Jay Weisskopf Petacat (W2'17)",
            "sender_id": 829,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "silly questions as i teach myself go",
            "submessages": [],
            "timestamp": 1427311340,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/a179bb8c3fc4ab0975954f57d47fa6c53a8c2dad?x=x&version=2",
            "client": "website",
            "content": "<p>Someone did create standard-ish data structures that could be type parameterized based on import path, but I don't recall where that is off hand.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37169065,
            "is_me_message": false,
            "last_edit_timestamp": 1427311459,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "jay@jayschwa.net",
            "sender_full_name": "Jay Weisskopf Petacat (W2'17)",
            "sender_id": 829,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "silly questions as i teach myself go",
            "submessages": [],
            "timestamp": 1427311393,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/f6bd929465d6d225def8062d5a9d3f3f?d=identicon&version=1",
            "client": "website",
            "content": "<p>Ok, I guess channels are ok interface wise, but IIRC the performance is bad. That's ok for some stuff, but it's sort of annoying for what I'm doing now.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37169158,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "danluu@gmail.com",
            "sender_full_name": "Dan Luu (W'13)",
            "sender_id": 820,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "silly questions as i teach myself go",
            "submessages": [],
            "timestamp": 1427311466,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/a179bb8c3fc4ab0975954f57d47fa6c53a8c2dad?x=x&version=2",
            "client": "website",
            "content": "<p>I imagine if you went to the Go devs and said, \"hey, you should add a FIFO queue because channels are slow\", they'd probably say, \"we need to make channels faster then\".</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37169244,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "jay@jayschwa.net",
            "sender_full_name": "Jay Weisskopf Petacat (W2'17)",
            "sender_id": 829,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "silly questions as i teach myself go",
            "submessages": [],
            "timestamp": 1427311568,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/f6bd929465d6d225def8062d5a9d3f3f?d=identicon&version=1",
            "client": "website",
            "content": "<p>Oh, I didn't know that <code>sort</code> had a built-in binary search. Interesting.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37169257,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "danluu@gmail.com",
            "sender_full_name": "Dan Luu (W'13)",
            "sender_id": 820,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "silly questions as i teach myself go",
            "submessages": [],
            "timestamp": 1427311577,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/5d46121e9a899e151cfcd0e59aa9e9f8a78989e8?x=x&version=1",
            "client": "desktop app Linux 0.4.4",
            "content": "<p>In case you missed it, here are the slides from my talk on client-side programming in Go: <a href=\"https://chimeracoder.github.io/full-stack-go-client-slides/#1\" target=\"_blank\" title=\"https://chimeracoder.github.io/full-stack-go-client-slides/#1\">https://chimeracoder.github.io/full-stack-go-client-slides/#1</a></p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37177693,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "aditya@adityamukerjee.net",
            "sender_full_name": "Aditya Mukerjee (he) (SP1'15)",
            "sender_id": 7644,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "Full Stack Go: Client-side Go",
            "submessages": [],
            "timestamp": 1427320388,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/0a35beaf5a354dafdf10494c0313e10fffc154fd?x=x&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>another one for you excellent people, this time with pointers!</p>\n<div class=\"codehilite\"><pre><span class=\"n\">i</span> <span class=\"p\">:=</span> <span class=\"mi\">42</span>\n<span class=\"n\">p</span> <span class=\"p\">:=</span> <span class=\"p\">&amp;</span><span class=\"n\">i</span> <span class=\"c1\">// initializes p as pointer to i</span>\n<span class=\"n\">fmt</span><span class=\"p\">.</span><span class=\"n\">Println</span><span class=\"p\">(*</span><span class=\"n\">p</span><span class=\"p\">)</span> <span class=\"c1\">// read i through the pointer (prints 42)</span>\n<span class=\"n\">fmt</span><span class=\"p\">.</span><span class=\"n\">Println</span><span class=\"p\">(</span><span class=\"n\">p</span><span class=\"p\">)</span> <span class=\"c1\">// prints 0x10436180 (a memory location)</span>\n</pre></div>\n\n\n<p>can someone confirm for me--the memory location you get when you print <code>p</code> is the location that it's POINTING TO (i.e. the location of <code>i</code>), correct?</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37224439,
            "is_me_message": false,
            "last_edit_timestamp": 1427399011,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "maia.mcc@gmail.com",
            "sender_full_name": "Maia McCormick (she) (S2'14)",
            "sender_id": 6175,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "silly questions as i teach myself go",
            "submessages": [],
            "timestamp": 1427398983,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/0a35beaf5a354dafdf10494c0313e10fffc154fd?x=x&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>oh, also, how would you long-form initialize a pointer?</p>\n<div class=\"codehilite\"><pre><span class=\"k\">var</span> <span class=\"n\">i</span> <span class=\"nb\">int</span>\n<span class=\"k\">var</span> <span class=\"n\">p</span> <span class=\"err\">???</span>\n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37224674,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "maia.mcc@gmail.com",
            "sender_full_name": "Maia McCormick (she) (S2'14)",
            "sender_id": 6175,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "silly questions as i teach myself go",
            "submessages": [],
            "timestamp": 1427399201,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/1380ded36dafac0d6f808b9b7b6c4e85266428a1?x=x&version=1",
            "client": "website",
            "content": "<p>I think <code>var p *int</code> will do it. </p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37226016,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "travis@mcdem.us",
            "sender_full_name": "Travis McDemus (S'13)",
            "sender_id": 2139,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "silly questions as i teach myself go",
            "submessages": [],
            "timestamp": 1427400511,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/a179bb8c3fc4ab0975954f57d47fa6c53a8c2dad?x=x&version=2",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"maia.mcc@gmail.com\">@Maia McCormick (S'14)</span> Yes to your first question. <code>var p *int</code> for the second. The default value is <code>nil</code>.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37226023,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "jay@jayschwa.net",
            "sender_full_name": "Jay Weisskopf Petacat (W2'17)",
            "sender_id": 829,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "silly questions as i teach myself go",
            "submessages": [],
            "timestamp": 1427400519,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/1380ded36dafac0d6f808b9b7b6c4e85266428a1?x=x&version=1",
            "client": "website",
            "content": "<p>A lot of times the code reads like it would in English.  \"A variable named p that is a pointer to an int\" == <code>var p *int</code></p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37226047,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "travis@mcdem.us",
            "sender_full_name": "Travis McDemus (S'13)",
            "sender_id": 2139,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "silly questions as i teach myself go",
            "submessages": [],
            "timestamp": 1427400551,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/1380ded36dafac0d6f808b9b7b6c4e85266428a1?x=x&version=1",
            "client": "website",
            "content": "<p>I'm not sure if I communicated that well....oh well. </p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37226146,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "travis@mcdem.us",
            "sender_full_name": "Travis McDemus (S'13)",
            "sender_id": 2139,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "silly questions as i teach myself go",
            "submessages": [],
            "timestamp": 1427400625,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/0a35beaf5a354dafdf10494c0313e10fffc154fd?x=x&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>nope, <span class=\"user-mention\" data-user-email=\"travis@mcdem.us\">@Travis McDemus (S'13)</span>, makes perfect sense!</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37226391,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "maia.mcc@gmail.com",
            "sender_full_name": "Maia McCormick (she) (S2'14)",
            "sender_id": 6175,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "silly questions as i teach myself go",
            "submessages": [],
            "timestamp": 1427400953,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/0a35beaf5a354dafdf10494c0313e10fffc154fd?x=x&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>i'm too sleepy to be doing these tutorials now -- <code>struct</code> is a way of storing data analagous to python's <code>NamedTuple</code>, yes? ( <a href=\"https://tour.golang.org/moretypes/2\" target=\"_blank\" title=\"https://tour.golang.org/moretypes/2\">https://tour.golang.org/moretypes/2</a> )</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37226455,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "maia.mcc@gmail.com",
            "sender_full_name": "Maia McCormick (she) (S2'14)",
            "sender_id": 6175,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "silly questions as i teach myself go",
            "submessages": [],
            "timestamp": 1427400990,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/1380ded36dafac0d6f808b9b7b6c4e85266428a1?x=x&version=1",
            "client": "website",
            "content": "<p>I'm not sure what the NamedTuple is, but I think so. </p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37226651,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "travis@mcdem.us",
            "sender_full_name": "Travis McDemus (S'13)",
            "sender_id": 2139,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "silly questions as i teach myself go",
            "submessages": [],
            "timestamp": 1427401238,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/1380ded36dafac0d6f808b9b7b6c4e85266428a1?x=x&version=1",
            "client": "website",
            "content": "<p>They're literally like C structs.  Think of structs as just a bag 'o data fields.  </p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37226671,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "travis@mcdem.us",
            "sender_full_name": "Travis McDemus (S'13)",
            "sender_id": 2139,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "silly questions as i teach myself go",
            "submessages": [],
            "timestamp": 1427401258,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/1380ded36dafac0d6f808b9b7b6c4e85266428a1?x=x&version=1",
            "client": "website",
            "content": "<p>I guess the name comes from a corruption of the word \"data structure\"?</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37226683,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "travis@mcdem.us",
            "sender_full_name": "Travis McDemus (S'13)",
            "sender_id": 2139,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "silly questions as i teach myself go",
            "submessages": [],
            "timestamp": 1427401298,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/0a35beaf5a354dafdf10494c0313e10fffc154fd?x=x&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>is there a go equivalent of <code>type(foo)</code>? or do you have to do <code>fmt.Printf(\"%T\", foo)</code>?</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37226761,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "maia.mcc@gmail.com",
            "sender_full_name": "Maia McCormick (she) (S2'14)",
            "sender_id": 6175,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "silly questions as i teach myself go",
            "submessages": [],
            "timestamp": 1427401406,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/1380ded36dafac0d6f808b9b7b6c4e85266428a1?x=x&version=1",
            "client": "website",
            "content": "<p>The other neat thing about them is that is that when you use a struct in your code, it'll store all those fields in memory _sequentially_   </p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37226767,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "travis@mcdem.us",
            "sender_full_name": "Travis McDemus (S'13)",
            "sender_id": 2139,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "silly questions as i teach myself go",
            "submessages": [],
            "timestamp": 1427401412,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/1380ded36dafac0d6f808b9b7b6c4e85266428a1?x=x&version=1",
            "client": "website",
            "content": "<div class=\"codehilite\"><pre>type coordinate struct {\n     x int\n     y int\n}\n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37226844,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "travis@mcdem.us",
            "sender_full_name": "Travis McDemus (S'13)",
            "sender_id": 2139,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "silly questions as i teach myself go",
            "submessages": [],
            "timestamp": 1427401467,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/1380ded36dafac0d6f808b9b7b6c4e85266428a1?x=x&version=1",
            "client": "website",
            "content": "<p>That'll get mapped out in memory as two integers, side by side, one for X, one for Y.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37226859,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "travis@mcdem.us",
            "sender_full_name": "Travis McDemus (S'13)",
            "sender_id": 2139,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "silly questions as i teach myself go",
            "submessages": [],
            "timestamp": 1427401489,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/1380ded36dafac0d6f808b9b7b6c4e85266428a1?x=x&version=1",
            "client": "website",
            "content": "<p>I have no idea if that info is helpful or relevant, but for some reason random trivia about how stuff works under the hood helps me hold onto it in my brain slightly easier. </p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37226888,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "travis@mcdem.us",
            "sender_full_name": "Travis McDemus (S'13)",
            "sender_id": 2139,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "silly questions as i teach myself go",
            "submessages": [],
            "timestamp": 1427401541,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/f6bd929465d6d225def8062d5a9d3f3f?d=identicon&version=1",
            "client": "website",
            "content": "<p>I believe you can use <code>%v</code> to print a generic thing.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37226894,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "danluu@gmail.com",
            "sender_full_name": "Dan Luu (W'13)",
            "sender_id": 820,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "silly questions as i teach myself go",
            "submessages": [],
            "timestamp": 1427401546,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/f6bd929465d6d225def8062d5a9d3f3f?d=identicon&version=1",
            "client": "website",
            "content": "<p>Oh wait that wasn't the question!</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37226926,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "danluu@gmail.com",
            "sender_full_name": "Dan Luu (W'13)",
            "sender_id": 820,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "silly questions as i teach myself go",
            "submessages": [],
            "timestamp": 1427401566,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/f6bd929465d6d225def8062d5a9d3f3f?d=identicon&version=1",
            "client": "website",
            "content": "<p>There's reflect.TypeOf</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37226942,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "danluu@gmail.com",
            "sender_full_name": "Dan Luu (W'13)",
            "sender_id": 820,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "silly questions as i teach myself go",
            "submessages": [],
            "timestamp": 1427401572,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/1380ded36dafac0d6f808b9b7b6c4e85266428a1?x=x&version=1",
            "client": "website",
            "content": "<p>Still a true statement! </p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37226947,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "travis@mcdem.us",
            "sender_full_name": "Travis McDemus (S'13)",
            "sender_id": 2139,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "silly questions as i teach myself go",
            "submessages": [],
            "timestamp": 1427401578,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/1380ded36dafac0d6f808b9b7b6c4e85266428a1?x=x&version=1",
            "client": "website",
            "content": "<p>You  can fmt.Printf(\"%v\", anything)</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37226966,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "travis@mcdem.us",
            "sender_full_name": "Travis McDemus (S'13)",
            "sender_id": 2139,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "silly questions as i teach myself go",
            "submessages": [],
            "timestamp": 1427401599,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/0a35beaf5a354dafdf10494c0313e10fffc154fd?x=x&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>haha yes, true!</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37227009,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "maia.mcc@gmail.com",
            "sender_full_name": "Maia McCormick (she) (S2'14)",
            "sender_id": 6175,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "silly questions as i teach myself go",
            "submessages": [],
            "timestamp": 1427401661,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/f6bd929465d6d225def8062d5a9d3f3f?d=identicon&version=1",
            "client": "website",
            "content": "<p>A related question! Is it considered bad practice to use reflect? I use <code>reflect.DeepEqual</code>all the time, but I've definitely heard people say bad things about using reflection code (not about go's <code>reflect.</code> in particular, just in general).</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37227085,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "danluu@gmail.com",
            "sender_full_name": "Dan Luu (W'13)",
            "sender_id": 820,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "silly questions as i teach myself go",
            "submessages": [],
            "timestamp": 1427401759,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/0a35beaf5a354dafdf10494c0313e10fffc154fd?x=x&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>YOU GUYS ARRAYS CAN'T BE RESIZED!!! WHAT STRANGE UNIVERSE AM I IN RIGHT NOW???</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37227172,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "maia.mcc@gmail.com",
            "sender_full_name": "Maia McCormick (she) (S2'14)",
            "sender_id": 6175,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "silly questions as i teach myself go",
            "submessages": [],
            "timestamp": 1427401860,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/0a35beaf5a354dafdf10494c0313e10fffc154fd?x=x&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>also i assume that you can only have a single type of thing in any given array? like, your array can't mix strings and ints?</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37227190,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "maia.mcc@gmail.com",
            "sender_full_name": "Maia McCormick (she) (S2'14)",
            "sender_id": 6175,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "silly questions as i teach myself go",
            "submessages": [],
            "timestamp": 1427401897,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/a179bb8c3fc4ab0975954f57d47fa6c53a8c2dad?x=x&version=2",
            "client": "website",
            "content": "<blockquote>\n<p>Is it considered bad practice to use reflect?</p>\n</blockquote>\n<p>Yes.</p>\n<blockquote>\n<p>also i assume that you can only have a single type of thing in any given array? like, your array can't mix strings and ints?</p>\n</blockquote>\n<p>That's right, though if the type of the array is <code>interface{}</code>, it could contain both <code>string</code> and <code>int</code>. But that'd be ugly.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37227593,
            "is_me_message": false,
            "last_edit_timestamp": 1427402355,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "jay@jayschwa.net",
            "sender_full_name": "Jay Weisskopf Petacat (W2'17)",
            "sender_id": 829,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "silly questions as i teach myself go",
            "submessages": [],
            "timestamp": 1427402345,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/5d46121e9a899e151cfcd0e59aa9e9f8a78989e8?x=x&version=1",
            "client": "desktop app Linux 0.4.4",
            "content": "<p><span class=\"user-mention\" data-user-email=\"danluu@gmail.com\">@Dan Luu (W'13)</span> it's bad insofar as it's slow, but it's actually better to use reflection in Go than in other languages</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37228103,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "aditya@adityamukerjee.net",
            "sender_full_name": "Aditya Mukerjee (he) (SP1'15)",
            "sender_id": 7644,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "silly questions as i teach myself go",
            "submessages": [],
            "timestamp": 1427402946,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/5d46121e9a899e151cfcd0e59aa9e9f8a78989e8?x=x&version=1",
            "client": "desktop app Linux 0.4.4",
            "content": "<p>or rather, in Go, it's idiomatic to use reflect in situations where it would not be in (e.g.) java</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37228109,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "aditya@adityamukerjee.net",
            "sender_full_name": "Aditya Mukerjee (he) (SP1'15)",
            "sender_id": 7644,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "silly questions as i teach myself go",
            "submessages": [],
            "timestamp": 1427402958,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/5d46121e9a899e151cfcd0e59aa9e9f8a78989e8?x=x&version=1",
            "client": "desktop app Linux 0.4.4",
            "content": "<p><span class=\"user-mention\" data-user-email=\"maia.mcc@gmail.com\">@Maia McCormick (S'14)</span> always use slices instead of arrays</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37228149,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "aditya@adityamukerjee.net",
            "sender_full_name": "Aditya Mukerjee (he) (SP1'15)",
            "sender_id": 7644,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "silly questions as i teach myself go",
            "submessages": [],
            "timestamp": 1427403004,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/5d46121e9a899e151cfcd0e59aa9e9f8a78989e8?x=x&version=1",
            "client": "desktop app Linux 0.4.4",
            "content": "<p>arrays are there mostly for internal stuff (e.g. string encoding), though there are a few rare cases when it's valid to use them</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37228175,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "aditya@adityamukerjee.net",
            "sender_full_name": "Aditya Mukerjee (he) (SP1'15)",
            "sender_id": 7644,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "silly questions as i teach myself go",
            "submessages": [],
            "timestamp": 1427403032,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/0a35beaf5a354dafdf10494c0313e10fffc154fd?x=x&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p><span class=\"user-mention\" data-user-email=\"aditya@adityamukerjee.net\">@Aditya Mukerjee (SP1'15)</span> yeah that's the sense i'm getting--but i'm also somewhat confused because it seems like a slice by definition always needs to be pointing back at an array? is this true?</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37228195,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "maia.mcc@gmail.com",
            "sender_full_name": "Maia McCormick (she) (S2'14)",
            "sender_id": 6175,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "silly questions as i teach myself go",
            "submessages": [],
            "timestamp": 1427403076,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/5d46121e9a899e151cfcd0e59aa9e9f8a78989e8?x=x&version=1",
            "client": "desktop app Linux 0.4.4",
            "content": "<p><span class=\"user-mention\" data-user-email=\"maia.mcc@gmail.com\">@Maia McCormick (S'14)</span> as for long-form initialization of pointers, fun fact: pointers are literally just <code>int64</code> under the hood (or <code>int32</code> if you're weird and using a 32-bit system). In fact, until very recently, the garbage collector couldn't tell the difference. The compiler won't let you mix the two, however - you'd have to use the <code>unsafe</code> package which is, as you can tell from the name, unsafe and not recommended</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37228213,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "aditya@adityamukerjee.net",
            "sender_full_name": "Aditya Mukerjee (he) (SP1'15)",
            "sender_id": 7644,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "silly questions as i teach myself go",
            "submessages": [],
            "timestamp": 1427403106,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/5d46121e9a899e151cfcd0e59aa9e9f8a78989e8?x=x&version=1",
            "client": "desktop app Linux 0.4.4",
            "content": "<p><span class=\"user-mention\" data-user-email=\"maia.mcc@gmail.com\">@Maia McCormick (S'14)</span> When you create a slice, it creates an array 'under the hood', but you rarely need to think about it. You just need to understand that sliceshave both length and capacity (the latter is usually used when performance s an issue, but ignored otherwise)</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37228286,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "aditya@adityamukerjee.net",
            "sender_full_name": "Aditya Mukerjee (he) (SP1'15)",
            "sender_id": 7644,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "silly questions as i teach myself go",
            "submessages": [],
            "timestamp": 1427403173,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/0a35beaf5a354dafdf10494c0313e10fffc154fd?x=x&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>cool, got it.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37228380,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "maia.mcc@gmail.com",
            "sender_full_name": "Maia McCormick (she) (S2'14)",
            "sender_id": 6175,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "silly questions as i teach myself go",
            "submessages": [],
            "timestamp": 1427403257,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/0a35beaf5a354dafdf10494c0313e10fffc154fd?x=x&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>what might be a case where i WOULD want to use an array rather than a string</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37228400,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "maia.mcc@gmail.com",
            "sender_full_name": "Maia McCormick (she) (S2'14)",
            "sender_id": 6175,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "silly questions as i teach myself go",
            "submessages": [],
            "timestamp": 1427403276,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/0a35beaf5a354dafdf10494c0313e10fffc154fd?x=x&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>?</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37228401,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "maia.mcc@gmail.com",
            "sender_full_name": "Maia McCormick (she) (S2'14)",
            "sender_id": 6175,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "silly questions as i teach myself go",
            "submessages": [],
            "timestamp": 1427403276,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/5d46121e9a899e151cfcd0e59aa9e9f8a78989e8?x=x&version=1",
            "client": "desktop app Linux 0.4.4",
            "content": "<p>I just reread your example and realized you really were asking about how to declare pointers, not how to initialize them. Apologies for the \"well actually\", but it's probably helpful to be aware of the difference between declaring a variable (which is what you were asking) and how to initialize a variable (how to assign values to an existing variable)</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37228430,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "aditya@adityamukerjee.net",
            "sender_full_name": "Aditya Mukerjee (he) (SP1'15)",
            "sender_id": 7644,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "silly questions as i teach myself go",
            "submessages": [],
            "timestamp": 1427403319,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/a179bb8c3fc4ab0975954f57d47fa6c53a8c2dad?x=x&version=2",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"maia.mcc@gmail.com\">@Maia McCormick (S'14)</span> I've used arrays for 3D / linear algebra stuff, but not much beyond that.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37228452,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "jay@jayschwa.net",
            "sender_full_name": "Jay Weisskopf Petacat (W2'17)",
            "sender_id": 829,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "silly questions as i teach myself go",
            "submessages": [],
            "timestamp": 1427403340,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/5d46121e9a899e151cfcd0e59aa9e9f8a78989e8?x=x&version=1",
            "client": "desktop app Linux 0.4.4",
            "content": "<p>in Python there is no declaration, so those things are synonymous, but in Go you can declare without or without initializing</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37228456,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "aditya@adityamukerjee.net",
            "sender_full_name": "Aditya Mukerjee (he) (SP1'15)",
            "sender_id": 7644,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "silly questions as i teach myself go",
            "submessages": [],
            "timestamp": 1427403345,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/5d46121e9a899e151cfcd0e59aa9e9f8a78989e8?x=x&version=1",
            "client": "desktop app Linux 0.4.4",
            "content": "<p><span class=\"user-mention\" data-user-email=\"jay@jayschwa.net\">@Jay Weisskopf (W'13)</span> have you done much linalg in Go? it's the one thing I find myself still reaching for Python for</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37228480,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "aditya@adityamukerjee.net",
            "sender_full_name": "Aditya Mukerjee (he) (SP1'15)",
            "sender_id": 7644,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "silly questions as i teach myself go",
            "submessages": [],
            "timestamp": 1427403363,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/5d46121e9a899e151cfcd0e59aa9e9f8a78989e8?x=x&version=1",
            "client": "desktop app Linux 0.4.4",
            "content": "<p>I'm curious if it's gotten better or if there are libraries I do'nt know about</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37228525,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "aditya@adityamukerjee.net",
            "sender_full_name": "Aditya Mukerjee (he) (SP1'15)",
            "sender_id": 7644,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "silly questions as i teach myself go",
            "submessages": [],
            "timestamp": 1427403377,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/a179bb8c3fc4ab0975954f57d47fa6c53a8c2dad?x=x&version=2",
            "client": "website",
            "content": "<p>Not much. I was trying to roll my own package because most of the community stuff used slices and interfaces and was too slow. I eventually gave up and switched my project to Julia :-)</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37228557,
            "is_me_message": false,
            "last_edit_timestamp": 1427403416,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "jay@jayschwa.net",
            "sender_full_name": "Jay Weisskopf Petacat (W2'17)",
            "sender_id": 829,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "silly questions as i teach myself go",
            "submessages": [],
            "timestamp": 1427403407,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/5d46121e9a899e151cfcd0e59aa9e9f8a78989e8?x=x&version=1",
            "client": "desktop app Linux 0.4.4",
            "content": "<p>disappointing. :(</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37228673,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "aditya@adityamukerjee.net",
            "sender_full_name": "Aditya Mukerjee (he) (SP1'15)",
            "sender_id": 7644,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "silly questions as i teach myself go",
            "submessages": [],
            "timestamp": 1427403517,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/5d46121e9a899e151cfcd0e59aa9e9f8a78989e8?x=x&version=1",
            "client": "desktop app Linux 0.4.4",
            "content": "<p>not because yo'ure using Julia, but because it means Go is still probably not suited for linalg yet :-/</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37228689,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "aditya@adityamukerjee.net",
            "sender_full_name": "Aditya Mukerjee (he) (SP1'15)",
            "sender_id": 7644,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "silly questions as i teach myself go",
            "submessages": [],
            "timestamp": 1427403533,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/5d46121e9a899e151cfcd0e59aa9e9f8a78989e8?x=x&version=1",
            "client": "desktop app Linux 0.4.4",
            "content": "<p>I had a glimmer of hope for a moment there :)</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37228697,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "aditya@adityamukerjee.net",
            "sender_full_name": "Aditya Mukerjee (he) (SP1'15)",
            "sender_id": 7644,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "silly questions as i teach myself go",
            "submessages": [],
            "timestamp": 1427403543,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/a179bb8c3fc4ab0975954f57d47fa6c53a8c2dad?x=x&version=2",
            "client": "website",
            "content": "<p>It probably is if it's not a graphics project that needs a smooth framerate.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37228809,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "jay@jayschwa.net",
            "sender_full_name": "Jay Weisskopf Petacat (W2'17)",
            "sender_id": 829,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "silly questions as i teach myself go",
            "submessages": [],
            "timestamp": 1427403619,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/5d46121e9a899e151cfcd0e59aa9e9f8a78989e8?x=x&version=1",
            "client": "desktop app Linux 0.4.4",
            "content": "<p>Maybe. I tried to implement sum-product in Go a while bakc and it was kind of messy</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37228966,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "aditya@adityamukerjee.net",
            "sender_full_name": "Aditya Mukerjee (he) (SP1'15)",
            "sender_id": 7644,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "silly questions as i teach myself go",
            "submessages": [],
            "timestamp": 1427403780,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/5d46121e9a899e151cfcd0e59aa9e9f8a78989e8?x=x&version=1",
            "client": "desktop app Linux 0.4.4",
            "content": "<p>though to be fair, it was messy in Python too, just for different reasons</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37228973,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "aditya@adityamukerjee.net",
            "sender_full_name": "Aditya Mukerjee (he) (SP1'15)",
            "sender_id": 7644,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "silly questions as i teach myself go",
            "submessages": [],
            "timestamp": 1427403787,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/0a35beaf5a354dafdf10494c0313e10fffc154fd?x=x&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>okay, capacity seems weird to me. i assume the tutorial will tell me later, but for now, can anyone tell me why, in the following example where c is a slice of b and d is a slice of c, cap(b) = cap(c) != cap(d)?</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37229340,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "maia.mcc@gmail.com",
            "sender_full_name": "Maia McCormick (she) (S2'14)",
            "sender_id": 6175,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "silly questions as i teach myself go",
            "submessages": [],
            "timestamp": 1427404221,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/0a35beaf5a354dafdf10494c0313e10fffc154fd?x=x&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<div class=\"codehilite\"><pre>    <span class=\"n\">a</span> <span class=\"p\">:=</span> <span class=\"nb\">make</span><span class=\"p\">([]</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">)</span>\n    <span class=\"n\">printSlice</span><span class=\"p\">(</span><span class=\"s\">&quot;a&quot;</span><span class=\"p\">,</span> <span class=\"n\">a</span><span class=\"p\">)</span>\n    <span class=\"n\">b</span> <span class=\"p\">:=</span> <span class=\"nb\">make</span><span class=\"p\">([]</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">)</span>\n    <span class=\"n\">printSlice</span><span class=\"p\">(</span><span class=\"s\">&quot;b&quot;</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">)</span>\n    <span class=\"n\">c</span> <span class=\"p\">:=</span> <span class=\"n\">b</span><span class=\"p\">[:</span><span class=\"mi\">2</span><span class=\"p\">]</span>\n    <span class=\"n\">printSlice</span><span class=\"p\">(</span><span class=\"s\">&quot;c&quot;</span><span class=\"p\">,</span> <span class=\"n\">c</span><span class=\"p\">)</span>\n    <span class=\"n\">d</span> <span class=\"p\">:=</span> <span class=\"n\">c</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">:</span><span class=\"mi\">5</span><span class=\"p\">]</span>\n    <span class=\"n\">printSlice</span><span class=\"p\">(</span><span class=\"s\">&quot;d&quot;</span><span class=\"p\">,</span> <span class=\"n\">d</span><span class=\"p\">)</span>\n\n<span class=\"c1\">// OUTPUT</span>\n<span class=\"c1\">// a len=5 cap=5 [0 0 0 0 0]</span>\n<span class=\"c1\">// b len=0 cap=5 []</span>\n<span class=\"c1\">// c len=2 cap=5 [0 0]</span>\n<span class=\"c1\">// d len=3 cap=3 [0 0 0]</span>\n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37229353,
            "is_me_message": false,
            "last_edit_timestamp": 1427404254,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "maia.mcc@gmail.com",
            "sender_full_name": "Maia McCormick (she) (S2'14)",
            "sender_id": 6175,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "silly questions as i teach myself go",
            "submessages": [],
            "timestamp": 1427404238,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/0a35beaf5a354dafdf10494c0313e10fffc154fd?x=x&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>wait, actually, more pressing question--how did I take a slice out of an empty slice and get back a slice with stuff in it?? <img alt=\":fearful:\" class=\"emoji\" src=\"static/third/gemoji/images/emoji/fearful.png\" title=\":fearful:\"> </p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37229426,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "maia.mcc@gmail.com",
            "sender_full_name": "Maia McCormick (she) (S2'14)",
            "sender_id": 6175,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "silly questions as i teach myself go",
            "submessages": [],
            "timestamp": 1427404327,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/0a35beaf5a354dafdf10494c0313e10fffc154fd?x=x&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>what the !@#$%? and then slice a slice starting beyond its own endpoint... WHAT'S GOING ONNNNN??? <img alt=\":question:\" class=\"emoji\" src=\"static/third/gemoji/images/emoji/question.png\" title=\":question:\"> <img alt=\":gopher:\" class=\"emoji\" src=\"https://golang.org/doc/gopher/gopherbw.png\" title=\":gopher:\"> <img alt=\":scream:\" class=\"emoji\" src=\"static/third/gemoji/images/emoji/scream.png\" title=\":scream:\"> </p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37229474,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "maia.mcc@gmail.com",
            "sender_full_name": "Maia McCormick (she) (S2'14)",
            "sender_id": 6175,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "silly questions as i teach myself go",
            "submessages": [],
            "timestamp": 1427404399,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/0a35beaf5a354dafdf10494c0313e10fffc154fd?x=x&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p><span class=\"user-mention\" data-user-email=\"aditya@adityamukerjee.net\">@Aditya Mukerjee (SP1'15)</span>  hellllllp?</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37229604,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "maia.mcc@gmail.com",
            "sender_full_name": "Maia McCormick (she) (S2'14)",
            "sender_id": 6175,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "silly questions as i teach myself go",
            "submessages": [],
            "timestamp": 1427404521,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/0a35beaf5a354dafdf10494c0313e10fffc154fd?x=x&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>/me cries quietly</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37229611,
            "is_me_message": true,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "maia.mcc@gmail.com",
            "sender_full_name": "Maia McCormick (she) (S2'14)",
            "sender_id": 6175,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "silly questions as i teach myself go",
            "submessages": [],
            "timestamp": 1427404531,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/5d46121e9a899e151cfcd0e59aa9e9f8a78989e8?x=x&version=1",
            "client": "desktop app Linux 0.4.4",
            "content": "<p><span class=\"user-mention\" data-user-email=\"maia.mcc@gmail.com\">@Maia McCormick (S'14)</span> can you link to the playground just so I ca nsee what you're seeing?</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37229685,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "aditya@adityamukerjee.net",
            "sender_full_name": "Aditya Mukerjee (he) (SP1'15)",
            "sender_id": 7644,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "silly questions as i teach myself go",
            "submessages": [],
            "timestamp": 1427404592,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/5d46121e9a899e151cfcd0e59aa9e9f8a78989e8?x=x&version=1",
            "client": "desktop app Linux 0.4.4",
            "content": "<p>re: printSlice, etc.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37229694,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "aditya@adityamukerjee.net",
            "sender_full_name": "Aditya Mukerjee (he) (SP1'15)",
            "sender_id": 7644,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "silly questions as i teach myself go",
            "submessages": [],
            "timestamp": 1427404597,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/5d46121e9a899e151cfcd0e59aa9e9f8a78989e8?x=x&version=1",
            "client": "desktop app Linux 0.4.4",
            "content": "<p>makes it easier to debug</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37229701,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "aditya@adityamukerjee.net",
            "sender_full_name": "Aditya Mukerjee (he) (SP1'15)",
            "sender_id": 7644,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "silly questions as i teach myself go",
            "submessages": [],
            "timestamp": 1427404605,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/0a35beaf5a354dafdf10494c0313e10fffc154fd?x=x&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p><a href=\"https://tour.golang.org/moretypes/9\" target=\"_blank\" title=\"https://tour.golang.org/moretypes/9\">https://tour.golang.org/moretypes/9</a></p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37229705,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "maia.mcc@gmail.com",
            "sender_full_name": "Maia McCormick (she) (S2'14)",
            "sender_id": 6175,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "silly questions as i teach myself go",
            "submessages": [],
            "timestamp": 1427404611,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/1380ded36dafac0d6f808b9b7b6c4e85266428a1?x=x&version=1",
            "client": "website",
            "content": "<p>I forget how that works. </p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37229748,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "travis@mcdem.us",
            "sender_full_name": "Travis McDemus (S'13)",
            "sender_id": 2139,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "silly questions as i teach myself go",
            "submessages": [],
            "timestamp": 1427404670,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/1380ded36dafac0d6f808b9b7b6c4e85266428a1?x=x&version=1",
            "client": "website",
            "content": "<p>For \"c\", is it that the slice itself has only 2 elements in it...</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37229794,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "travis@mcdem.us",
            "sender_full_name": "Travis McDemus (S'13)",
            "sender_id": 2139,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "silly questions as i teach myself go",
            "submessages": [],
            "timestamp": 1427404695,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/5d46121e9a899e151cfcd0e59aa9e9f8a78989e8?x=x&version=1",
            "client": "desktop app Linux 0.4.4",
            "content": "<p>so, the first one gives you five 0s becaues you're saying \"make this have length 5</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37229801,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "aditya@adityamukerjee.net",
            "sender_full_name": "Aditya Mukerjee (he) (SP1'15)",
            "sender_id": 7644,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "silly questions as i teach myself go",
            "submessages": [],
            "timestamp": 1427404706,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/1380ded36dafac0d6f808b9b7b6c4e85266428a1?x=x&version=1",
            "client": "website",
            "content": "<p>but the underlying array (e.g. the allocated memory itself) has room for 5 elements?</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37229808,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "travis@mcdem.us",
            "sender_full_name": "Travis McDemus (S'13)",
            "sender_id": 2139,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "silly questions as i teach myself go",
            "submessages": [],
            "timestamp": 1427404717,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/5d46121e9a899e151cfcd0e59aa9e9f8a78989e8?x=x&version=1",
            "client": "desktop app Linux 0.4.4",
            "content": "<p>and it initializes everything to the zero type for the type (in this case... 0)</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37229813,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "aditya@adityamukerjee.net",
            "sender_full_name": "Aditya Mukerjee (he) (SP1'15)",
            "sender_id": 7644,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "silly questions as i teach myself go",
            "submessages": [],
            "timestamp": 1427404726,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/1380ded36dafac0d6f808b9b7b6c4e85266428a1?x=x&version=1",
            "client": "website",
            "content": "<p>e.g. a capacity of 5 has been malloc'ed </p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37229817,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "travis@mcdem.us",
            "sender_full_name": "Travis McDemus (S'13)",
            "sender_id": 2139,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "silly questions as i teach myself go",
            "submessages": [],
            "timestamp": 1427404731,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/5d46121e9a899e151cfcd0e59aa9e9f8a78989e8?x=x&version=1",
            "client": "desktop app Linux 0.4.4",
            "content": "<p>in the second, you're saying \"make this have length 0, but I may decide to reslice this to be as big as 5\"</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37229835,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "aditya@adityamukerjee.net",
            "sender_full_name": "Aditya Mukerjee (he) (SP1'15)",
            "sender_id": 7644,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "silly questions as i teach myself go",
            "submessages": [],
            "timestamp": 1427404754,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/5d46121e9a899e151cfcd0e59aa9e9f8a78989e8?x=x&version=1",
            "client": "desktop app Linux 0.4.4",
            "content": "<p>so it makes a slice that has length 5 (with everything set to the zero value for the type), but the value it gives you can only access the first 0 elements</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37229861,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "aditya@adityamukerjee.net",
            "sender_full_name": "Aditya Mukerjee (he) (SP1'15)",
            "sender_id": 7644,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "silly questions as i teach myself go",
            "submessages": [],
            "timestamp": 1427404795,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/5d46121e9a899e151cfcd0e59aa9e9f8a78989e8?x=x&version=1",
            "client": "desktop app Linux 0.4.4",
            "content": "<p>ie, ithe value it gives you looks empty</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37229906,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "aditya@adityamukerjee.net",
            "sender_full_name": "Aditya Mukerjee (he) (SP1'15)",
            "sender_id": 7644,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "silly questions as i teach myself go",
            "submessages": [],
            "timestamp": 1427404811,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/5d46121e9a899e151cfcd0e59aa9e9f8a78989e8?x=x&version=1",
            "client": "desktop app Linux 0.4.4",
            "content": "<p>however, because it has capacity 5, that means that you can reslice it to get access to those othre values</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37229929,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "aditya@adityamukerjee.net",
            "sender_full_name": "Aditya Mukerjee (he) (SP1'15)",
            "sender_id": 7644,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "silly questions as i teach myself go",
            "submessages": [],
            "timestamp": 1427404842,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/5d46121e9a899e151cfcd0e59aa9e9f8a78989e8?x=x&version=1",
            "client": "desktop app Linux 0.4.4",
            "content": "<p>eg:</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37229931,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "aditya@adityamukerjee.net",
            "sender_full_name": "Aditya Mukerjee (he) (SP1'15)",
            "sender_id": 7644,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "silly questions as i teach myself go",
            "submessages": [],
            "timestamp": 1427404843,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/1380ded36dafac0d6f808b9b7b6c4e85266428a1?x=x&version=1",
            "client": "website",
            "content": "<p>Does \"capacity\" equate to \"allocated memory\" ? </p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37230041,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "travis@mcdem.us",
            "sender_full_name": "Travis McDemus (S'13)",
            "sender_id": 2139,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "silly questions as i teach myself go",
            "submessages": [],
            "timestamp": 1427404971,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/1380ded36dafac0d6f808b9b7b6c4e85266428a1?x=x&version=1",
            "client": "website",
            "content": "<p>Im mean as in malloc'ed RAM. </p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37230053,
            "is_me_message": false,
            "last_edit_timestamp": 1427405002,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "travis@mcdem.us",
            "sender_full_name": "Travis McDemus (S'13)",
            "sender_id": 2139,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "silly questions as i teach myself go",
            "submessages": [],
            "timestamp": 1427404989,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/a179bb8c3fc4ab0975954f57d47fa6c53a8c2dad?x=x&version=2",
            "client": "website",
            "content": "<p>More or less. It's the size of the backing array.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37230056,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "jay@jayschwa.net",
            "sender_full_name": "Jay Weisskopf Petacat (W2'17)",
            "sender_id": 829,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "silly questions as i teach myself go",
            "submessages": [],
            "timestamp": 1427404995,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/a179bb8c3fc4ab0975954f57d47fa6c53a8c2dad?x=x&version=2",
            "client": "website",
            "content": "<p>More specifically, the size from the start of the slice to the end of the backing array.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37230075,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "jay@jayschwa.net",
            "sender_full_name": "Jay Weisskopf Petacat (W2'17)",
            "sender_id": 829,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "silly questions as i teach myself go",
            "submessages": [],
            "timestamp": 1427405022,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/a179bb8c3fc4ab0975954f57d47fa6c53a8c2dad?x=x&version=2",
            "client": "website",
            "content": "<p>Which is why <code>d</code> has a smaller capacity - the starting position has been moved up.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37230119,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "jay@jayschwa.net",
            "sender_full_name": "Jay Weisskopf Petacat (W2'17)",
            "sender_id": 829,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "silly questions as i teach myself go",
            "submessages": [],
            "timestamp": 1427405049,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/5d46121e9a899e151cfcd0e59aa9e9f8a78989e8?x=x&version=1",
            "client": "desktop app Linux 0.4.4",
            "content": "<p>(trying to write an example - h/o)</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37230120,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "aditya@adityamukerjee.net",
            "sender_full_name": "Aditya Mukerjee (he) (SP1'15)",
            "sender_id": 7644,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "silly questions as i teach myself go",
            "submessages": [],
            "timestamp": 1427405049,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/1380ded36dafac0d6f808b9b7b6c4e85266428a1?x=x&version=1",
            "client": "website",
            "content": "<p>So if I grok that correctly, capacity is underlying RAM for the array (which is mostly hidden from me as the programmer) underneath the slice (which I use more as the programmer). </p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37230130,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "travis@mcdem.us",
            "sender_full_name": "Travis McDemus (S'13)",
            "sender_id": 2139,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "silly questions as i teach myself go",
            "submessages": [],
            "timestamp": 1427405061,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/0a35beaf5a354dafdf10494c0313e10fffc154fd?x=x&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>ohhhh so if you slice the slice, you're actually slicing the backing array, not the slice itself??</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37230143,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "maia.mcc@gmail.com",
            "sender_full_name": "Maia McCormick (she) (S2'14)",
            "sender_id": 6175,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "silly questions as i teach myself go",
            "submessages": [],
            "timestamp": 1427405082,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/1380ded36dafac0d6f808b9b7b6c4e85266428a1?x=x&version=1",
            "client": "website",
            "content": "<p>And the length / size refers to the how big the slice \"says\" it is, not the capacity of the array (RAM) underneath the hood of that slice.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37230152,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "travis@mcdem.us",
            "sender_full_name": "Travis McDemus (S'13)",
            "sender_id": 2139,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "silly questions as i teach myself go",
            "submessages": [],
            "timestamp": 1427405104,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/1380ded36dafac0d6f808b9b7b6c4e85266428a1?x=x&version=1",
            "client": "website",
            "content": "<p>Yeah?</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37230157,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "travis@mcdem.us",
            "sender_full_name": "Travis McDemus (S'13)",
            "sender_id": 2139,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "silly questions as i teach myself go",
            "submessages": [],
            "timestamp": 1427405108,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/5d46121e9a899e151cfcd0e59aa9e9f8a78989e8?x=x&version=1",
            "client": "desktop app Linux 0.4.4",
            "content": "<p><span class=\"user-mention\" data-user-email=\"maia.mcc@gmail.com\">@Maia McCormick (S'14)</span> <a href=\"http://play.golang.org/p/XkvvNTtamv\" target=\"_blank\" title=\"http://play.golang.org/p/XkvvNTtamv\">http://play.golang.org/p/XkvvNTtamv</a></p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37230158,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "aditya@adityamukerjee.net",
            "sender_full_name": "Aditya Mukerjee (he) (SP1'15)",
            "sender_id": 7644,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "silly questions as i teach myself go",
            "submessages": [],
            "timestamp": 1427405112,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/a179bb8c3fc4ab0975954f57d47fa6c53a8c2dad?x=x&version=2",
            "client": "website",
            "content": "<p>The slice data structure itself is a thin wrapper over the backing array. When you slice something, the underlying array doesn't change.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37230163,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "jay@jayschwa.net",
            "sender_full_name": "Jay Weisskopf Petacat (W2'17)",
            "sender_id": 829,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "silly questions as i teach myself go",
            "submessages": [],
            "timestamp": 1427405118,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/1380ded36dafac0d6f808b9b7b6c4e85266428a1?x=x&version=1",
            "client": "website",
            "content": "<p>Also, sorry if I'm sort of thread-jacking <span class=\"user-mention\" data-user-email=\"maia.mcc@gmail.com\">@Maia McCormick (S'14)</span> , this stuff is interesting and you're asking cool questions and I'm not sure I totally get some of the details of this stuff.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37230271,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "travis@mcdem.us",
            "sender_full_name": "Travis McDemus (S'13)",
            "sender_id": 2139,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "silly questions as i teach myself go",
            "submessages": [],
            "timestamp": 1427405176,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/0a35beaf5a354dafdf10494c0313e10fffc154fd?x=x&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>nah <span class=\"user-mention\" data-user-email=\"travis@mcdem.us\">@Travis McDemus (S'13)</span> it's totally fine!</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37230308,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "maia.mcc@gmail.com",
            "sender_full_name": "Maia McCormick (she) (S2'14)",
            "sender_id": 6175,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "silly questions as i teach myself go",
            "submessages": [],
            "timestamp": 1427405204,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/1380ded36dafac0d6f808b9b7b6c4e85266428a1?x=x&version=1",
            "client": "website",
            "content": "<p>cool B-) </p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37230324,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "travis@mcdem.us",
            "sender_full_name": "Travis McDemus (S'13)",
            "sender_id": 2139,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "silly questions as i teach myself go",
            "submessages": [],
            "timestamp": 1427405219,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/1380ded36dafac0d6f808b9b7b6c4e85266428a1?x=x&version=1",
            "client": "website",
            "content": "<p>I gotta go (YES PUNS YES) though, this is all pretty neat!</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37230343,
            "is_me_message": false,
            "last_edit_timestamp": 1427405255,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "travis@mcdem.us",
            "sender_full_name": "Travis McDemus (S'13)",
            "sender_id": 2139,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "silly questions as i teach myself go",
            "submessages": [],
            "timestamp": 1427405240,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/5d46121e9a899e151cfcd0e59aa9e9f8a78989e8?x=x&version=1",
            "client": "desktop app Linux 0.4.4",
            "content": "<p><span class=\"user-mention\" data-user-email=\"maia.mcc@gmail.com\">@Maia McCormick (S'14)</span> does that playground example help?</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37230552,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "aditya@adityamukerjee.net",
            "sender_full_name": "Aditya Mukerjee (he) (SP1'15)",
            "sender_id": 7644,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "silly questions as i teach myself go",
            "submessages": [],
            "timestamp": 1427405473,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/0a35beaf5a354dafdf10494c0313e10fffc154fd?x=x&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p><span class=\"user-mention\" data-user-email=\"aditya@adityamukerjee.net\">@Aditya Mukerjee (SP1'15)</span> yes, i think so!</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37230575,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "maia.mcc@gmail.com",
            "sender_full_name": "Maia McCormick (she) (S2'14)",
            "sender_id": 6175,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "silly questions as i teach myself go",
            "submessages": [],
            "timestamp": 1427405511,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/0a35beaf5a354dafdf10494c0313e10fffc154fd?x=x&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>i think i have another question, but let me puzzle this out for a sec</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37230576,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "maia.mcc@gmail.com",
            "sender_full_name": "Maia McCormick (she) (S2'14)",
            "sender_id": 6175,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "silly questions as i teach myself go",
            "submessages": [],
            "timestamp": 1427405516,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/0a35beaf5a354dafdf10494c0313e10fffc154fd?x=x&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>hmm okay, so slices are subsections of an underlying array</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37230676,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "maia.mcc@gmail.com",
            "sender_full_name": "Maia McCormick (she) (S2'14)",
            "sender_id": 6175,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "silly questions as i teach myself go",
            "submessages": [],
            "timestamp": 1427405637,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/0a35beaf5a354dafdf10494c0313e10fffc154fd?x=x&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>so when you slice a slice, you're slicing the backing array</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37230715,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "maia.mcc@gmail.com",
            "sender_full_name": "Maia McCormick (she) (S2'14)",
            "sender_id": 6175,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "silly questions as i teach myself go",
            "submessages": [],
            "timestamp": 1427405649,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/0a35beaf5a354dafdf10494c0313e10fffc154fd?x=x&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>which means that if you try to slice a slice with indexes outside that slice but inside the backing array, you'll still get stuff! yeah?</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37230731,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "maia.mcc@gmail.com",
            "sender_full_name": "Maia McCormick (she) (S2'14)",
            "sender_id": 6175,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "silly questions as i teach myself go",
            "submessages": [],
            "timestamp": 1427405672,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/0a35beaf5a354dafdf10494c0313e10fffc154fd?x=x&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>and in your playground example you modify the slice d but not its backing array. (or does that modification create a new backing array somewhere else that d is now slicing from?) regardless, it doesn't change the backing array or any slices of the backing array</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37230757,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "maia.mcc@gmail.com",
            "sender_full_name": "Maia McCormick (she) (S2'14)",
            "sender_id": 6175,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "silly questions as i teach myself go",
            "submessages": [],
            "timestamp": 1427405744,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/0a35beaf5a354dafdf10494c0313e10fffc154fd?x=x&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>(though it DOES change any slices of d)</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37230828,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "maia.mcc@gmail.com",
            "sender_full_name": "Maia McCormick (she) (S2'14)",
            "sender_id": 6175,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "silly questions as i teach myself go",
            "submessages": [],
            "timestamp": 1427405780,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/0a35beaf5a354dafdf10494c0313e10fffc154fd?x=x&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>i think my only remaining question is: can you explain when/how/why capacity changes? as far as I can tell, it doesn't change when you slice off the back end of an array/slice, only when you slice off the front end (e.g. <code>foo[:4] doesn't change capacity but</code>foo[1:5]` decreases capacity by one) -- but why?</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37230867,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "maia.mcc@gmail.com",
            "sender_full_name": "Maia McCormick (she) (S2'14)",
            "sender_id": 6175,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "silly questions as i teach myself go",
            "submessages": [],
            "timestamp": 1427405874,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/a179bb8c3fc4ab0975954f57d47fa6c53a8c2dad?x=x&version=2",
            "client": "website",
            "content": "<p>The backing array stays the same. New space is generally only allocated if you see a call to <code>make</code>. <code>append</code> *may* also create a new backing array if the capacity of the current backing array is not large enough.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37230869,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "jay@jayschwa.net",
            "sender_full_name": "Jay Weisskopf Petacat (W2'17)",
            "sender_id": 829,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "silly questions as i teach myself go",
            "submessages": [],
            "timestamp": 1427405879,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/f6bd929465d6d225def8062d5a9d3f3f?d=identicon&version=1",
            "client": "website",
            "content": "<p>Not sure if this is helpful to anyone else, but this became clearer to me when I started thinking of slices as just a pointer that carries a length and capacity.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37230916,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "danluu@gmail.com",
            "sender_full_name": "Dan Luu (W'13)",
            "sender_id": 820,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "silly questions as i teach myself go",
            "submessages": [],
            "timestamp": 1427405909,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/f6bd929465d6d225def8062d5a9d3f3f?d=identicon&version=1",
            "client": "website",
            "content": "<p>If you think of it as pointing to the first element, [1:X] moves the pointer forward by one. Since the end of the array is still in the same place, you lose 1 capacity.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37230928,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "danluu@gmail.com",
            "sender_full_name": "Dan Luu (W'13)",
            "sender_id": 820,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "silly questions as i teach myself go",
            "submessages": [],
            "timestamp": 1427405945,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/0a35beaf5a354dafdf10494c0313e10fffc154fd?x=x&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p><span class=\"user-mention\" data-user-email=\"jay@jayschwa.net\">@Jay Weisskopf (W'13)</span> , i'm asking about what happens in ln. 24 of <a href=\"http://play.golang.org/p/XkvvNTtamv\" target=\"_blank\" title=\"http://play.golang.org/p/XkvvNTtamv\">http://play.golang.org/p/XkvvNTtamv</a></p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37230929,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "maia.mcc@gmail.com",
            "sender_full_name": "Maia McCormick (she) (S2'14)",
            "sender_id": 6175,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "silly questions as i teach myself go",
            "submessages": [],
            "timestamp": 1427405946,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/a179bb8c3fc4ab0975954f57d47fa6c53a8c2dad?x=x&version=2",
            "client": "website",
            "content": "<p>Yeah Dan, I think it looks lomething like this:</p>\n<div class=\"codehilite\"><pre>type Slice struct {\n    pointer to memory\n    length int\n    capacity int\n}\n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37230936,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "jay@jayschwa.net",
            "sender_full_name": "Jay Weisskopf Petacat (W2'17)",
            "sender_id": 829,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "silly questions as i teach myself go",
            "submessages": [],
            "timestamp": 1427405963,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/0a35beaf5a354dafdf10494c0313e10fffc154fd?x=x&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>aah, because you can't access any of the backing array BEHIND your current slice, only in front of it?</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37230945,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "maia.mcc@gmail.com",
            "sender_full_name": "Maia McCormick (she) (S2'14)",
            "sender_id": 6175,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "silly questions as i teach myself go",
            "submessages": [],
            "timestamp": 1427405982,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/0a35beaf5a354dafdf10494c0313e10fffc154fd?x=x&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>(because you can't use negative indeces, and when you slice your slice the farthest back you can start is index 0 of your current slice)</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37230987,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "maia.mcc@gmail.com",
            "sender_full_name": "Maia McCormick (she) (S2'14)",
            "sender_id": 6175,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "silly questions as i teach myself go",
            "submessages": [],
            "timestamp": 1427406013,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/f6bd929465d6d225def8062d5a9d3f3f?d=identicon&version=1",
            "client": "website",
            "content": "<p>Yeah, or at least that's how I think of it.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37230996,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "danluu@gmail.com",
            "sender_full_name": "Dan Luu (W'13)",
            "sender_id": 820,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "silly questions as i teach myself go",
            "submessages": [],
            "timestamp": 1427406029,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/0a35beaf5a354dafdf10494c0313e10fffc154fd?x=x&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p><span class=\"user-mention\" data-user-email=\"aditya@adityamukerjee.net\">@Aditya Mukerjee (SP1'15)</span> i understand everything in your playground example except ln 24 --&gt;</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37231292,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "maia.mcc@gmail.com",
            "sender_full_name": "Maia McCormick (she) (S2'14)",
            "sender_id": 6175,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "silly questions as i teach myself go",
            "submessages": [],
            "timestamp": 1427406467,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/0a35beaf5a354dafdf10494c0313e10fffc154fd?x=x&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>slash-what happens to the backing array when you change a slice (either by appending or by changing values)</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37231350,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "maia.mcc@gmail.com",
            "sender_full_name": "Maia McCormick (she) (S2'14)",
            "sender_id": 6175,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "silly questions as i teach myself go",
            "submessages": [],
            "timestamp": 1427406521,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/0a35beaf5a354dafdf10494c0313e10fffc154fd?x=x&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>(but also, am I right in thinking that in a practial sense i'll never really need to worry about capacity, cuz it's auto-handled when i append to arrays?)</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37231361,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "maia.mcc@gmail.com",
            "sender_full_name": "Maia McCormick (she) (S2'14)",
            "sender_id": 6175,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "silly questions as i teach myself go",
            "submessages": [],
            "timestamp": 1427406545,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/5d46121e9a899e151cfcd0e59aa9e9f8a78989e8?x=x&version=1",
            "client": "desktop app Linux 0.4.4",
            "content": "<p>If you use append, you're making a new slice and throwing away the old one</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37231380,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "aditya@adityamukerjee.net",
            "sender_full_name": "Aditya Mukerjee (he) (SP1'15)",
            "sender_id": 7644,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "silly questions as i teach myself go",
            "submessages": [],
            "timestamp": 1427406573,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/5d46121e9a899e151cfcd0e59aa9e9f8a78989e8?x=x&version=1",
            "client": "desktop app Linux 0.4.4",
            "content": "<p>you won't \"never\" need to worry about capcity, but you'll only care about it if./when append is not performing well</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37231394,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "aditya@adityamukerjee.net",
            "sender_full_name": "Aditya Mukerjee (he) (SP1'15)",
            "sender_id": 7644,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "silly questions as i teach myself go",
            "submessages": [],
            "timestamp": 1427406588,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/5d46121e9a899e151cfcd0e59aa9e9f8a78989e8?x=x&version=1",
            "client": "desktop app Linux 0.4.4",
            "content": "<p>which is to say, ignore it unless your program is running super slowly :)</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37231400,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "aditya@adityamukerjee.net",
            "sender_full_name": "Aditya Mukerjee (he) (SP1'15)",
            "sender_id": 7644,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "silly questions as i teach myself go",
            "submessages": [],
            "timestamp": 1427406598,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/a179bb8c3fc4ab0975954f57d47fa6c53a8c2dad?x=x&version=2",
            "client": "website",
            "content": "<p>After 24, I think it looks like:</p>\n<div class=\"codehilite\"><pre>| 0 | 0 | 5 | 0 | 0 |\n|-- c --|\n        |---- d ----|\n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37231455,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "jay@jayschwa.net",
            "sender_full_name": "Jay Weisskopf Petacat (W2'17)",
            "sender_id": 829,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "silly questions as i teach myself go",
            "submessages": [],
            "timestamp": 1427406641,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/5d46121e9a899e151cfcd0e59aa9e9f8a78989e8?x=x&version=1",
            "client": "desktop app Linux 0.4.4",
            "content": "<p><span class=\"user-mention\" data-user-email=\"jay@jayschwa.net\">@Jay Weisskopf (W'13)</span> yes... except it's not modfying the underlying array,so changes in d don't get reflected in c</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37231476,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "aditya@adityamukerjee.net",
            "sender_full_name": "Aditya Mukerjee (he) (SP1'15)",
            "sender_id": 7644,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "silly questions as i teach myself go",
            "submessages": [],
            "timestamp": 1427406682,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/5d46121e9a899e151cfcd0e59aa9e9f8a78989e8?x=x&version=1",
            "client": "desktop app Linux 0.4.4",
            "content": "<p>unless you're getting a different result than I am?</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37231485,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "aditya@adityamukerjee.net",
            "sender_full_name": "Aditya Mukerjee (he) (SP1'15)",
            "sender_id": 7644,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "silly questions as i teach myself go",
            "submessages": [],
            "timestamp": 1427406705,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/a179bb8c3fc4ab0975954f57d47fa6c53a8c2dad?x=x&version=2",
            "client": "website",
            "content": "<p>It does modify the backing array, it's just that <code>c</code> doesn't overlap with <code>d</code>. <a href=\"https://play.golang.org/p/14pbhj0nce\" target=\"_blank\" title=\"https://play.golang.org/p/14pbhj0nce\">https://play.golang.org/p/14pbhj0nce</a></p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37231589,
            "is_me_message": false,
            "last_edit_timestamp": 1427407098,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "jay@jayschwa.net",
            "sender_full_name": "Jay Weisskopf Petacat (W2'17)",
            "sender_id": 829,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "silly questions as i teach myself go",
            "submessages": [],
            "timestamp": 1427406826,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/a179bb8c3fc4ab0975954f57d47fa6c53a8c2dad?x=x&version=2",
            "client": "website",
            "content": "<div class=\"codehilite\"><pre>a len=5 cap=5 [0 0 0 0 0]\nb len=0 cap=5 []\nc len=2 cap=5 [0 0]\n0\nd len=3 cap=3 [0 0 0]\nc len=2 cap=5 [0 0]\nd len=3 cap=3 [5 0 0]\nbacking array len=5 cap=5 [0 0 5 0 0]\n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37231595,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "jay@jayschwa.net",
            "sender_full_name": "Jay Weisskopf Petacat (W2'17)",
            "sender_id": 829,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "silly questions as i teach myself go",
            "submessages": [],
            "timestamp": 1427406839,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/5d46121e9a899e151cfcd0e59aa9e9f8a78989e8?x=x&version=1",
            "client": "desktop app Linux 0.4.4",
            "content": "<p><span class=\"user-mention\" data-user-email=\"jay@jayschwa.net\">@Jay Weisskopf (W'13)</span> oh crap you're right, I go tmy indices wrong :p</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37231808,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "aditya@adityamukerjee.net",
            "sender_full_name": "Aditya Mukerjee (he) (SP1'15)",
            "sender_id": 7644,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "silly questions as i teach myself go",
            "submessages": [],
            "timestamp": 1427407157,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/5d46121e9a899e151cfcd0e59aa9e9f8a78989e8?x=x&version=1",
            "client": "desktop app Linux 0.4.4",
            "content": "<ul>\n<li>:-X</li>\n</ul>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37231811,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "aditya@adityamukerjee.net",
            "sender_full_name": "Aditya Mukerjee (he) (SP1'15)",
            "sender_id": 7644,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "silly questions as i teach myself go",
            "submessages": [],
            "timestamp": 1427407160,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/0a35beaf5a354dafdf10494c0313e10fffc154fd?x=x&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<div class=\"codehilite\"><pre><span class=\"n\">d</span> <span class=\"p\">:=</span> <span class=\"n\">c</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">:</span><span class=\"mi\">5</span><span class=\"p\">]</span>\n<span class=\"n\">printSlice</span><span class=\"p\">(</span><span class=\"s\">&quot;d&quot;</span><span class=\"p\">,</span> <span class=\"n\">d</span><span class=\"p\">)</span>\n<span class=\"c1\">// d len=4 cap=4 [0 0 0 0]</span>\n\n<span class=\"n\">d</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"p\">=</span> <span class=\"mi\">5</span>\n<span class=\"n\">printSlice</span><span class=\"p\">(</span><span class=\"s\">&quot;c&quot;</span><span class=\"p\">,</span> <span class=\"n\">c</span><span class=\"p\">)</span>\n<span class=\"c1\">// c len=2 cap=5 [0 5]</span>\n<span class=\"n\">printSlice</span><span class=\"p\">(</span><span class=\"s\">&quot;d&quot;</span><span class=\"p\">,</span> <span class=\"n\">d</span><span class=\"p\">)</span>\n<span class=\"c1\">// d len=4 cap=4 [5 0 0 0]</span>\n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37234109,
            "is_me_message": false,
            "last_edit_timestamp": 1427410298,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "maia.mcc@gmail.com",
            "sender_full_name": "Maia McCormick (she) (S2'14)",
            "sender_id": 6175,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "silly questions as i teach myself go",
            "submessages": [],
            "timestamp": 1427410233,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/0a35beaf5a354dafdf10494c0313e10fffc154fd?x=x&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>so the consensus is that it DOES modify the underlying array when you modify a slice and/or append to a slice?</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37234131,
            "is_me_message": false,
            "last_edit_timestamp": 1427410332,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "maia.mcc@gmail.com",
            "sender_full_name": "Maia McCormick (she) (S2'14)",
            "sender_id": 6175,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "silly questions as i teach myself go",
            "submessages": [],
            "timestamp": 1427410313,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/a179bb8c3fc4ab0975954f57d47fa6c53a8c2dad?x=x&version=2",
            "client": "website",
            "content": "<p>It modifies the backing array when you do <code>s[i] = something</code>. That isn't necessarily the case with <code>append</code>. If the length is less than the capacity, <code>append</code> will increase the length by 1 and put the new element at the end. If the length has reached capacity, it will allocate a new, larger backing array and copy the existing data there.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37234444,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "jay@jayschwa.net",
            "sender_full_name": "Jay Weisskopf Petacat (W2'17)",
            "sender_id": 829,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "silly questions as i teach myself go",
            "submessages": [],
            "timestamp": 1427410720,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/a179bb8c3fc4ab0975954f57d47fa6c53a8c2dad?x=x&version=2",
            "client": "website",
            "content": "<p>So if you do something like:</p>\n<div class=\"codehilite\"><pre>s := make(int, 0, 3)\nfor i := 0; i &lt; X; i++ {\n    s = append(s, i)\n}\n</pre></div>\n\n\n<p><code>s</code> will have the same backing array at the end if <code>X = 3</code>. But if <code>X</code> is any larger, it will allocate a new backing array on iteration 4.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37234551,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "jay@jayschwa.net",
            "sender_full_name": "Jay Weisskopf Petacat (W2'17)",
            "sender_id": 829,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "silly questions as i teach myself go",
            "submessages": [],
            "timestamp": 1427410844,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/a179bb8c3fc4ab0975954f57d47fa6c53a8c2dad?x=x&version=2",
            "client": "website",
            "content": "<p>Actually, I should qualify this with \"I think\". I'm pretty sure this is how it works, but not 100% positive.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37234567,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "jay@jayschwa.net",
            "sender_full_name": "Jay Weisskopf Petacat (W2'17)",
            "sender_id": 829,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "silly questions as i teach myself go",
            "submessages": [],
            "timestamp": 1427410884,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/0a35beaf5a354dafdf10494c0313e10fffc154fd?x=x&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>right, but the backing array will change as you add stuf onto the slice, right <span class=\"user-mention\" data-user-email=\"jay@jayschwa.net\">@Jay Weisskopf (W'13)</span> ? (Meaning it'll be at the same place in memory but look different?)</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37234568,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "maia.mcc@gmail.com",
            "sender_full_name": "Maia McCormick (she) (S2'14)",
            "sender_id": 6175,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "silly questions as i teach myself go",
            "submessages": [],
            "timestamp": 1427410888,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/a179bb8c3fc4ab0975954f57d47fa6c53a8c2dad?x=x&version=2",
            "client": "website",
            "content": "<p>Yep.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37234615,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "jay@jayschwa.net",
            "sender_full_name": "Jay Weisskopf Petacat (W2'17)",
            "sender_id": 829,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "silly questions as i teach myself go",
            "submessages": [],
            "timestamp": 1427410938,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/0a35beaf5a354dafdf10494c0313e10fffc154fd?x=x&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>uhh, related question: am i right in guessing that pointers for the basic types (int, string, etc.) work different than other pointers (to structs, slices/lists, etc.)? when i print my pointer <code>p_int</code> that points to an int, i get a location in memory;  when i print my pointer <code>p_slice</code> that points to a slice, I get <code>&amp;[1, 2, 3]</code> (i.e. contents of the slice).</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37234692,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "maia.mcc@gmail.com",
            "sender_full_name": "Maia McCormick (she) (S2'14)",
            "sender_id": 6175,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "silly questions as i teach myself go",
            "submessages": [],
            "timestamp": 1427411084,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/0a35beaf5a354dafdf10494c0313e10fffc154fd?x=x&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>so a) is that correct ( the divide here is \"pointers to basic types\" vs. \"pointers to everything else\")?</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37234718,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "maia.mcc@gmail.com",
            "sender_full_name": "Maia McCormick (she) (S2'14)",
            "sender_id": 6175,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "silly questions as i teach myself go",
            "submessages": [],
            "timestamp": 1427411145,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/0a35beaf5a354dafdf10494c0313e10fffc154fd?x=x&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>and a.5) in \"pointers to everything else,\" you don't need to use the <code>*</code> syntax to access the pointer's underlying value, it's already right there (err, \"The indirection through the pointer is transparent\"?)</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37234767,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "maia.mcc@gmail.com",
            "sender_full_name": "Maia McCormick (she) (S2'14)",
            "sender_id": 6175,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "silly questions as i teach myself go",
            "submessages": [],
            "timestamp": 1427411195,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/0a35beaf5a354dafdf10494c0313e10fffc154fd?x=x&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>but also b) how can I find the location of an object in memory (if i want to, say, check that an array is the same array in memory that i was before I did x thing to it)?</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37234782,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "maia.mcc@gmail.com",
            "sender_full_name": "Maia McCormick (she) (S2'14)",
            "sender_id": 6175,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "silly questions as i teach myself go",
            "submessages": [],
            "timestamp": 1427411231,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/0a35beaf5a354dafdf10494c0313e10fffc154fd?x=x&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>and b.5) given a slice, is there a way to find out what backing array it's sliced from?</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37234921,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "maia.mcc@gmail.com",
            "sender_full_name": "Maia McCormick (she) (S2'14)",
            "sender_id": 6175,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "silly questions as i teach myself go",
            "submessages": [],
            "timestamp": 1427411449,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/a179bb8c3fc4ab0975954f57d47fa6c53a8c2dad?x=x&version=2",
            "client": "website",
            "content": "<p><a href=\"https://play.golang.org/p/eY16lpqaQe\" target=\"_blank\" title=\"https://play.golang.org/p/eY16lpqaQe\">https://play.golang.org/p/eY16lpqaQe</a> demonstrates <code>append</code> and when it starts a new backing array.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37234925,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "jay@jayschwa.net",
            "sender_full_name": "Jay Weisskopf Petacat (W2'17)",
            "sender_id": 829,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "silly questions as i teach myself go",
            "submessages": [],
            "timestamp": 1427411470,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/a179bb8c3fc4ab0975954f57d47fa6c53a8c2dad?x=x&version=2",
            "client": "website",
            "content": "<p>I don't think the pointers are fundamentally different, the <code>fmt</code> methods just output them differently based on type.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37234987,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "jay@jayschwa.net",
            "sender_full_name": "Jay Weisskopf Petacat (W2'17)",
            "sender_id": 829,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "silly questions as i teach myself go",
            "submessages": [],
            "timestamp": 1427411567,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/a179bb8c3fc4ab0975954f57d47fa6c53a8c2dad?x=x&version=2",
            "client": "website",
            "content": "<p>I found <a href=\"https://godoc.org/reflect#SliceHeader\" target=\"_blank\" title=\"https://godoc.org/reflect#SliceHeader\">https://godoc.org/reflect#SliceHeader</a>, but I don't immediately see any way to get to it.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37235071,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "jay@jayschwa.net",
            "sender_full_name": "Jay Weisskopf Petacat (W2'17)",
            "sender_id": 829,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "silly questions as i teach myself go",
            "submessages": [],
            "timestamp": 1427411707,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/a179bb8c3fc4ab0975954f57d47fa6c53a8c2dad?x=x&version=2",
            "client": "website",
            "content": "<p>Generally speaking, you should never create/use pointers to channels, interfaces, maps, or slices.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37235125,
            "is_me_message": false,
            "last_edit_timestamp": 1427412087,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "jay@jayschwa.net",
            "sender_full_name": "Jay Weisskopf Petacat (W2'17)",
            "sender_id": 829,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "silly questions as i teach myself go",
            "submessages": [],
            "timestamp": 1427411771,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/a179bb8c3fc4ab0975954f57d47fa6c53a8c2dad?x=x&version=2",
            "client": "website",
            "content": "<p>I basically never use pointers unless it's for a big struct and I suspect a pointer will perform significantly better than pass-by-value.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37235154,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "jay@jayschwa.net",
            "sender_full_name": "Jay Weisskopf Petacat (W2'17)",
            "sender_id": 829,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "silly questions as i teach myself go",
            "submessages": [],
            "timestamp": 1427411871,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/f6bd929465d6d225def8062d5a9d3f3f?d=identicon&version=1",
            "client": "website",
            "content": "<p>What are people's recommendations for easy/quick text input and manipulation? I've tried solving some google code jam problems and my solutions tend to be about twice as long in go as they would be in C++. I normally don't care about verbosity at all, but it actually matters for silly algorithms competitions.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37289364,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "danluu@gmail.com",
            "sender_full_name": "Dan Luu (W'13)",
            "sender_id": 820,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "silly questions as i teach myself go",
            "submessages": [],
            "timestamp": 1427509413,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/f6bd929465d6d225def8062d5a9d3f3f?d=identicon&version=1",
            "client": "website",
            "content": "<p>A pretty typical input is something like</p>\n<div class=\"codehilite\"><pre>2\n5\n3 2\n09:00 12:00\n10:00 13:00\n11:00 12:30\n12:02 15:00\n09:00 10:30\n2\n2 0\n09:00 09:01\n12:00 12:02\n</pre></div>\n\n\n<p>(<a href=\"https://code.google.com/codejam/contest/32013/dashboard#s=p1\" target=\"_blank\" title=\"https://code.google.com/codejam/contest/32013/dashboard#s=p1\">from this problem</a>)</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37289401,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "danluu@gmail.com",
            "sender_full_name": "Dan Luu (W'13)",
            "sender_id": 820,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "silly questions as i teach myself go",
            "submessages": [],
            "timestamp": 1427509457,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/f6bd929465d6d225def8062d5a9d3f3f?d=identicon&version=1",
            "client": "website",
            "content": "<p>You've got a number which is how many test cases you're provided. Then for each test case, there are some other numbers that give you some information about the test case followed by some data.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37289408,
            "is_me_message": false,
            "last_edit_timestamp": 1427513892,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "danluu@gmail.com",
            "sender_full_name": "Dan Luu (W'13)",
            "sender_id": 820,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "silly questions as i teach myself go",
            "submessages": [],
            "timestamp": 1427509485,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/f6bd929465d6d225def8062d5a9d3f3f?d=identicon&version=1",
            "client": "website",
            "content": "<p>Without writing my own libraries, the best thing I've found so far is using fmt.Scan or fmt.Scanf, which is ok, but I'm wondering if there's something better. <a href=\"https://github.com/danluu/dump/blob/master/gcj/2008-qual/B-timetable.go\" target=\"_blank\" title=\"https://github.com/danluu/dump/blob/master/gcj/2008-qual/B-timetable.go\">Here's an example of what that ends up looking like</a>.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37289457,
            "is_me_message": false,
            "last_edit_timestamp": 1427509772,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "danluu@gmail.com",
            "sender_full_name": "Dan Luu (W'13)",
            "sender_id": 820,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "silly questions as i teach myself go",
            "submessages": [],
            "timestamp": 1427509613,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/f6bd929465d6d225def8062d5a9d3f3f?d=identicon&version=1",
            "client": "website",
            "content": "<p>stackoverflow suggests using scanner for reading stuff line-by-line, but scanner seems to get ugly if you don't just have a single loop that's scanning over everything?</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37289460,
            "is_me_message": false,
            "last_edit_timestamp": 1427510015,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "danluu@gmail.com",
            "sender_full_name": "Dan Luu (W'13)",
            "sender_id": 820,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "silly questions as i teach myself go",
            "submessages": [],
            "timestamp": 1427509650,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/a179bb8c3fc4ab0975954f57d47fa6c53a8c2dad?x=x&version=2",
            "client": "website",
            "content": "<p>You could DRY out the 2 <code>for</code> loops by making something like <code>func scanTimes(n int, depart, arrive Pairs)</code>. Honestly though, what you have seems okay to me. It may seem clunky to you, but I could read it and understand what was happening without much effort.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37293813,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "jay@jayschwa.net",
            "sender_full_name": "Jay Weisskopf Petacat (W2'17)",
            "sender_id": 829,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "silly questions as i teach myself go",
            "submessages": [],
            "timestamp": 1427519863,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/a179bb8c3fc4ab0975954f57d47fa6c53a8c2dad?x=x&version=2",
            "client": "website",
            "content": "<p>For more complicated things, you might implement the scanning interfaces so you can scan in custom types, but that seems overkill for this particular problem.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37293854,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "jay@jayschwa.net",
            "sender_full_name": "Jay Weisskopf Petacat (W2'17)",
            "sender_id": 829,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "silly questions as i teach myself go",
            "submessages": [],
            "timestamp": 1427519923,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/f6bd929465d6d225def8062d5a9d3f3f?d=identicon&version=1",
            "client": "website",
            "content": "<p>Yeah, I wouldn't mind this for any normal code, but for the gcj problems I've tried so far I've been limited by typing speed. I'm sure that will change as I get to harder problems, but it would be nice to be able to crank out easy problems faster.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37301134,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "danluu@gmail.com",
            "sender_full_name": "Dan Luu (W'13)",
            "sender_id": 820,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "silly questions as i teach myself go",
            "submessages": [],
            "timestamp": 1427540013,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/f6bd929465d6d225def8062d5a9d3f3f?d=identicon&version=1",
            "client": "website",
            "content": "<p>And yeah, agree on the loop thing. I figured this would be faster to write so I just copy+pasta'd it. Competition programming is weird. When I look at solutions from other people it's usually all single char variable names, and if anyone ever calls a function it's a single function called <code>solve</code> :-).</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37301172,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "danluu@gmail.com",
            "sender_full_name": "Dan Luu (W'13)",
            "sender_id": 820,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "silly questions as i teach myself go",
            "submessages": [],
            "timestamp": 1427540090,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/5d46121e9a899e151cfcd0e59aa9e9f8a78989e8?x=x&version=1",
            "client": "desktop app Linux 0.4.4",
            "content": "<p>Could I request that we start forking this thread (ie, give new questions their own topics)? I pay more attention to #golang than the other streams, and it makes it much easier to parse if we keep questions/topics grouped</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37306739,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "aditya@adityamukerjee.net",
            "sender_full_name": "Aditya Mukerjee (he) (SP1'15)",
            "sender_id": 7644,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "silly questions as i teach myself go",
            "submessages": [],
            "timestamp": 1427554907,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/0a35beaf5a354dafdf10494c0313e10fffc154fd?x=x&version=1",
            "client": "website",
            "content": "<p><a href=\"https://tour.golang.org/moretypes/15\" target=\"_blank\" title=\"https://tour.golang.org/moretypes/15\">https://tour.golang.org/moretypes/15</a> mentions that:</p>\n<blockquote>\n<p>Maps must be created with make (not new) before use</p>\n</blockquote>\n<p>I've seen <code>make</code> before, but not <code>new</code>. What's the difference? Can someone point me to the docs?</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37312650,
            "is_me_message": false,
            "last_edit_timestamp": 1427569357,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "maia.mcc@gmail.com",
            "sender_full_name": "Maia McCormick (she) (S2'14)",
            "sender_id": 6175,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "\"make\" vs \"new\"",
            "submessages": [],
            "timestamp": 1427569331,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/a179bb8c3fc4ab0975954f57d47fa6c53a8c2dad?x=x&version=2",
            "client": "website",
            "content": "<p><a href=\"https://golang.org/doc/effective_go.html#allocation_new\" target=\"_blank\" title=\"https://golang.org/doc/effective_go.html#allocation_new\">https://golang.org/doc/effective_go.html#allocation_new</a></p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37312850,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "jay@jayschwa.net",
            "sender_full_name": "Jay Weisskopf Petacat (W2'17)",
            "sender_id": 829,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "\"make\" vs \"new\"",
            "submessages": [],
            "timestamp": 1427569847,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/a179bb8c3fc4ab0975954f57d47fa6c53a8c2dad?x=x&version=2",
            "client": "website",
            "content": "<p><code>new</code> doesn't seem to get used terribly often since there are other ways of creating pointers. Rob Pike once expressed regret for keeping it in the language.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37312859,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "jay@jayschwa.net",
            "sender_full_name": "Jay Weisskopf Petacat (W2'17)",
            "sender_id": 829,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "\"make\" vs \"new\"",
            "submessages": [],
            "timestamp": 1427569900,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/5d46121e9a899e151cfcd0e59aa9e9f8a78989e8?x=x&version=1",
            "client": "desktop app Linux 0.4.4",
            "content": "<p><span class=\"user-mention\" data-user-email=\"maia.mcc@gmail.com\">@Maia McCormick (S'14)</span> <code>new(Foo)</code> is exactly the same as <code>&amp;Foo{}</code>. Most Go programmers use the latter, though there's no real difference. </p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37317759,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "aditya@adityamukerjee.net",
            "sender_full_name": "Aditya Mukerjee (he) (SP1'15)",
            "sender_id": 7644,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "\"make\" vs \"new\"",
            "submessages": [],
            "timestamp": 1427580538,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/5d46121e9a899e151cfcd0e59aa9e9f8a78989e8?x=x&version=1",
            "client": "desktop app Linux 0.4.4",
            "content": "<p>damn Jay beat me to it</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37317761,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "aditya@adityamukerjee.net",
            "sender_full_name": "Aditya Mukerjee (he) (SP1'15)",
            "sender_id": 7644,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "\"make\" vs \"new\"",
            "submessages": [],
            "timestamp": 1427580542,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/1380ded36dafac0d6f808b9b7b6c4e85266428a1?x=x&version=1",
            "client": "website",
            "content": "<p>I find this to be equally awesome and horrifying: <a href=\"https://github.com/bouk/monkey\" target=\"_blank\" title=\"https://github.com/bouk/monkey\">https://github.com/bouk/monkey</a></p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37388364,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "travis@mcdem.us",
            "sender_full_name": "Travis McDemus (S'13)",
            "sender_id": 2139,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "monkey patching",
            "submessages": [],
            "timestamp": 1427739232,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/1380ded36dafac0d6f808b9b7b6c4e85266428a1?x=x&version=1",
            "client": "website",
            "content": "<p>From <a href=\"http://README.md\" target=\"_blank\" title=\"http://README.md\">README.md</a> \"Notes\" : \"Monkey is not threadsafe. Or any kind of safe.\" </p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37388424,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "travis@mcdem.us",
            "sender_full_name": "Travis McDemus (S'13)",
            "sender_id": 2139,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "monkey patching",
            "submessages": [],
            "timestamp": 1427739266,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/0a35beaf5a354dafdf10494c0313e10fffc154fd?x=x&version=1",
            "client": "website",
            "content": "<p>according to <a href=\"https://tour.golang.org/moretypes/20\" target=\"_blank\" title=\"https://tour.golang.org/moretypes/20\">https://tour.golang.org/moretypes/20</a>, functions are values too... and i  get that, cuz functions are first-class objects in python too, so, sense, but... their example doesn't make sense to me. WHY would you want to run:</p>\n<div class=\"codehilite\"><pre><span class=\"k\">func</span> <span class=\"n\">main</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n    <span class=\"n\">hypot</span> <span class=\"p\">:=</span> <span class=\"k\">func</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">y</span> <span class=\"nb\">float64</span><span class=\"p\">)</span> <span class=\"nb\">float64</span> <span class=\"p\">{</span>\n        <span class=\"k\">return</span> <span class=\"n\">math</span><span class=\"p\">.</span><span class=\"n\">Sqrt</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">*</span><span class=\"n\">x</span> <span class=\"p\">+</span> <span class=\"n\">y</span><span class=\"p\">*</span><span class=\"n\">y</span><span class=\"p\">)</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"n\">fmt</span><span class=\"p\">.</span><span class=\"n\">Println</span><span class=\"p\">(</span><span class=\"n\">hypot</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">))</span>\n<span class=\"p\">}</span>\n</pre></div>\n\n\n<p>rather than</p>\n<div class=\"codehilite\"><pre><span class=\"k\">func</span> <span class=\"n\">hypot</span> <span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">y</span> <span class=\"nb\">float64</span><span class=\"p\">)</span> <span class=\"nb\">float64</span> <span class=\"p\">{</span>\n        <span class=\"k\">return</span> <span class=\"n\">math</span><span class=\"p\">.</span><span class=\"n\">Sqrt</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">*</span><span class=\"n\">x</span> <span class=\"p\">+</span> <span class=\"n\">y</span><span class=\"p\">*</span><span class=\"n\">y</span><span class=\"p\">)</span>\n<span class=\"p\">}</span>\n\n<span class=\"k\">func</span> <span class=\"n\">main</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n    <span class=\"n\">fmt</span><span class=\"p\">.</span><span class=\"n\">Println</span><span class=\"p\">(</span><span class=\"n\">hypot</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">))</span>\n<span class=\"p\">}</span>\n</pre></div>\n\n\n<p>?</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37391477,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "maia.mcc@gmail.com",
            "sender_full_name": "Maia McCormick (she) (S2'14)",
            "sender_id": 6175,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "functions are values too... but why?!",
            "submessages": [],
            "timestamp": 1427742654,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/229e3746f6f5100c1d7d5d7a8a5b82d5?d=identicon&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>I've always used this for functional stuff, so creating a function that takes functions as arguments and returns another function. </p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37391686,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "nat@natwelch.com",
            "sender_full_name": "Nat Welch (he) (SP2'15)",
            "sender_id": 7866,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "functions are values too... but why?!",
            "submessages": [],
            "timestamp": 1427742882,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/229e3746f6f5100c1d7d5d7a8a5b82d5?d=identicon&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>But in the example, I would do as you suggested, I think they're just showing it for syntactical purposes.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37391700,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "nat@natwelch.com",
            "sender_full_name": "Nat Welch (he) (SP2'15)",
            "sender_id": 7866,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "functions are values too... but why?!",
            "submessages": [],
            "timestamp": 1427742916,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/a606e9bf03e17f889b759d952465d3f9?d=identicon&version=1",
            "client": "website",
            "content": "<p>I would agree, that's a pretty trivial use for an anonymous function. They are used fairly often to kick of goroutines:</p>\n<div class=\"codehilite\"><pre><span class=\"k\">func</span> <span class=\"n\">something</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n   <span class=\"k\">go</span> <span class=\"k\">func</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n        <span class=\"c1\">// Do stuff in the goroutine</span>\n    <span class=\"p\">}()</span>\n<span class=\"p\">}</span>\n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37392417,
            "is_me_message": false,
            "last_edit_timestamp": 1427743808,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "rmcase@gmail.com",
            "sender_full_name": "Ryan Case (S1'14)",
            "sender_id": 5881,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "functions are values too... but why?!",
            "submessages": [],
            "timestamp": 1427743748,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/a606e9bf03e17f889b759d952465d3f9?d=identicon&version=1",
            "client": "website",
            "content": "<p>But in the case of that example it's hard to present more common uses without introducing more concepts so I assume they did that to keep things simpler. In other languages an anonymous function assigned to a name is parsed at a different time than named functions, but being static and compiled I don't think there's a difference in Go, though I'm curious is someone knows more than I do about that.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37392625,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "rmcase@gmail.com",
            "sender_full_name": "Ryan Case (S1'14)",
            "sender_id": 5881,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "functions are values too... but why?!",
            "submessages": [],
            "timestamp": 1427743963,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/5d46121e9a899e151cfcd0e59aa9e9f8a78989e8?x=x&version=1",
            "client": "desktop app Linux 0.4.4",
            "content": "<p><span class=\"user-mention\" data-user-email=\"maia.mcc@gmail.com\">@Maia McCormick (S'14)</span> The big difference there is scoping. hypot is locally scoped in the first, and globally scoped in the second. Take a look at this, for example: <a href=\"http://play.golang.org/p/LgUU-6fGkf\" target=\"_blank\" title=\"http://play.golang.org/p/LgUU-6fGkf\">http://play.golang.org/p/LgUU-6fGkf</a></p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37396059,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "aditya@adityamukerjee.net",
            "sender_full_name": "Aditya Mukerjee (he) (SP1'15)",
            "sender_id": 7644,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "functions are values too... but why?!",
            "submessages": [],
            "timestamp": 1427747581,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/5d46121e9a899e151cfcd0e59aa9e9f8a78989e8?x=x&version=1",
            "client": "desktop app Linux 0.4.4",
            "content": "<p>Obviously that's a really silly example, because it's so simple, but you can see why you might want to (A) declare a function that's local to the current scope, or (B) shadow a global (package-level) function in the current scope</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37396092,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "aditya@adityamukerjee.net",
            "sender_full_name": "Aditya Mukerjee (he) (SP1'15)",
            "sender_id": 7644,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "functions are values too... but why?!",
            "submessages": [],
            "timestamp": 1427747629,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/5d46121e9a899e151cfcd0e59aa9e9f8a78989e8?x=x&version=1",
            "client": "desktop app Linux 0.4.4",
            "content": "<p>e.g., you might want to assign a function a new value conditionally</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37396104,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "aditya@adityamukerjee.net",
            "sender_full_name": "Aditya Mukerjee (he) (SP1'15)",
            "sender_id": 7644,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "functions are values too... but why?!",
            "submessages": [],
            "timestamp": 1427747640,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/5d46121e9a899e151cfcd0e59aa9e9f8a78989e8?x=x&version=1",
            "client": "desktop app Linux 0.4.4",
            "content": "<p>FYI, you can do the same thing as well by declaring struct types within local scope</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37396143,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "aditya@adityamukerjee.net",
            "sender_full_name": "Aditya Mukerjee (he) (SP1'15)",
            "sender_id": 7644,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "functions are values too... but why?!",
            "submessages": [],
            "timestamp": 1427747654,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/5d46121e9a899e151cfcd0e59aa9e9f8a78989e8?x=x&version=1",
            "client": "desktop app Linux 0.4.4",
            "content": "<p>(Actually, *any* types can be declared within local scope, not just struct types)</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37396160,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "aditya@adityamukerjee.net",
            "sender_full_name": "Aditya Mukerjee (he) (SP1'15)",
            "sender_id": 7644,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "functions are values too... but why?!",
            "submessages": [],
            "timestamp": 1427747680,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/0a35beaf5a354dafdf10494c0313e10fffc154fd?x=x&version=1",
            "client": "website",
            "content": "<p>gotcha! now that I know that this is a trivial example, it makes sense--i thought there was a go-idiomatic reason to do it this way that i just wasn't getting, and i was sort of baffled.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37397013,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "maia.mcc@gmail.com",
            "sender_full_name": "Maia McCormick (she) (S2'14)",
            "sender_id": 6175,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "functions are values too... but why?!",
            "submessages": [],
            "timestamp": 1427748607,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/391eb183c3474a15bf9ad0e87d3ff118?d=identicon&version=1",
            "client": "website",
            "content": "<div class=\"codehilite\"><pre><span class=\"n\">i</span> <span class=\"p\">:=</span> <span class=\"mi\">42</span>\n<span class=\"n\">p</span> <span class=\"p\">:=</span> <span class=\"p\">&amp;</span><span class=\"n\">i</span>\n\n<span class=\"c1\">// Same as above not using Cthulhu( := ) declaration</span>\n<span class=\"k\">var</span> <span class=\"n\">i</span> <span class=\"nb\">int</span> <span class=\"p\">=</span> <span class=\"mi\">42</span>\n<span class=\"k\">var</span> <span class=\"n\">p</span> <span class=\"p\">*</span><span class=\"nb\">int</span> <span class=\"p\">=</span> <span class=\"p\">&amp;</span><span class=\"n\">i</span>\n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37400082,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "ghthor@gmail.com",
            "sender_full_name": "Will Drengwitz (he) (W1'17)",
            "sender_id": 7099,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "silly questions as i teach myself go",
            "submessages": [],
            "timestamp": 1427751908,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/1380ded36dafac0d6f808b9b7b6c4e85266428a1?x=x&version=1",
            "client": "website",
            "content": "<p>This is likely mentioned somewhere, but why does the <code>new</code> keyword seem to be less favored over using the &amp; operator for getting a pointer to The Thing?</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37400688,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "travis@mcdem.us",
            "sender_full_name": "Travis McDemus (S'13)",
            "sender_id": 2139,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "the new keyword",
            "submessages": [],
            "timestamp": 1427752516,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/1380ded36dafac0d6f808b9b7b6c4e85266428a1?x=x&version=1",
            "client": "website",
            "content": "<p>e.g. is it \"better\" to use <code>pointerToTheThing := &amp;TheThing{}</code> instead of <code>pointerToTheThing := new(TheThing)</code> ? Why?</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37400812,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "travis@mcdem.us",
            "sender_full_name": "Travis McDemus (S'13)",
            "sender_id": 2139,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "the new keyword",
            "submessages": [],
            "timestamp": 1427752680,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/391eb183c3474a15bf9ad0e87d3ff118?d=identicon&version=1",
            "client": "website",
            "content": "<p>In response to referencing me. My Gopherjs and JS interaction is working really well. The gopherjs <a href=\"https://github.com/ghthor/aodd/blob/master/www/js/app/main.go\" target=\"_blank\" title=\"https://github.com/ghthor/aodd/blob/master/www/js/app/main.go\">portion</a> of my MMO web client avoids touching the DOM or drawing to the canvas. These 2 functions I implement in JS so they can utilize React.js(<a href=\"https://github.com/ghthor/aodd/blob/master/www/js/ui/login.js\" target=\"_blank\" title=\"https://github.com/ghthor/aodd/blob/master/www/js/ui/login.js\">Login</a> &amp; <a href=\"https://github.com/ghthor/aodd/blob/master/www/js/ui/client.js\" target=\"_blank\" title=\"https://github.com/ghthor/aodd/blob/master/www/js/ui/client.js\">Client</a> UI) &amp; CAAT(<a href=\"https://github.com/ghthor/aodd/blob/master/www/js/ui/canvas.js\" target=\"_blank\" title=\"https://github.com/ghthor/aodd/blob/master/www/js/ui/canvas.js\">canvas rendering</a>)without a wrapper. The JS modules subscribe to events that gopherjs section will be emitting as it decodes &amp; processes network traffic from the server.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37401094,
            "is_me_message": false,
            "last_edit_timestamp": 1427753004,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "ghthor@gmail.com",
            "sender_full_name": "Will Drengwitz (he) (W1'17)",
            "sender_id": 7099,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "Full Stack Go: Client-side Go",
            "submessages": [],
            "timestamp": 1427752955,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/391eb183c3474a15bf9ad0e87d3ff118?d=identicon&version=1",
            "client": "website",
            "content": "<div class=\"codehilite\"><pre><span class=\"c1\">// It&#39;s easier to extend a struct literal as the code evolves</span>\n<span class=\"n\">p</span> <span class=\"p\">:=</span> <span class=\"p\">&amp;</span><span class=\"n\">TheThing</span><span class=\"p\">{}</span>\n<span class=\"n\">p</span> <span class=\"p\">:=</span> <span class=\"p\">&amp;</span><span class=\"n\">TheThing</span><span class=\"p\">{</span><span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"s\">&quot;The Thing&quot;</span><span class=\"p\">}</span>\n\n<span class=\"c1\">// versus</span>\n<span class=\"n\">p</span> <span class=\"p\">:=</span> <span class=\"nb\">new</span><span class=\"p\">(</span><span class=\"n\">TheThing</span><span class=\"p\">)</span>\n<span class=\"n\">p</span><span class=\"p\">.</span><span class=\"n\">name</span> <span class=\"p\">=</span> <span class=\"s\">&quot;The Thing&quot;</span>\n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37402227,
            "is_me_message": false,
            "last_edit_timestamp": 1427754374,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "ghthor@gmail.com",
            "sender_full_name": "Will Drengwitz (he) (W1'17)",
            "sender_id": 7099,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "the new keyword",
            "submessages": [],
            "timestamp": 1427754247,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/391eb183c3474a15bf9ad0e87d3ff118?d=identicon&version=1",
            "client": "website",
            "content": "<p>If you can imagine what the diff would look like. Also if p needs to switch from pointer -&gt; value it's one character being changed.</p>\n<div class=\"codehilite\"><pre><span class=\"n\">p</span> <span class=\"p\">:=</span> <span class=\"p\">&amp;</span><span class=\"n\">TheThing</span><span class=\"p\">{}</span>\n<span class=\"n\">p</span> <span class=\"p\">:=</span> <span class=\"n\">TheThing</span><span class=\"p\">{}</span>\n\n<span class=\"c1\">// versus</span>\n<span class=\"n\">p</span> <span class=\"p\">:=</span> <span class=\"p\">&amp;</span><span class=\"n\">TheThing</span><span class=\"p\">{}</span>\n<span class=\"k\">var</span> <span class=\"n\">p</span> <span class=\"n\">TheThing</span>\n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37402444,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "ghthor@gmail.com",
            "sender_full_name": "Will Drengwitz (he) (W1'17)",
            "sender_id": 7099,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "the new keyword",
            "submessages": [],
            "timestamp": 1427754503,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/a179bb8c3fc4ab0975954f57d47fa6c53a8c2dad?x=x&version=2",
            "client": "website",
            "content": "<p>^ Agreed that struct literals are nicer.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37402630,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "jay@jayschwa.net",
            "sender_full_name": "Jay Weisskopf Petacat (W2'17)",
            "sender_id": 829,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "the new keyword",
            "submessages": [],
            "timestamp": 1427754737,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/a179bb8c3fc4ab0975954f57d47fa6c53a8c2dad?x=x&version=2",
            "client": "website",
            "content": "<p>Also, if we pretend that Go 2 comes out soon and they're going to remove a bunch of stuff, I'd bet money that <code>&amp;value</code> would survive and <code>new(type)</code> wouldn't, since the latter is a less powerful and more limited version of the former.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37402690,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "jay@jayschwa.net",
            "sender_full_name": "Jay Weisskopf Petacat (W2'17)",
            "sender_id": 829,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "the new keyword",
            "submessages": [],
            "timestamp": 1427754839,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/a179bb8c3fc4ab0975954f57d47fa6c53a8c2dad?x=x&version=2",
            "client": "website",
            "content": "<p>I should try to dig up the clip of Rob Pike reflecting negatively on keeping <code>new</code>. I think it was one of the panels at GopherCon last year.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37402769,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "jay@jayschwa.net",
            "sender_full_name": "Jay Weisskopf Petacat (W2'17)",
            "sender_id": 829,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "the new keyword",
            "submessages": [],
            "timestamp": 1427754927,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/0a35beaf5a354dafdf10494c0313e10fffc154fd?x=x&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"ghthor@gmail.com\">@Willa Walthall (W2'15)</span> omg Cthulu declaration. I'm in love.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37411930,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "maia.mcc@gmail.com",
            "sender_full_name": "Maia McCormick (she) (S2'14)",
            "sender_id": 6175,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "silly questions as i teach myself go",
            "submessages": [],
            "timestamp": 1427770678,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/b05b48dffacfe8bc5336d44718f65da6?d=identicon&version=1",
            "client": "website",
            "content": "<p>question in paxos stream about experience with go, maybe we can do some intro to go/go pairing today for those of us (like myself) interested in learning some?</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37435361,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "brian@glusman.me",
            "sender_full_name": "Brian Glusman (SP2'15)",
            "sender_id": 7848,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "(no topic)",
            "submessages": [],
            "timestamp": 1427812044,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/5d46121e9a899e151cfcd0e59aa9e9f8a78989e8?x=x&version=1",
            "client": "desktop app Linux 0.4.4",
            "content": "<p>I'd be happy to pair in Go!</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37440600,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "aditya@adityamukerjee.net",
            "sender_full_name": "Aditya Mukerjee (he) (SP1'15)",
            "sender_id": 7644,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "(no topic)",
            "submessages": [],
            "timestamp": 1427814139,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/5d46121e9a899e151cfcd0e59aa9e9f8a78989e8?x=x&version=1",
            "client": "desktop app Linux 0.4.4",
            "content": "<p>I've been writing Go full-time for almost 3 years</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37440647,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "aditya@adityamukerjee.net",
            "sender_full_name": "Aditya Mukerjee (he) (SP1'15)",
            "sender_id": 7644,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "(no topic)",
            "submessages": [],
            "timestamp": 1427814149,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/0a35beaf5a354dafdf10494c0313e10fffc154fd?x=x&version=1",
            "client": "website",
            "content": "<div class=\"codehilite\"><pre><span class=\"k\">func</span> <span class=\"p\">(</span><span class=\"n\">v</span> <span class=\"p\">*</span><span class=\"n\">Vertex</span><span class=\"p\">)</span> <span class=\"n\">Abs</span><span class=\"p\">()</span> <span class=\"nb\">float64</span> <span class=\"p\">{</span>\n    <span class=\"k\">return</span> <span class=\"n\">math</span><span class=\"p\">.</span><span class=\"n\">Sqrt</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">.</span><span class=\"n\">X</span><span class=\"p\">*</span><span class=\"n\">v</span><span class=\"p\">.</span><span class=\"n\">X</span> <span class=\"p\">+</span> <span class=\"n\">v</span><span class=\"p\">.</span><span class=\"n\">Y</span><span class=\"p\">*</span><span class=\"n\">v</span><span class=\"p\">.</span><span class=\"n\">Y</span><span class=\"p\">)</span>\n<span class=\"p\">}</span>\n\n<span class=\"k\">func</span> <span class=\"n\">main</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n    <span class=\"n\">v</span> <span class=\"p\">:=</span> <span class=\"p\">&amp;</span><span class=\"n\">Vertex</span><span class=\"p\">{</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">}</span>\n    <span class=\"n\">fmt</span><span class=\"p\">.</span><span class=\"n\">Println</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">.</span><span class=\"n\">Abs</span><span class=\"p\">())</span>\n<span class=\"p\">}</span>\n</pre></div>\n\n\n<p>works just the same as </p>\n<div class=\"codehilite\"><pre><span class=\"k\">func</span> <span class=\"p\">(</span><span class=\"n\">v</span> <span class=\"n\">Vertex</span><span class=\"p\">)</span> <span class=\"n\">Abs</span><span class=\"p\">()</span> <span class=\"nb\">float64</span> <span class=\"p\">{</span>\n    <span class=\"k\">return</span> <span class=\"n\">math</span><span class=\"p\">.</span><span class=\"n\">Sqrt</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">.</span><span class=\"n\">X</span><span class=\"p\">*</span><span class=\"n\">v</span><span class=\"p\">.</span><span class=\"n\">X</span> <span class=\"p\">+</span> <span class=\"n\">v</span><span class=\"p\">.</span><span class=\"n\">Y</span><span class=\"p\">*</span><span class=\"n\">v</span><span class=\"p\">.</span><span class=\"n\">Y</span><span class=\"p\">)</span>\n<span class=\"p\">}</span>\n\n<span class=\"k\">func</span> <span class=\"n\">main</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n    <span class=\"n\">v</span> <span class=\"p\">:=</span> <span class=\"p\">&amp;</span><span class=\"n\">Vertex</span><span class=\"p\">{</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">}</span>\n    <span class=\"n\">fmt</span><span class=\"p\">.</span><span class=\"n\">Println</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">.</span><span class=\"n\">Abs</span><span class=\"p\">())</span>\n<span class=\"p\">}</span>\n</pre></div>\n\n\n<p>works just the same as</p>\n<div class=\"codehilite\"><pre><span class=\"k\">func</span> <span class=\"p\">(</span><span class=\"n\">v</span> <span class=\"p\">*</span><span class=\"n\">Vertex</span><span class=\"p\">)</span> <span class=\"n\">Abs</span><span class=\"p\">()</span> <span class=\"nb\">float64</span> <span class=\"p\">{</span>\n    <span class=\"k\">return</span> <span class=\"n\">math</span><span class=\"p\">.</span><span class=\"n\">Sqrt</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">.</span><span class=\"n\">X</span><span class=\"p\">*</span><span class=\"n\">v</span><span class=\"p\">.</span><span class=\"n\">X</span> <span class=\"p\">+</span> <span class=\"n\">v</span><span class=\"p\">.</span><span class=\"n\">Y</span><span class=\"p\">*</span><span class=\"n\">v</span><span class=\"p\">.</span><span class=\"n\">Y</span><span class=\"p\">)</span>\n<span class=\"p\">}</span>\n\n<span class=\"k\">func</span> <span class=\"n\">main</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n    <span class=\"n\">v</span> <span class=\"p\">:=</span> <span class=\"n\">Vertex</span><span class=\"p\">{</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">}</span>\n    <span class=\"n\">fmt</span><span class=\"p\">.</span><span class=\"n\">Println</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">.</span><span class=\"n\">Abs</span><span class=\"p\">())</span>\n<span class=\"p\">}</span>\n</pre></div>\n\n\n<p>works just the same as</p>\n<div class=\"codehilite\"><pre><span class=\"k\">func</span> <span class=\"p\">(</span><span class=\"n\">v</span> <span class=\"n\">Vertex</span><span class=\"p\">)</span> <span class=\"n\">Abs</span><span class=\"p\">()</span> <span class=\"nb\">float64</span> <span class=\"p\">{</span>\n    <span class=\"k\">return</span> <span class=\"n\">math</span><span class=\"p\">.</span><span class=\"n\">Sqrt</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">.</span><span class=\"n\">X</span><span class=\"p\">*</span><span class=\"n\">v</span><span class=\"p\">.</span><span class=\"n\">X</span> <span class=\"p\">+</span> <span class=\"n\">v</span><span class=\"p\">.</span><span class=\"n\">Y</span><span class=\"p\">*</span><span class=\"n\">v</span><span class=\"p\">.</span><span class=\"n\">Y</span><span class=\"p\">)</span>\n<span class=\"p\">}</span>\n\n<span class=\"k\">func</span> <span class=\"n\">main</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n    <span class=\"n\">v</span> <span class=\"p\">:=</span> <span class=\"n\">Vertex</span><span class=\"p\">{</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">}</span>\n    <span class=\"n\">fmt</span><span class=\"p\">.</span><span class=\"n\">Println</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">.</span><span class=\"n\">Abs</span><span class=\"p\">())</span>\n<span class=\"p\">}</span>\n</pre></div>\n\n\n<p>i thought Go was all about type safety. i'm confused.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37442424,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "maia.mcc@gmail.com",
            "sender_full_name": "Maia McCormick (she) (S2'14)",
            "sender_id": 6175,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "so much for type safety?",
            "submessages": [],
            "timestamp": 1427815150,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/5d46121e9a899e151cfcd0e59aa9e9f8a78989e8?x=x&version=1",
            "client": "desktop app Linux 0.4.4",
            "content": "<p><span class=\"user-mention\" data-user-email=\"maia.mcc@gmail.com\">@Maia McCormick (S'14)</span> Go will automatically dereference the implicit parameter if needed</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37442520,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "aditya@adityamukerjee.net",
            "sender_full_name": "Aditya Mukerjee (he) (SP1'15)",
            "sender_id": 7644,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "so much for type safety?",
            "submessages": [],
            "timestamp": 1427815219,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/5d46121e9a899e151cfcd0e59aa9e9f8a78989e8?x=x&version=1",
            "client": "desktop app Linux 0.4.4",
            "content": "<p><code>Foo</code> and <code>*Foo</code> are distinct types, but Go will automatically dereference a <code>*Foo</code> if there is a method declared on <code>Foo</code></p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37442568,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "aditya@adityamukerjee.net",
            "sender_full_name": "Aditya Mukerjee (he) (SP1'15)",
            "sender_id": 7644,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "so much for type safety?",
            "submessages": [],
            "timestamp": 1427815280,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/5d46121e9a899e151cfcd0e59aa9e9f8a78989e8?x=x&version=1",
            "client": "desktop app Linux 0.4.4",
            "content": "<p>This is more precise: <a href=\"http://nathanleclaire.com/blog/2014/08/09/dont-get-bitten-by-pointer-vs-non-pointer-method-receivers-in-golang/\" target=\"_blank\" title=\"http://nathanleclaire.com/blog/2014/08/09/dont-get-bitten-by-pointer-vs-non-pointer-method-receivers-in-golang/\">http://nathanleclaire.com/blog/2014/08/09/dont-get-bitten-by-pointer-vs-non-pointer-method-receivers-in-golang/</a></p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37442602,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "aditya@adityamukerjee.net",
            "sender_full_name": "Aditya Mukerjee (he) (SP1'15)",
            "sender_id": 7644,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "so much for type safety?",
            "submessages": [],
            "timestamp": 1427815324,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/5d46121e9a899e151cfcd0e59aa9e9f8a78989e8?x=x&version=1",
            "client": "desktop app Linux 0.4.4",
            "content": "<p>method receiver == implicit parameter</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37442622,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "aditya@adityamukerjee.net",
            "sender_full_name": "Aditya Mukerjee (he) (SP1'15)",
            "sender_id": 7644,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "so much for type safety?",
            "submessages": [],
            "timestamp": 1427815337,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/5d46121e9a899e151cfcd0e59aa9e9f8a78989e8?x=x&version=1",
            "client": "desktop app Linux 0.4.4",
            "content": "<p>The difference between pointer receivers and non-pointer receivers comes into play with performance (not mutation)</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37442649,
            "is_me_message": false,
            "last_edit_timestamp": 1427815537,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "aditya@adityamukerjee.net",
            "sender_full_name": "Aditya Mukerjee (he) (SP1'15)",
            "sender_id": 7644,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "so much for type safety?",
            "submessages": [],
            "timestamp": 1427815400,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/5d46121e9a899e151cfcd0e59aa9e9f8a78989e8?x=x&version=1",
            "client": "desktop app Linux 0.4.4",
            "content": "<p>(Editied because I always forget that they changed the mutation behavior)</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37442762,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "aditya@adityamukerjee.net",
            "sender_full_name": "Aditya Mukerjee (he) (SP1'15)",
            "sender_id": 7644,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "so much for type safety?",
            "submessages": [],
            "timestamp": 1427815548,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/5d46121e9a899e151cfcd0e59aa9e9f8a78989e8?x=x&version=1",
            "client": "desktop app Linux 0.4.4",
            "content": "<p><a href=\"http://play.golang.org/p/Pv4wCettu9\" target=\"_blank\" title=\"http://play.golang.org/p/Pv4wCettu9\">http://play.golang.org/p/Pv4wCettu9</a></p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37442835,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "aditya@adityamukerjee.net",
            "sender_full_name": "Aditya Mukerjee (he) (SP1'15)",
            "sender_id": 7644,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "so much for type safety?",
            "submessages": [],
            "timestamp": 1427815606,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/0a35beaf5a354dafdf10494c0313e10fffc154fd?x=x&version=1",
            "client": "website",
            "content": "<p>Hmm... so as far as i can tell, your <code>bar</code> method wasn't doing anything b.c it expected a Foo instead of a pointer to a Foo... and even though go dealt with pointer de/referencening if you tried to call <code>bar</code> on a pointer to a Foo (so there wasn't an error), it didn't actually change the value of your object... i guess it can only change the value of an object if it's given a pointer, rather than the object itself?</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37452317,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "maia.mcc@gmail.com",
            "sender_full_name": "Maia McCormick (she) (S2'14)",
            "sender_id": 6175,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "so much for type safety?",
            "submessages": [],
            "timestamp": 1427827045,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/0a35beaf5a354dafdf10494c0313e10fffc154fd?x=x&version=1",
            "client": "website",
            "content": "<p>not sure i understand the reasoning behind that, but it's the behavior i've observed. can someone tell me why that makes ssense, though?</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37452328,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "maia.mcc@gmail.com",
            "sender_full_name": "Maia McCormick (she) (S2'14)",
            "sender_id": 6175,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "so much for type safety?",
            "submessages": [],
            "timestamp": 1427827066,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/0a35beaf5a354dafdf10494c0313e10fffc154fd?x=x&version=1",
            "client": "website",
            "content": "<p><a href=\"http://play.golang.org/p/WqNru45x9L\" target=\"_blank\" title=\"http://play.golang.org/p/WqNru45x9L\">http://play.golang.org/p/WqNru45x9L</a></p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37452332,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "maia.mcc@gmail.com",
            "sender_full_name": "Maia McCormick (she) (S2'14)",
            "sender_id": 6175,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "so much for type safety?",
            "submessages": [],
            "timestamp": 1427827071,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/391eb183c3474a15bf9ad0e87d3ff118?d=identicon&version=1",
            "client": "website",
            "content": "<p>You can use a Value receiver to express that the method cannot mutate the receiver. This does NOT mean the method can modify something stored in the struct, for example adding to map. But it doesn't allow the method to change which map is stored in the struct at the call site. Trying to think of a good code sample to explain this,  will post tomorrow.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37481578,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "ghthor@gmail.com",
            "sender_full_name": "Will Drengwitz (he) (W1'17)",
            "sender_id": 7099,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "so much for type safety?",
            "submessages": [],
            "timestamp": 1427873664,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/391eb183c3474a15bf9ad0e87d3ff118?d=identicon&version=1",
            "client": "website",
            "content": "<p>Heres an <a href=\"https://github.com/ghthor/engine/blob/48aa3c86a56003342b0d9dae4008c242b4d55344/ssim/pipeline_test.go\" target=\"_blank\" title=\"https://github.com/ghthor/engine/blob/48aa3c86a56003342b0d9dae4008c242b4d55344/ssim/pipeline_test.go\">example</a> from something I wrote tonight.</p>\n<div class=\"codehilite\"><pre><span class=\"k\">type</span> <span class=\"n\">eventEmitter</span> <span class=\"k\">struct</span> <span class=\"p\">{</span>\n    <span class=\"n\">listeners</span> <span class=\"p\">[]</span><span class=\"n\">ssim</span><span class=\"p\">.</span><span class=\"n\">EventWriter</span>\n<span class=\"p\">}</span>\n\n<span class=\"c1\">// Doesn&#39;t modify the structs contents</span>\n<span class=\"k\">func</span> <span class=\"p\">(</span><span class=\"n\">em</span> <span class=\"n\">eventEmitter</span><span class=\"p\">)</span> <span class=\"n\">emit</span><span class=\"p\">(</span><span class=\"n\">e</span> <span class=\"n\">ssim</span><span class=\"p\">.</span><span class=\"n\">Event</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"k\">for</span> <span class=\"n\">_</span><span class=\"p\">,</span> <span class=\"n\">l</span> <span class=\"p\">:=</span> <span class=\"k\">range</span> <span class=\"n\">em</span><span class=\"p\">.</span><span class=\"n\">listeners</span> <span class=\"p\">{</span>\n        <span class=\"n\">l</span><span class=\"p\">.</span><span class=\"n\">Write</span><span class=\"p\">(</span><span class=\"n\">e</span><span class=\"p\">)</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n\n<span class=\"c1\">// Modifies the struct&#39;s contents</span>\n<span class=\"k\">func</span> <span class=\"p\">(</span><span class=\"n\">em</span> <span class=\"p\">*</span><span class=\"n\">eventEmitter</span><span class=\"p\">)</span> <span class=\"n\">Subscribe</span><span class=\"p\">(</span><span class=\"n\">w</span> <span class=\"n\">ssim</span><span class=\"p\">.</span><span class=\"n\">EventWriter</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"n\">em</span><span class=\"p\">.</span><span class=\"n\">listeners</span> <span class=\"p\">=</span> <span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">em</span><span class=\"p\">.</span><span class=\"n\">listeners</span><span class=\"p\">,</span> <span class=\"n\">w</span><span class=\"p\">)</span>\n<span class=\"p\">}</span>\n</pre></div>\n\n\n<p>This could be considered a bad example because the <code>emit()</code>method could mutate the data within the <code>listeners</code> slice. But the intention should be clear from using a value receiver, therefore if the <code>emit()</code> method was modifying the contents of <code>listeners</code> slice it should stick out as a bug.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37481800,
            "is_me_message": false,
            "last_edit_timestamp": 1427874373,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "ghthor@gmail.com",
            "sender_full_name": "Will Drengwitz (he) (W1'17)",
            "sender_id": 7099,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "so much for type safety?",
            "submessages": [],
            "timestamp": 1427874334,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/1380ded36dafac0d6f808b9b7b6c4e85266428a1?x=x&version=1",
            "client": "website",
            "content": "<p>That clears it up, thanks <span class=\"user-mention\" data-user-email=\"ghthor@gmail.com\">@Willa Walthall (W2'15)</span> , <span class=\"user-mention\" data-user-email=\"jay@jayschwa.net\">@Jay Weisskopf (W'13)</span> !!</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37491112,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "travis@mcdem.us",
            "sender_full_name": "Travis McDemus (S'13)",
            "sender_id": 2139,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "the new keyword",
            "submessages": [],
            "timestamp": 1427894502,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/1380ded36dafac0d6f808b9b7b6c4e85266428a1?x=x&version=1",
            "client": "website",
            "content": "<p>The second Go challenge is live: <a href=\"http://golang-challenge.com/go-challenge2/\" target=\"_blank\" title=\"http://golang-challenge.com/go-challenge2/\">http://golang-challenge.com/go-challenge2/</a></p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37491161,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "travis@mcdem.us",
            "sender_full_name": "Travis McDemus (S'13)",
            "sender_id": 2139,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "go challenge",
            "submessages": [],
            "timestamp": 1427894541,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/1380ded36dafac0d6f808b9b7b6c4e85266428a1?x=x&version=1",
            "client": "website",
            "content": "<p>I had fun doing last month's. It is intended for participants to code individually, but it'd be fun to pair or at least code review each other's solutions if anyone wants to try that this month!</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37491203,
            "is_me_message": false,
            "last_edit_timestamp": 1427894627,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "travis@mcdem.us",
            "sender_full_name": "Travis McDemus (S'13)",
            "sender_id": 2139,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "go challenge",
            "submessages": [],
            "timestamp": 1427894615,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/5d46121e9a899e151cfcd0e59aa9e9f8a78989e8?x=x&version=1",
            "client": "desktop app Linux 0.4.4",
            "content": "<p>I'd be up for pairing on this!</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37492609,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "aditya@adityamukerjee.net",
            "sender_full_name": "Aditya Mukerjee (he) (SP1'15)",
            "sender_id": 7644,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "go challenge",
            "submessages": [],
            "timestamp": 1427896670,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/0a35beaf5a354dafdf10494c0313e10fffc154fd?x=x&version=1",
            "client": "website",
            "content": "<p>exploring a new code-base that is UTTERLY BAFFLING. What I usually do in a situation like this is put a stack trace somewhere in the code and step through to see what happens where. how would i do this with go? (my ideal would be like python, sticking <code>break_point()</code> somewhere in the source code... reading <a href=\"https://golang.org/doc/gdb\" target=\"_blank\" title=\"https://golang.org/doc/gdb\">https://golang.org/doc/gdb</a> but can't really tell how to invoke it from within the code... halp?)</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37498363,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "maia.mcc@gmail.com",
            "sender_full_name": "Maia McCormick (she) (S2'14)",
            "sender_id": 6175,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "debugging/stepping through go?",
            "submessages": [],
            "timestamp": 1427903715,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/391eb183c3474a15bf9ad0e87d3ff118?d=identicon&version=1",
            "client": "website",
            "content": "<p>This is pretty much the only pain point. The reason for the lack of a quality debugger is because a standard debugger doesn't deal with concurrency and parallelism very well.</p>\n<p>I use godoc to understand the public interface. After that I usually will just step through the function calls manually to understand what's going on. This has served me well enough in most libraries, especially the stdlib. The only other option is adding print statements which I've done quite often if I can't calculate the state of the program in my head. There is also <a href=\"http://gosrc.org\" target=\"_blank\" title=\"http://gosrc.org\">gosrc.org</a> which I haven't used much because it is new, but it looks very promising.</p>\n<p><span class=\"user-mention\" data-user-email=\"maia.mcc@gmail.com\">@Maia McCormick (S'14)</span> What text editor are you using? Tooling up is awesome with go. Not suggesting you switch to vim, but <a href=\"https://github.com/fatih/vim-go#features\" target=\"_blank\" title=\"https://github.com/fatih/vim-go#features\">here</a> is an example of what any editor should have access to as far as tooling goes.</p>\n<p>I am curious what other gophers do in these situations.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37499307,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "ghthor@gmail.com",
            "sender_full_name": "Will Drengwitz (he) (W1'17)",
            "sender_id": 7099,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "debugging/stepping through go?",
            "submessages": [],
            "timestamp": 1427904723,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/0a35beaf5a354dafdf10494c0313e10fffc154fd?x=x&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"ghthor@gmail.com\">@Willa Walthall (W2'15)</span>, i... did not understand a lot of the things you just said. what's godoc? and when you say step through the function calls manually... you mean without the aid of any debugger, just trawling through the source code, right?</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37499702,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "maia.mcc@gmail.com",
            "sender_full_name": "Maia McCormick (she) (S2'14)",
            "sender_id": 6175,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "debugging/stepping through go?",
            "submessages": [],
            "timestamp": 1427905162,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/0a35beaf5a354dafdf10494c0313e10fffc154fd?x=x&version=1",
            "client": "website",
            "content": "<p>i generally use sublime (luddite, i know)--what do you mean by 'tooling up'?</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37499713,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "maia.mcc@gmail.com",
            "sender_full_name": "Maia McCormick (she) (S2'14)",
            "sender_id": 6175,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "debugging/stepping through go?",
            "submessages": [],
            "timestamp": 1427905180,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/391eb183c3474a15bf9ad0e87d3ff118?d=identicon&version=1",
            "client": "website",
            "content": "<p>godoc generates documentation from the comments in the code. It only displays public func/types/vars of a package. You can use it locally using the godoc binary, <code>godoc -http=:6060</code> then navigate to <a href=\"http://localhost:6060/pkg\" target=\"_blank\" title=\"http://localhost:6060/pkg\">http://localhost:6060/pkg</a>. This local running instance of godoc will contain docs for the whole std + any packages in your GOPATH. You can also use <a href=\"http://godoc.org\" target=\"_blank\" title=\"http://godoc.org\">godoc.org</a> by prepending the the import path.</p>\n<p><a href=\"http://github.com/ghthor/engine/ssim\" target=\"_blank\" title=\"http://github.com/ghthor/engine/ssim\">github.com/ghthor/engine/ssim</a></p>\n<p>becomes</p>\n<p><a href=\"http://godoc.org/github.com/ghthor/engine/ssim\" target=\"_blank\" title=\"http://godoc.org/github.com/ghthor/engine/ssim\">godoc.org/github.com/ghthor/engine/ssim</a></p>\n<p><a href=\"http://gosrc.org\" target=\"_blank\" title=\"http://gosrc.org\">gosrc.org</a> functions in the same way as <a href=\"http://godoc.org\" target=\"_blank\" title=\"http://godoc.org\">godoc.org</a>, by preprending <a href=\"http://gosrc.org\" target=\"_blank\" title=\"http://gosrc.org\">gosrc.org</a> to the import path.</p>\n<p><a href=\"http://gosrc.org/github.com/ghthor/engine/ssim\" target=\"_blank\" title=\"http://gosrc.org/github.com/ghthor/engine/ssim\">gosrc.org/github.com/ghthor/engine/ssim</a></p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37502624,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "ghthor@gmail.com",
            "sender_full_name": "Will Drengwitz (he) (W1'17)",
            "sender_id": 7099,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "debugging/stepping through go?",
            "submessages": [],
            "timestamp": 1427908501,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/391eb183c3474a15bf9ad0e87d3ff118?d=identicon&version=1",
            "client": "website",
            "content": "<p>gosrc hasn't caught up to my latest commit so that link is dead right now. But you can go check some other package at gosrc.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37502997,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "ghthor@gmail.com",
            "sender_full_name": "Will Drengwitz (he) (W1'17)",
            "sender_id": 7099,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "debugging/stepping through go?",
            "submessages": [],
            "timestamp": 1427909005,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/391eb183c3474a15bf9ad0e87d3ff118?d=identicon&version=1",
            "client": "website",
            "content": "<p>I guess I'm not really answering your question about how to use gdb with go because I never use it, ever, only print statements and trawling the code, executing it in my head.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37503371,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "ghthor@gmail.com",
            "sender_full_name": "Will Drengwitz (he) (W1'17)",
            "sender_id": 7099,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "debugging/stepping through go?",
            "submessages": [],
            "timestamp": 1427909460,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/391eb183c3474a15bf9ad0e87d3ff118?d=identicon&version=1",
            "client": "website",
            "content": "<p>I use godoc to get my bearings and identify where I need to start digging, and then I dig and print stuff out =/</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37503465,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "ghthor@gmail.com",
            "sender_full_name": "Will Drengwitz (he) (W1'17)",
            "sender_id": 7099,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "debugging/stepping through go?",
            "submessages": [],
            "timestamp": 1427909585,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/a179bb8c3fc4ab0975954f57d47fa6c53a8c2dad?x=x&version=2",
            "client": "website",
            "content": "<p>It might be possible to print stack traces using something like <a href=\"https://godoc.org/runtime#Stack\" target=\"_blank\" title=\"https://godoc.org/runtime#Stack\">https://godoc.org/runtime#Stack</a>. I've never done it though. Just an idea.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37504578,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "jay@jayschwa.net",
            "sender_full_name": "Jay Weisskopf Petacat (W2'17)",
            "sender_id": 829,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "debugging/stepping through go?",
            "submessages": [],
            "timestamp": 1427910918,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/5d46121e9a899e151cfcd0e59aa9e9f8a78989e8?x=x&version=1",
            "client": "desktop app Linux 0.4.4",
            "content": "<p><span class=\"user-mention\" data-user-email=\"maia.mcc@gmail.com\">@Maia McCormick (S'14)</span> <span class=\"user-mention\" data-user-email=\"ghthor@gmail.com\">@Willa Walthall (W2'15)</span> If you want to use gdb, use gccgo. WAY easier than using gc</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37504591,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "aditya@adityamukerjee.net",
            "sender_full_name": "Aditya Mukerjee (he) (SP1'15)",
            "sender_id": 7644,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "debugging/stepping through go?",
            "submessages": [],
            "timestamp": 1427910949,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/a1d3f5af6ebf01fccd9e772ca2a04ba5?d=identicon&version=1",
            "client": "website",
            "content": "<p>I'm interested, just picking up Go, but seems like a good project to learn. I likely won't start on it until next week.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37506589,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "ken@kenpratt.net",
            "sender_full_name": "Ken Pratt (he) (SP2'15)",
            "sender_id": 7850,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "go challenge",
            "submessages": [],
            "timestamp": 1427913026,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/0a35beaf5a354dafdf10494c0313e10fffc154fd?x=x&version=1",
            "client": "website",
            "content": "<p>stack traces = definitely potentially useful! i'm tryyying to use <code>debug.PrintStack()</code> (<a href=\"http://golang.org/pkg/runtime/debug/#PrintStack\" target=\"_blank\" title=\"http://golang.org/pkg/runtime/debug/#PrintStack\">http://golang.org/pkg/runtime/debug/#PrintStack</a>) but it doesn't seem to be working...?</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37507088,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "maia.mcc@gmail.com",
            "sender_full_name": "Maia McCormick (she) (S2'14)",
            "sender_id": 6175,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "debugging/stepping through go?",
            "submessages": [],
            "timestamp": 1427913530,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/391eb183c3474a15bf9ad0e87d3ff118?d=identicon&version=1",
            "client": "website",
            "content": "<p>It seems to be working for me if I run it locally. But in the playground it's only displaying the stdout.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37508453,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "ghthor@gmail.com",
            "sender_full_name": "Will Drengwitz (he) (W1'17)",
            "sender_id": 7099,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "debugging/stepping through go?",
            "submessages": [],
            "timestamp": 1427914976,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/391eb183c3474a15bf9ad0e87d3ff118?d=identicon&version=1",
            "client": "website",
            "content": "<p><a href=\"http://play.golang.org/p/pB8Vg-W3wb\" target=\"_blank\" title=\"http://play.golang.org/p/pB8Vg-W3wb\">http://play.golang.org/p/pB8Vg-W3wb</a></p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37508492,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "ghthor@gmail.com",
            "sender_full_name": "Will Drengwitz (he) (W1'17)",
            "sender_id": 7099,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "debugging/stepping through go?",
            "submessages": [],
            "timestamp": 1427915027,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/391eb183c3474a15bf9ad0e87d3ff118?d=identicon&version=1",
            "client": "website",
            "content": "<p><code>go run temp.go</code> produces the following output.</p>\n<div class=\"codehilite\"><pre>/home/ghthor/bin/temp.go:6 (0x400c1b)\n    stack2: debug.PrintStack()\n/home/ghthor/bin/temp.go:10 (0x400c3b)\n    stack1: stack2()\n/home/ghthor/bin/temp.go:14 (0x400c5b)\n    main: stack1()\n/usr/lib/go/src/runtime/proc.go:63 (0x411243)\n    main: main_main()\n/usr/lib/go/src/runtime/asm_amd64.s:2232 (0x436511)\n    goexit:\n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37508548,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "ghthor@gmail.com",
            "sender_full_name": "Will Drengwitz (he) (W1'17)",
            "sender_id": 7099,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "debugging/stepping through go?",
            "submessages": [],
            "timestamp": 1427915085,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/0a35beaf5a354dafdf10494c0313e10fffc154fd?x=x&version=1",
            "client": "website",
            "content": "<p>i think my program/build/whatever is just weird/grumpy/possessed.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37508561,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "maia.mcc@gmail.com",
            "sender_full_name": "Maia McCormick (she) (S2'14)",
            "sender_id": 6175,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "debugging/stepping through go?",
            "submessages": [],
            "timestamp": 1427915112,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/0a35beaf5a354dafdf10494c0313e10fffc154fd?x=x&version=1",
            "client": "website",
            "content": "<p>i quite literally had two unrelated print statements on either side of the debug, and i saw both of those and not the debug. womp.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37508575,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "maia.mcc@gmail.com",
            "sender_full_name": "Maia McCormick (she) (S2'14)",
            "sender_id": 6175,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "debugging/stepping through go?",
            "submessages": [],
            "timestamp": 1427915134,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/0a35beaf5a354dafdf10494c0313e10fffc154fd?x=x&version=1",
            "client": "website",
            "content": "<p><img alt=\":ghost:\" class=\"emoji\" src=\"static/third/gemoji/images/emoji/ghost.png\" title=\":ghost:\"> </p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37508579,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "maia.mcc@gmail.com",
            "sender_full_name": "Maia McCormick (she) (S2'14)",
            "sender_id": 6175,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "debugging/stepping through go?",
            "submessages": [],
            "timestamp": 1427915139,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/391eb183c3474a15bf9ad0e87d3ff118?d=identicon&version=1",
            "client": "website",
            "content": "<p><code>main: main_main()</code> main main</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37508580,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "ghthor@gmail.com",
            "sender_full_name": "Will Drengwitz (he) (W1'17)",
            "sender_id": 7099,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "debugging/stepping through go?",
            "submessages": [],
            "timestamp": 1427915141,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/391eb183c3474a15bf9ad0e87d3ff118?d=identicon&version=1",
            "client": "website",
            "content": "<p>main</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37508588,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "ghthor@gmail.com",
            "sender_full_name": "Will Drengwitz (he) (W1'17)",
            "sender_id": 7099,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "debugging/stepping through go?",
            "submessages": [],
            "timestamp": 1427915149,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/391eb183c3474a15bf9ad0e87d3ff118?d=identicon&version=1",
            "client": "website",
            "content": "<p>what's output of <code>go version</code>?</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37508623,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "ghthor@gmail.com",
            "sender_full_name": "Will Drengwitz (he) (W1'17)",
            "sender_id": 7099,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "debugging/stepping through go?",
            "submessages": [],
            "timestamp": 1427915166,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/0a35beaf5a354dafdf10494c0313e10fffc154fd?x=x&version=1",
            "client": "website",
            "content": "<p>go version go1.4.2 darwin/amd64</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37508649,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "maia.mcc@gmail.com",
            "sender_full_name": "Maia McCormick (she) (S2'14)",
            "sender_id": 6175,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "debugging/stepping through go?",
            "submessages": [],
            "timestamp": 1427915189,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/391eb183c3474a15bf9ad0e87d3ff118?d=identicon&version=1",
            "client": "website",
            "content": "<p>Maybe it's broken on darwin...</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37508655,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "ghthor@gmail.com",
            "sender_full_name": "Will Drengwitz (he) (W1'17)",
            "sender_id": 7099,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "debugging/stepping through go?",
            "submessages": [],
            "timestamp": 1427915200,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/0a35beaf5a354dafdf10494c0313e10fffc154fd?x=x&version=1",
            "client": "website",
            "content": "<p>wommmp whatever</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37508657,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "maia.mcc@gmail.com",
            "sender_full_name": "Maia McCormick (she) (S2'14)",
            "sender_id": 6175,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "debugging/stepping through go?",
            "submessages": [],
            "timestamp": 1427915208,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/391eb183c3474a15bf9ad0e87d3ff118?d=identicon&version=1",
            "client": "website",
            "content": "<p>main()</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37508662,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "ghthor@gmail.com",
            "sender_full_name": "Will Drengwitz (he) (W1'17)",
            "sender_id": 7099,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "debugging/stepping through go?",
            "submessages": [],
            "timestamp": 1427915223,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/0a35beaf5a354dafdf10494c0313e10fffc154fd?x=x&version=1",
            "client": "website",
            "content": "<p>actually having team members talk me through the architecture turns out to be a suitable substitute for strace, for now</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37508665,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "maia.mcc@gmail.com",
            "sender_full_name": "Maia McCormick (she) (S2'14)",
            "sender_id": 6175,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "debugging/stepping through go?",
            "submessages": [],
            "timestamp": 1427915227,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/0a35beaf5a354dafdf10494c0313e10fffc154fd?x=x&version=1",
            "client": "website",
            "content": "<p>(what are you doing with the main()'s?)</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37508669,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "maia.mcc@gmail.com",
            "sender_full_name": "Maia McCormick (she) (S2'14)",
            "sender_id": 6175,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "debugging/stepping through go?",
            "submessages": [],
            "timestamp": 1427915233,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/391eb183c3474a15bf9ad0e87d3ff118?d=identicon&version=1",
            "client": "website",
            "content": "<p>Just a funny part of that stack trace. *hides in a corner*</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37508749,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "ghthor@gmail.com",
            "sender_full_name": "Will Drengwitz (he) (W1'17)",
            "sender_id": 7099,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "debugging/stepping through go?",
            "submessages": [],
            "timestamp": 1427915317,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/0a35beaf5a354dafdf10494c0313e10fffc154fd?x=x&version=1",
            "client": "website",
            "content": "<p>UGH. NO FUN ALLOWED. PROGRAMMING IS SRS BZNS.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37508938,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "maia.mcc@gmail.com",
            "sender_full_name": "Maia McCormick (she) (S2'14)",
            "sender_id": 6175,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "debugging/stepping through go?",
            "submessages": [],
            "timestamp": 1427915587,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/5d46121e9a899e151cfcd0e59aa9e9f8a78989e8?x=x&version=1",
            "client": "desktop app Linux 0.4.4",
            "content": "<p><span class=\"user-mention\" data-user-email=\"travis@mcdem.us\">@Travis McDemus (S'13)</span> are you around the RC space at all on Thurs/Fris</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37509122,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "aditya@adityamukerjee.net",
            "sender_full_name": "Aditya Mukerjee (he) (SP1'15)",
            "sender_id": 7644,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "go challenge",
            "submessages": [],
            "timestamp": 1427915793,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/5d46121e9a899e151cfcd0e59aa9e9f8a78989e8?x=x&version=1",
            "client": "desktop app Linux 0.4.4",
            "content": "<p><span class=\"user-mention\" data-user-email=\"maia.mcc@gmail.com\">@Maia McCormick (S'14)</span> <span class=\"user-mention\" data-user-email=\"ghthor@gmail.com\">@Willa Walthall (W2'15)</span> be aware that a lot of things don't work on the playground</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37509147,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "aditya@adityamukerjee.net",
            "sender_full_name": "Aditya Mukerjee (he) (SP1'15)",
            "sender_id": 7644,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "debugging/stepping through go?",
            "submessages": [],
            "timestamp": 1427915853,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/5d46121e9a899e151cfcd0e59aa9e9f8a78989e8?x=x&version=1",
            "client": "desktop app Linux 0.4.4",
            "content": "<p>well, not \"a lot\", but basically: os, network, time, and (possibly) runtime stuff don't worka s expected</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37509151,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "aditya@adityamukerjee.net",
            "sender_full_name": "Aditya Mukerjee (he) (SP1'15)",
            "sender_id": 7644,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "debugging/stepping through go?",
            "submessages": [],
            "timestamp": 1427915876,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/5d46121e9a899e151cfcd0e59aa9e9f8a78989e8?x=x&version=1",
            "client": "desktop app Linux 0.4.4",
            "content": "<p>so if you ever run into the issue \"hey, this works on the playground, but not on my machine\" or vice versa, that may be way</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37509195,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "aditya@adityamukerjee.net",
            "sender_full_name": "Aditya Mukerjee (he) (SP1'15)",
            "sender_id": 7644,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "debugging/stepping through go?",
            "submessages": [],
            "timestamp": 1427915901,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/5d46121e9a899e151cfcd0e59aa9e9f8a78989e8?x=x&version=1",
            "client": "desktop app Linux 0.4.4",
            "content": "<p>*why</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37509197,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "aditya@adityamukerjee.net",
            "sender_full_name": "Aditya Mukerjee (he) (SP1'15)",
            "sender_id": 7644,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "debugging/stepping through go?",
            "submessages": [],
            "timestamp": 1427915902,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/5d46121e9a899e151cfcd0e59aa9e9f8a78989e8?x=x&version=1",
            "client": "desktop app Linux 0.4.4",
            "content": "<p>/me has been bitten by that a few times</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37509594,
            "is_me_message": true,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "aditya@adityamukerjee.net",
            "sender_full_name": "Aditya Mukerjee (he) (SP1'15)",
            "sender_id": 7644,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "debugging/stepping through go?",
            "submessages": [],
            "timestamp": 1427916411,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/5d46121e9a899e151cfcd0e59aa9e9f8a78989e8?x=x&version=1",
            "client": "desktop app Linux 0.4.4",
            "content": "<p>e.g. <a href=\"http://play.golang.org/p/DGQKX8v3U0\" target=\"_blank\" title=\"http://play.golang.org/p/DGQKX8v3U0\">http://play.golang.org/p/DGQKX8v3U0</a></p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37509604,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "aditya@adityamukerjee.net",
            "sender_full_name": "Aditya Mukerjee (he) (SP1'15)",
            "sender_id": 7644,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "debugging/stepping through go?",
            "submessages": [],
            "timestamp": 1427916436,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/5d46121e9a899e151cfcd0e59aa9e9f8a78989e8?x=x&version=1",
            "client": "desktop app Linux 0.4.4",
            "content": "<p><span class=\"user-mention\" data-user-email=\"maia.mcc@gmail.com\">@Maia McCormick (S'14)</span> </p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37509610,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "aditya@adityamukerjee.net",
            "sender_full_name": "Aditya Mukerjee (he) (SP1'15)",
            "sender_id": 7644,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "debugging/stepping through go?",
            "submessages": [],
            "timestamp": 1427916440,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/391eb183c3474a15bf9ad0e87d3ff118?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"aditya@adityamukerjee.net\">@Aditya Mukerjee (SP1'15)</span> Totally off topic, but did you read the <a href=\"http://blog.golang.org/playground\" target=\"_blank\" title=\"http://blog.golang.org/playground\">blog post</a> on the playground? Has a section on how they faked time, pretty neat.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37512733,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "ghthor@gmail.com",
            "sender_full_name": "Will Drengwitz (he) (W1'17)",
            "sender_id": 7099,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "debugging/stepping through go?",
            "submessages": [],
            "timestamp": 1427920163,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/391eb183c3474a15bf9ad0e87d3ff118?d=identicon&version=1",
            "client": "website",
            "content": "<p>I'm working on a stream processing<a href=\"https://github.com/ghthor/engine/compare/master...stream-processing@%7B%20bf9f320%7D\" target=\"_blank\" title=\"https://github.com/ghthor/engine/compare/master...stream-processing@%7B%20bf9f320%7D\">[1]</a> implementation for my game engine using the principals gleaned from the data-intensive applications thread. I began this endeavor directly with defining the public behavior I want. I'd consider this a living example of designing with interfaces.</p>\n<p>My first<a href=\"https://github.com/ghthor/engine/commit/d789bc838b392ec78a72a766665381965528c50a\" target=\"_blank\" title=\"https://github.com/ghthor/engine/commit/d789bc838b392ec78a72a766665381965528c50a\">[2]</a> attempt was slightly awkward and I refactored<a href=\"https://github.com/ghthor/engine/commit/e120e16d2d2d90cf2bdf19278a95478d4ec5b96a\" target=\"_blank\" title=\"https://github.com/ghthor/engine/commit/e120e16d2d2d90cf2bdf19278a95478d4ec5b96a\">[3]</a> it into smaller interfaces and then an implementation<a href=\"https://github.com/ghthor/engine/commit/d8c1eb67cd1760ba75d0fee29acb5c7c9738109e\" target=\"_blank\" title=\"https://github.com/ghthor/engine/commit/d8c1eb67cd1760ba75d0fee29acb5c7c9738109e\">[4]</a> using a slice and memory as the storage medium.</p>\n<p>[1] <a href=\"https://github.com/ghthor/engine/compare/master...stream-processing@%7B%20bf9f320%7D\" target=\"_blank\" title=\"https://github.com/ghthor/engine/compare/master...stream-processing@%7B%20bf9f320%7D\">https://github.com/ghthor/engine/compare/master...stream-processing@%7B%20bf9f320%7D</a><br>\n[2] <a href=\"https://github.com/ghthor/engine/commit/d789bc838b392ec78a72a766665381965528c50a\" target=\"_blank\" title=\"https://github.com/ghthor/engine/commit/d789bc838b392ec78a72a766665381965528c50a\">https://github.com/ghthor/engine/commit/d789bc838b392ec78a72a766665381965528c50a</a><br>\n[3] <a href=\"https://github.com/ghthor/engine/commit/e120e16d2d2d90cf2bdf19278a95478d4ec5b96a\" target=\"_blank\" title=\"https://github.com/ghthor/engine/commit/e120e16d2d2d90cf2bdf19278a95478d4ec5b96a\">https://github.com/ghthor/engine/commit/e120e16d2d2d90cf2bdf19278a95478d4ec5b96a</a><br>\n[4] <a href=\"https://github.com/ghthor/engine/commit/d8c1eb67cd1760ba75d0fee29acb5c7c9738109e\" target=\"_blank\" title=\"https://github.com/ghthor/engine/commit/d8c1eb67cd1760ba75d0fee29acb5c7c9738109e\">https://github.com/ghthor/engine/commit/d8c1eb67cd1760ba75d0fee29acb5c7c9738109e</a></p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37513930,
            "is_me_message": false,
            "last_edit_timestamp": 1427921688,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "ghthor@gmail.com",
            "sender_full_name": "Will Drengwitz (he) (W1'17)",
            "sender_id": 7099,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "Designing w/ Interfaces",
            "submessages": [],
            "timestamp": 1427921433,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/391eb183c3474a15bf9ad0e87d3ff118?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"aditya@adityamukerjee.net\">@Aditya Mukerjee (SP1'15)</span> <span class=\"user-mention\" data-user-email=\"jdp5087@gmail.com\">@Jon Poler (W2'15)</span> <span class=\"user-mention\" data-user-email=\"marin.alcaraz@gmail.com\">@Mar\u00edn Alcaraz C\u00f3rdova (W2'15)</span> <span class=\"user-mention\" data-user-email=\"max.t.mcdonnell@gmail.com\">@Max McDonnell (W2'15)</span></p>\n<p>I'm looking for any feedback or questions.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37514043,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "ghthor@gmail.com",
            "sender_full_name": "Will Drengwitz (he) (W1'17)",
            "sender_id": 7099,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "Designing w/ Interfaces",
            "submessages": [],
            "timestamp": 1427921612,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/229e3746f6f5100c1d7d5d7a8a5b82d5?d=identicon&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>Whoa, I was totally thinking of building a go game engine. This is so cool.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37514533,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "nat@natwelch.com",
            "sender_full_name": "Nat Welch (he) (SP2'15)",
            "sender_id": 7866,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "Designing w/ Interfaces",
            "submessages": [],
            "timestamp": 1427922184,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/1380ded36dafac0d6f808b9b7b6c4e85266428a1?x=x&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p><span class=\"user-mention\" data-user-email=\"aditya@adityamukerjee.net\">@Aditya Mukerjee (SP1'15)</span>  Yeah, I could be definitely be tomorrow evening! If that's too late I could stop by for an hour or so on Friday (I'm over on Varick St.) or maybe take off that afternoon. Which works best?</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37516507,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "travis@mcdem.us",
            "sender_full_name": "Travis McDemus (S'13)",
            "sender_id": 2139,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "go challenge",
            "submessages": [],
            "timestamp": 1427924449,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/5d46121e9a899e151cfcd0e59aa9e9f8a78989e8?x=x&version=1",
            "client": "desktop app Linux 0.4.4",
            "content": "<p>What time tomorrow were you thinking?</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37528960,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "aditya@adityamukerjee.net",
            "sender_full_name": "Aditya Mukerjee (he) (SP1'15)",
            "sender_id": 7644,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "go challenge",
            "submessages": [],
            "timestamp": 1427945028,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/391eb183c3474a15bf9ad0e87d3ff118?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"nat@natwelch.com\">@Nat Welch (SP2'15)</span> I'm building the server component in Go, the client/rendering I am building using a mixture of gopherjs + js and displaying in the browser. My current direction is removing the game loop on the server and turning the whole thing into an immutable event processing stream.</p>\n<p>client input -&gt; websocket -&gt; input handler -&gt; immutable event -&gt; world agent -&gt; immutable state change(ex: started moving, used ability) -&gt; send change out to clients -&gt; render change</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37544189,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "ghthor@gmail.com",
            "sender_full_name": "Will Drengwitz (he) (W1'17)",
            "sender_id": 7099,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "Designing w/ Interfaces",
            "submessages": [],
            "timestamp": 1427980034,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/b05b48dffacfe8bc5336d44718f65da6?d=identicon&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>If any go people can help with a confusing channel blocking behavior, Dakota and I are a bit stuck!  thanks!</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37553370,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "brian@glusman.me",
            "sender_full_name": "Brian Glusman (SP2'15)",
            "sender_id": 7848,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "channels",
            "submessages": [],
            "timestamp": 1427992804,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/1380ded36dafac0d6f808b9b7b6c4e85266428a1?x=x&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>Hey <span class=\"user-mention\" data-user-email=\"brian@glusman.me\">@Brian Glusman (SP2'15)</span> , are you around after 6:30 maybe? I might be able to help.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37559596,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "travis@mcdem.us",
            "sender_full_name": "Travis McDemus (S'13)",
            "sender_id": 2139,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "channels",
            "submessages": [],
            "timestamp": 1428000427,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/a179bb8c3fc4ab0975954f57d47fa6c53a8c2dad?x=x&version=2",
            "client": "website",
            "content": "<p>If you have a kernel that can be posted here or in playground, I'm sure there are remote gophers who would take a look at it <img alt=\":gopher:\" class=\"emoji\" src=\"https://golang.org/doc/gopher/gopherbw.png\" title=\":gopher:\"></p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37560081,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "jay@jayschwa.net",
            "sender_full_name": "Jay Weisskopf Petacat (W2'17)",
            "sender_id": 829,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "channels",
            "submessages": [],
            "timestamp": 1428000898,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/5d46121e9a899e151cfcd0e59aa9e9f8a78989e8?x=x&version=1",
            "client": "desktop app Linux 0.4.4",
            "content": "<p>I'm also sitting right next to you guys if you're still having issues. :)</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37560482,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "aditya@adityamukerjee.net",
            "sender_full_name": "Aditya Mukerjee (he) (SP1'15)",
            "sender_id": 7644,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "channels",
            "submessages": [],
            "timestamp": 1428001347,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/1380ded36dafac0d6f808b9b7b6c4e85266428a1?x=x&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p><span class=\"user-mention\" data-user-email=\"aditya@adityamukerjee.net\">@Aditya Mukerjee (SP1'15)</span> I could show up as early as 6:30. That work OK?</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37561273,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "travis@mcdem.us",
            "sender_full_name": "Travis McDemus (S'13)",
            "sender_id": 2139,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "go challenge",
            "submessages": [],
            "timestamp": 1428002403,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/b05b48dffacfe8bc5336d44718f65da6?d=identicon&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>Thanks all!  Sorry, got help, appreciate offeers though!</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37561890,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "brian@glusman.me",
            "sender_full_name": "Brian Glusman (SP2'15)",
            "sender_id": 7848,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "channels",
            "submessages": [],
            "timestamp": 1428003172,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/b05b48dffacfe8bc5336d44718f65da6?d=identicon&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>I think if I remember correctly we neeed to close the channel and didn't know that :-)</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37561906,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "brian@glusman.me",
            "sender_full_name": "Brian Glusman (SP2'15)",
            "sender_id": 7848,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "channels",
            "submessages": [],
            "timestamp": 1428003195,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/5d46121e9a899e151cfcd0e59aa9e9f8a78989e8?x=x&version=1",
            "client": "desktop app Linux 0.4.4",
            "content": "<p>sounds good - see you then!</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37562719,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "aditya@adityamukerjee.net",
            "sender_full_name": "Aditya Mukerjee (he) (SP1'15)",
            "sender_id": 7644,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "go challenge",
            "submessages": [],
            "timestamp": 1428004236,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/1380ded36dafac0d6f808b9b7b6c4e85266428a1?x=x&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p><img alt=\":thumbsup:\" class=\"emoji\" src=\"static/third/gemoji/images/emoji/thumbsup.png\" title=\":thumbsup:\"> <img alt=\":gopher:\" class=\"emoji\" src=\"https://golang.org/doc/gopher/gopherbw.png\" title=\":gopher:\"></p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37563960,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "travis@mcdem.us",
            "sender_full_name": "Travis McDemus (S'13)",
            "sender_id": 2139,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "go challenge",
            "submessages": [],
            "timestamp": 1428005853,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/391eb183c3474a15bf9ad0e87d3ff118?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"brian@glusman.me\">@Brian Glusman (SP2'15)</span> I've only recently started appreciating how useful it is to identify the lifetime of a channel and closing it at the correct time. It's kind of neat, it's like managing memory in C, and, OMG, having a panic because of a send on a closed channel or a non blocking read on a closed channel can really help with finding bugs.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37566478,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "ghthor@gmail.com",
            "sender_full_name": "Will Drengwitz (he) (W1'17)",
            "sender_id": 7099,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "channels",
            "submessages": [],
            "timestamp": 1428009186,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/0a35beaf5a354dafdf10494c0313e10fffc154fd?x=x&version=1",
            "client": "website",
            "content": "<p>can someone give me an example of how(/why) one might use interfaces?</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37566867,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "maia.mcc@gmail.com",
            "sender_full_name": "Maia McCormick (she) (S2'14)",
            "sender_id": 6175,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "interfaces",
            "submessages": [],
            "timestamp": 1428009638,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/1380ded36dafac0d6f808b9b7b6c4e85266428a1?x=x&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>brb</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37566954,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "travis@mcdem.us",
            "sender_full_name": "Travis McDemus (S'13)",
            "sender_id": 2139,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "interfaces",
            "submessages": [],
            "timestamp": 1428009755,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/1380ded36dafac0d6f808b9b7b6c4e85266428a1?x=x&version=1",
            "client": "website",
            "content": "<p>OK, back on my chromebook.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37567143,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "travis@mcdem.us",
            "sender_full_name": "Travis McDemus (S'13)",
            "sender_id": 2139,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "interfaces",
            "submessages": [],
            "timestamp": 1428010035,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/1380ded36dafac0d6f808b9b7b6c4e85266428a1?x=x&version=1",
            "client": "website",
            "content": "<p>Here's a weird example I cooked up to see how some of this stuff worked:  <a href=\"https://play.golang.org/p/5rQ7LgR3Wl\" target=\"_blank\" title=\"https://play.golang.org/p/5rQ7LgR3Wl\">https://play.golang.org/p/5rQ7LgR3Wl</a></p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37567222,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "travis@mcdem.us",
            "sender_full_name": "Travis McDemus (S'13)",
            "sender_id": 2139,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "interfaces",
            "submessages": [],
            "timestamp": 1428010149,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/1380ded36dafac0d6f808b9b7b6c4e85266428a1?x=x&version=1",
            "client": "website",
            "content": "<p>So the \"slug\" type and the \"octopus\" type both satisfy the \"oozer\" interface because they both have an \"ooze\" method bound to the respective types. </p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37567245,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "travis@mcdem.us",
            "sender_full_name": "Travis McDemus (S'13)",
            "sender_id": 2139,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "interfaces",
            "submessages": [],
            "timestamp": 1428010197,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/1380ded36dafac0d6f808b9b7b6c4e85266428a1?x=x&version=1",
            "client": "website",
            "content": "<p>This means I can make other methods that take an \"oozer\" as a type, and those methods don't care if I sent an octopus or a slug in. </p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37567311,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "travis@mcdem.us",
            "sender_full_name": "Travis McDemus (S'13)",
            "sender_id": 2139,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "interfaces",
            "submessages": [],
            "timestamp": 1428010233,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/1380ded36dafac0d6f808b9b7b6c4e85266428a1?x=x&version=1",
            "client": "website",
            "content": "<p>Same thing for channels - I can make a channel of type oozer and send in an octopus or a slug.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37567327,
            "is_me_message": false,
            "last_edit_timestamp": 1428010313,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "travis@mcdem.us",
            "sender_full_name": "Travis McDemus (S'13)",
            "sender_id": 2139,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "interfaces",
            "submessages": [],
            "timestamp": 1428010256,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/1380ded36dafac0d6f808b9b7b6c4e85266428a1?x=x&version=1",
            "client": "website",
            "content": "<p>I don't know if that's totally equivalent to what the term \"duck typing\" means in python, but it seems similar.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37567348,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "travis@mcdem.us",
            "sender_full_name": "Travis McDemus (S'13)",
            "sender_id": 2139,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "interfaces",
            "submessages": [],
            "timestamp": 1428010286,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/0a35beaf5a354dafdf10494c0313e10fffc154fd?x=x&version=1",
            "client": "website",
            "content": "<p>well i don't know what 'duck typing' is, but cool, will look at htis!</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37567420,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "maia.mcc@gmail.com",
            "sender_full_name": "Maia McCormick (she) (S2'14)",
            "sender_id": 6175,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "interfaces",
            "submessages": [],
            "timestamp": 1428010360,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/0a35beaf5a354dafdf10494c0313e10fffc154fd?x=x&version=1",
            "client": "website",
            "content": "<p>haha <span class=\"user-mention\" data-user-email=\"travis@mcdem.us\">@Travis McDemus (S'13)</span> that's great!! <img alt=\":octopus:\" class=\"emoji\" src=\"static/third/gemoji/images/emoji/octopus.png\" title=\":octopus:\"> </p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37567443,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "maia.mcc@gmail.com",
            "sender_full_name": "Maia McCormick (she) (S2'14)",
            "sender_id": 6175,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "interfaces",
            "submessages": [],
            "timestamp": 1428010420,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/1380ded36dafac0d6f808b9b7b6c4e85266428a1?x=x&version=1",
            "client": "website",
            "content": "<p>no :slug: emoji, unfortunately :/</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37567476,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "travis@mcdem.us",
            "sender_full_name": "Travis McDemus (S'13)",
            "sender_id": 2139,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "interfaces",
            "submessages": [],
            "timestamp": 1428010446,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/0a35beaf5a354dafdf10494c0313e10fffc154fd?x=x&version=1",
            "client": "website",
            "content": "<p>damnit <span class=\"user-mention\" data-user-email=\"lfranchi@kde.org\">@Leo Franchi (F'12)</span> ...</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37567520,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "maia.mcc@gmail.com",
            "sender_full_name": "Maia McCormick (she) (S2'14)",
            "sender_id": 6175,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "interfaces",
            "submessages": [],
            "timestamp": 1428010510,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/1380ded36dafac0d6f808b9b7b6c4e85266428a1?x=x&version=1",
            "client": "website",
            "content": "<p>oh, yeah, another thing in there that's not super obvious... the interface is intentionally named \"oozer\" with a deliberate \"er\" at the end of the word.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37567522,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "travis@mcdem.us",
            "sender_full_name": "Travis McDemus (S'13)",
            "sender_id": 2139,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "interfaces",
            "submessages": [],
            "timestamp": 1428010511,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/0a35beaf5a354dafdf10494c0313e10fffc154fd?x=x&version=1",
            "client": "website",
            "content": "<p>ah, that is the convention then?</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37567539,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "maia.mcc@gmail.com",
            "sender_full_name": "Maia McCormick (she) (S2'14)",
            "sender_id": 6175,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "interfaces",
            "submessages": [],
            "timestamp": 1428010548,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/1380ded36dafac0d6f808b9b7b6c4e85266428a1?x=x&version=1",
            "client": "website",
            "content": "<p>Interfaces in the standard library end with \"er\" a lot. A good example is the \"Stringer\" interface. </p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37567541,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "travis@mcdem.us",
            "sender_full_name": "Travis McDemus (S'13)",
            "sender_id": 2139,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "interfaces",
            "submessages": [],
            "timestamp": 1428010551,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/1380ded36dafac0d6f808b9b7b6c4e85266428a1?x=x&version=1",
            "client": "website",
            "content": "<p>yeah, seems to be a convention.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37567551,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "travis@mcdem.us",
            "sender_full_name": "Travis McDemus (S'13)",
            "sender_id": 2139,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "interfaces",
            "submessages": [],
            "timestamp": 1428010562,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/1380ded36dafac0d6f808b9b7b6c4e85266428a1?x=x&version=1",
            "client": "website",
            "content": "<p>But lots of types have a \"func (t myType) String() string {...}\" method bound to them.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37567599,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "travis@mcdem.us",
            "sender_full_name": "Travis McDemus (S'13)",
            "sender_id": 2139,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "interfaces",
            "submessages": [],
            "timestamp": 1428010591,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/0a35beaf5a354dafdf10494c0313e10fffc154fd?x=x&version=1",
            "client": "website",
            "content": "<p>stringer!! this makes so much sense! so a bunch of different types (ints, strings, slices, structs, whatever) have something like .toString, and so the fmt.Println and related funcs can take any Stringer, is that right?</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37567615,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "maia.mcc@gmail.com",
            "sender_full_name": "Maia McCormick (she) (S2'14)",
            "sender_id": 6175,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "interfaces",
            "submessages": [],
            "timestamp": 1428010620,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/1380ded36dafac0d6f808b9b7b6c4e85266428a1?x=x&version=1",
            "client": "website",
            "content": "<p>So when you \"fmt.Println(t)\"  it'll print whatever that String() method returns as the string representation of that instance. </p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37567620,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "travis@mcdem.us",
            "sender_full_name": "Travis McDemus (S'13)",
            "sender_id": 2139,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "interfaces",
            "submessages": [],
            "timestamp": 1428010627,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/1380ded36dafac0d6f808b9b7b6c4e85266428a1?x=x&version=1",
            "client": "website",
            "content": "<p>Yeah!! exactly</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37567630,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "travis@mcdem.us",
            "sender_full_name": "Travis McDemus (S'13)",
            "sender_id": 2139,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "interfaces",
            "submessages": [],
            "timestamp": 1428010639,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/1380ded36dafac0d6f808b9b7b6c4e85266428a1?x=x&version=1",
            "client": "website",
            "content": "<p>You understood it faster than I could type it :) </p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37567643,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "travis@mcdem.us",
            "sender_full_name": "Travis McDemus (S'13)",
            "sender_id": 2139,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "interfaces",
            "submessages": [],
            "timestamp": 1428010658,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/0a35beaf5a354dafdf10494c0313e10fffc154fd?x=x&version=1",
            "client": "website",
            "content": "<p>in fairness, i'd already glanced at an article about it</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37567725,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "maia.mcc@gmail.com",
            "sender_full_name": "Maia McCormick (she) (S2'14)",
            "sender_id": 6175,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "interfaces",
            "submessages": [],
            "timestamp": 1428010729,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/0a35beaf5a354dafdf10494c0313e10fffc154fd?x=x&version=1",
            "client": "website",
            "content": "<p>but yeah, i'll take your praise :D</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37567729,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "maia.mcc@gmail.com",
            "sender_full_name": "Maia McCormick (she) (S2'14)",
            "sender_id": 6175,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "interfaces",
            "submessages": [],
            "timestamp": 1428010733,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/1380ded36dafac0d6f808b9b7b6c4e85266428a1?x=x&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>:D </p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37567740,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "travis@mcdem.us",
            "sender_full_name": "Travis McDemus (S'13)",
            "sender_id": 2139,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "interfaces",
            "submessages": [],
            "timestamp": 1428010758,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/1380ded36dafac0d6f808b9b7b6c4e85266428a1?x=x&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>Oh yeah, articles...</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37567763,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "travis@mcdem.us",
            "sender_full_name": "Travis McDemus (S'13)",
            "sender_id": 2139,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "interfaces",
            "submessages": [],
            "timestamp": 1428010801,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/1380ded36dafac0d6f808b9b7b6c4e85266428a1?x=x&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p><span class=\"user-mention\" data-user-email=\"jordanorelli@gmail.com\">@Jordan Orelli (F'11)</span> wrote up this one some time ago: <a href=\"http://jordanorelli.com/post/32665860244/how-to-use-interfaces-in-go\" target=\"_blank\" title=\"http://jordanorelli.com/post/32665860244/how-to-use-interfaces-in-go\">http://jordanorelli.com/post/32665860244/how-to-use-interfaces-in-go</a></p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37567815,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "travis@mcdem.us",
            "sender_full_name": "Travis McDemus (S'13)",
            "sender_id": 2139,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "interfaces",
            "submessages": [],
            "timestamp": 1428010822,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/0a35beaf5a354dafdf10494c0313e10fffc154fd?x=x&version=1",
            "client": "website",
            "content": "<p>huh, no, it was totally go tour: <a href=\"https://tour.golang.org/methods/6\" target=\"_blank\" title=\"https://tour.golang.org/methods/6\">https://tour.golang.org/methods/6</a></p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37567822,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "maia.mcc@gmail.com",
            "sender_full_name": "Maia McCormick (she) (S2'14)",
            "sender_id": 6175,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "interfaces",
            "submessages": [],
            "timestamp": 1428010834,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/0a35beaf5a354dafdf10494c0313e10fffc154fd?x=x&version=1",
            "client": "website",
            "content": "<p>can you explain what's going on here? this func syntax isn't something i've seen before:</p>\n<div class=\"codehilite\"><pre><span class=\"k\">func</span> <span class=\"p\">(</span><span class=\"n\">p</span> <span class=\"n\">Person</span><span class=\"p\">)</span> <span class=\"n\">String</span><span class=\"p\">()</span> <span class=\"nb\">string</span> <span class=\"p\">{</span>\n    <span class=\"k\">return</span> <span class=\"n\">fmt</span><span class=\"p\">.</span><span class=\"n\">Sprintf</span><span class=\"p\">(</span><span class=\"s\">&quot;%v (%v years)&quot;</span><span class=\"p\">,</span> <span class=\"n\">p</span><span class=\"p\">.</span><span class=\"n\">Name</span><span class=\"p\">,</span> <span class=\"n\">p</span><span class=\"p\">.</span><span class=\"n\">Age</span><span class=\"p\">)</span>\n<span class=\"p\">}</span>\n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37567833,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "maia.mcc@gmail.com",
            "sender_full_name": "Maia McCormick (she) (S2'14)",
            "sender_id": 6175,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "interfaces",
            "submessages": [],
            "timestamp": 1428010855,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/1380ded36dafac0d6f808b9b7b6c4e85266428a1?x=x&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>The go tour's kinda confusing.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37567865,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "travis@mcdem.us",
            "sender_full_name": "Travis McDemus (S'13)",
            "sender_id": 2139,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "interfaces",
            "submessages": [],
            "timestamp": 1428010920,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/1380ded36dafac0d6f808b9b7b6c4e85266428a1?x=x&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>It always read to me more like a sales pitch to existing C++ or Java programmers than anything else. It makes some assumptions about pointers, etc.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37567925,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "travis@mcdem.us",
            "sender_full_name": "Travis McDemus (S'13)",
            "sender_id": 2139,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "interfaces",
            "submessages": [],
            "timestamp": 1428010960,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/0a35beaf5a354dafdf10494c0313e10fffc154fd?x=x&version=1",
            "client": "website",
            "content": "<p>OMG SO MUCH YES</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37567937,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "maia.mcc@gmail.com",
            "sender_full_name": "Maia McCormick (she) (S2'14)",
            "sender_id": 6175,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "interfaces",
            "submessages": [],
            "timestamp": 1428010978,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/0a35beaf5a354dafdf10494c0313e10fffc154fd?x=x&version=1",
            "client": "website",
            "content": "<p>i'm glad that wasn't just me who found that really strange...</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37567945,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "maia.mcc@gmail.com",
            "sender_full_name": "Maia McCormick (she) (S2'14)",
            "sender_id": 6175,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "interfaces",
            "submessages": [],
            "timestamp": 1428010986,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/1380ded36dafac0d6f808b9b7b6c4e85266428a1?x=x&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>It shows things, but it doesn't really explain things. </p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37567950,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "travis@mcdem.us",
            "sender_full_name": "Travis McDemus (S'13)",
            "sender_id": 2139,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "interfaces",
            "submessages": [],
            "timestamp": 1428010996,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/1380ded36dafac0d6f808b9b7b6c4e85266428a1?x=x&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>I put together some resources a while ago: <a href=\"http://bitbarf.in/blog/2013/11/05/an-abridged-introduction-to-go/\" target=\"_blank\" title=\"http://bitbarf.in/blog/2013/11/05/an-abridged-introduction-to-go/\">http://bitbarf.in/blog/2013/11/05/an-abridged-introduction-to-go/</a></p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37567970,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "travis@mcdem.us",
            "sender_full_name": "Travis McDemus (S'13)",
            "sender_id": 2139,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "interfaces",
            "submessages": [],
            "timestamp": 1428011032,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/1380ded36dafac0d6f808b9b7b6c4e85266428a1?x=x&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>They probably aren't the most current.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37567994,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "travis@mcdem.us",
            "sender_full_name": "Travis McDemus (S'13)",
            "sender_id": 2139,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "interfaces",
            "submessages": [],
            "timestamp": 1428011044,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/1380ded36dafac0d6f808b9b7b6c4e85266428a1?x=x&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>But yeah, answering the actual question!</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37568016,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "travis@mcdem.us",
            "sender_full_name": "Travis McDemus (S'13)",
            "sender_id": 2139,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "interfaces",
            "submessages": [],
            "timestamp": 1428011057,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/1380ded36dafac0d6f808b9b7b6c4e85266428a1?x=x&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p><code>func (p Person) String() string</code> reads as function that is *bound* to the \"Person\" type named \"String\" that returns a \"string\".</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37568084,
            "is_me_message": false,
            "last_edit_timestamp": 1428011164,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "travis@mcdem.us",
            "sender_full_name": "Travis McDemus (S'13)",
            "sender_id": 2139,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "interfaces",
            "submessages": [],
            "timestamp": 1428011152,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/1380ded36dafac0d6f808b9b7b6c4e85266428a1?x=x&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>That extra 'p' in there is an instance variable... think of it like <code>this</code> in Java or <code>self</code> in python.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37568183,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "travis@mcdem.us",
            "sender_full_name": "Travis McDemus (S'13)",
            "sender_id": 2139,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "interfaces",
            "submessages": [],
            "timestamp": 1428011207,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/1380ded36dafac0d6f808b9b7b6c4e85266428a1?x=x&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>maybe instance variable isn't the right word, but if I do something like <code>sam := Person{}</code> and <code>sam.String()</code> .... that 'p' in the function signature ends up refering to \u201csam\". </p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37568288,
            "is_me_message": false,
            "last_edit_timestamp": 1428011313,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "travis@mcdem.us",
            "sender_full_name": "Travis McDemus (S'13)",
            "sender_id": 2139,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "interfaces",
            "submessages": [],
            "timestamp": 1428011281,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/0a35beaf5a354dafdf10494c0313e10fffc154fd?x=x&version=1",
            "client": "website",
            "content": "<p>aaah duh, i got it</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37568439,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "maia.mcc@gmail.com",
            "sender_full_name": "Maia McCormick (she) (S2'14)",
            "sender_id": 6175,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "interfaces",
            "submessages": [],
            "timestamp": 1428011388,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/0a35beaf5a354dafdf10494c0313e10fffc154fd?x=x&version=1",
            "client": "website",
            "content": "<p>i totally know that syntax, i just wasn't squinting right at it</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37568652,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "maia.mcc@gmail.com",
            "sender_full_name": "Maia McCormick (she) (S2'14)",
            "sender_id": 6175,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "interfaces",
            "submessages": [],
            "timestamp": 1428011480,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/0a35beaf5a354dafdf10494c0313e10fffc154fd?x=x&version=1",
            "client": "website",
            "content": "<p>while i've got you here: can you explain what's going on in <a href=\"http://www.golang-book.com/9/index.htm\" target=\"_blank\" title=\"http://www.golang-book.com/9/index.htm\">http://www.golang-book.com/9/index.htm</a> with Embedded Types?</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37568670,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "maia.mcc@gmail.com",
            "sender_full_name": "Maia McCormick (she) (S2'14)",
            "sender_id": 6175,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "interfaces",
            "submessages": [],
            "timestamp": 1428011519,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/0a35beaf5a354dafdf10494c0313e10fffc154fd?x=x&version=1",
            "client": "website",
            "content": "<p>it SEEMS equivalent to quote-unquote-subclassing, to the extent that it exists in Go... so:</p>\n<div class=\"codehilite\"><pre><span class=\"k\">type</span> <span class=\"n\">Person</span> <span class=\"k\">struct</span> <span class=\"p\">{</span>\n    <span class=\"n\">Name</span> <span class=\"nb\">string</span>\n<span class=\"p\">}</span>\n\n<span class=\"k\">func</span> <span class=\"p\">(</span><span class=\"n\">p</span> <span class=\"p\">*</span><span class=\"n\">Person</span><span class=\"p\">)</span> <span class=\"n\">Talk</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n    <span class=\"n\">fmt</span><span class=\"p\">.</span><span class=\"n\">Println</span><span class=\"p\">(</span><span class=\"s\">&quot;Hi, my name is&quot;</span><span class=\"p\">,</span> <span class=\"n\">p</span><span class=\"p\">.</span><span class=\"n\">Name</span><span class=\"p\">)</span>\n<span class=\"p\">}</span>\n\n<span class=\"k\">type</span> <span class=\"n\">Android</span> <span class=\"n\">Person</span> <span class=\"p\">{</span>\n    <span class=\"n\">Model</span> <span class=\"nb\">string</span>\n<span class=\"p\">}</span>\n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37568762,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "maia.mcc@gmail.com",
            "sender_full_name": "Maia McCormick (she) (S2'14)",
            "sender_id": 6175,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "interfaces",
            "submessages": [],
            "timestamp": 1428011609,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/0a35beaf5a354dafdf10494c0313e10fffc154fd?x=x&version=1",
            "client": "website",
            "content": "<p>is that... sort of right? it feels like the behavior is the same... maybe? i'm confused.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37568770,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "maia.mcc@gmail.com",
            "sender_full_name": "Maia McCormick (she) (S2'14)",
            "sender_id": 6175,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "interfaces",
            "submessages": [],
            "timestamp": 1428011625,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/1380ded36dafac0d6f808b9b7b6c4e85266428a1?x=x&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>Yeah, that's what it does seem like.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37568826,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "travis@mcdem.us",
            "sender_full_name": "Travis McDemus (S'13)",
            "sender_id": 2139,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "interfaces",
            "submessages": [],
            "timestamp": 1428011687,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/1380ded36dafac0d6f808b9b7b6c4e85266428a1?x=x&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>Between nesting structs in other structs (e.g. composing the data) and then binding functions to the struct types (composing interfaces) you don't really *need* inheritence. </p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37568841,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "travis@mcdem.us",
            "sender_full_name": "Travis McDemus (S'13)",
            "sender_id": 2139,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "interfaces",
            "submessages": [],
            "timestamp": 1428011724,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/0a35beaf5a354dafdf10494c0313e10fffc154fd?x=x&version=1",
            "client": "website",
            "content": "<p>composing the data? say more?</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37568858,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "maia.mcc@gmail.com",
            "sender_full_name": "Maia McCormick (she) (S2'14)",
            "sender_id": 6175,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "interfaces",
            "submessages": [],
            "timestamp": 1428011749,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/1380ded36dafac0d6f808b9b7b6c4e85266428a1?x=x&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>Oh wat </p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37568859,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "travis@mcdem.us",
            "sender_full_name": "Travis McDemus (S'13)",
            "sender_id": 2139,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "interfaces",
            "submessages": [],
            "timestamp": 1428011749,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/1380ded36dafac0d6f808b9b7b6c4e85266428a1?x=x&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>type Android Person {...} </p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37568879,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "travis@mcdem.us",
            "sender_full_name": "Travis McDemus (S'13)",
            "sender_id": 2139,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "interfaces",
            "submessages": [],
            "timestamp": 1428011763,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/1380ded36dafac0d6f808b9b7b6c4e85266428a1?x=x&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>have I seen that before?</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37568906,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "travis@mcdem.us",
            "sender_full_name": "Travis McDemus (S'13)",
            "sender_id": 2139,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "interfaces",
            "submessages": [],
            "timestamp": 1428011771,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/1380ded36dafac0d6f808b9b7b6c4e85266428a1?x=x&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>brb</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37568936,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "travis@mcdem.us",
            "sender_full_name": "Travis McDemus (S'13)",
            "sender_id": 2139,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "interfaces",
            "submessages": [],
            "timestamp": 1428011825,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/0a35beaf5a354dafdf10494c0313e10fffc154fd?x=x&version=1",
            "client": "website",
            "content": "<p>(i've got to run but if you have more wisdom for me, i'll read it when i'm back online! thaaaanks <span class=\"user-mention\" data-user-email=\"travis@mcdem.us\">@Travis McDemus (S'13)</span>  <img alt=\":smile:\" class=\"emoji\" src=\"static/third/gemoji/images/emoji/smile.png\" title=\":smile:\"> )</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37569151,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "maia.mcc@gmail.com",
            "sender_full_name": "Maia McCormick (she) (S2'14)",
            "sender_id": 6175,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "interfaces",
            "submessages": [],
            "timestamp": 1428012062,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/1380ded36dafac0d6f808b9b7b6c4e85266428a1?x=x&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p><a href=\"http://play.golang.org/p/W0_RDbvMT8\" target=\"_blank\" title=\"http://play.golang.org/p/W0_RDbvMT8\">http://play.golang.org/p/W0_RDbvMT8</a></p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37569224,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "travis@mcdem.us",
            "sender_full_name": "Travis McDemus (S'13)",
            "sender_id": 2139,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "interfaces",
            "submessages": [],
            "timestamp": 1428012134,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/1380ded36dafac0d6f808b9b7b6c4e85266428a1?x=x&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>That's probably not the best example, but that's what I meant about composing \"data\" or \"structs\". ... A robot can have legs, which are another struct type, which I could add other fields / types into later (e.g. shoes or toes or something)</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37569234,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "travis@mcdem.us",
            "sender_full_name": "Travis McDemus (S'13)",
            "sender_id": 2139,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "interfaces",
            "submessages": [],
            "timestamp": 1428012194,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/1380ded36dafac0d6f808b9b7b6c4e85266428a1?x=x&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>This is kind of what I meant by data \"composition\"  ... and android is part human, part robot, right?<br>\n<a href=\"http://play.golang.org/p/orGE20_VSk\" target=\"_blank\" title=\"http://play.golang.org/p/orGE20_VSk\">http://play.golang.org/p/orGE20_VSk</a></p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37569527,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "travis@mcdem.us",
            "sender_full_name": "Travis McDemus (S'13)",
            "sender_id": 2139,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "interfaces",
            "submessages": [],
            "timestamp": 1428012624,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/1380ded36dafac0d6f808b9b7b6c4e85266428a1?x=x&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>In a multiple inheritence language, Android would inherit from both Robot and Human. </p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37569542,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "travis@mcdem.us",
            "sender_full_name": "Travis McDemus (S'13)",
            "sender_id": 2139,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "interfaces",
            "submessages": [],
            "timestamp": 1428012678,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/1380ded36dafac0d6f808b9b7b6c4e85266428a1?x=x&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>With the struct composition, it's a little bit clear where things come from though.  Want stuff from the human part of the Android?  OK.  <code>fmt.Println(anAndroid.Human.numCells}</code></p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37569608,
            "is_me_message": false,
            "last_edit_timestamp": 1428012782,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "travis@mcdem.us",
            "sender_full_name": "Travis McDemus (S'13)",
            "sender_id": 2139,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "interfaces",
            "submessages": [],
            "timestamp": 1428012744,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/1380ded36dafac0d6f808b9b7b6c4e85266428a1?x=x&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>In a language like Java where peolpe use inheritence a lot, you'd probably get stuck with something like <code>System.out.println(anAndroid.numCells);</code></p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37569667,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "travis@mcdem.us",
            "sender_full_name": "Travis McDemus (S'13)",
            "sender_id": 2139,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "interfaces",
            "submessages": [],
            "timestamp": 1428012844,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/1380ded36dafac0d6f808b9b7b6c4e85266428a1?x=x&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>That probably doesn't seem like a huge deal here, but you don't 100% know that the \"numCells\" field came from the \"human\" side of the android when using inheritence... you have to open the class file and look it up. With the struct composition in Go, it's right there in the line of code you're reading.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37569722,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "travis@mcdem.us",
            "sender_full_name": "Travis McDemus (S'13)",
            "sender_id": 2139,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "interfaces",
            "submessages": [],
            "timestamp": 1428012907,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/1380ded36dafac0d6f808b9b7b6c4e85266428a1?x=x&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>*redacting how this is harder in Java for a blog post, maybe*</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37569918,
            "is_me_message": false,
            "last_edit_timestamp": 1428013283,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "travis@mcdem.us",
            "sender_full_name": "Travis McDemus (S'13)",
            "sender_id": 2139,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "interfaces",
            "submessages": [],
            "timestamp": 1428013175,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/05023e2779bfc2793d79ee30c81af6ca291539ce?x=x&version=1",
            "client": "website",
            "content": "<p>sleeper has awakened</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37571030,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "jordanorelli@gmail.com",
            "sender_full_name": "Jordan Orelli (F'11)",
            "sender_id": 872,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "interfaces",
            "submessages": [],
            "timestamp": 1428014853,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/05023e2779bfc2793d79ee30c81af6ca291539ce?x=x&version=1",
            "client": "website",
            "content": "<p>yeah travis seems to have covered it.  if there's anything in that post that's vague or weird let me know and i can try to clarify</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37571106,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "jordanorelli@gmail.com",
            "sender_full_name": "Jordan Orelli (F'11)",
            "sender_id": 872,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "interfaces",
            "submessages": [],
            "timestamp": 1428014994,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/a179bb8c3fc4ab0975954f57d47fa6c53a8c2dad?x=x&version=2",
            "client": "website",
            "content": "<blockquote>\n<p>can someone give me an example of how(/why) one might use interfaces?</p>\n</blockquote>\n<p>Not sure if anybody mentioned this yet, but interfaces are used for separating the \"what\" from the \"how\". For instance, Java has a <code>List</code> interface that defines <strong>what</strong> you can do with a list object (add, get, remove, iterate, etc). It does not mandate <strong>how</strong> those operations are implemented. This means you can have multiple implementations that work very differently under the hood (e.g. <code>ArrayList</code> versus <code>LinkedList</code>), but it doesn't matter as long as they adhere to the \"contract\" defined in the interface. This makes it much easier to glue independent pieces of code together.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37576189,
            "is_me_message": false,
            "last_edit_timestamp": 1428023892,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "jay@jayschwa.net",
            "sender_full_name": "Jay Weisskopf Petacat (W2'17)",
            "sender_id": 829,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "interfaces",
            "submessages": [],
            "timestamp": 1428023117,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/b05b48dffacfe8bc5336d44718f65da6?d=identicon&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>For those learning go or working on the pre-paxos labs, <span class=\"user-mention\" data-user-email=\"killpack@princeton.edu\">@Dakota Killpack (SP2'15)</span> and I had a hugely successful refactor at the end of the day (largely inspired by a conversation with <span class=\"user-mention\" data-user-email=\"ken@kenpratt.net\">@Ken Pratt (SP2'15)</span>  during snack time) that took this working but steaming-ugly code that passed first two parts of lab1 but hard coded ther numebrs of map reduce workers AND couldn't remotely handle errors, and in like 20 minutes refactored it to a working, 10x cleaner code that handles arbitrary workers and retrying failures...  can compare most recent commit here to two commits before, 'lab 1 exercise 2 passing' <a href=\"https://github.com/bglusman/mit_paxos_lab\" target=\"_blank\" title=\"https://github.com/bglusman/mit_paxos_lab\">https://github.com/bglusman/mit_paxos_lab</a></p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37576358,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "brian@glusman.me",
            "sender_full_name": "Brian Glusman (SP2'15)",
            "sender_id": 7848,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "channels",
            "submessages": [],
            "timestamp": 1428023437,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/b05b48dffacfe8bc5336d44718f65da6?d=identicon&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>feel like we both went from totally confused about go yesterday to starting to really click and like it today :-)  we'll see but thanks all for help</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37576369,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "brian@glusman.me",
            "sender_full_name": "Brian Glusman (SP2'15)",
            "sender_id": 7848,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "channels",
            "submessages": [],
            "timestamp": 1428023467,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/2de9901913d2f414b7b174d2c2c69a88?d=identicon&version=1",
            "client": "website",
            "content": "<p>nice, congrats!</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37576534,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "chris@printf.net",
            "sender_full_name": "Chris Ball (SP2'15)",
            "sender_id": 7857,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "channels",
            "submessages": [],
            "timestamp": 1428023813,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/5d46121e9a899e151cfcd0e59aa9e9f8a78989e8?x=x&version=1",
            "client": "desktop app Linux 0.4.4",
            "content": "<p><span class=\"user-mention\" data-user-email=\"jordanorelli@gmail.com\">@Jordan Orelli (F'11)</span> fancy seeing you on a HS thread about Go ;)</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37576594,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "aditya@adityamukerjee.net",
            "sender_full_name": "Aditya Mukerjee (he) (SP1'15)",
            "sender_id": 7644,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "interfaces",
            "submessages": [],
            "timestamp": 1428023945,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/5d46121e9a899e151cfcd0e59aa9e9f8a78989e8?x=x&version=1",
            "client": "desktop app Linux 0.4.4",
            "content": "<p>congratulations!</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37576608,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "aditya@adityamukerjee.net",
            "sender_full_name": "Aditya Mukerjee (he) (SP1'15)",
            "sender_id": 7644,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "channels",
            "submessages": [],
            "timestamp": 1428023983,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/a1d3f5af6ebf01fccd9e772ca2a04ba5?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"brian@glusman.me\">@Brian Glusman (SP2'15)</span> <span class=\"user-mention\" data-user-email=\"killpack@princeton.edu\">@Dakota Killpack (SP2'15)</span> That's awesome, glad to hear it :)</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37577598,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "ken@kenpratt.net",
            "sender_full_name": "Ken Pratt (he) (SP2'15)",
            "sender_id": 7850,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "channels",
            "submessages": [],
            "timestamp": 1428025991,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/b05b48dffacfe8bc5336d44718f65da6?d=identicon&version=1",
            "client": "ZulipiOS",
            "content": "<p>Reused the original worker quiet on success and that simplified things so much :-)</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37577710,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "brian@glusman.me",
            "sender_full_name": "Brian Glusman (SP2'15)",
            "sender_id": 7848,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "channels",
            "submessages": [],
            "timestamp": 1428026206,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/b05b48dffacfe8bc5336d44718f65da6?d=identicon&version=1",
            "client": "ZulipiOS",
            "content": "<p>Er, queue, can't edit on iPhone</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37577731,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "brian@glusman.me",
            "sender_full_name": "Brian Glusman (SP2'15)",
            "sender_id": 7848,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "channels",
            "submessages": [],
            "timestamp": 1428026252,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/0baa75c82ed02d819be85a4b24b0f4d3?d=identicon&version=1",
            "client": "website",
            "content": "<p>A use case for interfaces is dependency injection and mocking. For example:</p>\n<div class=\"codehilite\"><pre>func NeedsADb(input string, db DB){\n//do some stuff\n}\n</pre></div>\n\n\n<p>If you want to unit test this you don't want the actual database as a dependency. You can hide the actual db implementation behind a DB interface. Then in your test suite you can create a mock DB.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37577852,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "mdparker89@gmail.com",
            "sender_full_name": "Matthew Parker (F2'14)",
            "sender_id": 6698,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "interfaces",
            "submessages": [],
            "timestamp": 1428026484,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/0a35beaf5a354dafdf10494c0313e10fffc154fd?x=x&version=1",
            "client": "website",
            "content": "<p>more type safety things that are confusing me, this time with interfaces! why does Go let you do this:</p>\n<div class=\"codehilite\"><pre><span class=\"k\">package</span> <span class=\"n\">main</span>\n\n<span class=\"k\">import</span> <span class=\"s\">&quot;fmt&quot;</span>\n\n<span class=\"k\">func</span> <span class=\"n\">main</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n    <span class=\"k\">type</span> <span class=\"n\">foo</span> <span class=\"k\">interface</span> <span class=\"p\">{</span>\n        <span class=\"n\">bar</span><span class=\"p\">(</span><span class=\"n\">s</span> <span class=\"nb\">string</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"n\">s1</span> <span class=\"nb\">string</span><span class=\"p\">)</span>\n        <span class=\"n\">baz</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">y</span> <span class=\"nb\">int</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"n\">n</span> <span class=\"nb\">int</span><span class=\"p\">)</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"k\">var</span> <span class=\"n\">myFoo</span> <span class=\"n\">foo</span>\n    <span class=\"n\">fmt</span><span class=\"p\">.</span><span class=\"n\">Printf</span><span class=\"p\">(</span><span class=\"s\">&quot;%T; %v&quot;</span><span class=\"p\">,</span> <span class=\"n\">myFoo</span><span class=\"p\">,</span> <span class=\"n\">myFoo</span><span class=\"p\">)</span>\n    <span class=\"c1\">// returns &lt;nil&gt;; &lt;nil&gt;</span>\n<span class=\"p\">}</span>\n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37596673,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "maia.mcc@gmail.com",
            "sender_full_name": "Maia McCormick (she) (S2'14)",
            "sender_id": 6175,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "so much for type safety?",
            "submessages": [],
            "timestamp": 1428072031,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/0a35beaf5a354dafdf10494c0313e10fffc154fd?x=x&version=1",
            "client": "website",
            "content": "<p>or i guess, why might you ever want to do this (i.e. initialize something as an interface). MIGHT you ever want to do this?</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37596681,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "maia.mcc@gmail.com",
            "sender_full_name": "Maia McCormick (she) (S2'14)",
            "sender_id": 6175,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "so much for type safety?",
            "submessages": [],
            "timestamp": 1428072057,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/5d46121e9a899e151cfcd0e59aa9e9f8a78989e8?x=x&version=1",
            "client": "desktop app Linux 0.4.4",
            "content": "<p>Well, you probably don't want the zero value</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37596708,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "aditya@adityamukerjee.net",
            "sender_full_name": "Aditya Mukerjee (he) (SP1'15)",
            "sender_id": 7644,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "so much for type safety?",
            "submessages": [],
            "timestamp": 1428072121,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/5d46121e9a899e151cfcd0e59aa9e9f8a78989e8?x=x&version=1",
            "client": "desktop app Linux 0.4.4",
            "content": "<p>but you might do something like</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37596743,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "aditya@adityamukerjee.net",
            "sender_full_name": "Aditya Mukerjee (he) (SP1'15)",
            "sender_id": 7644,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "so much for type safety?",
            "submessages": [],
            "timestamp": 1428072134,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/0a35beaf5a354dafdf10494c0313e10fffc154fd?x=x&version=1",
            "client": "website",
            "content": "<p>it seems counterintuitive to go's type safety brewhaha that you can even have something will a nil type... I can understand that you might want to initialize this variable and assign it to some thing that you know would be a foo, but didn't know what specific type of foo... but I assume you'd just use <code>:=</code> in that case and safe yourself the pain</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37596750,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "maia.mcc@gmail.com",
            "sender_full_name": "Maia McCormick (she) (S2'14)",
            "sender_id": 6175,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "so much for type safety?",
            "submessages": [],
            "timestamp": 1428072139,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/5d46121e9a899e151cfcd0e59aa9e9f8a78989e8?x=x&version=1",
            "client": "desktop app Linux 0.4.4",
            "content": "<p><a href=\"https://play.golang.org/p/L9d46_HKia\" target=\"_blank\" title=\"https://play.golang.org/p/L9d46_HKia\">https://play.golang.org/p/L9d46_HKia</a></p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37596777,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "aditya@adityamukerjee.net",
            "sender_full_name": "Aditya Mukerjee (he) (SP1'15)",
            "sender_id": 7644,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "so much for type safety?",
            "submessages": [],
            "timestamp": 1428072199,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/5d46121e9a899e151cfcd0e59aa9e9f8a78989e8?x=x&version=1",
            "client": "desktop app Linux 0.4.4",
            "content": "<p>in that case, the channels both return types that satisfy the same interface</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37596782,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "aditya@adityamukerjee.net",
            "sender_full_name": "Aditya Mukerjee (he) (SP1'15)",
            "sender_id": 7644,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "so much for type safety?",
            "submessages": [],
            "timestamp": 1428072214,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/5d46121e9a899e151cfcd0e59aa9e9f8a78989e8?x=x&version=1",
            "client": "desktop app Linux 0.4.4",
            "content": "<p>and you want the variable foo to be in scope later in the function</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37596789,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "aditya@adityamukerjee.net",
            "sender_full_name": "Aditya Mukerjee (he) (SP1'15)",
            "sender_id": 7644,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "so much for type safety?",
            "submessages": [],
            "timestamp": 1428072223,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/5d46121e9a899e151cfcd0e59aa9e9f8a78989e8?x=x&version=1",
            "client": "desktop app Linux 0.4.4",
            "content": "<p>so you declare it at the top</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37596794,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "aditya@adityamukerjee.net",
            "sender_full_name": "Aditya Mukerjee (he) (SP1'15)",
            "sender_id": 7644,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "so much for type safety?",
            "submessages": [],
            "timestamp": 1428072230,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/0a35beaf5a354dafdf10494c0313e10fffc154fd?x=x&version=1",
            "client": "website",
            "content": "<p>aaah okay, i can buy that</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37596830,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "maia.mcc@gmail.com",
            "sender_full_name": "Maia McCormick (she) (S2'14)",
            "sender_id": 6175,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "so much for type safety?",
            "submessages": [],
            "timestamp": 1428072249,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/b05b48dffacfe8bc5336d44718f65da6?d=identicon&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>Is there something I don't understand about literals and channels or something?  This code never reaches the second println, seems weird:</p>\n<div class=\"codehilite\"><pre>    completeJobsCount := make(chan int)\n    fmt.Println(&quot;made int chan&quot; )\n    completeJobsCount &lt;- 0\n    fmt.Println(&quot;put 0 into int chan&quot; )\n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37597938,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "brian@glusman.me",
            "sender_full_name": "Brian Glusman (SP2'15)",
            "sender_id": 7848,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "channels",
            "submessages": [],
            "timestamp": 1428073913,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/b05b48dffacfe8bc5336d44718f65da6?d=identicon&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>Trying to replace a race condition where reading and writing from a shared int with a channel that starts with 0, and each goroutine can read and put back (to test) or read and write an increment (to avoid read during write) as <span class=\"user-mention\" data-user-email=\"aditya@adityamukerjee.net\">@Aditya Mukerjee (SP1'15)</span> suggested to avoid race condition, which makes sense, but can't see why putting 0 into an int chan freezes things</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37598034,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "brian@glusman.me",
            "sender_full_name": "Brian Glusman (SP2'15)",
            "sender_id": 7848,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "channels",
            "submessages": [],
            "timestamp": 1428074066,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/a1d3f5af6ebf01fccd9e772ca2a04ba5?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"brian@glusman.me\">@Brian Glusman (SP2'15)</span> I think that send will block until the channel is read from in another goroutine, unless you make the channel buffered. Then it will not block, and will get the final Println.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37598114,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "ken@kenpratt.net",
            "sender_full_name": "Ken Pratt (he) (SP2'15)",
            "sender_id": 7850,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "channels",
            "submessages": [],
            "timestamp": 1428074235,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/b05b48dffacfe8bc5336d44718f65da6?d=identicon&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>oh, hmm</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37598121,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "brian@glusman.me",
            "sender_full_name": "Brian Glusman (SP2'15)",
            "sender_id": 7848,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "channels",
            "submessages": [],
            "timestamp": 1428074250,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/b05b48dffacfe8bc5336d44718f65da6?d=identicon&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>I hadn't understood that but makes sense i guess</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37598125,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "brian@glusman.me",
            "sender_full_name": "Brian Glusman (SP2'15)",
            "sender_id": 7848,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "channels",
            "submessages": [],
            "timestamp": 1428074264,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/b05b48dffacfe8bc5336d44718f65da6?d=identicon&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>so I declare it as buffered with 1 slot?</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37598128,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "brian@glusman.me",
            "sender_full_name": "Brian Glusman (SP2'15)",
            "sender_id": 7848,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "channels",
            "submessages": [],
            "timestamp": 1428074278,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/b05b48dffacfe8bc5336d44718f65da6?d=identicon&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>ok</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37598129,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "brian@glusman.me",
            "sender_full_name": "Brian Glusman (SP2'15)",
            "sender_id": 7848,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "channels",
            "submessages": [],
            "timestamp": 1428074279,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/b05b48dffacfe8bc5336d44718f65da6?d=identicon&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>I think that makes sense/will solve problem, thanks</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37598158,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "brian@glusman.me",
            "sender_full_name": "Brian Glusman (SP2'15)",
            "sender_id": 7848,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "channels",
            "submessages": [],
            "timestamp": 1428074287,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/b05b48dffacfe8bc5336d44718f65da6?d=identicon&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>need to prepare the channel before passing to multiple workers, I guess could also wait to put the 0 into it until after started workers</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37598173,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "brian@glusman.me",
            "sender_full_name": "Brian Glusman (SP2'15)",
            "sender_id": 7848,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "channels",
            "submessages": [],
            "timestamp": 1428074318,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/b05b48dffacfe8bc5336d44718f65da6?d=identicon&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>that might be better than being buffered</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37598177,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "brian@glusman.me",
            "sender_full_name": "Brian Glusman (SP2'15)",
            "sender_id": 7848,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "channels",
            "submessages": [],
            "timestamp": 1428074325,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/5d46121e9a899e151cfcd0e59aa9e9f8a78989e8?x=x&version=1",
            "client": "desktop app Linux 0.4.4",
            "content": "<p>I don't think you want a buffered channel</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37598333,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "aditya@adityamukerjee.net",
            "sender_full_name": "Aditya Mukerjee (he) (SP1'15)",
            "sender_id": 7644,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "channels",
            "submessages": [],
            "timestamp": 1428074610,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/5d46121e9a899e151cfcd0e59aa9e9f8a78989e8?x=x&version=1",
            "client": "desktop app Linux 0.4.4",
            "content": "<p>if what you're trying to do is avoid a data race from accessing a shared variable, you *want* it to block if the variable is being used</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37598338,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "aditya@adityamukerjee.net",
            "sender_full_name": "Aditya Mukerjee (he) (SP1'15)",
            "sender_id": 7644,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "channels",
            "submessages": [],
            "timestamp": 1428074636,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/05023e2779bfc2793d79ee30c81af6ca291539ce?x=x&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"maia.mcc@gmail.com\">@Maia McCormick (S'14)</span> an interface value is a box.  inside the box, there is a pointer.  that pointer points to a thing that is guaranteed to satisfy the contract of the interface.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37598707,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "jordanorelli@gmail.com",
            "sender_full_name": "Jordan Orelli (F'11)",
            "sender_id": 872,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "so much for type safety?",
            "submessages": [],
            "timestamp": 1428075223,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/05023e2779bfc2793d79ee30c81af6ca291539ce?x=x&version=1",
            "client": "website",
            "content": "<p>in Go, when you say <code>var x someType</code>, x is initialized as the zero-value of someType.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37598710,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "jordanorelli@gmail.com",
            "sender_full_name": "Jordan Orelli (F'11)",
            "sender_id": 872,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "so much for type safety?",
            "submessages": [],
            "timestamp": 1428075241,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/05023e2779bfc2793d79ee30c81af6ca291539ce?x=x&version=1",
            "client": "website",
            "content": "<p>in the case of interfaces, it's still an interface value, but it contains nothing.  it is like an exmpty box.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37598750,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "jordanorelli@gmail.com",
            "sender_full_name": "Jordan Orelli (F'11)",
            "sender_id": 872,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "so much for type safety?",
            "submessages": [],
            "timestamp": 1428075256,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/05023e2779bfc2793d79ee30c81af6ca291539ce?x=x&version=1",
            "client": "website",
            "content": "<p>it's just nil.  but it's typed.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37598760,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "jordanorelli@gmail.com",
            "sender_full_name": "Jordan Orelli (F'11)",
            "sender_id": 872,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "so much for type safety?",
            "submessages": [],
            "timestamp": 1428075284,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/05023e2779bfc2793d79ee30c81af6ca291539ce?x=x&version=1",
            "client": "website",
            "content": "<p>because the zero value of an interface is nil.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37598764,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "jordanorelli@gmail.com",
            "sender_full_name": "Jordan Orelli (F'11)",
            "sender_id": 872,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "so much for type safety?",
            "submessages": [],
            "timestamp": 1428075302,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/05023e2779bfc2793d79ee30c81af6ca291539ce?x=x&version=1",
            "client": "website",
            "content": "<p><a href=\"http://research.swtch.com/interfaces\" target=\"_blank\" title=\"http://research.swtch.com/interfaces\">http://research.swtch.com/interfaces</a></p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37598821,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "jordanorelli@gmail.com",
            "sender_full_name": "Jordan Orelli (F'11)",
            "sender_id": 872,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "so much for type safety?",
            "submessages": [],
            "timestamp": 1428075395,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/05023e2779bfc2793d79ee30c81af6ca291539ce?x=x&version=1",
            "client": "website",
            "content": "<p>that's Russ Cox's explanation for how they work internally.  I found that reading that clarified a lot.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37598824,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "jordanorelli@gmail.com",
            "sender_full_name": "Jordan Orelli (F'11)",
            "sender_id": 872,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "so much for type safety?",
            "submessages": [],
            "timestamp": 1428075410,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/b05b48dffacfe8bc5336d44718f65da6?d=identicon&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p><span class=\"user-mention\" data-user-email=\"aditya@adityamukerjee.net\">@Aditya Mukerjee (SP1'15)</span> yeah that's what I settled on, and just don't write to the channel until later, after the worker goroutines are launched</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37599524,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "brian@glusman.me",
            "sender_full_name": "Brian Glusman (SP2'15)",
            "sender_id": 7848,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "channels",
            "submessages": [],
            "timestamp": 1428076507,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/1380ded36dafac0d6f808b9b7b6c4e85266428a1?x=x&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>Yup. The deadlock error messages are kind of baffling at first, but they're really trying to help you.  They're saying, \"Hey, you're trying to put values into this channel, and nothing is reading from it.\" and determines that something must be really wrong. (Example code in case anyone else is following along in the stream topic: <a href=\"http://play.golang.org/p/22q8YOkXaJ\" target=\"_blank\" title=\"http://play.golang.org/p/22q8YOkXaJ\">http://play.golang.org/p/22q8YOkXaJ</a> )</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37605883,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "travis@mcdem.us",
            "sender_full_name": "Travis McDemus (S'13)",
            "sender_id": 2139,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "channels",
            "submessages": [],
            "timestamp": 1428085500,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/1380ded36dafac0d6f808b9b7b6c4e85266428a1?x=x&version=1",
            "client": "website",
            "content": "<p>Anybody want to do code reviews sometime for short amounts of code?</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37643939,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "travis@mcdem.us",
            "sender_full_name": "Travis McDemus (S'13)",
            "sender_id": 2139,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "code reviews",
            "submessages": [],
            "timestamp": 1428166733,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/1380ded36dafac0d6f808b9b7b6c4e85266428a1?x=x&version=1",
            "client": "website",
            "content": "<p>maybe we could follow a simple scheme - just paste things back and forth on <a href=\"http://play.golang.org\" target=\"_blank\" title=\"http://play.golang.org\">play.golang.org</a> with text comments.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37643945,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "travis@mcdem.us",
            "sender_full_name": "Travis McDemus (S'13)",
            "sender_id": 2139,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "code reviews",
            "submessages": [],
            "timestamp": 1428166771,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/1380ded36dafac0d6f808b9b7b6c4e85266428a1?x=x&version=1",
            "client": "website",
            "content": "<p>I could set up a Gerrit server or something, but I was originally thinking of something lighter / less formality.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37643995,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "travis@mcdem.us",
            "sender_full_name": "Travis McDemus (S'13)",
            "sender_id": 2139,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "code reviews",
            "submessages": [],
            "timestamp": 1428166845,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/1380ded36dafac0d6f808b9b7b6c4e85266428a1?x=x&version=1",
            "client": "website",
            "content": "<p>example: I wrote this thing this morning, maybe something could be improved about it: <a href=\"https://github.com/aoeu/web_tools/blob/master/echorequest.go\" target=\"_blank\" title=\"https://github.com/aoeu/web_tools/blob/master/echorequest.go\">https://github.com/aoeu/web_tools/blob/master/echorequest.go</a></p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37644317,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "travis@mcdem.us",
            "sender_full_name": "Travis McDemus (S'13)",
            "sender_id": 2139,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "code reviews",
            "submessages": [],
            "timestamp": 1428167620,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/1380ded36dafac0d6f808b9b7b6c4e85266428a1?x=x&version=1",
            "client": "website",
            "content": "<p>feel free to lob stuff at me though, I'd try reading anything.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37644357,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "travis@mcdem.us",
            "sender_full_name": "Travis McDemus (S'13)",
            "sender_id": 2139,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "code reviews",
            "submessages": [],
            "timestamp": 1428167664,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/a179bb8c3fc4ab0975954f57d47fa6c53a8c2dad?x=x&version=2",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"travis@mcdem.us\">@Travis McDemus (S'13)</span> </p>\n<ul>\n<li>The standard library already has <a href=\"https://godoc.org/io#MultiWriter\" target=\"_blank\" title=\"https://godoc.org/io#MultiWriter\">https://godoc.org/io#MultiWriter</a>.</li>\n<li><code>ioutil.ReadAll</code> can probably be replaced with <code>io.Copy</code>. No buffering and theoretically better for gigantic payloads.</li>\n</ul>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37644715,
            "is_me_message": false,
            "last_edit_timestamp": 1428168763,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "jay@jayschwa.net",
            "sender_full_name": "Jay Weisskopf Petacat (W2'17)",
            "sender_id": 829,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "code reviews",
            "submessages": [],
            "timestamp": 1428168487,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/a179bb8c3fc4ab0975954f57d47fa6c53a8c2dad?x=x&version=2",
            "client": "website",
            "content": "<p>Also, I don't really see the point of the <code>url</code> arg. What is the use-case for it?</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37644730,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "jay@jayschwa.net",
            "sender_full_name": "Jay Weisskopf Petacat (W2'17)",
            "sender_id": 829,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "code reviews",
            "submessages": [],
            "timestamp": 1428168561,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/a179bb8c3fc4ab0975954f57d47fa6c53a8c2dad?x=x&version=2",
            "client": "website",
            "content": "<p>These are more personal preference things:</p>\n<ul>\n<li>The global variables, while flags, aren't used anywhere else, so I'd personally reduce their scope to <code>main</code>.</li>\n<li>Headers should be printed before payload because that's the natural order in the protocol.</li>\n</ul>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37644781,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "jay@jayschwa.net",
            "sender_full_name": "Jay Weisskopf Petacat (W2'17)",
            "sender_id": 829,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "code reviews",
            "submessages": [],
            "timestamp": 1428168721,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/a179bb8c3fc4ab0975954f57d47fa6c53a8c2dad?x=x&version=2",
            "client": "website",
            "content": "<p>Ooo, just found this: <a href=\"https://godoc.org/net/http/httputil#DumpRequest\" target=\"_blank\" title=\"https://godoc.org/net/http/httputil#DumpRequest\">https://godoc.org/net/http/httputil#DumpRequest</a></p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37644949,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "jay@jayschwa.net",
            "sender_full_name": "Jay Weisskopf Petacat (W2'17)",
            "sender_id": 829,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "code reviews",
            "submessages": [],
            "timestamp": 1428169175,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/a179bb8c3fc4ab0975954f57d47fa6c53a8c2dad?x=x&version=2",
            "client": "website",
            "content": "<p>Here's what I tried after finding <code>DumpRequest</code></p>\n<div class=\"codehilite\"><pre>func echo(w http.ResponseWriter, r *http.Request) {\n    dump, err := httputil.DumpRequest(r, true)\n    if err != nil {\n        http.Error(w, err.Error(), http.StatusInternalServerError)\n        return\n    }\n    _, err = io.MultiWriter(os.Stdout, w).Write(dump)\n    if err != nil {\n        log.Println(err)\n    }\n}\n\n// &quot;Echo&quot; the HTTP headers and payload of the HTTP request in the response.\nfunc main() {\n    bindAddr := flag.String(&quot;bind&quot;, &quot;:8080&quot;, &quot;Bind HTTP server to this address.&quot;)\n    flag.Parse()\n    log.Println(&quot;Listening at&quot;, *bindAddr)\n    err := http.ListenAndServe(*bindAddr, http.HandlerFunc(echo))\n    if err != nil {\n        log.Fatal(err)\n    }\n}\n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37645774,
            "is_me_message": false,
            "last_edit_timestamp": 1428171642,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "jay@jayschwa.net",
            "sender_full_name": "Jay Weisskopf Petacat (W2'17)",
            "sender_id": 829,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "code reviews",
            "submessages": [],
            "timestamp": 1428171337,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/a179bb8c3fc4ab0975954f57d47fa6c53a8c2dad?x=x&version=2",
            "client": "website",
            "content": "<p>It seems like <code>r.Body.Close()</code> isn't used in all examples. Does anyone know when it's required?</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37645810,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "jay@jayschwa.net",
            "sender_full_name": "Jay Weisskopf Petacat (W2'17)",
            "sender_id": 829,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "code reviews",
            "submessages": [],
            "timestamp": 1428171369,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/1380ded36dafac0d6f808b9b7b6c4e85266428a1?x=x&version=1",
            "client": "website",
            "content": "<p>I was wondering about that too.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37645863,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "travis@mcdem.us",
            "sender_full_name": "Travis McDemus (S'13)",
            "sender_id": 2139,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "code reviews",
            "submessages": [],
            "timestamp": 1428171535,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/1380ded36dafac0d6f808b9b7b6c4e85266428a1?x=x&version=1",
            "client": "website",
            "content": "<p>Maybe they assume that's the client responsibility? </p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37645864,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "travis@mcdem.us",
            "sender_full_name": "Travis McDemus (S'13)",
            "sender_id": 2139,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "code reviews",
            "submessages": [],
            "timestamp": 1428171550,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/1380ded36dafac0d6f808b9b7b6c4e85266428a1?x=x&version=1",
            "client": "website",
            "content": "<p>client / caller / outer scope, whatever you want to call it.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37645870,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "travis@mcdem.us",
            "sender_full_name": "Travis McDemus (S'13)",
            "sender_id": 2139,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "code reviews",
            "submessages": [],
            "timestamp": 1428171572,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/1380ded36dafac0d6f808b9b7b6c4e85266428a1?x=x&version=1",
            "client": "website",
            "content": "<p>I landed on this: <a href=\"https://github.com/aoeu/web_tools/blob/master/echorequest.go\" target=\"_blank\" title=\"https://github.com/aoeu/web_tools/blob/master/echorequest.go\">https://github.com/aoeu/web_tools/blob/master/echorequest.go</a></p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37645877,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "travis@mcdem.us",
            "sender_full_name": "Travis McDemus (S'13)",
            "sender_id": 2139,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "code reviews",
            "submessages": [],
            "timestamp": 1428171589,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/1380ded36dafac0d6f808b9b7b6c4e85266428a1?x=x&version=1",
            "client": "website",
            "content": "<p>The commit history is me adding each thing from the code review at a time. Thanks <span class=\"user-mention\" data-user-email=\"jay@jayschwa.net\">@Jay Weisskopf (W'13)</span> !</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37645908,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "travis@mcdem.us",
            "sender_full_name": "Travis McDemus (S'13)",
            "sender_id": 2139,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "code reviews",
            "submessages": [],
            "timestamp": 1428171605,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/a179bb8c3fc4ab0975954f57d47fa6c53a8c2dad?x=x&version=2",
            "client": "website",
            "content": "<blockquote>\n<p>The Server will close the request body. The ServeHTTP Handler does not need to.</p>\n</blockquote>\n<p><a href=\"https://golang.org/src/net/http/request.go#L136\" target=\"_blank\" title=\"https://golang.org/src/net/http/request.go#L136\">https://golang.org/src/net/http/request.go#L136</a></p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37645924,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "jay@jayschwa.net",
            "sender_full_name": "Jay Weisskopf Petacat (W2'17)",
            "sender_id": 829,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "code reviews",
            "submessages": [],
            "timestamp": 1428171615,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/1380ded36dafac0d6f808b9b7b6c4e85266428a1?x=x&version=1",
            "client": "website",
            "content": "<p>Ah, there we are then.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37645938,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "travis@mcdem.us",
            "sender_full_name": "Travis McDemus (S'13)",
            "sender_id": 2139,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "code reviews",
            "submessages": [],
            "timestamp": 1428171638,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/1380ded36dafac0d6f808b9b7b6c4e85266428a1?x=x&version=1",
            "client": "website",
            "content": "<p>Oh  yeah, the use case for the <code>-url</code> flag is for debugging a specific endpoint. </p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37645994,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "travis@mcdem.us",
            "sender_full_name": "Travis McDemus (S'13)",
            "sender_id": 2139,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "code reviews",
            "submessages": [],
            "timestamp": 1428171757,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/a179bb8c3fc4ab0975954f57d47fa6c53a8c2dad?x=x&version=2",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"travis@mcdem.us\">@Travis McDemus (S'13)</span> I'm not sure if <a href=\"https://github.com/aoeu/web_tools/blob/master/echorequest.go#L25\" target=\"_blank\" title=\"https://github.com/aoeu/web_tools/blob/master/echorequest.go#L25\">https://github.com/aoeu/web_tools/blob/master/echorequest.go#L25</a> will work as you intend. I think once you start writing to a body without an explicit status code, it auto-200s it for you.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37645998,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "jay@jayschwa.net",
            "sender_full_name": "Jay Weisskopf Petacat (W2'17)",
            "sender_id": 829,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "code reviews",
            "submessages": [],
            "timestamp": 1428171778,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/1380ded36dafac0d6f808b9b7b6c4e85266428a1?x=x&version=1",
            "client": "website",
            "content": "<p>Oh. Hmm. How would I test for that? </p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37646050,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "travis@mcdem.us",
            "sender_full_name": "Travis McDemus (S'13)",
            "sender_id": 2139,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "code reviews",
            "submessages": [],
            "timestamp": 1428171889,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/1380ded36dafac0d6f808b9b7b6c4e85266428a1?x=x&version=1",
            "client": "website",
            "content": "<p>Or I could dig through the source a bit, but that seems kind of weird. </p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37646052,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "travis@mcdem.us",
            "sender_full_name": "Travis McDemus (S'13)",
            "sender_id": 2139,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "code reviews",
            "submessages": [],
            "timestamp": 1428171909,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/a179bb8c3fc4ab0975954f57d47fa6c53a8c2dad?x=x&version=2",
            "client": "website",
            "content": "<p>See <a href=\"https://godoc.org/net/http#ResponseWriter\" target=\"_blank\" title=\"https://godoc.org/net/http#ResponseWriter\">https://godoc.org/net/http#ResponseWriter</a>. Once the first call to<code>Write</code> is made, the other methods become noops I think.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37646061,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "jay@jayschwa.net",
            "sender_full_name": "Jay Weisskopf Petacat (W2'17)",
            "sender_id": 829,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "code reviews",
            "submessages": [],
            "timestamp": 1428171938,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/a179bb8c3fc4ab0975954f57d47fa6c53a8c2dad?x=x&version=2",
            "client": "website",
            "content": "<p>You can test by removing the <code>if err != nil</code> condition and seeing if it works unconditionally.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37646098,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "jay@jayschwa.net",
            "sender_full_name": "Jay Weisskopf Petacat (W2'17)",
            "sender_id": 829,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "code reviews",
            "submessages": [],
            "timestamp": 1428171975,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/1380ded36dafac0d6f808b9b7b6c4e85266428a1?x=x&version=1",
            "client": "website",
            "content": "<p>Whoa. Yeah, I wouldn't have expected that behavior. </p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37646104,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "travis@mcdem.us",
            "sender_full_name": "Travis McDemus (S'13)",
            "sender_id": 2139,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "code reviews",
            "submessages": [],
            "timestamp": 1428172009,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/a179bb8c3fc4ab0975954f57d47fa6c53a8c2dad?x=x&version=2",
            "client": "website",
            "content": "<p>I think the underlying reason is that Go starts writing the response to the wire before the handler has completed. Due to how HTTP works, headers have to come before payload.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37646105,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "jay@jayschwa.net",
            "sender_full_name": "Jay Weisskopf Petacat (W2'17)",
            "sender_id": 829,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "code reviews",
            "submessages": [],
            "timestamp": 1428172036,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/a179bb8c3fc4ab0975954f57d47fa6c53a8c2dad?x=x&version=2",
            "client": "website",
            "content": "<p>Good exercise <img alt=\":thumbsup:\" class=\"emoji\" src=\"static/third/gemoji/images/emoji/thumbsup.png\" title=\":thumbsup:\"> <img alt=\":gopher:\" class=\"emoji\" src=\"https://golang.org/doc/gopher/gopherbw.png\" title=\":gopher:\"> </p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37646158,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "jay@jayschwa.net",
            "sender_full_name": "Jay Weisskopf Petacat (W2'17)",
            "sender_id": 829,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "code reviews",
            "submessages": [],
            "timestamp": 1428172154,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/1380ded36dafac0d6f808b9b7b6c4e85266428a1?x=x&version=1",
            "client": "website",
            "content": "<p>Oh, I see. </p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37646162,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "travis@mcdem.us",
            "sender_full_name": "Travis McDemus (S'13)",
            "sender_id": 2139,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "code reviews",
            "submessages": [],
            "timestamp": 1428172177,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/1380ded36dafac0d6f808b9b7b6c4e85266428a1?x=x&version=1",
            "client": "website",
            "content": "<p>Yeah, that makes sense. </p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37646163,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "travis@mcdem.us",
            "sender_full_name": "Travis McDemus (S'13)",
            "sender_id": 2139,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "code reviews",
            "submessages": [],
            "timestamp": 1428172181,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/1380ded36dafac0d6f808b9b7b6c4e85266428a1?x=x&version=1",
            "client": "website",
            "content": "<p>Oh yeah, for the <code>-url</code> flag, a use-case is if you have a URL behind a ComplicatedUrlRoutingThingamajig that a 3rd party server is trying to hit. </p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37646211,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "travis@mcdem.us",
            "sender_full_name": "Travis McDemus (S'13)",
            "sender_id": 2139,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "code reviews",
            "submessages": [],
            "timestamp": 1428172245,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/1380ded36dafac0d6f808b9b7b6c4e85266428a1?x=x&version=1",
            "client": "website",
            "content": "<p>And let's say you want to test if ComplicatedUrlRoutingThingamajig is actually gobbling up the request and not routing it correctly... the idea is you could stop the proxy mechanism, run <code>echorequest -url \"/path/getting/gobbled\"</code> and see if the 3rd party server is getting through to your endpoint at all with all of the stuff \"in the middle\" removed. </p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37646256,
            "is_me_message": false,
            "last_edit_timestamp": 1428172371,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "travis@mcdem.us",
            "sender_full_name": "Travis McDemus (S'13)",
            "sender_id": 2139,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "code reviews",
            "submessages": [],
            "timestamp": 1428172330,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/1380ded36dafac0d6f808b9b7b6c4e85266428a1?x=x&version=1",
            "client": "website",
            "content": "<p>Then you don't have to tell the 3rd party to try testing with a different URL or whatever.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37646270,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "travis@mcdem.us",
            "sender_full_name": "Travis McDemus (S'13)",
            "sender_id": 2139,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "code reviews",
            "submessages": [],
            "timestamp": 1428172437,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/1380ded36dafac0d6f808b9b7b6c4e85266428a1?x=x&version=1",
            "client": "website",
            "content": "<p>OK, this is kind of weird.  I dropped in <a href=\"https://golang.org/src/net/http/httputil/dump.go#L61\" target=\"_blank\" title=\"https://golang.org/src/net/http/httputil/dump.go#L61\">https://golang.org/src/net/http/httputil/dump.go#L61</a>  instead and it is throwing some weird errors.  </p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37646420,
            "is_me_message": false,
            "last_edit_timestamp": 1428172757,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "travis@mcdem.us",
            "sender_full_name": "Travis McDemus (S'13)",
            "sender_id": 2139,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "code reviews",
            "submessages": [],
            "timestamp": 1428172739,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/1380ded36dafac0d6f808b9b7b6c4e85266428a1?x=x&version=1",
            "client": "website",
            "content": "<div class=\"codehilite\"><pre>$ go run echorequest.go -url &quot;/hi&quot; -port &quot;:8081&quot; &amp;\n$ curl -d &quot;hi&quot; &#39;http://localhost:8081/hi&#39;  \nunsupported protocol scheme &quot;&quot;\n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37646426,
            "is_me_message": false,
            "last_edit_timestamp": 1428172846,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "travis@mcdem.us",
            "sender_full_name": "Travis McDemus (S'13)",
            "sender_id": 2139,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "code reviews",
            "submessages": [],
            "timestamp": 1428172775,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/1380ded36dafac0d6f808b9b7b6c4e85266428a1?x=x&version=1",
            "client": "website",
            "content": "<p>OK, weird. <a href=\"https://golang.org/src/net/http/transport.go#L209\" target=\"_blank\" title=\"https://golang.org/src/net/http/transport.go#L209\">https://golang.org/src/net/http/transport.go#L209</a></p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37646512,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "travis@mcdem.us",
            "sender_full_name": "Travis McDemus (S'13)",
            "sender_id": 2139,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "code reviews",
            "submessages": [],
            "timestamp": 1428172993,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/5d46121e9a899e151cfcd0e59aa9e9f8a78989e8?x=x&version=1",
            "client": "desktop app Linux 0.4.4",
            "content": "<p><span class=\"user-mention\" data-user-email=\"ghthor@gmail.com\">@Willa Walthall (W2'15)</span> I hadn't seen that!</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37686905,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "aditya@adityamukerjee.net",
            "sender_full_name": "Aditya Mukerjee (he) (SP1'15)",
            "sender_id": 7644,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "debugging/stepping through go?",
            "submessages": [],
            "timestamp": 1428267538,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/f6bd929465d6d225def8062d5a9d3f3f?d=identicon&version=1",
            "client": "website",
            "content": "<p>I found <a href=\"https://github.com/golang/go/issues/3117\" target=\"_blank\" title=\"https://github.com/golang/go/issues/3117\">this error</a> to be surprising. The line of reasoning in the issue discussion makes sense, although I don't understand why it couldn't just panic if the element doesn't exist (this seems to be what happens if you try to assign something to a nil map, so it seems consistent with other behavior).</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37744238,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "danluu@gmail.com",
            "sender_full_name": "Dan Luu (W'13)",
            "sender_id": 820,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "cannot assign to a field of a map element directly",
            "submessages": [],
            "timestamp": 1428338764,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/a179bb8c3fc4ab0975954f57d47fa6c53a8c2dad?x=x&version=2",
            "client": "website",
            "content": "<p>Yeah, I've bumped into that before.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37748058,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "jay@jayschwa.net",
            "sender_full_name": "Jay Weisskopf Petacat (W2'17)",
            "sender_id": 829,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "cannot assign to a field of a map element directly",
            "submessages": [],
            "timestamp": 1428343014,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/05023e2779bfc2793d79ee30c81af6ca291539ce?x=x&version=1",
            "client": "website",
            "content": "<p><a href=\"http://play.golang.org/p/r64PP_sl51\" target=\"_blank\" title=\"http://play.golang.org/p/r64PP_sl51\">http://play.golang.org/p/r64PP_sl51</a> &lt;-- for flags.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37748085,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "jordanorelli@gmail.com",
            "sender_full_name": "Jordan Orelli (F'11)",
            "sender_id": 872,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "code reviews",
            "submessages": [],
            "timestamp": 1428343073,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/05023e2779bfc2793d79ee30c81af6ca291539ce?x=x&version=1",
            "client": "website",
            "content": "<p>i always use a global variable whose type is an anonymous struct type</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37748128,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "jordanorelli@gmail.com",
            "sender_full_name": "Jordan Orelli (F'11)",
            "sender_id": 872,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "code reviews",
            "submessages": [],
            "timestamp": 1428343092,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/05023e2779bfc2793d79ee30c81af6ca291539ce?x=x&version=1",
            "client": "website",
            "content": "<p>and just treat it like a typed hash tables.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37748135,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "jordanorelli@gmail.com",
            "sender_full_name": "Jordan Orelli (F'11)",
            "sender_id": 872,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "code reviews",
            "submessages": [],
            "timestamp": 1428343099,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/05023e2779bfc2793d79ee30c81af6ca291539ce?x=x&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"jay@jayschwa.net\">@Jay Weisskopf (W'13)</span> closing the http request body isn't generally required.  it's handled by the net/http package for you.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37748344,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "jordanorelli@gmail.com",
            "sender_full_name": "Jordan Orelli (F'11)",
            "sender_id": 872,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "code reviews",
            "submessages": [],
            "timestamp": 1428343340,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/05023e2779bfc2793d79ee30c81af6ca291539ce?x=x&version=1",
            "client": "website",
            "content": "<p>check line 1025 <a href=\"http://golang.org/src/net/http/server.go\" target=\"_blank\" title=\"http://golang.org/src/net/http/server.go\">http://golang.org/src/net/http/server.go</a></p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37748347,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "jordanorelli@gmail.com",
            "sender_full_name": "Jordan Orelli (F'11)",
            "sender_id": 872,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "code reviews",
            "submessages": [],
            "timestamp": 1428343343,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/05023e2779bfc2793d79ee30c81af6ca291539ce?x=x&version=1",
            "client": "website",
            "content": "<p>that is, it's closed when you respond.  i guess in theory if you never write any response you could probably put it into a state where the body didn't get read.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37748356,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "jordanorelli@gmail.com",
            "sender_full_name": "Jordan Orelli (F'11)",
            "sender_id": 872,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "code reviews",
            "submessages": [],
            "timestamp": 1428343367,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/05023e2779bfc2793d79ee30c81af6ca291539ce?x=x&version=1",
            "client": "website",
            "content": "<p>aaaaaaaaaaand here: <a href=\"http://golang.org/src/net/http/request.go?s=2151:8086#L67\" target=\"_blank\" title=\"http://golang.org/src/net/http/request.go?s=2151:8086#L67\">http://golang.org/src/net/http/request.go?s=2151:8086#L67</a></p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37748397,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "jordanorelli@gmail.com",
            "sender_full_name": "Jordan Orelli (F'11)",
            "sender_id": 872,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "code reviews",
            "submessages": [],
            "timestamp": 1428343444,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/05023e2779bfc2793d79ee30c81af6ca291539ce?x=x&version=1",
            "client": "website",
            "content": "<p>\"For server requests the Request Body is always non-nil but will return EOF immediately when no body is present. The Server will close the request body. The ServeHTTP Handler does not need to.\"</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37748423,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "jordanorelli@gmail.com",
            "sender_full_name": "Jordan Orelli (F'11)",
            "sender_id": 872,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "code reviews",
            "submessages": [],
            "timestamp": 1428343471,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/05023e2779bfc2793d79ee30c81af6ca291539ce?x=x&version=1",
            "client": "website",
            "content": "<p>\"once you start writing to a body without an explicit status code, it auto-200s it for you.\" that is also true.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37748427,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "jordanorelli@gmail.com",
            "sender_full_name": "Jordan Orelli (F'11)",
            "sender_id": 872,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "code reviews",
            "submessages": [],
            "timestamp": 1428343490,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/1380ded36dafac0d6f808b9b7b6c4e85266428a1?x=x&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>Interesting, re: the global anonymous struct for the flags.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37752359,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "travis@mcdem.us",
            "sender_full_name": "Travis McDemus (S'13)",
            "sender_id": 2139,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "code reviews",
            "submessages": [],
            "timestamp": 1428347821,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/a179bb8c3fc4ab0975954f57d47fa6c53a8c2dad?x=x&version=2",
            "client": "website",
            "content": "<p>Yeah, that seems like a nice way to do it.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37752368,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "jay@jayschwa.net",
            "sender_full_name": "Jay Weisskopf Petacat (W2'17)",
            "sender_id": 829,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "code reviews",
            "submessages": [],
            "timestamp": 1428347840,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/1380ded36dafac0d6f808b9b7b6c4e85266428a1?x=x&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>What about mixing all the concepts together?</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37752373,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "travis@mcdem.us",
            "sender_full_name": "Travis McDemus (S'13)",
            "sender_id": 2139,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "code reviews",
            "submessages": [],
            "timestamp": 1428347844,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/1380ded36dafac0d6f808b9b7b6c4e85266428a1?x=x&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>e.g. declare the anonymous struct in main. </p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37752436,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "travis@mcdem.us",
            "sender_full_name": "Travis McDemus (S'13)",
            "sender_id": 2139,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "code reviews",
            "submessages": [],
            "timestamp": 1428347912,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/1380ded36dafac0d6f808b9b7b6c4e85266428a1?x=x&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>If it's the task of a particular function to parse the command line flags, then determine subsequent program behavior, my gut says all that stuff could get handled with one function... e.g. keep it all in one scope / spot.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37752468,
            "is_me_message": false,
            "last_edit_timestamp": 1428348001,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "travis@mcdem.us",
            "sender_full_name": "Travis McDemus (S'13)",
            "sender_id": 2139,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "code reviews",
            "submessages": [],
            "timestamp": 1428347978,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/1380ded36dafac0d6f808b9b7b6c4e85266428a1?x=x&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>I really like putting all of those into a struct, though. It gives everything a logical name / category, and you can pass all of them around at once if need be (like to a function that checks if the values are valid, etc.)</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37752549,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "travis@mcdem.us",
            "sender_full_name": "Travis McDemus (S'13)",
            "sender_id": 2139,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "code reviews",
            "submessages": [],
            "timestamp": 1428348068,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/05023e2779bfc2793d79ee30c81af6ca291539ce?x=x&version=1",
            "client": "website",
            "content": "<p>oh I don't declare the anonymous struct in main because it's deliberately a global cariable.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37754730,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "jordanorelli@gmail.com",
            "sender_full_name": "Jordan Orelli (F'11)",
            "sender_id": 872,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "code reviews",
            "submessages": [],
            "timestamp": 1428350759,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/05023e2779bfc2793d79ee30c81af6ca291539ce?x=x&version=1",
            "client": "website",
            "content": "<p>*variable</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37754731,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "jordanorelli@gmail.com",
            "sender_full_name": "Jordan Orelli (F'11)",
            "sender_id": 872,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "code reviews",
            "submessages": [],
            "timestamp": 1428350762,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/05023e2779bfc2793d79ee30c81af6ca291539ce?x=x&version=1",
            "client": "website",
            "content": "<p>it's just a global variable that you never write to.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37754773,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "jordanorelli@gmail.com",
            "sender_full_name": "Jordan Orelli (F'11)",
            "sender_id": 872,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "code reviews",
            "submessages": [],
            "timestamp": 1428350783,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/b05b48dffacfe8bc5336d44718f65da6?d=identicon&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>Is it not idiomatic go (or not possible?) to make a map an directly exposed as attribute on a struct?</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37759596,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "brian@glusman.me",
            "sender_full_name": "Brian Glusman (SP2'15)",
            "sender_id": 7848,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "(no topic)",
            "submessages": [],
            "timestamp": 1428356303,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/b05b48dffacfe8bc5336d44718f65da6?d=identicon&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>I was trying to do this</p>\n<div class=\"codehilite\"><pre>type ViewServer struct {\n    mu               sync.Mutex\n    l                net.Listener\n    dead             int32 // for testing\n    rpccount         int32 // for testing\n    me               string\n    clientStates map[string]ClientState\n</pre></div>\n\n\n<p>but then the clientStates attribute is uninitialized (I think) and having trouble seeing how to initialize it, just curious if this is the wrong way etc</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37759639,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "brian@glusman.me",
            "sender_full_name": "Brian Glusman (SP2'15)",
            "sender_id": 7848,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "(no topic)",
            "submessages": [],
            "timestamp": 1428356386,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/05023e2779bfc2793d79ee30c81af6ca291539ce?x=x&version=1",
            "client": "website",
            "content": "<p>structs that have fields that are maps or slices is totally normal.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37760555,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "jordanorelli@gmail.com",
            "sender_full_name": "Jordan Orelli (F'11)",
            "sender_id": 872,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "(no topic)",
            "submessages": [],
            "timestamp": 1428357422,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/05023e2779bfc2793d79ee30c81af6ca291539ce?x=x&version=1",
            "client": "website",
            "content": "<p><code>func NewViewServer() *ViewServer { return &amp;ViewServer{clientStates: make(map[string]ClientState)}}</code></p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37760598,
            "is_me_message": false,
            "last_edit_timestamp": 1428357503,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "jordanorelli@gmail.com",
            "sender_full_name": "Jordan Orelli (F'11)",
            "sender_id": 872,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "(no topic)",
            "submessages": [],
            "timestamp": 1428357483,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/5d46121e9a899e151cfcd0e59aa9e9f8a78989e8?x=x&version=1",
            "client": "desktop app Linux 0.4.4",
            "content": "<p><span class=\"user-mention\" data-user-email=\"brian@glusman.me\">@Brian Glusman (SP2'15)</span> If you simply declare a struct (<code>var foo Foo</code>), then all the fields are set to the zero value for that type: <a href=\"https://golang.org/ref/spec#The_zero_value\" target=\"_blank\" title=\"https://golang.org/ref/spec#The_zero_value\">https://golang.org/ref/spec#The_zero_value</a></p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37760892,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "aditya@adityamukerjee.net",
            "sender_full_name": "Aditya Mukerjee (he) (SP1'15)",
            "sender_id": 7644,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "(no topic)",
            "submessages": [],
            "timestamp": 1428357789,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/5d46121e9a899e151cfcd0e59aa9e9f8a78989e8?x=x&version=1",
            "client": "desktop app Linux 0.4.4",
            "content": "<p>which is why you're getting nil to start with; the zero value for a map is nil</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37760896,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "aditya@adityamukerjee.net",
            "sender_full_name": "Aditya Mukerjee (he) (SP1'15)",
            "sender_id": 7644,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "(no topic)",
            "submessages": [],
            "timestamp": 1428357802,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/b05b48dffacfe8bc5336d44718f65da6?d=identicon&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>yeah, I worked out, though now trying to figure out correct way to test if a key is present, it doesn't like doing if foo['bar'] :-)</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37760973,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "brian@glusman.me",
            "sender_full_name": "Brian Glusman (SP2'15)",
            "sender_id": 7848,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "(no topic)",
            "submessages": [],
            "timestamp": 1428357866,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/b05b48dffacfe8bc5336d44718f65da6?d=identicon&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>thanks though</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37760977,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "brian@glusman.me",
            "sender_full_name": "Brian Glusman (SP2'15)",
            "sender_id": 7848,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "(no topic)",
            "submessages": [],
            "timestamp": 1428357876,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/b05b48dffacfe8bc5336d44718f65da6?d=identicon&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>oh</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37760980,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "brian@glusman.me",
            "sender_full_name": "Brian Glusman (SP2'15)",
            "sender_id": 7848,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "(no topic)",
            "submessages": [],
            "timestamp": 1428357881,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/b05b48dffacfe8bc5336d44718f65da6?d=identicon&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>have to check if foo['bar'] == nil I guess?</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37760986,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "brian@glusman.me",
            "sender_full_name": "Brian Glusman (SP2'15)",
            "sender_id": 7848,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "(no topic)",
            "submessages": [],
            "timestamp": 1428357892,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/05023e2779bfc2793d79ee30c81af6ca291539ce?x=x&version=1",
            "client": "website",
            "content": "<p>depends on the type</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37760989,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "jordanorelli@gmail.com",
            "sender_full_name": "Jordan Orelli (F'11)",
            "sender_id": 872,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "(no topic)",
            "submessages": [],
            "timestamp": 1428357900,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/b05b48dffacfe8bc5336d44718f65da6?d=identicon&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>so used to ruby :-)</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37760991,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "brian@glusman.me",
            "sender_full_name": "Brian Glusman (SP2'15)",
            "sender_id": 7848,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "(no topic)",
            "submessages": [],
            "timestamp": 1428357902,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/05023e2779bfc2793d79ee30c81af6ca291539ce?x=x&version=1",
            "client": "website",
            "content": "<p>if you ask for a key that doesn't exist</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37760992,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "jordanorelli@gmail.com",
            "sender_full_name": "Jordan Orelli (F'11)",
            "sender_id": 872,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "(no topic)",
            "submessages": [],
            "timestamp": 1428357906,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/b05b48dffacfe8bc5336d44718f65da6?d=identicon&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>well, foo being a map</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37760994,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "brian@glusman.me",
            "sender_full_name": "Brian Glusman (SP2'15)",
            "sender_id": 7848,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "(no topic)",
            "submessages": [],
            "timestamp": 1428357909,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/05023e2779bfc2793d79ee30c81af6ca291539ce?x=x&version=1",
            "client": "website",
            "content": "<p>you get the zero-value back</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37760995,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "jordanorelli@gmail.com",
            "sender_full_name": "Jordan Orelli (F'11)",
            "sender_id": 872,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "(no topic)",
            "submessages": [],
            "timestamp": 1428357909,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/05023e2779bfc2793d79ee30c81af6ca291539ce?x=x&version=1",
            "client": "website",
            "content": "<p>i mean the type of the value.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37760997,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "jordanorelli@gmail.com",
            "sender_full_name": "Jordan Orelli (F'11)",
            "sender_id": 872,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "(no topic)",
            "submessages": [],
            "timestamp": 1428357914,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/b05b48dffacfe8bc5336d44718f65da6?d=identicon&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>oh, hmm</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37761000,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "brian@glusman.me",
            "sender_full_name": "Brian Glusman (SP2'15)",
            "sender_id": 7848,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "(no topic)",
            "submessages": [],
            "timestamp": 1428357916,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/05023e2779bfc2793d79ee30c81af6ca291539ce?x=x&version=1",
            "client": "website",
            "content": "<p>in the map</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37761002,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "jordanorelli@gmail.com",
            "sender_full_name": "Jordan Orelli (F'11)",
            "sender_id": 872,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "(no topic)",
            "submessages": [],
            "timestamp": 1428357917,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/05023e2779bfc2793d79ee30c81af6ca291539ce?x=x&version=1",
            "client": "website",
            "content": "<p>BUT</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37761005,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "jordanorelli@gmail.com",
            "sender_full_name": "Jordan Orelli (F'11)",
            "sender_id": 872,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "(no topic)",
            "submessages": [],
            "timestamp": 1428357920,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/05023e2779bfc2793d79ee30c81af6ca291539ce?x=x&version=1",
            "client": "website",
            "content": "<p>there's a different form.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37761009,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "jordanorelli@gmail.com",
            "sender_full_name": "Jordan Orelli (F'11)",
            "sender_id": 872,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "(no topic)",
            "submessages": [],
            "timestamp": 1428357922,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/05023e2779bfc2793d79ee30c81af6ca291539ce?x=x&version=1",
            "client": "website",
            "content": "<p><code>v, ok := m[key]</code></p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37761011,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "jordanorelli@gmail.com",
            "sender_full_name": "Jordan Orelli (F'11)",
            "sender_id": 872,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "(no topic)",
            "submessages": [],
            "timestamp": 1428357929,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/05023e2779bfc2793d79ee30c81af6ca291539ce?x=x&version=1",
            "client": "website",
            "content": "<p><code>v</code> is the value of <code>m[key]</code></p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37761018,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "jordanorelli@gmail.com",
            "sender_full_name": "Jordan Orelli (F'11)",
            "sender_id": 872,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "(no topic)",
            "submessages": [],
            "timestamp": 1428357939,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/05023e2779bfc2793d79ee30c81af6ca291539ce?x=x&version=1",
            "client": "website",
            "content": "<p><code>ok</code> is a bool</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37761024,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "jordanorelli@gmail.com",
            "sender_full_name": "Jordan Orelli (F'11)",
            "sender_id": 872,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "(no topic)",
            "submessages": [],
            "timestamp": 1428357944,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/05023e2779bfc2793d79ee30c81af6ca291539ce?x=x&version=1",
            "client": "website",
            "content": "<p>of whether we legitimately read the value</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37761030,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "jordanorelli@gmail.com",
            "sender_full_name": "Jordan Orelli (F'11)",
            "sender_id": 872,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "(no topic)",
            "submessages": [],
            "timestamp": 1428357948,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/b05b48dffacfe8bc5336d44718f65da6?d=identicon&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>ahh, ok, thanks</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37761034,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "brian@glusman.me",
            "sender_full_name": "Brian Glusman (SP2'15)",
            "sender_id": 7848,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "(no topic)",
            "submessages": [],
            "timestamp": 1428357951,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/05023e2779bfc2793d79ee30c81af6ca291539ce?x=x&version=1",
            "client": "website",
            "content": "<p>or you're getting back the zero-value</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37761035,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "jordanorelli@gmail.com",
            "sender_full_name": "Jordan Orelli (F'11)",
            "sender_id": 872,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "(no topic)",
            "submessages": [],
            "timestamp": 1428357956,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/05023e2779bfc2793d79ee30c81af6ca291539ce?x=x&version=1",
            "client": "website",
            "content": "<p>because no value existed</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37761039,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "jordanorelli@gmail.com",
            "sender_full_name": "Jordan Orelli (F'11)",
            "sender_id": 872,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "(no topic)",
            "submessages": [],
            "timestamp": 1428357959,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/05023e2779bfc2793d79ee30c81af6ca291539ce?x=x&version=1",
            "client": "website",
            "content": "<p>so <code>if _, ok := m[key]; !ok { ... }</code></p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37761079,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "jordanorelli@gmail.com",
            "sender_full_name": "Jordan Orelli (F'11)",
            "sender_id": 872,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "(no topic)",
            "submessages": [],
            "timestamp": 1428357974,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/05023e2779bfc2793d79ee30c81af6ca291539ce?x=x&version=1",
            "client": "website",
            "content": "<p>is a thing you could do.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37761083,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "jordanorelli@gmail.com",
            "sender_full_name": "Jordan Orelli (F'11)",
            "sender_id": 872,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "(no topic)",
            "submessages": [],
            "timestamp": 1428357978,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/5d46121e9a899e151cfcd0e59aa9e9f8a78989e8?x=x&version=1",
            "client": "desktop app Linux 0.4.4",
            "content": "<p>.....which is why there is no set type in Go</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37761094,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "aditya@adityamukerjee.net",
            "sender_full_name": "Aditya Mukerjee (he) (SP1'15)",
            "sender_id": 7644,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "(no topic)",
            "submessages": [],
            "timestamp": 1428357989,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/5d46121e9a899e151cfcd0e59aa9e9f8a78989e8?x=x&version=1",
            "client": "desktop app Linux 0.4.4",
            "content": "<p>because everyone just uses map[string]struct{}</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37761103,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "aditya@adityamukerjee.net",
            "sender_full_name": "Aditya Mukerjee (he) (SP1'15)",
            "sender_id": 7644,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "(no topic)",
            "submessages": [],
            "timestamp": 1428358001,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/05023e2779bfc2793d79ee30c81af6ca291539ce?x=x&version=1",
            "client": "website",
            "content": "<p>yeah that drives me bonkers</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37761105,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "jordanorelli@gmail.com",
            "sender_full_name": "Jordan Orelli (F'11)",
            "sender_id": 872,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "(no topic)",
            "submessages": [],
            "timestamp": 1428358006,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/5d46121e9a899e151cfcd0e59aa9e9f8a78989e8?x=x&version=1",
            "client": "desktop app Linux 0.4.4",
            "content": "<p>(if you want a set of strings)</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37761106,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "aditya@adityamukerjee.net",
            "sender_full_name": "Aditya Mukerjee (he) (SP1'15)",
            "sender_id": 7644,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "(no topic)",
            "submessages": [],
            "timestamp": 1428358006,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/05023e2779bfc2793d79ee30c81af6ca291539ce?x=x&version=1",
            "client": "website",
            "content": "<p>hahaha</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37761108,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "jordanorelli@gmail.com",
            "sender_full_name": "Jordan Orelli (F'11)",
            "sender_id": 872,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "(no topic)",
            "submessages": [],
            "timestamp": 1428358007,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/5d46121e9a899e151cfcd0e59aa9e9f8a78989e8?x=x&version=1",
            "client": "desktop app Linux 0.4.4",
            "content": "<p>why?</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37761111,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "aditya@adityamukerjee.net",
            "sender_full_name": "Aditya Mukerjee (he) (SP1'15)",
            "sender_id": 7644,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "(no topic)",
            "submessages": [],
            "timestamp": 1428358012,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/05023e2779bfc2793d79ee30c81af6ca291539ce?x=x&version=1",
            "client": "website",
            "content": "<p>because it only covers the existence check</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37761126,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "jordanorelli@gmail.com",
            "sender_full_name": "Jordan Orelli (F'11)",
            "sender_id": 872,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "(no topic)",
            "submessages": [],
            "timestamp": 1428358028,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/05023e2779bfc2793d79ee30c81af6ca291539ce?x=x&version=1",
            "client": "website",
            "content": "<p>that's not really a full set implementation</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37761129,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "jordanorelli@gmail.com",
            "sender_full_name": "Jordan Orelli (F'11)",
            "sender_id": 872,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "(no topic)",
            "submessages": [],
            "timestamp": 1428358031,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/5d46121e9a899e151cfcd0e59aa9e9f8a78989e8?x=x&version=1",
            "client": "desktop app Linux 0.4.4",
            "content": "<p>oh, haha, yeah</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37761143,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "aditya@adityamukerjee.net",
            "sender_full_name": "Aditya Mukerjee (he) (SP1'15)",
            "sender_id": 7644,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "(no topic)",
            "submessages": [],
            "timestamp": 1428358055,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/5d46121e9a899e151cfcd0e59aa9e9f8a78989e8?x=x&version=1",
            "client": "desktop app Linux 0.4.4",
            "content": "<p>I mean, union is pretty easy to add</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37761149,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "aditya@adityamukerjee.net",
            "sender_full_name": "Aditya Mukerjee (he) (SP1'15)",
            "sender_id": 7644,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "(no topic)",
            "submessages": [],
            "timestamp": 1428358063,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/5d46121e9a899e151cfcd0e59aa9e9f8a78989e8?x=x&version=1",
            "client": "desktop app Linux 0.4.4",
            "content": "<p>left/right difference is kind of annoying; I did that once</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37761155,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "aditya@adityamukerjee.net",
            "sender_full_name": "Aditya Mukerjee (he) (SP1'15)",
            "sender_id": 7644,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "(no topic)",
            "submessages": [],
            "timestamp": 1428358070,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/05023e2779bfc2793d79ee30c81af6ca291539ce?x=x&version=1",
            "client": "website",
            "content": "<p>but yeah, <code>map[thing]bool</code> is super common.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37761156,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "jordanorelli@gmail.com",
            "sender_full_name": "Jordan Orelli (F'11)",
            "sender_id": 872,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "(no topic)",
            "submessages": [],
            "timestamp": 1428358070,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/5d46121e9a899e151cfcd0e59aa9e9f8a78989e8?x=x&version=1",
            "client": "desktop app Linux 0.4.4",
            "content": "<p><code>map[thing]struct{}</code> uses less memory, though</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37761188,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "aditya@adityamukerjee.net",
            "sender_full_name": "Aditya Mukerjee (he) (SP1'15)",
            "sender_id": 7644,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "(no topic)",
            "submessages": [],
            "timestamp": 1428358084,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/5d46121e9a899e151cfcd0e59aa9e9f8a78989e8?x=x&version=1",
            "client": "desktop app Linux 0.4.4",
            "content": "<p><a href=\"http://dave.cheney.net/2014/03/25/the-empty-struct\" target=\"_blank\" title=\"http://dave.cheney.net/2014/03/25/the-empty-struct\">http://dave.cheney.net/2014/03/25/the-empty-struct</a></p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37761319,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "aditya@adityamukerjee.net",
            "sender_full_name": "Aditya Mukerjee (he) (SP1'15)",
            "sender_id": 7644,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "(no topic)",
            "submessages": [],
            "timestamp": 1428358231,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/05023e2779bfc2793d79ee30c81af6ca291539ce?x=x&version=1",
            "client": "website",
            "content": "<p>ha i never noticed</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37761334,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "jordanorelli@gmail.com",
            "sender_full_name": "Jordan Orelli (F'11)",
            "sender_id": 872,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "(no topic)",
            "submessages": [],
            "timestamp": 1428358258,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/05023e2779bfc2793d79ee30c81af6ca291539ce?x=x&version=1",
            "client": "website",
            "content": "<p>i always used bool because i like <code>if m[key] { ...  }</code></p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37761352,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "jordanorelli@gmail.com",
            "sender_full_name": "Jordan Orelli (F'11)",
            "sender_id": 872,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "(no topic)",
            "submessages": [],
            "timestamp": 1428358281,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/5d46121e9a899e151cfcd0e59aa9e9f8a78989e8?x=x&version=1",
            "client": "desktop app Linux 0.4.4",
            "content": "<p>Hey <span class=\"user-mention\" data-user-email=\"*\">@all</span> gophers - I'm about to submit a proposal to the official #golang-dev mailing list for adding my gojson tool to the go tools collection. I know a number of people in here have used it &amp; found it useful - if any of you have a few minutes, a note of support or two on the thread could go a long way. :)</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37792904,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "aditya@adityamukerjee.net",
            "sender_full_name": "Aditya Mukerjee (he) (SP1'15)",
            "sender_id": 7644,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "gojson proposal",
            "submessages": [],
            "timestamp": 1428421192,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/5d46121e9a899e151cfcd0e59aa9e9f8a78989e8?x=x&version=1",
            "client": "desktop app Linux 0.4.4",
            "content": "<p><a href=\"https://groups.google.com/forum/?utm_source=digest&amp;utm_medium=email#!topic/golang-dev/iUNEPO8m6jo\" target=\"_blank\" title=\"https://groups.google.com/forum/?utm_source=digest&amp;utm_medium=email#!topic/golang-dev/iUNEPO8m6jo\">https://groups.google.com/forum/?utm_source=digest&amp;utm_medium=email#!topic/golang-dev/iUNEPO8m6jo</a></p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37794121,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "aditya@adityamukerjee.net",
            "sender_full_name": "Aditya Mukerjee (he) (SP1'15)",
            "sender_id": 7644,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "gojson proposal",
            "submessages": [],
            "timestamp": 1428422539,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/5d46121e9a899e151cfcd0e59aa9e9f8a78989e8?x=x&version=1",
            "client": "desktop app Linux 0.4.4",
            "content": "<p>^ <span class=\"user-mention\" data-user-email=\"ghthor@gmail.com\">@Willa Walthall (W2'15)</span> <span class=\"user-mention\" data-user-email=\"max.t.mcdonnell@gmail.com\">@Max McDonnell (W2'15)</span> <span class=\"user-mention\" data-user-email=\"jordanorelli@gmail.com\">@Jordan Orelli (F'11)</span> <span class=\"user-mention\" data-user-email=\"travis@mcdem.us\">@Travis McDemus (S'13)</span>  - I think you've all used the tool before</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37794140,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "aditya@adityamukerjee.net",
            "sender_full_name": "Aditya Mukerjee (he) (SP1'15)",
            "sender_id": 7644,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "gojson proposal",
            "submessages": [],
            "timestamp": 1428422571,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/1380ded36dafac0d6f808b9b7b6c4e85266428a1?x=x&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>Have you talked to Francesc about it? </p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37807356,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "travis@mcdem.us",
            "sender_full_name": "Travis McDemus (S'13)",
            "sender_id": 2139,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "gojson proposal",
            "submessages": [],
            "timestamp": 1428437520,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/1380ded36dafac0d6f808b9b7b6c4e85266428a1?x=x&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>He's a pretty friendly / approachable, I'd ask him too.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37807422,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "travis@mcdem.us",
            "sender_full_name": "Travis McDemus (S'13)",
            "sender_id": 2139,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "gojson proposal",
            "submessages": [],
            "timestamp": 1428437612,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/a179bb8c3fc4ab0975954f57d47fa6c53a8c2dad?x=x&version=2",
            "client": "website",
            "content": "<p>What does Francesc actually do? I don't ever see him on golang-dev and he has only a few commits in the main repo.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37810805,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "jay@jayschwa.net",
            "sender_full_name": "Jay Weisskopf Petacat (W2'17)",
            "sender_id": 829,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "gojson proposal",
            "submessages": [],
            "timestamp": 1428441672,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/391eb183c3474a15bf9ad0e87d3ff118?d=identicon&version=1",
            "client": "website",
            "content": "<p>Doesn't look like it's going to well -_- *bro fist*</p>\n<p>offtopic: Did they ever make a statement about the vendored declarations file? I feel like I've scanned that thread a few times and didn't see anything official.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37811243,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "ghthor@gmail.com",
            "sender_full_name": "Will Drengwitz (he) (W1'17)",
            "sender_id": 7099,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "gojson proposal",
            "submessages": [],
            "timestamp": 1428442191,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/5d46121e9a899e151cfcd0e59aa9e9f8a78989e8?x=x&version=1",
            "client": "desktop app Linux 0.4.4",
            "content": "<p><span class=\"user-mention\" data-user-email=\"travis@mcdem.us\">@Travis McDemus (S'13)</span> Yeah, I've conversed with him a few times/we follow each other on Twitter. I actually shot him an email abuot this a while back but he never responded</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37811743,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "aditya@adityamukerjee.net",
            "sender_full_name": "Aditya Mukerjee (he) (SP1'15)",
            "sender_id": 7644,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "gojson proposal",
            "submessages": [],
            "timestamp": 1428442798,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/5d46121e9a899e151cfcd0e59aa9e9f8a78989e8?x=x&version=1",
            "client": "desktop app Linux 0.4.4",
            "content": "<p><span class=\"user-mention\" data-user-email=\"ghthor@gmail.com\">@Willa Walthall (W2'15)</span> no, no official statement yet as far as I can tell</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37811776,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "aditya@adityamukerjee.net",
            "sender_full_name": "Aditya Mukerjee (he) (SP1'15)",
            "sender_id": 7644,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "gojson proposal",
            "submessages": [],
            "timestamp": 1428442808,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/5d46121e9a899e151cfcd0e59aa9e9f8a78989e8?x=x&version=1",
            "client": "desktop app Linux 0.4.4",
            "content": "<p><span class=\"user-mention\" data-user-email=\"ghthor@gmail.com\">@Willa Walthall (W2'15)</span> I'll take the :bro fist: though ;)</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37811790,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "aditya@adityamukerjee.net",
            "sender_full_name": "Aditya Mukerjee (he) (SP1'15)",
            "sender_id": 7644,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "gojson proposal",
            "submessages": [],
            "timestamp": 1428442841,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/1380ded36dafac0d6f808b9b7b6c4e85266428a1?x=x&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p><span class=\"user-mention\" data-user-email=\"jay@jayschwa.net\">@Jay Weisskopf (W'13)</span> Francesc is basically their \"Developer Relations\"  (or \"dev avangelist,\" I think), so he's more of a public face for the team for IRL events, meetups, talks, leads workshops, etc.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37811878,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "travis@mcdem.us",
            "sender_full_name": "Travis McDemus (S'13)",
            "sender_id": 2139,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "gojson proposal",
            "submessages": [],
            "timestamp": 1428442955,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/1380ded36dafac0d6f808b9b7b6c4e85266428a1?x=x&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>He was at that one golang meetup we were at a whiiiile back... (the one at that tiny incubator space that one of the Splice founders was working out of).</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37811902,
            "is_me_message": false,
            "last_edit_timestamp": 1428443034,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "travis@mcdem.us",
            "sender_full_name": "Travis McDemus (S'13)",
            "sender_id": 2139,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "gojson proposal",
            "submessages": [],
            "timestamp": 1428443003,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/1380ded36dafac0d6f808b9b7b6c4e85266428a1?x=x&version=1",
            "client": "website",
            "content": "<p>Case in point: <a href=\"https://twitter.com/lambdadevfr/status/585782230703874048\" target=\"_blank\" title=\"https://twitter.com/lambdadevfr/status/585782230703874048\">https://twitter.com/lambdadevfr/status/585782230703874048</a> </p>\n<div class=\"inline-preview-twitter\"><div class=\"twitter-tweet\"><a href=\"https://twitter.com/lambdadevfr/status/585782230703874048\" target=\"_blank\"><img class=\"twitter-avatar\" src=\"https://pbs.twimg.com/profile_images/3346247666/d53890ca9f4a2e3aab4c13cdebbf04dd_normal.jpeg\"></a><p>Quand <a href=\"https://twitter.com/francesc\" target=\"_blank\" title=\"https://twitter.com/francesc\">@francesc</a> pr\u00e9sente Go a #Devoxxfr \u00e7a fait salle comble <a href=\"http://t.co/gayyfSmNTm\" target=\"_blank\" title=\"http://t.co/gayyfSmNTm\">http://twitter.com/lambdadevfr/status/585782230703874048/photo/1</a></p><span>- lambdadev (@lambdadevfr)</span><div class=\"twitter-image\"><a href=\"http://t.co/gayyfSmNTm\" target=\"_blank\" title=\"http://t.co/gayyfSmNTm\"><img src=\"https://pbs.twimg.com/media/CCEd1cmWEAAl4Tu.jpg:medium\"></a></div></div></div>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37842983,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "travis@mcdem.us",
            "sender_full_name": "Travis McDemus (S'13)",
            "sender_id": 2139,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "gojson proposal",
            "submessages": [],
            "timestamp": 1428504699,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/a1d3f5af6ebf01fccd9e772ca2a04ba5?d=identicon&version=1",
            "client": "website",
            "content": "<p>Just finished Go Challenge #2 yesterday. Anyone interested in trading code reviews before submitting it? (cc <span class=\"user-mention\" data-user-email=\"aditya@adityamukerjee.net\">@Aditya Mukerjee (SP1'15)</span>)</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37843767,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "ken@kenpratt.net",
            "sender_full_name": "Ken Pratt (he) (SP2'15)",
            "sender_id": 7850,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "go challenge #2",
            "submessages": [],
            "timestamp": 1428505621,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/5d46121e9a899e151cfcd0e59aa9e9f8a78989e8?x=x&version=1",
            "client": "desktop app Linux 0.4.4",
            "content": "<p><span class=\"user-mention\" data-user-email=\"ken@kenpratt.net\">@Ken Pratt (SP2'15)</span> yes, though that would require that I finish it first. :) working on that</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37844019,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "aditya@adityamukerjee.net",
            "sender_full_name": "Aditya Mukerjee (he) (SP1'15)",
            "sender_id": 7644,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "go challenge #2",
            "submessages": [],
            "timestamp": 1428505992,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/a1d3f5af6ebf01fccd9e772ca2a04ba5?d=identicon&version=1",
            "client": "website",
            "content": "<p>Sounds good, no rush.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37844068,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "ken@kenpratt.net",
            "sender_full_name": "Ken Pratt (he) (SP2'15)",
            "sender_id": 7850,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "go challenge #2",
            "submessages": [],
            "timestamp": 1428506046,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/0a35beaf5a354dafdf10494c0313e10fffc154fd?x=x&version=1",
            "client": "website",
            "content": "<p>I want to conditionally assign a value to a certain key in my map. I could certainly do:</p>\n<div class=\"codehilite\"><pre><span class=\"n\">m</span> <span class=\"p\">:=</span> <span class=\"nb\">make</span><span class=\"p\">(</span><span class=\"k\">map</span><span class=\"p\">[</span><span class=\"nb\">string</span><span class=\"p\">]</span><span class=\"nb\">int</span><span class=\"p\">)</span>\n<span class=\"k\">if</span> <span class=\"n\">bar</span> <span class=\"p\">!=</span> <span class=\"n\">nil</span> <span class=\"p\">{</span>\n    <span class=\"n\">m</span><span class=\"p\">[</span><span class=\"s\">&quot;foo&quot;</span><span class=\"p\">]</span> <span class=\"p\">=</span> <span class=\"n\">bar</span>\n<span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"p\">{</span>\n    <span class=\"n\">m</span><span class=\"p\">[</span><span class=\"s\">&quot;foo&quot;</span><span class=\"p\">]</span> <span class=\"p\">=</span> <span class=\"n\">baz</span>\n<span class=\"p\">}</span>\n</pre></div>\n\n\n<p>but that's gonna be clunky and weird given the code that already exists:</p>\n<div class=\"codehilite\"><pre><span class=\"n\">emailVars</span> <span class=\"p\">:=</span> <span class=\"k\">map</span><span class=\"p\">[</span><span class=\"nb\">string</span><span class=\"p\">]</span><span class=\"nb\">string</span><span class=\"p\">{</span>\n            <span class=\"s\">&quot;PRODUCT_NAME&quot;</span><span class=\"p\">:</span>      <span class=\"n\">product</span><span class=\"p\">.</span><span class=\"n\">Name</span><span class=\"p\">,</span>\n            <span class=\"s\">&quot;PHOTO&quot;</span><span class=\"p\">:</span>             <span class=\"n\">product</span><span class=\"p\">.</span><span class=\"n\">Photos</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">].</span><span class=\"n\">CdnUrl</span><span class=\"p\">(),</span>\n                        <span class=\"p\">...</span>\n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37853968,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "maia.mcc@gmail.com",
            "sender_full_name": "Maia McCormick (she) (S2'14)",
            "sender_id": 6175,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "inline conditionals?",
            "submessages": [],
            "timestamp": 1428517745,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/0a35beaf5a354dafdf10494c0313e10fffc154fd?x=x&version=1",
            "client": "website",
            "content": "<p>is there a way to make the above conditional happen in a single line, in the context of the initializing-a-map-with-all-the-following-stuff-in-it* statement?</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37853999,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "maia.mcc@gmail.com",
            "sender_full_name": "Maia McCormick (she) (S2'14)",
            "sender_id": 6175,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "inline conditionals?",
            "submessages": [],
            "timestamp": 1428517783,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/0a35beaf5a354dafdf10494c0313e10fffc154fd?x=x&version=1",
            "client": "website",
            "content": "<p>*no, i have no idea what this is actually called. can anyone enlighten me?</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37854012,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "maia.mcc@gmail.com",
            "sender_full_name": "Maia McCormick (she) (S2'14)",
            "sender_id": 6175,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "inline conditionals?",
            "submessages": [],
            "timestamp": 1428517796,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/5d46121e9a899e151cfcd0e59aa9e9f8a78989e8?x=x&version=1",
            "client": "desktop app Linux 0.4.4",
            "content": "<p>if bar != nil{ m[\"foo\"] = bar} is valid</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37856872,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "aditya@adityamukerjee.net",
            "sender_full_name": "Aditya Mukerjee (he) (SP1'15)",
            "sender_id": 7644,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "inline conditionals?",
            "submessages": [],
            "timestamp": 1428520363,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/5d46121e9a899e151cfcd0e59aa9e9f8a78989e8?x=x&version=1",
            "client": "desktop app Linux 0.4.4",
            "content": "<p>but there's no one-line conditional like in C, if that's what you're asking</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37856879,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "aditya@adityamukerjee.net",
            "sender_full_name": "Aditya Mukerjee (he) (SP1'15)",
            "sender_id": 7644,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "inline conditionals?",
            "submessages": [],
            "timestamp": 1428520369,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/5d46121e9a899e151cfcd0e59aa9e9f8a78989e8?x=x&version=1",
            "client": "desktop app Linux 0.4.4",
            "content": "<p>it also sounds like what you're trying to do is basically the ternary operator, which Go does not have</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37856935,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "aditya@adityamukerjee.net",
            "sender_full_name": "Aditya Mukerjee (he) (SP1'15)",
            "sender_id": 7644,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "inline conditionals?",
            "submessages": [],
            "timestamp": 1428520419,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/5d46121e9a899e151cfcd0e59aa9e9f8a78989e8?x=x&version=1",
            "client": "desktop app Linux 0.4.4",
            "content": "<p>ie, <code>var result = m[\"foo\"] ? bar : baz</code></p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37856992,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "aditya@adityamukerjee.net",
            "sender_full_name": "Aditya Mukerjee (he) (SP1'15)",
            "sender_id": 7644,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "inline conditionals?",
            "submessages": [],
            "timestamp": 1428520448,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/0baa75c82ed02d819be85a4b24b0f4d3?d=identicon&version=1",
            "client": "website",
            "content": "<p>I would wrap the if/else in a function assuming you'll need this for setting multiple keys <a href=\"http://play.golang.org/p/XN6Zi3Ws--\" target=\"_blank\" title=\"http://play.golang.org/p/XN6Zi3Ws--\">http://play.golang.org/p/XN6Zi3Ws--</a></p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37858540,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "mdparker89@gmail.com",
            "sender_full_name": "Matthew Parker (F2'14)",
            "sender_id": 6698,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "inline conditionals?",
            "submessages": [],
            "timestamp": 1428521995,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/b05b48dffacfe8bc5336d44718f65da6?d=identicon&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>Are there any gotchas to be aware of with putting a struct pointer into a channel?  I'm trying to serialize rpc calls that have a reply pointer, and it seems like somehow on reading from channel I have a copy of the pointers object instead of the pointer</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37900198,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "brian@glusman.me",
            "sender_full_name": "Brian Glusman (SP2'15)",
            "sender_id": 7848,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "struct pointers",
            "submessages": [],
            "timestamp": 1428595403,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/a179bb8c3fc4ab0975954f57d47fa6c53a8c2dad?x=x&version=2",
            "client": "website",
            "content": "<p>Can you give an example? I'm not sure what you mean.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37901565,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "jay@jayschwa.net",
            "sender_full_name": "Jay Weisskopf Petacat (W2'17)",
            "sender_id": 829,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "struct pointers",
            "submessages": [],
            "timestamp": 1428597220,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/b05b48dffacfe8bc5336d44718f65da6?d=identicon&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p><span class=\"user-mention\" data-user-email=\"jay@jayschwa.net\">@Jay Weisskopf (W'13)</span> thanks, fair question... we kind of worked around it for now but still curious, um...  can paste some ugly code here or in a gist, but not sure how clear it'll be, its from MIT lab for Paxos/viewserver stuff</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37901913,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "brian@glusman.me",
            "sender_full_name": "Brian Glusman (SP2'15)",
            "sender_id": 7848,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "struct pointers",
            "submessages": [],
            "timestamp": 1428597762,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/b05b48dffacfe8bc5336d44718f65da6?d=identicon&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>if you're curious can paste somewhere, but if just trying to help nothing urgent/blocking...  thanks though!</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37901925,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "brian@glusman.me",
            "sender_full_name": "Brian Glusman (SP2'15)",
            "sender_id": 7848,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "struct pointers",
            "submessages": [],
            "timestamp": 1428597787,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/0a35beaf5a354dafdf10494c0313e10fffc154fd?x=x&version=1",
            "client": "website",
            "content": "<div class=\"codehilite\"><pre><span class=\"k\">if</span> <span class=\"n\">vendor</span><span class=\"p\">.</span><span class=\"n\">Retailer</span> <span class=\"p\">!=</span> <span class=\"n\">nil</span> <span class=\"p\">{</span>\n        <span class=\"n\">displayName</span> <span class=\"p\">:=</span> <span class=\"p\">*</span><span class=\"n\">vendor</span><span class=\"p\">.</span><span class=\"n\">Retailer</span>\n    <span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"p\">{</span>\n        <span class=\"n\">displayName</span> <span class=\"p\">:=</span> <span class=\"n\">vendor</span><span class=\"p\">.</span><span class=\"n\">Name</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"k\">return</span> <span class=\"n\">vendorApiResponse</span><span class=\"p\">{</span>\n        <span class=\"n\">Id</span><span class=\"p\">:</span>                  <span class=\"n\">vendor</span><span class=\"p\">.</span><span class=\"n\">Id</span><span class=\"p\">,</span>\n        <span class=\"n\">Name</span><span class=\"p\">:</span>                <span class=\"n\">vendor</span><span class=\"p\">.</span><span class=\"n\">Name</span><span class=\"p\">,</span>\n        <span class=\"n\">DisplayName</span><span class=\"p\">:</span>         <span class=\"n\">displayName</span><span class=\"p\">,</span>\n                <span class=\"p\">...</span>\n         <span class=\"p\">}</span>\n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37911728,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "maia.mcc@gmail.com",
            "sender_full_name": "Maia McCormick (she) (S2'14)",
            "sender_id": 6175,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "why is this still undefined?",
            "submessages": [],
            "timestamp": 1428610253,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/0a35beaf5a354dafdf10494c0313e10fffc154fd?x=x&version=1",
            "client": "website",
            "content": "<p>I get the error that <code>displayName</code> is undefined... but at least one branch of the if statement at top must be tripped, and it would initialize and define <code>displayName</code> there, no?</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37911752,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "maia.mcc@gmail.com",
            "sender_full_name": "Maia McCormick (she) (S2'14)",
            "sender_id": 6175,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "why is this still undefined?",
            "submessages": [],
            "timestamp": 1428610301,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/2de9901913d2f414b7b174d2c2c69a88?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"maia.mcc@gmail.com\">@Maia McCormick (S'14)</span> I'm not a golang expert but I think it's possible that the compiler isn't smart enough to figure that out, and needs you to declare it unconditionally (and then change it inside a condition if necessary).</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37911913,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "chris@printf.net",
            "sender_full_name": "Chris Ball (SP2'15)",
            "sender_id": 7857,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "why is this still undefined?",
            "submessages": [],
            "timestamp": 1428610532,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/2de9901913d2f414b7b174d2c2c69a88?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"maia.mcc@gmail.com\">@Maia McCormick (S'14)</span> Maybe \"var displayName interface{}\" on the line before the if, and then change := to =?</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37912043,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "chris@printf.net",
            "sender_full_name": "Chris Ball (SP2'15)",
            "sender_id": 7857,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "why is this still undefined?",
            "submessages": [],
            "timestamp": 1428610697,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/a179bb8c3fc4ab0975954f57d47fa6c53a8c2dad?x=x&version=2",
            "client": "website",
            "content": "<p>Things between <code>{}</code> are new scopes. If a variable is declared in scope X, the variable will be accessible to any sub-scopes contained within X, but not the super-scope containing X. Since <code>displayName</code> is declared inside the <code>if</code> or <code>else</code> branch scopes, it isn't available outside of them. I'd suggest changing it to something like:</p>\n<div class=\"codehilite\"><pre>displayName := vendor.Name\nif vendor.Retailer != nil {\n    displayName = *vendor.Retailer\n}\n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37912964,
            "is_me_message": false,
            "last_edit_timestamp": 1428612246,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "jay@jayschwa.net",
            "sender_full_name": "Jay Weisskopf Petacat (W2'17)",
            "sender_id": 829,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "why is this still undefined?",
            "submessages": [],
            "timestamp": 1428611878,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/0a35beaf5a354dafdf10494c0313e10fffc154fd?x=x&version=1",
            "client": "website",
            "content": "<p>got it, thanks <span class=\"user-mention\" data-user-email=\"jay@jayschwa.net\">@Jay Weisskopf (W'13)</span> and <span class=\"user-mention\" data-user-email=\"chris@printf.net\">@Chris Ball (SP2'15)</span> !</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37918478,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "maia.mcc@gmail.com",
            "sender_full_name": "Maia McCormick (she) (S2'14)",
            "sender_id": 6175,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "why is this still undefined?",
            "submessages": [],
            "timestamp": 1428619062,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/0baa75c82ed02d819be85a4b24b0f4d3?d=identicon&version=1",
            "client": "website",
            "content": "<p>A list of common Go mistakes <a href=\"https://github.com/golang/go/wiki/CodeReviewComments\" target=\"_blank\" title=\"https://github.com/golang/go/wiki/CodeReviewComments\">https://github.com/golang/go/wiki/CodeReviewComments</a></p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37943484,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "mdparker89@gmail.com",
            "sender_full_name": "Matthew Parker (F2'14)",
            "sender_id": 6698,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "common code review comments",
            "submessages": [],
            "timestamp": 1428672474,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/0baa75c82ed02d819be85a4b24b0f4d3?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"maia.mcc@gmail.com\">@Maia McCormick (S'14)</span> thought you might be interested</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37943524,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "mdparker89@gmail.com",
            "sender_full_name": "Matthew Parker (F2'14)",
            "sender_id": 6698,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "common code review comments",
            "submessages": [],
            "timestamp": 1428672494,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/0a35beaf5a354dafdf10494c0313e10fffc154fd?x=x&version=1",
            "client": "website",
            "content": "<p>they all care about comments! and even the grammar of comments! I never thought I'd see the day... *sniffle*</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37946475,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "maia.mcc@gmail.com",
            "sender_full_name": "Maia McCormick (she) (S2'14)",
            "sender_id": 6175,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "common code review comments",
            "submessages": [],
            "timestamp": 1428677318,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/a1d3f5af6ebf01fccd9e772ca2a04ba5?d=identicon&version=1",
            "client": "website",
            "content": "<p>does anyone know what the state of packages at <a href=\"https://godoc.org/golang.org/x/\" target=\"_blank\" title=\"https://godoc.org/golang.org/x/\">https://godoc.org/golang.org/x/</a>... is?</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 38079691,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "ken@kenpratt.net",
            "sender_full_name": "Ken Pratt (he) (SP2'15)",
            "sender_id": 7850,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "packages under /x/?",
            "submessages": [],
            "timestamp": 1428956773,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/a1d3f5af6ebf01fccd9e772ca2a04ba5?d=identicon&version=1",
            "client": "website",
            "content": "<p>I'm wanting a go websocket library, wondering if I should use <a href=\"https://godoc.org/golang.org/x/net/websocket\" target=\"_blank\" title=\"https://godoc.org/golang.org/x/net/websocket\">https://godoc.org/golang.org/x/net/websocket</a> or <a href=\"http://www.gorillatoolkit.org/pkg/websocket\" target=\"_blank\" title=\"http://www.gorillatoolkit.org/pkg/websocket\">http://www.gorillatoolkit.org/pkg/websocket</a></p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 38079711,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "ken@kenpratt.net",
            "sender_full_name": "Ken Pratt (he) (SP2'15)",
            "sender_id": 7850,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "packages under /x/?",
            "submessages": [],
            "timestamp": 1428956802,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/a1d3f5af6ebf01fccd9e772ca2a04ba5?d=identicon&version=1",
            "client": "website",
            "content": "<p>I added some extra tests: <a href=\"https://gist.github.com/kenpratt/468f3eda5933bb7ae0b6\" target=\"_blank\" title=\"https://gist.github.com/kenpratt/468f3eda5933bb7ae0b6\">https://gist.github.com/kenpratt/468f3eda5933bb7ae0b6</a></p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 38117527,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "ken@kenpratt.net",
            "sender_full_name": "Ken Pratt (he) (SP2'15)",
            "sender_id": 7850,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "go challenge #2",
            "submessages": [],
            "timestamp": 1429024980,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/a1d3f5af6ebf01fccd9e772ca2a04ba5?d=identicon&version=1",
            "client": "website",
            "content": "<p>My extra tests also test multiple messages over the same connection, which wasn't really in the spec.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 38117570,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "ken@kenpratt.net",
            "sender_full_name": "Ken Pratt (he) (SP2'15)",
            "sender_id": 7850,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "go challenge #2",
            "submessages": [],
            "timestamp": 1429025034,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/5d46121e9a899e151cfcd0e59aa9e9f8a78989e8?x=x&version=1",
            "client": "desktop app Linux 0.4.4",
            "content": "<p>/x/ is basically experimental stuff, so IIRC it's not covered by the same stability (and backwards compatibility) guarantee as the standard library</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 38117812,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "aditya@adityamukerjee.net",
            "sender_full_name": "Aditya Mukerjee (he) (SP1'15)",
            "sender_id": 7644,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "packages under /x/?",
            "submessages": [],
            "timestamp": 1429025286,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/5d46121e9a899e151cfcd0e59aa9e9f8a78989e8?x=x&version=1",
            "client": "desktop app Linux 0.4.4",
            "content": "<p>a lot of stuff has moved into the standard library from /x/, so it's sort of the 'staging' area</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 38117830,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "aditya@adityamukerjee.net",
            "sender_full_name": "Aditya Mukerjee (he) (SP1'15)",
            "sender_id": 7644,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "packages under /x/?",
            "submessages": [],
            "timestamp": 1429025298,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/5d46121e9a899e151cfcd0e59aa9e9f8a78989e8?x=x&version=1",
            "client": "desktop app Linux 0.4.4",
            "content": "<p>but still experimental</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 38117833,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "aditya@adityamukerjee.net",
            "sender_full_name": "Aditya Mukerjee (he) (SP1'15)",
            "sender_id": 7644,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "packages under /x/?",
            "submessages": [],
            "timestamp": 1429025300,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/5d46121e9a899e151cfcd0e59aa9e9f8a78989e8?x=x&version=1",
            "client": "desktop app Linux 0.4.4",
            "content": "<p><a href=\"https://code.google.com/p/go-wiki/wiki/SubRepositories\" target=\"_blank\" title=\"https://code.google.com/p/go-wiki/wiki/SubRepositories\">https://code.google.com/p/go-wiki/wiki/SubRepositories</a></p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 38117852,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "aditya@adityamukerjee.net",
            "sender_full_name": "Aditya Mukerjee (he) (SP1'15)",
            "sender_id": 7644,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "packages under /x/?",
            "submessages": [],
            "timestamp": 1429025330,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/5d46121e9a899e151cfcd0e59aa9e9f8a78989e8?x=x&version=1",
            "client": "desktop app Linux 0.4.4",
            "content": "<p>that explains it</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 38117856,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "aditya@adityamukerjee.net",
            "sender_full_name": "Aditya Mukerjee (he) (SP1'15)",
            "sender_id": 7644,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "packages under /x/?",
            "submessages": [],
            "timestamp": 1429025332,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/5d46121e9a899e151cfcd0e59aa9e9f8a78989e8?x=x&version=1",
            "client": "desktop app Linux 0.4.4",
            "content": "<p>which links to</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 38117869,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "aditya@adityamukerjee.net",
            "sender_full_name": "Aditya Mukerjee (he) (SP1'15)",
            "sender_id": 7644,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "packages under /x/?",
            "submessages": [],
            "timestamp": 1429025350,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/5d46121e9a899e151cfcd0e59aa9e9f8a78989e8?x=x&version=1",
            "client": "desktop app Linux 0.4.4",
            "content": "<p><a href=\"https://golang.org/doc/go1compat\" target=\"_blank\" title=\"https://golang.org/doc/go1compat\">https://golang.org/doc/go1compat</a></p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 38117872,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "aditya@adityamukerjee.net",
            "sender_full_name": "Aditya Mukerjee (he) (SP1'15)",
            "sender_id": 7644,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "packages under /x/?",
            "submessages": [],
            "timestamp": 1429025351,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/5d46121e9a899e151cfcd0e59aa9e9f8a78989e8?x=x&version=1",
            "client": "desktop app Linux 0.4.4",
            "content": "<p>\" Code in sub-repositories of the main go tree, such as <a href=\"http://golang.org/x/net\" target=\"_blank\" title=\"http://golang.org/x/net\">golang.org/x/net</a>, may be developed under looser compatibility requirements. However, the sub-repositories will be tagged as appropriate to identify versions that are compatible with the Go 1 point releases. \"</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 38117877,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "aditya@adityamukerjee.net",
            "sender_full_name": "Aditya Mukerjee (he) (SP1'15)",
            "sender_id": 7644,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "packages under /x/?",
            "submessages": [],
            "timestamp": 1429025354,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/5d46121e9a899e151cfcd0e59aa9e9f8a78989e8?x=x&version=1",
            "client": "desktop app Linux 0.4.4",
            "content": "<p>For websockets specifically, I would recommend Gorilla, which is a better interface than /x/net/websocket</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 38117894,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "aditya@adityamukerjee.net",
            "sender_full_name": "Aditya Mukerjee (he) (SP1'15)",
            "sender_id": 7644,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "packages under /x/?",
            "submessages": [],
            "timestamp": 1429025378,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/5d46121e9a899e151cfcd0e59aa9e9f8a78989e8?x=x&version=1",
            "client": "desktop app Linux 0.4.4",
            "content": "<p>I'm pretty sure Gorilla actually uses the latter; it's just a wrapper</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 38117899,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "aditya@adityamukerjee.net",
            "sender_full_name": "Aditya Mukerjee (he) (SP1'15)",
            "sender_id": 7644,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "packages under /x/?",
            "submessages": [],
            "timestamp": 1429025387,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/5d46121e9a899e151cfcd0e59aa9e9f8a78989e8?x=x&version=1",
            "client": "desktop app Linux 0.4.4",
            "content": "<p>Gorilla is a really stable project, so even though it's not part of the official stdlib, it's very reliable</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 38117904,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "aditya@adityamukerjee.net",
            "sender_full_name": "Aditya Mukerjee (he) (SP1'15)",
            "sender_id": 7644,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "packages under /x/?",
            "submessages": [],
            "timestamp": 1429025400,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/5d46121e9a899e151cfcd0e59aa9e9f8a78989e8?x=x&version=1",
            "client": "desktop app Linux 0.4.4",
            "content": "<p>nope, it does'nt import /x/netwebsocket: <a href=\"https://godoc.org/gorillatoolkit.org/pkg/websocket?import-graph\" target=\"_blank\" title=\"https://godoc.org/gorillatoolkit.org/pkg/websocket?import-graph\">https://godoc.org/gorillatoolkit.org/pkg/websocket?import-graph</a></p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 38117996,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "aditya@adityamukerjee.net",
            "sender_full_name": "Aditya Mukerjee (he) (SP1'15)",
            "sender_id": 7644,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "packages under /x/?",
            "submessages": [],
            "timestamp": 1429025481,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/5d46121e9a899e151cfcd0e59aa9e9f8a78989e8?x=x&version=1",
            "client": "desktop app Linux 0.4.4",
            "content": "<p>but either way, having used Gorilla's websockets, I can say that I'd recommend it</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 38118003,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "aditya@adityamukerjee.net",
            "sender_full_name": "Aditya Mukerjee (he) (SP1'15)",
            "sender_id": 7644,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "packages under /x/?",
            "submessages": [],
            "timestamp": 1429025491,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/a1d3f5af6ebf01fccd9e772ca2a04ba5?d=identicon&version=1",
            "client": "website",
            "content": "<p>Thanks!</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 38118008,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "ken@kenpratt.net",
            "sender_full_name": "Ken Pratt (he) (SP2'15)",
            "sender_id": 7850,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "packages under /x/?",
            "submessages": [],
            "timestamp": 1429025500,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/229e3746f6f5100c1d7d5d7a8a5b82d5?d=identicon&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>+1, thanks <span class=\"user-mention\" data-user-email=\"aditya@adityamukerjee.net\">@Aditya Mukerjee (SP1'15)</span> </p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 38121325,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "nat@natwelch.com",
            "sender_full_name": "Nat Welch (he) (SP2'15)",
            "sender_id": 7866,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "packages under /x/?",
            "submessages": [],
            "timestamp": 1429029726,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/5d46121e9a899e151cfcd0e59aa9e9f8a78989e8?x=x&version=1",
            "client": "desktop app Linux 0.4.4",
            "content": "<p>This is a really good blog post (disclaimer: friend of mine, but also a well-known Gopher) explaining <code>io.Reader</code>. I've had a number of conversations about <code>io.Reader</code> with people here recently, and I think this provides a great explanation of what <code>io.Reader</code> is, and why it's such a powerful tool once you know how to use it. Even if you've used it before, there's a lot of good stuff in this post that you may want to read regardless: <a href=\"https://www.datadoghq.com/2014/07/crossing-streams-love-letter-gos-io-reader/\" target=\"_blank\" title=\"https://www.datadoghq.com/2014/07/crossing-streams-love-letter-gos-io-reader/\">https://www.datadoghq.com/2014/07/crossing-streams-love-letter-gos-io-reader/</a></p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 38126184,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "aditya@adityamukerjee.net",
            "sender_full_name": "Aditya Mukerjee (he) (SP1'15)",
            "sender_id": 7644,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "io.Reader",
            "submessages": [],
            "timestamp": 1429035844,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/5d46121e9a899e151cfcd0e59aa9e9f8a78989e8?x=x&version=1",
            "client": "desktop app Linux 0.4.4",
            "content": "<p><span class=\"user-mention\" data-user-email=\"ahmad19526@gmail.com\">@Ahmed Abdalla (SP2'15)</span> ^</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 38126221,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "aditya@adityamukerjee.net",
            "sender_full_name": "Aditya Mukerjee (he) (SP1'15)",
            "sender_id": 7644,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "io.Reader",
            "submessages": [],
            "timestamp": 1429035874,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/5d46121e9a899e151cfcd0e59aa9e9f8a78989e8?x=x&version=1",
            "client": "desktop app Linux 0.4.4",
            "content": "<p>Also <span class=\"user-mention\" data-user-email=\"maia.mcc@gmail.com\">@Maia McCormick (S'14)</span> since you're just starting out with Go, this might be helpful :)</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 38126230,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "aditya@adityamukerjee.net",
            "sender_full_name": "Aditya Mukerjee (he) (SP1'15)",
            "sender_id": 7644,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "io.Reader",
            "submessages": [],
            "timestamp": 1429035887,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/f6bd929465d6d225def8062d5a9d3f3f?d=identicon&version=1",
            "client": "website",
            "content": "<p>I've read in multiple places that these are identical, but... they don't seem to be identical. Or is it that converting to []byte makes a copy, and which doesn't reflect any changes when copied?</p>\n<div class=\"codehilite\"><pre>func modifyThing(b []byte) {\n    b[1], b[3] = b[3], b[1]\n}\n\nfunc main() {\n    s := &quot;12345&quot;\n    fmt.Println(s)\n    modifyThing([]byte(s))\n    fmt.Println(s)\n\n    b := []byte{1,2,3,4,5}\n    fmt.Println(b)\n    modifyThing([]byte(b))\n    fmt.Println(b)\n}\n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 38147000,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "danluu@gmail.com",
            "sender_full_name": "Dan Luu (W'13)",
            "sender_id": 820,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "string vs. []byte",
            "submessages": [],
            "timestamp": 1429066841,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/f6bd929465d6d225def8062d5a9d3f3f?d=identicon&version=1",
            "client": "website",
            "content": "<p>I sort of expect that to work like a typecast in C, but I guess it does something else?</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 38147008,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "danluu@gmail.com",
            "sender_full_name": "Dan Luu (W'13)",
            "sender_id": 820,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "string vs. []byte",
            "submessages": [],
            "timestamp": 1429066883,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/f6bd929465d6d225def8062d5a9d3f3f?d=identicon&version=1",
            "client": "website",
            "content": "<p>Hmmm ok, after searching for a bit, you can do a C-like typecast but you need to get the actual pointer with unsafe.Pointer and do some stuff that's probably considered bad style.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 38147052,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "danluu@gmail.com",
            "sender_full_name": "Dan Luu (W'13)",
            "sender_id": 820,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "string vs. []byte",
            "submessages": [],
            "timestamp": 1429066978,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/5d46121e9a899e151cfcd0e59aa9e9f8a78989e8?x=x&version=1",
            "client": "desktop app Linux 0.4.4",
            "content": "<p>Yeah, this is why the Go devs are very careful to talk about them as conversion functions, not typecasting</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 38148314,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "aditya@adityamukerjee.net",
            "sender_full_name": "Aditya Mukerjee (he) (SP1'15)",
            "sender_id": 7644,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "string vs. []byte",
            "submessages": [],
            "timestamp": 1429070031,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/5d46121e9a899e151cfcd0e59aa9e9f8a78989e8?x=x&version=1",
            "client": "desktop app Linux 0.4.4",
            "content": "<p>because it doesn't behave the same way as it does in C</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 38148316,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "aditya@adityamukerjee.net",
            "sender_full_name": "Aditya Mukerjee (he) (SP1'15)",
            "sender_id": 7644,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "string vs. []byte",
            "submessages": [],
            "timestamp": 1429070039,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/5d46121e9a899e151cfcd0e59aa9e9f8a78989e8?x=x&version=1",
            "client": "desktop app Linux 0.4.4",
            "content": "<p>which is generally overly pedantic, except in cases like the one you posted</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 38148353,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "aditya@adityamukerjee.net",
            "sender_full_name": "Aditya Mukerjee (he) (SP1'15)",
            "sender_id": 7644,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "string vs. []byte",
            "submessages": [],
            "timestamp": 1429070056,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/5d46121e9a899e151cfcd0e59aa9e9f8a78989e8?x=x&version=1",
            "client": "desktop app Linux 0.4.4",
            "content": "<p>I think unsafe is the only way to get the actual underlying array for the slice</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 38148358,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "aditya@adityamukerjee.net",
            "sender_full_name": "Aditya Mukerjee (he) (SP1'15)",
            "sender_id": 7644,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "string vs. []byte",
            "submessages": [],
            "timestamp": 1429070080,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/a179bb8c3fc4ab0975954f57d47fa6c53a8c2dad?x=x&version=2",
            "client": "website",
            "content": "<p>Yeah, it'd be nice if it was simply a cast, but that's probably not easy to implement since the mutability of <code>[]byte</code> and <code>string</code> differ. Maybe it'd be cool if <code>[]byte</code> from <code>string</code> only did copy-on-write?</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 38149966,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "jay@jayschwa.net",
            "sender_full_name": "Jay Weisskopf Petacat (W2'17)",
            "sender_id": 829,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "string vs. []byte",
            "submessages": [],
            "timestamp": 1429073553,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/72d03dbb9ec7ac92767a0db7ac17250842ba370b?x=x&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"ken@kenpratt.net\">@Ken Pratt (SP2'15)</span> just a heads up, I'm 90% sure that the gorilla toolkit doesn't understand secure websockets. something to keep in mind if your site has an ssl cert (and if you need to tunnel secure websockets through nginx: <a href=\"https://samertm.com/2014/07/10/secure-websockets-through-nginx/\" target=\"_blank\" title=\"https://samertm.com/2014/07/10/secure-websockets-through-nginx/\">https://samertm.com/2014/07/10/secure-websockets-through-nginx/</a>)</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 38171203,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "samer@samertm.com",
            "sender_full_name": "Samer Masterson (S1'14)",
            "sender_id": 5874,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "packages under /x/?",
            "submessages": [],
            "timestamp": 1429115172,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/72d03dbb9ec7ac92767a0db7ac17250842ba370b?x=x&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"jay@jayschwa.net\">@Jay Weisskopf (W'13)</span> that would be cool, I am not very careful with casting byte slices to strings and back again and I often wonder how much it costs.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 38171463,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "samer@samertm.com",
            "sender_full_name": "Samer Masterson (S1'14)",
            "sender_id": 5874,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "string vs. []byte",
            "submessages": [],
            "timestamp": 1429115566,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/a1d3f5af6ebf01fccd9e772ca2a04ba5?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"samer@samertm.com\">@Samer Masterson (S'14)</span> Good to know, thanks!</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 38173711,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "ken@kenpratt.net",
            "sender_full_name": "Ken Pratt (he) (SP2'15)",
            "sender_id": 7850,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "packages under /x/?",
            "submessages": [],
            "timestamp": 1429118336,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/0a35beaf5a354dafdf10494c0313e10fffc154fd?x=x&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"aditya@adityamukerjee.net\">@Aditya Mukerjee (SP1'15)</span> , cool! it's going in my pile of articles!</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 38175839,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "maia.mcc@gmail.com",
            "sender_full_name": "Maia McCormick (she) (S2'14)",
            "sender_id": 6175,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "io.Reader",
            "submessages": [],
            "timestamp": 1429121075,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/05023e2779bfc2793d79ee30c81af6ca291539ce?x=x&version=1",
            "client": "website",
            "content": "<p>io.Reader is one of the best things about Go.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 38177812,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "jordanorelli@gmail.com",
            "sender_full_name": "Jordan Orelli (F'11)",
            "sender_id": 872,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "io.Reader",
            "submessages": [],
            "timestamp": 1429123197,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/5d46121e9a899e151cfcd0e59aa9e9f8a78989e8?x=x&version=1",
            "client": "desktop app Linux 0.4.4",
            "content": "<p>Fittingly (given the topic of the last thread) - I'm having some issues with an <code>io.Reader</code>. Specifically, <br>\n<span class=\"user-mention\" data-user-email=\"ahmad19526@gmail.com\">@Ahmed Abdalla (SP2'15)</span> and I are trying to read git packfile objects, which contain a stream of zlib-compressed objects.  </p>\n<p>The <code>zlib</code> package takes an io.Reader and decompresses it. If there's extra data at the end, it ignores it, but the docs note that <strong>it may still read (consume) it</strong>. </p>\n<p>Can anyone think of a way to compose <code>io.Reader</code>s so that we know where to start decompression of the the second, third. etc. object? We're able to decompress the first, but since it consumes a nonzero number of extra bytes, we can't decompress any of the others!</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 38180265,
            "is_me_message": false,
            "last_edit_timestamp": 1429126167,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "aditya@adityamukerjee.net",
            "sender_full_name": "Aditya Mukerjee (he) (SP1'15)",
            "sender_id": 7644,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "io.Reader help",
            "submessages": [],
            "timestamp": 1429125778,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/391eb183c3474a15bf9ad0e87d3ff118?d=identicon&version=1",
            "client": "website",
            "content": "<p>Maybe the <a href=\"http://golang.org/pkg/io/#LimitedReader\" target=\"_blank\" title=\"http://golang.org/pkg/io/#LimitedReader\">io.LimitedReader</a> can help? That will only work if you KNOW how many bytes per object.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 38186014,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "ghthor@gmail.com",
            "sender_full_name": "Will Drengwitz (he) (W1'17)",
            "sender_id": 7099,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "io.Reader help",
            "submessages": [],
            "timestamp": 1429132080,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/391eb183c3474a15bf9ad0e87d3ff118?d=identicon&version=1",
            "client": "website",
            "content": "<p>Are you able to determine how many bytes it has consumed to get the first object? Because maybe all you need is to give the zlib a buffer each time and you can adjust the starting point so it's at the beginning of the object.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 38186084,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "ghthor@gmail.com",
            "sender_full_name": "Will Drengwitz (he) (W1'17)",
            "sender_id": 7099,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "io.Reader help",
            "submessages": [],
            "timestamp": 1429132142,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/5d46121e9a899e151cfcd0e59aa9e9f8a78989e8?x=x&version=1",
            "client": "desktop app Linux 0.4.4",
            "content": "<p>I don't know how many (compressed) bytes are consumed, just how many uncompressed bytes zlib returns. I tried buffering, but it seems like zlib eats up as much data as is available</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 38186149,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "aditya@adityamukerjee.net",
            "sender_full_name": "Aditya Mukerjee (he) (SP1'15)",
            "sender_id": 7644,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "io.Reader help",
            "submessages": [],
            "timestamp": 1429132208,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/5d46121e9a899e151cfcd0e59aa9e9f8a78989e8?x=x&version=1",
            "client": "desktop app Linux 0.4.4",
            "content": "<p>LimitedReader may be interesting; it could be possible to just try adding a single byte at a time until zlib returns a value</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 38186168,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "aditya@adityamukerjee.net",
            "sender_full_name": "Aditya Mukerjee (he) (SP1'15)",
            "sender_id": 7644,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "io.Reader help",
            "submessages": [],
            "timestamp": 1429132226,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/5d46121e9a899e151cfcd0e59aa9e9f8a78989e8?x=x&version=1",
            "client": "desktop app Linux 0.4.4",
            "content": "<p>which sounds super wasteful, probably because it is, but maybe that would work?</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 38186177,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "aditya@adityamukerjee.net",
            "sender_full_name": "Aditya Mukerjee (he) (SP1'15)",
            "sender_id": 7644,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "io.Reader help",
            "submessages": [],
            "timestamp": 1429132235,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/391eb183c3474a15bf9ad0e87d3ff118?d=identicon&version=1",
            "client": "website",
            "content": "<p>That sounds really smelly. Maybe we should ask the mailing list.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 38186211,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "ghthor@gmail.com",
            "sender_full_name": "Will Drengwitz (he) (W1'17)",
            "sender_id": 7099,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "io.Reader help",
            "submessages": [],
            "timestamp": 1429132294,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/5d46121e9a899e151cfcd0e59aa9e9f8a78989e8?x=x&version=1",
            "client": "desktop app Linux 0.4.4",
            "content": "<p>yeah, I'm going to try one more thing and then post there</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 38186219,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "aditya@adityamukerjee.net",
            "sender_full_name": "Aditya Mukerjee (he) (SP1'15)",
            "sender_id": 7644,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "io.Reader help",
            "submessages": [],
            "timestamp": 1429132321,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/5d46121e9a899e151cfcd0e59aa9e9f8a78989e8?x=x&version=1",
            "client": "desktop app Linux 0.4.4",
            "content": "<p>(the best idea in IRC was to use my own buffer before the zlib buffer, but that didn't seem to work)</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 38186263,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "aditya@adityamukerjee.net",
            "sender_full_name": "Aditya Mukerjee (he) (SP1'15)",
            "sender_id": 7644,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "io.Reader help",
            "submessages": [],
            "timestamp": 1429132334,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/391eb183c3474a15bf9ad0e87d3ff118?d=identicon&version=1",
            "client": "website",
            "content": "<p><a href=\"http://golang.org/pkg/io/#SectionReader\" target=\"_blank\" title=\"http://golang.org/pkg/io/#SectionReader\">io.SectionReader</a> is a better version of the <code>io.LimitedReader</code>. Was looking at the LimitedReader and knew there was something better.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 38186289,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "ghthor@gmail.com",
            "sender_full_name": "Will Drengwitz (he) (W1'17)",
            "sender_id": 7099,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "io.Reader help",
            "submessages": [],
            "timestamp": 1429132394,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/391eb183c3474a15bf9ad0e87d3ff118?d=identicon&version=1",
            "client": "website",
            "content": "<p>Ok... wait</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 38186381,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "ghthor@gmail.com",
            "sender_full_name": "Will Drengwitz (he) (W1'17)",
            "sender_id": 7099,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "io.Reader help",
            "submessages": [],
            "timestamp": 1429132537,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/391eb183c3474a15bf9ad0e87d3ff118?d=identicon&version=1",
            "client": "website",
            "content": "<p>I don't know how the packfile is laid out, but the zlib reader is a filter. It gives you another reader, one that returns decoded bytes. </p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 38186427,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "ghthor@gmail.com",
            "sender_full_name": "Will Drengwitz (he) (W1'17)",
            "sender_id": 7099,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "io.Reader help",
            "submessages": [],
            "timestamp": 1429132589,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/391eb183c3474a15bf9ad0e87d3ff118?d=identicon&version=1",
            "client": "website",
            "content": "<p>Just keep reading from it, hell, <code>ioutil.ReadAll</code> the zlib'ed Reader and then you have all the bytes, unencoded and can go over them again and split them into the objects.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 38186466,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "ghthor@gmail.com",
            "sender_full_name": "Will Drengwitz (he) (W1'17)",
            "sender_id": 7099,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "io.Reader help",
            "submessages": [],
            "timestamp": 1429132663,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/5d46121e9a899e151cfcd0e59aa9e9f8a78989e8?x=x&version=1",
            "client": "desktop app Linux 0.4.4",
            "content": "<p>hahaha, that's what I was thinking! which is so ironic, since my last post to the thread is how awesome <code>io.Reader</code> is and why <code>ioutil.ReadAll</code> is lame</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 38186528,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "aditya@adityamukerjee.net",
            "sender_full_name": "Aditya Mukerjee (he) (SP1'15)",
            "sender_id": 7644,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "io.Reader help",
            "submessages": [],
            "timestamp": 1429132719,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/5d46121e9a899e151cfcd0e59aa9e9f8a78989e8?x=x&version=1",
            "client": "desktop app Linux 0.4.4",
            "content": "<p>(everyone, I swear it's not normally like this! please believe me!)</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 38186540,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "aditya@adityamukerjee.net",
            "sender_full_name": "Aditya Mukerjee (he) (SP1'15)",
            "sender_id": 7644,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "io.Reader help",
            "submessages": [],
            "timestamp": 1429132737,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/5d46121e9a899e151cfcd0e59aa9e9f8a78989e8?x=x&version=1",
            "client": "desktop app Linux 0.4.4",
            "content": "<p>lol</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 38186542,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "aditya@adityamukerjee.net",
            "sender_full_name": "Aditya Mukerjee (he) (SP1'15)",
            "sender_id": 7644,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "io.Reader help",
            "submessages": [],
            "timestamp": 1429132738,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/391eb183c3474a15bf9ad0e87d3ff118?d=identicon&version=1",
            "client": "website",
            "content": "<p>No worries. The main point is that once you pass the source <code>io.Reader</code> to <code>zlib</code>, the returned reader is the only important one. The source isn't useful anymore and that's why the <code>zlib</code> implementation can read extra bytes.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 38186629,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "ghthor@gmail.com",
            "sender_full_name": "Will Drengwitz (he) (W1'17)",
            "sender_id": 7099,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "io.Reader help",
            "submessages": [],
            "timestamp": 1429132831,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/5d46121e9a899e151cfcd0e59aa9e9f8a78989e8?x=x&version=1",
            "client": "desktop app Linux 0.4.4",
            "content": "<p>well, wait, if I do ioutil.ReadAll on the zlibbed reader, it's only going to give mt he first uncompressed value, right?</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 38186666,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "aditya@adityamukerjee.net",
            "sender_full_name": "Aditya Mukerjee (he) (SP1'15)",
            "sender_id": 7644,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "io.Reader help",
            "submessages": [],
            "timestamp": 1429132918,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/391eb183c3474a15bf9ad0e87d3ff118?d=identicon&version=1",
            "client": "website",
            "content": "<p>You can avoid using <code>ioutil.ReadAll</code> if you can identify chunks of code to read out of the <code>zlib</code>'d Reader. If you know the object is 30 bytes, you can make a SectionReader that will only read 30 bytes out of the zlib Reader.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 38186742,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "ghthor@gmail.com",
            "sender_full_name": "Will Drengwitz (he) (W1'17)",
            "sender_id": 7099,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "io.Reader help",
            "submessages": [],
            "timestamp": 1429132995,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/391eb183c3474a15bf9ad0e87d3ff118?d=identicon&version=1",
            "client": "website",
            "content": "<p>Is <a href=\"https://www.kernel.org/pub/software/scm/git/docs/technical/pack-format.txt\" target=\"_blank\" title=\"https://www.kernel.org/pub/software/scm/git/docs/technical/pack-format.txt\">this</a> the format you're trying to read?</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 38186752,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "ghthor@gmail.com",
            "sender_full_name": "Will Drengwitz (he) (W1'17)",
            "sender_id": 7099,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "io.Reader help",
            "submessages": [],
            "timestamp": 1429133010,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/5d46121e9a899e151cfcd0e59aa9e9f8a78989e8?x=x&version=1",
            "client": "desktop app Linux 0.4.4",
            "content": "<p><a href=\"https://play.golang.org/p/FAFfAuO6Q5\" target=\"_blank\" title=\"https://play.golang.org/p/FAFfAuO6Q5\">https://play.golang.org/p/FAFfAuO6Q5</a></p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 38186756,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "aditya@adityamukerjee.net",
            "sender_full_name": "Aditya Mukerjee (he) (SP1'15)",
            "sender_id": 7644,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "io.Reader help",
            "submessages": [],
            "timestamp": 1429133015,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/5d46121e9a899e151cfcd0e59aa9e9f8a78989e8?x=x&version=1",
            "client": "desktop app Linux 0.4.4",
            "content": "<p>yup</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 38186764,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "aditya@adityamukerjee.net",
            "sender_full_name": "Aditya Mukerjee (he) (SP1'15)",
            "sender_id": 7644,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "io.Reader help",
            "submessages": [],
            "timestamp": 1429133031,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/5d46121e9a899e151cfcd0e59aa9e9f8a78989e8?x=x&version=1",
            "client": "desktop app Linux 0.4.4",
            "content": "<p><a href=\"https://git-htmldocs.googlecode.com/git/technical/pack-format.html\" target=\"_blank\" title=\"https://git-htmldocs.googlecode.com/git/technical/pack-format.html\">https://git-htmldocs.googlecode.com/git/technical/pack-format.html</a></p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 38186765,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "aditya@adityamukerjee.net",
            "sender_full_name": "Aditya Mukerjee (he) (SP1'15)",
            "sender_id": 7644,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "io.Reader help",
            "submessages": [],
            "timestamp": 1429133033,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/5d46121e9a899e151cfcd0e59aa9e9f8a78989e8?x=x&version=1",
            "client": "desktop app Linux 0.4.4",
            "content": "<p>that's a slightly better presentation, with an ascii-art diagram</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 38186767,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "aditya@adityamukerjee.net",
            "sender_full_name": "Aditya Mukerjee (he) (SP1'15)",
            "sender_id": 7644,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "io.Reader help",
            "submessages": [],
            "timestamp": 1429133040,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/5d46121e9a899e151cfcd0e59aa9e9f8a78989e8?x=x&version=1",
            "client": "desktop app Linux 0.4.4",
            "content": "<p>I'm trying to avoid reading the IDX file, because most of the data in that is junk (for my purposes)</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 38186812,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "aditya@adityamukerjee.net",
            "sender_full_name": "Aditya Mukerjee (he) (SP1'15)",
            "sender_id": 7644,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "io.Reader help",
            "submessages": [],
            "timestamp": 1429133058,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/5d46121e9a899e151cfcd0e59aa9e9f8a78989e8?x=x&version=1",
            "client": "desktop app Linux 0.4.4",
            "content": "<p>and it's rather hard to parse</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 38186822,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "aditya@adityamukerjee.net",
            "sender_full_name": "Aditya Mukerjee (he) (SP1'15)",
            "sender_id": 7644,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "io.Reader help",
            "submessages": [],
            "timestamp": 1429133063,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/5d46121e9a899e151cfcd0e59aa9e9f8a78989e8?x=x&version=1",
            "client": "desktop app Linux 0.4.4",
            "content": "<p>but that may be the easiest way</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 38186825,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "aditya@adityamukerjee.net",
            "sender_full_name": "Aditya Mukerjee (he) (SP1'15)",
            "sender_id": 7644,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "io.Reader help",
            "submessages": [],
            "timestamp": 1429133067,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/5d46121e9a899e151cfcd0e59aa9e9f8a78989e8?x=x&version=1",
            "client": "desktop app Linux 0.4.4",
            "content": "<p>and at first, I thought it would be so reasonable to say, \"let me just decode this as a stream! it can't be that hard, right?\"</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 38186842,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "aditya@adityamukerjee.net",
            "sender_full_name": "Aditya Mukerjee (he) (SP1'15)",
            "sender_id": 7644,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "io.Reader help",
            "submessages": [],
            "timestamp": 1429133095,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/391eb183c3474a15bf9ad0e87d3ff118?d=identicon&version=1",
            "client": "website",
            "content": "<p>Is this sequence of bytes doing what you expect? Can you actually append them like this?</p>\n<div class=\"codehilite\"><pre>    <span class=\"n\">buff</span> <span class=\"p\">:=</span> <span class=\"p\">[]</span><span class=\"nb\">byte</span><span class=\"p\">{</span><span class=\"mi\">120</span><span class=\"p\">,</span> <span class=\"mi\">156</span><span class=\"p\">,</span> <span class=\"mi\">202</span><span class=\"p\">,</span> <span class=\"mi\">72</span><span class=\"p\">,</span> <span class=\"mi\">205</span><span class=\"p\">,</span> <span class=\"mi\">201</span><span class=\"p\">,</span> <span class=\"mi\">201</span><span class=\"p\">,</span> <span class=\"mi\">215</span><span class=\"p\">,</span> <span class=\"mi\">81</span><span class=\"p\">,</span> <span class=\"mi\">40</span><span class=\"p\">,</span> <span class=\"mi\">207</span><span class=\"p\">,</span>\n        <span class=\"mi\">47</span><span class=\"p\">,</span> <span class=\"mi\">202</span><span class=\"p\">,</span> <span class=\"mi\">73</span><span class=\"p\">,</span> <span class=\"mi\">225</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">255</span><span class=\"p\">,</span> <span class=\"mi\">255</span><span class=\"p\">,</span> <span class=\"mi\">33</span><span class=\"p\">,</span> <span class=\"mi\">231</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">147</span><span class=\"p\">}</span>\n    <span class=\"n\">buff</span> <span class=\"p\">=</span> <span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">buff</span><span class=\"p\">,</span> <span class=\"n\">buff</span><span class=\"p\">...)</span>\n    <span class=\"n\">buff</span> <span class=\"p\">=</span> <span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">buff</span><span class=\"p\">,</span> <span class=\"n\">buff</span><span class=\"p\">...)</span>\n    <span class=\"n\">buff</span> <span class=\"p\">=</span> <span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">buff</span><span class=\"p\">,</span> <span class=\"n\">buff</span><span class=\"p\">...)</span>\n    <span class=\"n\">buff</span> <span class=\"p\">=</span> <span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">buff</span><span class=\"p\">,</span> <span class=\"n\">buff</span><span class=\"p\">...)</span>\n    <span class=\"n\">buff</span> <span class=\"p\">=</span> <span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">buff</span><span class=\"p\">,</span> <span class=\"n\">buff</span><span class=\"p\">...)</span>\n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 38187361,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "ghthor@gmail.com",
            "sender_full_name": "Will Drengwitz (he) (W1'17)",
            "sender_id": 7099,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "io.Reader help",
            "submessages": [],
            "timestamp": 1429133675,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/5d46121e9a899e151cfcd0e59aa9e9f8a78989e8?x=x&version=1",
            "client": "desktop app Linux 0.4.4",
            "content": "<p>I think so <a href=\"https://play.golang.org/p/ocJCA5ROkv\" target=\"_blank\" title=\"https://play.golang.org/p/ocJCA5ROkv\">https://play.golang.org/p/ocJCA5ROkv</a></p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 38187397,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "aditya@adityamukerjee.net",
            "sender_full_name": "Aditya Mukerjee (he) (SP1'15)",
            "sender_id": 7644,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "io.Reader help",
            "submessages": [],
            "timestamp": 1429133746,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/391eb183c3474a15bf9ad0e87d3ff118?d=identicon&version=1",
            "client": "website",
            "content": "<p>Ok, so my first observation of this format is that...</p>\n<p>Each compressed section is compressed by itself? So it is a series of individually compressed sections?</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 38187473,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "ghthor@gmail.com",
            "sender_full_name": "Will Drengwitz (he) (W1'17)",
            "sender_id": 7099,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "io.Reader help",
            "submessages": [],
            "timestamp": 1429133822,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/5d46121e9a899e151cfcd0e59aa9e9f8a78989e8?x=x&version=1",
            "client": "desktop app Linux 0.4.4",
            "content": "<p>Yeah, separated by git header files (not to be confused with the zlib header files)</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 38187519,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "aditya@adityamukerjee.net",
            "sender_full_name": "Aditya Mukerjee (he) (SP1'15)",
            "sender_id": 7644,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "io.Reader help",
            "submessages": [],
            "timestamp": 1429133883,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/5d46121e9a899e151cfcd0e59aa9e9f8a78989e8?x=x&version=1",
            "client": "desktop app Linux 0.4.4",
            "content": "<p>the IDX file points to the actual byte index of the object files</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 38187555,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "aditya@adityamukerjee.net",
            "sender_full_name": "Aditya Mukerjee (he) (SP1'15)",
            "sender_id": 7644,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "io.Reader help",
            "submessages": [],
            "timestamp": 1429133891,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/5d46121e9a899e151cfcd0e59aa9e9f8a78989e8?x=x&version=1",
            "client": "desktop app Linux 0.4.4",
            "content": "<p>I'm in the process of parsing the IDX file right now; I think that's going to be easier than trying to twist the zlib package to do something it clearly doesn't want to do</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 38187569,
            "is_me_message": false,
            "last_edit_timestamp": 1429133916,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "aditya@adityamukerjee.net",
            "sender_full_name": "Aditya Mukerjee (he) (SP1'15)",
            "sender_id": 7644,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "io.Reader help",
            "submessages": [],
            "timestamp": 1429133910,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/5d46121e9a899e151cfcd0e59aa9e9f8a78989e8?x=x&version=1",
            "client": "desktop app Linux 0.4.4",
            "content": "<p>I'm just disappointed, because it'd be such an obvious and elegant thing to do to simply do lazy-parsing on the stream</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 38187589,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "aditya@adityamukerjee.net",
            "sender_full_name": "Aditya Mukerjee (he) (SP1'15)",
            "sender_id": 7644,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "io.Reader help",
            "submessages": [],
            "timestamp": 1429133938,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/5d46121e9a899e151cfcd0e59aa9e9f8a78989e8?x=x&version=1",
            "client": "desktop app Linux 0.4.4",
            "content": "<p>and would completely eliminate the need for the IDX file altogether</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 38187604,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "aditya@adityamukerjee.net",
            "sender_full_name": "Aditya Mukerjee (he) (SP1'15)",
            "sender_id": 7644,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "io.Reader help",
            "submessages": [],
            "timestamp": 1429133949,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/391eb183c3474a15bf9ad0e87d3ff118?d=identicon&version=1",
            "client": "website",
            "content": "<p>Well, If you parse the IDX file you can calc the starting bytes and length of each obj. Then you can use SectionReader's for each object and pass the SectionReader to zlib. That way it can't overstep the bytes of the object.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 38187733,
            "is_me_message": false,
            "last_edit_timestamp": 1429134588,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "ghthor@gmail.com",
            "sender_full_name": "Will Drengwitz (he) (W1'17)",
            "sender_id": 7099,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "io.Reader help",
            "submessages": [],
            "timestamp": 1429134066,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/391eb183c3474a15bf9ad0e87d3ff118?d=identicon&version=1",
            "client": "website",
            "content": "<p>Parsing binary formats is hard, haha. You have to know how many bytes you need to consume to represent something real. I remember the first time I was faced with sending data across a TCP connection and the reading side didn't know how many bytes it needed to read... Well guess I'll have to tell it that much first, then it can read n bytes and know it has a complete something.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 38187888,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "ghthor@gmail.com",
            "sender_full_name": "Will Drengwitz (he) (W1'17)",
            "sender_id": 7099,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "io.Reader help",
            "submessages": [],
            "timestamp": 1429134216,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/5d46121e9a899e151cfcd0e59aa9e9f8a78989e8?x=x&version=1",
            "client": "desktop app Linux 0.4.4",
            "content": "<p>\"Wait, how does it know if it's told me the whole number\"?</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 38188529,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "aditya@adityamukerjee.net",
            "sender_full_name": "Aditya Mukerjee (he) (SP1'15)",
            "sender_id": 7644,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "io.Reader help",
            "submessages": [],
            "timestamp": 1429134892,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/5d46121e9a899e151cfcd0e59aa9e9f8a78989e8?x=x&version=1",
            "client": "desktop app Linux 0.4.4",
            "content": "<p>etc. etc.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 38188530,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "aditya@adityamukerjee.net",
            "sender_full_name": "Aditya Mukerjee (he) (SP1'15)",
            "sender_id": 7644,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "io.Reader help",
            "submessages": [],
            "timestamp": 1429134894,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/5d46121e9a899e151cfcd0e59aa9e9f8a78989e8?x=x&version=1",
            "client": "desktop app Linux 0.4.4",
            "content": "<p>down the rabbit hole</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 38188534,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "aditya@adityamukerjee.net",
            "sender_full_name": "Aditya Mukerjee (he) (SP1'15)",
            "sender_id": 7644,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "io.Reader help",
            "submessages": [],
            "timestamp": 1429134896,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/391eb183c3474a15bf9ad0e87d3ff118?d=identicon&version=1",
            "client": "website",
            "content": "<p>\"A 4-byte magic number \\377tOc which is an unreasonable fanout[0] value.\" Is<code>\\377t0c</code>a hex number?</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 38188645,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "ghthor@gmail.com",
            "sender_full_name": "Will Drengwitz (he) (W1'17)",
            "sender_id": 7099,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "io.Reader help",
            "submessages": [],
            "timestamp": 1429135030,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/5d46121e9a899e151cfcd0e59aa9e9f8a78989e8?x=x&version=1",
            "client": "desktop app Linux 0.4.4",
            "content": "<p>yeah</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 38189045,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "aditya@adityamukerjee.net",
            "sender_full_name": "Aditya Mukerjee (he) (SP1'15)",
            "sender_id": 7644,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "io.Reader help",
            "submessages": [],
            "timestamp": 1429135452,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/5d46121e9a899e151cfcd0e59aa9e9f8a78989e8?x=x&version=1",
            "client": "desktop app Linux 0.4.4",
            "content": "<p>[]byte{255, 116, 79, 99}</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 38189057,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "aditya@adityamukerjee.net",
            "sender_full_name": "Aditya Mukerjee (he) (SP1'15)",
            "sender_id": 7644,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "io.Reader help",
            "submessages": [],
            "timestamp": 1429135466,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/5d46121e9a899e151cfcd0e59aa9e9f8a78989e8?x=x&version=1",
            "client": "desktop app Linux 0.4.4",
            "content": "<p>successs!!!!</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 38189265,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "aditya@adityamukerjee.net",
            "sender_full_name": "Aditya Mukerjee (he) (SP1'15)",
            "sender_id": 7644,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "io.Reader help",
            "submessages": [],
            "timestamp": 1429135751,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/5d46121e9a899e151cfcd0e59aa9e9f8a78989e8?x=x&version=1",
            "client": "desktop app Linux 0.4.4",
            "content": "<p><a href=\"https://github.com/ChimeraCoder/gitgo/tree/dd13f73df6a3fac6bbc8ab5a79148712f2d66153\" target=\"_blank\" title=\"https://github.com/ChimeraCoder/gitgo/tree/dd13f73df6a3fac6bbc8ab5a79148712f2d66153\">https://github.com/ChimeraCoder/gitgo/tree/dd13f73df6a3fac6bbc8ab5a79148712f2d66153</a></p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 38189269,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "aditya@adityamukerjee.net",
            "sender_full_name": "Aditya Mukerjee (he) (SP1'15)",
            "sender_id": 7644,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "io.Reader help",
            "submessages": [],
            "timestamp": 1429135753,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/391eb183c3474a15bf9ad0e87d3ff118?d=identicon&version=1",
            "client": "website",
            "content": "<p>Nice, I'm taking a look at it.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 38189441,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "ghthor@gmail.com",
            "sender_full_name": "Will Drengwitz (he) (W1'17)",
            "sender_id": 7099,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "io.Reader help",
            "submessages": [],
            "timestamp": 1429135948,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/391eb183c3474a15bf9ad0e87d3ff118?d=identicon&version=1",
            "client": "website",
            "content": "<p><a href=\"https://github.com/ChimeraCoder/gitgo/blob/dd13f73df6a3fac6bbc8ab5a79148712f2d66153/verify-pack.go#L88\" target=\"_blank\" title=\"https://github.com/ChimeraCoder/gitgo/blob/dd13f73df6a3fac6bbc8ab5a79148712f2d66153/verify-pack.go#L88\">https://github.com/ChimeraCoder/gitgo/blob/dd13f73df6a3fac6bbc8ab5a79148712f2d66153/verify-pack.go#L88</a></p>\n<p><code>encoding/binary</code> !_!</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 38189556,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "ghthor@gmail.com",
            "sender_full_name": "Will Drengwitz (he) (W1'17)",
            "sender_id": 7099,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "io.Reader help",
            "submessages": [],
            "timestamp": 1429136063,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/5d46121e9a899e151cfcd0e59aa9e9f8a78989e8?x=x&version=1",
            "client": "desktop app Linux 0.4.4",
            "content": "<p><span class=\"user-mention\" data-user-email=\"ghthor@gmail.com\">@Willa Walthall (W2'15)</span> yeah, I tried it, and it doesn't give me what I want</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 38189692,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "aditya@adityamukerjee.net",
            "sender_full_name": "Aditya Mukerjee (he) (SP1'15)",
            "sender_id": 7644,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "io.Reader help",
            "submessages": [],
            "timestamp": 1429136207,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/5d46121e9a899e151cfcd0e59aa9e9f8a78989e8?x=x&version=1",
            "client": "desktop app Linux 0.4.4",
            "content": "<p>which probably means I don't understand <code>encoding/binary</code>, but I was just trying to get it working fast</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 38189702,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "aditya@adityamukerjee.net",
            "sender_full_name": "Aditya Mukerjee (he) (SP1'15)",
            "sender_id": 7644,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "io.Reader help",
            "submessages": [],
            "timestamp": 1429136224,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/5d46121e9a899e151cfcd0e59aa9e9f8a78989e8?x=x&version=1",
            "client": "desktop app Linux 0.4.4",
            "content": "<p><span class=\"user-mention\" data-user-email=\"ghthor@gmail.com\">@Willa Walthall (W2'15)</span> <a href=\"https://play.golang.org/p/hOZZcmumow\" target=\"_blank\" title=\"https://play.golang.org/p/hOZZcmumow\">https://play.golang.org/p/hOZZcmumow</a></p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 38189729,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "aditya@adityamukerjee.net",
            "sender_full_name": "Aditya Mukerjee (he) (SP1'15)",
            "sender_id": 7644,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "io.Reader help",
            "submessages": [],
            "timestamp": 1429136281,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/391eb183c3474a15bf9ad0e87d3ff118?d=identicon&version=1",
            "client": "website",
            "content": "<p><a href=\"https://play.golang.org/p/-8SuA4lt48\" target=\"_blank\" title=\"https://play.golang.org/p/-8SuA4lt48\">https://play.golang.org/p/-8SuA4lt48</a></p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 38189832,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "ghthor@gmail.com",
            "sender_full_name": "Will Drengwitz (he) (W1'17)",
            "sender_id": 7099,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "io.Reader help",
            "submessages": [],
            "timestamp": 1429136402,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/391eb183c3474a15bf9ad0e87d3ff118?d=identicon&version=1",
            "client": "website",
            "content": "<p>To use 32-bit values you have to use the Read function it looks like.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 38189880,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "ghthor@gmail.com",
            "sender_full_name": "Will Drengwitz (he) (W1'17)",
            "sender_id": 7099,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "io.Reader help",
            "submessages": [],
            "timestamp": 1429136421,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/5d46121e9a899e151cfcd0e59aa9e9f8a78989e8?x=x&version=1",
            "client": "desktop app Linux 0.4.4",
            "content": "<p>I feel like that's worse</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 38189913,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "aditya@adityamukerjee.net",
            "sender_full_name": "Aditya Mukerjee (he) (SP1'15)",
            "sender_id": 7644,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "io.Reader help",
            "submessages": [],
            "timestamp": 1429136458,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/5d46121e9a899e151cfcd0e59aa9e9f8a78989e8?x=x&version=1",
            "client": "desktop app Linux 0.4.4",
            "content": "<p>because that uses i/o and could potentially error</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 38189924,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "aditya@adityamukerjee.net",
            "sender_full_name": "Aditya Mukerjee (he) (SP1'15)",
            "sender_id": 7644,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "io.Reader help",
            "submessages": [],
            "timestamp": 1429136469,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/5d46121e9a899e151cfcd0e59aa9e9f8a78989e8?x=x&version=1",
            "client": "desktop app Linux 0.4.4",
            "content": "<p>whereas here I KNOW my values will always be 4 bytes</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 38189931,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "aditya@adityamukerjee.net",
            "sender_full_name": "Aditya Mukerjee (he) (SP1'15)",
            "sender_id": 7644,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "io.Reader help",
            "submessages": [],
            "timestamp": 1429136478,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/5d46121e9a899e151cfcd0e59aa9e9f8a78989e8?x=x&version=1",
            "client": "desktop app Linux 0.4.4",
            "content": "<p>I mean, that's definitely better in the general case, and now I know how to actually use encoding/binary <img alt=\":thumbsup:\" class=\"emoji\" src=\"static/third/gemoji/images/emoji/thumbsup.png\" title=\":thumbsup:\"> </p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 38189948,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "aditya@adityamukerjee.net",
            "sender_full_name": "Aditya Mukerjee (he) (SP1'15)",
            "sender_id": 7644,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "io.Reader help",
            "submessages": [],
            "timestamp": 1429136501,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/391eb183c3474a15bf9ad0e87d3ff118?d=identicon&version=1",
            "client": "website",
            "content": "<p>Very true. That could be an error that can ignored though. The only errors I got from it when I was playing around with it were you can't use <code>int, uint</code> because the type must have a static size. You also get EOF error if you pass it less bytes then would be required for the type, so less than 8 bytes for a int64 is an error.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 38190050,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "ghthor@gmail.com",
            "sender_full_name": "Will Drengwitz (he) (W1'17)",
            "sender_id": 7099,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "io.Reader help",
            "submessages": [],
            "timestamp": 1429136607,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/391eb183c3474a15bf9ad0e87d3ff118?d=identicon&version=1",
            "client": "website",
            "content": "<div class=\"codehilite\"><pre>    <span class=\"k\">var</span> <span class=\"n\">magic</span><span class=\"p\">,</span> <span class=\"n\">header</span> <span class=\"nb\">uint32</span>\n\n    <span class=\"n\">err</span> <span class=\"p\">=</span> <span class=\"n\">binary</span><span class=\"p\">.</span><span class=\"n\">Read</span><span class=\"p\">(</span><span class=\"n\">bytes</span><span class=\"p\">.</span><span class=\"n\">NewReader</span><span class=\"p\">([]</span><span class=\"nb\">byte</span><span class=\"p\">{</span><span class=\"mi\">255</span><span class=\"p\">,</span> <span class=\"mi\">116</span><span class=\"p\">,</span> <span class=\"mi\">79</span><span class=\"p\">,</span> <span class=\"mi\">99</span><span class=\"p\">}),</span> <span class=\"n\">binary</span><span class=\"p\">.</span><span class=\"n\">BigEndian</span><span class=\"p\">,</span> <span class=\"p\">&amp;</span><span class=\"n\">magic</span><span class=\"p\">)</span>\n    <span class=\"k\">if</span> <span class=\"n\">err</span> <span class=\"p\">!=</span> <span class=\"n\">nil</span> <span class=\"p\">{</span>\n        <span class=\"n\">log</span><span class=\"p\">.</span><span class=\"n\">Fatal</span><span class=\"p\">(</span><span class=\"n\">err</span><span class=\"p\">)</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"n\">err</span> <span class=\"p\">=</span> <span class=\"n\">binary</span><span class=\"p\">.</span><span class=\"n\">Read</span><span class=\"p\">(&amp;</span><span class=\"n\">io</span><span class=\"p\">.</span><span class=\"n\">LimitedReader</span><span class=\"p\">{</span><span class=\"n\">idxFile</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">},</span> <span class=\"n\">binary</span><span class=\"p\">.</span><span class=\"n\">BigEndian</span><span class=\"p\">,</span> <span class=\"p\">&amp;</span><span class=\"n\">header</span><span class=\"p\">)</span>\n    <span class=\"k\">if</span> <span class=\"n\">err</span> <span class=\"p\">!=</span> <span class=\"n\">nil</span> <span class=\"p\">{</span>\n        <span class=\"n\">log</span><span class=\"p\">.</span><span class=\"n\">Fatal</span><span class=\"p\">(</span><span class=\"n\">err</span><span class=\"p\">)</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"n\">fmt</span><span class=\"p\">.</span><span class=\"n\">Println</span><span class=\"p\">(</span><span class=\"n\">magic</span> <span class=\"p\">==</span> <span class=\"n\">header</span><span class=\"p\">)</span>\n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 38190225,
            "is_me_message": false,
            "last_edit_timestamp": 1429136829,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "ghthor@gmail.com",
            "sender_full_name": "Will Drengwitz (he) (W1'17)",
            "sender_id": 7099,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "io.Reader help",
            "submessages": [],
            "timestamp": 1429136812,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/391eb183c3474a15bf9ad0e87d3ff118?d=identicon&version=1",
            "client": "website",
            "content": "<p>LoL, as far as I got, but I got to use my <code>io.LimitedReader</code> !!!!</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 38190252,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "ghthor@gmail.com",
            "sender_full_name": "Will Drengwitz (he) (W1'17)",
            "sender_id": 7099,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "io.Reader help",
            "submessages": [],
            "timestamp": 1429136872,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/5d46121e9a899e151cfcd0e59aa9e9f8a78989e8?x=x&version=1",
            "client": "desktop app Linux 0.4.4",
            "content": "<p>I guess that's true. I mostly just have a knee-jerk reaction to ignoring errors, but perhaps here I can suppress that instinct. ;)</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 38190419,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "aditya@adityamukerjee.net",
            "sender_full_name": "Aditya Mukerjee (he) (SP1'15)",
            "sender_id": 7644,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "io.Reader help",
            "submessages": [],
            "timestamp": 1429137103,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/5d46121e9a899e151cfcd0e59aa9e9f8a78989e8?x=x&version=1",
            "client": "desktop app Linux 0.4.4",
            "content": "<p>I really love <code>io.LimitedReader</code> and <code>io.Sectionreader</code> and am now going to have to find an excuse to use them!</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 38190426,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "aditya@adityamukerjee.net",
            "sender_full_name": "Aditya Mukerjee (he) (SP1'15)",
            "sender_id": 7644,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "io.Reader help",
            "submessages": [],
            "timestamp": 1429137122,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/a179bb8c3fc4ab0975954f57d47fa6c53a8c2dad?x=x&version=2",
            "client": "website",
            "content": "<p><a href=\"https://godoc.org/database/sql\" target=\"_blank\" title=\"https://godoc.org/database/sql\">https://godoc.org/database/sql</a></p>\n<p>What happens if <code>SetMaxOpenConns</code> is used and the max number is reached? Do further statements block or return errors? Am I missing something obvious in the documentation? (If I'm not, I'll probably file a bug.)</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 38399290,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "jay@jayschwa.net",
            "sender_full_name": "Jay Weisskopf Petacat (W2'17)",
            "sender_id": 829,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "database/sql max connections",
            "submessages": [],
            "timestamp": 1429559961,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/2de9901913d2f414b7b174d2c2c69a88?d=identicon&version=1",
            "client": "website",
            "content": "<p><a href=\"http://blog.mailgun.com/introducing-a-new-cross-platform-debugger-for-go/\" target=\"_blank\" title=\"http://blog.mailgun.com/introducing-a-new-cross-platform-debugger-for-go/\">http://blog.mailgun.com/introducing-a-new-cross-platform-debugger-for-go/</a></p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 38399773,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "chris@printf.net",
            "sender_full_name": "Chris Ball (SP2'15)",
            "sender_id": 7857,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "godebug",
            "submessages": [],
            "timestamp": 1429560600,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/72d03dbb9ec7ac92767a0db7ac17250842ba370b?x=x&version=1",
            "client": "website",
            "content": "<p>this is *SO* good</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 38409672,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "samer@samertm.com",
            "sender_full_name": "Samer Masterson (S1'14)",
            "sender_id": 5874,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "godebug",
            "submessages": [],
            "timestamp": 1429575116,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/72d03dbb9ec7ac92767a0db7ac17250842ba370b?x=x&version=1",
            "client": "website",
            "content": "<p>I have been printf debugging for the last 9 months &gt;_&gt;</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 38409713,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "samer@samertm.com",
            "sender_full_name": "Samer Masterson (S1'14)",
            "sender_id": 5874,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "godebug",
            "submessages": [],
            "timestamp": 1429575161,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/5d46121e9a899e151cfcd0e59aa9e9f8a78989e8?x=x&version=1",
            "client": "desktop app Linux 0.4.4",
            "content": "<p><span class=\"user-mention\" data-user-email=\"samer@samertm.com\">@Samer Masterson (S'14)</span> FWIW you may want to try gdb, since that's pretty battle-tested and already works with Go</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 38412205,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "aditya@adityamukerjee.net",
            "sender_full_name": "Aditya Mukerjee (he) (SP1'15)",
            "sender_id": 7644,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "godebug",
            "submessages": [],
            "timestamp": 1429579850,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/5d46121e9a899e151cfcd0e59aa9e9f8a78989e8?x=x&version=1",
            "client": "desktop app Linux 0.4.4",
            "content": "<p>The new debuggers that people are writing are specifically targeting gc</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 38412206,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "aditya@adityamukerjee.net",
            "sender_full_name": "Aditya Mukerjee (he) (SP1'15)",
            "sender_id": 7644,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "godebug",
            "submessages": [],
            "timestamp": 1429579867,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/0a35beaf5a354dafdf10494c0313e10fffc154fd?x=x&version=1",
            "client": "website",
            "content": "<p>Is there some reason this doesn't work?</p>\n<div class=\"codehilite\"><pre>    <span class=\"n\">myInt32</span> <span class=\"p\">:=</span> <span class=\"nb\">int32</span><span class=\"p\">(</span><span class=\"mi\">42</span><span class=\"p\">)</span>\n    <span class=\"n\">fmt</span><span class=\"p\">.</span><span class=\"n\">Println</span><span class=\"p\">(</span><span class=\"n\">myInt32</span><span class=\"p\">)</span>\n    <span class=\"n\">myStr</span> <span class=\"p\">:=</span> <span class=\"nb\">string</span><span class=\"p\">(</span><span class=\"n\">myInt32</span><span class=\"p\">)</span>\n    <span class=\"n\">fmt</span><span class=\"p\">.</span><span class=\"n\">Println</span><span class=\"p\">(</span><span class=\"n\">myStr</span><span class=\"p\">)</span>\n</pre></div>\n\n\n<p>returns:</p>\n<div class=\"codehilite\"><pre>42\n*\n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 38441863,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "maia.mcc@gmail.com",
            "sender_full_name": "Maia McCormick (she) (S2'14)",
            "sender_id": 6175,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "string(myInt32)",
            "submessages": [],
            "timestamp": 1429636861,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/a179bb8c3fc4ab0975954f57d47fa6c53a8c2dad?x=x&version=2",
            "client": "website",
            "content": "<p>Integers can't be converted to strings. Use <code>fmt.Sprint(myInt32)</code> or <code>strconv.Itoa(int(myInt32))</code>.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 38441977,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "jay@jayschwa.net",
            "sender_full_name": "Jay Weisskopf Petacat (W2'17)",
            "sender_id": 829,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "string(myInt32)",
            "submessages": [],
            "timestamp": 1429637002,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/0a35beaf5a354dafdf10494c0313e10fffc154fd?x=x&version=1",
            "client": "website",
            "content": "<p>Oh. Okay cool.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 38442077,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "maia.mcc@gmail.com",
            "sender_full_name": "Maia McCormick (she) (S2'14)",
            "sender_id": 6175,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "string(myInt32)",
            "submessages": [],
            "timestamp": 1429637160,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/0a35beaf5a354dafdf10494c0313e10fffc154fd?x=x&version=1",
            "client": "website",
            "content": "<p>Silly Go...</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 38442119,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "maia.mcc@gmail.com",
            "sender_full_name": "Maia McCormick (she) (S2'14)",
            "sender_id": 6175,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "string(myInt32)",
            "submessages": [],
            "timestamp": 1429637171,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/0a35beaf5a354dafdf10494c0313e10fffc154fd?x=x&version=1",
            "client": "website",
            "content": "<p>/me smh</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 38442120,
            "is_me_message": true,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "maia.mcc@gmail.com",
            "sender_full_name": "Maia McCormick (she) (S2'14)",
            "sender_id": 6175,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "string(myInt32)",
            "submessages": [],
            "timestamp": 1429637172,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/5d46121e9a899e151cfcd0e59aa9e9f8a78989e8?x=x&version=1",
            "client": "desktop app Linux 0.4.4",
            "content": "<p><span class=\"user-mention\" data-user-email=\"maia.mcc@gmail.com\">@Maia McCormick (S'14)</span> in case you care, it's because conversion functions only work on two types that are the same internally</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 38442648,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "aditya@adityamukerjee.net",
            "sender_full_name": "Aditya Mukerjee (he) (SP1'15)",
            "sender_id": 7644,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "string(myInt32)",
            "submessages": [],
            "timestamp": 1429637851,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/5d46121e9a899e151cfcd0e59aa9e9f8a78989e8?x=x&version=1",
            "client": "desktop app Linux 0.4.4",
            "content": "<p>(int and int64 are the \"same\" internally)</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 38442650,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "aditya@adityamukerjee.net",
            "sender_full_name": "Aditya Mukerjee (he) (SP1'15)",
            "sender_id": 7644,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "string(myInt32)",
            "submessages": [],
            "timestamp": 1429637856,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/5d46121e9a899e151cfcd0e59aa9e9f8a78989e8?x=x&version=1",
            "client": "desktop app Linux 0.4.4",
            "content": "<p>whereas doing a string conversion is not</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 38442653,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "aditya@adityamukerjee.net",
            "sender_full_name": "Aditya Mukerjee (he) (SP1'15)",
            "sender_id": 7644,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "string(myInt32)",
            "submessages": [],
            "timestamp": 1429637861,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/f6bd929465d6d225def8062d5a9d3f3f?d=identicon&version=1",
            "client": "website",
            "content": "<p>As part of a performance experiment that has nothing to do with Go, I'm trying to do some dummy operation that spends all of its time in <code>sys</code> and little to none in <code>user</code> (as shown by <code>time</code>). To my surprise, using fmt.Scanf or fmt.Scan and piping in /dev/zero is about 50/50 <code>sys</code> and <code>user</code> because of the overhead from <code>Scan</code>. What can I use that's low overhead?</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 38442700,
            "is_me_message": false,
            "last_edit_timestamp": 1429637942,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "danluu@gmail.com",
            "sender_full_name": "Dan Luu (W'13)",
            "sender_id": 820,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "low overhead I/O",
            "submessages": [],
            "timestamp": 1429637890,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/f6bd929465d6d225def8062d5a9d3f3f?d=identicon&version=1",
            "client": "website",
            "content": "<p>I guess I shouldn't actually be surprised by this -- I've noticed that using go stdlib I/O is generally quite slow, and that's a symptom of the same thing.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 38442713,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "danluu@gmail.com",
            "sender_full_name": "Dan Luu (W'13)",
            "sender_id": 820,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "low overhead I/O",
            "submessages": [],
            "timestamp": 1429637913,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/a179bb8c3fc4ab0975954f57d47fa6c53a8c2dad?x=x&version=2",
            "client": "website",
            "content": "<p>Most of the <code>fmt</code> functions use reflection, which is slow. Using plain old <code>Read</code> is probably faster, but then you'll have to do conversions from <code>[]byte</code> manually.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 38442830,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "jay@jayschwa.net",
            "sender_full_name": "Jay Weisskopf Petacat (W2'17)",
            "sender_id": 829,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "low overhead I/O",
            "submessages": [],
            "timestamp": 1429638084,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/f6bd929465d6d225def8062d5a9d3f3f?d=identicon&version=1",
            "client": "website",
            "content": "<p><a href=\"https://groups.google.com/forum/#!topic/golang-nuts/W08rFBcHKbc\" target=\"_blank\" title=\"https://groups.google.com/forum/#!topic/golang-nuts/W08rFBcHKbc\">This thread isn't very promising</a>. The best anyone could come up with is twice as slow as Python and 5x as slow as C :-(.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 38442872,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "danluu@gmail.com",
            "sender_full_name": "Dan Luu (W'13)",
            "sender_id": 820,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "low overhead I/O",
            "submessages": [],
            "timestamp": 1429638128,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/229e3746f6f5100c1d7d5d7a8a5b82d5?d=identicon&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>interesting.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 38442996,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "nat@natwelch.com",
            "sender_full_name": "Nat Welch (he) (SP2'15)",
            "sender_id": 7866,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "low overhead I/O",
            "submessages": [],
            "timestamp": 1429638334,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/f6bd929465d6d225def8062d5a9d3f3f?d=identicon&version=1",
            "client": "website",
            "content": "<p>I don't mind converting from []byte, or even just leaving it as []byte, but... this still seems slow. I tried /dev/random since that should be higher overhead, but Go's overhead still \"wins\".</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 38443010,
            "is_me_message": false,
            "last_edit_timestamp": 1429639397,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "danluu@gmail.com",
            "sender_full_name": "Dan Luu (W'13)",
            "sender_id": 820,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "low overhead I/O",
            "submessages": [],
            "timestamp": 1429638354,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/a179bb8c3fc4ab0975954f57d47fa6c53a8c2dad?x=x&version=2",
            "client": "website",
            "content": "<p>What version of Go are you using? <code>go version</code>.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 38443058,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "jay@jayschwa.net",
            "sender_full_name": "Jay Weisskopf Petacat (W2'17)",
            "sender_id": 829,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "low overhead I/O",
            "submessages": [],
            "timestamp": 1429638396,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/f6bd929465d6d225def8062d5a9d3f3f?d=identicon&version=1",
            "client": "website",
            "content": "<p>1.4.2.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 38443060,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "danluu@gmail.com",
            "sender_full_name": "Dan Luu (W'13)",
            "sender_id": 820,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "low overhead I/O",
            "submessages": [],
            "timestamp": 1429638405,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/f6bd929465d6d225def8062d5a9d3f3f?d=identicon&version=1",
            "client": "website",
            "content": "<p>I'm trying to do go stuff for now since I'm in the middle of doing interviews in go, so I'll probably table this and dig around after I'm done with interviews. If it turns out I can figure out how to do it in Go, I'll do that, otherwise I'll do it in C++.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 38443170,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "danluu@gmail.com",
            "sender_full_name": "Dan Luu (W'13)",
            "sender_id": 820,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "low overhead I/O",
            "submessages": [],
            "timestamp": 1429638540,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/f6bd929465d6d225def8062d5a9d3f3f?d=identicon&version=1",
            "client": "website",
            "content": "<p>I really just way to call a function that will give me a block of data (of any kind -- I don't care at all), where basically all of the runtime is sys time and not user time. I suppose I could do expensive syscalls to hide the file I/O overhead, but that seems a bit silly. </p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 38443209,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "danluu@gmail.com",
            "sender_full_name": "Dan Luu (W'13)",
            "sender_id": 820,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "low overhead I/O",
            "submessages": [],
            "timestamp": 1429638597,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/f6bd929465d6d225def8062d5a9d3f3f?d=identicon&version=1",
            "client": "website",
            "content": "<p><a href=\"http://eng.kifi.com/scala-vs-go-tcp-benchmark/\" target=\"_blank\" title=\"http://eng.kifi.com/scala-vs-go-tcp-benchmark/\">Some people tried to do network I/O in Go and ran into the same problem</a> so I dunno, this seems like a general problem? They say that go is \"extremely fast\" because the overhead is 11us per packet, but ideally you'd get something like 40ns per packet so I probably can't get around the problem by doing network I/O instead of file I/O.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 38443847,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "danluu@gmail.com",
            "sender_full_name": "Dan Luu (W'13)",
            "sender_id": 820,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "low overhead I/O",
            "submessages": [],
            "timestamp": 1429639237,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/f6bd929465d6d225def8062d5a9d3f3f?d=identicon&version=1",
            "client": "website",
            "content": "<p>I was thinking of setting up a dummy packet generator and reading from that since network I/O is also high overhead, but it looks like the overhead isn't high enough there, either.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 38443897,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "danluu@gmail.com",
            "sender_full_name": "Dan Luu (W'13)",
            "sender_id": 820,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "low overhead I/O",
            "submessages": [],
            "timestamp": 1429639316,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/f6bd929465d6d225def8062d5a9d3f3f?d=identicon&version=1",
            "client": "website",
            "content": "<p>Oh wait, I can probably get this by mmaping a bogus file.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 38444339,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "danluu@gmail.com",
            "sender_full_name": "Dan Luu (W'13)",
            "sender_id": 820,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "low overhead I/O",
            "submessages": [],
            "timestamp": 1429639854,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/5d46121e9a899e151cfcd0e59aa9e9f8a78989e8?x=x&version=1",
            "client": "desktop app Linux 0.4.4",
            "content": "<p>so if you do <code>type Foo Bar</code> (create a named type alias, where <code>Bar</code> could also be any builtin type like <code>int</code>)</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 38445519,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "aditya@adityamukerjee.net",
            "sender_full_name": "Aditya Mukerjee (he) (SP1'15)",
            "sender_id": 7644,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "string(myInt32)",
            "submessages": [],
            "timestamp": 1429641165,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/5d46121e9a899e151cfcd0e59aa9e9f8a78989e8?x=x&version=1",
            "client": "desktop app Linux 0.4.4",
            "content": "<p>then you <strong>can</strong> do <code>var b Bar;  var f Foo = Foo(b)</code></p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 38445539,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "aditya@adityamukerjee.net",
            "sender_full_name": "Aditya Mukerjee (he) (SP1'15)",
            "sender_id": 7644,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "string(myInt32)",
            "submessages": [],
            "timestamp": 1429641191,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/5d46121e9a899e151cfcd0e59aa9e9f8a78989e8?x=x&version=1",
            "client": "desktop app Linux 0.4.4",
            "content": "<p>...writing that out I don't know if that made it clearer or less clear...</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 38445549,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "aditya@adityamukerjee.net",
            "sender_full_name": "Aditya Mukerjee (he) (SP1'15)",
            "sender_id": 7644,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "string(myInt32)",
            "submessages": [],
            "timestamp": 1429641201,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/f6bd929465d6d225def8062d5a9d3f3f?d=identicon&version=1",
            "client": "website",
            "content": "<p><a href=\"https://github.com/golang/go/issues/283\" target=\"_blank\" title=\"https://github.com/golang/go/issues/283\">Does this issue mean that you can't have a map of some custom type</a>?</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 38449063,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "danluu@gmail.com",
            "sender_full_name": "Dan Luu (W'13)",
            "sender_id": 820,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "map[sometype]",
            "submessages": [],
            "timestamp": 1429644946,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/f6bd929465d6d225def8062d5a9d3f3f?d=identicon&version=1",
            "client": "website",
            "content": "<p>The context for this question is that I want a map of <code>[]int</code> to <code>struct{}</code>. As far as I can tell, the simplest way to do that is to make a map[string] and convert <code>[]int</code> to string. That's sort of heinous, but it's easy and straightforward.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 38449426,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "danluu@gmail.com",
            "sender_full_name": "Dan Luu (W'13)",
            "sender_id": 820,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "map[sometype]",
            "submessages": [],
            "timestamp": 1429645301,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/a179bb8c3fc4ab0975954f57d47fa6c53a8c2dad?x=x&version=2",
            "client": "website",
            "content": "<p>As far as I know, keys can be primitives, structs, and pointers. On the playground, it looks like channels work too.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 38450016,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "jay@jayschwa.net",
            "sender_full_name": "Jay Weisskopf Petacat (W2'17)",
            "sender_id": 829,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "map[sometype]",
            "submessages": [],
            "timestamp": 1429645776,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/a179bb8c3fc4ab0975954f57d47fa6c53a8c2dad?x=x&version=2",
            "client": "website",
            "content": "<p>Looks like map keys can't be slices or other maps :-)</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 38450331,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "jay@jayschwa.net",
            "sender_full_name": "Jay Weisskopf Petacat (W2'17)",
            "sender_id": 829,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "map[sometype]",
            "submessages": [],
            "timestamp": 1429646059,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/a179bb8c3fc4ab0975954f57d47fa6c53a8c2dad?x=x&version=2",
            "client": "website",
            "content": "<p>Dan Luu, what are you trying to do? A set of slices?</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 38450375,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "jay@jayschwa.net",
            "sender_full_name": "Jay Weisskopf Petacat (W2'17)",
            "sender_id": 829,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "map[sometype]",
            "submessages": [],
            "timestamp": 1429646112,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/f6bd929465d6d225def8062d5a9d3f3f?d=identicon&version=1",
            "client": "website",
            "content": "<p>Yeah, that's basically what I want. I'm thinking of unsafely converting <code>[]int</code> to <code>[]byte</code> with a raw cast and then converting to string normally. Either that or just doing a join on the <code>[]int</code> and sticking commas between the values. This seems horrible, but easy.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 38450754,
            "is_me_message": false,
            "last_edit_timestamp": 1429646561,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "danluu@gmail.com",
            "sender_full_name": "Dan Luu (W'13)",
            "sender_id": 820,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "map[sometype]",
            "submessages": [],
            "timestamp": 1429646520,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/a179bb8c3fc4ab0975954f57d47fa6c53a8c2dad?x=x&version=2",
            "client": "website",
            "content": "<p>Do you want it over the contents of the slice, or the slice itself?</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 38451051,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "jay@jayschwa.net",
            "sender_full_name": "Jay Weisskopf Petacat (W2'17)",
            "sender_id": 829,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "map[sometype]",
            "submessages": [],
            "timestamp": 1429646808,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/a179bb8c3fc4ab0975954f57d47fa6c53a8c2dad?x=x&version=2",
            "client": "website",
            "content": "<p>(That distinction makes me understand why they possibly chose not to implement it.)</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 38451101,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "jay@jayschwa.net",
            "sender_full_name": "Jay Weisskopf Petacat (W2'17)",
            "sender_id": 829,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "map[sometype]",
            "submessages": [],
            "timestamp": 1429646875,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/f6bd929465d6d225def8062d5a9d3f3f?d=identicon&version=1",
            "client": "website",
            "content": "<p>The contents, not the slice itself, which is why I'm thinking of this horrible hack instead of a map of pointer.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 38451415,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "danluu@gmail.com",
            "sender_full_name": "Dan Luu (W'13)",
            "sender_id": 820,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "map[sometype]",
            "submessages": [],
            "timestamp": 1429647211,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/a179bb8c3fc4ab0975954f57d47fa6c53a8c2dad?x=x&version=2",
            "client": "website",
            "content": "<p>A checksum or hash of the contents might be another option.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 38451482,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "jay@jayschwa.net",
            "sender_full_name": "Jay Weisskopf Petacat (W2'17)",
            "sender_id": 829,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "map[sometype]",
            "submessages": [],
            "timestamp": 1429647254,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/f6bd929465d6d225def8062d5a9d3f3f?d=identicon&version=1",
            "client": "website",
            "content": "<p>Yeah, that's true. I suppose I worry about the possibility of collisions but I could pick something appropriate so that collisions are unlikely.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 38451947,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "danluu@gmail.com",
            "sender_full_name": "Dan Luu (W'13)",
            "sender_id": 820,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "map[sometype]",
            "submessages": [],
            "timestamp": 1429647867,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/5d46121e9a899e151cfcd0e59aa9e9f8a78989e8?x=x&version=1",
            "client": "desktop app Linux 0.4.4",
            "content": "<p>what's the context for this? why do you need to use <code>[]int</code> as the key?</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 38452602,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "aditya@adityamukerjee.net",
            "sender_full_name": "Aditya Mukerjee (he) (SP1'15)",
            "sender_id": 7644,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "map[sometype]",
            "submessages": [],
            "timestamp": 1429648710,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/5d46121e9a899e151cfcd0e59aa9e9f8a78989e8?x=x&version=1",
            "client": "desktop app Linux 0.4.4",
            "content": "<p>I was going to say that you couldjust use a struct with the slice as a field, but it looks like the *entire* key has to be stack-allocated</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 38452767,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "aditya@adityamukerjee.net",
            "sender_full_name": "Aditya Mukerjee (he) (SP1'15)",
            "sender_id": 7644,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "map[sometype]",
            "submessages": [],
            "timestamp": 1429648915,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/5d46121e9a899e151cfcd0e59aa9e9f8a78989e8?x=x&version=1",
            "client": "desktop app Linux 0.4.4",
            "content": "<p>which makes sense</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 38452771,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "aditya@adityamukerjee.net",
            "sender_full_name": "Aditya Mukerjee (he) (SP1'15)",
            "sender_id": 7644,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "map[sometype]",
            "submessages": [],
            "timestamp": 1429648917,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/5d46121e9a899e151cfcd0e59aa9e9f8a78989e8?x=x&version=1",
            "client": "desktop app Linux 0.4.4",
            "content": "<p>but doesn't help you in this case :-/</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 38452796,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "aditya@adityamukerjee.net",
            "sender_full_name": "Aditya Mukerjee (he) (SP1'15)",
            "sender_id": 7644,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "map[sometype]",
            "submessages": [],
            "timestamp": 1429648925,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/f6bd929465d6d225def8062d5a9d3f3f?d=identicon&version=1",
            "client": "website",
            "content": "<p>It's a silly algorithms question. In one variant I want to memoize with <code>[]int</code> as the key and an <code>int</code> value. In another I just want to see if I've ever seen a particular <code>[]int</code> before so I only do unique computations.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 38452850,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "danluu@gmail.com",
            "sender_full_name": "Dan Luu (W'13)",
            "sender_id": 820,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "map[sometype]",
            "submessages": [],
            "timestamp": 1429649005,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/f6bd929465d6d225def8062d5a9d3f3f?d=identicon&version=1",
            "client": "website",
            "content": "<p>I dunno, maybe there's some super simple thing I'm missing, but it's the standard question where you have N coins (maybe 1, 2, 5, etc.) and some amount, and you want to return either the number of ways you can make change or a list of all the ways to make change.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 38452903,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "danluu@gmail.com",
            "sender_full_name": "Dan Luu (W'13)",
            "sender_id": 820,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "map[sometype]",
            "submessages": [],
            "timestamp": 1429649056,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/f6bd929465d6d225def8062d5a9d3f3f?d=identicon&version=1",
            "client": "website",
            "content": "<p>Without replacement, I'd just iterate through all possibilities and be done with it, but with replacement my natural inclination is to do some recursive thing and I'd like to have a map against things I've used. I'd be happy to have a simpler solution explained to me, though :-).</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 38452960,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "danluu@gmail.com",
            "sender_full_name": "Dan Luu (W'13)",
            "sender_id": 820,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "map[sometype]",
            "submessages": [],
            "timestamp": 1429649133,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/5d46121e9a899e151cfcd0e59aa9e9f8a78989e8?x=x&version=1",
            "client": "desktop app Linux 0.4.4",
            "content": "<p>isn't n fixed?</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 38455955,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "aditya@adityamukerjee.net",
            "sender_full_name": "Aditya Mukerjee (he) (SP1'15)",
            "sender_id": 7644,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "map[sometype]",
            "submessages": [],
            "timestamp": 1429652433,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/5d46121e9a899e151cfcd0e59aa9e9f8a78989e8?x=x&version=1",
            "client": "desktop app Linux 0.4.4",
            "content": "<p>if so you can use a struct instead of a slice</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 38455958,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "aditya@adityamukerjee.net",
            "sender_full_name": "Aditya Mukerjee (he) (SP1'15)",
            "sender_id": 7644,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "map[sometype]",
            "submessages": [],
            "timestamp": 1429652439,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/5d46121e9a899e151cfcd0e59aa9e9f8a78989e8?x=x&version=1",
            "client": "desktop app Linux 0.4.4",
            "content": "<p>er, sorry, not n</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 38455962,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "aditya@adityamukerjee.net",
            "sender_full_name": "Aditya Mukerjee (he) (SP1'15)",
            "sender_id": 7644,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "map[sometype]",
            "submessages": [],
            "timestamp": 1429652447,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/5d46121e9a899e151cfcd0e59aa9e9f8a78989e8?x=x&version=1",
            "client": "desktop app Linux 0.4.4",
            "content": "<p>but the number of possible coins</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 38455966,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "aditya@adityamukerjee.net",
            "sender_full_name": "Aditya Mukerjee (he) (SP1'15)",
            "sender_id": 7644,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "map[sometype]",
            "submessages": [],
            "timestamp": 1429652451,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/5d46121e9a899e151cfcd0e59aa9e9f8a78989e8?x=x&version=1",
            "client": "desktop app Linux 0.4.4",
            "content": "<p>ie, dimes, nickles</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 38455968,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "aditya@adityamukerjee.net",
            "sender_full_name": "Aditya Mukerjee (he) (SP1'15)",
            "sender_id": 7644,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "map[sometype]",
            "submessages": [],
            "timestamp": 1429652456,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/f6bd929465d6d225def8062d5a9d3f3f?d=identicon&version=1",
            "client": "website",
            "content": "<p>For a call to the function, yes, but it's not fixed at compile time. I mean that the function takes as input a list of coins (and for some variants, the number of each).</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 38456092,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "danluu@gmail.com",
            "sender_full_name": "Dan Luu (W'13)",
            "sender_id": 820,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "map[sometype]",
            "submessages": [],
            "timestamp": 1429652628,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/f6bd929465d6d225def8062d5a9d3f3f?d=identicon&version=1",
            "client": "website",
            "content": "<p>I suppose I could either use go generate, or do this thing I've seen all over the place in Scala, where a lot of stuff in the standard library has like 80 types, one for a tuple of length one, one for a tuple of length two, etc. But that seems complicated :-).</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 38456302,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "danluu@gmail.com",
            "sender_full_name": "Dan Luu (W'13)",
            "sender_id": 820,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "map[sometype]",
            "submessages": [],
            "timestamp": 1429652884,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/5d46121e9a899e151cfcd0e59aa9e9f8a78989e8?x=x&version=1",
            "client": "desktop app Linux 0.4.4",
            "content": "<p>Haha, that's the way tuples are defined in Haskell</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 38461418,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "aditya@adityamukerjee.net",
            "sender_full_name": "Aditya Mukerjee (he) (SP1'15)",
            "sender_id": 7644,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "map[sometype]",
            "submessages": [],
            "timestamp": 1429658472,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/5d46121e9a899e151cfcd0e59aa9e9f8a78989e8?x=x&version=1",
            "client": "desktop app Linux 0.4.4",
            "content": "<p>it blew my mind when I saw it</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 38461419,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "aditya@adityamukerjee.net",
            "sender_full_name": "Aditya Mukerjee (he) (SP1'15)",
            "sender_id": 7644,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "map[sometype]",
            "submessages": [],
            "timestamp": 1429658475,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/5d46121e9a899e151cfcd0e59aa9e9f8a78989e8?x=x&version=1",
            "client": "desktop app Linux 0.4.4",
            "content": "<p>it's why you can't have a tuple of len &gt; 63 in Haskell -_-</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 38461425,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "aditya@adityamukerjee.net",
            "sender_full_name": "Aditya Mukerjee (he) (SP1'15)",
            "sender_id": 7644,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "map[sometype]",
            "submessages": [],
            "timestamp": 1429658486,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/70292d91a79cfd0fb1c8ad4f650480d631a56e9e?x=x&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"danluu@gmail.com\">@Dan Luu (W'13)</span> what about stringifying the struct or slice? That's usually what I do. So the set will be <code>map[string][]int32</code>. The slice will be the value so you can get its original form, and the key is just a <code>fmt.Sprintf</code>.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 38729142,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "lawrence.trey@gmail.com",
            "sender_full_name": "Trey Lawrence (F1'16)",
            "sender_id": 911,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "map[sometype]",
            "submessages": [],
            "timestamp": 1430167790,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/70292d91a79cfd0fb1c8ad4f650480d631a56e9e?x=x&version=1",
            "client": "website",
            "content": "<p>Totally heinous, but it works</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 38729198,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "lawrence.trey@gmail.com",
            "sender_full_name": "Trey Lawrence (F1'16)",
            "sender_id": 911,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "map[sometype]",
            "submessages": [],
            "timestamp": 1430167834,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/f6bd929465d6d225def8062d5a9d3f3f?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"lawrence.trey@gmail.com\">@Trey Lawrence (S'12)</span> Yeah, that's basically what I ended up doing, and if that's idiomatic then I suppose I don't mind doing it that way, but I'd prefer a \"first class\" solution if there was one.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 38732023,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "danluu@gmail.com",
            "sender_full_name": "Dan Luu (W'13)",
            "sender_id": 820,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "map[sometype]",
            "submessages": [],
            "timestamp": 1430171446,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/e23e4097f1453792021311e52aa09bde?d=identicon&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>\"A curated list of awesome Go frameworks, libraries and software\" --&gt; <a href=\"https://github.com/chayim/awesome-go\" target=\"_blank\" title=\"https://github.com/chayim/awesome-go\">https://github.com/chayim/awesome-go</a></p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 38931637,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "ahmad19526@gmail.com",
            "sender_full_name": "Ahmed Abdalla (SP2'16)",
            "sender_id": 7874,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "awesome-go",
            "submessages": [],
            "timestamp": 1430513091,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/e23e4097f1453792021311e52aa09bde?d=identicon&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p><span class=\"user-mention\" data-user-email=\"aditya@adityamukerjee.net\">@Aditya Mukerjee (SP1'15)</span> </p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 38931642,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "ahmad19526@gmail.com",
            "sender_full_name": "Ahmed Abdalla (SP2'16)",
            "sender_id": 7874,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "awesome-go",
            "submessages": [],
            "timestamp": 1430513100,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/0a35beaf5a354dafdf10494c0313e10fffc154fd?x=x&version=1",
            "client": "website",
            "content": "<p>[deleted]</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 39038707,
            "is_me_message": false,
            "last_edit_timestamp": 1430769663,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "maia.mcc@gmail.com",
            "sender_full_name": "Maia McCormick (she) (S2'14)",
            "sender_id": 6175,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "url/post requests with lists",
            "submessages": [],
            "timestamp": 1430754372,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/0a35beaf5a354dafdf10494c0313e10fffc154fd?x=x&version=1",
            "client": "website",
            "content": "<p>[deleted]</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 39038710,
            "is_me_message": false,
            "last_edit_timestamp": 1430769658,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "maia.mcc@gmail.com",
            "sender_full_name": "Maia McCormick (she) (S2'14)",
            "sender_id": 6175,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "url/post requests with lists",
            "submessages": [],
            "timestamp": 1430754377,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/0a35beaf5a354dafdf10494c0313e10fffc154fd?x=x&version=1",
            "client": "website",
            "content": "<p>[deleted]</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 39038717,
            "is_me_message": false,
            "last_edit_timestamp": 1430769668,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "maia.mcc@gmail.com",
            "sender_full_name": "Maia McCormick (she) (S2'14)",
            "sender_id": 6175,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "url/post requests with lists",
            "submessages": [],
            "timestamp": 1430754390,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/0a35beaf5a354dafdf10494c0313e10fffc154fd?x=x&version=1",
            "client": "website",
            "content": "<p>[deleted]</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 39038729,
            "is_me_message": false,
            "last_edit_timestamp": 1430769674,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "maia.mcc@gmail.com",
            "sender_full_name": "Maia McCormick (she) (S2'14)",
            "sender_id": 6175,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "url/post requests with lists",
            "submessages": [],
            "timestamp": 1430754430,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/0a35beaf5a354dafdf10494c0313e10fffc154fd?x=x&version=1",
            "client": "website",
            "content": "<p>[deleted]</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 39038785,
            "is_me_message": false,
            "last_edit_timestamp": 1430769677,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "maia.mcc@gmail.com",
            "sender_full_name": "Maia McCormick (she) (S2'14)",
            "sender_id": 6175,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "url/post requests with lists",
            "submessages": [],
            "timestamp": 1430754491,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/0a35beaf5a354dafdf10494c0313e10fffc154fd?x=x&version=1",
            "client": "website",
            "content": "<p>[deleted]</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 39038791,
            "is_me_message": false,
            "last_edit_timestamp": 1430769681,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "maia.mcc@gmail.com",
            "sender_full_name": "Maia McCormick (she) (S2'14)",
            "sender_id": 6175,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "url/post requests with lists",
            "submessages": [],
            "timestamp": 1430754509,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/0a35beaf5a354dafdf10494c0313e10fffc154fd?x=x&version=1",
            "client": "website",
            "content": "<p>annnnnnd, it's fixed! as you were, all.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 39038864,
            "is_me_message": false,
            "last_edit_timestamp": 1430755009,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "maia.mcc@gmail.com",
            "sender_full_name": "Maia McCormick (she) (S2'14)",
            "sender_id": 6175,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "url/post requests with lists",
            "submessages": [],
            "timestamp": 1430754633,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/0a35beaf5a354dafdf10494c0313e10fffc154fd?x=x&version=1",
            "client": "website",
            "content": "<p>How do i run go tests from command line and exclude<br>\na) one test func<br>\nb) one test file?</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 39217177,
            "is_me_message": false,
            "last_edit_timestamp": 1431014294,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "maia.mcc@gmail.com",
            "sender_full_name": "Maia McCormick (she) (S2'14)",
            "sender_id": 6175,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "go test, excluding one test",
            "submessages": [],
            "timestamp": 1431014285,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/0a35beaf5a354dafdf10494c0313e10fffc154fd?x=x&version=1",
            "client": "website",
            "content": "<p>basically, the inverse of <code>go test xxx/yyy/zzz -run TestMyThing</code></p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 39217211,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "maia.mcc@gmail.com",
            "sender_full_name": "Maia McCormick (she) (S2'14)",
            "sender_id": 6175,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "go test, excluding one test",
            "submessages": [],
            "timestamp": 1431014314,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/5d46121e9a899e151cfcd0e59aa9e9f8a78989e8?x=x&version=1",
            "client": "desktop app Linux 0.4.4",
            "content": "<p>There really isn't one</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 39219560,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "aditya@adityamukerjee.net",
            "sender_full_name": "Aditya Mukerjee (he) (SP1'15)",
            "sender_id": 7644,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "go test, excluding one test",
            "submessages": [],
            "timestamp": 1431016874,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/0a35beaf5a354dafdf10494c0313e10fffc154fd?x=x&version=1",
            "client": "website",
            "content": "<p>Womp. Okay, thanks!</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 39340743,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "maia.mcc@gmail.com",
            "sender_full_name": "Maia McCormick (she) (S2'14)",
            "sender_id": 6175,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "go test, excluding one test",
            "submessages": [],
            "timestamp": 1431269871,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/61f7402a76ff0aff964da46bd7948ca20279ae1f?x=x&version=1",
            "client": "website",
            "content": "<p>In order to parse the contents of <code>/proc/self/stat</code> I have this huge sscanf call to get the values, which captures unecessary data because no other way to discard it.<br>\nI've looked around but probably no way to improve this right?</p>\n<div class=\"codehilite\"><pre>var utime int\nvar stime int\nvar cutime int\nvar cstime int\nvar starttime int\nvar rss int\n\n// throw away variable to capture things we don&#39;t need\nvar ign string\n\nfmt.Sscanf(string(statData), &quot;%s %s %s %s %s %s %s %s %s %s %s %s %s %d %d %d %d %s %s %s %s %d %s %d&quot;, &amp;ign, &amp;ign, &amp;ign, &amp;ign, &amp;ign, &amp;ign, &amp;ign, &amp;ign, &amp;ign, &amp;ign, &amp;ign, &amp;ign, &amp;ign, &amp;utime, &amp;stime, &amp;cutime, &amp;cstime, &amp;ign, &amp;ign, &amp;ign, &amp;ign, &amp;starttime, &amp;ign, &amp;rss)\n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 39354715,
            "is_me_message": false,
            "last_edit_timestamp": 1431319652,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "waldemar.quevedo@gmail.com",
            "sender_full_name": "Waldemar Quevedo (F2'14)",
            "sender_id": 6706,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "long-sscanf-with-needless-captures",
            "submessages": [],
            "timestamp": 1431304319,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/5d46121e9a899e151cfcd0e59aa9e9f8a78989e8?x=x&version=1",
            "client": "desktop app Linux 0.4.4",
            "content": "<p>I assume it won't parse if you use an underscore, right?</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 39378781,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "aditya@adityamukerjee.net",
            "sender_full_name": "Aditya Mukerjee (he) (SP1'15)",
            "sender_id": 7644,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "long-sscanf-with-needless-captures",
            "submessages": [],
            "timestamp": 1431357861,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/5d46121e9a899e151cfcd0e59aa9e9f8a78989e8?x=x&version=1",
            "client": "desktop app Linux 0.4.4",
            "content": "<p>If not, probably no way around it :-/</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 39378783,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "aditya@adityamukerjee.net",
            "sender_full_name": "Aditya Mukerjee (he) (SP1'15)",
            "sender_id": 7644,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "long-sscanf-with-needless-captures",
            "submessages": [],
            "timestamp": 1431357867,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/a606e9bf03e17f889b759d952465d3f9?d=identicon&version=1",
            "client": "website",
            "content": "<p>I'm writing a go library that works with the Github API to use in a web app and also for my own elucidation, but I was wondering if there's a best practice for writing code that tests API calls? Do you just make requests whose values you expect to stay constant and use that as the testing data?</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 39382355,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "rmcase@gmail.com",
            "sender_full_name": "Ryan Case (S1'14)",
            "sender_id": 5881,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "Testing With APIs",
            "submessages": [],
            "timestamp": 1431361998,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/5d46121e9a899e151cfcd0e59aa9e9f8a78989e8?x=x&version=1",
            "client": "desktop app Linux 0.4.4",
            "content": "<p><span class=\"user-mention\" data-user-email=\"rmcase@gmail.com\">@Ryan Case (S'14)</span> no, it's better to mock them</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 39382368,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "aditya@adityamukerjee.net",
            "sender_full_name": "Aditya Mukerjee (he) (SP1'15)",
            "sender_id": 7644,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "Testing With APIs",
            "submessages": [],
            "timestamp": 1431362033,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/5d46121e9a899e151cfcd0e59aa9e9f8a78989e8?x=x&version=1",
            "client": "desktop app Linux 0.4.4",
            "content": "<p>let me show you what I mean</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 39382371,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "aditya@adityamukerjee.net",
            "sender_full_name": "Aditya Mukerjee (he) (SP1'15)",
            "sender_id": 7644,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "Testing With APIs",
            "submessages": [],
            "timestamp": 1431362036,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/5d46121e9a899e151cfcd0e59aa9e9f8a78989e8?x=x&version=1",
            "client": "desktop app Linux 0.4.4",
            "content": "<p><a href=\"https://github.com/ChimeraCoder/gophernews/blob/master/getuser_test.go\" target=\"_blank\" title=\"https://github.com/ChimeraCoder/gophernews/blob/master/getuser_test.go\">https://github.com/ChimeraCoder/gophernews/blob/master/getuser_test.go</a></p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 39382424,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "aditya@adityamukerjee.net",
            "sender_full_name": "Aditya Mukerjee (he) (SP1'15)",
            "sender_id": 7644,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "Testing With APIs",
            "submessages": [],
            "timestamp": 1431362080,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/5d46121e9a899e151cfcd0e59aa9e9f8a78989e8?x=x&version=1",
            "client": "desktop app Linux 0.4.4",
            "content": "<p>That's not most idiomatic example in other ways (that's a fork of some code someone else wrote), but the usage of the mock <code>mux</code> and handler is idiomatic</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 39382443,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "aditya@adityamukerjee.net",
            "sender_full_name": "Aditya Mukerjee (he) (SP1'15)",
            "sender_id": 7644,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "Testing With APIs",
            "submessages": [],
            "timestamp": 1431362117,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/5d46121e9a899e151cfcd0e59aa9e9f8a78989e8?x=x&version=1",
            "client": "desktop app Linux 0.4.4",
            "content": "<p>also,  you may find that this saves you time: <a href=\"https://github.com/ChimeraCoder/gojson\" target=\"_blank\" title=\"https://github.com/ChimeraCoder/gojson\">https://github.com/ChimeraCoder/gojson</a></p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 39382450,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "aditya@adityamukerjee.net",
            "sender_full_name": "Aditya Mukerjee (he) (SP1'15)",
            "sender_id": 7644,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "Testing With APIs",
            "submessages": [],
            "timestamp": 1431362130,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/5d46121e9a899e151cfcd0e59aa9e9f8a78989e8?x=x&version=1",
            "client": "desktop app Linux 0.4.4",
            "content": "<p>if you'll notice, the <code>json</code> directory contains the actual JSON responses returned by the API, and I use those to automatically generate the struct definitions in the code (using <code>go:generate</code> and <code>gojson</code> together)</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 39382518,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "aditya@adityamukerjee.net",
            "sender_full_name": "Aditya Mukerjee (he) (SP1'15)",
            "sender_id": 7644,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "Testing With APIs",
            "submessages": [],
            "timestamp": 1431362191,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/5d46121e9a899e151cfcd0e59aa9e9f8a78989e8?x=x&version=1",
            "client": "desktop app Linux 0.4.4",
            "content": "<p>It means that, if they ever update the API, you only have to change a single file in your codebase to make sure your test is up to date (and check that it still passes -  which it still will, as long as they haven't made any breaking structural changes to the response object)</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 39382545,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "aditya@adityamukerjee.net",
            "sender_full_name": "Aditya Mukerjee (he) (SP1'15)",
            "sender_id": 7644,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "Testing With APIs",
            "submessages": [],
            "timestamp": 1431362242,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/a606e9bf03e17f889b759d952465d3f9?d=identicon&version=1",
            "client": "website",
            "content": "<p>That is very cool and useful, thanks</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 39382553,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "rmcase@gmail.com",
            "sender_full_name": "Ryan Case (S1'14)",
            "sender_id": 5881,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "Testing With APIs",
            "submessages": [],
            "timestamp": 1431362260,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/5d46121e9a899e151cfcd0e59aa9e9f8a78989e8?x=x&version=1",
            "client": "desktop app Linux 0.4.4",
            "content": "<p>np!</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 39382685,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "aditya@adityamukerjee.net",
            "sender_full_name": "Aditya Mukerjee (he) (SP1'15)",
            "sender_id": 7644,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "Testing With APIs",
            "submessages": [],
            "timestamp": 1431362414,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/61f7402a76ff0aff964da46bd7948ca20279ae1f?x=x&version=1",
            "client": "website",
            "content": "<p>yeah, gave up on it. Rob Pike says to just capture variables and ignore so I guess that is the Go way <a href=\"https://groups.google.com/d/msg/golang-nuts/JOWi2nJ0Xpg/Z6CD5RSIhxMJ\" target=\"_blank\" title=\"https://groups.google.com/d/msg/golang-nuts/JOWi2nJ0Xpg/Z6CD5RSIhxMJ\">https://groups.google.com/d/msg/golang-nuts/JOWi2nJ0Xpg/Z6CD5RSIhxMJ</a></p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 39413806,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "waldemar.quevedo@gmail.com",
            "sender_full_name": "Waldemar Quevedo (F2'14)",
            "sender_id": 6706,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "long-sscanf-with-needless-captures",
            "submessages": [],
            "timestamp": 1431415157,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/61f7402a76ff0aff964da46bd7948ca20279ae1f?x=x&version=1",
            "client": "website",
            "content": "<p>just for completeness, this was my take on measuring pcpu and mem without using <code>ps</code> in the end: <a href=\"https://github.com/apcera/gnatsd/blob/062ba9368775daf074c8ce4b97b1e3097bf00c6a/server/monitor_utils_linux.go\" target=\"_blank\" title=\"https://github.com/apcera/gnatsd/blob/062ba9368775daf074c8ce4b97b1e3097bf00c6a/server/monitor_utils_linux.go\">https://github.com/apcera/gnatsd/blob/062ba9368775daf074c8ce4b97b1e3097bf00c6a/server/monitor_utils_linux.go</a></p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 39414464,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "waldemar.quevedo@gmail.com",
            "sender_full_name": "Waldemar Quevedo (F2'14)",
            "sender_id": 6706,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "long-sscanf-with-needless-captures",
            "submessages": [],
            "timestamp": 1431416963,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/05023e2779bfc2793d79ee30c81af6ca291539ce?x=x&version=1",
            "client": "website",
            "content": "<p>i made a config language for Go projects: <a href=\"https://github.com/jordanorelli/moon\" target=\"_blank\" title=\"https://github.com/jordanorelli/moon\">https://github.com/jordanorelli/moon</a></p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 39443964,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "jordanorelli@gmail.com",
            "sender_full_name": "Jordan Orelli (F'11)",
            "sender_id": 872,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "config languages",
            "submessages": [],
            "timestamp": 1431464044,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/05023e2779bfc2793d79ee30c81af6ca291539ce?x=x&version=1",
            "client": "website",
            "content": "<p>it's very unstable, but it works.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 39443979,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "jordanorelli@gmail.com",
            "sender_full_name": "Jordan Orelli (F'11)",
            "sender_id": 872,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "config languages",
            "submessages": [],
            "timestamp": 1431464047,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/05023e2779bfc2793d79ee30c81af6ca291539ce?x=x&version=1",
            "client": "website",
            "content": "<p>i'm curious what you guys use to configure Go projects</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 39443988,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "jordanorelli@gmail.com",
            "sender_full_name": "Jordan Orelli (F'11)",
            "sender_id": 872,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "config languages",
            "submessages": [],
            "timestamp": 1431464057,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/05023e2779bfc2793d79ee30c81af6ca291539ce?x=x&version=1",
            "client": "website",
            "content": "<p>very unstable inasmuch as \"i might change this\", not \"it sometimes panics when you use it\"</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 39444016,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "jordanorelli@gmail.com",
            "sender_full_name": "Jordan Orelli (F'11)",
            "sender_id": 872,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "config languages",
            "submessages": [],
            "timestamp": 1431464100,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/05023e2779bfc2793d79ee30c81af6ca291539ce?x=x&version=1",
            "client": "website",
            "content": "<p>and the documentation is still pretty sparse.  This is how I'm using it at the moment: <a href=\"https://github.com/jordanorelli/prox/blob/master/main.go#L19-L43\" target=\"_blank\" title=\"https://github.com/jordanorelli/prox/blob/master/main.go#L19-L43\">https://github.com/jordanorelli/prox/blob/master/main.go#L19-L43</a></p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 39444045,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "jordanorelli@gmail.com",
            "sender_full_name": "Jordan Orelli (F'11)",
            "sender_id": 872,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "config languages",
            "submessages": [],
            "timestamp": 1431464147,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/a179bb8c3fc4ab0975954f57d47fa6c53a8c2dad?x=x&version=2",
            "client": "website",
            "content": "<p>IMO, there are too many special characters for the sake of delimiting bare strings. Perhaps there should be only one configurable or contextual delimiter. By contextual, I mean like <code>sed 's/foo/bar/'</code> versus <code>sed 's,foo,bar,'</code>.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 39445254,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "jay@jayschwa.net",
            "sender_full_name": "Jay Weisskopf Petacat (W2'17)",
            "sender_id": 829,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "config languages",
            "submessages": [],
            "timestamp": 1431465427,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/05023e2779bfc2793d79ee30c81af6ca291539ce?x=x&version=1",
            "client": "website",
            "content": "<p>eh?  the only special character is the @ for variables</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 39448480,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "jordanorelli@gmail.com",
            "sender_full_name": "Jordan Orelli (F'11)",
            "sender_id": 872,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "config languages",
            "submessages": [],
            "timestamp": 1431468992,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/05023e2779bfc2793d79ee30c81af6ca291539ce?x=x&version=1",
            "client": "website",
            "content": "<p>you mean like [ and {?</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 39448535,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "jordanorelli@gmail.com",
            "sender_full_name": "Jordan Orelli (F'11)",
            "sender_id": 872,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "config languages",
            "submessages": [],
            "timestamp": 1431469051,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/05023e2779bfc2793d79ee30c81af6ca291539ce?x=x&version=1",
            "client": "website",
            "content": "<p>oh the semicolons to terminate bare strings</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 39448601,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "jordanorelli@gmail.com",
            "sender_full_name": "Jordan Orelli (F'11)",
            "sender_id": 872,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "config languages",
            "submessages": [],
            "timestamp": 1431469096,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/05023e2779bfc2793d79ee30c81af6ca291539ce?x=x&version=1",
            "client": "website",
            "content": "<p>yeah.  bare strings weren't in the original design.  they were the most requested syntactical change by my ops team.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 39448615,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "jordanorelli@gmail.com",
            "sender_full_name": "Jordan Orelli (F'11)",
            "sender_id": 872,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "config languages",
            "submessages": [],
            "timestamp": 1431469117,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/05023e2779bfc2793d79ee30c81af6ca291539ce?x=x&version=1",
            "client": "website",
            "content": "<p>because having to quote strings makes generating configuration files from templates really annoying.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 39448619,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "jordanorelli@gmail.com",
            "sender_full_name": "Jordan Orelli (F'11)",
            "sender_id": 872,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "config languages",
            "submessages": [],
            "timestamp": 1431469130,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/61f7402a76ff0aff964da46bd7948ca20279ae1f?x=x&version=1",
            "client": "website",
            "content": "<p>I understand the <a href=\"http://why.md\" target=\"_blank\" title=\"http://why.md\">why.md</a> completely... I've seen something similar being done at <a href=\"https://github.com/apcera/gnatsd/blob/master/conf/\" target=\"_blank\" title=\"https://github.com/apcera/gnatsd/blob/master/conf/\">https://github.com/apcera/gnatsd/blob/master/conf/</a></p>\n<p>Usage: <a href=\"https://github.com/apcera/gnatsd/blob/master/server/opts.go\" target=\"_blank\" title=\"https://github.com/apcera/gnatsd/blob/master/server/opts.go\">https://github.com/apcera/gnatsd/blob/master/server/opts.go</a><br>\nExample: <a href=\"https://github.com/apcera/gnatsd/blob/master/test/configs/srv_a.conf\" target=\"_blank\" title=\"https://github.com/apcera/gnatsd/blob/master/test/configs/srv_a.conf\">https://github.com/apcera/gnatsd/blob/master/test/configs/srv_a.conf</a></p>\n<p>One thing that would be awesome if it could have first class support for code blocks/lines of text.  Currently, code blocks support ends up being an afterthought most of the time, so when the time comes to having to<br>\nexpress an execution, they are done in unnatural ways like one liners or accumulated lines from a list because of the limitations of JSON, YAML, or the Terraform format even.</p>\n<p>For example, the conf language I mentioned to you uses parens to do it, and then it becomes captured under ~build~.</p>\n<div class=\"codehilite\"><pre>name:    &quot;ubuntu&quot;\nversion: &quot;13.04&quot;\n\nresources {\n  disk_space: &quot;768MB&quot;\n  memory: &quot;256MB&quot;\n  network_bandwidth: &quot;10Mbps&quot;\n}\n\nbuild (\n  echo &quot;steps to build something&quot;\n)\n</pre></div>\n\n\n<p>Also TOML suports multiple lines I think.. I also wonder if something like supporting includes in conf formats has been a bad idea in the past, e.g. <code>build: include(\"some/script.sh\")</code></p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 39453673,
            "is_me_message": false,
            "last_edit_timestamp": 1431478371,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "waldemar.quevedo@gmail.com",
            "sender_full_name": "Waldemar Quevedo (F2'14)",
            "sender_id": 6706,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "config languages",
            "submessages": [],
            "timestamp": 1431477762,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/05023e2779bfc2793d79ee30c81af6ca291539ce?x=x&version=1",
            "client": "website",
            "content": "<p>\"first class support for code blocks/lines of text\"</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 39459094,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "jordanorelli@gmail.com",
            "sender_full_name": "Jordan Orelli (F'11)",
            "sender_id": 872,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "config languages",
            "submessages": [],
            "timestamp": 1431489511,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/05023e2779bfc2793d79ee30c81af6ca291539ce?x=x&version=1",
            "client": "website",
            "content": "<p>totally</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 39459095,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "jordanorelli@gmail.com",
            "sender_full_name": "Jordan Orelli (F'11)",
            "sender_id": 872,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "config languages",
            "submessages": [],
            "timestamp": 1431489512,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/05023e2779bfc2793d79ee30c81af6ca291539ce?x=x&version=1",
            "client": "website",
            "content": "<p>my plan is to include support for here documents</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 39459100,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "jordanorelli@gmail.com",
            "sender_full_name": "Jordan Orelli (F'11)",
            "sender_id": 872,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "config languages",
            "submessages": [],
            "timestamp": 1431489530,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/05023e2779bfc2793d79ee30c81af6ca291539ce?x=x&version=1",
            "client": "website",
            "content": "<p>with bash-style syntax</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 39459103,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "jordanorelli@gmail.com",
            "sender_full_name": "Jordan Orelli (F'11)",
            "sender_id": 872,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "config languages",
            "submessages": [],
            "timestamp": 1431489539,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/05023e2779bfc2793d79ee30c81af6ca291539ce?x=x&version=1",
            "client": "website",
            "content": "<p>the other thing i want is support for byte arrays</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 39459157,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "jordanorelli@gmail.com",
            "sender_full_name": "Jordan Orelli (F'11)",
            "sender_id": 872,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "config languages",
            "submessages": [],
            "timestamp": 1431489611,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/05023e2779bfc2793d79ee30c81af6ca291539ce?x=x&version=1",
            "client": "website",
            "content": "<p>i've considered doing includes.  i'm on the fence about it.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 39459182,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "jordanorelli@gmail.com",
            "sender_full_name": "Jordan Orelli (F'11)",
            "sender_id": 872,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "config languages",
            "submessages": [],
            "timestamp": 1431489675,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/05023e2779bfc2793d79ee30c81af6ca291539ce?x=x&version=1",
            "client": "website",
            "content": "<p>i haven't ruled it out, though.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 39459185,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "jordanorelli@gmail.com",
            "sender_full_name": "Jordan Orelli (F'11)",
            "sender_id": 872,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "config languages",
            "submessages": [],
            "timestamp": 1431489681,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/61f7402a76ff0aff964da46bd7948ca20279ae1f?x=x&version=1",
            "client": "website",
            "content": "<p>includes could be interesting, I am familiar with usage like this =&gt; <a href=\"http://docs.fluentd.org/articles/config-file#5-re-use-your-config-the-ldquoincluderdquo-directive\" target=\"_blank\" title=\"http://docs.fluentd.org/articles/config-file#5-re-use-your-config-the-ldquoincluderdquo-directive\">http://docs.fluentd.org/articles/config-file#5-re-use-your-config-the-ldquoincluderdquo-directive</a> <br>\nwhere you ship a package and say for example that you can define in the config file to 'load everything under /etc/mypackage/*.conf' as config.  The case where you remote include  config I haven't used it though, also loading include into a config instead of heredoc I haven't seen it</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 39459347,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "waldemar.quevedo@gmail.com",
            "sender_full_name": "Waldemar Quevedo (F2'14)",
            "sender_id": 6706,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "config languages",
            "submessages": [],
            "timestamp": 1431490012,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/61f7402a76ff0aff964da46bd7948ca20279ae1f?x=x&version=1",
            "client": "website",
            "content": "<p>but yeah +1 on heredocs</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 39459421,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "waldemar.quevedo@gmail.com",
            "sender_full_name": "Waldemar Quevedo (F2'14)",
            "sender_id": 6706,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "config languages",
            "submessages": [],
            "timestamp": 1431490183,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/05023e2779bfc2793d79ee30c81af6ca291539ce?x=x&version=1",
            "client": "website",
            "content": "<p>the problem with an include is that if you're turning the whole thing into a single tree</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 39459472,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "jordanorelli@gmail.com",
            "sender_full_name": "Jordan Orelli (F'11)",
            "sender_id": 872,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "config languages",
            "submessages": [],
            "timestamp": 1431490235,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/05023e2779bfc2793d79ee30c81af6ca291539ce?x=x&version=1",
            "client": "website",
            "content": "<p>you need a way to append to an existing collection for the include to be generally useful</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 39459476,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "jordanorelli@gmail.com",
            "sender_full_name": "Jordan Orelli (F'11)",
            "sender_id": 872,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "config languages",
            "submessages": [],
            "timestamp": 1431490248,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/05023e2779bfc2793d79ee30c81af6ca291539ce?x=x&version=1",
            "client": "website",
            "content": "<p>e.g., let's say you have some key \"servers\" that associates to a list of server objects</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 39459481,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "jordanorelli@gmail.com",
            "sender_full_name": "Jordan Orelli (F'11)",
            "sender_id": 872,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "config languages",
            "submessages": [],
            "timestamp": 1431490261,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/05023e2779bfc2793d79ee30c81af6ca291539ce?x=x&version=1",
            "client": "website",
            "content": "<p>if you want to include a config, and that config wants to add a server to the list ...</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 39459484,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "jordanorelli@gmail.com",
            "sender_full_name": "Jordan Orelli (F'11)",
            "sender_id": 872,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "config languages",
            "submessages": [],
            "timestamp": 1431490273,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/05023e2779bfc2793d79ee30c81af6ca291539ce?x=x&version=1",
            "client": "website",
            "content": "<p>how would you do it other than adding some kind of append operation?</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 39459492,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "jordanorelli@gmail.com",
            "sender_full_name": "Jordan Orelli (F'11)",
            "sender_id": 872,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "config languages",
            "submessages": [],
            "timestamp": 1431490290,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/05023e2779bfc2793d79ee30c81af6ca291539ce?x=x&version=1",
            "client": "website",
            "content": "<p>and what does the scoping for variables become, then?</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 39459494,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "jordanorelli@gmail.com",
            "sender_full_name": "Jordan Orelli (F'11)",
            "sender_id": 872,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "config languages",
            "submessages": [],
            "timestamp": 1431490297,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/05023e2779bfc2793d79ee30c81af6ca291539ce?x=x&version=1",
            "client": "website",
            "content": "<p>it's a bit of a can of worms.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 39459495,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "jordanorelli@gmail.com",
            "sender_full_name": "Jordan Orelli (F'11)",
            "sender_id": 872,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "config languages",
            "submessages": [],
            "timestamp": 1431490302,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/05023e2779bfc2793d79ee30c81af6ca291539ce?x=x&version=1",
            "client": "website",
            "content": "<p>but it could be very useful.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 39459496,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "jordanorelli@gmail.com",
            "sender_full_name": "Jordan Orelli (F'11)",
            "sender_id": 872,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "config languages",
            "submessages": [],
            "timestamp": 1431490309,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/61f7402a76ff0aff964da46bd7948ca20279ae1f?x=x&version=1",
            "client": "website",
            "content": "<p>yes, include on the same scope can be tricky... terraform for example shies away from it <a href=\"https://github.com/hashicorp/terraform/blob/master/config/append.go#L5\" target=\"_blank\" title=\"https://github.com/hashicorp/terraform/blob/master/config/append.go#L5\">https://github.com/hashicorp/terraform/blob/master/config/append.go#L5</a></p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 39459713,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "waldemar.quevedo@gmail.com",
            "sender_full_name": "Waldemar Quevedo (F2'14)",
            "sender_id": 6706,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "config languages",
            "submessages": [],
            "timestamp": 1431490729,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/05023e2779bfc2793d79ee30c81af6ca291539ce?x=x&version=1",
            "client": "website",
            "content": "<p>yeah, i'm thinking i'll define the semantics of merging two trees.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 39478359,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "jordanorelli@gmail.com",
            "sender_full_name": "Jordan Orelli (F'11)",
            "sender_id": 872,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "config languages",
            "submessages": [],
            "timestamp": 1431527769,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/05023e2779bfc2793d79ee30c81af6ca291539ce?x=x&version=1",
            "client": "website",
            "content": "<p>because you can specify options on the command line or in a file</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 39478365,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "jordanorelli@gmail.com",
            "sender_full_name": "Jordan Orelli (F'11)",
            "sender_id": 872,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "config languages",
            "submessages": [],
            "timestamp": 1431527778,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/05023e2779bfc2793d79ee30c81af6ca291539ce?x=x&version=1",
            "client": "website",
            "content": "<p>and the command line overrides the file</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 39478369,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "jordanorelli@gmail.com",
            "sender_full_name": "Jordan Orelli (F'11)",
            "sender_id": 872,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "config languages",
            "submessages": [],
            "timestamp": 1431527781,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/05023e2779bfc2793d79ee30c81af6ca291539ce?x=x&version=1",
            "client": "website",
            "content": "<p>it's probably easiest to just have the command line define one document, the file define another, and then merge them.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 39478377,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "jordanorelli@gmail.com",
            "sender_full_name": "Jordan Orelli (F'11)",
            "sender_id": 872,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "config languages",
            "submessages": [],
            "timestamp": 1431527802,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/05023e2779bfc2793d79ee30c81af6ca291539ce?x=x&version=1",
            "client": "website",
            "content": "<p>right now i just have the commandline override things.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 39478384,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "jordanorelli@gmail.com",
            "sender_full_name": "Jordan Orelli (F'11)",
            "sender_id": 872,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "config languages",
            "submessages": [],
            "timestamp": 1431527825,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/05023e2779bfc2793d79ee30c81af6ca291539ce?x=x&version=1",
            "client": "website",
            "content": "<p>which is fine for top-level values, but what if you want the field of some object?</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 39478392,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "jordanorelli@gmail.com",
            "sender_full_name": "Jordan Orelli (F'11)",
            "sender_id": 872,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "config languages",
            "submessages": [],
            "timestamp": 1431527835,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/1380ded36dafac0d6f808b9b7b6c4e85266428a1?x=x&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>Why not make an exported type named <code>Configuration</code> for users of your Go program or library?</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 39493479,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "travis@mcdem.us",
            "sender_full_name": "Travis McDemus (S'13)",
            "sender_id": 2139,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "config languages",
            "submessages": [],
            "timestamp": 1431544311,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/1380ded36dafac0d6f808b9b7b6c4e85266428a1?x=x&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<div class=\"codehilite\"><pre>ed cmd/stagingserver.go\na\npackage main\n\nimport (\n    &quot;example.com/webserver&quot;\n)\n\nfunc main() {\n    config := webserver.Configuration{\n        hostname: &quot;staging.example.com&quot;,\n        Bells: true,\n        Whistles: true,\n    }\n    webserver.ListenAndServe(config)\n}\n.\nwq\n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 39493526,
            "is_me_message": false,
            "last_edit_timestamp": 1431544612,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "travis@mcdem.us",
            "sender_full_name": "Travis McDemus (S'13)",
            "sender_id": 2139,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "config languages",
            "submessages": [],
            "timestamp": 1431544331,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/05023e2779bfc2793d79ee30c81af6ca291539ce?x=x&version=1",
            "client": "website",
            "content": "<p>it's a little too globally stateful to do it that way</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 39493577,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "jordanorelli@gmail.com",
            "sender_full_name": "Jordan Orelli (F'11)",
            "sender_id": 872,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "config languages",
            "submessages": [],
            "timestamp": 1431544386,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/05023e2779bfc2793d79ee30c81af6ca291539ce?x=x&version=1",
            "client": "website",
            "content": "<p>if you had to load more than one configuration it'd be real extra weird.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 39493593,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "jordanorelli@gmail.com",
            "sender_full_name": "Jordan Orelli (F'11)",
            "sender_id": 872,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "config languages",
            "submessages": [],
            "timestamp": 1431544401,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/05023e2779bfc2793d79ee30c81af6ca291539ce?x=x&version=1",
            "client": "website",
            "content": "<p><a href=\"https://godoc.org/github.com/jordanorelli/moon/lib#Read\" target=\"_blank\" title=\"https://godoc.org/github.com/jordanorelli/moon/lib#Read\">https://godoc.org/github.com/jordanorelli/moon/lib#Read</a></p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 39493624,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "jordanorelli@gmail.com",
            "sender_full_name": "Jordan Orelli (F'11)",
            "sender_id": 872,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "config languages",
            "submessages": [],
            "timestamp": 1431544427,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/1380ded36dafac0d6f808b9b7b6c4e85266428a1?x=x&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>Unrelated: could all off of these sites and services please start using one blessed uniform markdown syntax? Argh.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 39493639,
            "is_me_message": false,
            "last_edit_timestamp": 1431544528,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "travis@mcdem.us",
            "sender_full_name": "Travis McDemus (S'13)",
            "sender_id": 2139,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "config languages",
            "submessages": [],
            "timestamp": 1431544442,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/05023e2779bfc2793d79ee30c81af6ca291539ce?x=x&version=1",
            "client": "website",
            "content": "<p>basically you can read something into a moon.Doc struct</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 39493664,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "jordanorelli@gmail.com",
            "sender_full_name": "Jordan Orelli (F'11)",
            "sender_id": 872,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "config languages",
            "submessages": [],
            "timestamp": 1431544447,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/05023e2779bfc2793d79ee30c81af6ca291539ce?x=x&version=1",
            "client": "website",
            "content": "<p>and that's a parse tree</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 39493670,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "jordanorelli@gmail.com",
            "sender_full_name": "Jordan Orelli (F'11)",
            "sender_id": 872,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "config languages",
            "submessages": [],
            "timestamp": 1431544450,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/05023e2779bfc2793d79ee30c81af6ca291539ce?x=x&version=1",
            "client": "website",
            "content": "<p>and then you can say doc.Fill(&amp;config)</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 39493686,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "jordanorelli@gmail.com",
            "sender_full_name": "Jordan Orelli (F'11)",
            "sender_id": 872,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "config languages",
            "submessages": [],
            "timestamp": 1431544457,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/05023e2779bfc2793d79ee30c81af6ca291539ce?x=x&version=1",
            "client": "website",
            "content": "<p>and it'll use reflection and the struct tags to fill in the config object based on the items in the document</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 39493709,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "jordanorelli@gmail.com",
            "sender_full_name": "Jordan Orelli (F'11)",
            "sender_id": 872,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "config languages",
            "submessages": [],
            "timestamp": 1431544475,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/1380ded36dafac0d6f808b9b7b6c4e85266428a1?x=x&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>Hmm, I think I understand that concern. </p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 39493711,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "travis@mcdem.us",
            "sender_full_name": "Travis McDemus (S'13)",
            "sender_id": 2139,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "config languages",
            "submessages": [],
            "timestamp": 1431544476,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/05023e2779bfc2793d79ee30c81af6ca291539ce?x=x&version=1",
            "client": "website",
            "content": "<p>but you can still query the document dynamically if you want</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 39493716,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "jordanorelli@gmail.com",
            "sender_full_name": "Jordan Orelli (F'11)",
            "sender_id": 872,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "config languages",
            "submessages": [],
            "timestamp": 1431544482,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/05023e2779bfc2793d79ee30c81af6ca291539ce?x=x&version=1",
            "client": "website",
            "content": "<p>e.g., with doc.Get(&amp;target): <a href=\"https://godoc.org/github.com/jordanorelli/moon/lib#Doc.Get\" target=\"_blank\" title=\"https://godoc.org/github.com/jordanorelli/moon/lib#Doc.Get\">https://godoc.org/github.com/jordanorelli/moon/lib#Doc.Get</a></p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 39493727,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "jordanorelli@gmail.com",
            "sender_full_name": "Jordan Orelli (F'11)",
            "sender_id": 872,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "config languages",
            "submessages": [],
            "timestamp": 1431544500,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/05023e2779bfc2793d79ee30c81af6ca291539ce?x=x&version=1",
            "client": "website",
            "content": "<p>err, more like doc.Get(\"people/1/age\", &amp;age)</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 39493743,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "jordanorelli@gmail.com",
            "sender_full_name": "Jordan Orelli (F'11)",
            "sender_id": 872,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "config languages",
            "submessages": [],
            "timestamp": 1431544520,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/05023e2779bfc2793d79ee30c81af6ca291539ce?x=x&version=1",
            "client": "website",
            "content": "<p>or something similar</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 39493746,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "jordanorelli@gmail.com",
            "sender_full_name": "Jordan Orelli (F'11)",
            "sender_id": 872,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "config languages",
            "submessages": [],
            "timestamp": 1431544522,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/05023e2779bfc2793d79ee30c81af6ca291539ce?x=x&version=1",
            "client": "website",
            "content": "<p>but it's pretty weird</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 39493750,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "jordanorelli@gmail.com",
            "sender_full_name": "Jordan Orelli (F'11)",
            "sender_id": 872,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "config languages",
            "submessages": [],
            "timestamp": 1431544526,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/05023e2779bfc2793d79ee30c81af6ca291539ce?x=x&version=1",
            "client": "website",
            "content": "<p>the client API is mostly garbage right now.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 39493761,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "jordanorelli@gmail.com",
            "sender_full_name": "Jordan Orelli (F'11)",
            "sender_id": 872,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "config languages",
            "submessages": [],
            "timestamp": 1431544534,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/05023e2779bfc2793d79ee30c81af6ca291539ce?x=x&version=1",
            "client": "website",
            "content": "<p>it's basically whatever i could get working that had the parts that i needed</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 39493833,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "jordanorelli@gmail.com",
            "sender_full_name": "Jordan Orelli (F'11)",
            "sender_id": 872,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "config languages",
            "submessages": [],
            "timestamp": 1431544586,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/05023e2779bfc2793d79ee30c81af6ca291539ce?x=x&version=1",
            "client": "website",
            "content": "<p>that stuff will probably be completely different by the time it's ready to be stabilized</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 39493854,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "jordanorelli@gmail.com",
            "sender_full_name": "Jordan Orelli (F'11)",
            "sender_id": 872,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "config languages",
            "submessages": [],
            "timestamp": 1431544609,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/1380ded36dafac0d6f808b9b7b6c4e85266428a1?x=x&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>Hmm. </p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 39493939,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "travis@mcdem.us",
            "sender_full_name": "Travis McDemus (S'13)",
            "sender_id": 2139,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "config languages",
            "submessages": [],
            "timestamp": 1431544686,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/1380ded36dafac0d6f808b9b7b6c4e85266428a1?x=x&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>OK, but why not have one main.go per configuration? e.g. run each of The Things as separate processes, etc. </p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 39493978,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "travis@mcdem.us",
            "sender_full_name": "Travis McDemus (S'13)",
            "sender_id": 2139,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "config languages",
            "submessages": [],
            "timestamp": 1431544720,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/05023e2779bfc2793d79ee30c81af6ca291539ce?x=x&version=1",
            "client": "website",
            "content": "<p>eh?  it's supposed to be embedded</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 39494035,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "jordanorelli@gmail.com",
            "sender_full_name": "Jordan Orelli (F'11)",
            "sender_id": 872,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "config languages",
            "submessages": [],
            "timestamp": 1431544792,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/05023e2779bfc2793d79ee30c81af6ca291539ce?x=x&version=1",
            "client": "website",
            "content": "<p>it replaces flag</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 39494040,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "jordanorelli@gmail.com",
            "sender_full_name": "Jordan Orelli (F'11)",
            "sender_id": 872,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "config languages",
            "submessages": [],
            "timestamp": 1431544796,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/05023e2779bfc2793d79ee30c81af6ca291539ce?x=x&version=1",
            "client": "website",
            "content": "<p>oh you mean like, enforce \"only one config file per main.go\"?</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 39494115,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "jordanorelli@gmail.com",
            "sender_full_name": "Jordan Orelli (F'11)",
            "sender_id": 872,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "config languages",
            "submessages": [],
            "timestamp": 1431544838,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/05023e2779bfc2793d79ee30c81af6ca291539ce?x=x&version=1",
            "client": "website",
            "content": "<p>eh, i want to figure out a way to support config directories</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 39494127,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "jordanorelli@gmail.com",
            "sender_full_name": "Jordan Orelli (F'11)",
            "sender_id": 872,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "config languages",
            "submessages": [],
            "timestamp": 1431544858,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/1380ded36dafac0d6f808b9b7b6c4e85266428a1?x=x&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>Right, the idea with the Configuration type is that a \"main\" function could use the flag module to take files off of the command line, populate a Configuration type, and then pass it to a constructor or runner function for the package that Does The Thing. </p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 39494132,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "travis@mcdem.us",
            "sender_full_name": "Travis McDemus (S'13)",
            "sender_id": 2139,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "config languages",
            "submessages": [],
            "timestamp": 1431544863,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/1380ded36dafac0d6f808b9b7b6c4e85266428a1?x=x&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>Or you could just declare Configuration instances inline and pass them along to the constructor or runner function itself.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 39494176,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "travis@mcdem.us",
            "sender_full_name": "Travis McDemus (S'13)",
            "sender_id": 2139,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "config languages",
            "submessages": [],
            "timestamp": 1431544907,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/1380ded36dafac0d6f808b9b7b6c4e85266428a1?x=x&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>e.g. the golang file with main() function *is* the configuration file. </p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 39494215,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "travis@mcdem.us",
            "sender_full_name": "Travis McDemus (S'13)",
            "sender_id": 2139,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "config languages",
            "submessages": [],
            "timestamp": 1431544929,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/05023e2779bfc2793d79ee30c81af6ca291539ce?x=x&version=1",
            "client": "website",
            "content": "<p>i'm confused as to how this would look</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 39494293,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "jordanorelli@gmail.com",
            "sender_full_name": "Jordan Orelli (F'11)",
            "sender_id": 872,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "config languages",
            "submessages": [],
            "timestamp": 1431545008,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/05023e2779bfc2793d79ee30c81af6ca291539ce?x=x&version=1",
            "client": "website",
            "content": "<p>i don't really understand tbh</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 39494295,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "jordanorelli@gmail.com",
            "sender_full_name": "Jordan Orelli (F'11)",
            "sender_id": 872,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "config languages",
            "submessages": [],
            "timestamp": 1431545011,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/1380ded36dafac0d6f808b9b7b6c4e85266428a1?x=x&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>Hmm, 1 sec.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 39494302,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "travis@mcdem.us",
            "sender_full_name": "Travis McDemus (S'13)",
            "sender_id": 2139,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "config languages",
            "submessages": [],
            "timestamp": 1431545019,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/05023e2779bfc2793d79ee30c81af6ca291539ce?x=x&version=1",
            "client": "website",
            "content": "<p>can you gist an example?</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 39494305,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "jordanorelli@gmail.com",
            "sender_full_name": "Jordan Orelli (F'11)",
            "sender_id": 872,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "config languages",
            "submessages": [],
            "timestamp": 1431545021,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/1380ded36dafac0d6f808b9b7b6c4e85266428a1?x=x&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>Yeah, I'm trying to code one to see if something in <code>flag</code> works the way I think it does. </p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 39494501,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "travis@mcdem.us",
            "sender_full_name": "Travis McDemus (S'13)",
            "sender_id": 2139,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "config languages",
            "submessages": [],
            "timestamp": 1431545215,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/05023e2779bfc2793d79ee30c81af6ca291539ce?x=x&version=1",
            "client": "website",
            "content": "<p>oh it doesn't matter if the thing you write runs or not</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 39495063,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "jordanorelli@gmail.com",
            "sender_full_name": "Jordan Orelli (F'11)",
            "sender_id": 872,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "config languages",
            "submessages": [],
            "timestamp": 1431545736,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/05023e2779bfc2793d79ee30c81af6ca291539ce?x=x&version=1",
            "client": "website",
            "content": "<p>just as long as it describes how the user would invoke the idealized API</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 39495081,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "jordanorelli@gmail.com",
            "sender_full_name": "Jordan Orelli (F'11)",
            "sender_id": 872,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "config languages",
            "submessages": [],
            "timestamp": 1431545757,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/1380ded36dafac0d6f808b9b7b6c4e85266428a1?x=x&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p><a href=\"https://gist.github.com/aoeu/ef4cb1e468598ba1b28e\" target=\"_blank\" title=\"https://gist.github.com/aoeu/ef4cb1e468598ba1b28e\">https://gist.github.com/aoeu/ef4cb1e468598ba1b28e</a></p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 39496115,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "travis@mcdem.us",
            "sender_full_name": "Travis McDemus (S'13)",
            "sender_id": 2139,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "config languages",
            "submessages": [],
            "timestamp": 1431546716,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/1380ded36dafac0d6f808b9b7b6c4e85266428a1?x=x&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>The idea there is: lots of tiny, simple main functions that just configure The Thing and Do The Thing.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 39496184,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "travis@mcdem.us",
            "sender_full_name": "Travis McDemus (S'13)",
            "sender_id": 2139,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "config languages",
            "submessages": [],
            "timestamp": 1431546772,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/1380ded36dafac0d6f808b9b7b6c4e85266428a1?x=x&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>Type safety since you know that the Configuration struct is specific to the package (and might have test coverage, etc.)</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 39496205,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "travis@mcdem.us",
            "sender_full_name": "Travis McDemus (S'13)",
            "sender_id": 2139,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "config languages",
            "submessages": [],
            "timestamp": 1431546809,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/1380ded36dafac0d6f808b9b7b6c4e85266428a1?x=x&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>The Configuration field of the Thing is not exported, the intention being that only the application can alter its settings in a controlled way once it is started.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 39496260,
            "is_me_message": false,
            "last_edit_timestamp": 1431546876,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "travis@mcdem.us",
            "sender_full_name": "Travis McDemus (S'13)",
            "sender_id": 2139,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "config languages",
            "submessages": [],
            "timestamp": 1431546861,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/1380ded36dafac0d6f808b9b7b6c4e85266428a1?x=x&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>And then you can wrap all of that and handle the flags in a separate helper function. </p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 39496291,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "travis@mcdem.us",
            "sender_full_name": "Travis McDemus (S'13)",
            "sender_id": 2139,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "config languages",
            "submessages": [],
            "timestamp": 1431546918,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/1380ded36dafac0d6f808b9b7b6c4e85266428a1?x=x&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>Disclaimer: I actually got the idea of a configuration struct type from *you* not too long ago and I've been doing that since. ;)</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 39496337,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "travis@mcdem.us",
            "sender_full_name": "Travis McDemus (S'13)",
            "sender_id": 2139,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "config languages",
            "submessages": [],
            "timestamp": 1431546967,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/1380ded36dafac0d6f808b9b7b6c4e85266428a1?x=x&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>(That was in the context of passing a  set of command line flags around.)</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 39496379,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "travis@mcdem.us",
            "sender_full_name": "Travis McDemus (S'13)",
            "sender_id": 2139,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "config languages",
            "submessages": [],
            "timestamp": 1431547021,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/05023e2779bfc2793d79ee30c81af6ca291539ce?x=x&version=1",
            "client": "website",
            "content": "<p>oh but the idea is that you can override the options on the command line</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 39496840,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "jordanorelli@gmail.com",
            "sender_full_name": "Jordan Orelli (F'11)",
            "sender_id": 872,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "config languages",
            "submessages": [],
            "timestamp": 1431547599,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/05023e2779bfc2793d79ee30c81af6ca291539ce?x=x&version=1",
            "client": "website",
            "content": "<p>and have many configs for the same program if you need to</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 39496844,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "jordanorelli@gmail.com",
            "sender_full_name": "Jordan Orelli (F'11)",
            "sender_id": 872,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "config languages",
            "submessages": [],
            "timestamp": 1431547605,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/05023e2779bfc2793d79ee30c81af6ca291539ce?x=x&version=1",
            "client": "website",
            "content": "<p>that is, the idea is to have as *few* binaries as possible.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 39496847,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "jordanorelli@gmail.com",
            "sender_full_name": "Jordan Orelli (F'11)",
            "sender_id": 872,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "config languages",
            "submessages": [],
            "timestamp": 1431547619,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/4caef236e2bd75fb71e3235d4ae0098d135a6bdf?x=x&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>I've decided to use today to build a simple gossip protocol simulator for describing cluster membership. In other words, a healthcheck system. I'll starting with a naive heartbeat implementation then moving towards implementing SWIM: <a href=\"http://www.cs.cornell.edu/~asdas/research/dsn02-SWIM.pdf\" target=\"_blank\" title=\"http://www.cs.cornell.edu/~asdas/research/dsn02-SWIM.pdf\">http://www.cs.cornell.edu/~asdas/research/dsn02-SWIM.pdf</a></p>\n<p>I'll likely need help with go's API and syntax, so if this sounds up your alley and you wanna pair, let me know.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 39544237,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "chenmonitor@gmail.com",
            "sender_full_name": "Chen Lin (W'14)",
            "sender_id": 4992,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "Implementing a gossip protocol",
            "submessages": [],
            "timestamp": 1431607572,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/4caef236e2bd75fb71e3235d4ae0098d135a6bdf?x=x&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p><span class=\"user-mention\" data-user-email=\"aditya@adityamukerjee.net\">@Aditya Mukerjee (SP1'15)</span> sound appealing?</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 39544261,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "chenmonitor@gmail.com",
            "sender_full_name": "Chen Lin (W'14)",
            "sender_id": 4992,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "Implementing a gossip protocol",
            "submessages": [],
            "timestamp": 1431607621,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/1380ded36dafac0d6f808b9b7b6c4e85266428a1?x=x&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>Yeah, I wasn't thinking from that direction, and I can think of a bunch of use cases. I mulled over and brainstormed a bunch of other stuff, but I want to pick your brain / get feedback about that over beer instead of over Zulip sometime - bits of it are way too philosophical / tangential (but neat).</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 39551205,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "travis@mcdem.us",
            "sender_full_name": "Travis McDemus (S'13)",
            "sender_id": 2139,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "config languages",
            "submessages": [],
            "timestamp": 1431615173,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/1380ded36dafac0d6f808b9b7b6c4e85266428a1?x=x&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>But rewinding back, yeah, I've been landing on the above and JSON for configuration. And moon might be a lot quicker than the JSON.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 39551241,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "travis@mcdem.us",
            "sender_full_name": "Travis McDemus (S'13)",
            "sender_id": 2139,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "config languages",
            "submessages": [],
            "timestamp": 1431615219,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/1380ded36dafac0d6f808b9b7b6c4e85266428a1?x=x&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>On numbers: I don't know. ints and floats seem safe to start with.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 39551300,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "travis@mcdem.us",
            "sender_full_name": "Travis McDemus (S'13)",
            "sender_id": 2139,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "config languages",
            "submessages": [],
            "timestamp": 1431615257,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/1380ded36dafac0d6f808b9b7b6c4e85266428a1?x=x&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>On bare strings: escape characters, often in regex, still trip me up. <code>:</code> might be good to *not* escape for server-ports (e.g. we see <code>:8080</code> and the like used sometimes in golang tools)</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 39551361,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "travis@mcdem.us",
            "sender_full_name": "Travis McDemus (S'13)",
            "sender_id": 2139,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "config languages",
            "submessages": [],
            "timestamp": 1431615344,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/1380ded36dafac0d6f808b9b7b6c4e85266428a1?x=x&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>On variables: I think that makes sense based on the little I know from <code>css</code> and <code>sass</code> /  <code>scss</code>.  I'd avoid including any sort of \"expressions\" or conditional logic to set them. (I beleive expressions would create a lot of other problems, but that's a tangent for another time.)</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 39551553,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "travis@mcdem.us",
            "sender_full_name": "Travis McDemus (S'13)",
            "sender_id": 2139,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "config languages",
            "submessages": [],
            "timestamp": 1431615530,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/1380ded36dafac0d6f808b9b7b6c4e85266428a1?x=x&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>On hidden variables: I m not sure I understand that one.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 39551565,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "travis@mcdem.us",
            "sender_full_name": "Travis McDemus (S'13)",
            "sender_id": 2139,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "config languages",
            "submessages": [],
            "timestamp": 1431615548,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/1380ded36dafac0d6f808b9b7b6c4e85266428a1?x=x&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>On command line tools: Yes. Yes. Yes.  A formatter or vetter would be incredibly useful. It'd be nice to have one that *tries* to format bad input despite syntax errors. (Compare <code>python -m json.tool</code> and <code>http://jsonlint.com</code>)</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 39551825,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "travis@mcdem.us",
            "sender_full_name": "Travis McDemus (S'13)",
            "sender_id": 2139,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "config languages",
            "submessages": [],
            "timestamp": 1431615750,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/0a35beaf5a354dafdf10494c0313e10fffc154fd?x=x&version=1",
            "client": "website",
            "content": "<p>given the string <code>\"This SKU cannot be used to create an order: sku_6EbER3uYD3r5mP is out of stock\"</code>, i wanna get the sku (always of the form <code>sku_asdfg2345</code>) out of it. what do folks think is the most idiomatic way of doing this? i can imagine looking for the index of <code>sku_</code> and the next space after and taking the substring, replacing the string before and the string after with \"\", using split funcs... and of course, regex (overkill?)--thoughts?</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 39603110,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "maia.mcc@gmail.com",
            "sender_full_name": "Maia McCormick (she) (S2'14)",
            "sender_id": 6175,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "getting stuff from strings",
            "submessages": [],
            "timestamp": 1431702773,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/61f7402a76ff0aff964da46bd7948ca20279ae1f?x=x&version=1",
            "client": "website",
            "content": "<p>the way I would do it is to iterate on the string until you get <code>sku....</code> as the startposition and then continue upto the first space which would be the endposition, then <code>substring := [startpos:endpos]</code></p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 39603596,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "waldemar.quevedo@gmail.com",
            "sender_full_name": "Waldemar Quevedo (F2'14)",
            "sender_id": 6706,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "getting stuff from strings",
            "submessages": [],
            "timestamp": 1431703550,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/5d46121e9a899e151cfcd0e59aa9e9f8a78989e8?x=x&version=1",
            "client": "desktop app Linux 0.4.4",
            "content": "<p>TBH I'd just use a regex, but that's just me</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 39603832,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "aditya@adityamukerjee.net",
            "sender_full_name": "Aditya Mukerjee (he) (SP1'15)",
            "sender_id": 7644,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "getting stuff from strings",
            "submessages": [],
            "timestamp": 1431703920,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/5d46121e9a899e151cfcd0e59aa9e9f8a78989e8?x=x&version=1",
            "client": "desktop app Linux 0.4.4",
            "content": "<p>also, use strings.Index instead of iterating</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 39603881,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "aditya@adityamukerjee.net",
            "sender_full_name": "Aditya Mukerjee (he) (SP1'15)",
            "sender_id": 7644,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "getting stuff from strings",
            "submessages": [],
            "timestamp": 1431703949,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/0a35beaf5a354dafdf10494c0313e10fffc154fd?x=x&version=1",
            "client": "website",
            "content": "<p>i mean, so it ended up as:</p>\n<div class=\"codehilite\"><pre><span class=\"n\">startIndex</span> <span class=\"p\">:=</span> <span class=\"n\">strings</span><span class=\"p\">.</span><span class=\"n\">Index</span><span class=\"p\">(</span><span class=\"n\">sor</span><span class=\"p\">.</span><span class=\"n\">Error</span><span class=\"p\">.</span><span class=\"n\">Message</span><span class=\"p\">,</span> <span class=\"s\">&quot;sku_&quot;</span><span class=\"p\">)</span>\n<span class=\"n\">endIndex</span> <span class=\"p\">:=</span> <span class=\"n\">strings</span><span class=\"p\">.</span><span class=\"n\">Index</span><span class=\"p\">(</span><span class=\"n\">sor</span><span class=\"p\">.</span><span class=\"n\">Error</span><span class=\"p\">.</span><span class=\"n\">Message</span><span class=\"p\">[</span><span class=\"n\">startIndex</span><span class=\"p\">:],</span> <span class=\"s\">&quot; &quot;</span><span class=\"p\">)</span>\n<span class=\"n\">variant</span> <span class=\"p\">:=</span> <span class=\"n\">sor</span><span class=\"p\">.</span><span class=\"n\">Error</span><span class=\"p\">.</span><span class=\"n\">Message</span><span class=\"p\">[</span><span class=\"n\">startIndex</span> <span class=\"p\">:</span> <span class=\"n\">startIndex</span><span class=\"p\">+</span><span class=\"n\">endIndex</span><span class=\"p\">]</span>\n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 39604022,
            "is_me_message": false,
            "last_edit_timestamp": 1431704181,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "maia.mcc@gmail.com",
            "sender_full_name": "Maia McCormick (she) (S2'14)",
            "sender_id": 6175,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "getting stuff from strings",
            "submessages": [],
            "timestamp": 1431704166,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/0a35beaf5a354dafdf10494c0313e10fffc154fd?x=x&version=1",
            "client": "website",
            "content": "<p>idiomatic?</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 39604044,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "maia.mcc@gmail.com",
            "sender_full_name": "Maia McCormick (she) (S2'14)",
            "sender_id": 6175,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "getting stuff from strings",
            "submessages": [],
            "timestamp": 1431704192,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/f6bd929465d6d225def8062d5a9d3f3f?d=identicon&version=1",
            "client": "website",
            "content": "<p>Like <span class=\"user-mention\" data-user-email=\"aditya@adityamukerjee.net\">@Aditya Mukerjee (SP1'15)</span> , I'd be inclined to use a regex, but I  know that if I did that at Google and had it code reviewed by one of the Go \"readability\" review committee members, I'd get dinged for using a regex where something simpler would suffice. They're not dogmatic about it and I was always able to push back on that in cases where I thought it made sense, but I do think that the core Go folks perfer to avoid regexes if at all possible.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 39604775,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "danluu@gmail.com",
            "sender_full_name": "Dan Luu (W'13)",
            "sender_id": 820,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "getting stuff from strings",
            "submessages": [],
            "timestamp": 1431705304,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/5d46121e9a899e151cfcd0e59aa9e9f8a78989e8?x=x&version=1",
            "client": "desktop app Linux 0.4.4",
            "content": "<p><span class=\"user-mention\" data-user-email=\"danluu@gmail.com\">@Dan Luu (W'13)</span> did you write Go at Google? I didn't know that!</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 39605178,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "aditya@adityamukerjee.net",
            "sender_full_name": "Aditya Mukerjee (he) (SP1'15)",
            "sender_id": 7644,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "getting stuff from strings",
            "submessages": [],
            "timestamp": 1431705906,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/f6bd929465d6d225def8062d5a9d3f3f?d=identicon&version=1",
            "client": "website",
            "content": "<p>Not for serious stuff, just for scripts and stuff, so I never really learned how to write proper Go. There was as ton of stuff that hardware people normally do in perl that we did in Go instead, and if you don't have readability approval, your CLs (PRs, basically) have to go into some queue where some official readability reviewer will look at your code and make comments.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 39605267,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "danluu@gmail.com",
            "sender_full_name": "Dan Luu (W'13)",
            "sender_id": 820,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "getting stuff from strings",
            "submessages": [],
            "timestamp": 1431706042,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/f6bd929465d6d225def8062d5a9d3f3f?d=identicon&version=1",
            "client": "website",
            "content": "<p>So, it was pretty nice to get feedback on that, but I only got feedback on a verrryyyy limited subset of Go.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 39605276,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "danluu@gmail.com",
            "sender_full_name": "Dan Luu (W'13)",
            "sender_id": 820,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "getting stuff from strings",
            "submessages": [],
            "timestamp": 1431706074,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/5d46121e9a899e151cfcd0e59aa9e9f8a78989e8?x=x&version=1",
            "client": "desktop app Linux 0.4.4",
            "content": "<p>readability approval?</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 39605341,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "aditya@adityamukerjee.net",
            "sender_full_name": "Aditya Mukerjee (he) (SP1'15)",
            "sender_id": 7644,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "getting stuff from strings",
            "submessages": [],
            "timestamp": 1431706158,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/f6bd929465d6d225def8062d5a9d3f3f?d=identicon&version=1",
            "client": "website",
            "content": "<p>Oh, yeah! So, to submit any CL without some kind of emergency override, either the author or at least one of the reviewers needs to have \"readability\" in the language that's used.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 39605346,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "danluu@gmail.com",
            "sender_full_name": "Dan Luu (W'13)",
            "sender_id": 820,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "getting stuff from strings",
            "submessages": [],
            "timestamp": 1431706190,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/f6bd929465d6d225def8062d5a9d3f3f?d=identicon&version=1",
            "client": "website",
            "content": "<p>For most languages, the process is very heavyweight, but Go has a really simple process where as long as you don't have readability you're supposed to just put your CLs into this queue, where you'll get feedback/corrections/comments from a randomly assigned person on the approval committee.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 39605396,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "danluu@gmail.com",
            "sender_full_name": "Dan Luu (W'13)",
            "sender_id": 820,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "getting stuff from strings",
            "submessages": [],
            "timestamp": 1431706239,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/f6bd929465d6d225def8062d5a9d3f3f?d=identicon&version=1",
            "client": "website",
            "content": "<p>And after N CLs with no substantive comments you're granted \"readability\" and it's assumed that you know how to write idiomatic code, etc.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 39605402,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "danluu@gmail.com",
            "sender_full_name": "Dan Luu (W'13)",
            "sender_id": 820,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "getting stuff from strings",
            "submessages": [],
            "timestamp": 1431706264,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/f6bd929465d6d225def8062d5a9d3f3f?d=identicon&version=1",
            "client": "website",
            "content": "<p>But... since all my CLs were dumb scripting things, I don't actually know how to write idiomatic Go! If I wrote Go for a real software project I would have asked to have my readability approval revoked so I could get feedback on a wider variety of Go code.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 39605416,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "danluu@gmail.com",
            "sender_full_name": "Dan Luu (W'13)",
            "sender_id": 820,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "getting stuff from strings",
            "submessages": [],
            "timestamp": 1431706309,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/f6bd929465d6d225def8062d5a9d3f3f?d=identicon&version=1",
            "client": "website",
            "content": "<p>In retrospect, I should have forked this into another stream. Sorry!</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 39605490,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "danluu@gmail.com",
            "sender_full_name": "Dan Luu (W'13)",
            "sender_id": 820,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "getting stuff from strings",
            "submessages": [],
            "timestamp": 1431706442,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/5d46121e9a899e151cfcd0e59aa9e9f8a78989e8?x=x&version=1",
            "client": "desktop app Linux 0.4.4",
            "content": "<p>that's cool to know, very interesting</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 39605530,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "aditya@adityamukerjee.net",
            "sender_full_name": "Aditya Mukerjee (he) (SP1'15)",
            "sender_id": 7644,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "getting stuff from strings",
            "submessages": [],
            "timestamp": 1431706466,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/a179bb8c3fc4ab0975954f57d47fa6c53a8c2dad?x=x&version=2",
            "client": "website",
            "content": "<p>+1 to regexp</p>\n<div class=\"codehilite\"><pre>s := &quot;This SKU cannot be used to create an order: sku_6EbER3uYD3r5mP is out of stock&quot;\nfmt.Println(regexp.MustCompile(&quot;sku_\\\\w+&quot;).FindString(s))\n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 39606202,
            "is_me_message": false,
            "last_edit_timestamp": 1431707632,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "jay@jayschwa.net",
            "sender_full_name": "Jay Weisskopf Petacat (W2'17)",
            "sender_id": 829,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "getting stuff from strings",
            "submessages": [],
            "timestamp": 1431707609,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/05023e2779bfc2793d79ee30c81af6ca291539ce?x=x&version=1",
            "client": "website",
            "content": "<p>The argument against using a regex is fundamentally that a regex is not cpu optimal.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 39617691,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "jordanorelli@gmail.com",
            "sender_full_name": "Jordan Orelli (F'11)",
            "sender_id": 872,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "getting stuff from strings",
            "submessages": [],
            "timestamp": 1431725286,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/05023e2779bfc2793d79ee30c81af6ca291539ce?x=x&version=1",
            "client": "website",
            "content": "<p>you may not care.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 39617697,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "jordanorelli@gmail.com",
            "sender_full_name": "Jordan Orelli (F'11)",
            "sender_id": 872,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "getting stuff from strings",
            "submessages": [],
            "timestamp": 1431725288,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/05023e2779bfc2793d79ee30c81af6ca291539ce?x=x&version=1",
            "client": "website",
            "content": "<p>effectively, the argument that rob pike makes, and that is espoused by the Go community, is that a regex is useful if the pattern to be searched is not known until runtime</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 39617716,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "jordanorelli@gmail.com",
            "sender_full_name": "Jordan Orelli (F'11)",
            "sender_id": 872,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "getting stuff from strings",
            "submessages": [],
            "timestamp": 1431725317,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/05023e2779bfc2793d79ee30c81af6ca291539ce?x=x&version=1",
            "client": "website",
            "content": "<p>if the requirements are static, then the machinery of a regex is more than you need.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 39617724,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "jordanorelli@gmail.com",
            "sender_full_name": "Jordan Orelli (F'11)",
            "sender_id": 872,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "getting stuff from strings",
            "submessages": [],
            "timestamp": 1431725330,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/05023e2779bfc2793d79ee30c81af6ca291539ce?x=x&version=1",
            "client": "website",
            "content": "<p><a href=\"http://commandcenter.blogspot.com/2011/08/regular-expressions-in-lexing-and.html\" target=\"_blank\" title=\"http://commandcenter.blogspot.com/2011/08/regular-expressions-in-lexing-and.html\">http://commandcenter.blogspot.com/2011/08/regular-expressions-in-lexing-and.html</a> &lt;-- he talks about a similar notion here.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 39617727,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "jordanorelli@gmail.com",
            "sender_full_name": "Jordan Orelli (F'11)",
            "sender_id": 872,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "getting stuff from strings",
            "submessages": [],
            "timestamp": 1431725338,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/05023e2779bfc2793d79ee30c81af6ca291539ce?x=x&version=1",
            "client": "website",
            "content": "<p>but in reality, if you're working on something that's fundamentally i/o bound and you don't really care about your CPU usage anyway, just use a regex.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 39617734,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "jordanorelli@gmail.com",
            "sender_full_name": "Jordan Orelli (F'11)",
            "sender_id": 872,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "getting stuff from strings",
            "submessages": [],
            "timestamp": 1431725357,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/05023e2779bfc2793d79ee30c81af6ca291539ce?x=x&version=1",
            "client": "website",
            "content": "<p>yeah.  it depends on the context.  i'm not sure what i'd do here.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 39617905,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "jordanorelli@gmail.com",
            "sender_full_name": "Jordan Orelli (F'11)",
            "sender_id": 872,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "getting stuff from strings",
            "submessages": [],
            "timestamp": 1431725637,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/05023e2779bfc2793d79ee30c81af6ca291539ce?x=x&version=1",
            "client": "website",
            "content": "<p>i'm curious ... do you have some value of <code>error</code> type?</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 39617949,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "jordanorelli@gmail.com",
            "sender_full_name": "Jordan Orelli (F'11)",
            "sender_id": 872,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "getting stuff from strings",
            "submessages": [],
            "timestamp": 1431725658,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/05023e2779bfc2793d79ee30c81af6ca291539ce?x=x&version=1",
            "client": "website",
            "content": "<p>it's perfectly normal to do something like this:</p>\n<div class=\"codehilite\"><pre>type OrderError struct {\n    SKU string\n    Message string\n}\n\nfunc (o OrderError) Error() string {\n    return fmt.Sprintf(&quot;order error with sku %s: %s&quot;, o.SKU, o.Message)\n}\n\n// ...\n\nswitch e := err.(type) {\ncase OrderError:\n    sku := e.SKU\n    // do something with the sku value\ndefault:\n    // do something else\n}    \n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 39617978,
            "is_me_message": false,
            "last_edit_timestamp": 1431725793,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "jordanorelli@gmail.com",
            "sender_full_name": "Jordan Orelli (F'11)",
            "sender_id": 872,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "getting stuff from strings",
            "submessages": [],
            "timestamp": 1431725704,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/05023e2779bfc2793d79ee30c81af6ca291539ce?x=x&version=1",
            "client": "website",
            "content": "<p>(deleted)</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 39617981,
            "is_me_message": false,
            "last_edit_timestamp": 1431725806,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "jordanorelli@gmail.com",
            "sender_full_name": "Jordan Orelli (F'11)",
            "sender_id": 872,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "getting stuff from strings",
            "submessages": [],
            "timestamp": 1431725707,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/05023e2779bfc2793d79ee30c81af6ca291539ce?x=x&version=1",
            "client": "website",
            "content": "<p>(deleted)</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 39617983,
            "is_me_message": false,
            "last_edit_timestamp": 1431725809,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "jordanorelli@gmail.com",
            "sender_full_name": "Jordan Orelli (F'11)",
            "sender_id": 872,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "getting stuff from strings",
            "submessages": [],
            "timestamp": 1431725710,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/05023e2779bfc2793d79ee30c81af6ca291539ce?x=x&version=1",
            "client": "website",
            "content": "<p>but if you're just parsing a log file or something like that ... nvm the error type thing ;)</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 39618054,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "jordanorelli@gmail.com",
            "sender_full_name": "Jordan Orelli (F'11)",
            "sender_id": 872,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "getting stuff from strings",
            "submessages": [],
            "timestamp": 1431725840,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/05023e2779bfc2793d79ee30c81af6ca291539ce?x=x&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"travis@mcdem.us\">@Travis McDemus (S'13)</span> so we have this on like ... hundreds of servers: <a href=\"https://github.com/etsy/logstash-forwarder\" target=\"_blank\" title=\"https://github.com/etsy/logstash-forwarder\">https://github.com/etsy/logstash-forwarder</a></p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 39618062,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "jordanorelli@gmail.com",
            "sender_full_name": "Jordan Orelli (F'11)",
            "sender_id": 872,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "config languages",
            "submessages": [],
            "timestamp": 1431725874,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/05023e2779bfc2793d79ee30c81af6ca291539ce?x=x&version=1",
            "client": "website",
            "content": "<p>but we don't want to require that they all have Go toolchains</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 39618100,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "jordanorelli@gmail.com",
            "sender_full_name": "Jordan Orelli (F'11)",
            "sender_id": 872,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "config languages",
            "submessages": [],
            "timestamp": 1431725888,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/05023e2779bfc2793d79ee30c81af6ca291539ce?x=x&version=1",
            "client": "website",
            "content": "<p>so we just compile it once and rsync the binary every where</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 39618107,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "jordanorelli@gmail.com",
            "sender_full_name": "Jordan Orelli (F'11)",
            "sender_id": 872,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "config languages",
            "submessages": [],
            "timestamp": 1431725896,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/05023e2779bfc2793d79ee30c81af6ca291539ce?x=x&version=1",
            "client": "website",
            "content": "<p>and each machine has its own config file</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 39618112,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "jordanorelli@gmail.com",
            "sender_full_name": "Jordan Orelli (F'11)",
            "sender_id": 872,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "config languages",
            "submessages": [],
            "timestamp": 1431725901,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/05023e2779bfc2793d79ee30c81af6ca291539ce?x=x&version=1",
            "client": "website",
            "content": "<p>which is a json blob</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 39618113,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "jordanorelli@gmail.com",
            "sender_full_name": "Jordan Orelli (F'11)",
            "sender_id": 872,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "config languages",
            "submessages": [],
            "timestamp": 1431725904,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/05023e2779bfc2793d79ee30c81af6ca291539ce?x=x&version=1",
            "client": "website",
            "content": "<p>AND the configs are generated by chef</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 39618120,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "jordanorelli@gmail.com",
            "sender_full_name": "Jordan Orelli (F'11)",
            "sender_id": 872,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "config languages",
            "submessages": [],
            "timestamp": 1431725925,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/05023e2779bfc2793d79ee30c81af6ca291539ce?x=x&version=1",
            "client": "website",
            "content": "<p>having chef generate and then compile a Go program would be an absolute nightmare</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 39618123,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "jordanorelli@gmail.com",
            "sender_full_name": "Jordan Orelli (F'11)",
            "sender_id": 872,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "config languages",
            "submessages": [],
            "timestamp": 1431725933,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/05023e2779bfc2793d79ee30c81af6ca291539ce?x=x&version=1",
            "client": "website",
            "content": "<p>anyway, I added support for heredocs: <a href=\"https://github.com/jordanorelli/moon/blob/e68b241fe4478a2971511b4cd65da80c096f34e5/ex.moon#L73-L89\" target=\"_blank\" title=\"https://github.com/jordanorelli/moon/blob/e68b241fe4478a2971511b4cd65da80c096f34e5/ex.moon#L73-L89\">https://github.com/jordanorelli/moon/blob/e68b241fe4478a2971511b4cd65da80c096f34e5/ex.moon#L73-L89</a></p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 39618136,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "jordanorelli@gmail.com",
            "sender_full_name": "Jordan Orelli (F'11)",
            "sender_id": 872,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "config languages",
            "submessages": [],
            "timestamp": 1431725998,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/05023e2779bfc2793d79ee30c81af6ca291539ce?x=x&version=1",
            "client": "website",
            "content": "<p>at scale, you don't write configuration files by hand.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 39618190,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "jordanorelli@gmail.com",
            "sender_full_name": "Jordan Orelli (F'11)",
            "sender_id": 872,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "config languages",
            "submessages": [],
            "timestamp": 1431726075,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/05023e2779bfc2793d79ee30c81af6ca291539ce?x=x&version=1",
            "client": "website",
            "content": "<p>configuration files are generated by configuration managers.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 39618194,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "jordanorelli@gmail.com",
            "sender_full_name": "Jordan Orelli (F'11)",
            "sender_id": 872,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "config languages",
            "submessages": [],
            "timestamp": 1431726082,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/05023e2779bfc2793d79ee30c81af6ca291539ce?x=x&version=1",
            "client": "website",
            "content": "<p>like chef or puppet or ummmmmmm</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 39618197,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "jordanorelli@gmail.com",
            "sender_full_name": "Jordan Orelli (F'11)",
            "sender_id": 872,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "config languages",
            "submessages": [],
            "timestamp": 1431726088,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/05023e2779bfc2793d79ee30c81af6ca291539ce?x=x&version=1",
            "client": "website",
            "content": "<p>is it ansible that the cool kids are using now?</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 39618198,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "jordanorelli@gmail.com",
            "sender_full_name": "Jordan Orelli (F'11)",
            "sender_id": 872,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "config languages",
            "submessages": [],
            "timestamp": 1431726096,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/05023e2779bfc2793d79ee30c81af6ca291539ce?x=x&version=1",
            "client": "website",
            "content": "<p>i can't keep up.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 39618201,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "jordanorelli@gmail.com",
            "sender_full_name": "Jordan Orelli (F'11)",
            "sender_id": 872,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "config languages",
            "submessages": [],
            "timestamp": 1431726099,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/05023e2779bfc2793d79ee30c81af6ca291539ce?x=x&version=1",
            "client": "website",
            "content": "<p>so part of moon's design goal is that the syntax should be fairly easy to generate from a template language</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 39618235,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "jordanorelli@gmail.com",
            "sender_full_name": "Jordan Orelli (F'11)",
            "sender_id": 872,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "config languages",
            "submessages": [],
            "timestamp": 1431726124,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/05023e2779bfc2793d79ee30c81af6ca291539ce?x=x&version=1",
            "client": "website",
            "content": "<p>since in reality, all of our config files are generated by erb templates</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 39618250,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "jordanorelli@gmail.com",
            "sender_full_name": "Jordan Orelli (F'11)",
            "sender_id": 872,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "config languages",
            "submessages": [],
            "timestamp": 1431726135,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/05023e2779bfc2793d79ee30c81af6ca291539ce?x=x&version=1",
            "client": "website",
            "content": "<p>whose context is provided by application logic and in some cases, json documents</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 39618253,
            "is_me_message": false,
            "last_edit_timestamp": 1431726180,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "jordanorelli@gmail.com",
            "sender_full_name": "Jordan Orelli (F'11)",
            "sender_id": 872,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "config languages",
            "submessages": [],
            "timestamp": 1431726141,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/05023e2779bfc2793d79ee30c81af6ca291539ce?x=x&version=1",
            "client": "website",
            "content": "<p>(deleted)</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 39618254,
            "is_me_message": false,
            "last_edit_timestamp": 1431726189,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "jordanorelli@gmail.com",
            "sender_full_name": "Jordan Orelli (F'11)",
            "sender_id": 872,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "config languages",
            "submessages": [],
            "timestamp": 1431726143,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/61f7402a76ff0aff964da46bd7948ca20279ae1f?x=x&version=1",
            "client": "website",
            "content": "<blockquote>\n<p>anyway, I added support for heredocs</p>\n</blockquote>\n<p>that's awesome,  I believe it will sell like pancakes.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 39623046,
            "is_me_message": false,
            "last_edit_timestamp": 1431735970,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "waldemar.quevedo@gmail.com",
            "sender_full_name": "Waldemar Quevedo (F2'14)",
            "sender_id": 6706,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "config languages",
            "submessages": [],
            "timestamp": 1431735962,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/61f7402a76ff0aff964da46bd7948ca20279ae1f?x=x&version=1",
            "client": "website",
            "content": "<p>also totally agree ---&gt; re: at scale, you don't write configuration files by hand.<br>\nI've noticed that the more at scale you have to get, you tend to use more declarative approaches around orchestrating things since there are so many layers already with things moving around</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 39623172,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "waldemar.quevedo@gmail.com",
            "sender_full_name": "Waldemar Quevedo (F2'14)",
            "sender_id": 6706,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "config languages",
            "submessages": [],
            "timestamp": 1431736202,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/5d46121e9a899e151cfcd0e59aa9e9f8a78989e8?x=x&version=1",
            "client": "desktop app Linux 0.4.4",
            "content": "<p><span class=\"user-mention\" data-user-email=\"jordanorelli@gmail.com\">@Jordan Orelli (F'11)</span> good call on that, I didn't even look at the context for this</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 39713829,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "aditya@adityamukerjee.net",
            "sender_full_name": "Aditya Mukerjee (he) (SP1'15)",
            "sender_id": 7644,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "getting stuff from strings",
            "submessages": [],
            "timestamp": 1431961618,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/5d46121e9a899e151cfcd0e59aa9e9f8a78989e8?x=x&version=1",
            "client": "desktop app Linux 0.4.4",
            "content": "<p><span class=\"user-mention\" data-user-email=\"maia.mcc@gmail.com\">@Maia McCormick (S'14)</span> once you start treating errors as interfaces (which they are), you open the door for a lot of really powerful patterns :)</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 39713855,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "aditya@adityamukerjee.net",
            "sender_full_name": "Aditya Mukerjee (he) (SP1'15)",
            "sender_id": 7644,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "getting stuff from strings",
            "submessages": [],
            "timestamp": 1431961653,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/0a35beaf5a354dafdf10494c0313e10fffc154fd?x=x&version=1",
            "client": "website",
            "content": "<p>my http request just handed me a slice of bytes. i know there's an int I want in there somewhere, but I don't know how to get it out! what do I dooooo??</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 39750848,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "maia.mcc@gmail.com",
            "sender_full_name": "Maia McCormick (she) (S2'14)",
            "sender_id": 6175,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "bytes??",
            "submessages": [],
            "timestamp": 1431998854,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/a179bb8c3fc4ab0975954f57d47fa6c53a8c2dad?x=x&version=2",
            "client": "website",
            "content": "<p>Do you know what the encoding and structure of the payload is?</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 39750911,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "jay@jayschwa.net",
            "sender_full_name": "Jay Weisskopf Petacat (W2'17)",
            "sender_id": 829,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "bytes??",
            "submessages": [],
            "timestamp": 1431998921,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/0a35beaf5a354dafdf10494c0313e10fffc154fd?x=x&version=1",
            "client": "website",
            "content": "<p>...i don't know?</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 39750944,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "maia.mcc@gmail.com",
            "sender_full_name": "Maia McCormick (she) (S2'14)",
            "sender_id": 6175,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "bytes??",
            "submessages": [],
            "timestamp": 1431998989,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/0a35beaf5a354dafdf10494c0313e10fffc154fd?x=x&version=1",
            "client": "website",
            "content": "<div class=\"codehilite\"><pre>PrettyPrint\njello/common/types.(*SecondsFromEpoch).UnmarshalJSON /Users/maiamccormick/code/branded/go/src/jello/common/types/time.go:18\n([]uint8) (len=10 cap=7634) {\n 00000000  31 34 32 39 37 31 38 36  36 31                    |1429718661|\n}\n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 39750948,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "maia.mcc@gmail.com",
            "sender_full_name": "Maia McCormick (she) (S2'14)",
            "sender_id": 6175,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "bytes??",
            "submessages": [],
            "timestamp": 1431998995,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/0a35beaf5a354dafdf10494c0313e10fffc154fd?x=x&version=1",
            "client": "website",
            "content": "<p>that's the info i've got atm, can figure other stuff if you tell me how</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 39750949,
            "is_me_message": false,
            "last_edit_timestamp": 1431999012,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "maia.mcc@gmail.com",
            "sender_full_name": "Maia McCormick (she) (S2'14)",
            "sender_id": 6175,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "bytes??",
            "submessages": [],
            "timestamp": 1431998998,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/0a35beaf5a354dafdf10494c0313e10fffc154fd?x=x&version=1",
            "client": "website",
            "content": "<p>/me is out of her depth and very sleepy</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 39751001,
            "is_me_message": true,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "maia.mcc@gmail.com",
            "sender_full_name": "Maia McCormick (she) (S2'14)",
            "sender_id": 6175,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "bytes??",
            "submessages": [],
            "timestamp": 1431999021,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/0a35beaf5a354dafdf10494c0313e10fffc154fd?x=x&version=1",
            "client": "website",
            "content": "<p>figured it out (with some help from coworkers who know go way better than i do). happy i asked, cuz the answer was down a different path than i expected:</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 39791120,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "maia.mcc@gmail.com",
            "sender_full_name": "Maia McCormick (she) (S2'14)",
            "sender_id": 6175,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "bytes??",
            "submessages": [],
            "timestamp": 1432049934,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/0a35beaf5a354dafdf10494c0313e10fffc154fd?x=x&version=1",
            "client": "website",
            "content": "<p><code>i, err := strconv.Atoi(string(bytes))</code></p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 39791132,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "maia.mcc@gmail.com",
            "sender_full_name": "Maia McCormick (she) (S2'14)",
            "sender_id": 6175,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "bytes??",
            "submessages": [],
            "timestamp": 1432049949,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/5d46121e9a899e151cfcd0e59aa9e9f8a78989e8?x=x&version=1",
            "client": "desktop app Linux 0.4.4",
            "content": "<p><span class=\"user-mention\" data-user-email=\"maia.mcc@gmail.com\">@Maia McCormick (S'14)</span> that apparently works, but that does not sound optimal for what you want</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 39802477,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "aditya@adityamukerjee.net",
            "sender_full_name": "Aditya Mukerjee (he) (SP1'15)",
            "sender_id": 7644,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "bytes??",
            "submessages": [],
            "timestamp": 1432063791,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/5d46121e9a899e151cfcd0e59aa9e9f8a78989e8?x=x&version=1",
            "client": "desktop app Linux 0.4.4",
            "content": "<p>first of all, you may or may not want to look at <code>encoding/binary</code></p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 39802520,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "aditya@adityamukerjee.net",
            "sender_full_name": "Aditya Mukerjee (he) (SP1'15)",
            "sender_id": 7644,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "bytes??",
            "submessages": [],
            "timestamp": 1432063809,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/5d46121e9a899e151cfcd0e59aa9e9f8a78989e8?x=x&version=1",
            "client": "desktop app Linux 0.4.4",
            "content": "<p>converting to a string just to pass into a string-&gt;int conversion function seems wrong to me (style-wise, not logic-wise)</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 39802543,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "aditya@adityamukerjee.net",
            "sender_full_name": "Aditya Mukerjee (he) (SP1'15)",
            "sender_id": 7644,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "bytes??",
            "submessages": [],
            "timestamp": 1432063843,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/b0aaf017ede1c6cd8f546531ead124bbed75fabe?x=x&version=4",
            "client": "website",
            "content": "<p>Slightly new to go.</p>\n<p>I keep reading about the importance of setting up GO directories properly. Still confused by all of it. Is this extremely important or what?</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 40106322,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "brad@isbrad.com",
            "sender_full_name": "Bradley Boccuzzi (he/they) (S1'15)",
            "sender_id": 8094,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "GOPATH",
            "submessages": [],
            "timestamp": 1432680388,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/229e3746f6f5100c1d7d5d7a8a5b82d5?d=identicon&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>\"Extremely important\" is probably too strong</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 40106369,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "nat@natwelch.com",
            "sender_full_name": "Nat Welch (he) (SP2'15)",
            "sender_id": 7866,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "GOPATH",
            "submessages": [],
            "timestamp": 1432680449,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/229e3746f6f5100c1d7d5d7a8a5b82d5?d=identicon&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>but GOPATH is where go searches for libraries</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 40106381,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "nat@natwelch.com",
            "sender_full_name": "Nat Welch (he) (SP2'15)",
            "sender_id": 7866,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "GOPATH",
            "submessages": [],
            "timestamp": 1432680463,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/229e3746f6f5100c1d7d5d7a8a5b82d5?d=identicon&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>so when you run go get, it installs them in GOPATH, which then go build looks in to build your app</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 40106431,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "nat@natwelch.com",
            "sender_full_name": "Nat Welch (he) (SP2'15)",
            "sender_id": 7866,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "GOPATH",
            "submessages": [],
            "timestamp": 1432680489,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/a1d3f5af6ebf01fccd9e772ca2a04ba5?d=identicon&version=1",
            "client": "website",
            "content": "<p>I use <code>GOPATH=~/.go</code>, and put <code>~/.go/bin</code> in my <code>PATH</code>, and that seems to work well.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 40106453,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "ken@kenpratt.net",
            "sender_full_name": "Ken Pratt (he) (SP2'15)",
            "sender_id": 7850,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "GOPATH",
            "submessages": [],
            "timestamp": 1432680514,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/a1d3f5af6ebf01fccd9e772ca2a04ba5?d=identicon&version=1",
            "client": "website",
            "content": "<p>Anyone interested in attempting the Go Challenge #4? <a href=\"http://golang-challenge.com/go-challenge4/\" target=\"_blank\" title=\"http://golang-challenge.com/go-challenge4/\">http://golang-challenge.com/go-challenge4/</a></p>\n<p>I'll be working on it for the next few days, let me know if you want to brainstorm and then compare solutions later.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 40106511,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "ken@kenpratt.net",
            "sender_full_name": "Ken Pratt (he) (SP2'15)",
            "sender_id": 7850,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "Go Challenge #4",
            "submessages": [],
            "timestamp": 1432680580,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/229e3746f6f5100c1d7d5d7a8a5b82d5?d=identicon&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>/me is semi-interested</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 40106521,
            "is_me_message": true,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "nat@natwelch.com",
            "sender_full_name": "Nat Welch (he) (SP2'15)",
            "sender_id": 7866,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "Go Challenge #4",
            "submessages": [],
            "timestamp": 1432680594,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/a1d3f5af6ebf01fccd9e772ca2a04ba5?d=identicon&version=1",
            "client": "website",
            "content": "<p>It could be a good way to learn Go if you're interested, although you're probably not subscribed to the golang channel if you don't know any go... ;)</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 40106587,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "ken@kenpratt.net",
            "sender_full_name": "Ken Pratt (he) (SP2'15)",
            "sender_id": 7850,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "Go Challenge #4",
            "submessages": [],
            "timestamp": 1432680630,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/b0aaf017ede1c6cd8f546531ead124bbed75fabe?x=x&version=4",
            "client": "website",
            "content": "<p>(Doesn't know any Go)</p>\n<p>Totes interested in potentially working on this problem to start somewhere.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 40106900,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "brad@isbrad.com",
            "sender_full_name": "Bradley Boccuzzi (he/they) (S1'15)",
            "sender_id": 8094,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "Go Challenge #4",
            "submessages": [],
            "timestamp": 1432680912,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/a1d3f5af6ebf01fccd9e772ca2a04ba5?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"bradley.boccuzzi@gmail.com\">@Bradley Boccuzzi</span> Cool! I'd recommend starting with the tutorials on the Go site, and once you get through all of those and the practice problems in them, you should be okay to start tackling the challenge. (I haven't started it yet, so not 100% sure on the level of complexity -- I think they're all meant to be beginner-friendly, though.)</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 40123175,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "ken@kenpratt.net",
            "sender_full_name": "Ken Pratt (he) (SP2'15)",
            "sender_id": 7850,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "Go Challenge #4",
            "submessages": [],
            "timestamp": 1432697332,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/229e3746f6f5100c1d7d5d7a8a5b82d5?d=identicon&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>I told someone that Go was entirely written in Go as of 1.4. I guess I was wrong, and I appologise for this with a slide deck about the topic: <a href=\"https://talks.golang.org/2015/gogo.slide\" target=\"_blank\" title=\"https://talks.golang.org/2015/gogo.slide\">https://talks.golang.org/2015/gogo.slide</a></p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 40144626,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "nat@natwelch.com",
            "sender_full_name": "Nat Welch (he) (SP2'15)",
            "sender_id": 7866,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "Go in Go",
            "submessages": [],
            "timestamp": 1432736632,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/229e3746f6f5100c1d7d5d7a8a5b82d5?d=identicon&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p><span class=\"user-mention\" data-user-email=\"steve@redlua.com\">@Steven McCarthy (SP2'15)</span> I think it was you I told this to</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 40144647,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "nat@natwelch.com",
            "sender_full_name": "Nat Welch (he) (SP2'15)",
            "sender_id": 7866,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "Go in Go",
            "submessages": [],
            "timestamp": 1432736643,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/6527e077e84e20214d5373101ea15910d6b6f7a3?x=x&version=1",
            "client": "website",
            "content": "<p>Correct. I am obviously extremely disappointed (just kidding), though more confused. As the slides mention go 1.5, which, ummm, doesn't seem to exist yet?</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 40145952,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "steve@redlua.com",
            "sender_full_name": "Steven McCarthy (he) (SP2'15)",
            "sender_id": 7871,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "Go in Go",
            "submessages": [],
            "timestamp": 1432738298,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/6527e077e84e20214d5373101ea15910d6b6f7a3?x=x&version=1",
            "client": "website",
            "content": "<p>I am interested in this <span class=\"user-mention\" data-user-email=\"ken@kenpratt.net\">@Ken Pratt (SP2'15)</span> </p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 40146127,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "steve@redlua.com",
            "sender_full_name": "Steven McCarthy (he) (SP2'15)",
            "sender_id": 7871,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "Go Challenge #4",
            "submessages": [],
            "timestamp": 1432738513,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/a1d3f5af6ebf01fccd9e772ca2a04ba5?d=identicon&version=1",
            "client": "website",
            "content": "<p>I found the problem description a bit unclear. Here's what I've found so far:</p>\n<ul>\n<li>Basically, you have an incoming stream of trucks, each containing pallets packed inefficiently with boxes. Your job is to re-pack the boxes more efficiently, and send them back out out on outgoing trucks, as quickly as possible.</li>\n<li>Each leftover pallet gives you a profit. The goal is to maximize profit (leftover pallets) in a fixed amount of wall-clock time, and you can process as many trucks as you want to do it.</li>\n<li>There is an unlimited supply of incoming trucks, coming in as fast as you can process them, so you can make a fast solution and process many trucks, making a small profit off each one, or you can make a slow but more optimal solution that won't process as many trucks, but will make more profit off each one (and many in between).</li>\n<li>Each truck comes in with 5 - 14 pallets. I don't think there's a min or max on how many pallets a truck can leave with.</li>\n<li>Each pallet comes in with 1 - 5 boxes. Each pallet is a 4x4 square, and each box is a rectangle with width and height each between 1 - 4 (so min 1x1, max 4x4).</li>\n<li>Incoming pallets are guaranteed to have total box surface area &lt;= 16 (4x4), but other than that, I think the incoming pallets are poorly-formed, with overlapping boxes. So it might be possible to get a pallet that you can only pack worse than it arrived. :(</li>\n<li>You can move boxes between pallets, and even between trucks. All the trucks are coming from and going to the same place.</li>\n</ul>\n<p>To run the challenge: <code>go build -o gc4 &amp;&amp; cat testdata/100trucks.txt | ./gc4</code></p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 40147959,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "ken@kenpratt.net",
            "sender_full_name": "Ken Pratt (he) (SP2'15)",
            "sender_id": 7850,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "Go Challenge #4",
            "submessages": [],
            "timestamp": 1432741221,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/b0aaf017ede1c6cd8f546531ead124bbed75fabe?x=x&version=4",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"ken@kenpratt.net\">@Ken Pratt (SP2'15)</span> <br>\nWhat is the '-gc4' option used for? Or at least why? (I haven't looked to much into this problem yet. Still working through Go tutorials.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 40148806,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "brad@isbrad.com",
            "sender_full_name": "Bradley Boccuzzi (he/they) (S1'15)",
            "sender_id": 8094,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "Go Challenge #4",
            "submessages": [],
            "timestamp": 1432742257,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/a1d3f5af6ebf01fccd9e772ca2a04ba5?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"bradley.boccuzzi@gmail.com\">@Bradley Boccuzzi (S1'15)</span> <code>-o gc4</code> names the output binary <code>gc4</code>. It can be anything. If you leave it off and just run <code>go build</code>, it'll use the dir name when naming the binary. I just used that as it's what they put in the <code>.gitignore</code> file that came with the ZIP file (so it's arbitrary).</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 40148892,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "ken@kenpratt.net",
            "sender_full_name": "Ken Pratt (he) (SP2'15)",
            "sender_id": 7850,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "Go Challenge #4",
            "submessages": [],
            "timestamp": 1432742384,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/b0aaf017ede1c6cd8f546531ead124bbed75fabe?x=x&version=4",
            "client": "website",
            "content": "<p>Good to know!</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 40151206,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "brad@isbrad.com",
            "sender_full_name": "Bradley Boccuzzi (he/they) (S1'15)",
            "sender_id": 8094,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "Go Challenge #4",
            "submessages": [],
            "timestamp": 1432745677,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/0a35beaf5a354dafdf10494c0313e10fffc154fd?x=x&version=1",
            "client": "website",
            "content": "<p>if I've got</p>\n<div class=\"codehilite\"><pre><span class=\"k\">func</span> <span class=\"p\">(</span><span class=\"n\">foo</span> <span class=\"n\">Foo</span><span class=\"p\">)</span> <span class=\"n\">myFunction</span><span class=\"p\">{</span>\n    <span class=\"p\">...</span>\n<span class=\"p\">}</span>\n</pre></div>\n\n\n<p>so apparently i CAN replace <code>foo</code>, the thing the method is being called on, within the method? something like:</p>\n<div class=\"codehilite\"><pre><span class=\"k\">func</span> <span class=\"p\">(</span><span class=\"n\">foo</span> <span class=\"n\">Foo</span><span class=\"p\">)</span> <span class=\"n\">myFunction</span><span class=\"p\">{</span>\n    <span class=\"p\">...</span>\n    <span class=\"n\">foo</span> <span class=\"p\">=</span> <span class=\"n\">newFoo</span>\n    <span class=\"p\">...</span>\n<span class=\"p\">}</span>\n</pre></div>\n\n\n<p>but is this extraordinarily bad practice? or okay?</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 40161792,
            "is_me_message": false,
            "last_edit_timestamp": 1432759556,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "maia.mcc@gmail.com",
            "sender_full_name": "Maia McCormick (she) (S2'14)",
            "sender_id": 6175,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "change object that a method is called on?",
            "submessages": [],
            "timestamp": 1432759219,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/a1d3f5af6ebf01fccd9e772ca2a04ba5?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"maia.mcc@gmail.com\">@Maia McCormick (S'14)</span> You can do it if you define the method as <code>*Foo</code> instead of <code>Foo</code>: <a href=\"http://play.golang.org/p/mF0VRE4Ct2\" target=\"_blank\" title=\"http://play.golang.org/p/mF0VRE4Ct2\">http://play.golang.org/p/mF0VRE4Ct2</a></p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 40162052,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "ken@kenpratt.net",
            "sender_full_name": "Ken Pratt (he) (SP2'15)",
            "sender_id": 7850,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "change object that a method is called on?",
            "submessages": [],
            "timestamp": 1432759607,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/0a35beaf5a354dafdf10494c0313e10fffc154fd?x=x&version=1",
            "client": "website",
            "content": "<p>i don't need to change the value of <code>foo</code> outside of the method--in fact, probably better that it doesn't change</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 40162065,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "maia.mcc@gmail.com",
            "sender_full_name": "Maia McCormick (she) (S2'14)",
            "sender_id": 6175,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "change object that a method is called on?",
            "submessages": [],
            "timestamp": 1432759657,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/0a35beaf5a354dafdf10494c0313e10fffc154fd?x=x&version=1",
            "client": "website",
            "content": "<p>i just need to temporarily change the value of <code>foo</code> for the duration of the method</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 40162076,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "maia.mcc@gmail.com",
            "sender_full_name": "Maia McCormick (she) (S2'14)",
            "sender_id": 6175,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "change object that a method is called on?",
            "submessages": [],
            "timestamp": 1432759676,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/0a35beaf5a354dafdf10494c0313e10fffc154fd?x=x&version=1",
            "client": "website",
            "content": "<p>something like: <a href=\"http://play.golang.org/p/NgX6KhwGkJ\" target=\"_blank\" title=\"http://play.golang.org/p/NgX6KhwGkJ\">http://play.golang.org/p/NgX6KhwGkJ</a></p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 40162108,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "maia.mcc@gmail.com",
            "sender_full_name": "Maia McCormick (she) (S2'14)",
            "sender_id": 6175,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "change object that a method is called on?",
            "submessages": [],
            "timestamp": 1432759687,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/a179bb8c3fc4ab0975954f57d47fa6c53a8c2dad?x=x&version=2",
            "client": "website",
            "content": "<p>I'd name the temp value something different.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 40162117,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "jay@jayschwa.net",
            "sender_full_name": "Jay Weisskopf Petacat (W2'17)",
            "sender_id": 829,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "change object that a method is called on?",
            "submessages": [],
            "timestamp": 1432759690,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/a1d3f5af6ebf01fccd9e772ca2a04ba5?d=identicon&version=1",
            "client": "website",
            "content": "<p>Ah, I understand, yeah, that's just re-assigning the local variable then. I'd agree with <span class=\"user-mention\" data-user-email=\"jay@jayschwa.net\">@Jay Weisskopf (W'13)</span> though. For readability, best to name the other variable something else.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 40162135,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "ken@kenpratt.net",
            "sender_full_name": "Ken Pratt (he) (SP2'15)",
            "sender_id": 7850,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "change object that a method is called on?",
            "submessages": [],
            "timestamp": 1432759746,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/5d46121e9a899e151cfcd0e59aa9e9f8a78989e8?x=x&version=1",
            "client": "desktop app Linux 0.4.4",
            "content": "<p><span class=\"user-mention\" data-user-email=\"nat@natwelch.com\">@Nat Welch (SP2'15)</span> It was just an off-by-point-one error.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 40224091,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "aditya@adityamukerjee.net",
            "sender_full_name": "Aditya Mukerjee (he) (SP1'15)",
            "sender_id": 7644,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "Go in Go",
            "submessages": [],
            "timestamp": 1432868878,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/5d46121e9a899e151cfcd0e59aa9e9f8a78989e8?x=x&version=1",
            "client": "desktop app Linux 0.4.4",
            "content": "<p><span class=\"user-mention\" data-user-email=\"steve@redlua.com\">@Steven McCarthy (SP2'15)</span> <a href=\"http://tip.golang.org\" target=\"_blank\" title=\"http://tip.golang.org\">http://tip.golang.org</a> . Will be made master (ie, \"stable\"/1.5) in August.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 40224131,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "aditya@adityamukerjee.net",
            "sender_full_name": "Aditya Mukerjee (he) (SP1'15)",
            "sender_id": 7644,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "Go in Go",
            "submessages": [],
            "timestamp": 1432868902,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/a1d3f5af6ebf01fccd9e772ca2a04ba5?d=identicon&version=1",
            "client": "website",
            "content": "<p>:p</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 40224132,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "ken@kenpratt.net",
            "sender_full_name": "Ken Pratt (he) (SP2'15)",
            "sender_id": 7850,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "Go in Go",
            "submessages": [],
            "timestamp": 1432868905,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/b0aaf017ede1c6cd8f546531ead124bbed75fabe?x=x&version=4",
            "client": "website",
            "content": "<p>Slightly confused as to what the purpose of a Go generate statement is for.<br>\nI was reading something related to \"test harnesses\"??</p>\n<p>This reminds of a VHDL Test bench (Something used to test sequential and combinational logic)</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 40251279,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "brad@isbrad.com",
            "sender_full_name": "Bradley Boccuzzi (he/they) (S1'15)",
            "sender_id": 8094,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "Go generate",
            "submessages": [],
            "timestamp": 1432921262,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/a179bb8c3fc4ab0975954f57d47fa6c53a8c2dad?x=x&version=2",
            "client": "website",
            "content": "<p>It's for running arbitrary commands that create auto-generated source files.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 40252024,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "jay@jayschwa.net",
            "sender_full_name": "Jay Weisskopf Petacat (W2'17)",
            "sender_id": 829,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "Go generate",
            "submessages": [],
            "timestamp": 1432922335,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/a179bb8c3fc4ab0975954f57d47fa6c53a8c2dad?x=x&version=2",
            "client": "website",
            "content": "<p>Examples might include running <code>yacc</code> or spitting out type definitions from some schema file.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 40252127,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "jay@jayschwa.net",
            "sender_full_name": "Jay Weisskopf Petacat (W2'17)",
            "sender_id": 829,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "Go generate",
            "submessages": [],
            "timestamp": 1432922452,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/6527e077e84e20214d5373101ea15910d6b6f7a3?x=x&version=1",
            "client": "website",
            "content": "<p>Cool, thanks!</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 40254214,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "steve@redlua.com",
            "sender_full_name": "Steven McCarthy (he) (SP2'15)",
            "sender_id": 7871,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "Go in Go",
            "submessages": [],
            "timestamp": 1432925033,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/b0aaf017ede1c6cd8f546531ead124bbed75fabe?x=x&version=4",
            "client": "website",
            "content": "<p>I was reading this: <a href=\"http://blog.golang.org/go-slices-usage-and-internals\" target=\"_blank\" title=\"http://blog.golang.org/go-slices-usage-and-internals\">http://blog.golang.org/go-slices-usage-and-internals</a></p>\n<p>And saw this (for lengthening a slice):</p>\n<div class=\"codehilite\"><pre>t := make([]byte, len(s), (cap(s)+1)*2)\ncopy(t, s)\ns = t\n</pre></div>\n\n\n<p>What then happens to the original slice? (That was pointing to an array I assume). What if the slice the array was pointing to is never referenced again? I may be looking at this wrong?</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 40269050,
            "is_me_message": false,
            "last_edit_timestamp": 1432949096,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "brad@isbrad.com",
            "sender_full_name": "Bradley Boccuzzi (he/they) (S1'15)",
            "sender_id": 8094,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "Slices...",
            "submessages": [],
            "timestamp": 1432948999,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/a1d3f5af6ebf01fccd9e772ca2a04ba5?d=identicon&version=1",
            "client": "website",
            "content": "<p>If it's never referenced again, it'll get garbage collected, probably in the next GC run? (Although I'm not familiar with Go's GC implementation).</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 40272289,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "ken@kenpratt.net",
            "sender_full_name": "Ken Pratt (he) (SP2'15)",
            "sender_id": 7850,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "Slices...",
            "submessages": [],
            "timestamp": 1432957095,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/b0aaf017ede1c6cd8f546531ead124bbed75fabe?x=x&version=4",
            "client": "website",
            "content": "<p>Thanks!</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 40296146,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "brad@isbrad.com",
            "sender_full_name": "Bradley Boccuzzi (he/they) (S1'15)",
            "sender_id": 8094,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "Slices...",
            "submessages": [],
            "timestamp": 1433019331,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/5d46121e9a899e151cfcd0e59aa9e9f8a78989e8?x=x&version=1",
            "client": "desktop app Linux 0.4.4",
            "content": "<p><span class=\"user-mention\" data-user-email=\"bradley.boccuzzi@gmail.com\">@Bradley Boccuzzi (S1'15)</span> just make sure you only use <code>s</code> afterwards and don't reference <code>t</code> again. if you use both you can get into weird edge cases</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 40324746,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "aditya@adityamukerjee.net",
            "sender_full_name": "Aditya Mukerjee (he) (SP1'15)",
            "sender_id": 7644,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "Slices...",
            "submessages": [],
            "timestamp": 1433092847,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/0a35beaf5a354dafdf10494c0313e10fffc154fd?x=x&version=1",
            "client": "website",
            "content": "<p>posting in <code>programming</code> instead cuz it's not really a Go question</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 40589250,
            "is_me_message": false,
            "last_edit_timestamp": 1433516331,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "maia.mcc@gmail.com",
            "sender_full_name": "Maia McCormick (she) (S2'14)",
            "sender_id": 6175,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "[redacted]",
            "submessages": [],
            "timestamp": 1433516293,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/0a35beaf5a354dafdf10494c0313e10fffc154fd?x=x&version=1",
            "client": "website",
            "content": "<p><a href=\"http://play.golang.org/p/__hUCQ3r11\" target=\"_blank\" title=\"http://play.golang.org/p/__hUCQ3r11\">http://play.golang.org/p/__hUCQ3r11</a> &lt;-- I get how to pass a function as an argument to a function, but I don't know what the most idomatic way to pass along arguments to that function is</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 40789365,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "maia.mcc@gmail.com",
            "sender_full_name": "Maia McCormick (she) (S2'14)",
            "sender_id": 6175,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "arguments to functions as arguments",
            "submessages": [],
            "timestamp": 1433779686,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/0a35beaf5a354dafdf10494c0313e10fffc154fd?x=x&version=1",
            "client": "website",
            "content": "<p>(so obvi what i have here errors out b/c not enough arguments to call <code>foo</code>)</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 40789385,
            "is_me_message": false,
            "last_edit_timestamp": 1433779705,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "maia.mcc@gmail.com",
            "sender_full_name": "Maia McCormick (she) (S2'14)",
            "sender_id": 6175,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "arguments to functions as arguments",
            "submessages": [],
            "timestamp": 1433779698,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/0a35beaf5a354dafdf10494c0313e10fffc154fd?x=x&version=1",
            "client": "website",
            "content": "<p>thoughts?</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 40789392,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "maia.mcc@gmail.com",
            "sender_full_name": "Maia McCormick (she) (S2'14)",
            "sender_id": 6175,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "arguments to functions as arguments",
            "submessages": [],
            "timestamp": 1433779708,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/a179bb8c3fc4ab0975954f57d47fa6c53a8c2dad?x=x&version=2",
            "client": "website",
            "content": "<p>Perhaps you should be passing a closure instead.</p>\n<div class=\"codehilite\"><pre>fooWithArgs := func() {\n    foo(x, y, z)\n}\nmakeBTrue(fooWithArgs)\n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 40791575,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "jay@jayschwa.net",
            "sender_full_name": "Jay Weisskopf Petacat (W2'17)",
            "sender_id": 829,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "arguments to functions as arguments",
            "submessages": [],
            "timestamp": 1433782821,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/a179bb8c3fc4ab0975954f57d47fa6c53a8c2dad?x=x&version=2",
            "client": "website",
            "content": "<p>^ <span class=\"user-mention\" data-user-email=\"maia.mcc@gmail.com\">@Maia McCormick (S'14)</span> </p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 40791590,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "jay@jayschwa.net",
            "sender_full_name": "Jay Weisskopf Petacat (W2'17)",
            "sender_id": 829,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "arguments to functions as arguments",
            "submessages": [],
            "timestamp": 1433782837,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/5d46121e9a899e151cfcd0e59aa9e9f8a78989e8?x=x&version=1",
            "client": "desktop app Linux 0.4.4",
            "content": "<p>+1 on using a closure</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 40794234,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "aditya@adityamukerjee.net",
            "sender_full_name": "Aditya Mukerjee (he) (SP1'15)",
            "sender_id": 7644,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "arguments to functions as arguments",
            "submessages": [],
            "timestamp": 1433786157,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/5d46121e9a899e151cfcd0e59aa9e9f8a78989e8?x=x&version=1",
            "client": "desktop app Linux 0.4.4",
            "content": "<p>I guess you could also take a variadic argument that provides default parameters after the function, but that feels very Javascripty (like <code>apply</code>) and not Go-like</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 40794291,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "aditya@adityamukerjee.net",
            "sender_full_name": "Aditya Mukerjee (he) (SP1'15)",
            "sender_id": 7644,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "arguments to functions as arguments",
            "submessages": [],
            "timestamp": 1433786196,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/61f7402a76ff0aff964da46bd7948ca20279ae1f?x=x&version=1",
            "client": "website",
            "content": "<p>I remember that someone wanted to test a single test without using <code>go test</code>, it is a bit contrived how is done but possible:</p>\n<div class=\"codehilite\"><pre><span class=\"k\">package</span> <span class=\"n\">main</span>\n\n<span class=\"k\">import</span> <span class=\"p\">(</span>\n  <span class=\"s\">&quot;os&quot;</span>\n  <span class=\"s\">&quot;fmt&quot;</span>\n  <span class=\"s\">&quot;bytes&quot;</span>\n  <span class=\"s\">&quot;testing&quot;</span>\n  <span class=\"s\">&quot;text/template&quot;</span>\n<span class=\"p\">)</span>\n\n<span class=\"k\">func</span> <span class=\"n\">ProcessConfigTemplate</span><span class=\"p\">(</span><span class=\"n\">sample</span> <span class=\"nb\">string</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"nb\">string</span><span class=\"p\">,</span> <span class=\"n\">error</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"n\">fmap</span> <span class=\"p\">:=</span> <span class=\"n\">template</span><span class=\"p\">.</span><span class=\"n\">FuncMap</span> <span class=\"p\">{</span>\n      <span class=\"s\">&quot;env&quot;</span><span class=\"p\">:</span> <span class=\"k\">func</span><span class=\"p\">(</span><span class=\"n\">s</span> <span class=\"nb\">string</span><span class=\"p\">)</span> <span class=\"nb\">string</span> <span class=\"p\">{</span>\n        <span class=\"n\">fmt</span><span class=\"p\">.</span><span class=\"n\">Println</span><span class=\"p\">(</span><span class=\"s\">&quot;Does this work??&quot;</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">os</span><span class=\"p\">.</span><span class=\"n\">Getenv</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">)</span>\n      <span class=\"p\">},</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"n\">tmpl</span><span class=\"p\">,</span> <span class=\"n\">err</span> <span class=\"p\">:=</span> <span class=\"n\">template</span><span class=\"p\">.</span><span class=\"n\">New</span><span class=\"p\">(</span><span class=\"s\">&quot;&quot;</span><span class=\"p\">).</span><span class=\"n\">Funcs</span><span class=\"p\">(</span><span class=\"n\">fmap</span><span class=\"p\">).</span><span class=\"n\">Parse</span><span class=\"p\">(</span><span class=\"n\">sample</span><span class=\"p\">)</span>\n    <span class=\"k\">if</span> <span class=\"n\">err</span> <span class=\"p\">!=</span> <span class=\"n\">nil</span> <span class=\"p\">{</span>\n      <span class=\"k\">return</span> <span class=\"s\">&quot;&quot;</span><span class=\"p\">,</span> <span class=\"n\">fmt</span><span class=\"p\">.</span><span class=\"n\">Errorf</span><span class=\"p\">(</span><span class=\"s\">&quot;error parsing template: %v&quot;</span><span class=\"p\">,</span> <span class=\"n\">err</span><span class=\"p\">)</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"n\">buf</span> <span class=\"p\">:=</span> <span class=\"p\">&amp;</span><span class=\"n\">bytes</span><span class=\"p\">.</span><span class=\"n\">Buffer</span><span class=\"p\">{}</span>\n    <span class=\"k\">if</span> <span class=\"n\">err</span> <span class=\"p\">:=</span> <span class=\"n\">tmpl</span><span class=\"p\">.</span><span class=\"n\">Execute</span><span class=\"p\">(</span><span class=\"n\">buf</span><span class=\"p\">,</span> <span class=\"n\">nil</span><span class=\"p\">);</span> <span class=\"n\">err</span> <span class=\"p\">!=</span> <span class=\"n\">nil</span> <span class=\"p\">{</span>\n      <span class=\"k\">return</span> <span class=\"s\">&quot;&quot;</span><span class=\"p\">,</span> <span class=\"n\">fmt</span><span class=\"p\">.</span><span class=\"n\">Errorf</span><span class=\"p\">(</span><span class=\"s\">&quot;error processing template: %v&quot;</span><span class=\"p\">,</span> <span class=\"n\">err</span><span class=\"p\">)</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"k\">return</span> <span class=\"n\">buf</span><span class=\"p\">.</span><span class=\"n\">String</span><span class=\"p\">(),</span> <span class=\"n\">nil</span>\n<span class=\"p\">}</span>\n\n<span class=\"k\">func</span> <span class=\"n\">TestConfigTemplate</span><span class=\"p\">(</span><span class=\"n\">t</span> <span class=\"p\">*</span><span class=\"n\">testing</span><span class=\"p\">.</span><span class=\"n\">T</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"n\">sample</span>   <span class=\"p\">:=</span> <span class=\"s\">`USER is {{ env &quot;USER&quot; }}`</span>\n    <span class=\"n\">expected</span> <span class=\"p\">:=</span> <span class=\"s\">`USER is wallyqs`</span>\n\n    <span class=\"n\">got</span><span class=\"p\">,</span> <span class=\"n\">err</span> <span class=\"p\">:=</span> <span class=\"n\">ProcessConfigTemplate</span><span class=\"p\">(</span><span class=\"n\">sample</span><span class=\"p\">)</span>\n    <span class=\"k\">if</span> <span class=\"n\">err</span> <span class=\"p\">!=</span> <span class=\"n\">nil</span> <span class=\"p\">{</span>\n      <span class=\"n\">t</span><span class=\"p\">.</span><span class=\"n\">Fatalf</span><span class=\"p\">(</span><span class=\"s\">&quot;error processing template: %v&quot;</span><span class=\"p\">,</span> <span class=\"n\">err</span><span class=\"p\">)</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"k\">if</span> <span class=\"n\">expected</span> <span class=\"p\">!=</span> <span class=\"n\">got</span> <span class=\"p\">{</span>\n      <span class=\"n\">t</span><span class=\"p\">.</span><span class=\"n\">Fatalf</span><span class=\"p\">(</span><span class=\"s\">&quot;Expected: %v, got: %v&quot;</span><span class=\"p\">,</span> <span class=\"n\">expected</span><span class=\"p\">,</span> <span class=\"n\">got</span><span class=\"p\">)</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n\n<span class=\"k\">func</span> <span class=\"n\">nullmatcher</span><span class=\"p\">(</span><span class=\"n\">foo</span><span class=\"p\">,</span><span class=\"n\">bar</span> <span class=\"nb\">string</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"n\">bool</span><span class=\"p\">,</span> <span class=\"n\">error</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n  <span class=\"k\">return</span> <span class=\"n\">true</span><span class=\"p\">,</span> <span class=\"n\">nil</span>\n<span class=\"p\">}</span>\n\n<span class=\"k\">var</span> <span class=\"n\">tests</span> <span class=\"p\">=</span> <span class=\"p\">[]</span><span class=\"n\">testing</span><span class=\"p\">.</span><span class=\"n\">InternalTest</span><span class=\"p\">{</span>\n  <span class=\"p\">{</span><span class=\"s\">&quot;TestConfigTemplate&quot;</span><span class=\"p\">,</span> <span class=\"n\">TestConfigTemplate</span> <span class=\"p\">},</span>\n<span class=\"p\">}</span>\n\n<span class=\"k\">func</span> <span class=\"n\">main</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n  <span class=\"n\">testing</span><span class=\"p\">.</span><span class=\"n\">Main</span><span class=\"p\">(</span><span class=\"n\">nullmatcher</span><span class=\"p\">,</span> <span class=\"n\">tests</span><span class=\"p\">,</span> <span class=\"n\">nil</span><span class=\"p\">,</span> <span class=\"n\">nil</span><span class=\"p\">)</span>\n<span class=\"p\">}</span>\n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 40862944,
            "is_me_message": false,
            "last_edit_timestamp": 1433900609,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "waldemar.quevedo@gmail.com",
            "sender_full_name": "Waldemar Quevedo (F2'14)",
            "sender_id": 6706,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "testing-without-go-test",
            "submessages": [],
            "timestamp": 1433900591,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/61f7402a76ff0aff964da46bd7948ca20279ae1f?x=x&version=1",
            "client": "website",
            "content": "<p>It is basically what Go does behind the scenes when running <code>go test</code> etc.. Creates that <code>[]testing.InternalTest{}</code> set of tests to run.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 40862990,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "waldemar.quevedo@gmail.com",
            "sender_full_name": "Waldemar Quevedo (F2'14)",
            "sender_id": 6706,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "testing-without-go-test",
            "submessages": [],
            "timestamp": 1433900681,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p>Quick question (I don't have a go install right now): can you select over a put and a take on the same channel?</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 41193226,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "selecting",
            "submessages": [],
            "timestamp": 1434493732,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p>Alright, I installed go, it doesn't work ;)</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 41193820,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "selecting",
            "submessages": [],
            "timestamp": 1434494791,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/5d46121e9a899e151cfcd0e59aa9e9f8a78989e8?x=x&version=1",
            "client": "desktop app Linux 0.4.4",
            "content": "<p>The Go community is instituting a Code of Conduct (based off of the Django CoC). Hooray!</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 41342240,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "aditya@adityamukerjee.net",
            "sender_full_name": "Aditya Mukerjee (he) (SP1'15)",
            "sender_id": 7644,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "code of conduct",
            "submessages": [],
            "timestamp": 1434753559,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/5d46121e9a899e151cfcd0e59aa9e9f8a78989e8?x=x&version=1",
            "client": "desktop app Linux 0.4.4",
            "content": "<p>I'm not going to link to the discussion thread where they announce it, because it predictably devolves very quickly into proof of why the CoC is needed... in any case, I think the headline speaks for itself :)</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 41342293,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "aditya@adityamukerjee.net",
            "sender_full_name": "Aditya Mukerjee (he) (SP1'15)",
            "sender_id": 7644,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "code of conduct",
            "submessages": [],
            "timestamp": 1434753623,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/5d46121e9a899e151cfcd0e59aa9e9f8a78989e8?x=x&version=1",
            "client": "desktop app Linux 0.4.4",
            "content": "<p>/me is very happy to see this added</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 41342295,
            "is_me_message": true,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "aditya@adityamukerjee.net",
            "sender_full_name": "Aditya Mukerjee (he) (SP1'15)",
            "sender_id": 7644,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "code of conduct",
            "submessages": [],
            "timestamp": 1434753636,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/6527e077e84e20214d5373101ea15910d6b6f7a3?x=x&version=1",
            "client": "website",
            "content": "<p>Hello! I am extremely curious as to why when I run go get (specifically <code>go get github.com/carlosdb/twiliogo</code>), github asks for my username (<code>Username for 'https://github.com':</code>). It does not do this if I just <code>git clone https://github.com/carlosdp/twiliogo.git</code>, which seems to be functionally the same thing (except for the lack of convenience, and not compiling the library).<br>\nAnyone have any thoughts?</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 41488447,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "steve@redlua.com",
            "sender_full_name": "Steven McCarthy (he) (SP2'15)",
            "sender_id": 7871,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "go get for github.com asks for username",
            "submessages": [],
            "timestamp": 1435083357,
            "topic_links": [
                "https://github.com"
            ],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/ee15e6a0f98099248a49f72dda99233e807aa87e?x=x&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>my guess would be that go doesnt have access to the keychain (assuming osx)</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 41488637,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "k.coopr@gmail.com",
            "sender_full_name": "Kevin Cooper (S1'15)",
            "sender_id": 8084,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "go get for github.com asks for username",
            "submessages": [],
            "timestamp": 1435083559,
            "topic_links": [
                "https://github.com"
            ],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/2de9901913d2f414b7b174d2c2c69a88?d=identicon&version=1",
            "client": "website",
            "content": "<p>Hm, you have a typo -- \"carlosdb\" in one and \"carlosdp\" in the other.  </p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 41488724,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "chris@printf.net",
            "sender_full_name": "Chris Ball (SP2'15)",
            "sender_id": 7857,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "go get for github.com asks for username",
            "submessages": [],
            "timestamp": 1435083641,
            "topic_links": [
                "https://github.com"
            ],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/2de9901913d2f414b7b174d2c2c69a88?d=identicon&version=1",
            "client": "website",
            "content": "<p>Resulting theory: when you ask for a repo and it would 404, GitHub asks you for authentication in case it's a private repo that your logged-in user would have access to.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 41488757,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "chris@printf.net",
            "sender_full_name": "Chris Ball (SP2'15)",
            "sender_id": 7857,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "go get for github.com asks for username",
            "submessages": [],
            "timestamp": 1435083710,
            "topic_links": [
                "https://github.com"
            ],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/ee15e6a0f98099248a49f72dda99233e807aa87e?x=x&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>i think chris is right, but if not look into <a href=\"https://git-scm.com/docs/gitcredentials\" target=\"_blank\" title=\"https://git-scm.com/docs/gitcredentials\">git credentials</a> ...i've had issues before where i had to remove and re add my login info to get it to stop asking me</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 41488887,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "k.coopr@gmail.com",
            "sender_full_name": "Kevin Cooper (S1'15)",
            "sender_id": 8084,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "go get for github.com asks for username",
            "submessages": [],
            "timestamp": 1435083845,
            "topic_links": [
                "https://github.com"
            ],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/6527e077e84e20214d5373101ea15910d6b6f7a3?x=x&version=1",
            "client": "website",
            "content": "<p>Yup. <span class=\"user-mention\" data-user-email=\"chris@printf.net\">@Chris Ball (SP2'15)</span> was right. Thanks for the speedy responses.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 41489042,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "steve@redlua.com",
            "sender_full_name": "Steven McCarthy (he) (SP2'15)",
            "sender_id": 7871,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "go get for github.com asks for username",
            "submessages": [],
            "timestamp": 1435083996,
            "topic_links": [
                "https://github.com"
            ],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/6527e077e84e20214d5373101ea15910d6b6f7a3?x=x&version=1",
            "client": "website",
            "content": "<p>My main concern, <span class=\"user-mention\" data-user-email=\"k.coopr@gmail.com\">@Kevin Cooper (S1'15)</span>, was that github was requiring me to authenticate for a public repo, which seemed unnecessary. I've definitely had issues with git credentials as well, though. I'd actually still like to know how to push https repos without re-authenticating every time. And it appears that your link solves this separate issue for me. So thanks!</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 41489132,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "steve@redlua.com",
            "sender_full_name": "Steven McCarthy (he) (SP2'15)",
            "sender_id": 7871,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "go get for github.com asks for username",
            "submessages": [],
            "timestamp": 1435084124,
            "topic_links": [
                "https://github.com"
            ],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/ee15e6a0f98099248a49f72dda99233e807aa87e?x=x&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>np! :D</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 41489199,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "k.coopr@gmail.com",
            "sender_full_name": "Kevin Cooper (S1'15)",
            "sender_id": 8084,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "go get for github.com asks for username",
            "submessages": [],
            "timestamp": 1435084208,
            "topic_links": [
                "https://github.com"
            ],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/5d46121e9a899e151cfcd0e59aa9e9f8a78989e8?x=x&version=1",
            "client": "desktop app Linux 0.4.4",
            "content": "<p><span class=\"user-mention\" data-user-email=\"steve@redlua.com\">@Steven McCarthy (SP2'15)</span> I'd recommend setting your .gitconfig to force ssh</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 41537984,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "aditya@adityamukerjee.net",
            "sender_full_name": "Aditya Mukerjee (he) (SP1'15)",
            "sender_id": 7644,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "go get for github.com asks for username",
            "submessages": [],
            "timestamp": 1435171433,
            "topic_links": [
                "https://github.com"
            ],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/5d46121e9a899e151cfcd0e59aa9e9f8a78989e8?x=x&version=1",
            "client": "desktop app Linux 0.4.4",
            "content": "<p>it's almost always what you want anyway</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 41537987,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "aditya@adityamukerjee.net",
            "sender_full_name": "Aditya Mukerjee (he) (SP1'15)",
            "sender_id": 7644,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "go get for github.com asks for username",
            "submessages": [],
            "timestamp": 1435171441,
            "topic_links": [
                "https://github.com"
            ],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/5d46121e9a899e151cfcd0e59aa9e9f8a78989e8?x=x&version=1",
            "client": "desktop app Linux 0.4.4",
            "content": "<p><code>[url \"git@github.com:\"]\n    pushInsteadOf = \"https://github.com/\"</code></p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 41538030,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "aditya@adityamukerjee.net",
            "sender_full_name": "Aditya Mukerjee (he) (SP1'15)",
            "sender_id": 7644,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "go get for github.com asks for username",
            "submessages": [],
            "timestamp": 1435171456,
            "topic_links": [
                "https://github.com"
            ],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/5d46121e9a899e151cfcd0e59aa9e9f8a78989e8?x=x&version=1",
            "client": "desktop app Linux 0.4.4",
            "content": "<p>add that to <code>~/.gitconfig</code></p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 41538032,
            "is_me_message": false,
            "last_edit_timestamp": 1435171477,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "aditya@adityamukerjee.net",
            "sender_full_name": "Aditya Mukerjee (he) (SP1'15)",
            "sender_id": 7644,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "go get for github.com asks for username",
            "submessages": [],
            "timestamp": 1435171467,
            "topic_links": [
                "https://github.com"
            ],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/d784c48baf0ea01393ba7039df111553?d=identicon&version=1",
            "client": "website",
            "content": "<p>sometimes you want the opposite, because of stupid corporate firewalls.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 41546215,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "trsell@gmail.com",
            "sender_full_name": "Tim Sell (S1'15)",
            "sender_id": 8083,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "go get for github.com asks for username",
            "submessages": [],
            "timestamp": 1435182463,
            "topic_links": [
                "https://github.com"
            ],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/4caef236e2bd75fb71e3235d4ae0098d135a6bdf?x=x&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>So I've been going for a few weeks now, and here are some quick and dirty impressions:</p>\n<p>1. Interfaces and the composition style is really, really cool and forces you to think about maintaining consistent interfaces into your code; makes test writing easy and consistent, doesn't allow contributors to design themselves into a hole, etc.</p>\n<p>2. It's a super easy language to learn. 3-4 engineers who'd never worked in Go before were able to ramp up and complete a working prototype of something we're working on in just a few days.</p>\n<p>3. Pointers are the worst. Error messages, debugging, and type checking is all great in go until you try to deference a nil pointer. It's so easy to forget to check for a nil (or pass a nil and wonder how it got there in the first place). The problem is that you're not just using pointers for mutation... it's also often the only way to express optionality or distinguish between \"emptiness\" and absence. So you end up using a mutation feature to express maybes and cause lots of bugs.</p>\n<p>4. As an extension to my last, I understand that a lot of deliberation has gone into thinking about generics in Golang and the concern is that it'll add complexity to the runtime and the language that will become locked in later. I'd argue that this is an instance of no solution being more complex than some solution: passing around interface{}'s and using reflection requires understanding how interfaces are implemented and makes code more complex, so there's complexity in the state of the world today. The other way is to reimplement a bunch of the same thing. Haven't run into too much yet, but my use case is pretty simple right now.</p>\n<p>5. Gdb integration is ... not easy to use. I'm going to play around with godebug a bit and see how it goes.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 41672007,
            "is_me_message": false,
            "last_edit_timestamp": 1435442635,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "chenmonitor@gmail.com",
            "sender_full_name": "Chen Lin (W'14)",
            "sender_id": 4992,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "first impressions",
            "submessages": [],
            "timestamp": 1435442622,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/4caef236e2bd75fb71e3235d4ae0098d135a6bdf?x=x&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p><span class=\"user-mention\" data-user-email=\"filippo.valsorda@gmail.com\">@Filippo Valsorda (F'13)</span> just noticed that you worked on godebug. Cool stuff so far! I was stoked to find that it passes command line arguments down to the test binary.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 41672540,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "chenmonitor@gmail.com",
            "sender_full_name": "Chen Lin (W'14)",
            "sender_id": 4992,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "first impressions",
            "submessages": [],
            "timestamp": 1435443876,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/4caef236e2bd75fb71e3235d4ae0098d135a6bdf?x=x&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>also small RC world</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 41672541,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "chenmonitor@gmail.com",
            "sender_full_name": "Chen Lin (W'14)",
            "sender_id": 4992,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "first impressions",
            "submessages": [],
            "timestamp": 1435443882,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/4caef236e2bd75fb71e3235d4ae0098d135a6bdf?x=x&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>I did notice that gobuild test ./... takes considerably longer to compile than the go test ./... equivalent, presumably because of the rewriting and compile overhead of the debugger.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 41672589,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "chenmonitor@gmail.com",
            "sender_full_name": "Chen Lin (W'14)",
            "sender_id": 4992,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "first impressions",
            "submessages": [],
            "timestamp": 1435444016,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/4caef236e2bd75fb71e3235d4ae0098d135a6bdf?x=x&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>oh and to pile on to the good things: go fmt and goimports and all the other editor helpers + gosublime integration is an amazing workflow.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 41673556,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "chenmonitor@gmail.com",
            "sender_full_name": "Chen Lin (W'14)",
            "sender_id": 4992,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "first impressions",
            "submessages": [],
            "timestamp": 1435446244,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/61f7402a76ff0aff964da46bd7948ca20279ae1f?x=x&version=1",
            "client": "website",
            "content": "<p>This is some of the most fun I've had writing terminal applications so far... <a href=\"https://github.com/gizak/termui\" target=\"_blank\" title=\"https://github.com/gizak/termui\">https://github.com/gizak/termui</a><br>\nSeems like a rewrite is incoming but really recommend! /cc <span class=\"user-mention\" data-user-email=\"tom@hackerschool.com\">@Tom Ballinger</span> </p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 41715832,
            "is_me_message": false,
            "last_edit_timestamp": 1435554433,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "waldemar.quevedo@gmail.com",
            "sender_full_name": "Waldemar Quevedo (F2'14)",
            "sender_id": 6706,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "gizak/termui",
            "submessages": [],
            "timestamp": 1435552937,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/61f7402a76ff0aff964da46bd7948ca20279ae1f?x=x&version=1",
            "client": "website",
            "content": "<p>made a top-like application with it :)  <a href=\"https://asciinema.org/a/6xgidw31a47b3uwrg0uim6083\" target=\"_blank\" title=\"https://asciinema.org/a/6xgidw31a47b3uwrg0uim6083\">https://asciinema.org/a/6xgidw31a47b3uwrg0uim6083</a><br>\n(still wip)</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 41723217,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "waldemar.quevedo@gmail.com",
            "sender_full_name": "Waldemar Quevedo (F2'14)",
            "sender_id": 6706,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "gizak/termui",
            "submessages": [],
            "timestamp": 1435571664,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/b4d94d953db52e1e7cfc3724b95a6dc906fa9d58?x=x&version=2",
            "client": "website",
            "content": "<p>Nice! Last I checked, Node still needed a library like this - it'd be fun to do a little survey of the popular libraries in different languages and build something for Node.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 41730798,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "me@ballingt.com",
            "sender_full_name": "Tom Ballinger (he) (W'12)",
            "sender_id": 807,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "gizak/termui",
            "submessages": [],
            "timestamp": 1435587764,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/4caef236e2bd75fb71e3235d4ae0098d135a6bdf?x=x&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p><span class=\"user-mention\" data-user-email=\"aditya@adityamukerjee.net\">@Aditya Mukerjee (SP1'15)</span> Someone at work just ran into the same \"jenkins has a different time zone\" mystery failure that you ran into a while ago. I recognized it from talking to you and we debugged it immediately</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 41743263,
            "is_me_message": false,
            "last_edit_timestamp": 1435607259,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "chenmonitor@gmail.com",
            "sender_full_name": "Chen Lin (W'14)",
            "sender_id": 4992,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "small world",
            "submessages": [],
            "timestamp": 1435607163,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/4caef236e2bd75fb71e3235d4ae0098d135a6bdf?x=x&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>also in Go</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 41743288,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "chenmonitor@gmail.com",
            "sender_full_name": "Chen Lin (W'14)",
            "sender_id": 4992,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "small world",
            "submessages": [],
            "timestamp": 1435607170,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/4caef236e2bd75fb71e3235d4ae0098d135a6bdf?x=x&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>time.Unix(0, 0) apparently produces a location based on your local TZ. which is kind of baffling.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 41743303,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "chenmonitor@gmail.com",
            "sender_full_name": "Chen Lin (W'14)",
            "sender_id": 4992,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "small world",
            "submessages": [],
            "timestamp": 1435607197,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/d784c48baf0ea01393ba7039df111553?d=identicon&version=1",
            "client": "website",
            "content": "<p>I am getting these errors \"go install: no install location for .go files listed on command line (GOBIN not set)\"<br>\nEven though <code>go env</code> says: <code>GOPATH=\"/Users/tim/workspace/recurse/golabs\"</code> and my <code>src</code> dir lives under that directory.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 41750130,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "trsell@gmail.com",
            "sender_full_name": "Tim Sell (S1'15)",
            "sender_id": 8083,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "GOPATH",
            "submessages": [],
            "timestamp": 1435617680,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/d784c48baf0ea01393ba7039df111553?d=identicon&version=1",
            "client": "website",
            "content": "<p>any ideas?</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 41750132,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "trsell@gmail.com",
            "sender_full_name": "Tim Sell (S1'15)",
            "sender_id": 8083,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "GOPATH",
            "submessages": [],
            "timestamp": 1435617684,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/d784c48baf0ea01393ba7039df111553?d=identicon&version=1",
            "client": "website",
            "content": "<p><code>go build file.go</code> works, but <code>go install file.go</code> fails.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 41750173,
            "is_me_message": false,
            "last_edit_timestamp": 1435617742,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "trsell@gmail.com",
            "sender_full_name": "Tim Sell (S1'15)",
            "sender_id": 8083,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "GOPATH",
            "submessages": [],
            "timestamp": 1435617730,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/d784c48baf0ea01393ba7039df111553?d=identicon&version=1",
            "client": "website",
            "content": "<p>I understood that it doesn't matter if GOBIN isn't set if GOPATH is set :(</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 41750178,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "trsell@gmail.com",
            "sender_full_name": "Tim Sell (S1'15)",
            "sender_id": 8083,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "GOPATH",
            "submessages": [],
            "timestamp": 1435617781,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/d784c48baf0ea01393ba7039df111553?d=identicon&version=1",
            "client": "website",
            "content": "<p>If I do force GOBIN to be set, it go install does work for main files, but it fails for packages.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 41750182,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "trsell@gmail.com",
            "sender_full_name": "Tim Sell (S1'15)",
            "sender_id": 8083,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "GOPATH",
            "submessages": [],
            "timestamp": 1435617801,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/d784c48baf0ea01393ba7039df111553?d=identicon&version=1",
            "client": "website",
            "content": "<p>arg</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 41750184,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "trsell@gmail.com",
            "sender_full_name": "Tim Sell (S1'15)",
            "sender_id": 8083,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "GOPATH",
            "submessages": [],
            "timestamp": 1435617805,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/d784c48baf0ea01393ba7039df111553?d=identicon&version=1",
            "client": "website",
            "content": "<p>I am giving up for the day because this makes me sad.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 41750575,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "trsell@gmail.com",
            "sender_full_name": "Tim Sell (S1'15)",
            "sender_id": 8083,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "GOPATH",
            "submessages": [],
            "timestamp": 1435618553,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/5d46121e9a899e151cfcd0e59aa9e9f8a78989e8?x=x&version=1",
            "client": "desktop app Linux 0.4.4",
            "content": "<p>haha that's awesome! Glad I was able to save someone else the time :D</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 41752971,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "aditya@adityamukerjee.net",
            "sender_full_name": "Aditya Mukerjee (he) (SP1'15)",
            "sender_id": 7644,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "small world",
            "submessages": [],
            "timestamp": 1435623038,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/5d46121e9a899e151cfcd0e59aa9e9f8a78989e8?x=x&version=1",
            "client": "desktop app Linux 0.4.4",
            "content": "<p>and yeah, it's kind of silly, but they have to produce <strong>a</strong> locale, so it's the only one that would make sense :-/</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 41752975,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "aditya@adityamukerjee.net",
            "sender_full_name": "Aditya Mukerjee (he) (SP1'15)",
            "sender_id": 7644,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "small world",
            "submessages": [],
            "timestamp": 1435623055,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/a179bb8c3fc4ab0975954f57d47fa6c53a8c2dad?x=x&version=2",
            "client": "website",
            "content": "<p>What's the solution? <code>time.Unix(0, 0).UTC()</code>?</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 41753155,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "jay@jayschwa.net",
            "sender_full_name": "Jay Weisskopf Petacat (W2'17)",
            "sender_id": 829,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "small world",
            "submessages": [],
            "timestamp": 1435623465,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/5d46121e9a899e151cfcd0e59aa9e9f8a78989e8?x=x&version=1",
            "client": "desktop app Linux 0.4.4",
            "content": "<p><span class=\"user-mention\" data-user-email=\"jay@jayschwa.net\">@Jay Weisskopf (W'13)</span> to which problem?</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 41753771,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "aditya@adityamukerjee.net",
            "sender_full_name": "Aditya Mukerjee (he) (SP1'15)",
            "sender_id": 7644,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "small world",
            "submessages": [],
            "timestamp": 1435624695,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/229e3746f6f5100c1d7d5d7a8a5b82d5?d=identicon&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p><code>time.Now().UTC().Unix()</code></p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 41753826,
            "is_me_message": false,
            "last_edit_timestamp": 1435625154,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "nat@natwelch.com",
            "sender_full_name": "Nat Welch (he) (SP2'15)",
            "sender_id": 7866,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "small world",
            "submessages": [],
            "timestamp": 1435624835,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/5d46121e9a899e151cfcd0e59aa9e9f8a78989e8?x=x&version=1",
            "client": "desktop app Linux 0.4.4",
            "content": "<p><span class=\"user-mention\" data-user-email=\"nat@natwelch.com\">@Nat Welch (SP2'15)</span> I'm confused. <code>time.Now().Unix()</code> gives me <code>1435626749</code>, and <code>date -d @1435626749</code> gives <code>Mon Jun 29 21:12:29 EDT 2015</code>. So I think that part works as expected</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 41754660,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "aditya@adityamukerjee.net",
            "sender_full_name": "Aditya Mukerjee (he) (SP1'15)",
            "sender_id": 7644,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "small world",
            "submessages": [],
            "timestamp": 1435626803,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/229e3746f6f5100c1d7d5d7a8a5b82d5?d=identicon&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>right, but <span class=\"user-mention\" data-user-email=\"jay@jayschwa.net\">@Jay Weisskopf (W'13)</span> wants his unix time in UTC</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 41754742,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "nat@natwelch.com",
            "sender_full_name": "Nat Welch (he) (SP2'15)",
            "sender_id": 7866,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "small world",
            "submessages": [],
            "timestamp": 1435626965,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/229e3746f6f5100c1d7d5d7a8a5b82d5?d=identicon&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>unix time is machine local for time zone</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 41754760,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "nat@natwelch.com",
            "sender_full_name": "Nat Welch (he) (SP2'15)",
            "sender_id": 7866,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "small world",
            "submessages": [],
            "timestamp": 1435627031,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/229e3746f6f5100c1d7d5d7a8a5b82d5?d=identicon&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>so really, the solution to Jay's problem is for him to set the local time on his machine to UTC... but my response is a slight hack</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 41754765,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "nat@natwelch.com",
            "sender_full_name": "Nat Welch (he) (SP2'15)",
            "sender_id": 7866,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "small world",
            "submessages": [],
            "timestamp": 1435627073,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/61f7402a76ff0aff964da46bd7948ca20279ae1f?x=x&version=1",
            "client": "website",
            "content": "<p>yeah it is sad, but what I think that happens is that you need to create another folder inside the <code>src</code> directory like <code>src/something/file.go</code> and then <code>go build/install src/something/file.go</code>, haven't tried locally but maybe</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 41755124,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "waldemar.quevedo@gmail.com",
            "sender_full_name": "Waldemar Quevedo (F2'14)",
            "sender_id": 6706,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "GOPATH",
            "submessages": [],
            "timestamp": 1435627839,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/61f7402a76ff0aff964da46bd7948ca20279ae1f?x=x&version=1",
            "client": "website",
            "content": "<p>the <code>src</code> folder is where packages are put, and a folder is a package, files need to be inside of those folders</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 41755181,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "waldemar.quevedo@gmail.com",
            "sender_full_name": "Waldemar Quevedo (F2'14)",
            "sender_id": 6706,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "GOPATH",
            "submessages": [],
            "timestamp": 1435627964,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/4caef236e2bd75fb71e3235d4ae0098d135a6bdf?x=x&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>time.Unix(0, 0).UTC() is what we ended up using</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 41777484,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "chenmonitor@gmail.com",
            "sender_full_name": "Chen Lin (W'14)",
            "sender_id": 4992,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "small world",
            "submessages": [],
            "timestamp": 1435676410,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/b0aaf017ede1c6cd8f546531ead124bbed75fabe?x=x&version=4",
            "client": "website",
            "content": "<p>In the GOPATH there should be three folders to make: <code>pkg</code>, <code>src</code>, and <code>bin</code></p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 41795281,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "brad@isbrad.com",
            "sender_full_name": "Bradley Boccuzzi (he/they) (S1'15)",
            "sender_id": 8094,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "GOPATH",
            "submessages": [],
            "timestamp": 1435703624,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/b0aaf017ede1c6cd8f546531ead124bbed75fabe?x=x&version=4",
            "client": "website",
            "content": "<p>Also actually try to echo your GOPATH: <code>echo $GOPATH</code> see what that gets you</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 41795363,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "brad@isbrad.com",
            "sender_full_name": "Bradley Boccuzzi (he/they) (S1'15)",
            "sender_id": 8094,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "GOPATH",
            "submessages": [],
            "timestamp": 1435703744,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/4caef236e2bd75fb71e3235d4ae0098d135a6bdf?x=x&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>So I translated a backfill script from Python to Go because I was having a hard time making a single process python script go fast enough.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 41838712,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "chenmonitor@gmail.com",
            "sender_full_name": "Chen Lin (W'14)",
            "sender_id": 4992,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "first async impressions",
            "submessages": [],
            "timestamp": 1435784731,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/4caef236e2bd75fb71e3235d4ae0098d135a6bdf?x=x&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>I maxed out the multithreaded and multiprocessed python script at about 120 http requests per second</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 41838726,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "chenmonitor@gmail.com",
            "sender_full_name": "Chen Lin (W'14)",
            "sender_id": 4992,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "first async impressions",
            "submessages": [],
            "timestamp": 1435784756,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/4caef236e2bd75fb71e3235d4ae0098d135a6bdf?x=x&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>i'm still on one go proc and about 10 goroutines, but i'm already hitting 2000qps</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 41838769,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "chenmonitor@gmail.com",
            "sender_full_name": "Chen Lin (W'14)",
            "sender_id": 4992,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "first async impressions",
            "submessages": [],
            "timestamp": 1435784777,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/4caef236e2bd75fb71e3235d4ae0098d135a6bdf?x=x&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>=OOOOOOOOOOOOOOOO</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 41838772,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "chenmonitor@gmail.com",
            "sender_full_name": "Chen Lin (W'14)",
            "sender_id": 4992,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "first async impressions",
            "submessages": [],
            "timestamp": 1435784779,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/4caef236e2bd75fb71e3235d4ae0098d135a6bdf?x=x&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>i knocked over the service I was writing to before I had any problems with performance </p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 41838794,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "chenmonitor@gmail.com",
            "sender_full_name": "Chen Lin (W'14)",
            "sender_id": 4992,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "first async impressions",
            "submessages": [],
            "timestamp": 1435784822,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/4caef236e2bd75fb71e3235d4ae0098d135a6bdf?x=x&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>and the code is sooooo simple, didn't have to learn python-tornado or anything like that.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 41838799,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "chenmonitor@gmail.com",
            "sender_full_name": "Chen Lin (W'14)",
            "sender_id": 4992,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "first async impressions",
            "submessages": [],
            "timestamp": 1435784835,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/a179bb8c3fc4ab0975954f57d47fa6c53a8c2dad?x=x&version=2",
            "client": "website",
            "content": "<p>Heh, yeah. My main consideration when writing batch jobs in Go is not knocking over the service or DB I'm operating on.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 41840643,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "jay@jayschwa.net",
            "sender_full_name": "Jay Weisskopf Petacat (W2'17)",
            "sender_id": 829,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "first async impressions",
            "submessages": [],
            "timestamp": 1435787456,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/4caef236e2bd75fb71e3235d4ae0098d135a6bdf?x=x&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>Well, I can tune the number of workers to adjust :). This was only a test run on a staging instance; the real thing will need to serve 30000+ requests per second</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 41841381,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "chenmonitor@gmail.com",
            "sender_full_name": "Chen Lin (W'14)",
            "sender_id": 4992,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "first async impressions",
            "submessages": [],
            "timestamp": 1435788638,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/4caef236e2bd75fb71e3235d4ae0098d135a6bdf?x=x&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>it's almost impossible to do that in python</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 41841389,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "chenmonitor@gmail.com",
            "sender_full_name": "Chen Lin (W'14)",
            "sender_id": 4992,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "first async impressions",
            "submessages": [],
            "timestamp": 1435788655,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/4caef236e2bd75fb71e3235d4ae0098d135a6bdf?x=x&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>anyway, i just revised my estimates for how long I thought the backfill process would take from 3 weeks to 4 days</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 41841457,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "chenmonitor@gmail.com",
            "sender_full_name": "Chen Lin (W'14)",
            "sender_id": 4992,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "first async impressions",
            "submessages": [],
            "timestamp": 1435788792,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/4caef236e2bd75fb71e3235d4ae0098d135a6bdf?x=x&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>so that was pretty sweet</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 41841459,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "chenmonitor@gmail.com",
            "sender_full_name": "Chen Lin (W'14)",
            "sender_id": 4992,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "first async impressions",
            "submessages": [],
            "timestamp": 1435788795,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/a179bb8c3fc4ab0975954f57d47fa6c53a8c2dad?x=x&version=2",
            "client": "website",
            "content": "<p>Who is going this year? <span class=\"user-mention\" data-user-email=\"travis@mcdem.us\">@Travis McDemus (S'13)</span>?</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 41916064,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "jay@jayschwa.net",
            "sender_full_name": "Jay Weisskopf Petacat (W2'17)",
            "sender_id": 829,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "gophercon",
            "submessages": [],
            "timestamp": 1435940984,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/391eb183c3474a15bf9ad0e87d3ff118?d=identicon&version=1",
            "client": "website",
            "content": "<p>I'm not going this year, but next year I'll be there!</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 41919090,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "ghthor@gmail.com",
            "sender_full_name": "Will Drengwitz (he) (W1'17)",
            "sender_id": 7099,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "gophercon",
            "submessages": [],
            "timestamp": 1435947176,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/1380ded36dafac0d6f808b9b7b6c4e85266428a1?x=x&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"jay@jayschwa.net\">@Jay Weisskopf (W'13)</span> , yeah, I'm flying out Tuesday, so I'll be there for the before-and-after workshops, hack sessions. etc.  Roll call though - <span class=\"user-mention\" data-user-email=\"clin_@berkeley.edu\">@Chen Lin (W'14)</span> ,  did you end up getting a ticket? How about <span class=\"user-mention\" data-user-email=\"aditya@adityamukerjee.net\">@Aditya Mukerjee (SP1'15)</span> ?</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 42036516,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "travis@mcdem.us",
            "sender_full_name": "Travis McDemus (S'13)",
            "sender_id": 2139,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "gophercon",
            "submessages": [],
            "timestamp": 1436040580,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/5d46121e9a899e151cfcd0e59aa9e9f8a78989e8?x=x&version=1",
            "client": "desktop app Linux 0.4.4",
            "content": "<p><span class=\"user-mention\" data-user-email=\"jay@jayschwa.net\">@Jay Weisskopf (W'13)</span> <span class=\"user-mention\" data-user-email=\"travis@mcdem.us\">@Travis McDemus (S'13)</span> I'll be there!</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 42121640,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "aditya@adityamukerjee.net",
            "sender_full_name": "Aditya Mukerjee (he) (SP1'15)",
            "sender_id": 7644,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "gophercon",
            "submessages": [],
            "timestamp": 1436107976,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/4caef236e2bd75fb71e3235d4ae0098d135a6bdf?x=x&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>I could not get tickets</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 42138561,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "chenmonitor@gmail.com",
            "sender_full_name": "Chen Lin (W'14)",
            "sender_id": 4992,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "gophercon",
            "submessages": [],
            "timestamp": 1436121957,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/4caef236e2bd75fb71e3235d4ae0098d135a6bdf?x=x&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>which was actually a relief... I needed a weekend where I wasn't staying at an airbnb or hopping on a plane</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 42138632,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "chenmonitor@gmail.com",
            "sender_full_name": "Chen Lin (W'14)",
            "sender_id": 4992,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "gophercon",
            "submessages": [],
            "timestamp": 1436121997,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/a179bb8c3fc4ab0975954f57d47fa6c53a8c2dad?x=x&version=2",
            "client": "website",
            "content": "<p>Huh, so it turns out the workshop track required separate tickets. That's a little disappointing, mostly because I wasn't aware of that. There are a couple schedule pages on the site, and the one I had been visiting made no mention of them.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 42228478,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "jay@jayschwa.net",
            "sender_full_name": "Jay Weisskopf Petacat (W2'17)",
            "sender_id": 829,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "gophercon",
            "submessages": [],
            "timestamp": 1436289283,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/d784c48baf0ea01393ba7039df111553?d=identicon&version=1",
            "client": "website",
            "content": "<p>Does anyone in the building know Go well? I'm am stumped</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 42242906,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "trsell@gmail.com",
            "sender_full_name": "Tim Sell (S1'15)",
            "sender_id": 8083,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "go routines and channels are weird..",
            "submessages": [],
            "timestamp": 1436307450,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/a8899262a6722e34f543a3209d16f6cd?d=identicon&version=1",
            "client": "website",
            "content": "<p>sure, happy to take a look. over on the couch</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 42242914,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "gdb@gregbrockman.com",
            "sender_full_name": "Greg Brockman (S2'15)",
            "sender_id": 8313,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "go routines and channels are weird..",
            "submessages": [],
            "timestamp": 1436307470,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/d784c48baf0ea01393ba7039df111553?d=identicon&version=1",
            "client": "website",
            "content": "<p>awesome</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 42243000,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "trsell@gmail.com",
            "sender_full_name": "Tim Sell (S1'15)",
            "sender_id": 8083,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "go routines and channels are weird..",
            "submessages": [],
            "timestamp": 1436307586,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/1380ded36dafac0d6f808b9b7b6c4e85266428a1?x=x&version=1",
            "client": "website",
            "content": "<p>Yeah, I got confused by that too and only found out today.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 42271209,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "travis@mcdem.us",
            "sender_full_name": "Travis McDemus (S'13)",
            "sender_id": 2139,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "gophercon",
            "submessages": [],
            "timestamp": 1436326957,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/5d46121e9a899e151cfcd0e59aa9e9f8a78989e8?x=x&version=1",
            "client": "desktop app Linux 0.4.4",
            "content": "<p><span class=\"user-mention\" data-user-email=\"libby@daydrea.me\">@Libby Horacek (W2'15)</span> didn't realize you were here until just now!!</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 42445641,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "aditya@adityamukerjee.net",
            "sender_full_name": "Aditya Mukerjee (he) (SP1'15)",
            "sender_id": 7644,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "gophercon",
            "submessages": [],
            "timestamp": 1436557508,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/efe57f0998df065470ff42c938f781cf?d=identicon&version=1",
            "client": "website",
            "content": "<p>Hi! :) </p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 42446727,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "libby@daydrea.me",
            "sender_full_name": "Libby Horacek (she) (SP1'15)",
            "sender_id": 7081,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "gophercon",
            "submessages": [],
            "timestamp": 1436559297,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/d784c48baf0ea01393ba7039df111553?d=identicon&version=1",
            "client": "website",
            "content": "<p>Hai</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 42447422,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "trsell@gmail.com",
            "sender_full_name": "Tim Sell (S1'15)",
            "sender_id": 8083,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "gophercon",
            "submessages": [],
            "timestamp": 1436560301,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/d784c48baf0ea01393ba7039df111553?d=identicon&version=1",
            "client": "website",
            "content": "<p>hah, I thought you were just saying hi to the golang channel</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 42447463,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "trsell@gmail.com",
            "sender_full_name": "Tim Sell (S1'15)",
            "sender_id": 8083,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "gophercon",
            "submessages": [],
            "timestamp": 1436560332,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/d784c48baf0ea01393ba7039df111553?d=identicon&version=1",
            "client": "website",
            "content": "<p>hello golang channel!</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 42447465,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "trsell@gmail.com",
            "sender_full_name": "Tim Sell (S1'15)",
            "sender_id": 8083,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "gophercon",
            "submessages": [],
            "timestamp": 1436560346,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/efe57f0998df065470ff42c938f781cf?d=identicon&version=1",
            "client": "website",
            "content": "<p>Haha no I just forgot how zulip worked and didn't <span class=\"user-mention\" data-user-email=\"aditya@adityamukerjee.net\">@Aditya Mukerjee (SP1'15)</span> </p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 42450200,
            "is_me_message": false,
            "last_edit_timestamp": 1436564985,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "libby@daydrea.me",
            "sender_full_name": "Libby Horacek (she) (SP1'15)",
            "sender_id": 7081,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "gophercon",
            "submessages": [],
            "timestamp": 1436564967,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/61f7402a76ff0aff964da46bd7948ca20279ae1f?x=x&version=1",
            "client": "website",
            "content": "<p>Are there any of these in the golang community?  I remember somewhere someone saying that you should not be using <code>package utils</code> for example.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 42483478,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "waldemar.quevedo@gmail.com",
            "sender_full_name": "Waldemar Quevedo (F2'14)",
            "sender_id": 6706,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "something-something-considered-harmful",
            "submessages": [],
            "timestamp": 1436649198,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/e18ef2421fff92f1f9ee02a132abd931?d=identicon&version=1",
            "client": "website",
            "content": "<p>Does go perform caching in tests? I've got this code in a constructor function:</p>\n<p><code>s.ElectionTimeout = time.Duration(ElectionTimeout + rand.Intn(ElectionTimeout))</code></p>\n<p>But the timeout is the same on every test run for each node.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 42606996,
            "is_me_message": false,
            "last_edit_timestamp": 1436912438,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "rich.layte@gmail.com",
            "sender_full_name": "Richard Layte (S2'15)",
            "sender_id": 8306,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "Random numbers",
            "submessages": [],
            "timestamp": 1436912416,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/a8899262a6722e34f543a3209d16f6cd?d=identicon&version=1",
            "client": "website",
            "content": "<p>i wouldn't expect there to be any caching. maybe you're doing something like setting the seed every time the test runs?</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 42607131,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "gdb@gregbrockman.com",
            "sender_full_name": "Greg Brockman (S2'15)",
            "sender_id": 8313,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "Random numbers",
            "submessages": [],
            "timestamp": 1436912659,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/a8899262a6722e34f543a3209d16f6cd?d=identicon&version=1",
            "client": "website",
            "content": "<p>(the thing i'd test would be to do something like have the tests print out your random number, to make sure that it's actually being called a bunch of times, and that the value is invariant)</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 42607149,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "gdb@gregbrockman.com",
            "sender_full_name": "Greg Brockman (S2'15)",
            "sender_id": 8313,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "Random numbers",
            "submessages": [],
            "timestamp": 1436912716,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/e18ef2421fff92f1f9ee02a132abd931?d=identicon&version=1",
            "client": "website",
            "content": "<p>Oh right, I completely missed that. I guess this will actually make the tests easier if I rely on it being consistent, though.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 42607341,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "rich.layte@gmail.com",
            "sender_full_name": "Richard Layte (S2'15)",
            "sender_id": 8306,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "Random numbers",
            "submessages": [],
            "timestamp": 1436913063,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/e18ef2421fff92f1f9ee02a132abd931?d=identicon&version=1",
            "client": "website",
            "content": "<p>Thanks</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 42607342,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "rich.layte@gmail.com",
            "sender_full_name": "Richard Layte (S2'15)",
            "sender_id": 8306,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "Random numbers",
            "submessages": [],
            "timestamp": 1436913065,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/0a35beaf5a354dafdf10494c0313e10fffc154fd?x=x&version=1",
            "client": "website",
            "content": "<p>I was about to come over here and ask a question about random numbers in Go, then I saw this thread!! Anyway: I don't actually understand seeds and how to set/not set them. can someone explain what I have to do if I want my program to have actually random numbers (i.e. everytime I refresh the page that calls the function, the function returns a different number)?</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 42645925,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "maia.mcc@gmail.com",
            "sender_full_name": "Maia McCormick (she) (S2'14)",
            "sender_id": 6175,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "Random numbers",
            "submessages": [],
            "timestamp": 1436986596,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/a179bb8c3fc4ab0975954f57d47fa6c53a8c2dad?x=x&version=2",
            "client": "website",
            "content": "<p>Seeds are generally only set at startup. Using the same seed on different runs will generate the same series of \"random\" numbers. If you don't need that sort of determinism, you can probably just set the seed with <code>time.Now.Unix()</code> or something.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 42646652,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "jay@jayschwa.net",
            "sender_full_name": "Jay Weisskopf Petacat (W2'17)",
            "sender_id": 829,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "Random numbers",
            "submessages": [],
            "timestamp": 1436987662,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/eb83a236abf1b10c096dc6b656ae856aa58dfeee?x=x&version=2",
            "client": "website",
            "content": "<p>although if you're building something with security in mind you'll probably want to use something other than use the system time</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 42646890,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "jari@takkala.net",
            "sender_full_name": "Jari Takkala (F2'17)",
            "sender_id": 2853,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "Random numbers",
            "submessages": [],
            "timestamp": 1436988031,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/eb83a236abf1b10c096dc6b656ae856aa58dfeee?x=x&version=2",
            "client": "website",
            "content": "<p>I'm not sure what though, nearly every example I've seen online has used the system time and occasionally the PID. Can't you just read a few bytes from /dev/random and use that as the seed?</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 42646913,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "jari@takkala.net",
            "sender_full_name": "Jari Takkala (F2'17)",
            "sender_id": 2853,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "Random numbers",
            "submessages": [],
            "timestamp": 1436988099,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/a179bb8c3fc4ab0975954f57d47fa6c53a8c2dad?x=x&version=2",
            "client": "website",
            "content": "<p><code>math/rand</code> shouldn't be used for cases that require security. That's what <code>crypto/rand</code> is for.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 42646972,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "jay@jayschwa.net",
            "sender_full_name": "Jay Weisskopf Petacat (W2'17)",
            "sender_id": 829,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "Random numbers",
            "submessages": [],
            "timestamp": 1436988139,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/eb83a236abf1b10c096dc6b656ae856aa58dfeee?x=x&version=2",
            "client": "website",
            "content": "<p>ah, that makes sense</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 42646995,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "jari@takkala.net",
            "sender_full_name": "Jari Takkala (F2'17)",
            "sender_id": 2853,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "Random numbers",
            "submessages": [],
            "timestamp": 1436988182,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/391eb183c3474a15bf9ad0e87d3ff118?d=identicon&version=1",
            "client": "website",
            "content": "<p>Did anyone film the talks?</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 42749735,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "ghthor@gmail.com",
            "sender_full_name": "Will Drengwitz (he) (W1'17)",
            "sender_id": 7099,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "gophercon",
            "submessages": [],
            "timestamp": 1437175138,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/391eb183c3474a15bf9ad0e87d3ff118?d=identicon&version=1",
            "client": "website",
            "content": "<p>Expected them to be online by now, haha</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 42749743,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "ghthor@gmail.com",
            "sender_full_name": "Will Drengwitz (he) (W1'17)",
            "sender_id": 7099,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "gophercon",
            "submessages": [],
            "timestamp": 1437175154,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/a179bb8c3fc4ab0975954f57d47fa6c53a8c2dad?x=x&version=2",
            "client": "website",
            "content": "<p>Yeah, the talks were recorded. It will probably be a couple weeks before they are posted, if last year is any indication.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 42785814,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "jay@jayschwa.net",
            "sender_full_name": "Jay Weisskopf Petacat (W2'17)",
            "sender_id": 829,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "gophercon",
            "submessages": [],
            "timestamp": 1437267034,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/61f7402a76ff0aff964da46bd7948ca20279ae1f?x=x&version=1",
            "client": "website",
            "content": "<p>Ok stuck for long enough that I thought I'd share, how would you go around sorting a map by value with something like this?</p>\n<div class=\"codehilite\"><pre><span class=\"k\">type</span> <span class=\"n\">Thing</span> <span class=\"k\">struct</span> <span class=\"p\">{</span>\n        <span class=\"n\">a</span>  <span class=\"nb\">int</span>\n        <span class=\"n\">b</span>  <span class=\"nb\">int</span>\n<span class=\"p\">}</span>\n\n<span class=\"k\">func</span> <span class=\"n\">main</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n        <span class=\"n\">things</span> <span class=\"p\">:=</span> <span class=\"k\">map</span><span class=\"p\">[</span><span class=\"nb\">uint64</span><span class=\"p\">]*</span><span class=\"n\">Thing</span><span class=\"p\">{</span>\n                <span class=\"mi\">1</span><span class=\"p\">:</span>  <span class=\"p\">&amp;</span><span class=\"n\">Thing</span><span class=\"p\">{</span><span class=\"n\">a</span><span class=\"p\">:</span> <span class=\"mi\">8000</span><span class=\"p\">},</span>\n                <span class=\"mi\">3</span><span class=\"p\">:</span>  <span class=\"p\">&amp;</span><span class=\"n\">Thing</span><span class=\"p\">{</span><span class=\"n\">b</span><span class=\"p\">:</span> <span class=\"mi\">70</span><span class=\"p\">},</span>\n                <span class=\"mi\">7</span><span class=\"p\">:</span>  <span class=\"p\">&amp;</span><span class=\"n\">Thing</span><span class=\"p\">{},</span>\n                <span class=\"mi\">60</span><span class=\"p\">:</span> <span class=\"p\">&amp;</span><span class=\"n\">Thing</span><span class=\"p\">{</span><span class=\"n\">a</span><span class=\"p\">:</span> <span class=\"mi\">90000000</span><span class=\"p\">},</span>\n                <span class=\"mi\">90</span><span class=\"p\">:</span> <span class=\"p\">&amp;</span><span class=\"n\">Thing</span><span class=\"p\">{</span><span class=\"n\">b</span><span class=\"p\">:</span> <span class=\"mi\">180</span><span class=\"p\">},</span>\n                <span class=\"mi\">4</span><span class=\"p\">:</span>  <span class=\"p\">&amp;</span><span class=\"n\">Thing</span><span class=\"p\">{},</span>\n        <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 42947196,
            "is_me_message": false,
            "last_edit_timestamp": 1437601581,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "waldemar.quevedo@gmail.com",
            "sender_full_name": "Waldemar Quevedo (F2'14)",
            "sender_id": 6706,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "sorting-a-map-by-val",
            "submessages": [],
            "timestamp": 1437601545,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/61f7402a76ff0aff964da46bd7948ca20279ae1f?x=x&version=1",
            "client": "website",
            "content": "<p>most of the approaches I've took so far seem to really on using another structure for holding the keys, like using <code>Pair</code> type to hold the keys and values, then implementing the <code>sort</code> interface for it, I guess this is an area where everyone has their own styles...</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 42947381,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "waldemar.quevedo@gmail.com",
            "sender_full_name": "Waldemar Quevedo (F2'14)",
            "sender_id": 6706,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "sorting-a-map-by-val",
            "submessages": [],
            "timestamp": 1437601813,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/a179bb8c3fc4ab0975954f57d47fa6c53a8c2dad?x=x&version=2",
            "client": "website",
            "content": "<p>Maps are unordered, so you'll have to copy the contents to a slice type that implements the <code>sort.Interface</code>.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 42953361,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "jay@jayschwa.net",
            "sender_full_name": "Jay Weisskopf Petacat (W2'17)",
            "sender_id": 829,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "sorting-a-map-by-val",
            "submessages": [],
            "timestamp": 1437612573,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/61f7402a76ff0aff964da46bd7948ca20279ae1f?x=x&version=1",
            "client": "website",
            "content": "<p>yeah, what I meant is that everyone has a style for doing so.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 42958911,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "waldemar.quevedo@gmail.com",
            "sender_full_name": "Waldemar Quevedo (F2'14)",
            "sender_id": 6706,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "sorting-a-map-by-val",
            "submessages": [],
            "timestamp": 1437624777,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/61f7402a76ff0aff964da46bd7948ca20279ae1f?x=x&version=1",
            "client": "website",
            "content": "<p>thus reviews would result in bikeshedding on what to optimize for, how to create that another data structure etc...</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 42958958,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "waldemar.quevedo@gmail.com",
            "sender_full_name": "Waldemar Quevedo (F2'14)",
            "sender_id": 6706,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "sorting-a-map-by-val",
            "submessages": [],
            "timestamp": 1437624929,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/61f7402a76ff0aff964da46bd7948ca20279ae1f?x=x&version=1",
            "client": "website",
            "content": "<p>like this is what I went for in the end:</p>\n<div class=\"codehilite\"><pre><span class=\"k\">package</span> <span class=\"n\">main</span>\n\n<span class=\"k\">import</span> <span class=\"p\">(</span>\n        <span class=\"s\">&quot;fmt&quot;</span>\n        <span class=\"s\">&quot;sort&quot;</span>\n<span class=\"p\">)</span>\n\n<span class=\"k\">type</span> <span class=\"n\">Pair</span> <span class=\"k\">struct</span><span class=\"p\">{</span>\n    <span class=\"n\">Key</span> <span class=\"nb\">uint64</span>\n    <span class=\"n\">Val</span> <span class=\"p\">*</span><span class=\"n\">Thing</span>\n<span class=\"p\">}</span>\n\n<span class=\"k\">type</span> <span class=\"n\">ByA</span> <span class=\"p\">[]</span><span class=\"n\">Pair</span>\n\n<span class=\"k\">func</span> <span class=\"p\">(</span><span class=\"n\">d</span> <span class=\"n\">ByA</span><span class=\"p\">)</span> <span class=\"n\">Len</span><span class=\"p\">()</span> <span class=\"nb\">int</span> <span class=\"p\">{</span>\n        <span class=\"k\">return</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">d</span><span class=\"p\">)</span>\n<span class=\"p\">}</span>\n<span class=\"k\">func</span> <span class=\"p\">(</span><span class=\"n\">d</span> <span class=\"n\">ByA</span><span class=\"p\">)</span> <span class=\"n\">Swap</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"n\">j</span> <span class=\"nb\">int</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"n\">d</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">],</span> <span class=\"n\">d</span><span class=\"p\">[</span><span class=\"n\">j</span><span class=\"p\">]</span> <span class=\"p\">=</span> <span class=\"n\">d</span><span class=\"p\">[</span><span class=\"n\">j</span><span class=\"p\">],</span> <span class=\"n\">d</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span>\n<span class=\"p\">}</span>\n<span class=\"k\">func</span> <span class=\"p\">(</span><span class=\"n\">d</span> <span class=\"n\">ByA</span><span class=\"p\">)</span> <span class=\"n\">Less</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"n\">j</span> <span class=\"nb\">int</span><span class=\"p\">)</span> <span class=\"n\">bool</span> <span class=\"p\">{</span>\n        <span class=\"k\">return</span> <span class=\"n\">d</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">].</span><span class=\"n\">Val</span><span class=\"p\">.</span><span class=\"n\">a</span> <span class=\"p\">&lt;</span> <span class=\"n\">d</span><span class=\"p\">[</span><span class=\"n\">j</span><span class=\"p\">].</span><span class=\"n\">Val</span><span class=\"p\">.</span><span class=\"n\">a</span>\n<span class=\"p\">}</span>\n\n<span class=\"k\">type</span> <span class=\"n\">ByB</span> <span class=\"p\">[]</span><span class=\"n\">Pair</span>\n\n<span class=\"k\">func</span> <span class=\"p\">(</span><span class=\"n\">d</span> <span class=\"n\">ByB</span><span class=\"p\">)</span> <span class=\"n\">Len</span><span class=\"p\">()</span> <span class=\"nb\">int</span> <span class=\"p\">{</span>\n        <span class=\"k\">return</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">d</span><span class=\"p\">)</span>\n<span class=\"p\">}</span>\n<span class=\"k\">func</span> <span class=\"p\">(</span><span class=\"n\">d</span> <span class=\"n\">ByB</span><span class=\"p\">)</span> <span class=\"n\">Swap</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"n\">j</span> <span class=\"nb\">int</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"n\">d</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">],</span> <span class=\"n\">d</span><span class=\"p\">[</span><span class=\"n\">j</span><span class=\"p\">]</span> <span class=\"p\">=</span> <span class=\"n\">d</span><span class=\"p\">[</span><span class=\"n\">j</span><span class=\"p\">],</span> <span class=\"n\">d</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span>\n<span class=\"p\">}</span>\n<span class=\"k\">func</span> <span class=\"p\">(</span><span class=\"n\">d</span> <span class=\"n\">ByB</span><span class=\"p\">)</span> <span class=\"n\">Less</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"n\">j</span> <span class=\"nb\">int</span><span class=\"p\">)</span> <span class=\"n\">bool</span> <span class=\"p\">{</span>\n        <span class=\"k\">return</span> <span class=\"n\">d</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">].</span><span class=\"n\">Val</span><span class=\"p\">.</span><span class=\"n\">b</span> <span class=\"p\">&lt;</span> <span class=\"n\">d</span><span class=\"p\">[</span><span class=\"n\">j</span><span class=\"p\">].</span><span class=\"n\">Val</span><span class=\"p\">.</span><span class=\"n\">b</span>\n<span class=\"p\">}</span>\n\n<span class=\"k\">type</span> <span class=\"n\">ByC</span> <span class=\"p\">[]</span><span class=\"n\">Pair</span>\n\n<span class=\"k\">func</span> <span class=\"p\">(</span><span class=\"n\">d</span> <span class=\"n\">ByC</span><span class=\"p\">)</span> <span class=\"n\">Len</span><span class=\"p\">()</span> <span class=\"nb\">int</span> <span class=\"p\">{</span>\n        <span class=\"k\">return</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">d</span><span class=\"p\">)</span>\n<span class=\"p\">}</span>\n<span class=\"k\">func</span> <span class=\"p\">(</span><span class=\"n\">d</span> <span class=\"n\">ByC</span><span class=\"p\">)</span> <span class=\"n\">Swap</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"n\">j</span> <span class=\"nb\">int</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"n\">d</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">],</span> <span class=\"n\">d</span><span class=\"p\">[</span><span class=\"n\">j</span><span class=\"p\">]</span> <span class=\"p\">=</span> <span class=\"n\">d</span><span class=\"p\">[</span><span class=\"n\">j</span><span class=\"p\">],</span> <span class=\"n\">d</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span>\n<span class=\"p\">}</span>\n<span class=\"k\">func</span> <span class=\"p\">(</span><span class=\"n\">d</span> <span class=\"n\">ByC</span><span class=\"p\">)</span> <span class=\"n\">Less</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"n\">j</span> <span class=\"nb\">int</span><span class=\"p\">)</span> <span class=\"n\">bool</span> <span class=\"p\">{</span>\n        <span class=\"k\">return</span> <span class=\"n\">d</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">].</span><span class=\"n\">Val</span><span class=\"p\">.</span><span class=\"n\">c</span> <span class=\"p\">&lt;</span> <span class=\"n\">d</span><span class=\"p\">[</span><span class=\"n\">j</span><span class=\"p\">].</span><span class=\"n\">Val</span><span class=\"p\">.</span><span class=\"n\">c</span>\n<span class=\"p\">}</span>\n\n<span class=\"k\">type</span> <span class=\"n\">Thing</span> <span class=\"k\">struct</span> <span class=\"p\">{</span>\n        <span class=\"n\">a</span>  <span class=\"nb\">int</span>\n        <span class=\"n\">b</span>  <span class=\"nb\">int</span>\n        <span class=\"n\">c</span>  <span class=\"nb\">int</span>\n<span class=\"p\">}</span>\n\n<span class=\"k\">func</span> <span class=\"n\">main</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n        <span class=\"n\">things</span> <span class=\"p\">:=</span> <span class=\"k\">map</span><span class=\"p\">[</span><span class=\"nb\">uint64</span><span class=\"p\">]*</span><span class=\"n\">Thing</span><span class=\"p\">{</span>\n                <span class=\"mi\">1</span><span class=\"p\">:</span>  <span class=\"p\">&amp;</span><span class=\"n\">Thing</span><span class=\"p\">{</span><span class=\"n\">a</span><span class=\"p\">:</span> <span class=\"mi\">8000</span><span class=\"p\">},</span>\n                <span class=\"mi\">3</span><span class=\"p\">:</span>  <span class=\"p\">&amp;</span><span class=\"n\">Thing</span><span class=\"p\">{</span><span class=\"n\">b</span><span class=\"p\">:</span> <span class=\"mi\">70</span><span class=\"p\">},</span>\n                <span class=\"mi\">7</span><span class=\"p\">:</span>  <span class=\"p\">&amp;</span><span class=\"n\">Thing</span><span class=\"p\">{},</span>\n                <span class=\"mi\">60</span><span class=\"p\">:</span> <span class=\"p\">&amp;</span><span class=\"n\">Thing</span><span class=\"p\">{</span><span class=\"n\">a</span><span class=\"p\">:</span> <span class=\"mi\">90000000</span><span class=\"p\">},</span>\n                <span class=\"mi\">90</span><span class=\"p\">:</span> <span class=\"p\">&amp;</span><span class=\"n\">Thing</span><span class=\"p\">{</span><span class=\"n\">b</span><span class=\"p\">:</span> <span class=\"mi\">180</span><span class=\"p\">},</span>\n                <span class=\"mi\">4</span><span class=\"p\">:</span>  <span class=\"p\">&amp;</span><span class=\"n\">Thing</span><span class=\"p\">{},</span>\n        <span class=\"p\">}</span>\n\n        <span class=\"c1\">// Copy the keys to sort by them</span>\n        <span class=\"n\">keys</span> <span class=\"p\">:=</span> <span class=\"nb\">make</span><span class=\"p\">([]</span><span class=\"n\">Pair</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n        <span class=\"k\">for</span> <span class=\"n\">k</span><span class=\"p\">,</span> <span class=\"n\">v</span> <span class=\"p\">:=</span> <span class=\"k\">range</span> <span class=\"n\">things</span> <span class=\"p\">{</span>\n                <span class=\"n\">keys</span> <span class=\"p\">=</span> <span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">keys</span><span class=\"p\">,</span> <span class=\"n\">Pair</span><span class=\"p\">{</span> <span class=\"n\">Key</span><span class=\"p\">:</span> <span class=\"n\">k</span><span class=\"p\">,</span> <span class=\"n\">Val</span><span class=\"p\">:</span> <span class=\"n\">v</span> <span class=\"p\">})</span>\n        <span class=\"p\">}</span>\n\n        <span class=\"n\">fmt</span><span class=\"p\">.</span><span class=\"n\">Println</span><span class=\"p\">(</span><span class=\"n\">things</span><span class=\"p\">)</span>\n        <span class=\"n\">fmt</span><span class=\"p\">.</span><span class=\"n\">Println</span><span class=\"p\">(</span><span class=\"n\">keys</span><span class=\"p\">)</span>\n\n        <span class=\"n\">sort</span><span class=\"p\">.</span><span class=\"n\">Sort</span><span class=\"p\">(</span><span class=\"n\">sort</span><span class=\"p\">.</span><span class=\"n\">Reverse</span><span class=\"p\">(</span><span class=\"n\">ByA</span><span class=\"p\">(</span><span class=\"n\">keys</span><span class=\"p\">)))</span>\n        <span class=\"k\">for</span> <span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"n\">v</span> <span class=\"p\">:=</span> <span class=\"k\">range</span> <span class=\"n\">keys</span> <span class=\"p\">{</span>\n           <span class=\"n\">fmt</span><span class=\"p\">.</span><span class=\"n\">Println</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"s\">&quot;\\t&quot;</span><span class=\"p\">,</span> <span class=\"n\">v</span><span class=\"p\">.</span><span class=\"n\">Val</span><span class=\"p\">.</span><span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">v</span><span class=\"p\">.</span><span class=\"n\">Val</span><span class=\"p\">.</span><span class=\"n\">b</span><span class=\"p\">)</span>\n        <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 42959004,
            "is_me_message": false,
            "last_edit_timestamp": 1437625096,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "waldemar.quevedo@gmail.com",
            "sender_full_name": "Waldemar Quevedo (F2'14)",
            "sender_id": 6706,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "sorting-a-map-by-val",
            "submessages": [],
            "timestamp": 1437625058,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/61f7402a76ff0aff964da46bd7948ca20279ae1f?x=x&version=1",
            "client": "website",
            "content": "<p>follow up to this is to generate the code, etc... </p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 42959055,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "waldemar.quevedo@gmail.com",
            "sender_full_name": "Waldemar Quevedo (F2'14)",
            "sender_id": 6706,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "sorting-a-map-by-val",
            "submessages": [],
            "timestamp": 1437625145,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/61f7402a76ff0aff964da46bd7948ca20279ae1f?x=x&version=1",
            "client": "website",
            "content": "<p>too much plumbing IMO</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 42959060,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "waldemar.quevedo@gmail.com",
            "sender_full_name": "Waldemar Quevedo (F2'14)",
            "sender_id": 6706,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "sorting-a-map-by-val",
            "submessages": [],
            "timestamp": 1437625176,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/6527e077e84e20214d5373101ea15910d6b6f7a3?x=x&version=1",
            "client": "website",
            "content": "<p>So am currently using go to access a JSON api. After creating my structs that will read in the data (with a lot of help from <a href=\"https://github.com/chimeracoder/gojson\" target=\"_blank\" title=\"https://github.com/chimeracoder/gojson\">gojson</a>), I would like to diff subsequent api calls off of the previous api call. It appears as though I can compare values between them using go's <a href=\"http://golang.org/pkg/reflect/\" target=\"_blank\" title=\"http://golang.org/pkg/reflect/\">reflect package</a>, but I haven't managed to figure out how to create a 3rd struct that saves the differences between the 2 that I'll have.<br>\nSo I figured I'd bring it to Zulip to see if diffing structs is even the right approach to getting the difference between two api calls (to the same api).</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 42990185,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "steve@redlua.com",
            "sender_full_name": "Steven McCarthy (he) (SP2'15)",
            "sender_id": 7871,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "diff'ing golang structs",
            "submessages": [],
            "timestamp": 1437685252,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/6527e077e84e20214d5373101ea15910d6b6f7a3?x=x&version=1",
            "client": "website",
            "content": "<p>And if it <strong>is</strong> the right approach, how do I create a 3rd struct that contains only the differences between the 2 original structs.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 42990388,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "steve@redlua.com",
            "sender_full_name": "Steven McCarthy (he) (SP2'15)",
            "sender_id": 7871,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "diff'ing golang structs",
            "submessages": [],
            "timestamp": 1437685556,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/4caef236e2bd75fb71e3235d4ae0098d135a6bdf?x=x&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>Our intern built this: <a href=\"https://github.com/uber/go-torch\" target=\"_blank\" title=\"https://github.com/uber/go-torch\">https://github.com/uber/go-torch</a></p>\n<p>It lets you easily produce flame-graph profiles to see where your web applications are spending most of its time. It's really cool and currently the top trending go project on github!</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 43005417,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "chenmonitor@gmail.com",
            "sender_full_name": "Chen Lin (W'14)",
            "sender_id": 4992,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "flame profiling!",
            "submessages": [],
            "timestamp": 1437717187,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/61f7402a76ff0aff964da46bd7948ca20279ae1f?x=x&version=1",
            "client": "website",
            "content": "<p>wondered if ok to have many defers, turns out behavior is as follows:</p>\n<div class=\"codehilite\"><pre>#+BEGIN_SRC go :results output\npackage main\n\nimport &quot;fmt&quot;\n\nfunc main(){\n  defer func(){\n    fmt.Println(&quot;1&quot;)\n  }()\n\n  defer func(){\n    fmt.Println(&quot;2&quot;)\n  }()\n  fmt.Println(&quot;------------------------------&quot;)\n}\n#+END_SRC\n\n#+RESULTS:\n: ------------------------------\n: 2\n: 1\n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 43572778,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "waldemar.quevedo@gmail.com",
            "sender_full_name": "Waldemar Quevedo (F2'14)",
            "sender_id": 6706,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "golang-defers-aha-moments",
            "submessages": [],
            "timestamp": 1438885014,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/1380ded36dafac0d6f808b9b7b6c4e85266428a1?x=x&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"steve@redlua.com\">@Steven McCarthy (SP2'15)</span> , I just saw this today, and it may be of interest to you: <a href=\"https://github.com/d4l3k/messagediff\" target=\"_blank\" title=\"https://github.com/d4l3k/messagediff\">https://github.com/d4l3k/messagediff</a></p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 44078768,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "travis@mcdem.us",
            "sender_full_name": "Travis McDemus (S'13)",
            "sender_id": 2139,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "diff'ing golang structs",
            "submessages": [],
            "timestamp": 1439341162,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/6527e077e84e20214d5373101ea15910d6b6f7a3?x=x&version=1",
            "client": "website",
            "content": "<p>Thanks <span class=\"user-mention\" data-user-email=\"travis@mcdem.us\">@Travis McDemus (S'13)</span>, the use of the switch statement on reflect Kinds was very useful.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 44676570,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "steve@redlua.com",
            "sender_full_name": "Steven McCarthy (he) (SP2'15)",
            "sender_id": 7871,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "diff'ing golang structs",
            "submessages": [],
            "timestamp": 1439839222,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/6527e077e84e20214d5373101ea15910d6b6f7a3?x=x&version=1",
            "client": "website",
            "content": "<p>As to my original problem, the only thing I can think of for diffing arbitrary structs is to pass 3 structs in, the 2 to compare, and a reference to a 3rd to fill out.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 44676609,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "steve@redlua.com",
            "sender_full_name": "Steven McCarthy (he) (SP2'15)",
            "sender_id": 7871,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "diff'ing golang structs",
            "submessages": [],
            "timestamp": 1439839252,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/6527e077e84e20214d5373101ea15910d6b6f7a3?x=x&version=1",
            "client": "website",
            "content": "<p>Or perhaps reflect.New(), now that I think about it.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 44676634,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "steve@redlua.com",
            "sender_full_name": "Steven McCarthy (he) (SP2'15)",
            "sender_id": 7871,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "diff'ing golang structs",
            "submessages": [],
            "timestamp": 1439839269,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/61f7402a76ff0aff964da46bd7948ca20279ae1f?x=x&version=1",
            "client": "website",
            "content": "<p>Interesting proposal from Dave Cheney for golang projects releases: <a href=\"https://github.com/golang/go/issues/12302\" target=\"_blank\" title=\"https://github.com/golang/go/issues/12302\">https://github.com/golang/go/issues/12302</a></p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 45727431,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "waldemar.quevedo@gmail.com",
            "sender_full_name": "Waldemar Quevedo (F2'14)",
            "sender_id": 6706,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "semver in go",
            "submessages": [],
            "timestamp": 1440691245,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/61f7402a76ff0aff964da46bd7948ca20279ae1f?x=x&version=1",
            "client": "website",
            "content": "<p>One thing that I like about his proposal is that it is not being conservative on the dependencies locking, and leaves that part open or out of scope.  Semver is great but dependencies hard locking via semver (\"less than 0.2.X\"), does not really work in my opinion.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 45730862,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "waldemar.quevedo@gmail.com",
            "sender_full_name": "Waldemar Quevedo (F2'14)",
            "sender_id": 6706,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "semver in go",
            "submessages": [],
            "timestamp": 1440693608,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/f6bd929465d6d225def8062d5a9d3f3f?d=identicon&version=1",
            "client": "website",
            "content": "<p>How can I find out how much stuff I've packed into a buffered channel? I feel like this should be easy to look up but I'm somehow not able to find out how to do this.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 46999067,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "danluu@gmail.com",
            "sender_full_name": "Dan Luu (W'13)",
            "sender_id": 820,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "buffered channel",
            "submessages": [],
            "timestamp": 1442128518,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/b0aaf017ede1c6cd8f546531ead124bbed75fabe?x=x&version=4",
            "client": "website",
            "content": "<p>Just tried messing around with stuff, it appears using <code>len(channelName)</code> does the trick.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 47007453,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "brad@isbrad.com",
            "sender_full_name": "Bradley Boccuzzi (he/they) (S1'15)",
            "sender_id": 8094,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "buffered channel",
            "submessages": [],
            "timestamp": 1442154070,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/b0aaf017ede1c6cd8f546531ead124bbed75fabe?x=x&version=4",
            "client": "website",
            "content": "<p><a href=\"http://golang.org/pkg/builtin/#len\" target=\"_blank\" title=\"http://golang.org/pkg/builtin/#len\">http://golang.org/pkg/builtin/#len</a></p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 47007491,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "brad@isbrad.com",
            "sender_full_name": "Bradley Boccuzzi (he/they) (S1'15)",
            "sender_id": 8094,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "buffered channel",
            "submessages": [],
            "timestamp": 1442154206,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/b0aaf017ede1c6cd8f546531ead124bbed75fabe?x=x&version=4",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"danluu@gmail.com\">@Dan Luu (W'13)</span> </p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 47007493,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "brad@isbrad.com",
            "sender_full_name": "Bradley Boccuzzi (he/they) (S1'15)",
            "sender_id": 8094,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "buffered channel",
            "submessages": [],
            "timestamp": 1442154234,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/f6bd929465d6d225def8062d5a9d3f3f?d=identicon&version=1",
            "client": "website",
            "content": "<p>Thanks! I tried that to see if it would work.... but I screwed up and printed the wrong thing out and confused myself. <img alt=\":confounded:\" class=\"emoji\" src=\"static/third/gemoji/images/emoji/confounded.png\" title=\":confounded:\"> </p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 47010891,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "danluu@gmail.com",
            "sender_full_name": "Dan Luu (W'13)",
            "sender_id": 820,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "buffered channel",
            "submessages": [],
            "timestamp": 1442163892,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/61f7402a76ff0aff964da46bd7948ca20279ae1f?x=x&version=1",
            "client": "website",
            "content": "<p>Found out the hard way (meaning that had to investigate what is going on) that Go does not support handling of <code>SIGCONT</code>...</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 47240084,
            "is_me_message": false,
            "last_edit_timestamp": 1442603054,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "waldemar.quevedo@gmail.com",
            "sender_full_name": "Waldemar Quevedo (F2'14)",
            "sender_id": 6706,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "handling-sigcont",
            "submessages": [],
            "timestamp": 1442603034,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/61f7402a76ff0aff964da46bd7948ca20279ae1f?x=x&version=1",
            "client": "website",
            "content": "<p><a href=\"https://github.com/golang/go/issues/8953\" target=\"_blank\" title=\"https://github.com/golang/go/issues/8953\">https://github.com/golang/go/issues/8953</a></p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 47240126,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "waldemar.quevedo@gmail.com",
            "sender_full_name": "Waldemar Quevedo (F2'14)",
            "sender_id": 6706,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "handling-sigcont",
            "submessages": [],
            "timestamp": 1442603061,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/61f7402a76ff0aff964da46bd7948ca20279ae1f?x=x&version=1",
            "client": "website",
            "content": "<p>So if you press ctrl-z and suspend a terminal based application, it is not possible to handle gracefully :/ </p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 47240165,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "waldemar.quevedo@gmail.com",
            "sender_full_name": "Waldemar Quevedo (F2'14)",
            "sender_id": 6706,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "handling-sigcont",
            "submessages": [],
            "timestamp": 1442603137,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/1380ded36dafac0d6f808b9b7b6c4e85266428a1?x=x&version=1",
            "client": "website",
            "content": "<p>Neat / ouch.  What are you building?</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 47470951,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "travis@mcdem.us",
            "sender_full_name": "Travis McDemus (S'13)",
            "sender_id": 2139,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "handling-sigcont",
            "submessages": [],
            "timestamp": 1443064375,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/1380ded36dafac0d6f808b9b7b6c4e85266428a1?x=x&version=1",
            "client": "website",
            "content": "<p>I haven't messed with the <code>os/signal</code> package much, but I remember having to actually build one of my command line tools with <code>go build</code> in order to catch a SIGINT (from typing Ctrl-C) to do some clean-up of all processes I was launching with the tool.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 47471007,
            "is_me_message": false,
            "last_edit_timestamp": 1443064562,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "travis@mcdem.us",
            "sender_full_name": "Travis McDemus (S'13)",
            "sender_id": 2139,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "handling-sigcont",
            "submessages": [],
            "timestamp": 1443064458,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/61f7402a76ff0aff964da46bd7948ca20279ae1f?x=x&version=1",
            "client": "website",
            "content": "<p>It is for a simple (or so I thought!) termbox-go based application which regularly polls an http endpoint and displays data. Problem started due to termbox-go starts disabling SIGIO meaning that SIGTSP signal would not be recognized. I forked termbox then to activate it and make ctrl-z work once again, only to find out that the state from the terminal was all broken now so I thought \"I will handle SIGCONT then and refresh the state gracefully\",  and as the saying goes turns out I had two problems...</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 47475217,
            "is_me_message": false,
            "last_edit_timestamp": 1443073693,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "waldemar.quevedo@gmail.com",
            "sender_full_name": "Waldemar Quevedo (F2'14)",
            "sender_id": 6706,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "handling-sigcont",
            "submessages": [],
            "timestamp": 1443073666,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/61f7402a76ff0aff964da46bd7948ca20279ae1f?x=x&version=1",
            "client": "website",
            "content": "<p>I did find workarounds though, using another cgo library which makes it possible to handle SIGCONT, but having to fork a library then introduce yet another dependency (which looks brittle too...) seemed too much just for ctrl-z support so just left it disable for now... (/cc <span class=\"user-mention\" data-user-email=\"tom@hackerschool.com\">@Tom Ballinger</span>  you might find that story interesting possibly)</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 47475313,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "waldemar.quevedo@gmail.com",
            "sender_full_name": "Waldemar Quevedo (F2'14)",
            "sender_id": 6706,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "handling-sigcont",
            "submessages": [],
            "timestamp": 1443073919,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/1380ded36dafac0d6f808b9b7b6c4e85266428a1?x=x&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>Hmm, interesting. Thanks for sharing that, <span class=\"user-mention\" data-user-email=\"bradley.boccuzzi@gmail.com\">@Bradley Boccuzzi (S1'15)</span> and I have been working on programs utilizing termbox-go so it is good to know.  (Brad, did you run into this at all with amiga or tracker stuff?)</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 47554354,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "travis@mcdem.us",
            "sender_full_name": "Travis McDemus (S'13)",
            "sender_id": 2139,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "handling-sigcont",
            "submessages": [],
            "timestamp": 1443220879,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/1380ded36dafac0d6f808b9b7b6c4e85266428a1?x=x&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>I'm interested in parsing some Java so I can manipulate the source code in some simple ways. I can pull this off in the short term with regular expressions (and have in the past), but it'd be disposable code and eventually be untenable for what I'm actually trying to do.  Does anyone know of any idiomatically written, open-source Go libraries that can be used to parse Java, even if they're incomplete?</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 47554779,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "travis@mcdem.us",
            "sender_full_name": "Travis McDemus (S'13)",
            "sender_id": 2139,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "Parsing Java",
            "submessages": [],
            "timestamp": 1443221654,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/1380ded36dafac0d6f808b9b7b6c4e85266428a1?x=x&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>paging <span class=\"user-mention\" data-user-email=\"jay@jayschwa.net\">@Jay Weisskopf (W'13)</span> <span class=\"user-mention\" data-user-email=\"samer@samertm.com\">@Samer Masterson (S'14)</span> </p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 47554794,
            "is_me_message": false,
            "last_edit_timestamp": 1443221721,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "travis@mcdem.us",
            "sender_full_name": "Travis McDemus (S'13)",
            "sender_id": 2139,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "Parsing Java",
            "submessages": [],
            "timestamp": 1443221705,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/b0aaf017ede1c6cd8f546531ead124bbed75fabe?x=x&version=4",
            "client": "website",
            "content": "<p>What did I do?</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 47556127,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "brad@isbrad.com",
            "sender_full_name": "Bradley Boccuzzi (he/they) (S1'15)",
            "sender_id": 8094,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "handling-sigcont",
            "submessages": [],
            "timestamp": 1443224254,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/b0aaf017ede1c6cd8f546531ead124bbed75fabe?x=x&version=4",
            "client": "website",
            "content": "<p>Oh wait...</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 47556130,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "brad@isbrad.com",
            "sender_full_name": "Bradley Boccuzzi (he/they) (S1'15)",
            "sender_id": 8094,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "handling-sigcont",
            "submessages": [],
            "timestamp": 1443224267,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/b0aaf017ede1c6cd8f546531ead124bbed75fabe?x=x&version=4",
            "client": "website",
            "content": "<p>I read that wrong..</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 47556133,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "brad@isbrad.com",
            "sender_full_name": "Bradley Boccuzzi (he/they) (S1'15)",
            "sender_id": 8094,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "handling-sigcont",
            "submessages": [],
            "timestamp": 1443224275,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/b0aaf017ede1c6cd8f546531ead124bbed75fabe?x=x&version=4",
            "client": "website",
            "content": "<p>I remember that I had trouble initializing Portaudio-Go and termbox-Go in a certain sequence and would cause the program to crash (I do not know why). And cannot actually ctrl-z, ctrl-c, ctrl-x until it is actually implemented in the event handler.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 47556175,
            "is_me_message": false,
            "last_edit_timestamp": 1443224378,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "brad@isbrad.com",
            "sender_full_name": "Bradley Boccuzzi (he/they) (S1'15)",
            "sender_id": 8094,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "handling-sigcont",
            "submessages": [],
            "timestamp": 1443224355,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/61f7402a76ff0aff964da46bd7948ca20279ae1f?x=x&version=1",
            "client": "website",
            "content": "<p>yeah, you cannot use use any of those, you can listen for the ctrl-z key pressed events and simulate things like ctrl-c to exit though, but ctrl-z, yeah I gave up...</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 47568161,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "waldemar.quevedo@gmail.com",
            "sender_full_name": "Waldemar Quevedo (F2'14)",
            "sender_id": 6706,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "handling-sigcont",
            "submessages": [],
            "timestamp": 1443254201,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/044b59a59f2bfb736b3142db2cd025ca?d=identicon&version=1",
            "client": "website",
            "content": "<p>OMG, I just noticed I'm giving my talk immediately before Alan Donovan, the author of go/types.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 47798579,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "hi@filippo.io",
            "sender_full_name": "Filippo Valsorda (F2'17)",
            "sender_id": 2884,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "talk",
            "submessages": [],
            "timestamp": 1443717159,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/044b59a59f2bfb736b3142db2cd025ca?d=identicon&version=1",
            "client": "website",
            "content": "<p>Impostor syndrome time!</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 47798588,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "hi@filippo.io",
            "sender_full_name": "Filippo Valsorda (F2'17)",
            "sender_id": 2884,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "talk",
            "submessages": [],
            "timestamp": 1443717175,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/1380ded36dafac0d6f808b9b7b6c4e85266428a1?x=x&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>wish I coulda seen it!</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 48009613,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "travis@mcdem.us",
            "sender_full_name": "Travis McDemus (S'13)",
            "sender_id": 2139,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "talk",
            "submessages": [],
            "timestamp": 1444168286,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/1380ded36dafac0d6f808b9b7b6c4e85266428a1?x=x&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>I had trouble justifying buying a ticket to gotham go this year after splurging on gohercon, though. (it was the opposite case last year...)</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 48009642,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "travis@mcdem.us",
            "sender_full_name": "Travis McDemus (S'13)",
            "sender_id": 2139,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "talk",
            "submessages": [],
            "timestamp": 1444168318,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/044b59a59f2bfb736b3142db2cd025ca?d=identicon&version=1",
            "client": "website",
            "content": "<p>Daaaamn, I might have had free tickets :(</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 48015956,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "hi@filippo.io",
            "sender_full_name": "Filippo Valsorda (F2'17)",
            "sender_id": 2884,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "talk",
            "submessages": [],
            "timestamp": 1444173563,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/044b59a59f2bfb736b3142db2cd025ca?d=identicon&version=1",
            "client": "website",
            "content": "<p>Videos will come online, debating wether to upload my screen + voice recording.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 48015977,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "hi@filippo.io",
            "sender_full_name": "Filippo Valsorda (F2'17)",
            "sender_id": 2884,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "talk",
            "submessages": [],
            "timestamp": 1444173591,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/044b59a59f2bfb736b3142db2cd025ca?d=identicon&version=1",
            "client": "website",
            "content": "<p>Go makes static analysis and automatic code generation a pleasure. <a href=\"https://github.com/miekg/dns/pull/274\" target=\"_blank\" title=\"https://github.com/miekg/dns/pull/274\">https://github.com/miekg/dns/pull/274</a></p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 48037852,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "hi@filippo.io",
            "sender_full_name": "Filippo Valsorda (F2'17)",
            "sender_id": 2884,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "code generation",
            "submessages": [],
            "timestamp": 1444194339,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/044b59a59f2bfb736b3142db2cd025ca?d=identicon&version=1",
            "client": "website",
            "content": "<p>I got asked for dead-tree books on Go, recommendations? </p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 48038172,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "hi@filippo.io",
            "sender_full_name": "Filippo Valsorda (F2'17)",
            "sender_id": 2884,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "books`",
            "submessages": [],
            "timestamp": 1444194701,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/1380ded36dafac0d6f808b9b7b6c4e85266428a1?x=x&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>I think Caleb Doxsey's \"An Introduction to Programming with Go\" is thoughtfully put together. It is interesting to read, even on a meta level of how computer programming is taught from scratch with Go. The tour of the standard library toward to the end has some nice, concise programs too (TCP connections, etc.)</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 48080779,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "travis@mcdem.us",
            "sender_full_name": "Travis McDemus (S'13)",
            "sender_id": 2139,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "books`",
            "submessages": [],
            "timestamp": 1444232405,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/1380ded36dafac0d6f808b9b7b6c4e85266428a1?x=x&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>I'm still waiting on my pre-order of \"The Go Programming Language\" by Alan Donovan and Brian Kerighan &gt;_&lt;</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 48080863,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "travis@mcdem.us",
            "sender_full_name": "Travis McDemus (S'13)",
            "sender_id": 2139,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "books`",
            "submessages": [],
            "timestamp": 1444232486,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/1380ded36dafac0d6f808b9b7b6c4e85266428a1?x=x&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>Cool!  beta test your screen / voice recording here with RC ;)  I'd enjoy being able to check it out!</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 48081291,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "travis@mcdem.us",
            "sender_full_name": "Travis McDemus (S'13)",
            "sender_id": 2139,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "talk",
            "submessages": [],
            "timestamp": 1444232846,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/1380ded36dafac0d6f808b9b7b6c4e85266428a1?x=x&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>Cool.  Nice use of the template package. </p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 48081444,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "travis@mcdem.us",
            "sender_full_name": "Travis McDemus (S'13)",
            "sender_id": 2139,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "code generation",
            "submessages": [],
            "timestamp": 1444232993,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/1380ded36dafac0d6f808b9b7b6c4e85266428a1?x=x&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>I was coincidentally reading how they generate code in the gomobile project (which is still experimental).  An interesting read: <a href=\"https://github.com/golang/mobile/blob/master/bind/gengo.go\" target=\"_blank\" title=\"https://github.com/golang/mobile/blob/master/bind/gengo.go\">https://github.com/golang/mobile/blob/master/bind/gengo.go</a></p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 48081563,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "travis@mcdem.us",
            "sender_full_name": "Travis McDemus (S'13)",
            "sender_id": 2139,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "code generation",
            "submessages": [],
            "timestamp": 1444233078,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/044b59a59f2bfb736b3142db2cd025ca?d=identicon&version=1",
            "client": "website",
            "content": "<p>:D <span class=\"user-mention\" data-user-email=\"travis@mcdem.us\">@Travis McDemus (S'13)</span> <a href=\"https://vimeo.com/141698770\" target=\"_blank\" title=\"https://vimeo.com/141698770\">https://vimeo.com/141698770</a> Password: recurse</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 48088155,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "hi@filippo.io",
            "sender_full_name": "Filippo Valsorda (F2'17)",
            "sender_id": 2884,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "talk",
            "submessages": [],
            "timestamp": 1444242082,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/044b59a59f2bfb736b3142db2cd025ca?d=identicon&version=1",
            "client": "website",
            "content": "<p>(still converting)</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 48088160,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "hi@filippo.io",
            "sender_full_name": "Filippo Valsorda (F2'17)",
            "sender_id": 2884,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "talk",
            "submessages": [],
            "timestamp": 1444242086,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/0a35beaf5a354dafdf10494c0313e10fffc154fd?x=x&version=1",
            "client": "website",
            "content": "<p>Our CTO is giving a talk at Spring HQ called: GoLang at Spring - 1 codebase, 2.5 years, 22 developers, 99% Go. It's TODAY at Spring HQ in Flatiron, and I unfortunately won't be there but anyone who's interested should definitely come out! Link: <a href=\"http://www.eventbrite.com/e/golang-at-spring-1-codebase-25-years-22-developers-99-go-tickets-19407586614\" target=\"_blank\" title=\"http://www.eventbrite.com/e/golang-at-spring-1-codebase-25-years-22-developers-99-go-tickets-19407586614\">http://www.eventbrite.com/e/golang-at-spring-1-codebase-25-years-22-developers-99-go-tickets-19407586614</a></p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 49795500,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "maia.mcc@gmail.com",
            "sender_full_name": "Maia McCormick (she) (S2'14)",
            "sender_id": 6175,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "99% Go (talk at Spring TODAY)",
            "submessages": [],
            "timestamp": 1447861587,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/0a35beaf5a354dafdf10494c0313e10fffc154fd?x=x&version=1",
            "client": "website",
            "content": "<p>(Also you get to see our swanky swanky office and eat free food/drink free beverages.)</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 49795504,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "maia.mcc@gmail.com",
            "sender_full_name": "Maia McCormick (she) (S2'14)",
            "sender_id": 6175,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "99% Go (talk at Spring TODAY)",
            "submessages": [],
            "timestamp": 1447861606,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/a179bb8c3fc4ab0975954f57d47fa6c53a8c2dad?x=x&version=2",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"maia.mcc@gmail.com\">@Maia McCormick (S'14)</span> sounds interesting. Do you know if it's going to be recorded?</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 49799806,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "jay@jayschwa.net",
            "sender_full_name": "Jay Weisskopf Petacat (W2'17)",
            "sender_id": 829,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "99% Go (talk at Spring TODAY)",
            "submessages": [],
            "timestamp": 1447868463,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/0a35beaf5a354dafdf10494c0313e10fffc154fd?x=x&version=1",
            "client": "website",
            "content": "<p>For anyone who couldn't make it but still wants to hear what was talked about: <a href=\"https://www.youtube.com/watch?v=5xTNCTD0B4M\" target=\"_blank\" title=\"https://www.youtube.com/watch?v=5xTNCTD0B4M\">https://www.youtube.com/watch?v=5xTNCTD0B4M</a></p>\n<div class=\"message_inline_image\"><a href=\"https://www.youtube.com/watch?v=5xTNCTD0B4M\" target=\"_blank\" title=\"https://www.youtube.com/watch?v=5xTNCTD0B4M\"><img src=\"https://i.ytimg.com/vi/5xTNCTD0B4M/default.jpg\"></a></div>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 49845606,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "maia.mcc@gmail.com",
            "sender_full_name": "Maia McCormick (she) (S2'14)",
            "sender_id": 6175,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "99% Go (talk at Spring TODAY)",
            "submessages": [],
            "timestamp": 1447957189,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/0a35beaf5a354dafdf10494c0313e10fffc154fd?x=x&version=1",
            "client": "website",
            "content": "<p>^ <span class=\"user-mention\" data-user-email=\"jay@jayschwa.net\">@Jay Weisskopf (W'13)</span> </p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 49845608,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "maia.mcc@gmail.com",
            "sender_full_name": "Maia McCormick (she) (S2'14)",
            "sender_id": 6175,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "99% Go (talk at Spring TODAY)",
            "submessages": [],
            "timestamp": 1447957193,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/0a35beaf5a354dafdf10494c0313e10fffc154fd?x=x&version=1",
            "client": "website",
            "content": "<p>tl/dl (too long, didn't listen): we're spring, Go is neat, we do cool shit with Go, come work for us!</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 49845630,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "maia.mcc@gmail.com",
            "sender_full_name": "Maia McCormick (she) (S2'14)",
            "sender_id": 6175,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "99% Go (talk at Spring TODAY)",
            "submessages": [],
            "timestamp": 1447957205,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/a179bb8c3fc4ab0975954f57d47fa6c53a8c2dad?x=x&version=2",
            "client": "website",
            "content": "<p>Thanks!</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 49845659,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "jay@jayschwa.net",
            "sender_full_name": "Jay Weisskopf Petacat (W2'17)",
            "sender_id": 829,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "99% Go (talk at Spring TODAY)",
            "submessages": [],
            "timestamp": 1447957219,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/6527e077e84e20214d5373101ea15910d6b6f7a3?x=x&version=1",
            "client": "website",
            "content": "<p>The talk was good! I'd recommend it. Though be aware it's more about institutional use of go, and the benefits / drawbacks. Less of a \"How to Use\" and more of a \"Why we Use and What Happened\".</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 49846064,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "steve@redlua.com",
            "sender_full_name": "Steven McCarthy (he) (SP2'15)",
            "sender_id": 7871,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "99% Go (talk at Spring TODAY)",
            "submessages": [],
            "timestamp": 1447957897,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/1380ded36dafac0d6f808b9b7b6c4e85266428a1?x=x&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"maia.mcc@gmail.com\">@Maia McCormick (S'14)</span> Ah!  That looked pretty cool, I'll just seeing this now though, so I'll watch the video.  Anybody feel free to email or text me if there are any upcoming talks about Go happening!</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 50505014,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "travis@mcdem.us",
            "sender_full_name": "Travis McDemus (S'13)",
            "sender_id": 2139,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "99% Go (talk at Spring TODAY)",
            "submessages": [],
            "timestamp": 1449340618,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/1380ded36dafac0d6f808b9b7b6c4e85266428a1?x=x&version=1",
            "client": "website",
            "content": "<p>This is Rob Pike giving a talk called \"Simplicity is Complicated\" : <a href=\"https://www.youtube.com/watch?v=rFejpH_tAHM\" target=\"_blank\" title=\"https://www.youtube.com/watch?v=rFejpH_tAHM\">https://www.youtube.com/watch?v=rFejpH_tAHM</a>   </p>\n<div class=\"message_inline_image\"><a href=\"https://www.youtube.com/watch?v=rFejpH_tAHM\" target=\"_blank\" title=\"https://www.youtube.com/watch?v=rFejpH_tAHM\"><img src=\"https://i.ytimg.com/vi/rFejpH_tAHM/default.jpg\"></a></div>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 50505034,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "travis@mcdem.us",
            "sender_full_name": "Travis McDemus (S'13)",
            "sender_id": 2139,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "talks",
            "submessages": [],
            "timestamp": 1449340686,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/1380ded36dafac0d6f808b9b7b6c4e85266428a1?x=x&version=1",
            "client": "website",
            "content": "<p>I just re-watched it... I think it does an effective job of communicating the *philosophy* of the language, which has always been more important to helping me learn and grow as a programmer than the language itself or anything I've built in it.   </p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 50505117,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "travis@mcdem.us",
            "sender_full_name": "Travis McDemus (S'13)",
            "sender_id": 2139,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "talks",
            "submessages": [],
            "timestamp": 1449340856,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/842e08a228d86d5163ac24f95b6a92d321fc7193?x=x&version=2",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>Is there a decent (offline) REPL for Go? Preferably something that integrates with emacs?</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 50671583,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "ian@theknown.net",
            "sender_full_name": "Ian Whitlock (S'13)",
            "sender_id": 2119,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "REPL",
            "submessages": [],
            "timestamp": 1449684003,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/6527e077e84e20214d5373101ea15910d6b6f7a3?x=x&version=1",
            "client": "website",
            "content": "<p>So, long story short, Zulip's message JSON varies between stream and private messages. Both of them have the same fields, except a stream message has:</p>\n<div class=\"codehilite\"><pre><span class=\"k\">type</span> <span class=\"n\">StreamMessage</span> <span class=\"k\">struct</span> <span class=\"p\">{</span>\n    <span class=\"n\">DisplayRecipient</span> <span class=\"nb\">string</span>        <span class=\"s\">`json:&quot;display_recipient&quot;`</span>\n<span class=\"p\">}</span>\n</pre></div>\n\n\n<p>and a private message has:</p>\n<div class=\"codehilite\"><pre><span class=\"k\">type</span> <span class=\"n\">PrivateMessage</span> <span class=\"k\">struct</span> <span class=\"p\">{</span>\n    <span class=\"n\">DisplayRecipient</span> <span class=\"p\">[]</span><span class=\"k\">struct</span> <span class=\"p\">{</span>\n        <span class=\"n\">Domain</span>        <span class=\"nb\">string</span> <span class=\"s\">`json:&quot;domain&quot;`</span>\n        <span class=\"n\">Email</span>         <span class=\"nb\">string</span> <span class=\"s\">`json:&quot;email&quot;`</span>\n        <span class=\"n\">FullName</span>      <span class=\"nb\">string</span> <span class=\"s\">`json:&quot;full_name&quot;`</span>\n        <span class=\"n\">ID</span>            <span class=\"nb\">int</span>    <span class=\"s\">`json:&quot;id&quot;`</span>\n        <span class=\"n\">IsMirrorDummy</span> <span class=\"n\">bool</span>   <span class=\"s\">`json:&quot;is_mirror_dummy&quot;`</span>\n        <span class=\"n\">ShortName</span>     <span class=\"nb\">string</span> <span class=\"s\">`json:&quot;short_name&quot;`</span>\n    <span class=\"p\">}</span> <span class=\"s\">`json:&quot;display_recipient&quot;`</span>\n<span class=\"p\">}</span>\n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 51031899,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "steve@redlua.com",
            "sender_full_name": "Steven McCarthy (he) (SP2'15)",
            "sender_id": 7871,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "Good way to handle varying JSON?",
            "submessages": [],
            "timestamp": 1450393857,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/6527e077e84e20214d5373101ea15910d6b6f7a3?x=x&version=1",
            "client": "website",
            "content": "<p>I'm wondering if there's a good way to handle this, other than:<br>\n1. Having both types of display recipient<br>\n2. Making <code>DisplayRecipient</code> be an <code>interface{}</code><br>\n3. After Unmarshalling, while using the Message, type-coerce <code>DisplayRecipient</code> to one of the two</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 51031970,
            "is_me_message": false,
            "last_edit_timestamp": 1450394276,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "steve@redlua.com",
            "sender_full_name": "Steven McCarthy (he) (SP2'15)",
            "sender_id": 7871,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "Good way to handle varying JSON?",
            "submessages": [],
            "timestamp": 1450394023,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/0a35beaf5a354dafdf10494c0313e10fffc154fd?x=x&version=1",
            "client": "website",
            "content": "<p>guh. yeah, I'd make it an interface :-/</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 51035476,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "maia.mcc@gmail.com",
            "sender_full_name": "Maia McCormick (she) (S2'14)",
            "sender_id": 6175,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "Good way to handle varying JSON?",
            "submessages": [],
            "timestamp": 1450400878,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/0a35beaf5a354dafdf10494c0313e10fffc154fd?x=x&version=1",
            "client": "website",
            "content": "<p>but i'm curious if there's some shiny thing that others suggest!</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 51035512,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "maia.mcc@gmail.com",
            "sender_full_name": "Maia McCormick (she) (S2'14)",
            "sender_id": 6175,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "Good way to handle varying JSON?",
            "submessages": [],
            "timestamp": 1450400900,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/6527e077e84e20214d5373101ea15910d6b6f7a3?x=x&version=1",
            "client": "website",
            "content": "<p>So I actually had trouble implementing it with an interface. I couldn't seem to later type cast it as a string or Recipient. So instead I used <a href=\"https://golang.org/pkg/encoding/json/#RawMessage\" target=\"_blank\" title=\"https://golang.org/pkg/encoding/json/#RawMessage\">json.RawMessage</a>:</p>\n<div class=\"codehilite\"><pre><span class=\"k\">type</span> <span class=\"n\">Message</span> <span class=\"k\">struct</span> <span class=\"p\">{</span>\n    <span class=\"n\">DisplayRecipient</span> <span class=\"n\">json</span><span class=\"p\">.</span><span class=\"n\">RawMessage</span> <span class=\"s\">`json:&quot;display_recipient&quot;`</span>\n<span class=\"p\">}</span>\n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 51148297,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "steve@redlua.com",
            "sender_full_name": "Steven McCarthy (he) (SP2'15)",
            "sender_id": 7871,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "Good way to handle varying JSON?",
            "submessages": [],
            "timestamp": 1450651535,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/6527e077e84e20214d5373101ea15910d6b6f7a3?x=x&version=1",
            "client": "website",
            "content": "<p>I later Unmarshalled DisplayRecipient, attempting to coerce it to a string, or if that failed, a Recipient (which is like the struct in the original post above):</p>\n<div class=\"codehilite\"><pre><span class=\"k\">func</span> <span class=\"n\">GetDisplayRecipient</span><span class=\"p\">(</span><span class=\"n\">message</span> <span class=\"n\">Message</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"nb\">string</span><span class=\"p\">,</span> <span class=\"p\">[]</span><span class=\"n\">Recipient</span><span class=\"p\">,</span> <span class=\"n\">error</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"k\">var</span> <span class=\"n\">recstr</span> <span class=\"nb\">string</span>\n    <span class=\"n\">err</span> <span class=\"p\">:=</span> <span class=\"n\">json</span><span class=\"p\">.</span><span class=\"n\">Unmarshal</span><span class=\"p\">(</span><span class=\"n\">message</span><span class=\"p\">.</span><span class=\"n\">DisplayRecipient</span><span class=\"p\">,</span> <span class=\"p\">&amp;</span><span class=\"n\">recstr</span><span class=\"p\">)</span>\n    <span class=\"k\">if</span> <span class=\"n\">err</span> <span class=\"p\">==</span> <span class=\"n\">nil</span> <span class=\"p\">{</span>\n        <span class=\"k\">return</span> <span class=\"n\">recstr</span><span class=\"p\">,</span> <span class=\"n\">nil</span><span class=\"p\">,</span> <span class=\"n\">nil</span>\n    <span class=\"p\">}</span>\n    <span class=\"k\">if</span> <span class=\"n\">err</span><span class=\"p\">,</span> <span class=\"n\">ok</span> <span class=\"p\">:=</span> <span class=\"n\">err</span><span class=\"p\">.(*</span><span class=\"n\">json</span><span class=\"p\">.</span><span class=\"n\">UnmarshalTypeError</span><span class=\"p\">);</span> <span class=\"p\">!</span><span class=\"n\">ok</span> <span class=\"p\">{</span>\n        <span class=\"k\">return</span> <span class=\"s\">&quot;&quot;</span><span class=\"p\">,</span> <span class=\"n\">nil</span><span class=\"p\">,</span> <span class=\"n\">err</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"k\">var</span> <span class=\"n\">rs</span> <span class=\"p\">[]</span><span class=\"n\">Recipient</span>\n    <span class=\"n\">err</span> <span class=\"p\">=</span> <span class=\"n\">json</span><span class=\"p\">.</span><span class=\"n\">Unmarshal</span><span class=\"p\">(</span><span class=\"n\">message</span><span class=\"p\">.</span><span class=\"n\">DisplayRecipient</span><span class=\"p\">,</span> <span class=\"p\">&amp;</span><span class=\"n\">rs</span><span class=\"p\">)</span>\n    <span class=\"k\">if</span> <span class=\"n\">err</span> <span class=\"p\">!=</span> <span class=\"n\">nil</span> <span class=\"p\">{</span>\n        <span class=\"k\">return</span> <span class=\"s\">&quot;&quot;</span><span class=\"p\">,</span> <span class=\"n\">nil</span><span class=\"p\">,</span> <span class=\"n\">err</span>\n    <span class=\"p\">}</span>\n    <span class=\"k\">return</span> <span class=\"s\">&quot;&quot;</span><span class=\"p\">,</span> <span class=\"n\">rs</span><span class=\"p\">,</span> <span class=\"n\">nil</span>\n<span class=\"p\">}</span>\n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 51148337,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "steve@redlua.com",
            "sender_full_name": "Steven McCarthy (he) (SP2'15)",
            "sender_id": 7871,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "Good way to handle varying JSON?",
            "submessages": [],
            "timestamp": 1450651615,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/6527e077e84e20214d5373101ea15910d6b6f7a3?x=x&version=1",
            "client": "website",
            "content": "<p>Not sure if this is optimal, but it worked out.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 51148340,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "steve@redlua.com",
            "sender_full_name": "Steven McCarthy (he) (SP2'15)",
            "sender_id": 7871,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "Good way to handle varying JSON?",
            "submessages": [],
            "timestamp": 1450651634,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/6527e077e84e20214d5373101ea15910d6b6f7a3?x=x&version=1",
            "client": "website",
            "content": "<p>(And I just wanted to share my findings here)</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 51148341,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "steve@redlua.com",
            "sender_full_name": "Steven McCarthy (he) (SP2'15)",
            "sender_id": 7871,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "Good way to handle varying JSON?",
            "submessages": [],
            "timestamp": 1450651644,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/04ca5a14273f759166bbbfc15e3e400910e7a053?x=x&version=1",
            "client": "website",
            "content": "<p><a href=\"https://zulip.com/#narrow/stream/conferences/topic/GopherCon.202016\" target=\"_blank\" title=\"https://zulip.com/#narrow/stream/conferences/topic/GopherCon.202016\">Details in <code>conferences</code></a></p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 51779187,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "jdherg@gmail.com",
            "sender_full_name": "John Hergenroeder (he) (SP2'15)",
            "sender_id": 7851,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "GopherCon 2016 CfP Open",
            "submessages": [],
            "timestamp": 1452039506,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/61f7402a76ff0aff964da46bd7948ca20279ae1f?x=x&version=1",
            "client": "website",
            "content": "<p>Mind blown on the way http api for golang works: <a href=\"http://devs.cloudimmunity.com/gotchas-and-common-mistakes-in-go-golang/index.html#close_http_resp_body\" target=\"_blank\" title=\"http://devs.cloudimmunity.com/gotchas-and-common-mistakes-in-go-golang/index.html#close_http_resp_body\">http://devs.cloudimmunity.com/gotchas-and-common-mistakes-in-go-golang/index.html#close_http_resp_body</a></p>\n<p>Apparently there are two bugs when doing this then...</p>\n<div class=\"codehilite\"><pre>    resp, err := http.Get(&quot;https://api.ipify.org?format=json&quot;)\n    defer resp.Body.Close()//not ok\n    if err != nil {\n        fmt.Println(err)\n        return\n    }\n``\n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 51861990,
            "is_me_message": false,
            "last_edit_timestamp": 1452197217,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "waldemar.quevedo@gmail.com",
            "sender_full_name": "Waldemar Quevedo (F2'14)",
            "sender_id": 6706,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "golang-common-mistakes",
            "submessages": [],
            "timestamp": 1452197174,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/61f7402a76ff0aff964da46bd7948ca20279ae1f?x=x&version=1",
            "client": "website",
            "content": "<p>which got me thinking that might be useful to have a golang static analysis tool which checks whether <code>http</code> package is being properly used.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 51872315,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "waldemar.quevedo@gmail.com",
            "sender_full_name": "Waldemar Quevedo (F2'14)",
            "sender_id": 6706,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "golang-common-mistakes",
            "submessages": [],
            "timestamp": 1452215917,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/b0aaf017ede1c6cd8f546531ead124bbed75fabe?x=x&version=4",
            "client": "website",
            "content": "<p>This seems to also be applicable for other types of situations that also result in program termination upon error such as opening a file that does not exist; i.e. <code>Defer</code>ing the <code>Close()</code> of a file...</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 51875365,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "brad@isbrad.com",
            "sender_full_name": "Bradley Boccuzzi (he/they) (S1'15)",
            "sender_id": 8094,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "golang-common-mistakes",
            "submessages": [],
            "timestamp": 1452222713,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/b0aaf017ede1c6cd8f546531ead124bbed75fabe?x=x&version=4",
            "client": "website",
            "content": "<p>Any practical application of this built-in type?</p>\n<blockquote>\n<p>uintptr is an integer type that is large enough to hold the bit pattern of any pointer.</p>\n</blockquote>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 51950572,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "brad@isbrad.com",
            "sender_full_name": "Bradley Boccuzzi (he/they) (S1'15)",
            "sender_id": 8094,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "uintptr",
            "submessages": [],
            "timestamp": 1452395723,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/b0aaf017ede1c6cd8f546531ead124bbed75fabe?x=x&version=4",
            "client": "website",
            "content": "<p><a href=\"https://golang.org/pkg/builtin/#uintptr\" target=\"_blank\" title=\"https://golang.org/pkg/builtin/#uintptr\">https://golang.org/pkg/builtin/#uintptr</a></p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 51950573,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "brad@isbrad.com",
            "sender_full_name": "Bradley Boccuzzi (he/they) (S1'15)",
            "sender_id": 8094,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "uintptr",
            "submessages": [],
            "timestamp": 1452395738,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/5aac52dfb927229e729a553ff79edd8bf8cb9466?x=x&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"bradley.boccuzzi@gmail.com\">@Bradley Boccuzzi (S1'15)</span> There is a uintptr_t type in C99 and C++ which allows you to do bit operations on a pointer. (You could do this by casting to a uint32_t or uint64_t instead, but would need to know the size of a pointer for your target platform.)</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 52026171,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "qqrsmith@gmail.com",
            "sender_full_name": "Russell Smith (W'13)",
            "sender_id": 854,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "uintptr",
            "submessages": [],
            "timestamp": 1452557754,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/5aac52dfb927229e729a553ff79edd8bf8cb9466?x=x&version=1",
            "client": "website",
            "content": "<p>Here's an interesting example of XORing pointers to save space in a bidirectional linked list: <a href=\"http://stackoverflow.com/a/34458470\" target=\"_blank\" title=\"http://stackoverflow.com/a/34458470\">http://stackoverflow.com/a/34458470</a></p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 52026225,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "qqrsmith@gmail.com",
            "sender_full_name": "Russell Smith (W'13)",
            "sender_id": 854,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "uintptr",
            "submessages": [],
            "timestamp": 1452557811,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/3ca604eb0c0cfa22b4a10fc739c056c8?d=identicon&version=1",
            "client": "website",
            "content": "<p>Yes, it's highly important for cross-platform code.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 52062837,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "lukeadba@gmail.com",
            "sender_full_name": "Luke Barone-Adesi (he) (F'13)",
            "sender_id": 2903,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "uintptr",
            "submessages": [],
            "timestamp": 1452628778,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/61f7402a76ff0aff964da46bd7948ca20279ae1f?x=x&version=1",
            "client": "website",
            "content": "<p>I've been trying to implement following pattern in Go lately, whenever I have a goroutine where there could be IO errors, and need to yield these errors back to the caller by creating a struct where I hold these, then passing it via a channel and stop iteration over the channel whenever there is an error.</p>\n<p>Does that make sense?  I see that sometimes people tend to use multiple channels, one just for errors, another for results, etc... so was looking for an alternative to that style..</p>\n<div class=\"codehilite\"><pre><span class=\"k\">package</span> <span class=\"n\">main</span>\n\n<span class=\"k\">import</span> <span class=\"p\">(</span>\n    <span class=\"s\">&quot;encoding/json&quot;</span>\n    <span class=\"s\">&quot;fmt&quot;</span>\n    <span class=\"s\">&quot;io/ioutil&quot;</span>\n    <span class=\"s\">&quot;net/http&quot;</span>\n    <span class=\"s\">&quot;time&quot;</span>\n<span class=\"p\">)</span>\n\n<span class=\"c1\">// monitoringResult represents the transmission of monitoring</span>\n<span class=\"c1\">// containing an error in case there was one during</span>\n<span class=\"c1\">// or the monitoring data itself</span>\n<span class=\"k\">type</span> <span class=\"n\">monitoringResult</span> <span class=\"k\">struct</span> <span class=\"p\">{</span>\n    <span class=\"n\">err</span>      <span class=\"n\">error</span>\n    <span class=\"n\">time</span>     <span class=\"n\">time</span><span class=\"p\">.</span><span class=\"n\">Time</span>\n    <span class=\"n\">duration</span> <span class=\"n\">time</span><span class=\"p\">.</span><span class=\"n\">Duration</span>\n    <span class=\"n\">data</span>     <span class=\"n\">Data</span>\n<span class=\"p\">}</span>\n\n<span class=\"k\">type</span> <span class=\"n\">Data</span> <span class=\"k\">map</span><span class=\"p\">[</span><span class=\"nb\">string</span><span class=\"p\">]</span><span class=\"k\">interface</span><span class=\"p\">{}</span>\n\n<span class=\"c1\">// monitorData sends the monitoring results of via channel</span>\n<span class=\"c1\">// and closes when done.</span>\n<span class=\"k\">func</span> <span class=\"n\">monitorData</span><span class=\"p\">(</span><span class=\"n\">resultsCh</span> <span class=\"k\">chan</span> <span class=\"p\">*</span><span class=\"n\">monitoringResult</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"k\">defer</span> <span class=\"nb\">close</span><span class=\"p\">(</span><span class=\"n\">resultsCh</span><span class=\"p\">)</span> <span class=\"c1\">// raises stop iteration to the caller function</span>\n    <span class=\"n\">result</span> <span class=\"p\">:=</span> <span class=\"p\">&amp;</span><span class=\"n\">monitoringResult</span><span class=\"p\">{</span>\n        <span class=\"n\">data</span><span class=\"p\">:</span> <span class=\"n\">Data</span><span class=\"p\">{},</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"p\">:=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"p\">&lt;</span> <span class=\"mi\">10</span><span class=\"p\">;</span> <span class=\"n\">i</span><span class=\"p\">++</span> <span class=\"p\">{</span>\n        <span class=\"n\">result</span><span class=\"p\">.</span><span class=\"n\">time</span> <span class=\"p\">=</span> <span class=\"n\">time</span><span class=\"p\">.</span><span class=\"n\">Now</span><span class=\"p\">()</span>\n        <span class=\"n\">resp</span><span class=\"p\">,</span> <span class=\"n\">err</span> <span class=\"p\">:=</span> <span class=\"n\">http</span><span class=\"p\">.</span><span class=\"n\">Get</span><span class=\"p\">(</span><span class=\"s\">&quot;http://api.openweathermap.org/data/2.5/weather&quot;</span><span class=\"p\">)</span>\n        <span class=\"n\">result</span><span class=\"p\">.</span><span class=\"n\">duration</span> <span class=\"p\">=</span> <span class=\"n\">time</span><span class=\"p\">.</span><span class=\"n\">Now</span><span class=\"p\">().</span><span class=\"n\">Sub</span><span class=\"p\">(</span><span class=\"n\">result</span><span class=\"p\">.</span><span class=\"n\">time</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"n\">err</span> <span class=\"p\">!=</span> <span class=\"n\">nil</span> <span class=\"p\">{</span>\n            <span class=\"n\">result</span><span class=\"p\">.</span><span class=\"n\">err</span> <span class=\"p\">=</span> <span class=\"n\">err</span>\n            <span class=\"n\">resultsCh</span> <span class=\"p\">&lt;-</span> <span class=\"n\">result</span>\n            <span class=\"k\">continue</span>\n        <span class=\"p\">}</span>\n        <span class=\"c1\">// Avoid leaking a file descriptor</span>\n        <span class=\"k\">if</span> <span class=\"n\">resp</span> <span class=\"p\">!=</span> <span class=\"n\">nil</span> <span class=\"p\">{</span>\n            <span class=\"k\">defer</span> <span class=\"n\">resp</span><span class=\"p\">.</span><span class=\"n\">Body</span><span class=\"p\">.</span><span class=\"n\">Close</span><span class=\"p\">()</span>\n        <span class=\"p\">}</span>\n\n        <span class=\"n\">body</span><span class=\"p\">,</span> <span class=\"n\">err</span> <span class=\"p\">:=</span> <span class=\"n\">ioutil</span><span class=\"p\">.</span><span class=\"n\">ReadAll</span><span class=\"p\">(</span><span class=\"n\">resp</span><span class=\"p\">.</span><span class=\"n\">Body</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"n\">err</span> <span class=\"p\">!=</span> <span class=\"n\">nil</span> <span class=\"p\">{</span>\n            <span class=\"n\">result</span><span class=\"p\">.</span><span class=\"n\">err</span> <span class=\"p\">=</span> <span class=\"n\">err</span>\n            <span class=\"n\">resultsCh</span> <span class=\"p\">&lt;-</span> <span class=\"n\">result</span>\n            <span class=\"k\">continue</span>\n        <span class=\"p\">}</span>\n        <span class=\"n\">err</span> <span class=\"p\">=</span> <span class=\"n\">json</span><span class=\"p\">.</span><span class=\"n\">Unmarshal</span><span class=\"p\">(</span><span class=\"n\">body</span><span class=\"p\">,</span> <span class=\"p\">&amp;</span><span class=\"n\">result</span><span class=\"p\">.</span><span class=\"n\">data</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"n\">err</span> <span class=\"p\">!=</span> <span class=\"n\">nil</span> <span class=\"p\">{</span>\n            <span class=\"n\">result</span><span class=\"p\">.</span><span class=\"n\">err</span> <span class=\"p\">=</span> <span class=\"n\">err</span>\n            <span class=\"n\">resultsCh</span> <span class=\"p\">&lt;-</span> <span class=\"n\">result</span>\n            <span class=\"k\">continue</span>\n        <span class=\"p\">}</span>\n\n        <span class=\"n\">resultsCh</span> <span class=\"p\">&lt;-</span> <span class=\"n\">result</span>\n        <span class=\"n\">time</span><span class=\"p\">.</span><span class=\"n\">Sleep</span><span class=\"p\">(</span><span class=\"mi\">200</span> <span class=\"p\">*</span> <span class=\"n\">time</span><span class=\"p\">.</span><span class=\"n\">Millisecond</span><span class=\"p\">)</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n\n<span class=\"k\">func</span> <span class=\"n\">main</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n    <span class=\"n\">resultsCh</span> <span class=\"p\">:=</span> <span class=\"nb\">make</span><span class=\"p\">(</span><span class=\"k\">chan</span> <span class=\"p\">*</span><span class=\"n\">monitoringResult</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n    <span class=\"k\">go</span> <span class=\"n\">monitorData</span><span class=\"p\">(</span><span class=\"n\">resultsCh</span><span class=\"p\">)</span>\n    <span class=\"k\">for</span> <span class=\"n\">result</span> <span class=\"p\">:=</span> <span class=\"k\">range</span> <span class=\"n\">resultsCh</span> <span class=\"p\">{</span>\n        <span class=\"k\">if</span> <span class=\"n\">result</span><span class=\"p\">.</span><span class=\"n\">err</span> <span class=\"p\">!=</span> <span class=\"n\">nil</span> <span class=\"p\">{</span>\n            <span class=\"n\">fmt</span><span class=\"p\">.</span><span class=\"n\">Println</span><span class=\"p\">(</span><span class=\"s\">&quot;Got errors while monitoring...&quot;</span><span class=\"p\">)</span>\n            <span class=\"k\">return</span>\n        <span class=\"p\">}</span>\n        <span class=\"n\">fmt</span><span class=\"p\">.</span><span class=\"n\">Printf</span><span class=\"p\">(</span><span class=\"s\">&quot;%+v | Result: Error(%+v) Data(%+v) Delay(%+v)\\n&quot;</span><span class=\"p\">,</span> <span class=\"n\">result</span><span class=\"p\">.</span><span class=\"n\">time</span><span class=\"p\">,</span> <span class=\"n\">result</span><span class=\"p\">.</span><span class=\"n\">err</span><span class=\"p\">,</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">result</span><span class=\"p\">.</span><span class=\"n\">data</span><span class=\"p\">),</span> <span class=\"n\">result</span><span class=\"p\">.</span><span class=\"n\">duration</span><span class=\"p\">)</span>\n    <span class=\"p\">}</span>\n    <span class=\"n\">fmt</span><span class=\"p\">.</span><span class=\"n\">Println</span><span class=\"p\">(</span><span class=\"s\">&quot;Done&quot;</span><span class=\"p\">)</span>\n<span class=\"p\">}</span>\n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 52179331,
            "is_me_message": false,
            "last_edit_timestamp": 1452846228,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "waldemar.quevedo@gmail.com",
            "sender_full_name": "Waldemar Quevedo (F2'14)",
            "sender_id": 6706,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "is following good style Go?",
            "submessages": [],
            "timestamp": 1452845879,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/61f7402a76ff0aff964da46bd7948ca20279ae1f?x=x&version=1",
            "client": "website",
            "content": "<p>code above has a data race though <img alt=\":sweat_smile:\" class=\"emoji\" src=\"static/third/gemoji/images/emoji/sweat_smile.png\" title=\":sweat_smile:\"> </p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 52200201,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "waldemar.quevedo@gmail.com",
            "sender_full_name": "Waldemar Quevedo (F2'14)",
            "sender_id": 6706,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "is following good style Go?",
            "submessages": [],
            "timestamp": 1452884416,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/6527e077e84e20214d5373101ea15910d6b6f7a3?x=x&version=1",
            "client": "website",
            "content": "<p>For what it's worth, as far as code style goes, I find this very readable (the comments are great). I don't have much experience with Go channels, but I also find this to be reminiscent of the common Go pattern of returning <code>output, err := blah()</code>, only in channel form. Seems perfectly fine to me.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 52202630,
            "is_me_message": false,
            "last_edit_timestamp": 1452888076,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "steve@redlua.com",
            "sender_full_name": "Steven McCarthy (he) (SP2'15)",
            "sender_id": 7871,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "is following good style Go?",
            "submessages": [],
            "timestamp": 1452887999,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/6527e077e84e20214d5373101ea15910d6b6f7a3?x=x&version=1",
            "client": "website",
            "content": "<p>Though I'd be curious as to how this would be written in the <code>output chan</code> / <code>error chan</code> form.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 52202690,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "steve@redlua.com",
            "sender_full_name": "Steven McCarthy (he) (SP2'15)",
            "sender_id": 7871,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "is following good style Go?",
            "submessages": [],
            "timestamp": 1452888022,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/6527e077e84e20214d5373101ea15910d6b6f7a3?x=x&version=1",
            "client": "website",
            "content": "<p>Just to compare and contrast.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 52202693,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "steve@redlua.com",
            "sender_full_name": "Steven McCarthy (he) (SP2'15)",
            "sender_id": 7871,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "is following good style Go?",
            "submessages": [],
            "timestamp": 1452888030,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/6527e077e84e20214d5373101ea15910d6b6f7a3?x=x&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"waldemar.quevedo@gmail.com\">@Waldemar Quevedo (F2'14)</span> ^^</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 52202705,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "steve@redlua.com",
            "sender_full_name": "Steven McCarthy (he) (SP2'15)",
            "sender_id": 7871,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "is following good style Go?",
            "submessages": [],
            "timestamp": 1452888054,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/61f7402a76ff0aff964da46bd7948ca20279ae1f?x=x&version=1",
            "client": "website",
            "content": "<p>using two channels I guess it could be like this:</p>\n<div class=\"codehilite\"><pre><span class=\"k\">package</span> <span class=\"n\">main</span>\n\n<span class=\"k\">import</span> <span class=\"p\">(</span>\n    <span class=\"s\">&quot;encoding/json&quot;</span>\n    <span class=\"s\">&quot;fmt&quot;</span>\n    <span class=\"s\">&quot;io/ioutil&quot;</span>\n    <span class=\"s\">&quot;net/http&quot;</span>\n    <span class=\"s\">&quot;time&quot;</span>\n<span class=\"p\">)</span>\n\n<span class=\"k\">type</span> <span class=\"n\">Data</span> <span class=\"k\">map</span><span class=\"p\">[</span><span class=\"nb\">string</span><span class=\"p\">]</span><span class=\"k\">interface</span><span class=\"p\">{}</span>\n\n<span class=\"c1\">// monitorData sends the monitoring results of via channel</span>\n<span class=\"c1\">// and closes when done.</span>\n<span class=\"k\">func</span> <span class=\"n\">monitorData</span><span class=\"p\">(</span><span class=\"n\">dataCh</span> <span class=\"k\">chan</span> <span class=\"n\">Data</span><span class=\"p\">,</span> <span class=\"n\">errCh</span> <span class=\"k\">chan</span> <span class=\"n\">error</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"k\">defer</span> <span class=\"k\">func</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n        <span class=\"n\">fmt</span><span class=\"p\">.</span><span class=\"n\">Println</span><span class=\"p\">(</span><span class=\"s\">&quot;Closing data channel...&quot;</span><span class=\"p\">)</span>\n        <span class=\"nb\">close</span><span class=\"p\">(</span><span class=\"n\">dataCh</span><span class=\"p\">)</span>\n    <span class=\"p\">}()</span>\n    <span class=\"k\">defer</span> <span class=\"k\">func</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n        <span class=\"n\">fmt</span><span class=\"p\">.</span><span class=\"n\">Println</span><span class=\"p\">(</span><span class=\"s\">&quot;Closing error channel...&quot;</span><span class=\"p\">)</span>\n        <span class=\"nb\">close</span><span class=\"p\">(</span><span class=\"n\">errCh</span><span class=\"p\">)</span>\n    <span class=\"p\">}()</span>\n\n    <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"p\">:=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"p\">&lt;</span> <span class=\"mi\">10</span><span class=\"p\">;</span> <span class=\"n\">i</span><span class=\"p\">++</span> <span class=\"p\">{</span>\n        <span class=\"n\">resp</span><span class=\"p\">,</span> <span class=\"n\">err</span> <span class=\"p\">:=</span> <span class=\"n\">http</span><span class=\"p\">.</span><span class=\"n\">Get</span><span class=\"p\">(</span><span class=\"s\">&quot;http://api.openweathermap.org/data/2.5/weather&quot;</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"n\">err</span> <span class=\"p\">!=</span> <span class=\"n\">nil</span> <span class=\"p\">{</span>\n            <span class=\"n\">errCh</span> <span class=\"p\">&lt;-</span> <span class=\"n\">err</span>\n            <span class=\"k\">continue</span>\n        <span class=\"p\">}</span>\n        <span class=\"c1\">// Avoid leaking a file descriptor</span>\n        <span class=\"k\">if</span> <span class=\"n\">resp</span> <span class=\"p\">!=</span> <span class=\"n\">nil</span> <span class=\"p\">{</span>\n            <span class=\"k\">defer</span> <span class=\"n\">resp</span><span class=\"p\">.</span><span class=\"n\">Body</span><span class=\"p\">.</span><span class=\"n\">Close</span><span class=\"p\">()</span>\n        <span class=\"p\">}</span>\n\n        <span class=\"n\">body</span><span class=\"p\">,</span> <span class=\"n\">err</span> <span class=\"p\">:=</span> <span class=\"n\">ioutil</span><span class=\"p\">.</span><span class=\"n\">ReadAll</span><span class=\"p\">(</span><span class=\"n\">resp</span><span class=\"p\">.</span><span class=\"n\">Body</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"n\">err</span> <span class=\"p\">!=</span> <span class=\"n\">nil</span> <span class=\"p\">{</span>\n            <span class=\"n\">errCh</span> <span class=\"p\">&lt;-</span> <span class=\"n\">err</span>\n            <span class=\"k\">continue</span>\n        <span class=\"p\">}</span>\n        <span class=\"k\">var</span> <span class=\"n\">data</span> <span class=\"n\">Data</span>\n        <span class=\"n\">err</span> <span class=\"p\">=</span> <span class=\"n\">json</span><span class=\"p\">.</span><span class=\"n\">Unmarshal</span><span class=\"p\">(</span><span class=\"n\">body</span><span class=\"p\">,</span> <span class=\"p\">&amp;</span><span class=\"n\">data</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"n\">err</span> <span class=\"p\">!=</span> <span class=\"n\">nil</span> <span class=\"p\">{</span>\n            <span class=\"n\">errCh</span> <span class=\"p\">&lt;-</span> <span class=\"n\">err</span>\n            <span class=\"k\">continue</span>\n        <span class=\"p\">}</span>\n\n        <span class=\"n\">dataCh</span> <span class=\"p\">&lt;-</span> <span class=\"n\">data</span>\n        <span class=\"n\">time</span><span class=\"p\">.</span><span class=\"n\">Sleep</span><span class=\"p\">(</span><span class=\"mi\">50</span> <span class=\"p\">*</span> <span class=\"n\">time</span><span class=\"p\">.</span><span class=\"n\">Millisecond</span><span class=\"p\">)</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</pre></div>\n\n\n<p>and the caller would use a for/select thing:</p>\n<div class=\"codehilite\"><pre><span class=\"k\">package</span> <span class=\"n\">main</span>\n\n<span class=\"k\">import</span> <span class=\"p\">(</span>\n    <span class=\"s\">&quot;fmt&quot;</span>\n    <span class=\"s\">&quot;testing&quot;</span>\n<span class=\"p\">)</span>\n\n<span class=\"k\">func</span> <span class=\"n\">TestMonitoring</span><span class=\"p\">(</span><span class=\"n\">t</span> <span class=\"p\">*</span><span class=\"n\">testing</span><span class=\"p\">.</span><span class=\"n\">T</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"n\">errCh</span> <span class=\"p\">:=</span> <span class=\"nb\">make</span><span class=\"p\">(</span><span class=\"k\">chan</span> <span class=\"n\">error</span><span class=\"p\">)</span>\n    <span class=\"n\">dataCh</span> <span class=\"p\">:=</span> <span class=\"nb\">make</span><span class=\"p\">(</span><span class=\"k\">chan</span> <span class=\"n\">Data</span><span class=\"p\">)</span>\n    <span class=\"k\">go</span> <span class=\"n\">monitorData</span><span class=\"p\">(</span><span class=\"n\">dataCh</span><span class=\"p\">,</span> <span class=\"n\">errCh</span><span class=\"p\">)</span>\n    <span class=\"k\">for</span> <span class=\"p\">{</span>\n        <span class=\"k\">select</span> <span class=\"p\">{</span>\n        <span class=\"k\">case</span> <span class=\"n\">err</span> <span class=\"p\">:=</span> <span class=\"p\">&lt;-</span><span class=\"n\">errCh</span><span class=\"p\">:</span>\n            <span class=\"k\">if</span> <span class=\"n\">err</span> <span class=\"p\">!=</span> <span class=\"n\">nil</span> <span class=\"p\">{</span>\n                <span class=\"n\">t</span><span class=\"p\">.</span><span class=\"n\">Errorf</span><span class=\"p\">(</span><span class=\"s\">&quot;Got errors while monitoring: %s&quot;</span><span class=\"p\">,</span> <span class=\"n\">err</span><span class=\"p\">)</span>\n                <span class=\"k\">return</span>\n            <span class=\"p\">}</span>\n            <span class=\"c1\">// Otherwise, channel was just closed thus nil which is the zero value for errors value.</span>\n            <span class=\"n\">fmt</span><span class=\"p\">.</span><span class=\"n\">Println</span><span class=\"p\">(</span><span class=\"s\">&quot;Error channel was closed at this point.&quot;</span><span class=\"p\">)</span>\n        <span class=\"k\">case</span> <span class=\"n\">data</span> <span class=\"p\">:=</span> <span class=\"p\">&lt;-</span><span class=\"n\">dataCh</span><span class=\"p\">:</span>\n            <span class=\"k\">if</span> <span class=\"n\">data</span> <span class=\"p\">==</span> <span class=\"n\">nil</span> <span class=\"p\">{</span>\n                <span class=\"n\">fmt</span><span class=\"p\">.</span><span class=\"n\">Println</span><span class=\"p\">(</span><span class=\"s\">&quot;Data channel was closed so we are done&quot;</span><span class=\"p\">)</span>\n                <span class=\"k\">return</span>\n            <span class=\"p\">}</span>\n            <span class=\"n\">fmt</span><span class=\"p\">.</span><span class=\"n\">Printf</span><span class=\"p\">(</span><span class=\"s\">&quot;Data: %+v\\n&quot;</span><span class=\"p\">,</span> <span class=\"n\">data</span><span class=\"p\">)</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 52204187,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "waldemar.quevedo@gmail.com",
            "sender_full_name": "Waldemar Quevedo (F2'14)",
            "sender_id": 6706,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "is following good style Go?",
            "submessages": [],
            "timestamp": 1452890263,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/61f7402a76ff0aff964da46bd7948ca20279ae1f?x=x&version=1",
            "client": "website",
            "content": "<p>One of the things that I'm worried from the first example is that it is passing <code>chan *monitoringResult</code> pointer over a channel, thus it could be prone to subtle bugs.  Probably should be <code>chan monitoringResult</code> instead.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 52204332,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "waldemar.quevedo@gmail.com",
            "sender_full_name": "Waldemar Quevedo (F2'14)",
            "sender_id": 6706,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "is following good style Go?",
            "submessages": [],
            "timestamp": 1452890410,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/6527e077e84e20214d5373101ea15910d6b6f7a3?x=x&version=1",
            "client": "website",
            "content": "<p>So I have a project where I have this (contrived to fit in space) struct:</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 52398633,
            "is_me_message": false,
            "last_edit_timestamp": 1453324660,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "steve@redlua.com",
            "sender_full_name": "Steven McCarthy (he) (SP2'15)",
            "sender_id": 7871,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "Assigning to sub-elements within structs",
            "submessages": [],
            "timestamp": 1453324177,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/6527e077e84e20214d5373101ea15910d6b6f7a3?x=x&version=1",
            "client": "website",
            "content": "<p>.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 52398761,
            "is_me_message": false,
            "last_edit_timestamp": 1453324671,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "steve@redlua.com",
            "sender_full_name": "Steven McCarthy (he) (SP2'15)",
            "sender_id": 7871,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "Assigning to sub-elements within structs",
            "submessages": [],
            "timestamp": 1453324335,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/6527e077e84e20214d5373101ea15910d6b6f7a3?x=x&version=1",
            "client": "website",
            "content": "<p>.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 52398786,
            "is_me_message": false,
            "last_edit_timestamp": 1453324643,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "steve@redlua.com",
            "sender_full_name": "Steven McCarthy (he) (SP2'15)",
            "sender_id": 7871,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "Assigning to sub-elements within structs",
            "submessages": [],
            "timestamp": 1453324385,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/6527e077e84e20214d5373101ea15910d6b6f7a3?x=x&version=1",
            "client": "website",
            "content": "<p>Uncontriving my example to a golang playground playable version:</p>\n<div class=\"codehilite\"><pre><span class=\"k\">package</span> <span class=\"n\">main</span>\n\n<span class=\"k\">import</span> <span class=\"s\">&quot;fmt&quot;</span>\n\n<span class=\"k\">type</span> <span class=\"n\">Thing</span> <span class=\"k\">struct</span> <span class=\"p\">{</span>\n    <span class=\"n\">Element</span> <span class=\"n\">Element</span>\n<span class=\"p\">}</span>\n\n<span class=\"k\">type</span> <span class=\"n\">Element</span> <span class=\"k\">struct</span> <span class=\"p\">{</span>\n    <span class=\"n\">Games</span> <span class=\"p\">[]</span><span class=\"n\">Game</span>\n<span class=\"p\">}</span>\n\n<span class=\"k\">type</span> <span class=\"n\">Game</span> <span class=\"k\">struct</span> <span class=\"p\">{</span>\n    <span class=\"n\">Name</span> <span class=\"nb\">string</span>\n<span class=\"p\">}</span>\n\n<span class=\"k\">func</span> <span class=\"n\">main</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n    <span class=\"n\">thing</span> <span class=\"p\">:=</span> <span class=\"n\">Thing</span><span class=\"p\">{</span><span class=\"n\">Element</span><span class=\"p\">{[]</span><span class=\"n\">Game</span><span class=\"p\">{</span><span class=\"n\">Game</span><span class=\"p\">{</span><span class=\"s\">&quot;aoeu&quot;</span><span class=\"p\">}}}}</span>\n\n    <span class=\"k\">for</span> <span class=\"n\">_</span><span class=\"p\">,</span> <span class=\"n\">game</span> <span class=\"p\">:=</span> <span class=\"k\">range</span> <span class=\"n\">thing</span><span class=\"p\">.</span><span class=\"n\">Element</span><span class=\"p\">.</span><span class=\"n\">Games</span> <span class=\"p\">{</span>\n        <span class=\"n\">game</span><span class=\"p\">.</span><span class=\"n\">Name</span> <span class=\"p\">=</span> <span class=\"s\">&quot;new name&quot;</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"n\">fmt</span><span class=\"p\">.</span><span class=\"n\">Println</span><span class=\"p\">(</span><span class=\"n\">thing</span><span class=\"p\">.</span><span class=\"n\">Element</span><span class=\"p\">.</span><span class=\"n\">Games</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">].</span><span class=\"n\">Name</span><span class=\"p\">)</span> <span class=\"c1\">// &quot;aoeu&quot;</span>\n<span class=\"p\">}</span>\n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 52398955,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "steve@redlua.com",
            "sender_full_name": "Steven McCarthy (he) (SP2'15)",
            "sender_id": 7871,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "Assigning to sub-elements within structs",
            "submessages": [],
            "timestamp": 1453324635,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/60164d729bafa8c81e373fc2d00efb9c?d=identicon&version=1",
            "client": "website",
            "content": "<p><code>range</code> is giving you values, not pointers,  so <code>game</code> is a copy.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 52398991,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "bgilbert@backtick.net",
            "sender_full_name": "Benjamin Gilbert (he) (W2'16)",
            "sender_id": 8696,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "Assigning to sub-elements within structs",
            "submessages": [],
            "timestamp": 1453324685,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/6527e077e84e20214d5373101ea15910d6b6f7a3?x=x&version=1",
            "client": "website",
            "content": "<p>Hmmm. Is there a way I can get the pointers?</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 52399024,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "steve@redlua.com",
            "sender_full_name": "Steven McCarthy (he) (SP2'15)",
            "sender_id": 7871,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "Assigning to sub-elements within structs",
            "submessages": [],
            "timestamp": 1453324745,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/6527e077e84e20214d5373101ea15910d6b6f7a3?x=x&version=1",
            "client": "website",
            "content": "<p>Originally I was using range's index to access the game, but that also did not work.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 52399038,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "steve@redlua.com",
            "sender_full_name": "Steven McCarthy (he) (SP2'15)",
            "sender_id": 7871,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "Assigning to sub-elements within structs",
            "submessages": [],
            "timestamp": 1453324771,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/60164d729bafa8c81e373fc2d00efb9c?d=identicon&version=1",
            "client": "website",
            "content": "<p>hmm, that's what I was about to suggest.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 52399042,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "bgilbert@backtick.net",
            "sender_full_name": "Benjamin Gilbert (he) (W2'16)",
            "sender_id": 8696,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "Assigning to sub-elements within structs",
            "submessages": [],
            "timestamp": 1453324791,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/6527e077e84e20214d5373101ea15910d6b6f7a3?x=x&version=1",
            "client": "website",
            "content": "<p>Hmmm. It works in the playground. I'll have to see what my code might be doing different.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 52399119,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "steve@redlua.com",
            "sender_full_name": "Steven McCarthy (he) (SP2'15)",
            "sender_id": 7871,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "Assigning to sub-elements within structs",
            "submessages": [],
            "timestamp": 1453324851,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/6527e077e84e20214d5373101ea15910d6b6f7a3?x=x&version=1",
            "client": "website",
            "content": "<p>Ah. It seems I'm being shown output from prior to the thing being changed, and that it is, in fact, being changed.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 52399640,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "steve@redlua.com",
            "sender_full_name": "Steven McCarthy (he) (SP2'15)",
            "sender_id": 7871,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "Assigning to sub-elements within structs",
            "submessages": [],
            "timestamp": 1453325508,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/6527e077e84e20214d5373101ea15910d6b6f7a3?x=x&version=1",
            "client": "website",
            "content": "<p>Thanks for the help <span class=\"user-mention\" data-user-email=\"bgilbert@backtick.net\">@Benjamin Gilbert (F2'15)</span>!</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 52399644,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "steve@redlua.com",
            "sender_full_name": "Steven McCarthy (he) (SP2'15)",
            "sender_id": 7871,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "Assigning to sub-elements within structs",
            "submessages": [],
            "timestamp": 1453325516,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/6527e077e84e20214d5373101ea15910d6b6f7a3?x=x&version=1",
            "client": "website",
            "content": "<p>I realized I hadn't followed up on this in a little while. So what'd you end up going with, <span class=\"user-mention\" data-user-email=\"waldemar.quevedo@gmail.com\">@Waldemar Quevedo (F2'14)</span>?</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 52489029,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "steve@redlua.com",
            "sender_full_name": "Steven McCarthy (he) (SP2'15)",
            "sender_id": 7871,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "is following good style Go?",
            "submessages": [],
            "timestamp": 1453499038,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/6527e077e84e20214d5373101ea15910d6b6f7a3?x=x&version=1",
            "client": "website",
            "content": "<p>Also, you may be correct about subtle bugs for passing around the pointer. I was recently looking at <a href=\"https://golang.org/doc/effective_go.html#channels\" target=\"_blank\" title=\"https://golang.org/doc/effective_go.html#channels\">Effective Go</a> and they have some examples that mention subtle pointer bugs with channels:</p>\n<div class=\"codehilite\"><pre><span class=\"k\">func</span> <span class=\"n\">Serve</span><span class=\"p\">(</span><span class=\"n\">queue</span> <span class=\"k\">chan</span> <span class=\"p\">*</span><span class=\"n\">Request</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"k\">for</span> <span class=\"n\">req</span> <span class=\"p\">:=</span> <span class=\"k\">range</span> <span class=\"n\">queue</span> <span class=\"p\">{</span>\n        <span class=\"n\">sem</span> <span class=\"p\">&lt;-</span> <span class=\"mi\">1</span>\n        <span class=\"k\">go</span> <span class=\"k\">func</span><span class=\"p\">(</span><span class=\"n\">req</span> <span class=\"p\">*</span><span class=\"n\">Request</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n            <span class=\"n\">process</span><span class=\"p\">(</span><span class=\"n\">req</span><span class=\"p\">)</span>\n            <span class=\"p\">&lt;-</span><span class=\"n\">sem</span>\n        <span class=\"p\">}(</span><span class=\"n\">req</span><span class=\"p\">)</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</pre></div>\n\n\n<p>They encourage variable shadowing to ensure that the request pointer remains the exact one sent to the async function.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 52489155,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "steve@redlua.com",
            "sender_full_name": "Steven McCarthy (he) (SP2'15)",
            "sender_id": 7871,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "is following good style Go?",
            "submessages": [],
            "timestamp": 1453499216,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/61f7402a76ff0aff964da46bd7948ca20279ae1f?x=x&version=1",
            "client": "website",
            "content": "<p><code>The bug is that in a Go for loop, the loop variable is reused for each iteration, so the req variable is shared across all goroutines.</code> </p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 52506125,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "waldemar.quevedo@gmail.com",
            "sender_full_name": "Waldemar Quevedo (F2'14)",
            "sender_id": 6706,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "is following good style Go?",
            "submessages": [],
            "timestamp": 1453535053,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/61f7402a76ff0aff964da46bd7948ca20279ae1f?x=x&version=1",
            "client": "website",
            "content": "<p>yeah... can't sleep well once realized that, I though using channels for iterating would be a good idea but then these subtle bugs arise... the race detector sometimes can detect them but, still dangerous :/</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 52506135,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "waldemar.quevedo@gmail.com",
            "sender_full_name": "Waldemar Quevedo (F2'14)",
            "sender_id": 6706,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "is following good style Go?",
            "submessages": [],
            "timestamp": 1453535138,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/61f7402a76ff0aff964da46bd7948ca20279ae1f?x=x&version=1",
            "client": "website",
            "content": "<p>Though that is literally 'sharing memory by communicating', passing pointers through channels... sometimes the same one... <img alt=\":sweat:\" class=\"emoji\" src=\"static/third/gemoji/images/emoji/sweat.png\" title=\":sweat:\"> </p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 52506180,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "waldemar.quevedo@gmail.com",
            "sender_full_name": "Waldemar Quevedo (F2'14)",
            "sender_id": 6706,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "is following good style Go?",
            "submessages": [],
            "timestamp": 1453535249,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p>The same thing happens in Javascript actually.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 52514515,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "is following good style Go?",
            "submessages": [],
            "timestamp": 1453558042,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/61f7402a76ff0aff964da46bd7948ca20279ae1f?x=x&version=1",
            "client": "website",
            "content": "<p>I wonder if shadowing also help in Javascript, Effective Go ends up suggesting it as mentioned above:<br>\n\"\"\"<br>\nIt may seem odd to write <code>req := req</code> but it's legal and idiomatic in Go to do this. You get a fresh version of the variable with the same name, deliberately shadowing the loop variable locally but unique to each goroutine.<br>\n\"\"\"</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 52521027,
            "is_me_message": false,
            "last_edit_timestamp": 1453575830,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "waldemar.quevedo@gmail.com",
            "sender_full_name": "Waldemar Quevedo (F2'14)",
            "sender_id": 6706,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "is following good style Go?",
            "submessages": [],
            "timestamp": 1453575789,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/5d46121e9a899e151cfcd0e59aa9e9f8a78989e8?x=x&version=1",
            "client": "website",
            "content": "<p>Hey everyone - I'm giving a talk about Go interfaces at GopherCon India next week, and I\u2019d love some feedback from a friendly audience! </p>\n<p>The talk, titled \u201cThe Hidden Power of Humble Interfaces\u201d, is about using interface types effectively in Go. (Full description on the main page: <a href=\"http://www.gophercon.in/talk-schedule/\" target=\"_blank\" title=\"http://www.gophercon.in/talk-schedule/\">http://www.gophercon.in/talk-schedule/</a> )</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 53188908,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "aditya@adityamukerjee.net",
            "sender_full_name": "Aditya Mukerjee (he) (SP1'15)",
            "sender_id": 7644,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "interfaces in Go",
            "submessages": [],
            "timestamp": 1454972817,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/5d46121e9a899e151cfcd0e59aa9e9f8a78989e8?x=x&version=1",
            "client": "website",
            "content": "<p>I\u2019m free this Wednesday evening at 7PM if people are interested. Let me know if you\u2019d like to see it!</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 53188909,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "aditya@adityamukerjee.net",
            "sender_full_name": "Aditya Mukerjee (he) (SP1'15)",
            "sender_id": 7644,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "interfaces in Go",
            "submessages": [],
            "timestamp": 1454972819,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/5d46121e9a899e151cfcd0e59aa9e9f8a78989e8?x=x&version=1",
            "client": "website",
            "content": "<p>(x-posted from Community in case people aren't subscribed)</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 53188915,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "aditya@adityamukerjee.net",
            "sender_full_name": "Aditya Mukerjee (he) (SP1'15)",
            "sender_id": 7644,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "interfaces in Go",
            "submessages": [],
            "timestamp": 1454972831,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/6527e077e84e20214d5373101ea15910d6b6f7a3?x=x&version=1",
            "client": "website",
            "content": "<p>I wish I could be there <span class=\"user-mention\" data-user-email=\"aditya@adityamukerjee.net\">@Aditya Mukerjee (SP1'15)</span>! I'd be very interested in seeing this. I also can't figure out if talks are recorded and posted later, but if they are, I look forward to it.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 53196009,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "steve@redlua.com",
            "sender_full_name": "Steven McCarthy (he) (SP2'15)",
            "sender_id": 7871,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "interfaces in Go",
            "submessages": [],
            "timestamp": 1454987165,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/9cb15af6d0a6f7d5c2357eba58aa307f315a1c45?x=x&version=2",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"aditya@adityamukerjee.net\">@Aditya Mukerjee (SP1'15)</span> I'm interested! I haven't touched go in a while, but this piques my interest. were you thinking of presenting it remotely, or at 455 Broadway?</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 53222233,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "harry@asdfjkltech.com",
            "sender_full_name": "Harry Truong (m1'18)",
            "sender_id": 8700,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "interfaces in Go",
            "submessages": [],
            "timestamp": 1455044843,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/5d46121e9a899e151cfcd0e59aa9e9f8a78989e8?x=x&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"harry@asdfjkltech.com\">@Harry Truong (F2'15)</span> <span class=\"user-mention\" data-user-email=\"steve@redlua.com\">@Steven McCarthy (SP2'15)</span> This'll be at 455 Broadway! The presentation will be about 20-30 minutes.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 53238069,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "aditya@adityamukerjee.net",
            "sender_full_name": "Aditya Mukerjee (he) (SP1'15)",
            "sender_id": 7644,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "interfaces in Go",
            "submessages": [],
            "timestamp": 1455074484,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/6527e077e84e20214d5373101ea15910d6b6f7a3?x=x&version=1",
            "client": "website",
            "content": "<p>Sadly I'm out of town <img alt=\":cry:\" class=\"emoji\" src=\"static/third/gemoji/images/emoji/cry.png\" title=\":cry:\"> I really want to see it sometime, though <img alt=\":smiley:\" class=\"emoji\" src=\"static/third/gemoji/images/emoji/smiley.png\" title=\":smiley:\"></p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 53238106,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "steve@redlua.com",
            "sender_full_name": "Steven McCarthy (he) (SP2'15)",
            "sender_id": 7871,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "interfaces in Go",
            "submessages": [],
            "timestamp": 1455074528,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/5d46121e9a899e151cfcd0e59aa9e9f8a78989e8?x=x&version=1",
            "client": "website",
            "content": "<p>aw, that's too bad. but yeah, another time!</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 53238125,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "aditya@adityamukerjee.net",
            "sender_full_name": "Aditya Mukerjee (he) (SP1'15)",
            "sender_id": 7644,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "interfaces in Go",
            "submessages": [],
            "timestamp": 1455074618,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/9cb15af6d0a6f7d5c2357eba58aa307f315a1c45?x=x&version=2",
            "client": "website",
            "content": "<p>alright, so 7pm @ 455 Broadway. You might have an audience of one, but I'll be there! </p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 53238828,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "harry@asdfjkltech.com",
            "sender_full_name": "Harry Truong (m1'18)",
            "sender_id": 8700,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "interfaces in Go",
            "submessages": [],
            "timestamp": 1455076407,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/61f7402a76ff0aff964da46bd7948ca20279ae1f?x=x&version=1",
            "client": "website",
            "content": "<p>Somehow confused now about how to close a channel after reading this tweet and following thread: <a href=\"https://twitter.com/davecheney/status/696883109124403200\" target=\"_blank\" title=\"https://twitter.com/davecheney/status/696883109124403200\">https://twitter.com/davecheney/status/696883109124403200</a></p>\n<div class=\"inline-preview-twitter\"><div class=\"twitter-tweet\"><a href=\"https://twitter.com/davecheney/status/696883109124403200\" target=\"_blank\"><img class=\"twitter-avatar\" src=\"https://pbs.twimg.com/profile_images/511351216987590656/tjor_Tk0_normal.png\"></a><p>Tuesday #golang pop quiz:\n\nfunc Close(t chan int) \n\nwrite a function that closes t without panicing. Hint: the answer should fit in a tweet</p><span>- Dave Cheney (@davecheney)</span></div></div>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 53257305,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "waldemar.quevedo@gmail.com",
            "sender_full_name": "Waldemar Quevedo (F2'14)",
            "sender_id": 6706,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "closing a channel without panic",
            "submessages": [],
            "timestamp": 1455128528,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/61f7402a76ff0aff964da46bd7948ca20279ae1f?x=x&version=1",
            "client": "website",
            "content": "<p><img alt=\":sweat_smile:\" class=\"emoji\" src=\"static/third/gemoji/images/emoji/sweat_smile.png\" title=\":sweat_smile:\"> </p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 53257315,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "waldemar.quevedo@gmail.com",
            "sender_full_name": "Waldemar Quevedo (F2'14)",
            "sender_id": 6706,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "closing a channel without panic",
            "submessages": [],
            "timestamp": 1455128564,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/6527e077e84e20214d5373101ea15910d6b6f7a3?x=x&version=1",
            "client": "website",
            "content": "<p>That's quite a conundrum. I guess my personal solution is to just panic all the time and never close channels? <img alt=\":stuck_out_tongue_winking_eye:\" class=\"emoji\" src=\"static/third/gemoji/images/emoji/stuck_out_tongue_winking_eye.png\" title=\":stuck_out_tongue_winking_eye:\"></p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 53259296,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "steve@redlua.com",
            "sender_full_name": "Steven McCarthy (he) (SP2'15)",
            "sender_id": 7871,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "closing a channel without panic",
            "submessages": [],
            "timestamp": 1455132351,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/6527e077e84e20214d5373101ea15910d6b6f7a3?x=x&version=1",
            "client": "website",
            "content": "<p>Though I'd be very curious as to what the actual answer is.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 53259303,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "steve@redlua.com",
            "sender_full_name": "Steven McCarthy (he) (SP2'15)",
            "sender_id": 7871,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "closing a channel without panic",
            "submessages": [],
            "timestamp": 1455132363,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/6527e077e84e20214d5373101ea15910d6b6f7a3?x=x&version=1",
            "client": "website",
            "content": "<p>Oh. I guess it's this:</p>\n<div class=\"codehilite\"><pre><span class=\"k\">func</span> <span class=\"n\">Close</span><span class=\"p\">(</span><span class=\"n\">i</span> <span class=\"k\">chan</span> <span class=\"nb\">int</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n  <span class=\"k\">select</span> <span class=\"p\">{</span>\n  <span class=\"k\">case</span> <span class=\"p\">&lt;-</span><span class=\"n\">i</span><span class=\"p\">:</span>\n  <span class=\"k\">default</span><span class=\"p\">:</span> \n    <span class=\"nb\">close</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">)</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</pre></div>\n\n\n<p>or <span class=\"user-mention\" data-user-email=\"filippo.valsorda@gmail.com\">@Filippo Valsorda (F'13)</span>'s more general solution:</p>\n<div class=\"codehilite\"><pre><span class=\"k\">func</span> <span class=\"n\">Close</span><span class=\"p\">(</span><span class=\"n\">t</span> <span class=\"k\">chan</span> <span class=\"nb\">int</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n  <span class=\"k\">select</span> <span class=\"p\">{</span>\n  <span class=\"k\">case</span> <span class=\"n\">_</span><span class=\"p\">,</span> <span class=\"n\">ok</span> <span class=\"p\">:=</span> <span class=\"p\">&lt;-</span><span class=\"n\">t</span><span class=\"p\">:</span>\n    <span class=\"k\">if</span> <span class=\"n\">ok</span> <span class=\"p\">{</span>\n      <span class=\"nb\">close</span><span class=\"p\">(</span><span class=\"n\">t</span><span class=\"p\">)</span>\n    <span class=\"p\">}</span>\n  <span class=\"k\">default</span><span class=\"p\">:</span>\n    <span class=\"nb\">close</span><span class=\"p\">(</span><span class=\"n\">t</span><span class=\"p\">)</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 53259519,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "steve@redlua.com",
            "sender_full_name": "Steven McCarthy (he) (SP2'15)",
            "sender_id": 7871,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "closing a channel without panic",
            "submessages": [],
            "timestamp": 1455132710,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/6527e077e84e20214d5373101ea15910d6b6f7a3?x=x&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"filippo.valsorda@gmail.com\">@Filippo Valsorda (F'13)</span> What makes your solution more general?</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 53259574,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "steve@redlua.com",
            "sender_full_name": "Steven McCarthy (he) (SP2'15)",
            "sender_id": 7871,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "closing a channel without panic",
            "submessages": [],
            "timestamp": 1455132756,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/61f7402a76ff0aff964da46bd7948ca20279ae1f?x=x&version=1",
            "client": "website",
            "content": "<p>thought the solution still involved using a mutex</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 53263847,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "waldemar.quevedo@gmail.com",
            "sender_full_name": "Waldemar Quevedo (F2'14)",
            "sender_id": 6706,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "closing a channel without panic",
            "submessages": [],
            "timestamp": 1455141402,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/6527e077e84e20214d5373101ea15910d6b6f7a3?x=x&version=1",
            "client": "website",
            "content": "<p>I feel like they mentioned that, but because channels are already read/write safe, it wasn't necessary, or something.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 53264421,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "steve@redlua.com",
            "sender_full_name": "Steven McCarthy (he) (SP2'15)",
            "sender_id": 7871,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "closing a channel without panic",
            "submessages": [],
            "timestamp": 1455142489,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/044b59a59f2bfb736b3142db2cd025ca?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"steve@redlua.com\">@Steven McCarthy (SP2'15)</span> mine works also if there's a value to be read from the channel. If you are sure no one sent on it (i.e. it's a \"done\" channel), then you can use the shorter one.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 53280341,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "hi@filippo.io",
            "sender_full_name": "Filippo Valsorda (F2'17)",
            "sender_id": 2884,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "closing a channel without panic",
            "submessages": [],
            "timestamp": 1455193257,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/044b59a59f2bfb736b3142db2cd025ca?d=identicon&version=1",
            "client": "website",
            "content": "<p>However as Dave mentioned, they are both wrong and there's no safe one without recover(), because there's a race between when the \"default:\" is picked and when \"close()\" happens, so two goroutines might select the default while the channel is still open, and then both would try to close it, and one would panic</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 53280376,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "hi@filippo.io",
            "sender_full_name": "Filippo Valsorda (F2'17)",
            "sender_id": 2884,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "closing a channel without panic",
            "submessages": [],
            "timestamp": 1455193346,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/6527e077e84e20214d5373101ea15910d6b6f7a3?x=x&version=1",
            "client": "website",
            "content": "<p>Huh. Is that race condition something one could get around by using a mutex? <span class=\"user-mention\" data-user-email=\"filippo.valsorda@gmail.com\">@Filippo Valsorda (F'13)</span></p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 53283345,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "steve@redlua.com",
            "sender_full_name": "Steven McCarthy (he) (SP2'15)",
            "sender_id": 7871,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "closing a channel without panic",
            "submessages": [],
            "timestamp": 1455203221,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/044b59a59f2bfb736b3142db2cd025ca?d=identicon&version=1",
            "client": "website",
            "content": "<p>Yeah, with a mutex it's easy, but once you give in and use a mutex, you can then make the rest even easier</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 53292064,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "hi@filippo.io",
            "sender_full_name": "Filippo Valsorda (F2'17)",
            "sender_id": 2884,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "closing a channel without panic",
            "submessages": [],
            "timestamp": 1455222366,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/044b59a59f2bfb736b3142db2cd025ca?d=identicon&version=1",
            "client": "website",
            "content": "<p>acquire lock, check if closed, if not close it, release lock</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 53292086,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "hi@filippo.io",
            "sender_full_name": "Filippo Valsorda (F2'17)",
            "sender_id": 2884,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "closing a channel without panic",
            "submessages": [],
            "timestamp": 1455222408,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/044b59a59f2bfb736b3142db2cd025ca?d=identicon&version=1",
            "client": "website",
            "content": "<p>you can optimize for contention by using a rlock while checking and making the construction a bit more complex</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 53292095,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "hi@filippo.io",
            "sender_full_name": "Filippo Valsorda (F2'17)",
            "sender_id": 2884,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "closing a channel without panic",
            "submessages": [],
            "timestamp": 1455222449,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/6527e077e84e20214d5373101ea15910d6b6f7a3?x=x&version=1",
            "client": "website",
            "content": "<p>Are there any issues (aside from stale data) with reading from a pointer without a mutex?<br>\nFor example, if I have a hit counter (uint64) that's being updated rapidly, what are the potential pitfalls of occasionally printing out that number via a pointer reference to it?<br>\nHere's a playground for what I'm talking about: <a href=\"http://play.golang.org/p/lf8m_o_W0x\" target=\"_blank\" title=\"http://play.golang.org/p/lf8m_o_W0x\">http://play.golang.org/p/lf8m_o_W0x</a></p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 53416137,
            "is_me_message": false,
            "last_edit_timestamp": 1455558632,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "steve@redlua.com",
            "sender_full_name": "Steven McCarthy (he) (SP2'15)",
            "sender_id": 7871,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "reading from a pointer without a lock",
            "submessages": [],
            "timestamp": 1455558554,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/6527e077e84e20214d5373101ea15910d6b6f7a3?x=x&version=1",
            "client": "website",
            "content": "<p>And here's the code example itself:</p>\n<div class=\"codehilite\"><pre><span class=\"k\">package</span> <span class=\"n\">main</span>\n\n<span class=\"k\">import</span> <span class=\"s\">&quot;fmt&quot;</span>\n<span class=\"k\">import</span> <span class=\"s\">&quot;time&quot;</span>\n\n<span class=\"k\">func</span> <span class=\"n\">main</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n    <span class=\"k\">var</span> <span class=\"n\">ctr</span> <span class=\"nb\">uint64</span> <span class=\"p\">=</span> <span class=\"mi\">0</span>\n    <span class=\"n\">start</span> <span class=\"p\">:=</span> <span class=\"n\">time</span><span class=\"p\">.</span><span class=\"n\">Now</span><span class=\"p\">()</span>\n    <span class=\"k\">go</span> <span class=\"n\">PrintEverySecond</span><span class=\"p\">(&amp;</span><span class=\"n\">ctr</span><span class=\"p\">)</span>\n    <span class=\"k\">for</span> <span class=\"n\">time</span><span class=\"p\">.</span><span class=\"n\">Since</span><span class=\"p\">(</span><span class=\"n\">start</span><span class=\"p\">)</span> <span class=\"p\">&lt;</span> <span class=\"mi\">3</span><span class=\"p\">*</span><span class=\"n\">time</span><span class=\"p\">.</span><span class=\"n\">Second</span> <span class=\"p\">{</span>\n        <span class=\"n\">time</span><span class=\"p\">.</span><span class=\"n\">Sleep</span><span class=\"p\">(</span><span class=\"mi\">10</span> <span class=\"p\">*</span> <span class=\"n\">time</span><span class=\"p\">.</span><span class=\"n\">Millisecond</span><span class=\"p\">)</span>\n        <span class=\"n\">ctr</span> <span class=\"p\">+=</span> <span class=\"mi\">1</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n\n<span class=\"k\">func</span> <span class=\"n\">PrintEverySecond</span><span class=\"p\">(</span><span class=\"n\">ctr</span> <span class=\"p\">*</span><span class=\"nb\">uint64</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"k\">for</span> <span class=\"p\">{</span>\n        <span class=\"n\">time</span><span class=\"p\">.</span><span class=\"n\">Sleep</span><span class=\"p\">(</span><span class=\"mi\">100</span> <span class=\"p\">*</span> <span class=\"n\">time</span><span class=\"p\">.</span><span class=\"n\">Millisecond</span><span class=\"p\">)</span>\n        <span class=\"n\">fmt</span><span class=\"p\">.</span><span class=\"n\">Println</span><span class=\"p\">(*</span><span class=\"n\">ctr</span><span class=\"p\">)</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 53416192,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "steve@redlua.com",
            "sender_full_name": "Steven McCarthy (he) (SP2'15)",
            "sender_id": 7871,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "reading from a pointer without a lock",
            "submessages": [],
            "timestamp": 1455558664,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/7d2ab014ebf55e99afffba1a3d92be8155754f0f?x=x&version=1",
            "client": "website",
            "content": "<p>I think the data can be arbitrarily stale, so maybe be careful. The compiler is likely in its rights if it keeps the variable in a register and never updates the memory location.</p>\n<p>Also some systems don't have atomic updates of 64 bit values, so you may read a value that was never stored: upper 32 bits of v1, lower 32 bits of v2. Probably best to use atomics and play it safe.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 53418706,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "kamal@marhubi.com",
            "sender_full_name": "Kamal Marhubi (he) (m2'18)",
            "sender_id": 8090,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "reading from a pointer without a lock",
            "submessages": [],
            "timestamp": 1455563263,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/6527e077e84e20214d5373101ea15910d6b6f7a3?x=x&version=1",
            "client": "website",
            "content": "<p>So, with minimal changes from the beginning, something like this instead? <span class=\"user-mention\" data-user-email=\"kamal@marhubi.com\">@Kamal Marhubi (S1'15)</span></p>\n<div class=\"codehilite\"><pre><span class=\"k\">package</span> <span class=\"n\">main</span>\n\n<span class=\"k\">import</span> <span class=\"s\">&quot;fmt&quot;</span>\n<span class=\"k\">import</span> <span class=\"s\">&quot;time&quot;</span>\n<span class=\"k\">import</span> <span class=\"s\">&quot;sync/atomic&quot;</span> <span class=\"c1\">// new import!</span>\n\n<span class=\"k\">func</span> <span class=\"n\">main</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n    <span class=\"k\">var</span> <span class=\"n\">ctr</span> <span class=\"nb\">uint64</span> <span class=\"p\">=</span> <span class=\"mi\">0</span>\n    <span class=\"n\">start</span> <span class=\"p\">:=</span> <span class=\"n\">time</span><span class=\"p\">.</span><span class=\"n\">Now</span><span class=\"p\">()</span>\n    <span class=\"k\">go</span> <span class=\"n\">PrintEveryTenthOfSecond</span><span class=\"p\">(&amp;</span><span class=\"n\">ctr</span><span class=\"p\">)</span>\n    <span class=\"k\">for</span> <span class=\"n\">time</span><span class=\"p\">.</span><span class=\"n\">Since</span><span class=\"p\">(</span><span class=\"n\">start</span><span class=\"p\">)</span> <span class=\"p\">&lt;</span> <span class=\"mi\">3</span><span class=\"p\">*</span><span class=\"n\">time</span><span class=\"p\">.</span><span class=\"n\">Second</span> <span class=\"p\">{</span>\n        <span class=\"n\">time</span><span class=\"p\">.</span><span class=\"n\">Sleep</span><span class=\"p\">(</span><span class=\"mi\">10</span> <span class=\"p\">*</span> <span class=\"n\">time</span><span class=\"p\">.</span><span class=\"n\">Millisecond</span><span class=\"p\">)</span>\n        <span class=\"n\">ctr</span> <span class=\"p\">+=</span> <span class=\"mi\">1</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n\n<span class=\"c1\">// haha, whoops, erroneous function name</span>\n<span class=\"k\">func</span> <span class=\"n\">PrintEveryTenthOfSecond</span><span class=\"p\">(</span><span class=\"n\">ctr</span> <span class=\"p\">*</span><span class=\"nb\">uint64</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"k\">for</span> <span class=\"p\">{</span>\n        <span class=\"n\">time</span><span class=\"p\">.</span><span class=\"n\">Sleep</span><span class=\"p\">(</span><span class=\"mi\">100</span> <span class=\"p\">*</span> <span class=\"n\">time</span><span class=\"p\">.</span><span class=\"n\">Millisecond</span><span class=\"p\">)</span>\n        <span class=\"n\">fmt</span><span class=\"p\">.</span><span class=\"n\">Println</span><span class=\"p\">(</span><span class=\"n\">atomic</span><span class=\"p\">.</span><span class=\"n\">LoadUint64</span><span class=\"p\">(</span><span class=\"n\">ctr</span><span class=\"p\">))</span> <span class=\"c1\">// this line changed</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 53419003,
            "is_me_message": false,
            "last_edit_timestamp": 1455563833,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "steve@redlua.com",
            "sender_full_name": "Steven McCarthy (he) (SP2'15)",
            "sender_id": 7871,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "reading from a pointer without a lock",
            "submessages": [],
            "timestamp": 1455563773,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/6527e077e84e20214d5373101ea15910d6b6f7a3?x=x&version=1",
            "client": "website",
            "content": "<p>Though I suppose I'd need to update the counter atomically as well.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 53419013,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "steve@redlua.com",
            "sender_full_name": "Steven McCarthy (he) (SP2'15)",
            "sender_id": 7871,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "reading from a pointer without a lock",
            "submessages": [],
            "timestamp": 1455563823,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/7d2ab014ebf55e99afffba1a3d92be8155754f0f?x=x&version=1",
            "client": "website",
            "content": "<p>Yeah, you should! :-)</p>\n<p>Looks like <a href=\"https://golang.org/src/sync/atomic/doc.go?s=4243:4298#L95\" target=\"_blank\" title=\"https://golang.org/src/sync/atomic/doc.go?s=4243:4298#L95\">AddUint64</a> is the thing to use.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 53419061,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "kamal@marhubi.com",
            "sender_full_name": "Kamal Marhubi (he) (m2'18)",
            "sender_id": 8090,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "reading from a pointer without a lock",
            "submessages": [],
            "timestamp": 1455563912,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/6527e077e84e20214d5373101ea15910d6b6f7a3?x=x&version=1",
            "client": "website",
            "content": "<p>Quite.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 53419077,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "steve@redlua.com",
            "sender_full_name": "Steven McCarthy (he) (SP2'15)",
            "sender_id": 7871,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "reading from a pointer without a lock",
            "submessages": [],
            "timestamp": 1455563999,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/6527e077e84e20214d5373101ea15910d6b6f7a3?x=x&version=1",
            "client": "website",
            "content": "<p>By the by, how does the <code>atomic</code> package even work? The source code appears to have function heads <a href=\"https://golang.org/src/sync/atomic/doc.go?s=4243:4298#L95\" target=\"_blank\" title=\"https://golang.org/src/sync/atomic/doc.go?s=4243:4298#L95\">without definitions</a>.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 53419133,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "steve@redlua.com",
            "sender_full_name": "Steven McCarthy (he) (SP2'15)",
            "sender_id": 7871,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "reading from a pointer without a lock",
            "submessages": [],
            "timestamp": 1455564086,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/6527e077e84e20214d5373101ea15910d6b6f7a3?x=x&version=1",
            "client": "website",
            "content": "<p>Ah. Seems to be something with importing \"unsafe\". I'll have to look into that sometime.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 53419185,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "steve@redlua.com",
            "sender_full_name": "Steven McCarthy (he) (SP2'15)",
            "sender_id": 7871,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "reading from a pointer without a lock",
            "submessages": [],
            "timestamp": 1455564179,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/7d2ab014ebf55e99afffba1a3d92be8155754f0f?x=x&version=1",
            "client": "website",
            "content": "<p>They are special assembly instructions with weird names. The types of operations are usually things like:<br>\n- <a href=\"https://en.wikipedia.org/wiki/Fetch-and-add\" target=\"_blank\" title=\"https://en.wikipedia.org/wiki/Fetch-and-add\">fetch and add</a><br>\n- <a href=\"https://en.wikipedia.org/wiki/Compare-and-swap\" target=\"_blank\" title=\"https://en.wikipedia.org/wiki/Compare-and-swap\">compare and swap</a><br>\n- <a href=\"https://en.wikipedia.org/wiki/Test-and-set\" target=\"_blank\" title=\"https://en.wikipedia.org/wiki/Test-and-set\">test and set</a></p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 53419598,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "kamal@marhubi.com",
            "sender_full_name": "Kamal Marhubi (he) (m2'18)",
            "sender_id": 8090,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "reading from a pointer without a lock",
            "submessages": [],
            "timestamp": 1455565044,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/6527e077e84e20214d5373101ea15910d6b6f7a3?x=x&version=1",
            "client": "website",
            "content": "<p>Wow, so does that make these operations relatively cheap? <span class=\"user-mention\" data-user-email=\"kamal@marhubi.com\">@Kamal Marhubi (S1'15)</span></p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 53420266,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "steve@redlua.com",
            "sender_full_name": "Steven McCarthy (he) (SP2'15)",
            "sender_id": 7871,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "reading from a pointer without a lock",
            "submessages": [],
            "timestamp": 1455566454,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/7d2ab014ebf55e99afffba1a3d92be8155754f0f?x=x&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"steve@redlua.com\">@Steven McCarthy (SP2'15)</span> I think the expense comes in stuff around CPU cache coherence. I'm getting really out of my comfort area, but it's something like if CPU1 updates the value, and then CPU2 wants to read or update it, CPU2 needs to \"see\" the change made by CPU1. This means it has to go somewhere beyond the two CPUs' data caches, eg main memory. Accessing main memory is much slower than accessing the cache.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 53421627,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "kamal@marhubi.com",
            "sender_full_name": "Kamal Marhubi (he) (m2'18)",
            "sender_id": 8090,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "reading from a pointer without a lock",
            "submessages": [],
            "timestamp": 1455569113,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/7d2ab014ebf55e99afffba1a3d92be8155754f0f?x=x&version=1",
            "client": "website",
            "content": "<p>But I'm out of my depth in terms of speaking with confidence. This is much more an area where <span class=\"user-mention\" data-user-email=\"danluu@gmail.com\">@Dan Luu (W'13)</span> knows a lot, and has written a lot. Eg: <a href=\"http://danluu.com/new-cpu-features/#memory-caches\" target=\"_blank\" title=\"http://danluu.com/new-cpu-features/#memory-caches\">http://danluu.com/new-cpu-features/#memory-caches</a></p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 53421731,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "kamal@marhubi.com",
            "sender_full_name": "Kamal Marhubi (he) (m2'18)",
            "sender_id": 8090,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "reading from a pointer without a lock",
            "submessages": [],
            "timestamp": 1455569305,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/3ca604eb0c0cfa22b4a10fc739c056c8?d=identicon&version=1",
            "client": "website",
            "content": "<p>Generally L3 is shared between cores, and on 'big' machines (12+ core xeons), you get the added fun of non-uniform memory architecture (numa); accessing data in the cache of the same numa node is cheaper than accessing across nodes.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 53421837,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "lukeadba@gmail.com",
            "sender_full_name": "Luke Barone-Adesi (he) (F'13)",
            "sender_id": 2903,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "reading from a pointer without a lock",
            "submessages": [],
            "timestamp": 1455569549,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/3ca604eb0c0cfa22b4a10fc739c056c8?d=identicon&version=1",
            "client": "website",
            "content": "<p>And oh, the curses of people who have to actually -implement- coherent hardware caches. They're getting thornier and thornier.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 53421838,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "lukeadba@gmail.com",
            "sender_full_name": "Luke Barone-Adesi (he) (F'13)",
            "sender_id": 2903,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "reading from a pointer without a lock",
            "submessages": [],
            "timestamp": 1455569568,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/3ca604eb0c0cfa22b4a10fc739c056c8?d=identicon&version=1",
            "client": "website",
            "content": "<p>Back to the original question, in C, I'd say \"use volatile\"; I don't know if go has an equivalent.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 53421848,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "lukeadba@gmail.com",
            "sender_full_name": "Luke Barone-Adesi (he) (F'13)",
            "sender_id": 2903,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "reading from a pointer without a lock",
            "submessages": [],
            "timestamp": 1455569611,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/3ca604eb0c0cfa22b4a10fc739c056c8?d=identicon&version=1",
            "client": "website",
            "content": "<p>I wouldn't expect CPU cache coherence to make this even slightly expensive, if you're running it all on one core, which I believe the original code would be - though I don't know enough go semantics to be sure if you are. And even hitting RAM is ridiculously cheap for most programs - &lt; 80 nanoseconds. (I work on a code base where hitting RAM is expensive enough we need to amortize it. Compared to the cost of printing, though, none of this is even -slightly- relevant.)</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 53421909,
            "is_me_message": false,
            "last_edit_timestamp": 1455569956,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "lukeadba@gmail.com",
            "sender_full_name": "Luke Barone-Adesi (he) (F'13)",
            "sender_id": 2903,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "reading from a pointer without a lock",
            "submessages": [],
            "timestamp": 1455569749,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/6527e077e84e20214d5373101ea15910d6b6f7a3?x=x&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"katerinab@gmail.com\">@Katerina Barone-Adesi (F'13)</span> This is my first project which has veered off of one core. It's running on all 4. Though at the moment I think my true bottleneck might be in memory usage, not time. Ensuring that the numbers are updating and being read atomically decreases the speed by ~0.5%</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 53422591,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "steve@redlua.com",
            "sender_full_name": "Steven McCarthy (he) (SP2'15)",
            "sender_id": 7871,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "reading from a pointer without a lock",
            "submessages": [],
            "timestamp": 1455570881,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/6527e077e84e20214d5373101ea15910d6b6f7a3?x=x&version=1",
            "client": "website",
            "content": "<p>I'll have to check out what <code>\"use volatile\";</code> means, though, for extra info :)</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 53422599,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "steve@redlua.com",
            "sender_full_name": "Steven McCarthy (he) (SP2'15)",
            "sender_id": 7871,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "reading from a pointer without a lock",
            "submessages": [],
            "timestamp": 1455570915,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/3ca604eb0c0cfa22b4a10fc739c056c8?d=identicon&version=1",
            "client": "website",
            "content": "<p><a href=\"https://en.wikipedia.org/wiki/Volatile_%28computer_programming%29\" target=\"_blank\" title=\"https://en.wikipedia.org/wiki/Volatile_%28computer_programming%29\">https://en.wikipedia.org/wiki/Volatile_%28computer_programming%29</a> :)</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 53422606,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "lukeadba@gmail.com",
            "sender_full_name": "Luke Barone-Adesi (he) (F'13)",
            "sender_id": 2903,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "reading from a pointer without a lock",
            "submessages": [],
            "timestamp": 1455570946,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/3ca604eb0c0cfa22b4a10fc739c056c8?d=identicon&version=1",
            "client": "website",
            "content": "<p>Yes, doing things atomically adds non-trivial overhead.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 53422607,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "lukeadba@gmail.com",
            "sender_full_name": "Luke Barone-Adesi (he) (F'13)",
            "sender_id": 2903,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "reading from a pointer without a lock",
            "submessages": [],
            "timestamp": 1455570961,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/3ca604eb0c0cfa22b4a10fc739c056c8?d=identicon&version=1",
            "client": "website",
            "content": "<p><a href=\"http://stackoverflow.com/questions/18491032/does-go-support-volatile-non-volatile-variables\" target=\"_blank\" title=\"http://stackoverflow.com/questions/18491032/does-go-support-volatile-non-volatile-variables\">http://stackoverflow.com/questions/18491032/does-go-support-volatile-non-volatile-variables</a> seems to cover some relevant ground.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 53422657,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "lukeadba@gmail.com",
            "sender_full_name": "Luke Barone-Adesi (he) (F'13)",
            "sender_id": 2903,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "reading from a pointer without a lock",
            "submessages": [],
            "timestamp": 1455571026,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/3ca604eb0c0cfa22b4a10fc739c056c8?d=identicon&version=1",
            "client": "website",
            "content": "<p>Looks like the \"it can be arbitrary old and in a register\" thing above is correct for go.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 53422716,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "lukeadba@gmail.com",
            "sender_full_name": "Luke Barone-Adesi (he) (F'13)",
            "sender_id": 2903,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "reading from a pointer without a lock",
            "submessages": [],
            "timestamp": 1455571152,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/3ca604eb0c0cfa22b4a10fc739c056c8?d=identicon&version=1",
            "client": "website",
            "content": "<p><a href=\"https://golang.org/ref/mem\" target=\"_blank\" title=\"https://golang.org/ref/mem\">https://golang.org/ref/mem</a> is worth reading if you want to understand this stuff in go. Memory models can be annoying, but they're useful to get your head around, and vary a surprising amount by language.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 53422738,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "lukeadba@gmail.com",
            "sender_full_name": "Luke Barone-Adesi (he) (F'13)",
            "sender_id": 2903,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "reading from a pointer without a lock",
            "submessages": [],
            "timestamp": 1455571203,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/6527e077e84e20214d5373101ea15910d6b6f7a3?x=x&version=1",
            "client": "website",
            "content": "<p>Thanks a bunch <span class=\"user-mention\" data-user-email=\"katerinab@gmail.com\">@Katerina Barone-Adesi (F'13)</span>. There are a lot of good learning links here (and within those links). I personally find this quote/advice funny:</p>\n<blockquote>\n<p>Programs that modify data being simultaneously accessed by multiple goroutines must serialize such access.<br>\nTo serialize access, protect the data with channel operations or other synchronization primitives such as those in the sync and sync/atomic packages.<br>\nIf you must read the rest of this document to understand the behavior of your program, you are being too clever.<br>\nDon't be clever. </p>\n</blockquote>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 53422894,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "steve@redlua.com",
            "sender_full_name": "Steven McCarthy (he) (SP2'15)",
            "sender_id": 7871,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "reading from a pointer without a lock",
            "submessages": [],
            "timestamp": 1455571521,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/3ca604eb0c0cfa22b4a10fc739c056c8?d=identicon&version=1",
            "client": "website",
            "content": "<p>Welcome. And that advice is -extremely- sound. You wouldn't believe the amount of programmer time lost to subtle memory issues, like missing memory barriers.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 53422938,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "lukeadba@gmail.com",
            "sender_full_name": "Luke Barone-Adesi (he) (F'13)",
            "sender_id": 2903,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "reading from a pointer without a lock",
            "submessages": [],
            "timestamp": 1455571576,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/3ca604eb0c0cfa22b4a10fc739c056c8?d=identicon&version=1",
            "client": "website",
            "content": "<p>I'd find it funnier if I didn't need to spare a day to look up how luajit and x86_64 interact to audit a data structure implementation, one of these days. ;-)</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 53422950,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "lukeadba@gmail.com",
            "sender_full_name": "Luke Barone-Adesi (he) (F'13)",
            "sender_id": 2903,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "reading from a pointer without a lock",
            "submessages": [],
            "timestamp": 1455571618,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/e525dd9dc84c68e55de0e0dd2a724f3d?d=identicon&version=1",
            "client": "desktop app Mac 0.5.1",
            "content": "<p>That such good advice (not that I know anything about Go but in general) <code>Don't be clever</code></p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 53423673,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "zmackie@gmail.com",
            "sender_full_name": "Zander Mackie (SP1'16)",
            "sender_id": 9086,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "reading from a pointer without a lock",
            "submessages": [],
            "timestamp": 1455573192,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/e525dd9dc84c68e55de0e0dd2a724f3d?d=identicon&version=1",
            "client": "desktop app Mac 0.5.1",
            "content": "<p>Maybe that deserves a tattoo</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 53423674,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "zmackie@gmail.com",
            "sender_full_name": "Zander Mackie (SP1'16)",
            "sender_id": 9086,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "reading from a pointer without a lock",
            "submessages": [],
            "timestamp": 1455573207,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/0a35beaf5a354dafdf10494c0313e10fffc154fd?x=x&version=1",
            "client": "website",
            "content": "<p>I feel like this is a silly question, but hey, the Go community is boss and has surprised me before: does there exist a good Go  midi library? I wanna play with music!</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 53534561,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "maia.mcc@gmail.com",
            "sender_full_name": "Maia McCormick (she) (S2'14)",
            "sender_id": 6175,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "MIDI library?",
            "submessages": [],
            "timestamp": 1455805877,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/b4d94d953db52e1e7cfc3724b95a6dc906fa9d58?x=x&version=2",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"maia.mcc@gmail.com\">@Maia McCormick (S'14)</span> cc <span class=\"user-mention\" data-user-email=\"travis@mcdem.us\">@Travis McDemus (S'13)</span></p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 53534848,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "me@ballingt.com",
            "sender_full_name": "Tom Ballinger (he) (W'12)",
            "sender_id": 807,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "MIDI library?",
            "submessages": [],
            "timestamp": 1455806409,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/6527e077e84e20214d5373101ea15910d6b6f7a3?x=x&version=1",
            "client": "website",
            "content": "<p>cc <span class=\"user-mention\" data-user-email=\"bradley.boccuzzi@gmail.com\">@Bradley Boccuzzi (S1'15)</span> too! :D</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 53537275,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "steve@redlua.com",
            "sender_full_name": "Steven McCarthy (he) (SP2'15)",
            "sender_id": 7871,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "MIDI library?",
            "submessages": [],
            "timestamp": 1455811022,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/61f7402a76ff0aff964da46bd7948ca20279ae1f?x=x&version=1",
            "client": "website",
            "content": "<p>Looks like consecutive GET requests when using keepalive (the default) in the same client could run into EOF errors, and behavior now fixed in latest Go... <a href=\"https://github.com/golang/go/commit/5dd372bd1e70949a432d9b7b8b021d13abf584d1\" target=\"_blank\" title=\"https://github.com/golang/go/commit/5dd372bd1e70949a432d9b7b8b021d13abf584d1\">https://github.com/golang/go/commit/5dd372bd1e70949a432d9b7b8b021d13abf584d1</a><br>\nSeems that previously that options were to either avoid using keepalives (sending 'connection: close') for these kind of requests or pausing in between requests, thought it was interesting...</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 53542536,
            "is_me_message": false,
            "last_edit_timestamp": 1455819519,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "waldemar.quevedo@gmail.com",
            "sender_full_name": "Waldemar Quevedo (F2'14)",
            "sender_id": 6706,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "consecutive GETs and Go 1.6",
            "submessages": [],
            "timestamp": 1455819488,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/1380ded36dafac0d6f808b9b7b6c4e85266428a1?x=x&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"maia.mcc@gmail.com\">@Maia McCormick (S'14)</span> There's an audio and MIDI library I was working on in my batch: <a href=\"https://github.com/aoeu/audio\" target=\"_blank\" title=\"https://github.com/aoeu/audio\">https://github.com/aoeu/audio</a></p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 53544151,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "travis@mcdem.us",
            "sender_full_name": "Travis McDemus (S'13)",
            "sender_id": 2139,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "MIDI library?",
            "submessages": [],
            "timestamp": 1455822157,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/1380ded36dafac0d6f808b9b7b6c4e85266428a1?x=x&version=1",
            "client": "website",
            "content": "<p>It's well documented, and it runs, but unfortunately I'd do the design of it over. I didn't have the knowledge of struct composition, io.Reader and io.Writer interfaces, and type switching that I do now.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 53544175,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "travis@mcdem.us",
            "sender_full_name": "Travis McDemus (S'13)",
            "sender_id": 2139,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "MIDI library?",
            "submessages": [],
            "timestamp": 1455822228,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/1380ded36dafac0d6f808b9b7b6c4e85266428a1?x=x&version=1",
            "client": "website",
            "content": "<p>It still achieves what I was going for, though.  Client code that looks and reads like this, which mitigates having to know all of the MIDI spec, how to open audio and MIDI devices via C, and making the concurrency of listening for MIDI messages and playing sound files without a bunch of boiler-plate: <a href=\"https://github.com/aoeu/audio/blob/master/instruments/nanopadSampler.go\" target=\"_blank\" title=\"https://github.com/aoeu/audio/blob/master/instruments/nanopadSampler.go\">https://github.com/aoeu/audio/blob/master/instruments/nanopadSampler.go</a></p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 53544256,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "travis@mcdem.us",
            "sender_full_name": "Travis McDemus (S'13)",
            "sender_id": 2139,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "MIDI library?",
            "submessages": [],
            "timestamp": 1455822357,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/1380ded36dafac0d6f808b9b7b6c4e85266428a1?x=x&version=1",
            "client": "website",
            "content": "<p>e.g. the idea is I wanted to write code like this, but was thwarted by concurrency and precise timing issues in both Python and Java, and overrun with the low-level details in C: </p>\n<div class=\"codehilite\"><pre>func main() {\n    nanopad, _ := midi.GetDevice(&quot;nanoPAD PAD&quot;)\n    sampler, _ := audio.NewLoadedSampler(configPath)\n    for {\n        msg := &lt;-nanopad.OutPort()\n        if msg.(type) == midi.NoteOn {\n            go sampler.Play(msg.Key, volume)\n        }\n    }\n}\n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 53544314,
            "is_me_message": false,
            "last_edit_timestamp": 1455822469,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "travis@mcdem.us",
            "sender_full_name": "Travis McDemus (S'13)",
            "sender_id": 2139,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "MIDI library?",
            "submessages": [],
            "timestamp": 1455822455,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/1380ded36dafac0d6f808b9b7b6c4e85266428a1?x=x&version=1",
            "client": "website",
            "content": "<p>I caught up with Burcu from the Go team in 2015, and she has another library for MIDI that's really well put together: <a href=\"https://github.com/rakyll/portmidi\" target=\"_blank\" title=\"https://github.com/rakyll/portmidi\">https://github.com/rakyll/portmidi</a></p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 53544385,
            "is_me_message": false,
            "last_edit_timestamp": 1455823177,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "travis@mcdem.us",
            "sender_full_name": "Travis McDemus (S'13)",
            "sender_id": 2139,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "MIDI library?",
            "submessages": [],
            "timestamp": 1455822565,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/1380ded36dafac0d6f808b9b7b6c4e85266428a1?x=x&version=1",
            "client": "website",
            "content": "<p>That's a direct wrapper over the C library \"portmidi\" which is an approach I was intentionally avoiding.  I can't speak for portmidi and portaudio - those libraries thankfully handle a very hard problem of making a single C library to deal with audio and MIDI across all the main operating systems / platforms, but I don't believe they have clear, understandable interface and throw a lot of upfront, low-level details at the programmer.   It's hard to use portaudio and portmidi to write client code like I have above without knowing about many implementation details about how audio and MIDI work, data formats, concurrency, etc. </p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 53544516,
            "is_me_message": false,
            "last_edit_timestamp": 1455822892,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "travis@mcdem.us",
            "sender_full_name": "Travis McDemus (S'13)",
            "sender_id": 2139,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "MIDI library?",
            "submessages": [],
            "timestamp": 1455822821,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/1380ded36dafac0d6f808b9b7b6c4e85266428a1?x=x&version=1",
            "client": "website",
            "content": "<p>For playing with real-time MIDI controllers, or processing MIDI files, I'd take a look at Burcu's library first. It's not intended to abstract away the low-level details of MIDI, but it'll be documented well, perform well, and be easier to find answers to questions for (since any searching for portmidi or MIDI will have directly applicable info). </p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 53544669,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "travis@mcdem.us",
            "sender_full_name": "Travis McDemus (S'13)",
            "sender_id": 2139,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "MIDI library?",
            "submessages": [],
            "timestamp": 1455823040,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/1380ded36dafac0d6f808b9b7b6c4e85266428a1?x=x&version=1",
            "client": "website",
            "content": "<p>Mine I need to rewrite :)   Still with the same vision of client code like above, but using better Go idioms, etc. so it plays well with the rest of the standard library.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 53544729,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "travis@mcdem.us",
            "sender_full_name": "Travis McDemus (S'13)",
            "sender_id": 2139,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "MIDI library?",
            "submessages": [],
            "timestamp": 1455823108,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/1380ded36dafac0d6f808b9b7b6c4e85266428a1?x=x&version=1",
            "client": "website",
            "content": "<p>Also, it might be worth checking out Andrew Gerrand's (also of the Go team) virtual modular synth project, Sigourney: <a href=\"https://github.com/nf/sigourney\" target=\"_blank\" title=\"https://github.com/nf/sigourney\">https://github.com/nf/sigourney</a>    I haven't run it in a while, but it is really, really cool. </p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 53544901,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "travis@mcdem.us",
            "sender_full_name": "Travis McDemus (S'13)",
            "sender_id": 2139,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "MIDI library?",
            "submessages": [],
            "timestamp": 1455823398,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/1380ded36dafac0d6f808b9b7b6c4e85266428a1?x=x&version=1",
            "client": "website",
            "content": "<p>I just found a library for parsing MIDI files that looks pretty good, but I haven't tried running it or read it thoroughly yet: <a href=\"https://github.com/afandian/go-midi\" target=\"_blank\" title=\"https://github.com/afandian/go-midi\">https://github.com/afandian/go-midi</a></p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 53545112,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "travis@mcdem.us",
            "sender_full_name": "Travis McDemus (S'13)",
            "sender_id": 2139,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "MIDI library?",
            "submessages": [],
            "timestamp": 1455823744,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/1380ded36dafac0d6f808b9b7b6c4e85266428a1?x=x&version=1",
            "client": "website",
            "content": "<p>Also, while on the subject, hey, <span class=\"user-mention\" data-user-email=\"superjoe30@gmail.com\">@Andrew Kelley (F'13)</span> , know of a viable alternative to Portmidi as a C library? Yeah, this is the Go stream, but it's not arduous to wrap C libraries with Go, and there might be a good alternative.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 53545254,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "travis@mcdem.us",
            "sender_full_name": "Travis McDemus (S'13)",
            "sender_id": 2139,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "MIDI library?",
            "submessages": [],
            "timestamp": 1455823942,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/0a35beaf5a354dafdf10494c0313e10fffc154fd?x=x&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"susan.steinman@gmail.com\">@Susan Steinman (F1'14)</span> how do you feel about learning new languages? *winning smile*</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 53600936,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "maia.mcc@gmail.com",
            "sender_full_name": "Maia McCormick (she) (S2'14)",
            "sender_id": 6175,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "MIDI library?",
            "submessages": [],
            "timestamp": 1455939140,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/dd016afc5e2d346a0eee00bb0268c2b33da824d5?x=x&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"maia.mcc@gmail.com\">@Maia McCormick (S'14)</span> it's not Go, but if you're into learning new languages I may as well mention my Haskell music library! It's at <a href=\"http://vivid-synth.com\" target=\"_blank\" title=\"http://vivid-synth.com\">vivid-synth.com</a> . Also, if you're not into it/Haskell, I'd still love to talk computer music if you have thoughts/ideas/questions!</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 53746873,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "amindfv@gmail.com",
            "sender_full_name": "Tom Murphy (F2'15)",
            "sender_id": 8693,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "MIDI library?",
            "submessages": [],
            "timestamp": 1456281411,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/6527e077e84e20214d5373101ea15910d6b6f7a3?x=x&version=1",
            "client": "website",
            "content": "<p>So admittedly I haven't started investigating this speedup yet, but wanted to mention it on the off chance someone knows off-hand. So I'm writing a clone of twitter's snowflake, which they use to generate short urls. It's <a href=\"https://github.com/ifo/sanic\" target=\"_blank\" title=\"https://github.com/ifo/sanic\">here</a>. I recently <a href=\"https://github.com/ifo/sanic/commit/92de3a6c7ede45b9d4ff8d0d61e3a55af751b4b6#diff-a693fca73f07436af23c207f04d5a5b7L80\" target=\"_blank\" title=\"https://github.com/ifo/sanic/commit/92de3a6c7ede45b9d4ff8d0d61e3a55af751b4b6#diff-a693fca73f07436af23c207f04d5a5b7L80\">made a change</a> that made the library more configurable, but it slowed it down by around ~17%. However, by <a href=\"https://github.com/ifo/sanic/commit/b9135e634c37da7e347bd511ecbae968e097f2e2\" target=\"_blank\" title=\"https://github.com/ifo/sanic/commit/b9135e634c37da7e347bd511ecbae968e097f2e2\">making another change</a>, pretty much all of the losses were regained. I have no idea why.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 53933942,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "steve@redlua.com",
            "sender_full_name": "Steven McCarthy (he) (SP2'15)",
            "sender_id": 7871,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "strange speedup - math with const's?",
            "submessages": [],
            "timestamp": 1456707844,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/6527e077e84e20214d5373101ea15910d6b6f7a3?x=x&version=1",
            "client": "website",
            "content": "<p>To make things easier to see, why is <code>Time2()</code> slower than <code>Time()</code>? And Why is <code>Time3()</code> nearly as fast as <code>Time()</code> (and significantly faster than <code>Time2()</code>?</p>\n<div class=\"codehilite\"><pre><span class=\"k\">type</span> <span class=\"n\">Worker</span> <span class=\"k\">struct</span> <span class=\"p\">{</span>\n    <span class=\"n\">Frequency</span> <span class=\"n\">time</span><span class=\"p\">.</span><span class=\"n\">Duration</span>\n<span class=\"p\">}</span>\n\n<span class=\"k\">func</span> <span class=\"p\">(</span><span class=\"n\">w</span> <span class=\"p\">*</span><span class=\"n\">Worker</span><span class=\"p\">)</span> <span class=\"n\">Time</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n    <span class=\"k\">return</span> <span class=\"n\">time</span><span class=\"p\">.</span><span class=\"n\">Now</span><span class=\"p\">().</span><span class=\"n\">UnixNano</span><span class=\"p\">()</span> <span class=\"p\">/</span> <span class=\"nb\">int64</span><span class=\"p\">(</span><span class=\"n\">time</span><span class=\"p\">.</span><span class=\"n\">Millisecond</span><span class=\"p\">)</span>\n<span class=\"p\">}</span>\n\n<span class=\"k\">func</span> <span class=\"p\">(</span><span class=\"n\">w</span> <span class=\"p\">*</span><span class=\"n\">Worker</span><span class=\"p\">)</span> <span class=\"n\">Time2</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n    <span class=\"k\">return</span> <span class=\"n\">time</span><span class=\"p\">.</span><span class=\"n\">Now</span><span class=\"p\">().</span><span class=\"n\">UnixNano</span><span class=\"p\">()</span> <span class=\"p\">/</span> <span class=\"nb\">int64</span><span class=\"p\">(</span><span class=\"n\">w</span><span class=\"p\">.</span><span class=\"n\">Frequency</span><span class=\"p\">)</span>\n<span class=\"p\">}</span>\n\n<span class=\"k\">func</span> <span class=\"p\">(</span><span class=\"n\">w</span> <span class=\"p\">*</span><span class=\"n\">Worker</span><span class=\"p\">)</span> <span class=\"n\">Time3</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n    <span class=\"k\">switch</span> <span class=\"n\">w</span><span class=\"p\">.</span><span class=\"n\">Frequency</span> <span class=\"p\">{</span>\n    <span class=\"k\">case</span> <span class=\"n\">time</span><span class=\"p\">.</span><span class=\"n\">Millisecond</span><span class=\"p\">:</span>\n        <span class=\"k\">return</span> <span class=\"n\">time</span><span class=\"p\">.</span><span class=\"n\">Now</span><span class=\"p\">().</span><span class=\"n\">UnixNano</span><span class=\"p\">()</span> <span class=\"p\">/</span> <span class=\"nb\">int64</span><span class=\"p\">(</span><span class=\"n\">time</span><span class=\"p\">.</span><span class=\"n\">Millisecond</span><span class=\"p\">)</span>\n    <span class=\"k\">default</span><span class=\"p\">:</span>\n        <span class=\"k\">return</span> <span class=\"n\">time</span><span class=\"p\">.</span><span class=\"n\">Now</span><span class=\"p\">().</span><span class=\"n\">UnixNano</span><span class=\"p\">()</span> <span class=\"p\">/</span> <span class=\"nb\">int64</span><span class=\"p\">(</span><span class=\"n\">time</span><span class=\"p\">.</span><span class=\"n\">Millisecond</span><span class=\"p\">)</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 53934052,
            "is_me_message": false,
            "last_edit_timestamp": 1456708134,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "steve@redlua.com",
            "sender_full_name": "Steven McCarthy (he) (SP2'15)",
            "sender_id": 7871,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "strange speedup - math with const's?",
            "submessages": [],
            "timestamp": 1456708090,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/a179bb8c3fc4ab0975954f57d47fa6c53a8c2dad?x=x&version=2",
            "client": "website",
            "content": "<p>Are the different case bodies in <code>Time3</code> supposed to be different?</p>\n<p>Either way, I don't really know why there would be a difference. My initial thought was that maybe <code>Time</code> is faster because the denominator is a constant and can be optimized more heavily versus <code>Time2</code> which has to deference the <code>Worker</code> pointer to access <code>Frequency</code>. <code>Time3</code> muddies that hypothesis though.</p>\n<p>Final thought: <code>Time3</code> is gross and I don't think you should do it unless the performance is really that important.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 53935075,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "jay@jayschwa.net",
            "sender_full_name": "Jay Weisskopf Petacat (W2'17)",
            "sender_id": 829,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "strange speedup - math with const's?",
            "submessages": [],
            "timestamp": 1456710721,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/6527e077e84e20214d5373101ea15910d6b6f7a3?x=x&version=1",
            "client": "website",
            "content": "<p>The fact that the case bodies are the same is just because there needed to be some kind of return. It's more for the fact that the switch statement will have to make the frequency comparison.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 53936316,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "steve@redlua.com",
            "sender_full_name": "Steven McCarthy (he) (SP2'15)",
            "sender_id": 7871,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "strange speedup - math with const's?",
            "submessages": [],
            "timestamp": 1456713933,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/6527e077e84e20214d5373101ea15910d6b6f7a3?x=x&version=1",
            "client": "website",
            "content": "<p>I agree that Time3 looks pretty bad. It looks worse when the other cases are included (time.Second, time.Millisecond * 100, etc), but ~17% performance increase is hard to ignore in a library written to do something as fast as possible.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 53936356,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "steve@redlua.com",
            "sender_full_name": "Steven McCarthy (he) (SP2'15)",
            "sender_id": 7871,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "strange speedup - math with const's?",
            "submessages": [],
            "timestamp": 1456714022,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/6527e077e84e20214d5373101ea15910d6b6f7a3?x=x&version=1",
            "client": "website",
            "content": "<p>Either way, I'll eventually get around to learning about profiling and profiling this to see what's up. I was just really weirded out that Time3 was faster than Time2.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 53936360,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "steve@redlua.com",
            "sender_full_name": "Steven McCarthy (he) (SP2'15)",
            "sender_id": 7871,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "strange speedup - math with const's?",
            "submessages": [],
            "timestamp": 1456714069,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/2de9901913d2f414b7b174d2c2c69a88?d=identicon&version=1",
            "client": "website",
            "content": "<p>Does anyone know if it's possible to get stable/reproducible builds (same code == same binary hash) in golang?  It doesn't work that way automatically.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 53975305,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "chris@printf.net",
            "sender_full_name": "Chris Ball (SP2'15)",
            "sender_id": 7857,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "reproducible builds",
            "submessages": [],
            "timestamp": 1456795261,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/2de9901913d2f414b7b174d2c2c69a88?d=identicon&version=1",
            "client": "website",
            "content": "<p>Found an answer: <a href=\"https://github.com/golang/go/issues/13247\" target=\"_blank\" title=\"https://github.com/golang/go/issues/13247\">https://github.com/golang/go/issues/13247</a></p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 53975762,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "chris@printf.net",
            "sender_full_name": "Chris Ball (SP2'15)",
            "sender_id": 7857,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "reproducible builds",
            "submessages": [],
            "timestamp": 1456796219,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/7d2ab014ebf55e99afffba1a3d92be8155754f0f?x=x&version=1",
            "client": "website",
            "content": "<p>sadface</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 53975950,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "kamal@marhubi.com",
            "sender_full_name": "Kamal Marhubi (he) (m2'18)",
            "sender_id": 8090,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "reproducible builds",
            "submessages": [],
            "timestamp": 1456796680,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/7d2ab014ebf55e99afffba1a3d92be8155754f0f?x=x&version=1",
            "client": "website",
            "content": "<p>consistent builds + verifiable software artifacts: Things I Care About.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 53975955,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "kamal@marhubi.com",
            "sender_full_name": "Kamal Marhubi (he) (m2'18)",
            "sender_id": 8090,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "reproducible builds",
            "submessages": [],
            "timestamp": 1456796713,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/1380ded36dafac0d6f808b9b7b6c4e85266428a1?x=x&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>Hey, the Gophercon 2016 speakers just got announced and I noticed <span class=\"user-mention\" data-user-email=\"filippo.valsorda@gmail.com\">@Filippo Valsorda (F'13)</span>  on the list! Congrats!  <a href=\"https://gophercon.com\" target=\"_blank\" title=\"https://gophercon.com\">https://gophercon.com</a></p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 54052975,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "travis@mcdem.us",
            "sender_full_name": "Travis McDemus (S'13)",
            "sender_id": 2139,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "gophercon",
            "submessages": [],
            "timestamp": 1456957361,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/6527e077e84e20214d5373101ea15910d6b6f7a3?x=x&version=1",
            "client": "website",
            "content": "<p>Anyone else see <a href=\"http://www.jtolds.com/writing/2016/03/go-channels-are-bad-and-you-should-feel-bad/\" target=\"_blank\" title=\"http://www.jtolds.com/writing/2016/03/go-channels-are-bad-and-you-should-feel-bad/\">this article on Go channels</a>? It seemed pretty interesting, and made me rethink my latest (and only) use of channels in Go.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 54088610,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "steve@redlua.com",
            "sender_full_name": "Steven McCarthy (he) (SP2'15)",
            "sender_id": 7871,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "interesting \"channels are bad\" article",
            "submessages": [],
            "timestamp": 1457031877,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/a179bb8c3fc4ab0975954f57d47fa6c53a8c2dad?x=x&version=2",
            "client": "website",
            "content": "<p>I was on the fence about whether or not to do Gophercon this year. However, more than half these talks really interest me.</p>\n<p>/me buys ticket</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 54143081,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "jay@jayschwa.net",
            "sender_full_name": "Jay Weisskopf Petacat (W2'17)",
            "sender_id": 829,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "gophercon",
            "submessages": [],
            "timestamp": 1457145069,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/e525dd9dc84c68e55de0e0dd2a724f3d?d=identicon&version=1",
            "client": "desktop app Mac 0.5.1",
            "content": "<p>(deleted)</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 54160398,
            "is_me_message": false,
            "last_edit_timestamp": 1457196702,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "zmackie@gmail.com",
            "sender_full_name": "Zander Mackie (SP1'16)",
            "sender_id": 9086,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "gophercon",
            "submessages": [],
            "timestamp": 1457195594,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/e525dd9dc84c68e55de0e0dd2a724f3d?d=identicon&version=1",
            "client": "desktop app Mac 0.5.1",
            "content": "<p>Oh no!<br>\n<a href=\"/user_uploads/13/4vXyo9k3tw2yFigWgTaOAX64/screen-shot-2016-03-05-at-113218-am.png\" target=\"_blank\" title=\"screen-shot-2016-03-05-at-113218-am.png\">screen-shot-2016-03-05-at-113218-am.png</a> </p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/13/4vXyo9k3tw2yFigWgTaOAX64/screen-shot-2016-03-05-at-113218-am.png\" target=\"_blank\" title=\"screen-shot-2016-03-05-at-113218-am.png\"><img src=\"/user_uploads/13/4vXyo9k3tw2yFigWgTaOAX64/screen-shot-2016-03-05-at-113218-am.png\"></a></div>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 54160815,
            "is_me_message": false,
            "last_edit_timestamp": 1457196795,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "zmackie@gmail.com",
            "sender_full_name": "Zander Mackie (SP1'16)",
            "sender_id": 9086,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "gophercon",
            "submessages": [],
            "timestamp": 1457196788,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/247a8c69d63cb8cea4b6a724be75816683bad39b?x=x&version=1",
            "client": "website",
            "content": "<p>Hey, everyone! I'm new to Go and am now trying to get a new project off the ground. I've been reading around, and I've come across numerous discussions that say that using getter and setter functions in go isn't idiomatic. So for example:</p>\n<p>Instead of: </p>\n<div class=\"codehilite\"><pre><span class=\"k\">type</span> <span class=\"n\">Room</span> <span class=\"k\">struct</span> <span class=\"p\">{</span>\n    <span class=\"n\">name</span> <span class=\"nb\">string</span>\n    <span class=\"n\">temperature</span> <span class=\"nb\">int</span>\n\n<span class=\"p\">}</span>\n\n<span class=\"k\">func</span>  <span class=\"p\">(</span><span class=\"n\">r</span> <span class=\"p\">*</span><span class=\"n\">Room</span><span class=\"p\">)</span> <span class=\"n\">SetTemp</span><span class=\"p\">(</span><span class=\"n\">temp</span> <span class=\"nb\">int</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"p\">...</span>\n<span class=\"p\">}</span>\n</pre></div>\n\n\n<p>just expose the field in the pointer, like this: </p>\n<div class=\"codehilite\"><pre><span class=\"k\">type</span> <span class=\"n\">Room</span> <span class=\"k\">struct</span> <span class=\"p\">{</span>\n    <span class=\"n\">name</span> <span class=\"nb\">string</span>\n    <span class=\"n\">Temperature</span> <span class=\"nb\">int</span>\n\n<span class=\"p\">}</span>\n</pre></div>\n\n\n<p>and just pass around references to <code>.Temperature</code>.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 54172820,
            "is_me_message": false,
            "last_edit_timestamp": 1457228562,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "me@ggilmore.net",
            "sender_full_name": "Geoffrey Michael Henry Gilmore (he) (SP1'15)",
            "sender_id": 7639,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "Getters & Setters == Bad?",
            "submessages": [],
            "timestamp": 1457228002,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/247a8c69d63cb8cea4b6a724be75816683bad39b?x=x&version=1",
            "client": "website",
            "content": "<p>What I don't understand is why I wouldn't use <code>SetTemp(...)</code> - especially if I want to refactor my code and perform validation logic or something?</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 54172861,
            "is_me_message": false,
            "last_edit_timestamp": 1457228382,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "me@ggilmore.net",
            "sender_full_name": "Geoffrey Michael Henry Gilmore (he) (SP1'15)",
            "sender_id": 7639,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "Getters & Setters == Bad?",
            "submessages": [],
            "timestamp": 1457228097,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/247a8c69d63cb8cea4b6a724be75816683bad39b?x=x&version=1",
            "client": "website",
            "content": "<p><a href=\"https://news.ycombinator.com/item?id=9455394\" target=\"_blank\" title=\"https://news.ycombinator.com/item?id=9455394\">https://news.ycombinator.com/item?id=9455394</a></p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 54172863,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "me@ggilmore.net",
            "sender_full_name": "Geoffrey Michael Henry Gilmore (he) (SP1'15)",
            "sender_id": 7639,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "Getters & Setters == Bad?",
            "submessages": [],
            "timestamp": 1457228122,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/247a8c69d63cb8cea4b6a724be75816683bad39b?x=x&version=1",
            "client": "website",
            "content": "<p>These are the sorts of discussions that I'm seeing, and I'm not quite understanding what they're trying to say (especially when comparing it to the go documentation: <a href=\"https://golang.org/doc/effective_go.html#Getters\" target=\"_blank\" title=\"https://golang.org/doc/effective_go.html#Getters\">https://golang.org/doc/effective_go.html#Getters</a> ). Could y'all help me out?</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 54172864,
            "is_me_message": false,
            "last_edit_timestamp": 1457228272,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "me@ggilmore.net",
            "sender_full_name": "Geoffrey Michael Henry Gilmore (he) (SP1'15)",
            "sender_id": 7639,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "Getters & Setters == Bad?",
            "submessages": [],
            "timestamp": 1457228147,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/a179bb8c3fc4ab0975954f57d47fa6c53a8c2dad?x=x&version=2",
            "client": "website",
            "content": "<p>I think it's more nuanced than that. Getters and setters are fine if some sort of processing needs to be done with the data. It's do-nothing getters and setters that are discouraged.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 54173327,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "jay@jayschwa.net",
            "sender_full_name": "Jay Weisskopf Petacat (W2'17)",
            "sender_id": 829,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "Getters & Setters == Bad?",
            "submessages": [],
            "timestamp": 1457229455,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/044b59a59f2bfb736b3142db2cd025ca?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"travis@mcdem.us\">@Travis McDemus (S'13)</span> thanks! :) for the record, I credit you with introducing me to Go in the first place :D</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 54174515,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "hi@filippo.io",
            "sender_full_name": "Filippo Valsorda (F2'17)",
            "sender_id": 2884,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "gophercon",
            "submessages": [],
            "timestamp": 1457232160,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/b0aaf017ede1c6cd8f546531ead124bbed75fabe?x=x&version=4",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"ggilmore@mit.edu\">@Geoffrey Gilmore (SP1'15)</span> <br>\nReading the second post in that ycombinator discussion does highlight something important.</p>\n<blockquote>\n<p>You correctly observe than in order to conform to a Golang interface, struct fields have to be exposed through setters and getters.</p>\n</blockquote>\n<p>Fields in a struct can be exported or not. This may sound a bit silly but a field is deemed exported if the name begins with a capital letter such as <code>Temperature</code> in your case. <code>name</code> is not exported. So if you were to create another package with this struct type called <code>Room</code>, include it, and try and make an object of type <code>Room</code> and assign something to a field <code>name</code>, you might get an error because it is not an exported field. In this case, one would use exported getters or setters to get/set these fields. </p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 54249669,
            "is_me_message": false,
            "last_edit_timestamp": 1457410054,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "brad@isbrad.com",
            "sender_full_name": "Bradley Boccuzzi (he/they) (S1'15)",
            "sender_id": 8094,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "Getters & Setters == Bad?",
            "submessages": [],
            "timestamp": 1457409939,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/b0aaf017ede1c6cd8f546531ead124bbed75fabe?x=x&version=4",
            "client": "website",
            "content": "<p>On exported and unexported fields: <a href=\"http://www.goinggo.net/2014/03/exportedunexported-identifiers-in-go.html\" target=\"_blank\" title=\"http://www.goinggo.net/2014/03/exportedunexported-identifiers-in-go.html\">http://www.goinggo.net/2014/03/exportedunexported-identifiers-in-go.html</a></p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 54249706,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "brad@isbrad.com",
            "sender_full_name": "Bradley Boccuzzi (he/they) (S1'15)",
            "sender_id": 8094,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "Getters & Setters == Bad?",
            "submessages": [],
            "timestamp": 1457409977,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/b0aaf017ede1c6cd8f546531ead124bbed75fabe?x=x&version=4",
            "client": "website",
            "content": "<p>These are commonly used in conjunction with interfaces: <a href=\"http://jordanorelli.com/post/32665860244/how-to-use-interfaces-in-go\" target=\"_blank\" title=\"http://jordanorelli.com/post/32665860244/how-to-use-interfaces-in-go\">http://jordanorelli.com/post/32665860244/how-to-use-interfaces-in-go</a></p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 54249757,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "brad@isbrad.com",
            "sender_full_name": "Bradley Boccuzzi (he/they) (S1'15)",
            "sender_id": 8094,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "Getters & Setters == Bad?",
            "submessages": [],
            "timestamp": 1457410158,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/b0aaf017ede1c6cd8f546531ead124bbed75fabe?x=x&version=4",
            "client": "website",
            "content": "<p>(Also, just read that you mentioned exporting the field name....)</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 54249809,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "brad@isbrad.com",
            "sender_full_name": "Bradley Boccuzzi (he/they) (S1'15)",
            "sender_id": 8094,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "Getters & Setters == Bad?",
            "submessages": [],
            "timestamp": 1457410239,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/b0aaf017ede1c6cd8f546531ead124bbed75fabe?x=x&version=4",
            "client": "website",
            "content": "<p>I'd like to hear what <span class=\"user-mention\" data-user-email=\"travis@mcdem.us\">@Travis McDemus (S'13)</span> thinks of this. Maybe just for the sake of satisfying an interface when needed?</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 54249906,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "brad@isbrad.com",
            "sender_full_name": "Bradley Boccuzzi (he/they) (S1'15)",
            "sender_id": 8094,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "Getters & Setters == Bad?",
            "submessages": [],
            "timestamp": 1457410484,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/1380ded36dafac0d6f808b9b7b6c4e85266428a1?x=x&version=1",
            "client": "website",
            "content": "<p>I'm not caught up, nor can I get into details now, but I *highly recommend against* using Getter and Setters methods in any of your interface types. If you find yourself going to write a Getter or a Setter method, there is almost certainly a language feature or technique in Go that solves the problem in a simpler way.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 54277078,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "travis@mcdem.us",
            "sender_full_name": "Travis McDemus (S'13)",
            "sender_id": 2139,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "Getters & Setters == Bad?",
            "submessages": [],
            "timestamp": 1457469350,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/1380ded36dafac0d6f808b9b7b6c4e85266428a1?x=x&version=1",
            "client": "website",
            "content": "<p>On the interfaces note, a set of methods that define an interface are best kept to *actions* the interface type can do (verbs), not *data* that it has (nouns). </p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 54277152,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "travis@mcdem.us",
            "sender_full_name": "Travis McDemus (S'13)",
            "sender_id": 2139,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "Getters & Setters == Bad?",
            "submessages": [],
            "timestamp": 1457469456,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/1380ded36dafac0d6f808b9b7b6c4e85266428a1?x=x&version=1",
            "client": "website",
            "content": "<p>To elaborate an that, methods like Read(), Write(), Open(), Close() are all actions.  String() is too - the name String doesn't mean that the underlying type *has* a string field, it means that the type can be *transformed* into a String representation. (Another name could have been ToString() ) </p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 54277303,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "travis@mcdem.us",
            "sender_full_name": "Travis McDemus (S'13)",
            "sender_id": 2139,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "Getters & Setters == Bad?",
            "submessages": [],
            "timestamp": 1457469634,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/6527e077e84e20214d5373101ea15910d6b6f7a3?x=x&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"travis@mcdem.us\">@Travis McDemus (S'13)</span> what about the aforementioned (non-interface), setter method that performs validation? Something like <code>SetAge(age int)</code>, that ensures that <code>Age</code> is, say, between 18 and 55?</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 54277469,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "steve@redlua.com",
            "sender_full_name": "Steven McCarthy (he) (SP2'15)",
            "sender_id": 7871,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "Getters & Setters == Bad?",
            "submessages": [],
            "timestamp": 1457469902,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/1380ded36dafac0d6f808b9b7b6c4e85266428a1?x=x&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p><span class=\"user-mention\" data-user-email=\"steve@redlua.com\">@Steven McCarthy (SP2'15)</span>   That's a great case example. Instead of a Setter, use language two really nice language features that Go gives :  type aliasing and method binding.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 54279882,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "travis@mcdem.us",
            "sender_full_name": "Travis McDemus (S'13)",
            "sender_id": 2139,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "Getters & Setters == Bad?",
            "submessages": [],
            "timestamp": 1457474040,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/1380ded36dafac0d6f808b9b7b6c4e85266428a1?x=x&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>Code example pending...</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 54279927,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "travis@mcdem.us",
            "sender_full_name": "Travis McDemus (S'13)",
            "sender_id": 2139,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "Getters & Setters == Bad?",
            "submessages": [],
            "timestamp": 1457474084,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/6527e077e84e20214d5373101ea15910d6b6f7a3?x=x&version=1",
            "client": "website",
            "content": "<p>Code example hype! <img alt=\":smile_cat:\" class=\"emoji\" src=\"static/third/gemoji/images/emoji/smile_cat.png\" title=\":smile_cat:\"></p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 54279991,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "steve@redlua.com",
            "sender_full_name": "Steven McCarthy (he) (SP2'15)",
            "sender_id": 7871,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "Getters & Setters == Bad?",
            "submessages": [],
            "timestamp": 1457474227,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/1380ded36dafac0d6f808b9b7b6c4e85266428a1?x=x&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>I need some kind of example that's not Age as a piece of data, and I'm blanking.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 54280206,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "travis@mcdem.us",
            "sender_full_name": "Travis McDemus (S'13)",
            "sender_id": 2139,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "Getters & Setters == Bad?",
            "submessages": [],
            "timestamp": 1457474592,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/1380ded36dafac0d6f808b9b7b6c4e85266428a1?x=x&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>But I want to use number ranges.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 54280211,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "travis@mcdem.us",
            "sender_full_name": "Travis McDemus (S'13)",
            "sender_id": 2139,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "Getters & Setters == Bad?",
            "submessages": [],
            "timestamp": 1457474613,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/6527e077e84e20214d5373101ea15910d6b6f7a3?x=x&version=1",
            "client": "website",
            "content": "<p>Valid street address numbers for a certain block?</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 54280215,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "steve@redlua.com",
            "sender_full_name": "Steven McCarthy (he) (SP2'15)",
            "sender_id": 7871,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "Getters & Setters == Bad?",
            "submessages": [],
            "timestamp": 1457474632,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/6527e077e84e20214d5373101ea15910d6b6f7a3?x=x&version=1",
            "client": "website",
            "content": "<p>Eg, address number has to be 200 &lt; x &lt; 300?</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 54280254,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "steve@redlua.com",
            "sender_full_name": "Steven McCarthy (he) (SP2'15)",
            "sender_id": 7871,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "Getters & Setters == Bad?",
            "submessages": [],
            "timestamp": 1457474662,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/6527e077e84e20214d5373101ea15910d6b6f7a3?x=x&version=1",
            "client": "website",
            "content": "<p>And must be even?</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 54280255,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "steve@redlua.com",
            "sender_full_name": "Steven McCarthy (he) (SP2'15)",
            "sender_id": 7871,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "Getters & Setters == Bad?",
            "submessages": [],
            "timestamp": 1457474669,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/6527e077e84e20214d5373101ea15910d6b6f7a3?x=x&version=1",
            "client": "website",
            "content": "<p>And maybe the number minus the minimum must be divisible by X? (depending on how complicated the example needs to be, or whatever).</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 54280274,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "steve@redlua.com",
            "sender_full_name": "Steven McCarthy (he) (SP2'15)",
            "sender_id": 7871,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "Getters & Setters == Bad?",
            "submessages": [],
            "timestamp": 1457474741,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/1380ded36dafac0d6f808b9b7b6c4e85266428a1?x=x&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>I'm not thrilled with this example, but it's at least approaching some of the ideas: <a href=\"http://play.golang.org/p/tbBZl3x7CD\" target=\"_blank\" title=\"http://play.golang.org/p/tbBZl3x7CD\">http://play.golang.org/p/tbBZl3x7CD</a></p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 54281396,
            "is_me_message": false,
            "last_edit_timestamp": 1457477347,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "travis@mcdem.us",
            "sender_full_name": "Travis McDemus (S'13)",
            "sender_id": 2139,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "Getters & Setters == Bad?",
            "submessages": [],
            "timestamp": 1457476937,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/1380ded36dafac0d6f808b9b7b6c4e85266428a1?x=x&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<div class=\"codehilite\"><pre>package main\n\nimport (\n    &quot;errors&quot;\n    &quot;fmt&quot;\n)\n\ntype degrees float64\n\ntype celsius degrees\n\nfunc (c celsius) String() string {\n    return fmt.Sprintf(&quot;%2.2f degrees celsius&quot;, c)\n}\n\ntype farenheit degrees\n\n// A Celsiuser can be converteted to celcius value with a Celcius method.\ntype Celsiuser interface {\n    Celsius() celsius\n}\n\n// RoomTemp is a farenheit temperature that needs to be within a finite, validated range.\ntype RoomTemp farenheit\n\n// Creates a new RoomTemp from the specified farenheit temperature, defaulting to\n// 70 degrees and returning an error if the provided temperature is not in the valid range.\nfunc NewRoomTemp(temp farenheit) (RoomTemp, error) { // Note that we don&#39;t need a setter when we have specific types and constructors.\n    switch {\n    case temp &lt; 73.0:\n        return 70, errors.New(fmt.Sprintf(&quot;%v degrees farenheit is too cold to be a room temperature.&quot;, temp))\n    case temp &gt; 78.0:\n        return 70, errors.New(fmt.Sprintf(&quot;%v degrees farenheit is too hot to be a room temperature.&quot;, temp))\n    }\n    return RoomTemp(temp), nil\n}\n\n// String returns a string transformation of this temperature as a legible string.\nfunc (r RoomTemp) String() string {\n    return fmt.Sprintf(&quot;%2.2f degrees farenheit&quot;, r)\n}\n\n// Celcius returns the equivalent celcius temperature of a RoomTemp value.\nfunc (r RoomTemp) Celsius() celsius {\n    return celsius(r - 32.0*(5.0/9.0)) // Note that this method isn&#39;t a getter, returning a field value. It&#39;s a *converter*.\n}\n\nfunc main() {\n    r, err := NewRoomTemp(77.7)\n    fmt.Println(&quot;Error was: &quot;, err)\n    fmt.Println(&quot;Room temperature is&quot;, r)            // Note that the RoomTemp.String() method is being called automatically.\n    fmt.Println(&quot;Also, it is equal to&quot;, r.Celsius()) // Note that the celsius.String() method is being called automatically.\n}\n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 54281407,
            "is_me_message": false,
            "last_edit_timestamp": 1457477393,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "travis@mcdem.us",
            "sender_full_name": "Travis McDemus (S'13)",
            "sender_id": 2139,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "Getters & Setters == Bad?",
            "submessages": [],
            "timestamp": 1457476976,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/1380ded36dafac0d6f808b9b7b6c4e85266428a1?x=x&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>please excuse any lackluster math, spelling, and code style :)   (This is why code review is a thing!!)</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 54281809,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "travis@mcdem.us",
            "sender_full_name": "Travis McDemus (S'13)",
            "sender_id": 2139,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "Getters & Setters == Bad?",
            "submessages": [],
            "timestamp": 1457477746,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/7d2ab014ebf55e99afffba1a3d92be8155754f0f?x=x&version=1",
            "client": "website",
            "content": "<p><code>Celsiuser</code> is that something I'd actually be likely to read in Go code?</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 54319238,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "kamal@marhubi.com",
            "sender_full_name": "Kamal Marhubi (he) (m2'18)",
            "sender_id": 8090,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "Getters & Setters == Bad?",
            "submessages": [],
            "timestamp": 1457558846,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/6527e077e84e20214d5373101ea15910d6b6f7a3?x=x&version=1",
            "client": "website",
            "content": "<p>So this might be a more general question, but Go is sometimes different than normal conventions. Is there a recommended line length limit for Go?</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 54347644,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "steve@redlua.com",
            "sender_full_name": "Steven McCarthy (he) (SP2'15)",
            "sender_id": 7871,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "line length convention?",
            "submessages": [],
            "timestamp": 1457626111,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/60164d729bafa8c81e373fc2d00efb9c?d=identicon&version=1",
            "client": "website",
            "content": "<p><a href=\"https://golang.org/doc/effective_go.html#formatting\" target=\"_blank\" title=\"https://golang.org/doc/effective_go.html#formatting\">Effective Go</a>:</p>\n<blockquote>\n<p>Go has no line length limit. Don't worry about overflowing a punched card. If a line feels too long, wrap it and indent with an extra tab.</p>\n</blockquote>\n<p>But I don't know how that's typically applied in practice.  (And it feels wrong to me, but I'm new here.)</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 54347768,
            "is_me_message": false,
            "last_edit_timestamp": 1457626333,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "bgilbert@backtick.net",
            "sender_full_name": "Benjamin Gilbert (he) (W2'16)",
            "sender_id": 8696,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "line length convention?",
            "submessages": [],
            "timestamp": 1457626329,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/7d2ab014ebf55e99afffba1a3d92be8155754f0f?x=x&version=1",
            "client": "website",
            "content": "<p>There is explicitly no line length limit.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 54347772,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "kamal@marhubi.com",
            "sender_full_name": "Kamal Marhubi (he) (m2'18)",
            "sender_id": 8090,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "line length convention?",
            "submessages": [],
            "timestamp": 1457626336,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/7d2ab014ebf55e99afffba1a3d92be8155754f0f?x=x&version=1",
            "client": "website",
            "content": "<p>Ah, yea that ^^^^</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 54347780,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "kamal@marhubi.com",
            "sender_full_name": "Kamal Marhubi (he) (m2'18)",
            "sender_id": 8090,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "line length convention?",
            "submessages": [],
            "timestamp": 1457626358,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/6527e077e84e20214d5373101ea15910d6b6f7a3?x=x&version=1",
            "client": "website",
            "content": "<p>Well, I've been keeping the 80 line habit (which I'm happy to remove, it sometimes looks very strange in go). Though I'm curious about very long function definitions, as the \"extra tab\" that <code>gofmt</code> does leaves the trailing parts of the function definition at the same indentation as the next lines of code. e.g.</p>\n<div class=\"codehilite\"><pre><span class=\"k\">func</span> <span class=\"n\">reallyLongFunction</span><span class=\"p\">(</span><span class=\"n\">withMany</span><span class=\"p\">,</span> <span class=\"n\">types</span><span class=\"p\">,</span> <span class=\"n\">of</span><span class=\"p\">,</span> <span class=\"n\">things</span> <span class=\"nb\">string</span><span class=\"p\">,</span>\n    <span class=\"n\">andMany</span><span class=\"p\">,</span> <span class=\"n\">other</span><span class=\"p\">,</span> <span class=\"n\">types2</span><span class=\"p\">,</span> <span class=\"n\">of2</span><span class=\"p\">,</span> <span class=\"n\">things2</span> <span class=\"nb\">int</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"n\">fmt</span><span class=\"p\">.</span><span class=\"n\">Println</span><span class=\"p\">(</span><span class=\"s\">&quot;have a good day&quot;</span><span class=\"p\">)</span>\n<span class=\"p\">}</span>\n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 54349860,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "steve@redlua.com",
            "sender_full_name": "Steven McCarthy (he) (SP2'15)",
            "sender_id": 7871,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "line length convention?",
            "submessages": [],
            "timestamp": 1457629767,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/6527e077e84e20214d5373101ea15910d6b6f7a3?x=x&version=1",
            "client": "website",
            "content": "<p>Notice the <code>andMany</code> and <code>fmt...</code> have the same indentation (after gofmt`ing).</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 54349924,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "steve@redlua.com",
            "sender_full_name": "Steven McCarthy (he) (SP2'15)",
            "sender_id": 7871,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "line length convention?",
            "submessages": [],
            "timestamp": 1457629848,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/ebe0814e33fc0231a2def89423f7be9f4d96a6f9?x=x&version=1",
            "client": "website",
            "content": "<p>That's one of the few cases where I wonder if putting the '{' on its own line would add a bit of clarity. Though, I suppose it would break go's format norms. I would personally love to see another level of indentation for the print for clarity</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 54350020,
            "is_me_message": false,
            "last_edit_timestamp": 1457630041,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "samanthadoran3@gmail.com",
            "sender_full_name": "Samantha Doran (she) (SP2'16)",
            "sender_id": 8983,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "line length convention?",
            "submessages": [],
            "timestamp": 1457630011,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/6527e077e84e20214d5373101ea15910d6b6f7a3?x=x&version=1",
            "client": "website",
            "content": "<p>Yeah. My goformatter yells at me if I do that :(</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 54350081,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "steve@redlua.com",
            "sender_full_name": "Steven McCarthy (he) (SP2'15)",
            "sender_id": 7871,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "line length convention?",
            "submessages": [],
            "timestamp": 1457630070,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/6527e077e84e20214d5373101ea15910d6b6f7a3?x=x&version=1",
            "client": "website",
            "content": "<p>What I tend to do is leave a space, since that's totally fine.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 54350086,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "steve@redlua.com",
            "sender_full_name": "Steven McCarthy (he) (SP2'15)",
            "sender_id": 7871,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "line length convention?",
            "submessages": [],
            "timestamp": 1457630082,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/6527e077e84e20214d5373101ea15910d6b6f7a3?x=x&version=1",
            "client": "website",
            "content": "<div class=\"codehilite\"><pre><span class=\"k\">func</span> <span class=\"n\">reallyLongFunction</span><span class=\"p\">(</span><span class=\"n\">withMany</span><span class=\"p\">,</span> <span class=\"n\">types</span><span class=\"p\">,</span> <span class=\"n\">of</span><span class=\"p\">,</span> <span class=\"n\">things</span> <span class=\"nb\">string</span><span class=\"p\">,</span>\n    <span class=\"n\">andMany</span><span class=\"p\">,</span> <span class=\"n\">other</span><span class=\"p\">,</span> <span class=\"n\">types2</span><span class=\"p\">,</span> <span class=\"n\">of2</span><span class=\"p\">,</span> <span class=\"n\">things2</span> <span class=\"nb\">int</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n\n    <span class=\"n\">fmt</span><span class=\"p\">.</span><span class=\"n\">Println</span><span class=\"p\">(</span><span class=\"s\">&quot;have a good day&quot;</span><span class=\"p\">)</span>\n<span class=\"p\">}</span>\n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 54350095,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "steve@redlua.com",
            "sender_full_name": "Steven McCarthy (he) (SP2'15)",
            "sender_id": 7871,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "line length convention?",
            "submessages": [],
            "timestamp": 1457630104,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/6527e077e84e20214d5373101ea15910d6b6f7a3?x=x&version=1",
            "client": "website",
            "content": "<p>But yeah. I'm gonna un-wrap some of my 80+ character lines now.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 54350108,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "steve@redlua.com",
            "sender_full_name": "Steven McCarthy (he) (SP2'15)",
            "sender_id": 7871,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "line length convention?",
            "submessages": [],
            "timestamp": 1457630130,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/7d2ab014ebf55e99afffba1a3d92be8155754f0f?x=x&version=1",
            "client": "website",
            "content": "<p>oh does it not align args as in:</p>\n<div class=\"codehilite\"><pre><span class=\"k\">func</span> <span class=\"n\">reallyLongFunction</span><span class=\"p\">(</span><span class=\"n\">withMany</span><span class=\"p\">,</span> <span class=\"n\">types</span><span class=\"p\">,</span> <span class=\"n\">of</span><span class=\"p\">,</span> <span class=\"n\">things</span> <span class=\"nb\">string</span><span class=\"p\">,</span>\n                        <span class=\"n\">andMany</span><span class=\"p\">,</span> <span class=\"n\">other</span><span class=\"p\">,</span> <span class=\"n\">types2</span><span class=\"p\">,</span> <span class=\"n\">of2</span><span class=\"p\">,</span> <span class=\"n\">things2</span> <span class=\"nb\">int</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"n\">fmt</span><span class=\"p\">.</span><span class=\"n\">Println</span><span class=\"p\">(</span><span class=\"s\">&quot;have a good day&quot;</span><span class=\"p\">)</span>\n<span class=\"p\">}</span>\n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 54350178,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "kamal@marhubi.com",
            "sender_full_name": "Kamal Marhubi (he) (m2'18)",
            "sender_id": 8090,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "line length convention?",
            "submessages": [],
            "timestamp": 1457630194,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/7d2ab014ebf55e99afffba1a3d92be8155754f0f?x=x&version=1",
            "client": "website",
            "content": "<p>that would have been my guess at an aligment based on google style for C++</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 54350200,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "kamal@marhubi.com",
            "sender_full_name": "Kamal Marhubi (he) (m2'18)",
            "sender_id": 8090,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "line length convention?",
            "submessages": [],
            "timestamp": 1457630235,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/7d2ab014ebf55e99afffba1a3d92be8155754f0f?x=x&version=1",
            "client": "website",
            "content": "<p><a href=\"https://google.github.io/styleguide/cppguide.html#Function_Calls\" target=\"_blank\" title=\"https://google.github.io/styleguide/cppguide.html#Function_Calls\">https://google.github.io/styleguide/cppguide.html#Function_Calls</a></p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 54350210,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "kamal@marhubi.com",
            "sender_full_name": "Kamal Marhubi (he) (m2'18)",
            "sender_id": 8090,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "line length convention?",
            "submessages": [],
            "timestamp": 1457630259,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/6527e077e84e20214d5373101ea15910d6b6f7a3?x=x&version=1",
            "client": "website",
            "content": "<p>No. go only aligns trailing things of similar content:</p>\n<div class=\"codehilite\"><pre><span class=\"k\">var</span> <span class=\"n\">thing1</span> <span class=\"nb\">string</span>           <span class=\"c1\">// this is thing1</span>\n<span class=\"k\">var</span> <span class=\"n\">muchLongerThing1</span> <span class=\"nb\">string</span> <span class=\"c1\">// this is a longer version of thing1</span>\n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 54350274,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "steve@redlua.com",
            "sender_full_name": "Steven McCarthy (he) (SP2'15)",
            "sender_id": 7871,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "line length convention?",
            "submessages": [],
            "timestamp": 1457630322,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/6527e077e84e20214d5373101ea15910d6b6f7a3?x=x&version=1",
            "client": "website",
            "content": "<p>Hmmm. Actually, <span class=\"user-mention\" data-user-email=\"kamal@marhubi.com\">@Kamal Marhubi (S1'15)</span>, I get why they have that indentation now. You can't front align things with tabs, because tabs can have arbitrary widths.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 54350359,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "steve@redlua.com",
            "sender_full_name": "Steven McCarthy (he) (SP2'15)",
            "sender_id": 7871,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "line length convention?",
            "submessages": [],
            "timestamp": 1457630422,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/7d2ab014ebf55e99afffba1a3d92be8155754f0f?x=x&version=1",
            "client": "website",
            "content": "<p>you can, you just use the same number of initial tabs</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 54350378,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "kamal@marhubi.com",
            "sender_full_name": "Kamal Marhubi (he) (m2'18)",
            "sender_id": 8090,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "line length convention?",
            "submessages": [],
            "timestamp": 1457630448,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/6527e077e84e20214d5373101ea15910d6b6f7a3?x=x&version=1",
            "client": "website",
            "content": "<p>No, I mean, with the 2 parts of the function.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 54350384,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "steve@redlua.com",
            "sender_full_name": "Steven McCarthy (he) (SP2'15)",
            "sender_id": 7871,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "line length convention?",
            "submessages": [],
            "timestamp": 1457630460,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/7d2ab014ebf55e99afffba1a3d92be8155754f0f?x=x&version=1",
            "client": "website",
            "content": "<p>there's the \"tabs for indentation, spaces for alignment\" mantra that I believe in but don't bother using</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 54350390,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "kamal@marhubi.com",
            "sender_full_name": "Kamal Marhubi (he) (m2'18)",
            "sender_id": 8090,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "line length convention?",
            "submessages": [],
            "timestamp": 1457630469,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/7d2ab014ebf55e99afffba1a3d92be8155754f0f?x=x&version=1",
            "client": "website",
            "content": "<p>not following</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 54350401,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "kamal@marhubi.com",
            "sender_full_name": "Kamal Marhubi (he) (m2'18)",
            "sender_id": 8090,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "line length convention?",
            "submessages": [],
            "timestamp": 1457630496,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/6527e077e84e20214d5373101ea15910d6b6f7a3?x=x&version=1",
            "client": "website",
            "content": "<p>One of them has no indentation. The other has to indent out to the word after the paren. You can't guarantee that alignment with tabs.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 54350403,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "steve@redlua.com",
            "sender_full_name": "Steven McCarthy (he) (SP2'15)",
            "sender_id": 7871,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "line length convention?",
            "submessages": [],
            "timestamp": 1457630500,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/6527e077e84e20214d5373101ea15910d6b6f7a3?x=x&version=1",
            "client": "website",
            "content": "<div class=\"codehilite\"><pre><span class=\"k\">func</span> <span class=\"n\">reallyLongFunction</span><span class=\"p\">(</span><span class=\"n\">withMany</span><span class=\"p\">,</span> <span class=\"n\">types</span><span class=\"p\">,</span> <span class=\"n\">of</span><span class=\"p\">,</span> <span class=\"n\">things</span> <span class=\"nb\">string</span><span class=\"p\">,</span>\n                        <span class=\"n\">andMany</span><span class=\"p\">,</span> <span class=\"n\">other</span><span class=\"p\">,</span> <span class=\"n\">types2</span><span class=\"p\">,</span> <span class=\"n\">of2</span><span class=\"p\">,</span> <span class=\"n\">things2</span> <span class=\"nb\">int</span><span class=\"p\">)</span> <span class=\"p\">{</span> <span class=\"c1\">// this can&#39;t be done except with spaces</span>\n    <span class=\"n\">fmt</span><span class=\"p\">.</span><span class=\"n\">Println</span><span class=\"p\">(</span><span class=\"s\">&quot;have a good day&quot;</span><span class=\"p\">)</span>\n<span class=\"p\">}</span>\n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 54350449,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "steve@redlua.com",
            "sender_full_name": "Steven McCarthy (he) (SP2'15)",
            "sender_id": 7871,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "line length convention?",
            "submessages": [],
            "timestamp": 1457630540,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/7d2ab014ebf55e99afffba1a3d92be8155754f0f?x=x&version=1",
            "client": "website",
            "content": "<p>oh but you just use spaces for that instead of spaces</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 54350451,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "kamal@marhubi.com",
            "sender_full_name": "Kamal Marhubi (he) (m2'18)",
            "sender_id": 8090,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "line length convention?",
            "submessages": [],
            "timestamp": 1457630540,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/7d2ab014ebf55e99afffba1a3d92be8155754f0f?x=x&version=1",
            "client": "website",
            "content": "<p>spaces for aligment</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 54350455,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "kamal@marhubi.com",
            "sender_full_name": "Kamal Marhubi (he) (m2'18)",
            "sender_id": 8090,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "line length convention?",
            "submessages": [],
            "timestamp": 1457630555,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/7d2ab014ebf55e99afffba1a3d92be8155754f0f?x=x&version=1",
            "client": "website",
            "content": "<p>part of the mantra :-)</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 54350461,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "kamal@marhubi.com",
            "sender_full_name": "Kamal Marhubi (he) (m2'18)",
            "sender_id": 8090,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "line length convention?",
            "submessages": [],
            "timestamp": 1457630563,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/6527e077e84e20214d5373101ea15910d6b6f7a3?x=x&version=1",
            "client": "website",
            "content": "<p>Right.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 54350462,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "steve@redlua.com",
            "sender_full_name": "Steven McCarthy (he) (SP2'15)",
            "sender_id": 7871,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "line length convention?",
            "submessages": [],
            "timestamp": 1457630567,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/7d2ab014ebf55e99afffba1a3d92be8155754f0f?x=x&version=1",
            "client": "website",
            "content": "<p>and if the <code>func reallyLongFunction(..</code> was itself indented by tabs, you use that many tabs first, then follow with spaces to get the aligmnet</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 54350467,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "kamal@marhubi.com",
            "sender_full_name": "Kamal Marhubi (he) (m2'18)",
            "sender_id": 8090,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "line length convention?",
            "submessages": [],
            "timestamp": 1457630603,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/6527e077e84e20214d5373101ea15910d6b6f7a3?x=x&version=1",
            "client": "website",
            "content": "<p>Yeah.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 54350468,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "steve@redlua.com",
            "sender_full_name": "Steven McCarthy (he) (SP2'15)",
            "sender_id": 7871,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "line length convention?",
            "submessages": [],
            "timestamp": 1457630617,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/7d2ab014ebf55e99afffba1a3d92be8155754f0f?x=x&version=1",
            "client": "website",
            "content": "<p>it's a really great idea in theory, but too hard to get consistently done</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 54350469,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "kamal@marhubi.com",
            "sender_full_name": "Kamal Marhubi (he) (m2'18)",
            "sender_id": 8090,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "line length convention?",
            "submessages": [],
            "timestamp": 1457630620,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/7d2ab014ebf55e99afffba1a3d92be8155754f0f?x=x&version=1",
            "client": "website",
            "content": "<p>well except by a tool like gofmt, which is why I'm surprised at the ugly choice there</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 54350503,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "kamal@marhubi.com",
            "sender_full_name": "Kamal Marhubi (he) (m2'18)",
            "sender_id": 8090,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "line length convention?",
            "submessages": [],
            "timestamp": 1457630647,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/6527e077e84e20214d5373101ea15910d6b6f7a3?x=x&version=1",
            "client": "website",
            "content": "<p>I kinda wanna look through the Go repo now, and find multiline function definitions, and see if they do anything unique with it.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 54350531,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "steve@redlua.com",
            "sender_full_name": "Steven McCarthy (he) (SP2'15)",
            "sender_id": 7871,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "line length convention?",
            "submessages": [],
            "timestamp": 1457630711,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/6527e077e84e20214d5373101ea15910d6b6f7a3?x=x&version=1",
            "client": "website",
            "content": "<p>Is there any major benefit to using a slice vs. a slice of pointers?<br>\n<code>[]MyStruct</code> vs. <code>[]*MyStruct</code></p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 54401258,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "steve@redlua.com",
            "sender_full_name": "Steven McCarthy (he) (SP2'15)",
            "sender_id": 7871,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "slice of pointers?",
            "submessages": [],
            "timestamp": 1457737812,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/6527e077e84e20214d5373101ea15910d6b6f7a3?x=x&version=1",
            "client": "website",
            "content": "<p>I thought that a slice was already just a bunch of pointers to a backing array, so it's already kind of pointer-esque.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 54401260,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "steve@redlua.com",
            "sender_full_name": "Steven McCarthy (he) (SP2'15)",
            "sender_id": 7871,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "slice of pointers?",
            "submessages": [],
            "timestamp": 1457737837,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/6527e077e84e20214d5373101ea15910d6b6f7a3?x=x&version=1",
            "client": "website",
            "content": "<p>Like, if you pass a slice to a function and modify elements, they're modified outside of the context of that function as well (as opposed to other values like strings and whatnot). So does having a slice of pointers only allow you to have <code>nil</code> values, or are there other benefits?</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 54401307,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "steve@redlua.com",
            "sender_full_name": "Steven McCarthy (he) (SP2'15)",
            "sender_id": 7871,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "slice of pointers?",
            "submessages": [],
            "timestamp": 1457737950,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/a179bb8c3fc4ab0975954f57d47fa6c53a8c2dad?x=x&version=2",
            "client": "website",
            "content": "<p>Depending on what's going on, a slice of pointers might be more performant than a slice of values. A slice isn't a bunch of pointers, it's one pointer to a tightly-packed array. The contents of the array are contiguous in memory. If you sort <code>[]OneMegabyteStruct</code>, it's going to be copying a megabyte around every time it swaps two elements. If you sort <code>[]*OneMegabyteStruct</code>, swaps only operate on a handful of bytes (i.e. the pointers).</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 54404063,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "jay@jayschwa.net",
            "sender_full_name": "Jay Weisskopf Petacat (W2'17)",
            "sender_id": 829,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "slice of pointers?",
            "submessages": [],
            "timestamp": 1457744038,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/7d2ab014ebf55e99afffba1a3d92be8155754f0f?x=x&version=1",
            "client": "website",
            "content": "<p>On the flip side, every access to the actual <code>MyStruct</code> via <code>[]*MyStruct</code> will have an extra pointer indirection, which could also be a performance problem. I think you'd see that manifest pretty quickly if you were doing something like summing the <code>MyStruct.myField</code> property on a relatively large array.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 54421791,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "kamal@marhubi.com",
            "sender_full_name": "Kamal Marhubi (he) (m2'18)",
            "sender_id": 8090,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "slice of pointers?",
            "submessages": [],
            "timestamp": 1457795477,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/7d2ab014ebf55e99afffba1a3d92be8155754f0f?x=x&version=1",
            "client": "website",
            "content": "<p>I think if the performance matters, you'd have to benchmark both.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 54421879,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "kamal@marhubi.com",
            "sender_full_name": "Kamal Marhubi (he) (m2'18)",
            "sender_id": 8090,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "slice of pointers?",
            "submessages": [],
            "timestamp": 1457795736,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/6527e077e84e20214d5373101ea15910d6b6f7a3?x=x&version=1",
            "client": "website",
            "content": "<p>Ah, good stuff. Thanks to you both.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 54425643,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "steve@redlua.com",
            "sender_full_name": "Steven McCarthy (he) (SP2'15)",
            "sender_id": 7871,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "slice of pointers?",
            "submessages": [],
            "timestamp": 1457806351,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/6527e077e84e20214d5373101ea15910d6b6f7a3?x=x&version=1",
            "client": "website",
            "content": "<p>Yeah, what little I found on it was \"benchmark both\" and \"for small structs, you probably don't need the pointer\".</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 54425646,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "steve@redlua.com",
            "sender_full_name": "Steven McCarthy (he) (SP2'15)",
            "sender_id": 7871,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "slice of pointers?",
            "submessages": [],
            "timestamp": 1457806390,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/6527e077e84e20214d5373101ea15910d6b6f7a3?x=x&version=1",
            "client": "website",
            "content": "<p>I was unaware that there was really any cost to a pointer indirection, though it makes sense from a lower level perspective now that I think about it.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 54425682,
            "is_me_message": false,
            "last_edit_timestamp": 1457806871,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "steve@redlua.com",
            "sender_full_name": "Steven McCarthy (he) (SP2'15)",
            "sender_id": 7871,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "slice of pointers?",
            "submessages": [],
            "timestamp": 1457806454,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/e525dd9dc84c68e55de0e0dd2a724f3d?d=identicon&version=1",
            "client": "desktop app Mac 0.5.1",
            "content": "<p>Do stream members have a preferred way of doing dependency management?<br>\nSeems like there is some disagreement around vendoring etc and things are in a bit of an unsettled state. Anybody have any experience with this?</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 54770120,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "zmackie@gmail.com",
            "sender_full_name": "Zander Mackie (SP1'16)",
            "sender_id": 9086,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "dependencies",
            "submessages": [],
            "timestamp": 1458597750,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/044b59a59f2bfb736b3142db2cd025ca?d=identicon&version=1",
            "client": "website",
            "content": "<p>Well, I'm biased, but the \"idiomatic\" way is vendoring with the ./vendor/ folder, and I made gvt to be the simplest tool to download deps there <a href=\"https://github.com/FiloSottile/gvt\" target=\"_blank\" title=\"https://github.com/FiloSottile/gvt\">https://github.com/FiloSottile/gvt</a></p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 54803528,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "hi@filippo.io",
            "sender_full_name": "Filippo Valsorda (F2'17)",
            "sender_id": 2884,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "dependencies",
            "submessages": [],
            "timestamp": 1458666258,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/e525dd9dc84c68e55de0e0dd2a724f3d?d=identicon&version=1",
            "client": "desktop app Mac 0.5.1",
            "content": "<p>Beautiful! Thats exactly what I'm looking for (and thanks for building that...)</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 54837521,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "zmackie@gmail.com",
            "sender_full_name": "Zander Mackie (SP1'16)",
            "sender_id": 9086,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "dependencies",
            "submessages": [],
            "timestamp": 1458736806,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/55fd3687a9defe1211c10d99d5e93316c71fcbe6?x=x&version=1",
            "client": "website",
            "content": "<p>I can't seem to find any literature on best practice here - looks like the call gets passed down to <code>os.File.Write()</code>, which panics if the length of bytes written does not equal the length of the bytes array passed in. Does this mean it's a buffered write, or should I be using the <code>bufio</code> package with this?</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 55030054,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "cheng.frank.chen@gmail.com",
            "sender_full_name": "Frank Chen (S1'15)",
            "sender_id": 8077,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "Conn.Write()",
            "submessages": [],
            "timestamp": 1459066371,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/6527e077e84e20214d5373101ea15910d6b6f7a3?x=x&version=1",
            "client": "website",
            "content": "<p>Which <code>Conn</code> are you referring to? What package is <code>Conn</code> in?</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 55046099,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "steve@redlua.com",
            "sender_full_name": "Steven McCarthy (he) (SP2'15)",
            "sender_id": 7871,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "Conn.Write()",
            "submessages": [],
            "timestamp": 1459088343,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/55fd3687a9defe1211c10d99d5e93316c71fcbe6?x=x&version=1",
            "client": "website",
            "content": "<p>oops. <code>net.Conn</code></p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 55052692,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "cheng.frank.chen@gmail.com",
            "sender_full_name": "Frank Chen (S1'15)",
            "sender_id": 8077,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "Conn.Write()",
            "submessages": [],
            "timestamp": 1459097275,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/55fd3687a9defe1211c10d99d5e93316c71fcbe6?x=x&version=1",
            "client": "website",
            "content": "<p>more specifically, <code>net.TCPConn</code></p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 55052748,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "cheng.frank.chen@gmail.com",
            "sender_full_name": "Frank Chen (S1'15)",
            "sender_id": 8077,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "Conn.Write()",
            "submessages": [],
            "timestamp": 1459097323,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/6527e077e84e20214d5373101ea15910d6b6f7a3?x=x&version=1",
            "client": "website",
            "content": "<p><a href=\"https://golang.org/src/os/file.go?s=4174:4223#L122\" target=\"_blank\" title=\"https://golang.org/src/os/file.go?s=4174:4223#L122\">os.File.Write()</a> doesn't appear to be buffered. Seems like you probably want something like <a href=\"https://golang.org/src/bufio/bufio.go?s=14841:14893#L578\" target=\"_blank\" title=\"https://golang.org/src/bufio/bufio.go?s=14841:14893#L578\">what's in the bufio package</a> (as you'd said before). Though I couldn't find the specific TCPConn implementation (it's hard for me to find private structs using only the <a href=\"http://golang.org\" target=\"_blank\" title=\"http://golang.org\">golang.org</a> doc interface :\\ )</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 55095072,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "steve@redlua.com",
            "sender_full_name": "Steven McCarthy (he) (SP2'15)",
            "sender_id": 7871,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "Conn.Write()",
            "submessages": [],
            "timestamp": 1459151799,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/0a35beaf5a354dafdf10494c0313e10fffc154fd?x=x&version=1",
            "client": "website",
            "content": "<p>I'm trying to write a piece of code like this, and am having some trouble:</p>\n<div class=\"codehilite\"><pre><span class=\"k\">package</span> <span class=\"n\">main</span>\n\n<span class=\"k\">import</span> <span class=\"p\">(</span>\n    <span class=\"s\">&quot;fmt&quot;</span>\n<span class=\"p\">)</span>\n\n<span class=\"k\">func</span> <span class=\"n\">main</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n    <span class=\"n\">m</span> <span class=\"p\">:=</span> <span class=\"nb\">make</span><span class=\"p\">(</span><span class=\"k\">map</span><span class=\"p\">[</span><span class=\"nb\">string</span><span class=\"p\">]</span><span class=\"k\">struct</span><span class=\"p\">{</span>\n        <span class=\"n\">Foo</span> <span class=\"nb\">string</span>\n        <span class=\"n\">Bar</span> <span class=\"nb\">string</span>\n    <span class=\"p\">})</span>\n\n    <span class=\"n\">m</span><span class=\"p\">[</span><span class=\"s\">&quot;wheee&quot;</span><span class=\"p\">]</span> <span class=\"p\">=</span> <span class=\"p\">{</span><span class=\"n\">Foo</span><span class=\"p\">:</span> <span class=\"s\">&quot;hello&quot;</span><span class=\"p\">,</span> <span class=\"n\">Bar</span><span class=\"p\">:</span> <span class=\"s\">&quot;world&quot;</span><span class=\"p\">}</span>\n    <span class=\"n\">fmt</span><span class=\"p\">.</span><span class=\"n\">Println</span><span class=\"p\">(</span><span class=\"n\">m</span><span class=\"p\">)</span>\n<span class=\"p\">}</span>\n</pre></div>\n\n\n<p>(play link: <a href=\"http://play.golang.org/p/b0AKMAnSX4\" target=\"_blank\" title=\"http://play.golang.org/p/b0AKMAnSX4\">http://play.golang.org/p/b0AKMAnSX4</a>)</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 55822528,
            "is_me_message": false,
            "last_edit_timestamp": 1460389463,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "maia.mcc@gmail.com",
            "sender_full_name": "Maia McCormick (she) (S2'14)",
            "sender_id": 6175,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "filling an anonymous struct?",
            "submessages": [],
            "timestamp": 1460389457,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/0a35beaf5a354dafdf10494c0313e10fffc154fd?x=x&version=1",
            "client": "website",
            "content": "<p>this code throws <code>syntax error: missing operand</code> on the line where i assign to my map</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 55822545,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "maia.mcc@gmail.com",
            "sender_full_name": "Maia McCormick (she) (S2'14)",
            "sender_id": 6175,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "filling an anonymous struct?",
            "submessages": [],
            "timestamp": 1460389488,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/0a35beaf5a354dafdf10494c0313e10fffc154fd?x=x&version=1",
            "client": "website",
            "content": "<p>i assume that I need to name the struct in that line somehow, like, <code>m[\"wheee\"] = MyShinyStruct{Foo: \"hello\", Bar: \"world\"}</code>... but it's anonymous, so how do i do that??</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 55822566,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "maia.mcc@gmail.com",
            "sender_full_name": "Maia McCormick (she) (S2'14)",
            "sender_id": 6175,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "filling an anonymous struct?",
            "submessages": [],
            "timestamp": 1460389518,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/0a35beaf5a354dafdf10494c0313e10fffc154fd?x=x&version=1",
            "client": "website",
            "content": "<p>Compare to <a href=\"http://play.golang.org/p/mDUTzOlSnS\" target=\"_blank\" title=\"http://play.golang.org/p/mDUTzOlSnS\">this code</a>:</p>\n<div class=\"codehilite\"><pre><span class=\"k\">package</span> <span class=\"n\">main</span>\n\n<span class=\"k\">import</span> <span class=\"p\">(</span>\n    <span class=\"s\">&quot;fmt&quot;</span>\n<span class=\"p\">)</span>\n\n<span class=\"k\">type</span> <span class=\"n\">MyShinyStruct</span> <span class=\"k\">struct</span> <span class=\"p\">{</span>\n    <span class=\"n\">Foo</span> <span class=\"nb\">string</span>\n    <span class=\"n\">Bar</span> <span class=\"nb\">string</span>\n<span class=\"p\">}</span>\n\n<span class=\"k\">func</span> <span class=\"n\">main</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n    <span class=\"n\">m</span> <span class=\"p\">:=</span> <span class=\"nb\">make</span><span class=\"p\">(</span><span class=\"k\">map</span><span class=\"p\">[</span><span class=\"nb\">string</span><span class=\"p\">]</span><span class=\"n\">MyShinyStruct</span><span class=\"p\">)</span>\n\n    <span class=\"n\">m</span><span class=\"p\">[</span><span class=\"s\">&quot;wheee&quot;</span><span class=\"p\">]</span> <span class=\"p\">=</span> <span class=\"n\">MyShinyStruct</span><span class=\"p\">{</span><span class=\"n\">Foo</span><span class=\"p\">:</span> <span class=\"s\">&quot;hello&quot;</span><span class=\"p\">,</span> <span class=\"n\">Bar</span><span class=\"p\">:</span> <span class=\"s\">&quot;world&quot;</span><span class=\"p\">}</span>\n    <span class=\"n\">fmt</span><span class=\"p\">.</span><span class=\"n\">Println</span><span class=\"p\">(</span><span class=\"n\">m</span><span class=\"p\">)</span>\n<span class=\"p\">}</span>\n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 55822631,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "maia.mcc@gmail.com",
            "sender_full_name": "Maia McCormick (she) (S2'14)",
            "sender_id": 6175,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "filling an anonymous struct?",
            "submessages": [],
            "timestamp": 1460389586,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/0a35beaf5a354dafdf10494c0313e10fffc154fd?x=x&version=1",
            "client": "website",
            "content": "<p>which works.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 55822633,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "maia.mcc@gmail.com",
            "sender_full_name": "Maia McCormick (she) (S2'14)",
            "sender_id": 6175,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "filling an anonymous struct?",
            "submessages": [],
            "timestamp": 1460389590,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/0851603cf378e565ce5ef0deee82f427a8b03bba?x=x&version=1",
            "client": "desktop app Mac 0.5.1",
            "content": "<p>Hmm I've seen this done like this before <a href=\"https://talks.golang.org/2012/10things.slide#2\" target=\"_blank\" title=\"https://talks.golang.org/2012/10things.slide#2\">https://talks.golang.org/2012/10things.slide#2</a></p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 55822636,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "pnasrat@gmail.com",
            "sender_full_name": "Pris Nasrat (she/they) (SP2'16)",
            "sender_id": 9238,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "filling an anonymous struct?",
            "submessages": [],
            "timestamp": 1460389597,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/0a35beaf5a354dafdf10494c0313e10fffc154fd?x=x&version=1",
            "client": "website",
            "content": "<p>I <a href=\"http://play.golang.org/p/Rf7DU3hNxg\" target=\"_blank\" title=\"http://play.golang.org/p/Rf7DU3hNxg\">tried that too</a>, but no dice <img alt=\":frowning:\" class=\"emoji\" src=\"static/third/gemoji/images/emoji/frowning.png\" title=\":frowning:\"> </p>\n<div class=\"codehilite\"><pre><span class=\"k\">package</span> <span class=\"n\">main</span>\n\n<span class=\"k\">import</span> <span class=\"p\">(</span>\n    <span class=\"s\">&quot;fmt&quot;</span>\n<span class=\"p\">)</span>\n\n<span class=\"k\">func</span> <span class=\"n\">main</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n    <span class=\"n\">m</span> <span class=\"p\">:=</span> <span class=\"nb\">make</span><span class=\"p\">(</span><span class=\"k\">map</span><span class=\"p\">[</span><span class=\"nb\">string</span><span class=\"p\">]</span><span class=\"k\">struct</span><span class=\"p\">{</span>\n        <span class=\"n\">Foo</span> <span class=\"nb\">string</span>\n        <span class=\"n\">Bar</span> <span class=\"nb\">string</span>\n    <span class=\"p\">})</span>\n\n    <span class=\"n\">m</span><span class=\"p\">[</span><span class=\"s\">&quot;wheee&quot;</span><span class=\"p\">].</span><span class=\"n\">Foo</span> <span class=\"p\">=</span> <span class=\"s\">&quot;hello&quot;</span>\n    <span class=\"n\">m</span><span class=\"p\">[</span><span class=\"s\">&quot;wheee&quot;</span><span class=\"p\">].</span><span class=\"n\">Bar</span> <span class=\"p\">=</span> <span class=\"s\">&quot;world&quot;</span>\n    <span class=\"n\">fmt</span><span class=\"p\">.</span><span class=\"n\">Println</span><span class=\"p\">(</span><span class=\"n\">m</span><span class=\"p\">)</span>\n<span class=\"p\">}</span>\n</pre></div>\n\n\n<p>returns error:</p>\n<div class=\"codehilite\"><pre>prog.go:13: cannot assign to m[&quot;wheee&quot;].Foo\nprog.go:14: cannot assign to m[&quot;wheee&quot;].Bar\n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 55822711,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "maia.mcc@gmail.com",
            "sender_full_name": "Maia McCormick (she) (S2'14)",
            "sender_id": 6175,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "filling an anonymous struct?",
            "submessages": [],
            "timestamp": 1460389707,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/0a35beaf5a354dafdf10494c0313e10fffc154fd?x=x&version=1",
            "client": "website",
            "content": "<p>unless I'm missing something silly here?</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 55822715,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "maia.mcc@gmail.com",
            "sender_full_name": "Maia McCormick (she) (S2'14)",
            "sender_id": 6175,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "filling an anonymous struct?",
            "submessages": [],
            "timestamp": 1460389714,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/0851603cf378e565ce5ef0deee82f427a8b03bba?x=x&version=1",
            "client": "desktop app Mac 0.5.1",
            "content": "<p><a href=\"http://play.golang.org/p/93GwT-PWXK\" target=\"_blank\" title=\"http://play.golang.org/p/93GwT-PWXK\">http://play.golang.org/p/93GwT-PWXK</a> </p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 55822850,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "pnasrat@gmail.com",
            "sender_full_name": "Pris Nasrat (she/they) (SP2'16)",
            "sender_id": 9238,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "filling an anonymous struct?",
            "submessages": [],
            "timestamp": 1460389918,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/0851603cf378e565ce5ef0deee82f427a8b03bba?x=x&version=1",
            "client": "desktop app Mac 0.5.1",
            "content": "<p>So as it's anonymous I think you have to define it each time eg <a href=\"http://play.golang.org/p/bsOb1QBJwN\" target=\"_blank\" title=\"http://play.golang.org/p/bsOb1QBJwN\">http://play.golang.org/p/bsOb1QBJwN</a> as the type inference can't figure it out but I'd have to reread the language spec / play more</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 55822927,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "pnasrat@gmail.com",
            "sender_full_name": "Pris Nasrat (she/they) (SP2'16)",
            "sender_id": 9238,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "filling an anonymous struct?",
            "submessages": [],
            "timestamp": 1460390043,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/0851603cf378e565ce5ef0deee82f427a8b03bba?x=x&version=1",
            "client": "desktop app Mac 0.5.1",
            "content": "<p>Curious why not have a named struct - what are you trying to achieve?</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 55822967,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "pnasrat@gmail.com",
            "sender_full_name": "Pris Nasrat (she/they) (SP2'16)",
            "sender_id": 9238,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "filling an anonymous struct?",
            "submessages": [],
            "timestamp": 1460390088,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/0a35beaf5a354dafdf10494c0313e10fffc154fd?x=x&version=1",
            "client": "website",
            "content": "<p>Blargh. So I thought it'd be cleaner to use an anon struct than a struct that was used in only a single function... but clearly not if i have to define it each time -.-</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 55823248,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "maia.mcc@gmail.com",
            "sender_full_name": "Maia McCormick (she) (S2'14)",
            "sender_id": 6175,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "filling an anonymous struct?",
            "submessages": [],
            "timestamp": 1460390473,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/0a35beaf5a354dafdf10494c0313e10fffc154fd?x=x&version=1",
            "client": "website",
            "content": "<p>what I'm ACTUALLY trying to do though is fill in the map as I iterate over some stuff, so your suggestion doesn't quite work for me because it assumes I know the values of the map at the time of initialization</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 55823279,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "maia.mcc@gmail.com",
            "sender_full_name": "Maia McCormick (she) (S2'14)",
            "sender_id": 6175,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "filling an anonymous struct?",
            "submessages": [],
            "timestamp": 1460390524,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/0a35beaf5a354dafdf10494c0313e10fffc154fd?x=x&version=1",
            "client": "website",
            "content": "<p>I probably will just end up using a named struct, but now I'm curious--how would you handle this case? i.e.:</p>\n<div class=\"codehilite\"><pre><span class=\"k\">package</span> <span class=\"n\">main</span>\n\n<span class=\"k\">import</span> <span class=\"p\">(</span>\n    <span class=\"s\">&quot;fmt&quot;</span>\n<span class=\"p\">)</span>\n\n<span class=\"k\">func</span> <span class=\"n\">main</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n    <span class=\"n\">m</span> <span class=\"p\">:=</span> <span class=\"nb\">make</span><span class=\"p\">(</span><span class=\"k\">map</span><span class=\"p\">[</span><span class=\"nb\">string</span><span class=\"p\">]</span><span class=\"k\">struct</span><span class=\"p\">{</span>\n        <span class=\"n\">Foo</span> <span class=\"nb\">string</span>\n        <span class=\"n\">Bar</span> <span class=\"nb\">string</span>\n    <span class=\"p\">})</span>\n\n    <span class=\"k\">for</span> <span class=\"n\">_</span><span class=\"p\">,</span> <span class=\"n\">thing</span> <span class=\"p\">:=</span> <span class=\"k\">range</span> <span class=\"n\">MySliceOfStuff</span> <span class=\"p\">{</span>\n        <span class=\"n\">m</span><span class=\"p\">[</span><span class=\"n\">thing</span><span class=\"p\">.</span><span class=\"n\">Name</span><span class=\"p\">]</span> <span class=\"p\">=</span> <span class=\"p\">{</span><span class=\"n\">Foo</span><span class=\"p\">:</span> <span class=\"n\">thing</span><span class=\"p\">.</span><span class=\"n\">PropertyA</span><span class=\"p\">,</span> <span class=\"n\">Bar</span><span class=\"p\">:</span> <span class=\"n\">thing</span><span class=\"p\">.</span><span class=\"n\">PropertyB</span><span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"n\">fmt</span><span class=\"p\">.</span><span class=\"n\">Println</span><span class=\"p\">(</span><span class=\"n\">m</span><span class=\"p\">)</span>\n<span class=\"p\">}</span>\n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 55823346,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "maia.mcc@gmail.com",
            "sender_full_name": "Maia McCormick (she) (S2'14)",
            "sender_id": 6175,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "filling an anonymous struct?",
            "submessages": [],
            "timestamp": 1460390617,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/0a35beaf5a354dafdf10494c0313e10fffc154fd?x=x&version=1",
            "client": "website",
            "content": "<p>(A non-working play link: <a href=\"http://play.golang.org/p/eJ7Bfg21yo\" target=\"_blank\" title=\"http://play.golang.org/p/eJ7Bfg21yo\">http://play.golang.org/p/eJ7Bfg21yo</a> )</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 55823352,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "maia.mcc@gmail.com",
            "sender_full_name": "Maia McCormick (she) (S2'14)",
            "sender_id": 6175,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "filling an anonymous struct?",
            "submessages": [],
            "timestamp": 1460390630,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/0851603cf378e565ce5ef0deee82f427a8b03bba?x=x&version=1",
            "client": "desktop app Mac 0.5.1",
            "content": "<p>I think giving it a name is the right thing to do - you can make it non-exported. It's not bad to create a struct. Anonymous structs are great eg for initialized data such as testing tables. You may be able to do something using reflect and StructOf but really that's probably messier than just naming it. I think having a name for the type gives clarity anyway </p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 55823941,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "pnasrat@gmail.com",
            "sender_full_name": "Pris Nasrat (she/they) (SP2'16)",
            "sender_id": 9238,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "filling an anonymous struct?",
            "submessages": [],
            "timestamp": 1460391510,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/6527e077e84e20214d5373101ea15910d6b6f7a3?x=x&version=1",
            "client": "website",
            "content": "<p>I have no idea what the implications of doing <a href=\"http://play.golang.org/p/5frlDsevod\" target=\"_blank\" title=\"http://play.golang.org/p/5frlDsevod\">this</a> is, but you could define the struct only in your function. It's then not even a type in your package (exported or otherwise).</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 55839386,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "steve@redlua.com",
            "sender_full_name": "Steven McCarthy (he) (SP2'15)",
            "sender_id": 7871,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "filling an anonymous struct?",
            "submessages": [],
            "timestamp": 1460414884,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/6527e077e84e20214d5373101ea15910d6b6f7a3?x=x&version=1",
            "client": "website",
            "content": "<p>However, if you DID want to use an unnamed struct that wasn't defined ahead of time, you could define your map as you have above, and then you write out the full anonymous struct definition before creating one by adding the {} after it.<br>\ne.g.</p>\n<div class=\"codehilite\"><pre><span class=\"n\">m</span><span class=\"p\">[</span><span class=\"s\">&quot;string&quot;</span><span class=\"p\">]</span> <span class=\"p\">=</span> <span class=\"k\">struct</span><span class=\"p\">{</span><span class=\"n\">Foo</span><span class=\"p\">,</span> <span class=\"n\">Bar</span> <span class=\"nb\">string</span><span class=\"p\">}{</span><span class=\"n\">Foo</span><span class=\"p\">:</span> <span class=\"s\">&quot;string1&quot;</span><span class=\"p\">,</span> <span class=\"n\">Bar</span><span class=\"p\">:</span> <span class=\"s\">&quot;string2&quot;</span><span class=\"p\">}</span>\n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 55839482,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "steve@redlua.com",
            "sender_full_name": "Steven McCarthy (he) (SP2'15)",
            "sender_id": 7871,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "filling an anonymous struct?",
            "submessages": [],
            "timestamp": 1460415027,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/6527e077e84e20214d5373101ea15910d6b6f7a3?x=x&version=1",
            "client": "website",
            "content": "<p><a href=\"http://play.golang.org/p/JsOd6SJqPt\" target=\"_blank\" title=\"http://play.golang.org/p/JsOd6SJqPt\">shown compiling and running here</a>. Though this is incredibly similar to what <span class=\"user-mention\" data-user-email=\"pnasrat@gmail.com\">@Paul Nasrat (SP2'16)</span> wrote above.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 55839498,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "steve@redlua.com",
            "sender_full_name": "Steven McCarthy (he) (SP2'15)",
            "sender_id": 7871,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "filling an anonymous struct?",
            "submessages": [],
            "timestamp": 1460415078,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/6527e077e84e20214d5373101ea15910d6b6f7a3?x=x&version=1",
            "client": "website",
            "content": "<p><img alt=\":arrow_up:\" class=\"emoji\" src=\"static/third/gemoji/images/emoji/arrow_up.png\" title=\":arrow_up:\"> <span class=\"user-mention\" data-user-email=\"maia.mcc@gmail.com\">@Maia McCormick (S'14)</span> <img alt=\":arrow_heading_up:\" class=\"emoji\" src=\"static/third/gemoji/images/emoji/arrow_heading_up.png\" title=\":arrow_heading_up:\"> </p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 55839509,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "steve@redlua.com",
            "sender_full_name": "Steven McCarthy (he) (SP2'15)",
            "sender_id": 7871,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "filling an anonymous struct?",
            "submessages": [],
            "timestamp": 1460415116,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/0851603cf378e565ce5ef0deee82f427a8b03bba?x=x&version=1",
            "client": "desktop app Mac 0.5.1",
            "content": "<p><span class=\"user-mention\" data-user-email=\"maia.mcc@gmail.com\">@Maia McCormick (S'14)</span> you mentioned that this was to handle unknowns at runtime - are you using JSON or something as input (ie would json.Unmarshall work for you. If you're interested on how this might work. If you're curious on how you might use reflection to handle this looking at <a href=\"https://golang.org/src/encoding/json/decode.go\" target=\"_blank\" title=\"https://golang.org/src/encoding/json/decode.go\">https://golang.org/src/encoding/json/decode.go</a> may give you some ideas, but it is likely overkill for what you are trying to achieve and is probably only useful to look at out of curiosity</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 55840219,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "pnasrat@gmail.com",
            "sender_full_name": "Pris Nasrat (she/they) (SP2'16)",
            "sender_id": 9238,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "filling an anonymous struct?",
            "submessages": [],
            "timestamp": 1460416333,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/0a35beaf5a354dafdf10494c0313e10fffc154fd?x=x&version=1",
            "client": "website",
            "content": "<p>aaahhhh yes <span class=\"user-mention\" data-user-email=\"steve@redlua.com\">@Steven McCarthy (SP2'15)</span> that's what I was missing!</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 55864739,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "maia.mcc@gmail.com",
            "sender_full_name": "Maia McCormick (she) (S2'14)",
            "sender_id": 6175,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "filling an anonymous struct?",
            "submessages": [],
            "timestamp": 1460468847,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/0a35beaf5a354dafdf10494c0313e10fffc154fd?x=x&version=1",
            "client": "website",
            "content": "<p>Thanks to you and <span class=\"user-mention\" data-user-email=\"pnasrat@gmail.com\">@Paul Nasrat (SP2'16)</span> for your thoughts! Yeah I'll definitely just be naming the damn struct, but I'm also glad to know how you actually do this, it was bugging me!</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 55864748,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "maia.mcc@gmail.com",
            "sender_full_name": "Maia McCormick (she) (S2'14)",
            "sender_id": 6175,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "filling an anonymous struct?",
            "submessages": [],
            "timestamp": 1460468880,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/6527e077e84e20214d5373101ea15910d6b6f7a3?x=x&version=1",
            "client": "website",
            "content": "<p>Yeah. I find it funny / interesting that there's such a thing in go as the empty struct: <code>struct{}</code>, but in order to instantiate one, you do the same thing you do with any other struct (or map or slice), and put it's values in the { }'s. So sometimes you end up with this funny thing: <code>struct{}{}</code><br>\nOr maybe something like: <code>setOfStrings := map[string]struct{}{}</code> if you were say making a set of strings by using a map whose values take up no space :)</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 55865510,
            "is_me_message": false,
            "last_edit_timestamp": 1460470491,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "steve@redlua.com",
            "sender_full_name": "Steven McCarthy (he) (SP2'15)",
            "sender_id": 7871,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "filling an anonymous struct?",
            "submessages": [],
            "timestamp": 1460470472,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/6527e077e84e20214d5373101ea15910d6b6f7a3?x=x&version=1",
            "client": "website",
            "content": "<p>Randomly saw a testing article on Go, and it showed that, while you'd need to re-declare the anonymous struct to create it, you CAN access properties of an anonymous struct. <a href=\"http://play.golang.org/p/9bpFdxcjtD\" target=\"_blank\" title=\"http://play.golang.org/p/9bpFdxcjtD\">Here's a play</a>.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 55909235,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "steve@redlua.com",
            "sender_full_name": "Steven McCarthy (he) (SP2'15)",
            "sender_id": 7871,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "filling an anonymous struct?",
            "submessages": [],
            "timestamp": 1460557393,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/b9888e7d73b8ee4743f44b1bd8dac2108ba9d29c?x=x&version=1",
            "client": "website",
            "content": "<p>i'm very new to go but can't seem to figure out how to add parameters to a http get or post request. right now, i'm trying to make an api POST request with some parameters. for example, i have a base URL \"<a href=\"http://www.foo.com\" target=\"_blank\" title=\"http://www.foo.com\">www.foo.com</a>\" and parameters {\"content\": \"hi, \"apikey\" : \"12345\"} ...what do i do? i'm coming from a python background, using the requests library which abstracts creating URLs, params, and sending the request for me and struggling to find a really really basic request example in go.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 56007300,
            "is_me_message": false,
            "last_edit_timestamp": 1460751096,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "pickering.amanda@gmail.com",
            "sender_full_name": "Amanda Pickering (W1'14)",
            "sender_id": 6915,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "basic http requests",
            "submessages": [],
            "timestamp": 1460750958,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/b9888e7d73b8ee4743f44b1bd8dac2108ba9d29c?x=x&version=1",
            "client": "website",
            "content": "<p>so far i've used the http lib to created an http.Client, and i know from there i can send a GET of for a url. should i construct/encode a url using the url lib before i GET or POST?</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 56007356,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "pickering.amanda@gmail.com",
            "sender_full_name": "Amanda Pickering (W1'14)",
            "sender_id": 6915,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "basic http requests",
            "submessages": [],
            "timestamp": 1460751010,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/b9888e7d73b8ee4743f44b1bd8dac2108ba9d29c?x=x&version=1",
            "client": "website",
            "content": "<p>the clients POST method has the signature Post(url string, bodyType string, body io.Reader) ...which leads me to think the url should be a string though, also what is body type, what is body, i am lost</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 56007374,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "pickering.amanda@gmail.com",
            "sender_full_name": "Amanda Pickering (W1'14)",
            "sender_id": 6915,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "basic http requests",
            "submessages": [],
            "timestamp": 1460751060,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/2de9901913d2f414b7b174d2c2c69a88?d=identicon&version=1",
            "client": "website",
            "content": "<p><a href=\"https://golang.org/pkg/net/url/#Values\" target=\"_blank\" title=\"https://golang.org/pkg/net/url/#Values\">https://golang.org/pkg/net/url/#Values</a></p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 56007436,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "chris@printf.net",
            "sender_full_name": "Chris Ball (SP2'15)",
            "sender_id": 7857,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "basic http requests",
            "submessages": [],
            "timestamp": 1460751150,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/2de9901913d2f414b7b174d2c2c69a88?d=identicon&version=1",
            "client": "website",
            "content": "<p>Here's an example:</p>\n<div class=\"codehilite\"><pre>values := make(url.Values)\nvalues.Set(\u201ccontent\u201d, \u201chi\u201d)\nvalues.Set(\u201capikey&quot;, &quot;12345&quot;)\nr, err := http.PostForm(\u201chttp://someurl&quot;, values)\n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 56007514,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "chris@printf.net",
            "sender_full_name": "Chris Ball (SP2'15)",
            "sender_id": 7857,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "basic http requests",
            "submessages": [],
            "timestamp": 1460751263,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/b9888e7d73b8ee4743f44b1bd8dac2108ba9d29c?x=x&version=1",
            "client": "website",
            "content": "<p>thank you! this is exactly what i needed! </p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 56008791,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "pickering.amanda@gmail.com",
            "sender_full_name": "Amanda Pickering (W1'14)",
            "sender_id": 6915,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "basic http requests",
            "submessages": [],
            "timestamp": 1460753374,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/1380ded36dafac0d6f808b9b7b6c4e85266428a1?x=x&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"maia.mcc@gmail.com\">@Maia McCormick (S'14)</span>, <span class=\"user-mention\" data-user-email=\"steve@redlua.com\">@Steven McCarthy (SP2'15)</span>  I'm late to the anynomous struct party, but.... I've found them to be pretty useful, and I frequently use them as \"disposable\" data structures - values that will be written to once and read from once or twice. (Rule of 3's: if you're repeating the same code 3 times, best to pull it into a function with a name. I guess I apply the same concept to anonymous struct instances.)</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 56186738,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "travis@mcdem.us",
            "sender_full_name": "Travis McDemus (S'13)",
            "sender_id": 2139,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "filling an anonymous struct?",
            "submessages": [],
            "timestamp": 1461157096,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/1380ded36dafac0d6f808b9b7b6c4e85266428a1?x=x&version=1",
            "client": "website",
            "content": "<p>A case example is using anonymous structs to bundle up a few command line args passed to a main package. I do this sort of thing a lot, but only use that \"args\" anonymous struct from the main function (and refrain from passing it to other functions): <a href=\"https://github.com/aoeu/sketches/blob/master/argswithoutflags.go\" target=\"_blank\" title=\"https://github.com/aoeu/sketches/blob/master/argswithoutflags.go\">https://github.com/aoeu/sketches/blob/master/argswithoutflags.go</a></p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 56186760,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "travis@mcdem.us",
            "sender_full_name": "Travis McDemus (S'13)",
            "sender_id": 2139,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "filling an anonymous struct?",
            "submessages": [],
            "timestamp": 1461157194,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/1380ded36dafac0d6f808b9b7b6c4e85266428a1?x=x&version=1",
            "client": "website",
            "content": "<p>But they're really, really handy for tests, too.  Like, check out the ones at the top of the file for testing functions in the strings package!  O_O <a href=\"https://golang.org/src/strings/strings_test.go\" target=\"_blank\" title=\"https://golang.org/src/strings/strings_test.go\">https://golang.org/src/strings/strings_test.go</a></p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 56186885,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "travis@mcdem.us",
            "sender_full_name": "Travis McDemus (S'13)",
            "sender_id": 2139,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "filling an anonymous struct?",
            "submessages": [],
            "timestamp": 1461157373,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/1380ded36dafac0d6f808b9b7b6c4e85266428a1?x=x&version=1",
            "client": "website",
            "content": "<p>From that same file, this might actually be the most beautiful anonymous struct instance I have ever seen:  <code>{\"a\u263ab\u263bc\u2639d\", \"uvw\u263bxyz\", 2 + len(\"\u263a\")},</code></p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 56186911,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "travis@mcdem.us",
            "sender_full_name": "Travis McDemus (S'13)",
            "sender_id": 2139,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "filling an anonymous struct?",
            "submessages": [],
            "timestamp": 1461157445,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/7d2ab014ebf55e99afffba1a3d92be8155754f0f?x=x&version=1",
            "client": "website",
            "content": "<p>How do you do this? I want to get <code>golang.org/x/net/context</code> into my <code>vendor/</code> directory. I tried <code>env GO15VENDOREXPERIMENT=1 go get golang.org/x/net/context</code> thinking that might do something clever, but it didn't.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 56202356,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "kamal@marhubi.com",
            "sender_full_name": "Kamal Marhubi (he) (m2'18)",
            "sender_id": 8090,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "Adding a library under vendor/",
            "submessages": [],
            "timestamp": 1461182120,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/6527e077e84e20214d5373101ea15910d6b6f7a3?x=x&version=1",
            "client": "website",
            "content": "<p>Personally I copy the thing from the gopath's src into the vendor directory.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 56202367,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "steve@redlua.com",
            "sender_full_name": "Steven McCarthy (he) (SP2'15)",
            "sender_id": 7871,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "Adding a library under vendor/",
            "submessages": [],
            "timestamp": 1461182154,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/7d2ab014ebf55e99afffba1a3d92be8155754f0f?x=x&version=1",
            "client": "website",
            "content": "<p>Aside: I'm honestly confused how go \"packaging\" could have ended up in the same order of magnitude of confusing as python packaging, given decades of experience to draw on.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 56202407,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "kamal@marhubi.com",
            "sender_full_name": "Kamal Marhubi (he) (m2'18)",
            "sender_id": 8090,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "Adding a library under vendor/",
            "submessages": [],
            "timestamp": 1461182171,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/7d2ab014ebf55e99afffba1a3d92be8155754f0f?x=x&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"steve@redlua.com\">@Steven McCarthy (SP2'15)</span> do you set up a different gopath for each project?</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 56202417,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "kamal@marhubi.com",
            "sender_full_name": "Kamal Marhubi (he) (m2'18)",
            "sender_id": 8090,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "Adding a library under vendor/",
            "submessages": [],
            "timestamp": 1461182193,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/6527e077e84e20214d5373101ea15910d6b6f7a3?x=x&version=1",
            "client": "website",
            "content": "<p>I do not, though I'll need to test to see if this works outside my gopath.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 56202496,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "steve@redlua.com",
            "sender_full_name": "Steven McCarthy (he) (SP2'15)",
            "sender_id": 7871,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "Adding a library under vendor/",
            "submessages": [],
            "timestamp": 1461182312,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/6527e077e84e20214d5373101ea15910d6b6f7a3?x=x&version=1",
            "client": "website",
            "content": "<p>Essentially, you copy into your <code>vendor/</code> directory the same thing that exists from the gopath's <code>src/</code> directory. So, I have a project that needs <code>github.com/dancannon/gorethink</code>, and so I have in that project, a <code>vendor/github.com/dancannon/gorethink/&lt;stuff&gt;</code></p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 56202514,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "steve@redlua.com",
            "sender_full_name": "Steven McCarthy (he) (SP2'15)",
            "sender_id": 7871,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "Adding a library under vendor/",
            "submessages": [],
            "timestamp": 1461182373,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/7d2ab014ebf55e99afffba1a3d92be8155754f0f?x=x&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"steve@redlua.com\">@Steven McCarthy (SP2'15)</span> does that mean you might have too many things in your gopath if you're not careful?</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 56202649,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "kamal@marhubi.com",
            "sender_full_name": "Kamal Marhubi (he) (m2'18)",
            "sender_id": 8090,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "Adding a library under vendor/",
            "submessages": [],
            "timestamp": 1461182535,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/6527e077e84e20214d5373101ea15910d6b6f7a3?x=x&version=1",
            "client": "website",
            "content": "<p>No clue. I need to look up how vendoring works, apparently.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 56202672,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "steve@redlua.com",
            "sender_full_name": "Steven McCarthy (he) (SP2'15)",
            "sender_id": 7871,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "Adding a library under vendor/",
            "submessages": [],
            "timestamp": 1461182623,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/7d2ab014ebf55e99afffba1a3d92be8155754f0f?x=x&version=1",
            "client": "website",
            "content": "<p>Anyway, thanks! I think I can figure that out.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 56202715,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "kamal@marhubi.com",
            "sender_full_name": "Kamal Marhubi (he) (m2'18)",
            "sender_id": 8090,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "Adding a library under vendor/",
            "submessages": [],
            "timestamp": 1461182652,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/7d2ab014ebf55e99afffba1a3d92be8155754f0f?x=x&version=1",
            "client": "website",
            "content": "<p>I was hoping for a magic command that would just put the lib in <code>vendor/</code> instead of whatever my gopath is.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 56202721,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "kamal@marhubi.com",
            "sender_full_name": "Kamal Marhubi (he) (m2'18)",
            "sender_id": 8090,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "Adding a library under vendor/",
            "submessages": [],
            "timestamp": 1461182676,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/7d2ab014ebf55e99afffba1a3d92be8155754f0f?x=x&version=1",
            "client": "website",
            "content": "<p>I have no idea what my gopath is. Something I set up the last time I dealt with go code I guess!</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 56202727,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "kamal@marhubi.com",
            "sender_full_name": "Kamal Marhubi (he) (m2'18)",
            "sender_id": 8090,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "Adding a library under vendor/",
            "submessages": [],
            "timestamp": 1461182696,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/2de9901913d2f414b7b174d2c2c69a88?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"kamal@marhubi.com\">@Kamal Marhubi (S1'15)</span> I think you might be looking for <a href=\"https://github.com/kardianos/govendor\" target=\"_blank\" title=\"https://github.com/kardianos/govendor\">https://github.com/kardianos/govendor</a></p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 56202744,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "chris@printf.net",
            "sender_full_name": "Chris Ball (SP2'15)",
            "sender_id": 7857,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "Adding a library under vendor/",
            "submessages": [],
            "timestamp": 1461182741,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/6527e077e84e20214d5373101ea15910d6b6f7a3?x=x&version=1",
            "client": "website",
            "content": "<p>I find it interesting that projects with vendor'd dependencies need to be in the GOPATH.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 56202800,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "steve@redlua.com",
            "sender_full_name": "Steven McCarthy (he) (SP2'15)",
            "sender_id": 7871,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "Adding a library under vendor/",
            "submessages": [],
            "timestamp": 1461182797,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/6527e077e84e20214d5373101ea15910d6b6f7a3?x=x&version=1",
            "client": "website",
            "content": "<p>Or rather, the project needs to be in the GOPATH even if it uses vendor'd dependencies.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 56202821,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "steve@redlua.com",
            "sender_full_name": "Steven McCarthy (he) (SP2'15)",
            "sender_id": 7871,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "Adding a library under vendor/",
            "submessages": [],
            "timestamp": 1461182851,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/7d2ab014ebf55e99afffba1a3d92be8155754f0f?x=x&version=1",
            "client": "website",
            "content": "<p>yeah I feel like it's a real mess</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 56202876,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "kamal@marhubi.com",
            "sender_full_name": "Kamal Marhubi (he) (m2'18)",
            "sender_id": 8090,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "Adding a library under vendor/",
            "submessages": [],
            "timestamp": 1461182910,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/7d2ab014ebf55e99afffba1a3d92be8155754f0f?x=x&version=1",
            "client": "website",
            "content": "<p>makes sense in the monorepo world where go was created, but out here it's not a great fit</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 56202884,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "kamal@marhubi.com",
            "sender_full_name": "Kamal Marhubi (he) (m2'18)",
            "sender_id": 8090,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "Adding a library under vendor/",
            "submessages": [],
            "timestamp": 1461182931,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/6527e077e84e20214d5373101ea15910d6b6f7a3?x=x&version=1",
            "client": "website",
            "content": "<p>Well, obviously I don't understand go vendoring, but I don't feel like it's a super terrible system over all. I've just gotten in the habit of writing all my projects in my gopath, under the location I'll eventually be posting them anyway (github, gitlab, etc.)</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 56203176,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "steve@redlua.com",
            "sender_full_name": "Steven McCarthy (he) (SP2'15)",
            "sender_id": 7871,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "Adding a library under vendor/",
            "submessages": [],
            "timestamp": 1461183375,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/6527e077e84e20214d5373101ea15910d6b6f7a3?x=x&version=1",
            "client": "website",
            "content": "<p>But yeah, <span class=\"user-mention\" data-user-email=\"kamal@marhubi.com\">@Kamal Marhubi (S1'15)</span>, you might get too many things in your gopath, even if you vendor, but at least things will be relatively close to where they're being used (if you're not vendoring).</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 56203250,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "steve@redlua.com",
            "sender_full_name": "Steven McCarthy (he) (SP2'15)",
            "sender_id": 7871,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "Adding a library under vendor/",
            "submessages": [],
            "timestamp": 1461183528,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/6527e077e84e20214d5373101ea15910d6b6f7a3?x=x&version=1",
            "client": "website",
            "content": "<p>Also that govendor tool looks like what I've been looking for, <span class=\"user-mention\" data-user-email=\"chris@printf.net\">@Chris Ball (SP2'15)</span>. Though I'll pretty much just want it for the simple \"copy to vendor folder\"</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 56203263,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "steve@redlua.com",
            "sender_full_name": "Steven McCarthy (he) (SP2'15)",
            "sender_id": 7871,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "Adding a library under vendor/",
            "submessages": [],
            "timestamp": 1461183559,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/1380ded36dafac0d6f808b9b7b6c4e85266428a1?x=x&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"kamal@marhubi.com\">@Kamal Marhubi (S1'15)</span>, there's another talk I still need to find yet, but this one is relevant as to why a vendoring system wasn't included years ago: <a href=\"https://www.youtube.com/watch?v=sln-gJaURzk&amp;t=37m33s\" target=\"_blank\" title=\"https://www.youtube.com/watch?v=sln-gJaURzk&amp;t=37m33s\">https://www.youtube.com/watch?v=sln-gJaURzk&amp;t=37m33s</a> </p>\n<div class=\"message_inline_image\"><a href=\"https://www.youtube.com/watch?v=sln-gJaURzk&amp;t=37m33s\" target=\"_blank\" title=\"https://www.youtube.com/watch?v=sln-gJaURzk&amp;t=37m33s\"><img src=\"https://i.ytimg.com/vi/sln-gJaURzk/default.jpg\"></a></div>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 56218311,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "travis@mcdem.us",
            "sender_full_name": "Travis McDemus (S'13)",
            "sender_id": 2139,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "Adding a library under vendor/",
            "submessages": [],
            "timestamp": 1461198473,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/1380ded36dafac0d6f808b9b7b6c4e85266428a1?x=x&version=1",
            "client": "website",
            "content": "<p>I still like the approaches that Andrew Gerrand and Brad Fitzpatrick suggest to the question starting at 37:33 .... URL's are globally unique, right?  And it is considered good practice to code version numbers into the URL's of REST API's, right? So why not just follow that same practice for a package URL?  e.g.  <a href=\"http://fizbuz.biz/mylibname/1/pkgname\" target=\"_blank\" title=\"http://fizbuz.biz/mylibname/1/pkgname\">http://fizbuz.biz/mylibname/1/pkgname</a></p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 56219057,
            "is_me_message": false,
            "last_edit_timestamp": 1461198834,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "travis@mcdem.us",
            "sender_full_name": "Travis McDemus (S'13)",
            "sender_id": 2139,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "Adding a library under vendor/",
            "submessages": [],
            "timestamp": 1461198818,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/1380ded36dafac0d6f808b9b7b6c4e85266428a1?x=x&version=1",
            "client": "website",
            "content": "<p>As for what Brad Fitzpatrick mentioned, that worked well for me in the past...  why import all of a library when I just need a couple functions?  I once abridged / quoted a library in one of my projects, then started using the original author's package years later in my otherwise unaltered code... which was fine for a bit until it changed in a backwards-incompatible a month later way and I found out while setting up a new chroot and it wouldn't compile! </p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 56219655,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "travis@mcdem.us",
            "sender_full_name": "Travis McDemus (S'13)",
            "sender_id": 2139,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "Adding a library under vendor/",
            "submessages": [],
            "timestamp": 1461199093,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/1380ded36dafac0d6f808b9b7b6c4e85266428a1?x=x&version=1",
            "client": "website",
            "content": "<p>I think sticking with those two approaches seems simple, and kinda riffs off the whole static-linking philosophy that Go is coming from. If done right, it can avoid the need for something like virtualenv, naming collisions we see in some package managers , this sort of thing <code>http://www.theregister.co.uk/2016/03/23/npm_left_pad_chaos/</code>, and seems way less frustrating than some problems that crop up with tools like maven or gradle. (I'll avoid getting into that, but let's just say I can't get the cumulative hours of my life back of watching maven and gradle slowly sync dependencies every time I wanted to see if the single line of Java code I changed fixed a button on an android screen, or fixed a server using a tons of dependency injection or something.  ) </p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 56220994,
            "is_me_message": false,
            "last_edit_timestamp": 1461199820,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "travis@mcdem.us",
            "sender_full_name": "Travis McDemus (S'13)",
            "sender_id": 2139,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "Adding a library under vendor/",
            "submessages": [],
            "timestamp": 1461199738,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/1380ded36dafac0d6f808b9b7b6c4e85266428a1?x=x&version=1",
            "client": "website",
            "content": "<p>I still can't find that other talk... I think Francesc Campoy was in a similar panel, but they explain that they were intentionally avoiding adding vendoring since Google has a very specific way of doing that, and they didn't want to force a particular practice on the open-source community.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 56221422,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "travis@mcdem.us",
            "sender_full_name": "Travis McDemus (S'13)",
            "sender_id": 2139,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "Adding a library under vendor/",
            "submessages": [],
            "timestamp": 1461199939,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/0851603cf378e565ce5ef0deee82f427a8b03bba?x=x&version=1",
            "client": "desktop app Mac 0.5.1",
            "content": "<p>Yeah Google's vendor process (third_party) is tied very much to their build system <a href=\"http://bazel.io/\" target=\"_blank\" title=\"http://bazel.io/\">http://bazel.io/</a> which eg you can see examples of <a href=\"https://github.com/bazelbuild/bazel/tree/master/third_party/\" target=\"_blank\" title=\"https://github.com/bazelbuild/bazel/tree/master/third_party/\">https://github.com/bazelbuild/bazel/tree/master/third_party/</a></p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 56243827,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "pnasrat@gmail.com",
            "sender_full_name": "Pris Nasrat (she/they) (SP2'16)",
            "sender_id": 9238,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "Adding a library under vendor/",
            "submessages": [],
            "timestamp": 1461244853,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/7d2ab014ebf55e99afffba1a3d92be8155754f0f?x=x&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"pnasrat@gmail.com\">@Pris Nasrat (SP2'16)</span> this is actually coming from me trying to Bazelify a Go project. The <a href=\"https://github.com/bazelbuild/rules_go/\" target=\"_blank\" title=\"https://github.com/bazelbuild/rules_go/\">Go build rules</a> say the support vendoring, but I'm so far unable to deal with vendored library A depending on vendorerd library B. They haven't open sourced their BUILD file generator for Go projects, which would make this a lot easier.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 56245027,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "kamal@marhubi.com",
            "sender_full_name": "Kamal Marhubi (he) (m2'18)",
            "sender_id": 8090,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "Adding a library under vendor/",
            "submessages": [],
            "timestamp": 1461247023,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/7d2ab014ebf55e99afffba1a3d92be8155754f0f?x=x&version=1",
            "client": "website",
            "content": "<p>The exact problem I'm having came in trying to construct an example project for a bug report / mailing list post to get feedback on that!</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 56245042,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "kamal@marhubi.com",
            "sender_full_name": "Kamal Marhubi (he) (m2'18)",
            "sender_id": 8090,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "Adding a library under vendor/",
            "submessages": [],
            "timestamp": 1461247068,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/0851603cf378e565ce5ef0deee82f427a8b03bba?x=x&version=1",
            "client": "Android",
            "content": "<p>Got a repo I can clone to poke at?</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 56245164,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "pnasrat@gmail.com",
            "sender_full_name": "Pris Nasrat (she/they) (SP2'16)",
            "sender_id": 9238,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "Adding a library under vendor/",
            "submessages": [],
            "timestamp": 1461247216,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/5aac52dfb927229e729a553ff79edd8bf8cb9466?x=x&version=1",
            "client": "website",
            "content": "<p>What's the best way to wait for a single goroutine to finish? It seems using an unbuffered bool channel or a WaitGroup would both be reasonable options that would convey the intent to a reader. I suspect it would probably be more accepted to use the channel, unless it's likely that the single goroutine would turn into more than one. Is there an accepted \"golang-ish\" way?</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 56255045,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "qqrsmith@gmail.com",
            "sender_full_name": "Russell Smith (W'13)",
            "sender_id": 854,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "waiting for a single goroutine",
            "submessages": [],
            "timestamp": 1461262417,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/5aac52dfb927229e729a553ff79edd8bf8cb9466?x=x&version=1",
            "client": "website",
            "content": "<p>This is for a dead link checker I've whipped up to learn some go. Here it is waiting on <code>saveCrawlResults</code> with a channel.</p>\n<div class=\"codehilite\"><pre>func main() {\n    ...\n\n    resultQueue := make(chan CrawlResult, CRAWL_QUEUE_SIZE)\n    crawlQueue := make(chan string, CRAWL_QUEUE_SIZE)\n    var crawlWG sync.WaitGroup\n    dbsaveDone := make(chan bool)\n\n    start = time.Now()\n\n    for i := 0; i &lt; NUM_CONCURRENT_REQUESTS; i++ {\n        crawlWG.Add(1)\n        go deadLinkChecker(i, &amp;crawlWG, crawlQueue, resultQueue)\n    }\n\n    go fetchHyperlinks(crawlQueue)\n    go saveCrawlResults(resultQueue, dbsaveDone)\n\n    crawlWG.Wait()\n\n    close(resultQueue)\n    &lt;-dbsaveDone\n}\n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 56255116,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "qqrsmith@gmail.com",
            "sender_full_name": "Russell Smith (W'13)",
            "sender_id": 854,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "waiting for a single goroutine",
            "submessages": [],
            "timestamp": 1461262500,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/5aac52dfb927229e729a553ff79edd8bf8cb9466?x=x&version=1",
            "client": "website",
            "content": "<p>And with a <code>WaitGroup</code>:</p>\n<div class=\"codehilite\"><pre>    ...\n    go fetchHyperlinks(crawlQueue)\n\n    var dbsaveWG sync.WaitGroup\n    dbsaveWG.Add(1)\n    go saveCrawlResults(resultQueue, &amp;dbsaveWG)\n\n    crawlWG.Wait()\n\n    close(resultQueue)\n    dbsaveWG.Wait()\n}\n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 56255185,
            "is_me_message": false,
            "last_edit_timestamp": 1461262685,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "qqrsmith@gmail.com",
            "sender_full_name": "Russell Smith (W'13)",
            "sender_id": 854,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "waiting for a single goroutine",
            "submessages": [],
            "timestamp": 1461262581,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/eb83a236abf1b10c096dc6b656ae856aa58dfeee?x=x&version=2",
            "client": "website",
            "content": "<p>I think I like the first approach, it seems clearer to me what you're trying to achieve. But, I'd get another opinion, I haven't been doing very much Go lately. :) Maybe ask <span class=\"user-mention\" data-user-email=\"jay@jayschwa.net\">@Jay Weisskopf (W'13)</span> </p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 56259170,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "jari@takkala.net",
            "sender_full_name": "Jari Takkala (F2'17)",
            "sender_id": 2853,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "waiting for a single goroutine",
            "submessages": [],
            "timestamp": 1461268818,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/eb83a236abf1b10c096dc6b656ae856aa58dfeee?x=x&version=2",
            "client": "website",
            "content": "<p>Couldn't you also close the dbSaveDone channel and exit saveCrawlResults on that?</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 56259212,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "jari@takkala.net",
            "sender_full_name": "Jari Takkala (F2'17)",
            "sender_id": 2853,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "waiting for a single goroutine",
            "submessages": [],
            "timestamp": 1461268919,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/eb83a236abf1b10c096dc6b656ae856aa58dfeee?x=x&version=2",
            "client": "website",
            "content": "<p>just looking at some old source I have. I created a channel called 'quit' for each goroutine that I created. Then I would signal to quit by closing the 'quit' channel, and just returning from the function in the goroutine</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 56259285,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "jari@takkala.net",
            "sender_full_name": "Jari Takkala (F2'17)",
            "sender_id": 2853,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "waiting for a single goroutine",
            "submessages": [],
            "timestamp": 1461269030,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/eb83a236abf1b10c096dc6b656ae856aa58dfeee?x=x&version=2",
            "client": "website",
            "content": "<p>And the quit channel would be of type 'struct {}'</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 56259423,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "jari@takkala.net",
            "sender_full_name": "Jari Takkala (F2'17)",
            "sender_id": 2853,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "waiting for a single goroutine",
            "submessages": [],
            "timestamp": 1461269260,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/eb83a236abf1b10c096dc6b656ae856aa58dfeee?x=x&version=2",
            "client": "website",
            "content": "<p>that makes it clear that you're not expecting to send a boolean type down the channel</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 56259431,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "jari@takkala.net",
            "sender_full_name": "Jari Takkala (F2'17)",
            "sender_id": 2853,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "waiting for a single goroutine",
            "submessages": [],
            "timestamp": 1461269277,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/eb83a236abf1b10c096dc6b656ae856aa58dfeee?x=x&version=2",
            "client": "website",
            "content": "<p>so maybe: </p>\n<div class=\"codehilite\"><pre>    <span class=\"n\">dbsaveDone</span> <span class=\"p\">:=</span> <span class=\"nb\">make</span><span class=\"p\">(</span><span class=\"k\">chan</span> <span class=\"k\">struct</span><span class=\"p\">{})</span>\n\n    <span class=\"n\">start</span> <span class=\"p\">=</span> <span class=\"n\">time</span><span class=\"p\">.</span><span class=\"n\">Now</span><span class=\"p\">()</span>\n\n    <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"p\">:=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"p\">&lt;</span> <span class=\"n\">NUM_CONCURRENT_REQUESTS</span><span class=\"p\">;</span> <span class=\"n\">i</span><span class=\"p\">++</span> <span class=\"p\">{</span>\n        <span class=\"n\">crawlWG</span><span class=\"p\">.</span><span class=\"n\">Add</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n        <span class=\"k\">go</span> <span class=\"n\">deadLinkChecker</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"p\">&amp;</span><span class=\"n\">crawlWG</span><span class=\"p\">,</span> <span class=\"n\">crawlQueue</span><span class=\"p\">,</span> <span class=\"n\">resultQueue</span><span class=\"p\">)</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"k\">go</span> <span class=\"n\">fetchHyperlinks</span><span class=\"p\">(</span><span class=\"n\">crawlQueue</span><span class=\"p\">)</span>\n    <span class=\"k\">go</span> <span class=\"n\">saveCrawlResults</span><span class=\"p\">(</span><span class=\"n\">resultQueue</span><span class=\"p\">,</span> <span class=\"n\">quitSave</span><span class=\"p\">)</span>\n\n    <span class=\"n\">crawlWG</span><span class=\"p\">.</span><span class=\"n\">Wait</span><span class=\"p\">()</span>\n\n    <span class=\"nb\">close</span><span class=\"p\">(</span><span class=\"n\">resultQueue</span><span class=\"p\">)</span>\n    <span class=\"nb\">close</span><span class=\"p\">(</span><span class=\"n\">quitSave</span><span class=\"p\">)</span>\n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 56259484,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "jari@takkala.net",
            "sender_full_name": "Jari Takkala (F2'17)",
            "sender_id": 2853,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "waiting for a single goroutine",
            "submessages": [],
            "timestamp": 1461269392,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/6527e077e84e20214d5373101ea15910d6b6f7a3?x=x&version=1",
            "client": "website",
            "content": "<p>I think closing a channel to signal the end of things is pretty standard. I'm using a terminal drawing package that <a href=\"https://github.com/gdamore/tcell/blob/0dd71be3836590ff85c06b90714bb8b83cf84bba/_demos/unicode.go#L169\" target=\"_blank\" title=\"https://github.com/gdamore/tcell/blob/0dd71be3836590ff85c06b90714bb8b83cf84bba/_demos/unicode.go#L169\">uses it in one of their demos</a>. It's also <a href=\"https://golang.org/doc/effective_go.html#channels\" target=\"_blank\" title=\"https://golang.org/doc/effective_go.html#channels\">mentioned in effective go</a>.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 56263574,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "steve@redlua.com",
            "sender_full_name": "Steven McCarthy (he) (SP2'15)",
            "sender_id": 7871,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "waiting for a single goroutine",
            "submessages": [],
            "timestamp": 1461276882,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/a179bb8c3fc4ab0975954f57d47fa6c53a8c2dad?x=x&version=2",
            "client": "website",
            "content": "<p>If information is passed between goroutines, I'd use a channel. If not, I'd use a <code>sync.WaitGroup</code>.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 56272419,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "jay@jayschwa.net",
            "sender_full_name": "Jay Weisskopf Petacat (W2'17)",
            "sender_id": 829,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "waiting for a single goroutine",
            "submessages": [],
            "timestamp": 1461295343,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/5aac52dfb927229e729a553ff79edd8bf8cb9466?x=x&version=1",
            "client": "website",
            "content": "<p>Thanks for the responses. This was helpful. <img alt=\":thumbsup:\" class=\"emoji\" src=\"static/third/gemoji/images/emoji/thumbsup.png\" title=\":thumbsup:\"> </p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 56273172,
            "is_me_message": false,
            "last_edit_timestamp": 1461297194,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "qqrsmith@gmail.com",
            "sender_full_name": "Russell Smith (W'13)",
            "sender_id": 854,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "waiting for a single goroutine",
            "submessages": [],
            "timestamp": 1461297031,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/7d2ab014ebf55e99afffba1a3d92be8155754f0f?x=x&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"pnasrat@gmail.com\">@Pris Nasrat (SP2'16)</span> not really. I'll try and pull my scratch example together.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 56294673,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "kamal@marhubi.com",
            "sender_full_name": "Kamal Marhubi (he) (m2'18)",
            "sender_id": 8090,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "Adding a library under vendor/",
            "submessages": [],
            "timestamp": 1461341810,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/7d2ab014ebf55e99afffba1a3d92be8155754f0f?x=x&version=1",
            "client": "website",
            "content": "<p>The target project is <a href=\"http://prometheus.io/\" target=\"_blank\" title=\"http://prometheus.io/\">Prometheus</a>. I saw something go by on their mailing list where they were considering building their own build system, which set of (small) alarm bells. I thought I could pull together a Bazel build, but I'd never worked with the go rules and it seems a bit less straightforward that I was expecting.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 56294682,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "kamal@marhubi.com",
            "sender_full_name": "Kamal Marhubi (he) (m2'18)",
            "sender_id": 8090,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "Adding a library under vendor/",
            "submessages": [],
            "timestamp": 1461341862,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/0851603cf378e565ce5ef0deee82f427a8b03bba?x=x&version=1",
            "client": "Android",
            "content": "<p>Ah cool. I can maybe take a look later this afternoon</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 56294737,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "pnasrat@gmail.com",
            "sender_full_name": "Pris Nasrat (she/they) (SP2'16)",
            "sender_id": 9238,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "Adding a library under vendor/",
            "submessages": [],
            "timestamp": 1461341980,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/7d2ab014ebf55e99afffba1a3d92be8155754f0f?x=x&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"pnasrat@gmail.com\">@Pris Nasrat (SP2'16)</span> here's my attempt at bazelifying a leaf lib in /vendor: <a href=\"https://github.com/kamalmarhubi/prometheus/commit/2f09f780298aa93f6e54e81fcd38099579dd7742\" target=\"_blank\" title=\"https://github.com/kamalmarhubi/prometheus/commit/2f09f780298aa93f6e54e81fcd38099579dd7742\">https://github.com/kamalmarhubi/prometheus/commit/2f09f780298aa93f6e54e81fcd38099579dd7742</a></p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 56303364,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "kamal@marhubi.com",
            "sender_full_name": "Kamal Marhubi (he) (m2'18)",
            "sender_id": 8090,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "Adding a library under vendor/",
            "submessages": [],
            "timestamp": 1461357656,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/7d2ab014ebf55e99afffba1a3d92be8155754f0f?x=x&version=1",
            "client": "website",
            "content": "<p>I've also tried having ctxhttp be its own bazel package, which didn't work either.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 56303373,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "kamal@marhubi.com",
            "sender_full_name": "Kamal Marhubi (he) (m2'18)",
            "sender_id": 8090,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "Adding a library under vendor/",
            "submessages": [],
            "timestamp": 1461357679,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/7d2ab014ebf55e99afffba1a3d92be8155754f0f?x=x&version=1",
            "client": "website",
            "content": "<p>Also having the ctxhttp files included in <code>srcs</code> for the context <code>go_library</code> didn't work either.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 56303438,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "kamal@marhubi.com",
            "sender_full_name": "Kamal Marhubi (he) (m2'18)",
            "sender_id": 8090,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "Adding a library under vendor/",
            "submessages": [],
            "timestamp": 1461357787,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/0851603cf378e565ce5ef0deee82f427a8b03bba?x=x&version=1",
            "client": "Android",
            "content": "<p>OK. I'll look weekend or Monday. </p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 56304066,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "pnasrat@gmail.com",
            "sender_full_name": "Pris Nasrat (she/they) (SP2'16)",
            "sender_id": 9238,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "Adding a library under vendor/",
            "submessages": [],
            "timestamp": 1461358844,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/0851603cf378e565ce5ef0deee82f427a8b03bba?x=x&version=1",
            "client": "desktop app Mac 0.5.1",
            "content": "<p>Based off <a href=\"https://github.com/hanwen/examples/blob/master/go/pkg/vendor/golang_org/bradfitz/grumble/BUILD\" target=\"_blank\" title=\"https://github.com/hanwen/examples/blob/master/go/pkg/vendor/golang_org/bradfitz/grumble/BUILD\">https://github.com/hanwen/examples/blob/master/go/pkg/vendor/golang_org/bradfitz/grumble/BUILD</a> I did <a href=\"https://github.com/pnasrat/prometheus/tree/bazelify\" target=\"_blank\" title=\"https://github.com/pnasrat/prometheus/tree/bazelify\">https://github.com/pnasrat/prometheus/tree/bazelify</a> </p>\n<p>This gets at least this working. I'll try get more end to end test later</p>\n<div class=\"codehilite\"><pre>bazel build //vendor/golang_org/x/net/context:all\nINFO: Found 1 target...\nTarget //vendor/golang_org/x/net/context:go_default_library up-to-date:\n  bazel-bin/vendor/golang_org/x/net/context/go_default_library.a\nINFO: Elapsed time: 9.819s, Critical Path: 0.20s\n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 56444011,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "pnasrat@gmail.com",
            "sender_full_name": "Pris Nasrat (she/they) (SP2'16)",
            "sender_id": 9238,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "Adding a library under vendor/",
            "submessages": [],
            "timestamp": 1461682116,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/0851603cf378e565ce5ef0deee82f427a8b03bba?x=x&version=1",
            "client": "desktop app Mac 0.5.1",
            "content": "<p>Without this I get</p>\n<div class=\"codehilite\"><pre>bazel build //vendor/golang.org/x/net/context:all\nINFO: Found 2 targets...\nERROR: /home/pnasrat/.go/src/github.com/prometheus/prometheus/vendor/golang.org/x/net/context/BUILD:12:1: error executing shell command: &#39;rm -rf bazel-out/local-fastbuild/bin/vendor/golang.org/x/net/context/ctxhttp.a.dir &amp;&amp; mkdir -p bazel-out/local-fastbuild/bin/vendor/golang.org/x/net/context/ctxhttp.a.dir &amp;&amp; mkdir -p bazel-out/loca...&#39; failed: namespace-sandbox failed: error executing command /home/pnasrat/.cache/bazel/_bazel_pnasrat/8fc08625bcaec4532ac475f248c90ce4/prometheus/_bin/namespace-sandbox ... (remaining 5 argument(s) skipped).\ngithub.com/bazelbuild/rules_go/vendor/golang.org/x/net/context/ctxhttp/ctxhttp.go:14: can&#39;t find import: &quot;golang.org/x/net/context&quot;\nINFO: Elapsed time: 9.332s, Critical Path: 0.26s\n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 56444030,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "pnasrat@gmail.com",
            "sender_full_name": "Pris Nasrat (she/they) (SP2'16)",
            "sender_id": 9238,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "Adding a library under vendor/",
            "submessages": [],
            "timestamp": 1461682159,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/0851603cf378e565ce5ef0deee82f427a8b03bba?x=x&version=1",
            "client": "desktop app Mac 0.5.1",
            "content": "<p>Requires GO15VENDOREXPERIMENT=1 with go1.5</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 56444156,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "pnasrat@gmail.com",
            "sender_full_name": "Pris Nasrat (she/they) (SP2'16)",
            "sender_id": 9238,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "Adding a library under vendor/",
            "submessages": [],
            "timestamp": 1461682339,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/0851603cf378e565ce5ef0deee82f427a8b03bba?x=x&version=1",
            "client": "desktop app Mac 0.5.1",
            "content": "<p>I think</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 56444158,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "pnasrat@gmail.com",
            "sender_full_name": "Pris Nasrat (she/they) (SP2'16)",
            "sender_id": 9238,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "Adding a library under vendor/",
            "submessages": [],
            "timestamp": 1461682344,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/7d2ab014ebf55e99afffba1a3d92be8155754f0f?x=x&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"pnasrat@gmail.com\">@Pris Nasrat (SP2'16)</span> oh let me look!</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 56447300,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "kamal@marhubi.com",
            "sender_full_name": "Kamal Marhubi (he) (m2'18)",
            "sender_id": 8090,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "Adding a library under vendor/",
            "submessages": [],
            "timestamp": 1461686858,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/7d2ab014ebf55e99afffba1a3d92be8155754f0f?x=x&version=1",
            "client": "website",
            "content": "<p>One thing I realized: in my attempt to use a bazel/rules_go release, I am possibly using a broken version of the rules: <a href=\"https://github.com/bazelbuild/rules_go/issues/17\" target=\"_blank\" title=\"https://github.com/bazelbuild/rules_go/issues/17\">https://github.com/bazelbuild/rules_go/issues/17</a></p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 56447854,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "kamal@marhubi.com",
            "sender_full_name": "Kamal Marhubi (he) (m2'18)",
            "sender_id": 8090,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "Adding a library under vendor/",
            "submessages": [],
            "timestamp": 1461687774,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/7d2ab014ebf55e99afffba1a3d92be8155754f0f?x=x&version=1",
            "client": "website",
            "content": "<p>Are the main differences moving things to be under <code>vendor/golang_org</code>, and changing the targets to <code>go_default_library</code>?</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 56447919,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "kamal@marhubi.com",
            "sender_full_name": "Kamal Marhubi (he) (m2'18)",
            "sender_id": 8090,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "Adding a library under vendor/",
            "submessages": [],
            "timestamp": 1461687854,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/0851603cf378e565ce5ef0deee82f427a8b03bba?x=x&version=1",
            "client": "desktop app Mac 0.5.1",
            "content": "<p>Yeah although you can use other lib names - eg for protobufs by the looks. Also pulling in the \"go_prefix\" rule I need to look at bit more at the underlying rule code at some point this afternoon. I'll push an update using the later rules.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 56450097,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "pnasrat@gmail.com",
            "sender_full_name": "Pris Nasrat (she/they) (SP2'16)",
            "sender_id": 9238,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "Adding a library under vendor/",
            "submessages": [],
            "timestamp": 1461691553,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/0851603cf378e565ce5ef0deee82f427a8b03bba?x=x&version=1",
            "client": "desktop app Mac 0.5.1",
            "content": "<p>I think there are multiple issues though I'll probably spend another hour looking at</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 56451001,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "pnasrat@gmail.com",
            "sender_full_name": "Pris Nasrat (she/they) (SP2'16)",
            "sender_id": 9238,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "Adding a library under vendor/",
            "submessages": [],
            "timestamp": 1461693078,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/0851603cf378e565ce5ef0deee82f427a8b03bba?x=x&version=1",
            "client": "desktop app Mac 0.5.1",
            "content": "<p>Tip of the day <code>bazel build --verbose_failures</code></p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 56451933,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "pnasrat@gmail.com",
            "sender_full_name": "Pris Nasrat (she/they) (SP2'16)",
            "sender_id": 9238,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "Adding a library under vendor/",
            "submessages": [],
            "timestamp": 1461694600,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/0851603cf378e565ce5ef0deee82f427a8b03bba?x=x&version=1",
            "client": "desktop app Mac 0.5.1",
            "content": "<div class=\"codehilite\"><pre>go tool compile -o \\\n ../../../../../../bazel-out/local-fastbuild/bin/examples/lib/go_default_library.a -pack \\\n-I . -importmap=github_com/user/vendored=github.com/bazelbuild/rules_go/examples/vendor/github_com/user/vendored/go_default_library \\\n-importmap=golang_org/x/net/context=github.com/bazelbuild/rules_go/examples/vendor/golang_org/x/net/context/go_default_library github.com/bazelbuild/rules_go/examples/lib/lib.go&#39;\n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 56452138,
            "is_me_message": false,
            "last_edit_timestamp": 1461694963,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "pnasrat@gmail.com",
            "sender_full_name": "Pris Nasrat (she/they) (SP2'16)",
            "sender_id": 9238,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "Adding a library under vendor/",
            "submessages": [],
            "timestamp": 1461694924,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/0851603cf378e565ce5ef0deee82f427a8b03bba?x=x&version=1",
            "client": "desktop app Mac 0.5.1",
            "content": "<p>OK so fixing up properly - the <code>golang_org</code> vs <code>golang.org</code> was a distraction I thought there was some automagic but it's just a convention and needs to match in the BUILD and go files along with the directory structure - <a href=\"https://github.com/pnasrat/prometheus/tree/bazelify\" target=\"_blank\" title=\"https://github.com/pnasrat/prometheus/tree/bazelify\">https://github.com/pnasrat/prometheus/tree/bazelify</a> has a working tree where I can build ctxhttp depending on context</p>\n<div class=\"codehilite\"><pre>$ bazel clean\nINFO: Starting clean (this may take a while). Consider using --expunge_async if the clean takes more than several minutes.\n$ bazel build //vendor/golang.org/x/net/context/ctxhttp:go_default_library\nINFO: Found 1 target...\nTarget //vendor/golang.org/x/net/context/ctxhttp:go_default_library up-to-date:\n  bazel-bin/vendor/golang.org/x/net/context/ctxhttp/go_default_library.a\nINFO: Elapsed time: 11.785s, Critical Path: 0.75s\n</pre></div>\n\n\n<p>Standalone example <a href=\"https://github.com/pnasrat/rules_go/blob/master/examples/lib/BUILD\" target=\"_blank\" title=\"https://github.com/pnasrat/rules_go/blob/master/examples/lib/BUILD\">https://github.com/pnasrat/rules_go/blob/master/examples/lib/BUILD</a> </p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 56453000,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "pnasrat@gmail.com",
            "sender_full_name": "Pris Nasrat (she/they) (SP2'16)",
            "sender_id": 9238,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "Adding a library under vendor/",
            "submessages": [],
            "timestamp": 1461696290,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/0851603cf378e565ce5ef0deee82f427a8b03bba?x=x&version=1",
            "client": "desktop app Mac 0.5.1",
            "content": "<p>Ping me when you are around as we can probably write something to generate the build rules from the vendor structure as eg everything depends on common/log that depends on eg <a href=\"http://github.com/Sirupsen/logrus\" target=\"_blank\" title=\"http://github.com/Sirupsen/logrus\">github.com/Sirupsen/logrus</a> - however as the go build tool supports vendor structure do you actually want bazel? <a href=\"https://docs.google.com/document/d/1Bz5-UB7g2uPBdOx-rw5t9MxJwkfpx90cqG9AFL0JAYo/edit\" target=\"_blank\" title=\"https://docs.google.com/document/d/1Bz5-UB7g2uPBdOx-rw5t9MxJwkfpx90cqG9AFL0JAYo/edit\">https://docs.google.com/document/d/1Bz5-UB7g2uPBdOx-rw5t9MxJwkfpx90cqG9AFL0JAYo/edit</a></p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 56453411,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "pnasrat@gmail.com",
            "sender_full_name": "Pris Nasrat (she/they) (SP2'16)",
            "sender_id": 9238,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "Adding a library under vendor/",
            "submessages": [],
            "timestamp": 1461697010,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/0851603cf378e565ce5ef0deee82f427a8b03bba?x=x&version=1",
            "client": "desktop app Mac 0.5.1",
            "content": "<p>For future record this is super useful advice for debugging builds <a href=\"http://bazel.io/blog/2016/03/18/sandbox-easier-debug.html\" target=\"_blank\" title=\"http://bazel.io/blog/2016/03/18/sandbox-easier-debug.html\">http://bazel.io/blog/2016/03/18/sandbox-easier-debug.html</a></p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 56453621,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "pnasrat@gmail.com",
            "sender_full_name": "Pris Nasrat (she/they) (SP2'16)",
            "sender_id": 9238,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "Adding a library under vendor/",
            "submessages": [],
            "timestamp": 1461697348,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/7d2ab014ebf55e99afffba1a3d92be8155754f0f?x=x&version=1",
            "client": "website",
            "content": "<blockquote>\n<p>For future record this is super useful advice for debugging builds <a href=\"http://bazel.io/blog/2016/03/18/sandbox-easier-debug.html\" target=\"_blank\" title=\"http://bazel.io/blog/2016/03/18/sandbox-easier-debug.html\">http://bazel.io/blog/2016/03/18/sandbox-easier-debug.html</a></p>\n</blockquote>\n<p>Ugh every time I restart, unprivileged user namespaces get disabled (Debian kernel), and so the sandbox gets turned off. Fixed it for this boot. I should sort that out with some boot options though.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 56455460,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "kamal@marhubi.com",
            "sender_full_name": "Kamal Marhubi (he) (m2'18)",
            "sender_id": 8090,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "Adding a library under vendor/",
            "submessages": [],
            "timestamp": 1461700255,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/0851603cf378e565ce5ef0deee82f427a8b03bba?x=x&version=1",
            "client": "desktop app Mac 0.5.1",
            "content": "<p>I'm part way through wiring up to building / testing storage/local and deps - however it looks like there may be issue around go_test and vendoring. Need to look more</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 56455537,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "pnasrat@gmail.com",
            "sender_full_name": "Pris Nasrat (she/they) (SP2'16)",
            "sender_id": 9238,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "Adding a library under vendor/",
            "submessages": [],
            "timestamp": 1461700405,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/0851603cf378e565ce5ef0deee82f427a8b03bba?x=x&version=1",
            "client": "desktop app Mac 0.5.1",
            "content": "<p>Let me know if it is worth me poking at this more or how best to help. I may swap to something else in a day or so. </p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 56455585,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "pnasrat@gmail.com",
            "sender_full_name": "Pris Nasrat (she/they) (SP2'16)",
            "sender_id": 9238,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "Adding a library under vendor/",
            "submessages": [],
            "timestamp": 1461700457,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/7d2ab014ebf55e99afffba1a3d92be8155754f0f?x=x&version=1",
            "client": "website",
            "content": "<blockquote>\n<p>however as the go build tool supports vendor structure do you actually want bazel?</p>\n</blockquote>\n<p>The motivation for this is the Prometheus folks are looking at building their *own* build tool to include generating all the artifacts, including Docker images: <a href=\"https://docs.google.com/document/d/1Ql-f_aThl-2eB5v3QdKV_zgBdetLLbdxxChpy-TnWSE/edit#heading=h.24x0bg1hyuak\" target=\"_blank\" title=\"https://docs.google.com/document/d/1Ql-f_aThl-2eB5v3QdKV_zgBdetLLbdxxChpy-TnWSE/edit#heading=h.24x0bg1hyuak\">https://docs.google.com/document/d/1Ql-f_aThl-2eB5v3QdKV_zgBdetLLbdxxChpy-TnWSE/edit#heading=h.24x0bg1hyuak</a></p>\n<p>It's not clear that Bazel can hit all their requirements, but I think building your own build tool is usually a mistake so I wanted to explore Bazel. I've also wanted to port a medium sized project to Bazel anyway, to get a stronger feeling for where its rough edges are.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 56455586,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "kamal@marhubi.com",
            "sender_full_name": "Kamal Marhubi (he) (m2'18)",
            "sender_id": 8090,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "Adding a library under vendor/",
            "submessages": [],
            "timestamp": 1461700460,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/0851603cf378e565ce5ef0deee82f427a8b03bba?x=x&version=1",
            "client": "desktop app Mac 0.5.1",
            "content": "<p>you may also want to look at buck :)</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 56455589,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "pnasrat@gmail.com",
            "sender_full_name": "Pris Nasrat (she/they) (SP2'16)",
            "sender_id": 9238,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "Adding a library under vendor/",
            "submessages": [],
            "timestamp": 1461700479,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/0851603cf378e565ce5ef0deee82f427a8b03bba?x=x&version=1",
            "client": "desktop app Mac 0.5.1",
            "content": "<p>ah ok - do you want me to stop when I've got some end to end testing, vendored and a single prometheus/prometheus sub component working. It's probalby a good example</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 56455598,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "pnasrat@gmail.com",
            "sender_full_name": "Pris Nasrat (she/they) (SP2'16)",
            "sender_id": 9238,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "Adding a library under vendor/",
            "submessages": [],
            "timestamp": 1461700532,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/7d2ab014ebf55e99afffba1a3d92be8155754f0f?x=x&version=1",
            "client": "website",
            "content": "<blockquote>\n<p>Let me know if it is worth me poking at this more or how best to help. I may swap to something else in a day or so. </p>\n</blockquote>\n<p>Don't go too far down this path unless it's actually something that interests you right now. I can't dedicate too much time to it this week sadly.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 56455604,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "kamal@marhubi.com",
            "sender_full_name": "Kamal Marhubi (he) (m2'18)",
            "sender_id": 8090,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "Adding a library under vendor/",
            "submessages": [],
            "timestamp": 1461700558,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/0851603cf378e565ce5ef0deee82f427a8b03bba?x=x&version=1",
            "client": "desktop app Mac 0.5.1",
            "content": "<p>Oh build tools, golang and prometheus are all in my back yard (former SRE). I'll maybe spend a few more hours this week but I won't try push anything upstream</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 56455672,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "pnasrat@gmail.com",
            "sender_full_name": "Pris Nasrat (she/they) (SP2'16)",
            "sender_id": 9238,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "Adding a library under vendor/",
            "submessages": [],
            "timestamp": 1461700680,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/0851603cf378e565ce5ef0deee82f427a8b03bba?x=x&version=1",
            "client": "desktop app Mac 0.5.1",
            "content": "<p>You going to be around Never Graduate Week? It'd be good to chat IRL</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 56455711,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "pnasrat@gmail.com",
            "sender_full_name": "Pris Nasrat (she/they) (SP2'16)",
            "sender_id": 9238,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "Adding a library under vendor/",
            "submessages": [],
            "timestamp": 1461700735,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/7d2ab014ebf55e99afffba1a3d92be8155754f0f?x=x&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"pnasrat@gmail.com\">@Pris Nasrat (SP2'16)</span> if you're making progress, getting to a single subcomponent would be awesome! I'm also somewhat interested in writing a tool to do this, however they're planning on open sourcing glaze which might do it: <a href=\"https://github.com/bazelbuild/rules_go/issues/15\" target=\"_blank\" title=\"https://github.com/bazelbuild/rules_go/issues/15\">https://github.com/bazelbuild/rules_go/issues/15</a></p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 56455762,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "kamal@marhubi.com",
            "sender_full_name": "Kamal Marhubi (he) (m2'18)",
            "sender_id": 8090,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "Adding a library under vendor/",
            "submessages": [],
            "timestamp": 1461700807,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/7d2ab014ebf55e99afffba1a3d92be8155754f0f?x=x&version=1",
            "client": "website",
            "content": "<p>On the other hand, the person who was leading the open source Go support switched away from Bazel so it might be a while until they get it done.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 56455791,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "kamal@marhubi.com",
            "sender_full_name": "Kamal Marhubi (he) (m2'18)",
            "sender_id": 8090,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "Adding a library under vendor/",
            "submessages": [],
            "timestamp": 1461700840,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/7d2ab014ebf55e99afffba1a3d92be8155754f0f?x=x&version=1",
            "client": "website",
            "content": "<p>And yeah, I'll be at NGW. It'd be really cool to chat in person!</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 56455799,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "kamal@marhubi.com",
            "sender_full_name": "Kamal Marhubi (he) (m2'18)",
            "sender_id": 8090,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "Adding a library under vendor/",
            "submessages": [],
            "timestamp": 1461700886,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/0851603cf378e565ce5ef0deee82f427a8b03bba?x=x&version=1",
            "client": "desktop app Mac 0.5.1",
            "content": "<p>I think there are still bugs :) Who was that - david crawshaw? I know a bunch of the NYC golang team @ Google </p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 56455802,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "pnasrat@gmail.com",
            "sender_full_name": "Pris Nasrat (she/they) (SP2'16)",
            "sender_id": 9238,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "Adding a library under vendor/",
            "submessages": [],
            "timestamp": 1461700895,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/7d2ab014ebf55e99afffba1a3d92be8155754f0f?x=x&version=1",
            "client": "website",
            "content": "<p>Open source stuff seems mostly out of Munich. The Go rules were handled by Han-Wen Nienhuys, who left the team coming on three months ago: <a href=\"https://groups.google.com/d/topic/bazel-discuss/sM906p4-p4s/discussion\" target=\"_blank\" title=\"https://groups.google.com/d/topic/bazel-discuss/sM906p4-p4s/discussion\">https://groups.google.com/d/topic/bazel-discuss/sM906p4-p4s/discussion</a></p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 56455950,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "kamal@marhubi.com",
            "sender_full_name": "Kamal Marhubi (he) (m2'18)",
            "sender_id": 8090,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "Adding a library under vendor/",
            "submessages": [],
            "timestamp": 1461701119,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/0851603cf378e565ce5ef0deee82f427a8b03bba?x=x&version=1",
            "client": "desktop app Mac 0.5.1",
            "content": "<p>Have you had much joy pushing fixes upstream?</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 56455991,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "pnasrat@gmail.com",
            "sender_full_name": "Pris Nasrat (she/they) (SP2'16)",
            "sender_id": 9238,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "Adding a library under vendor/",
            "submessages": [],
            "timestamp": 1461701164,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/7d2ab014ebf55e99afffba1a3d92be8155754f0f?x=x&version=1",
            "client": "website",
            "content": "<p>Bazel yes, Prometheus not tried.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 56456020,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "kamal@marhubi.com",
            "sender_full_name": "Kamal Marhubi (he) (m2'18)",
            "sender_id": 8090,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "Adding a library under vendor/",
            "submessages": [],
            "timestamp": 1461701213,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/7d2ab014ebf55e99afffba1a3d92be8155754f0f?x=x&version=1",
            "client": "website",
            "content": "<p>When I pushed to Bazel, it had to go through a Gerrit instance, I *think* they might accept changes directly through GitHub now. Not sure.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 56456033,
            "is_me_message": false,
            "last_edit_timestamp": 1461701250,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "kamal@marhubi.com",
            "sender_full_name": "Kamal Marhubi (he) (m2'18)",
            "sender_id": 8090,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "Adding a library under vendor/",
            "submessages": [],
            "timestamp": 1461701238,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/6527e077e84e20214d5373101ea15910d6b6f7a3?x=x&version=1",
            "client": "website",
            "content": "<p>I'm curious if this is just me, or if there's a way to speed things up. Essentially, when I run <code>go test</code>, it takes more than 1 second to \"start\", and very little time to run the test themselves (at least I think).</p>\n<div class=\"codehilite\"><pre>&lt;my prompt&gt;$ time go test\nPASS\nok      github.com/ifo/go.b2    0.011s\n\nreal    0m1.406s\nuser    0m1.733s\nsys     0m0.150s\n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 56542990,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "steve@redlua.com",
            "sender_full_name": "Steven McCarthy (he) (SP2'15)",
            "sender_id": 7871,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "go test long startup time?",
            "submessages": [],
            "timestamp": 1461875692,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/7d2ab014ebf55e99afffba1a3d92be8155754f0f?x=x&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"steve@redlua.com\">@Steven McCarthy (SP2'15)</span> what OS? If Linux, I'd suggest running it with strace. It's probably launching some subprocesses. Something like <code>strace -e process -f go test</code> would give you an idea of what it's running. The <code>-e process</code> flag is to trace process-related system calls; <code>-f</code> is to also trace child processes so you see what the launched processes do.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 56574086,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "kamal@marhubi.com",
            "sender_full_name": "Kamal Marhubi (he) (m2'18)",
            "sender_id": 8090,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "go test long startup time?",
            "submessages": [],
            "timestamp": 1461943990,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/7d2ab014ebf55e99afffba1a3d92be8155754f0f?x=x&version=1",
            "client": "website",
            "content": "<p>If *not* Linux, there is probably a way to do something similar, but I don't know it off hand. I think <code>dtruss</code> is a thing for OS X.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 56574141,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "kamal@marhubi.com",
            "sender_full_name": "Kamal Marhubi (he) (m2'18)",
            "sender_id": 8090,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "go test long startup time?",
            "submessages": [],
            "timestamp": 1461944061,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/6527e077e84e20214d5373101ea15910d6b6f7a3?x=x&version=1",
            "client": "website",
            "content": "<p>It's OSX. I'll look into dtruss.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 56577678,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "steve@redlua.com",
            "sender_full_name": "Steven McCarthy (he) (SP2'15)",
            "sender_id": 7871,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "go test long startup time?",
            "submessages": [],
            "timestamp": 1461950826,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/6527e077e84e20214d5373101ea15910d6b6f7a3?x=x&version=1",
            "client": "website",
            "content": "<p>Thanks <span class=\"user-mention\" data-user-email=\"kamal@marhubi.com\">@Kamal Marhubi (S1'15)</span></p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 56577683,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "steve@redlua.com",
            "sender_full_name": "Steven McCarthy (he) (SP2'15)",
            "sender_id": 7871,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "go test long startup time?",
            "submessages": [],
            "timestamp": 1461950833,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/6527e077e84e20214d5373101ea15910d6b6f7a3?x=x&version=1",
            "client": "website",
            "content": "<p>Hey fellow Golangers (Gophers, I guess?). I've been writing an API client library for a while. It's been a wonderful journey of learning new things about testing, and Go in general. I'd love to have the code reviewed and critiqued, if anyone would like to do that (I'd be happy to review a project you've written if you'd like that as well).<br>\nIt'd also be very helpful for me, as a non-professional Golang enthusiast, to also understand what I could do better as far as project structure goes, and would love to hear about better ways to both test my code, as well as write code that is easier to test.<br>\nAnyway, here's the project: <a href=\"https://github.com/ifo/b2\" target=\"_blank\" title=\"https://github.com/ifo/b2\">https://github.com/ifo/b2</a><br>\nIt's an API client library for <a href=\"https://www.backblaze.com/b2/docs/\" target=\"_blank\" title=\"https://www.backblaze.com/b2/docs/\">Backblaze's B2</a>.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 56778014,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "steve@redlua.com",
            "sender_full_name": "Steven McCarthy (he) (SP2'15)",
            "sender_id": 7871,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "code review request",
            "submessages": [],
            "timestamp": 1462394277,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/6527e077e84e20214d5373101ea15910d6b6f7a3?x=x&version=1",
            "client": "website",
            "content": "<p>I should also add that I'm also new to things like GoDoc comments. Any thoughts / comments there is also much appreciated.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 56778075,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "steve@redlua.com",
            "sender_full_name": "Steven McCarthy (he) (SP2'15)",
            "sender_id": 7871,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "code review request",
            "submessages": [],
            "timestamp": 1462394389,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/0851603cf378e565ce5ef0deee82f427a8b03bba?x=x&version=1",
            "client": "desktop app Mac 0.5.1",
            "content": "<p>For convenience <a href=\"https://godoc.org/github.com/ifo/b2\" target=\"_blank\" title=\"https://godoc.org/github.com/ifo/b2\">https://godoc.org/github.com/ifo/b2</a></p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 56778140,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "pnasrat@gmail.com",
            "sender_full_name": "Pris Nasrat (she/they) (SP2'16)",
            "sender_id": 9238,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "code review request",
            "submessages": [],
            "timestamp": 1462394501,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/eb83a236abf1b10c096dc6b656ae856aa58dfeee?x=x&version=2",
            "client": "website",
            "content": "<p>I'm happy to have a look. Will try to get a chance today or tomorrow. Otherwise, I'll be at NG week.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 56808896,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "jari@takkala.net",
            "sender_full_name": "Jari Takkala (F2'17)",
            "sender_id": 2853,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "code review request",
            "submessages": [],
            "timestamp": 1462461887,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/6527e077e84e20214d5373101ea15910d6b6f7a3?x=x&version=1",
            "client": "website",
            "content": "<p>Thanks! I'm going to try and complete the readme shortly.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 56817057,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "steve@redlua.com",
            "sender_full_name": "Steven McCarthy (he) (SP2'15)",
            "sender_id": 7871,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "code review request",
            "submessages": [],
            "timestamp": 1462475483,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/0a35beaf5a354dafdf10494c0313e10fffc154fd?x=x&version=1",
            "client": "website",
            "content": "<p>Today I remembered that two pointers pointing to the same value are not necessarily equal.</p>\n<p>In fact, they're only equal if they're pointing to the SAME VARIABLE containing the same value.</p>\n<p><a href=\"https://play.golang.org/p/7UdrvLoh3H\" target=\"_blank\" title=\"https://play.golang.org/p/7UdrvLoh3H\">https://play.golang.org/p/7UdrvLoh3H</a></p>\n<p>This has been a public service announcement.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 57322074,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "maia.mcc@gmail.com",
            "sender_full_name": "Maia McCormick (she) (S2'14)",
            "sender_id": 6175,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "pointer equivalency",
            "submessages": [],
            "timestamp": 1463171120,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/0a35beaf5a354dafdf10494c0313e10fffc154fd?x=x&version=1",
            "client": "website",
            "content": "<p>(many of you probably know this already, but just in case you didn't, here you go, now you don't have to find out the hard way.)</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 57322103,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "maia.mcc@gmail.com",
            "sender_full_name": "Maia McCormick (she) (S2'14)",
            "sender_id": 6175,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "pointer equivalency",
            "submessages": [],
            "timestamp": 1463171146,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/b0aaf017ede1c6cd8f546531ead124bbed75fabe?x=x&version=4",
            "client": "website",
            "content": "<p>Sometimes these things may be overlooked! Thanks for sharing.<br>\nThe pointers in this case are pointing to two different variables both coincidentally containing the values \"hello, world\".</p>\n<p>I tried changing the variables into constants to see if this were to change and it doesn't seem that Go likes to reference constants the way I want them to or I am doing it wrong and won't compile the program.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 58648433,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "brad@isbrad.com",
            "sender_full_name": "Bradley Boccuzzi (he/they) (S1'15)",
            "sender_id": 8094,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "pointer equivalency",
            "submessages": [],
            "timestamp": 1464307687,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/3ca604eb0c0cfa22b4a10fc739c056c8?d=identicon&version=1",
            "client": "website",
            "content": "<p>Analogy: imagine you have a bunch of cups in front of you with marbles in them.<br>\n|1|   |2|  |3|  |2|  |6| |1|  |2|<br>\nAll of the cups with two marbles are not the same cup, and they're not at the same location on the table. :-)</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 60095382,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "lukeadba@gmail.com",
            "sender_full_name": "Luke Barone-Adesi (he) (F'13)",
            "sender_id": 2903,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "pointer equivalency",
            "submessages": [],
            "timestamp": 1465547610,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/6527e077e84e20214d5373101ea15910d6b6f7a3?x=x&version=1",
            "client": "website",
            "content": "<p>Hey all. I've got a super weird issue that I'd love to dive into, but I'm not entirely sure where to start. In short, <a href=\"https://github.com/ifo/gozulipbot\" target=\"_blank\" title=\"https://github.com/ifo/gozulipbot\">this library I wrote</a> panics when running tests (<code>go test</code>), about 1/10th to 1/20th of the time, with no seeming consistency. It's also not exacerbated, nor removed, by adding <code>-race</code> to the test running.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 61221923,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "steve@redlua.com",
            "sender_full_name": "Steven McCarthy (he) (SP2'15)",
            "sender_id": 7871,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "inconsistent panics during tests",
            "submessages": [],
            "timestamp": 1467208237,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/6527e077e84e20214d5373101ea15910d6b6f7a3?x=x&version=1",
            "client": "website",
            "content": "<p>The issue seems to revolve around the assertion that the bot's http client (which is an interface which only requires a Do func to exist), is a <code>testClient</code> that I've made.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 61221928,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "steve@redlua.com",
            "sender_full_name": "Steven McCarthy (he) (SP2'15)",
            "sender_id": 7871,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "inconsistent panics during tests",
            "submessages": [],
            "timestamp": 1467208306,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/6527e077e84e20214d5373101ea15910d6b6f7a3?x=x&version=1",
            "client": "website",
            "content": "<p>I'll report more here as I look into it more, but if anyone's had any strange, transient, \"this thing is nil\" errors when type asserting interfaces, I'd love to hear about it <img alt=\":smiley:\" class=\"emoji\" src=\"static/third/gemoji/images/emoji/smiley.png\" title=\":smiley:\"></p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 61221972,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "steve@redlua.com",
            "sender_full_name": "Steven McCarthy (he) (SP2'15)",
            "sender_id": 7871,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "inconsistent panics during tests",
            "submessages": [],
            "timestamp": 1467208351,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/391eb183c3474a15bf9ad0e87d3ff118?d=identicon&version=1",
            "client": "website",
            "content": "<p>Hey Steven! I took a look at your issue and I think it was because of a race condition. I opened a pull request with how I guarded against the nil pointer deref, which may or may not be in line with your intentions for the test. Don't hesitate to ask me any questions if it doesn't quite make sense.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 61456415,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "ghthor@gmail.com",
            "sender_full_name": "Will Drengwitz (he) (W1'17)",
            "sender_id": 7099,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "inconsistent panics during tests",
            "submessages": [],
            "timestamp": 1467745722,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/6527e077e84e20214d5373101ea15910d6b6f7a3?x=x&version=1",
            "client": "website",
            "content": "<p>This is great! Thanks <span class=\"user-mention\" data-user-email=\"ghthor@gmail.com\">@Willa Walthall (W2'15)</span>! I'd love to meet up and chat about how you went about debugging this. And thanks to your code, I managed to figure out what was happening as well :)</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 61469140,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "steve@redlua.com",
            "sender_full_name": "Steven McCarthy (he) (SP2'15)",
            "sender_id": 7871,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "inconsistent panics during tests",
            "submessages": [],
            "timestamp": 1467769159,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/6527e077e84e20214d5373101ea15910d6b6f7a3?x=x&version=1",
            "client": "website",
            "content": "<p>And thanks a bunch for opening a PR :)</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 61469263,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "steve@redlua.com",
            "sender_full_name": "Steven McCarthy (he) (SP2'15)",
            "sender_id": 7871,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "inconsistent panics during tests",
            "submessages": [],
            "timestamp": 1467769426,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/391eb183c3474a15bf9ad0e87d3ff118?d=identicon&version=1",
            "client": "website",
            "content": "<p>Great! Sometimes I'm worried that showing code is the wrong way to help someone through a problem, but I figured in this case it'd be an acceptable way and wouldn't step on your toes.</p>\n<p>My process was as follows. I ran the tests through<code>for ((n=0;n&lt;100;n++)); do go test |&amp; pp; done</code>since the failure wasn't deterministic. I also piped the output of <code>go test</code> into <a href=\"https://github.com/maruel/panicparse\" target=\"_blank\" title=\"https://github.com/maruel/panicparse\">panicparse</a> because the default output is difficult to parse as a human.  Your failure output then helped me determine that while the failure was inconsistent, it was always test case 4 that was causing the failure. Taking a look at test case 4 I noticed that is was the only test specifying an error which gave me the idea to restructure the logic such that the request body wasn't checked if an error was specified for a test case.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 61490962,
            "is_me_message": false,
            "last_edit_timestamp": 1467817789,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "ghthor@gmail.com",
            "sender_full_name": "Will Drengwitz (he) (W1'17)",
            "sender_id": 7099,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "inconsistent panics during tests",
            "submessages": [],
            "timestamp": 1467817552,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/5ca882c23204bfc3a53558da17fdb03caf83ced2?x=x&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"tigris.kami@gmail.com\">@Kamron Saniee (S1'16)</span> here's the slides i mentioned a few days ago: <a href=\"https://talks.golang.org/2016/applicative.slide#32\" target=\"_blank\" title=\"https://talks.golang.org/2016/applicative.slide#32\">https://talks.golang.org/2016/applicative.slide#32</a></p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 61493384,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "lisa.neigut@gmail.com",
            "sender_full_name": "Lisa Neigut (she) (S'12)",
            "sender_id": 917,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "concurrent requests slides",
            "submessages": [],
            "timestamp": 1467821206,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/5ca882c23204bfc3a53558da17fdb03caf83ced2?x=x&version=1",
            "client": "website",
            "content": "<p>the section on building a concurrent Google search is pretty cool</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 61493394,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "lisa.neigut@gmail.com",
            "sender_full_name": "Lisa Neigut (she) (S'12)",
            "sender_id": 917,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "concurrent requests slides",
            "submessages": [],
            "timestamp": 1467821217,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/5ca882c23204bfc3a53558da17fdb03caf83ced2?x=x&version=1",
            "client": "website",
            "content": "<p>(that's what the link points to)</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 61493396,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "lisa.neigut@gmail.com",
            "sender_full_name": "Lisa Neigut (she) (S'12)",
            "sender_id": 917,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "concurrent requests slides",
            "submessages": [],
            "timestamp": 1467821224,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/0a35beaf5a354dafdf10494c0313e10fffc154fd?x=x&version=1",
            "client": "website",
            "content": "<p>you might expect <code>[strings.title](https://golang.org/pkg/strings/#Title)</code> to convert a string into title case. What it does instead is _capitalize the first letter of each word_ -- and it does NOT lower-case letters in the middle of a word. e.g. <code>strings.Title(\"fOoBaR\")</code> returns <code>\"FOoBaR\"</code>. (see <a href=\"https://play.golang.org/p/w6Uxc89ZO2\" target=\"_blank\" title=\"https://play.golang.org/p/w6Uxc89ZO2\">on the playground</a>.) So my question: is there a reason that this makes sense? why would they do it this way instead of the other way (which, to my mind, is more intuitive)? Is this just a Go thing, or does this happen in other langs as well? Thoughts are greatly appreciated!</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 61507919,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "maia.mcc@gmail.com",
            "sender_full_name": "Maia McCormick (she) (S2'14)",
            "sender_id": 6175,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "strings.Title oddness",
            "submessages": [],
            "timestamp": 1467847119,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/391eb183c3474a15bf9ad0e87d3ff118?d=identicon&version=1",
            "client": "website",
            "content": "<p>I can't speak for other languages, but the term <a href=\"http://grammar.about.com/od/grammarfaq/f/capitalstitle.htm\" target=\"_blank\" title=\"http://grammar.about.com/od/grammarfaq/f/capitalstitle.htm\">Title Case</a> would require NLP to achieve. Is <a href=\"https://golang.org/pkg/strings/#ToUpper\" target=\"_blank\" title=\"https://golang.org/pkg/strings/#ToUpper\">strings.ToUpper</a> what you you mean by \"the other way\"?</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 61508135,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "ghthor@gmail.com",
            "sender_full_name": "Will Drengwitz (he) (W1'17)",
            "sender_id": 7099,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "strings.Title oddness",
            "submessages": [],
            "timestamp": 1467847661,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/0a35beaf5a354dafdf10494c0313e10fffc154fd?x=x&version=1",
            "client": "website",
            "content": "<p>I would assume that a <code>Title</code> func would do a naive title case where it capitalized every character after a whitespace char (e.g. \"This Is The Title\" in naive title case would have the article (\"The\") capitalized, while in clever title-case \"the\" would be lower-case.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 61509502,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "maia.mcc@gmail.com",
            "sender_full_name": "Maia McCormick (she) (S2'14)",
            "sender_id": 6175,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "strings.Title oddness",
            "submessages": [],
            "timestamp": 1467850911,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/0a35beaf5a354dafdf10494c0313e10fffc154fd?x=x&version=1",
            "client": "website",
            "content": "<p>so I would expect <code>strings.Title(\"fOoBaR\")</code> --&gt; <code>\"Foobar\"</code></p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 61509529,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "maia.mcc@gmail.com",
            "sender_full_name": "Maia McCormick (she) (S2'14)",
            "sender_id": 6175,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "strings.Title oddness",
            "submessages": [],
            "timestamp": 1467850925,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/0a35beaf5a354dafdf10494c0313e10fffc154fd?x=x&version=1",
            "client": "website",
            "content": "<p>(while <code>strings.ToUpper(\"fOoBaR\")</code> --&gt; <code>\"FOOBAR\"</code>, which makes sense to me)</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 61509544,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "maia.mcc@gmail.com",
            "sender_full_name": "Maia McCormick (she) (S2'14)",
            "sender_id": 6175,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "strings.Title oddness",
            "submessages": [],
            "timestamp": 1467850951,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/0a35beaf5a354dafdf10494c0313e10fffc154fd?x=x&version=1",
            "client": "website",
            "content": "<p>basically: <code>strings.Title</code> already capitalizes the first character of every word--why doesn't it also lowercase all other letters?</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 61509548,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "maia.mcc@gmail.com",
            "sender_full_name": "Maia McCormick (she) (S2'14)",
            "sender_id": 6175,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "strings.Title oddness",
            "submessages": [],
            "timestamp": 1467850976,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/885b8afeb10339344e0d2a1c588f78e26734013c?x=x&version=1",
            "client": "website",
            "content": "<p>I think because non-initial capitals can have semantic value, e.g. I would expect Title(\"Unicode is way better than ASCII\") -&gt; \"Unicode Is Way Better Than ASCII\", not \"Unicode Is Way Better Than Ascii\"</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 61510669,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "recurse@mjec.net",
            "sender_full_name": "Michael Cordover (SP2'16)",
            "sender_id": 9237,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "strings.Title oddness",
            "submessages": [],
            "timestamp": 1467853697,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/885b8afeb10339344e0d2a1c588f78e26734013c?x=x&version=1",
            "client": "website",
            "content": "<p>You can also do Title(Lower(str)) easily if you want that effect, whereas it's non-trivial to reverse it if build into Title()</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 61510675,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "recurse@mjec.net",
            "sender_full_name": "Michael Cordover (SP2'16)",
            "sender_id": 9237,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "strings.Title oddness",
            "submessages": [],
            "timestamp": 1467853727,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/6fcbf8a1f47689fb38a92f7511cffed5a79947a5?x=x&version=1",
            "client": "desktop app Mac 0.5.1",
            "content": "<p>Hey all! Anyone have much experience with effective go debugging? It's also been a long time since I've had to use gdb. Would love to pair with someone for a bit and step through some code if anyone is interested?</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 61532444,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "shikkic@gmail.com",
            "sender_full_name": "Daniel Cadden (he) (S2'16)",
            "sender_id": 9488,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "go debugging | gdb, dwelve, go debug ???",
            "submessages": [],
            "timestamp": 1467903897,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/0a35beaf5a354dafdf10494c0313e10fffc154fd?x=x&version=1",
            "client": "website",
            "content": "<p>Ahhhh. <span class=\"user-mention\" data-user-email=\"recurse@mjec.net\">@Michael Cordover (SP2'16)</span> that totally makes sense, thanks</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 61542050,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "maia.mcc@gmail.com",
            "sender_full_name": "Maia McCormick (she) (S2'14)",
            "sender_id": 6175,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "strings.Title oddness",
            "submessages": [],
            "timestamp": 1467919240,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/6fcbf8a1f47689fb38a92f7511cffed5a79947a5?x=x&version=1",
            "client": "desktop app Mac 0.5.1",
            "content": "<p>Was just curious if anyone else is dabling in Go this current batch? (or anyone else for that matter actually)</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 61550262,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "shikkic@gmail.com",
            "sender_full_name": "Daniel Cadden (he) (S2'16)",
            "sender_id": 9488,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "Summer 2 Golang?",
            "submessages": [],
            "timestamp": 1467935338,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/a6a0ff0a4a9a86ae7bc4524453d439bd?d=identicon&version=1",
            "client": "website",
            "content": "<p>I'm not currently, but it's on my todo list!</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 61554866,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "annie.cherk@gmail.com",
            "sender_full_name": "Annie Cherkaev (she/they) (m4'18)",
            "sender_id": 9502,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "Summer 2 Golang?",
            "submessages": [],
            "timestamp": 1467946393,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/1fdd84a57c15f7ecfdded3d0c32019ad32f8af5d?x=x&version=5",
            "client": "desktop app Mac 0.5.1",
            "content": "<p>I am! </p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 61561506,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "arpith@feedreader.co",
            "sender_full_name": "Arpith Siromoney (he) (m6'20)",
            "sender_id": 9503,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "Summer 2 Golang?",
            "submessages": [],
            "timestamp": 1467963871,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/1fdd84a57c15f7ecfdded3d0c32019ad32f8af5d?x=x&version=5",
            "client": "desktop app Mac 0.5.1",
            "content": "<p>Currenty trying to figure out how to have a goroutine that runs indefinitely, waiting for messages from http handlers (presumably they are goroutines) so that it can linearize them</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 61561591,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "arpith@feedreader.co",
            "sender_full_name": "Arpith Siromoney (he) (m6'20)",
            "sender_id": 9503,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "Summer 2 Golang?",
            "submessages": [],
            "timestamp": 1467964113,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/5ca882c23204bfc3a53558da17fdb03caf83ced2?x=x&version=1",
            "client": "website",
            "content": "<p>I am! I've been working on better understanding Go concurrency! :)</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 61568796,
            "is_me_message": false,
            "last_edit_timestamp": 1467981781,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "lisa.neigut@gmail.com",
            "sender_full_name": "Lisa Neigut (she) (S'12)",
            "sender_id": 917,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "Summer 2 Golang?",
            "submessages": [],
            "timestamp": 1467981773,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/1f950f2c6fb4d92e4a4e6ea1c0b6575a7465d00c?x=x&version=1",
            "client": "website",
            "content": "<p>same! I'm actually going to gophercon next week - if anyone wants me to share some notes from any sessions, I'll have them!</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 61574151,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "kgibilterra@gmail.com",
            "sender_full_name": "Kaylyn Gibilterra (S2'16)",
            "sender_id": 9508,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "Summer 2 Golang?",
            "submessages": [],
            "timestamp": 1467992011,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/5d46121e9a899e151cfcd0e59aa9e9f8a78989e8?x=x&version=1",
            "client": "website",
            "content": "<p>Who here is going to GopherCon? I just got to Denver this morning! <span class=\"user-mention\" data-user-email=\"kgibilterra@gmail.com\">@Kaylyn Gibilterra (S2'16)</span> <span class=\"user-mention\" data-user-email=\"travis@mcdem.us\">@Travis McDemus (S'13)</span> <span class=\"user-mention\" data-user-email=\"jay@jayschwa.net\">@Jay Weisskopf (W'13)</span> <span class=\"user-mention\" data-user-email=\"jordanorelli@gmail.com\">@Jordan Orelli (F'11)</span> </p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 61583528,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "aditya@adityamukerjee.net",
            "sender_full_name": "Aditya Mukerjee (he) (SP1'15)",
            "sender_id": 7644,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "GopherCon",
            "submessages": [],
            "timestamp": 1468008751,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/05023e2779bfc2793d79ee30c81af6ca291539ce?x=x&version=1",
            "client": "website",
            "content": "<p>i wish :P</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 61583577,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "jordanorelli@gmail.com",
            "sender_full_name": "Jordan Orelli (F'11)",
            "sender_id": 872,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "GopherCon",
            "submessages": [],
            "timestamp": 1468008847,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/05023e2779bfc2793d79ee30c81af6ca291539ce?x=x&version=1",
            "client": "website",
            "content": "<p>i have too much travel coming up; going to a wedding in aspen and then a dota tournament in seattle :-|</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 61583633,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "jordanorelli@gmail.com",
            "sender_full_name": "Jordan Orelli (F'11)",
            "sender_id": 872,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "GopherCon",
            "submessages": [],
            "timestamp": 1468008871,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/05023e2779bfc2793d79ee30c81af6ca291539ce?x=x&version=1",
            "client": "website",
            "content": "<p>both in the next month</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 61583636,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "jordanorelli@gmail.com",
            "sender_full_name": "Jordan Orelli (F'11)",
            "sender_id": 872,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "GopherCon",
            "submessages": [],
            "timestamp": 1468008879,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/a179bb8c3fc4ab0975954f57d47fa6c53a8c2dad?x=x&version=2",
            "client": "Android",
            "content": "<p>I'm attending. I'm staying in northern CO right now and will be arriving in Denver on Sunday.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 61587286,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "jay@jayschwa.net",
            "sender_full_name": "Jay Weisskopf Petacat (W2'17)",
            "sender_id": 829,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "GopherCon",
            "submessages": [],
            "timestamp": 1468015645,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/1fdd84a57c15f7ecfdded3d0c32019ad32f8af5d?x=x&version=5",
            "client": "desktop app Mac 0.5.1",
            "content": "<p>Hey guys, I just wrote a small post about my dive into concurrency - <a href=\"https://medium.com/@arpith/go-sharing-memory-by-communicating-in-practice-4761bbe5dcf1#.tbgkgw8rg\" target=\"_blank\" title=\"https://medium.com/@arpith/go-sharing-memory-by-communicating-in-practice-4761bbe5dcf1#.tbgkgw8rg\">https://medium.com/@arpith/go-sharing-memory-by-communicating-in-practice-4761bbe5dcf1#.tbgkgw8rg</a><br>\nWould love to hear feedback!!</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 61628535,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "arpith@feedreader.co",
            "sender_full_name": "Arpith Siromoney (he) (m6'20)",
            "sender_id": 9503,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "Summer 2 Golang?",
            "submessages": [],
            "timestamp": 1468122299,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/391eb183c3474a15bf9ad0e87d3ff118?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"arpith@feedreader.co\">@Arpith Siromoney (S2'16)</span> To use channels to protect your reads you could create a ReadRequest type that contains the key requested and a channel to send the value back out. In your forever loop you'd then select over db.writes and db.readRequests which gives you a lock around all map accesses.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 61773449,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "ghthor@gmail.com",
            "sender_full_name": "Will Drengwitz (he) (W1'17)",
            "sender_id": 7099,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "Summer 2 Golang?",
            "submessages": [],
            "timestamp": 1468438118,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/1fdd84a57c15f7ecfdded3d0c32019ad32f8af5d?x=x&version=5",
            "client": "desktop app Mac 0.5.1",
            "content": "<p>awesome! that's exactly what i implemented i think</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 61774133,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "arpith@feedreader.co",
            "sender_full_name": "Arpith Siromoney (he) (m6'20)",
            "sender_id": 9503,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "Summer 2 Golang?",
            "submessages": [],
            "timestamp": 1468439271,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/1fdd84a57c15f7ecfdded3d0c32019ad32f8af5d?x=x&version=5",
            "client": "desktop app Mac 0.5.1",
            "content": "<p>someone on medium asked why not just pass the http response writer to the goroutine that's looping forever.. I think my reasoning was that I didn't really want to handle 404's etc in the db's listener</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 61774563,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "arpith@feedreader.co",
            "sender_full_name": "Arpith Siromoney (he) (m6'20)",
            "sender_id": 9503,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "Summer 2 Golang?",
            "submessages": [],
            "timestamp": 1468439919,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/1fdd84a57c15f7ecfdded3d0c32019ad32f8af5d?x=x&version=5",
            "client": "desktop app Mac 0.5.1",
            "content": "<p>are there other advantages?</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 61774567,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "arpith@feedreader.co",
            "sender_full_name": "Arpith Siromoney (he) (m6'20)",
            "sender_id": 9503,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "Summer 2 Golang?",
            "submessages": [],
            "timestamp": 1468439928,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/391eb183c3474a15bf9ad0e87d3ff118?d=identicon&version=1",
            "client": "website",
            "content": "<p>Yeah, that seems like its crossing the streams of responsibilities. I don't see any advantages to passing the http response into the forever loop. There is a disadvantage, the forever loop may end up waiting to write out the HTTP response, which would block any other reads/writes from taking place.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 61775196,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "ghthor@gmail.com",
            "sender_full_name": "Will Drengwitz (he) (W1'17)",
            "sender_id": 7099,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "Summer 2 Golang?",
            "submessages": [],
            "timestamp": 1468440993,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/1fdd84a57c15f7ecfdded3d0c32019ad32f8af5d?x=x&version=5",
            "client": "desktop app Mac 0.5.1",
            "content": "<p>that makes sense.. thanks!!</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 61775431,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "arpith@feedreader.co",
            "sender_full_name": "Arpith Siromoney (he) (m6'20)",
            "sender_id": 9503,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "Summer 2 Golang?",
            "submessages": [],
            "timestamp": 1468441337,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/391eb183c3474a15bf9ad0e87d3ff118?d=identicon&version=1",
            "client": "website",
            "content": "<p>Welcome =)</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 61775504,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "ghthor@gmail.com",
            "sender_full_name": "Will Drengwitz (he) (W1'17)",
            "sender_id": 7099,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "Summer 2 Golang?",
            "submessages": [],
            "timestamp": 1468441453,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/1fdd84a57c15f7ecfdded3d0c32019ad32f8af5d?x=x&version=5",
            "client": "desktop app Mac 0.5.1",
            "content": "<p>wrote up about it! <a href=\"https://medium.com/@arpith/reading-a-go-map-safely-277bb08ed144#.29a9b3thk\" target=\"_blank\" title=\"https://medium.com/@arpith/reading-a-go-map-safely-277bb08ed144#.29a9b3thk\">https://medium.com/@arpith/reading-a-go-map-safely-277bb08ed144#.29a9b3thk</a></p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 61812541,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "arpith@feedreader.co",
            "sender_full_name": "Arpith Siromoney (he) (m6'20)",
            "sender_id": 9503,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "Summer 2 Golang?",
            "submessages": [],
            "timestamp": 1468517879,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/1fdd84a57c15f7ecfdded3d0c32019ad32f8af5d?x=x&version=5",
            "client": "desktop app Mac 0.5.1",
            "content": "<p>and also some fun with tickers! <a href=\"https://medium.com/@arpith/resetting-a-ticker-in-go-63858a2c17ec#.mihz4q5hh\" target=\"_blank\" title=\"https://medium.com/@arpith/resetting-a-ticker-in-go-63858a2c17ec#.mihz4q5hh\">https://medium.com/@arpith/resetting-a-ticker-in-go-63858a2c17ec#.mihz4q5hh</a></p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 61812582,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "arpith@feedreader.co",
            "sender_full_name": "Arpith Siromoney (he) (m6'20)",
            "sender_id": 9503,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "Summer 2 Golang?",
            "submessages": [],
            "timestamp": 1468517898,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/1fdd84a57c15f7ecfdded3d0c32019ad32f8af5d?x=x&version=5",
            "client": "desktop app Mac 0.5.1",
            "content": "<p>would love feedback <img alt=\":happy_person_raising_hand:\" class=\"emoji\" src=\"static/third/gemoji/images/emoji/happy_person_raising_hand.png\" title=\":happy_person_raising_hand:\"> </p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 61812588,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "arpith@feedreader.co",
            "sender_full_name": "Arpith Siromoney (he) (m6'20)",
            "sender_id": 9503,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "Summer 2 Golang?",
            "submessages": [],
            "timestamp": 1468517922,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/391eb183c3474a15bf9ad0e87d3ff118?d=identicon&version=1",
            "client": "website",
            "content": "<p>Look good from a concurrency standpoint. The article prose seems fine. A suggestion for the code, from an engineering standpoint, is that the result of a request is either a valid JSON string or the magic error string \"ERROR: NOT FOUND\". Perhaps the result should be a structure with 2 fields, one for a possible error value and the other for a valid result(JSON String). Another option could be to generate a valid JSON object that represents an error, say <code>{\"error\": \"key not found\"}</code>. My complaint with the second option is that the HTTP handler would have to parse the JSON to determine what HTTP status to return.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 61819791,
            "is_me_message": false,
            "last_edit_timestamp": 1468530202,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "ghthor@gmail.com",
            "sender_full_name": "Will Drengwitz (he) (W1'17)",
            "sender_id": 7099,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "Summer 2 Golang?",
            "submessages": [],
            "timestamp": 1468529815,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/1fdd84a57c15f7ecfdded3d0c32019ad32f8af5d?x=x&version=5",
            "client": "desktop app Mac 0.5.1",
            "content": "<p>i think your first option sounds great :) thanks!</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 61846350,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "arpith@feedreader.co",
            "sender_full_name": "Arpith Siromoney (he) (m6'20)",
            "sender_id": 9503,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "Summer 2 Golang?",
            "submessages": [],
            "timestamp": 1468592220,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/044b59a59f2bfb736b3142db2cd025ca?d=identicon&version=1",
            "client": "website",
            "content": "<p>If anyone wants to give me feedback, here is my GothamGo submission!</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 62063946,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "hi@filippo.io",
            "sender_full_name": "Filippo Valsorda (F2'17)",
            "sender_id": 2884,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "gothamgo submission",
            "submessages": [],
            "timestamp": 1469070572,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/044b59a59f2bfb736b3142db2cd025ca?d=identicon&version=1",
            "client": "website",
            "content": "<p><a href=\"https://docs.google.com/document/d/1N5W4FmPC2nSDb4LezQPi2Jwhcy_zGalG1QFpUKkM3dU/edit\" target=\"_blank\" title=\"https://docs.google.com/document/d/1N5W4FmPC2nSDb4LezQPi2Jwhcy_zGalG1QFpUKkM3dU/edit\">https://docs.google.com/document/d/1N5W4FmPC2nSDb4LezQPi2Jwhcy_zGalG1QFpUKkM3dU/edit</a></p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 62063947,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "hi@filippo.io",
            "sender_full_name": "Filippo Valsorda (F2'17)",
            "sender_id": 2884,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "gothamgo submission",
            "submessages": [],
            "timestamp": 1469070574,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/044b59a59f2bfb736b3142db2cd025ca?d=identicon&version=1",
            "client": "website",
            "content": "<p>I'll send it tomorrow evening</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 62063949,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "hi@filippo.io",
            "sender_full_name": "Filippo Valsorda (F2'17)",
            "sender_id": 2884,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "gothamgo submission",
            "submessages": [],
            "timestamp": 1469070586,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/1f950f2c6fb4d92e4a4e6ea1c0b6575a7465d00c?x=x&version=1",
            "client": "website",
            "content": "<p>it's awesome! I love the <code>GARBAGE COLLECTOR!!!!!!!!!!</code> comment added - you can feel how much time he's spent fighting that with every added exclamation loool </p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 62082641,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "kgibilterra@gmail.com",
            "sender_full_name": "Kaylyn Gibilterra (S2'16)",
            "sender_id": 9508,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "gothamgo submission",
            "submessages": [],
            "timestamp": 1469112184,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/044b59a59f2bfb736b3142db2cd025ca?d=identicon&version=1",
            "client": "website",
            "content": "<p>Yes, he did. Can confirm. xD</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 62085629,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "hi@filippo.io",
            "sender_full_name": "Filippo Valsorda (F2'17)",
            "sender_id": 2884,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "gothamgo submission",
            "submessages": [],
            "timestamp": 1469117021,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/5ca882c23204bfc3a53558da17fdb03caf83ced2?x=x&version=1",
            "client": "website",
            "content": "<p>this is a pretty good look at writing advanced concurrent programs <a href=\"https://talks.golang.org/2013/advconc.slide#10\" target=\"_blank\" title=\"https://talks.golang.org/2013/advconc.slide#10\">https://talks.golang.org/2013/advconc.slide#10</a>  cc <span class=\"user-mention\" data-user-email=\"arpith@feedreader.co\">@Arpith Siromoney (S2'16)</span> </p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 62291515,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "lisa.neigut@gmail.com",
            "sender_full_name": "Lisa Neigut (she) (S'12)",
            "sender_id": 917,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "advanced concurrency slides",
            "submessages": [],
            "timestamp": 1469566081,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/0a35beaf5a354dafdf10494c0313e10fffc154fd?x=x&version=1",
            "client": "website",
            "content": "<p>I'm confused about variadic functions NOT actually accepting an arbitrary number of arguments if some of those arguments are an unpacked slice</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 62847810,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "maia.mcc@gmail.com",
            "sender_full_name": "Maia McCormick (she) (S2'14)",
            "sender_id": 6175,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "variadic functions aren't actually variadic...?",
            "submessages": [],
            "timestamp": 1470676378,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/0a35beaf5a354dafdf10494c0313e10fffc154fd?x=x&version=1",
            "client": "website",
            "content": "<div class=\"codehilite\"><pre><span class=\"kn\">package</span> <span class=\"nx\">main</span>\n\n<span class=\"kn\">import</span> <span class=\"p\">(</span>\n    <span class=\"s\">&quot;fmt&quot;</span>\n<span class=\"p\">)</span>\n\n<span class=\"kd\">func</span> <span class=\"nx\">sum</span><span class=\"p\">(</span><span class=\"nx\">nums</span> <span class=\"o\">...</span><span class=\"kt\">int</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"nx\">fmt</span><span class=\"p\">.</span><span class=\"nx\">Print</span><span class=\"p\">(</span><span class=\"nx\">nums</span><span class=\"p\">,</span> <span class=\"s\">&quot; &quot;</span><span class=\"p\">)</span>\n    <span class=\"nx\">total</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span>\n    <span class=\"k\">for</span> <span class=\"nx\">_</span><span class=\"p\">,</span> <span class=\"nx\">num</span> <span class=\"o\">:=</span> <span class=\"k\">range</span> <span class=\"nx\">nums</span> <span class=\"p\">{</span>\n        <span class=\"nx\">total</span> <span class=\"o\">+=</span> <span class=\"nx\">num</span>\n    <span class=\"p\">}</span>\n    <span class=\"nx\">fmt</span><span class=\"p\">.</span><span class=\"nx\">Println</span><span class=\"p\">(</span><span class=\"nx\">total</span><span class=\"p\">)</span>\n<span class=\"p\">}</span>\n\n<span class=\"kd\">func</span> <span class=\"nx\">main</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n    <span class=\"nx\">sum</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"mi\">3</span><span class=\"p\">)</span> <span class=\"c1\">// this works fine</span>\n\n    <span class=\"nx\">numList</span> <span class=\"o\">:=</span> <span class=\"p\">[]</span><span class=\"kt\">int</span><span class=\"p\">{</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"mi\">3</span><span class=\"p\">}</span>\n    <span class=\"nx\">sum</span><span class=\"p\">(</span><span class=\"nx\">numList</span><span class=\"o\">...</span><span class=\"p\">)</span> <span class=\"c1\">// so does this</span>\n\n    <span class=\"nx\">sum</span><span class=\"p\">(</span><span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"nx\">numList</span><span class=\"o\">...</span><span class=\"p\">)</span> <span class=\"c1\">// fails with &quot;too many arguments&quot;</span>\n\n    <span class=\"nx\">sum</span><span class=\"p\">(</span><span class=\"nx\">numList</span><span class=\"o\">...</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">)</span> <span class=\"c1\">// fails with syntax error</span>\n\n<span class=\"p\">}</span>\n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 62847813,
            "is_me_message": false,
            "last_edit_timestamp": 1470676403,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "maia.mcc@gmail.com",
            "sender_full_name": "Maia McCormick (she) (S2'14)",
            "sender_id": 6175,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "variadic functions aren't actually variadic...?",
            "submessages": [],
            "timestamp": 1470676382,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/0a35beaf5a354dafdf10494c0313e10fffc154fd?x=x&version=1",
            "client": "website",
            "content": "<p>(to play with the above snippet: <a href=\"https://play.golang.org/p/5N9VsA2y1b\" target=\"_blank\" title=\"https://play.golang.org/p/5N9VsA2y1b\">https://play.golang.org/p/5N9VsA2y1b</a> )</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 62847826,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "maia.mcc@gmail.com",
            "sender_full_name": "Maia McCormick (she) (S2'14)",
            "sender_id": 6175,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "variadic functions aren't actually variadic...?",
            "submessages": [],
            "timestamp": 1470676411,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/0a35beaf5a354dafdf10494c0313e10fffc154fd?x=x&version=1",
            "client": "website",
            "content": "<p>i feel like there's some definitional intricacy i'm missing here where it makes SENSE that the above function behaves in this way. ideas?</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 62847831,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "maia.mcc@gmail.com",
            "sender_full_name": "Maia McCormick (she) (S2'14)",
            "sender_id": 6175,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "variadic functions aren't actually variadic...?",
            "submessages": [],
            "timestamp": 1470676430,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/8880886d758e516691b420c771d1f6421d097ba1?x=x&version=1",
            "client": "website",
            "content": "<p>I guess <code>sum(numList..., 4)</code> fails because only the last parameter in the function signature can be variadic.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 62848329,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "oguzkayral@gmail.com",
            "sender_full_name": "O\u011fuz Kayral (S1'16)",
            "sender_id": 9089,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "variadic functions aren't actually variadic...?",
            "submessages": [],
            "timestamp": 1470677292,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/8880886d758e516691b420c771d1f6421d097ba1?x=x&version=1",
            "client": "website",
            "content": "<p>And for <code>sum(4, numList...)</code>: it tries either to cast the parameter to []T or create a new slice from the individual elements.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 62848406,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "oguzkayral@gmail.com",
            "sender_full_name": "O\u011fuz Kayral (S1'16)",
            "sender_id": 9089,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "variadic functions aren't actually variadic...?",
            "submessages": [],
            "timestamp": 1470677413,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/8880886d758e516691b420c771d1f6421d097ba1?x=x&version=1",
            "client": "website",
            "content": "<p>in this case it's not possible to create a slice with int and []int so it fails</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 62848429,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "oguzkayral@gmail.com",
            "sender_full_name": "O\u011fuz Kayral (S1'16)",
            "sender_id": 9089,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "variadic functions aren't actually variadic...?",
            "submessages": [],
            "timestamp": 1470677450,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/8880886d758e516691b420c771d1f6421d097ba1?x=x&version=1",
            "client": "website",
            "content": "<p>maybe <code>sum(append(numList, 4)...)</code> can be used instead?</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 62848493,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "oguzkayral@gmail.com",
            "sender_full_name": "O\u011fuz Kayral (S1'16)",
            "sender_id": 9089,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "variadic functions aren't actually variadic...?",
            "submessages": [],
            "timestamp": 1470677539,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/0a35beaf5a354dafdf10494c0313e10fffc154fd?x=x&version=1",
            "client": "website",
            "content": "<p>huhhhh, and you also can't unpack a slice as args to any funcs but one that is specifically variadic...  <a href=\"https://play.golang.org/p/cd_VlIJVPo\" target=\"_blank\" title=\"https://play.golang.org/p/cd_VlIJVPo\">https://play.golang.org/p/cd_VlIJVPo</a></p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 62893173,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "maia.mcc@gmail.com",
            "sender_full_name": "Maia McCormick (she) (S2'14)",
            "sender_id": 6175,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "variadic functions aren't actually variadic...?",
            "submessages": [],
            "timestamp": 1470768185,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p>Yeah, I wouldn't have expected that one to work. You happen to know that you're trying to pass the correct number of arguments, but the typechecker is (presumably) not keeping track of the length of the slice: all it would know is that you're trying to pass some number of arguments, who knows how many, to a function that takes exactly two.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 62893477,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "variadic functions aren't actually variadic...?",
            "submessages": [],
            "timestamp": 1470768656,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p>I imagine whether or not it's going to allow a variadic call is determined statically, not at run time, hence the restrictions.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 62893486,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "variadic functions aren't actually variadic...?",
            "submessages": [],
            "timestamp": 1470768686,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/a179bb8c3fc4ab0975954f57d47fa6c53a8c2dad?x=x&version=2",
            "client": "website",
            "content": "<p><code>func sum(nums ...int)</code> is really <code>func sum(nums []int)</code> under the hood. When called like <code>sum(1, 2, 3)</code>, the compiler is doing <code>sum([]int{1,2,3})</code> for you.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 62905607,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "jay@jayschwa.net",
            "sender_full_name": "Jay Weisskopf Petacat (W2'17)",
            "sender_id": 829,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "variadic functions aren't actually variadic...?",
            "submessages": [],
            "timestamp": 1470791060,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/a179bb8c3fc4ab0975954f57d47fa6c53a8c2dad?x=x&version=2",
            "client": "website",
            "content": "<p>When splatting a slice into a variadic function, it is a zero cost operation - all it's really doing is just passing the slice in as if the definition were <code>func sum(nums []int)</code>.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 62905666,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "jay@jayschwa.net",
            "sender_full_name": "Jay Weisskopf Petacat (W2'17)",
            "sender_id": 829,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "variadic functions aren't actually variadic...?",
            "submessages": [],
            "timestamp": 1470791233,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/a179bb8c3fc4ab0975954f57d47fa6c53a8c2dad?x=x&version=2",
            "client": "website",
            "content": "<p>If we imagine that support were added for something like <code>sum(4, numList...)</code> or <code>sum(numList..., 4)</code>, a new slice would have to be created so that the contents of <code>numList</code> and the <code>4</code> are contiguous. It would incur a cost, and Go seems to shy away from that sort of thing if it can.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 62905745,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "jay@jayschwa.net",
            "sender_full_name": "Jay Weisskopf Petacat (W2'17)",
            "sender_id": 829,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "variadic functions aren't actually variadic...?",
            "submessages": [],
            "timestamp": 1470791404,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/a179bb8c3fc4ab0975954f57d47fa6c53a8c2dad?x=x&version=2",
            "client": "website",
            "content": "<p>So let's say this is in our source code:</p>\n<div class=\"codehilite\"><pre>func sum(nums ...int) { /* profit! */ }\nnumList := []int{1, 2, 3}\nsum(numList...) // call 1\nsum(numList..., 4) // call 2\n</pre></div>\n\n\n<p>If we pass through our pseudo-compiler that supports more sugary forms of splatting, the output is this:</p>\n<div class=\"codehilite\"><pre>func sum(nums []int) { /* profit! */ } // it really just takes a slice\nnumList := []int{1, 2, 3}\nsum(numList) // call 1\n\n// gotta build a new temp slice for call 2 to concatenate everything together!\ntempList := make([]int, len(numList)+1)\ncopy(tempList, numList)\ntempList[len(numList)] = 4\nsum(tempList)\n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 62906084,
            "is_me_message": false,
            "last_edit_timestamp": 1470792244,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "jay@jayschwa.net",
            "sender_full_name": "Jay Weisskopf Petacat (W2'17)",
            "sender_id": 829,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "variadic functions aren't actually variadic...?",
            "submessages": [],
            "timestamp": 1470792158,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/229e3746f6f5100c1d7d5d7a8a5b82d5?d=identicon&version=1",
            "client": "website",
            "content": "<p>My question that I will repost here: <a href=\"https://twitter.com/icco/status/765543745362223104\" target=\"_blank\" title=\"https://twitter.com/icco/status/765543745362223104\">https://twitter.com/icco/status/765543745362223104</a></p>\n<div class=\"inline-preview-twitter\"><div class=\"twitter-tweet\"><a href=\"https://twitter.com/icco/status/765543745362223104\" target=\"_blank\"><img class=\"twitter-avatar\" src=\"https://uploads.zulipusercontent.net/09467137c0b436f582ecb0519f4514739ee76f05/687474703a2f2f7062732e7477696d672e636f6d2f70726f66696c655f696d616765732f3731393531303131333435313636373435372f4167427775754e365f6e6f726d616c2e6a7067\"></a><p>Post Go 1.7 launch, what's the correct way to do package management in #golang?</p><span>- Nat Welch (@icco)</span></div></div>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 100025634,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "nat@natwelch.com",
            "sender_full_name": "Nat Welch (he) (SP2'15)",
            "sender_id": 7866,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "Vendoring?",
            "submessages": [],
            "timestamp": 1471354877,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/1f950f2c6fb4d92e4a4e6ea1c0b6575a7465d00c?x=x&version=1",
            "client": "website",
            "content": "<p>is there an answer to this?? I want to know!</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 100026283,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "kgibilterra@gmail.com",
            "sender_full_name": "Kaylyn Gibilterra (S2'16)",
            "sender_id": 9508,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "Vendoring?",
            "submessages": [],
            "timestamp": 1471357299,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/ea5ab7f7d6e19ffdee32487a6e145475c956689b?x=x&version=3",
            "client": "website",
            "content": "<p>I build a pretty basic CRUD app and I'd like to use Golang, but I've never used it for anything outside of a tutorial and I have some questions. Some of these are pretty general for all web apps:</p>\n<p>1. What is a good book that might cover many of these things? Maybe this has all been covered on this stream before. Only subscribed now.</p>\n<p>2. How to do authentication? Would like for users to have API tokens that can be revoked, which smells like OAuth to me.</p>\n<p>3. I'd like the main interface to be a CLI, what would be a good package for this? cli seems good (<a href=\"https://github.com/urfave/cli\" target=\"_blank\" title=\"https://github.com/urfave/cli\">https://github.com/urfave/cli</a>)</p>\n<p>4. What is a recommended web server? Something similar to django-rest-framework would be nice (I think).</p>\n<p>5. How to do database management (migrations, ORM, etc.)? Something similar to SQLAlchemy would be nice.</p>\n<p>I think that is enough to start! Any tips would be appreciated <img alt=\":smile_cat:\" class=\"emoji\" src=\"/static/third/gemoji/images/emoji/smile_cat.png\" title=\":smile_cat:\"></p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 100079978,
            "is_me_message": false,
            "last_edit_timestamp": 1471471706,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "andrew@mrdrozdov.com",
            "sender_full_name": "Andrew Drozdov (S2'16)",
            "sender_id": 7630,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "Building a WebApp in Golang",
            "submessages": [],
            "timestamp": 1471471689,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/1fdd84a57c15f7ecfdded3d0c32019ad32f8af5d?x=x&version=5",
            "client": "website",
            "content": "<p>Go is fun! You should totally use it!<br>\nHere are some thoughts based on stuff I've built in the past - I'm sure there are better ways to do this, but this might get the discussion going. Flame on!</p>\n<p>1. No idea, guessing <a href=\"https://golang.org/doc/articles/wiki/\" target=\"_blank\" title=\"https://golang.org/doc/articles/wiki/\">https://golang.org/doc/articles/wiki/</a> isn't cutting it :)<br>\n2. jwt? have rolled my own as well<br>\n3. Not sure I get how much cli a webapp will need, but flag works for my db!<br>\n4. Standard library, with <a href=\"https://github.com/julienschmidt/httprouter\" target=\"_blank\" title=\"https://github.com/julienschmidt/httprouter\">https://github.com/julienschmidt/httprouter</a><br>\n5. I've used goose, it's been good to me <a href=\"https://bitbucket.org/liamstask/goose/\" target=\"_blank\" title=\"https://bitbucket.org/liamstask/goose/\">https://bitbucket.org/liamstask/goose/</a></p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 100084552,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "arpith@feedreader.co",
            "sender_full_name": "Arpith Siromoney (he) (m6'20)",
            "sender_id": 9503,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "Building a WebApp in Golang",
            "submessages": [],
            "timestamp": 1471482914,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/1fdd84a57c15f7ecfdded3d0c32019ad32f8af5d?x=x&version=5",
            "client": "website",
            "content": "<p>PS: pinging <span class=\"user-mention\" data-user-email=\"ghthor@gmail.com\">@Willa Drengwitz (W2'15)</span> and <span class=\"user-mention\" data-user-email=\"filippo.valsorda@gmail.com\">@Filippo Valsorda (F'13)</span> for more serious answers</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 100084633,
            "is_me_message": false,
            "last_edit_timestamp": 1471483219,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "arpith@feedreader.co",
            "sender_full_name": "Arpith Siromoney (he) (m6'20)",
            "sender_id": 9503,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "Building a WebApp in Golang",
            "submessages": [],
            "timestamp": 1471483105,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/61f7402a76ff0aff964da46bd7948ca20279ae1f?x=x&version=1",
            "client": "website",
            "content": "<p>I thought it was vendoring with <code>gvt</code>? That's what I'm doing at least....</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 100087235,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "waldemar.quevedo@gmail.com",
            "sender_full_name": "Waldemar Quevedo (F2'14)",
            "sender_id": 6706,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "Vendoring?",
            "submessages": [],
            "timestamp": 1471489805,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/ea5ab7f7d6e19ffdee32487a6e145475c956689b?x=x&version=3",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"arpith@feedreader.co\">@Arpith Siromoney (S2'16)</span> thank you! this is enough validation for me to start moving forward. glad to hear about JWT. I've built a toy app using JWT before and it's worked great.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 100087371,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "andrew@mrdrozdov.com",
            "sender_full_name": "Andrew Drozdov (S2'16)",
            "sender_id": 7630,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "Building a WebApp in Golang",
            "submessages": [],
            "timestamp": 1471490257,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/6527e077e84e20214d5373101ea15910d6b6f7a3?x=x&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"andrew@mrdrozdov.com\">@Andrew Drozdov (SP1'15)</span> My two cents:<br>\n1. There's <a href=\"https://astaxie.gitbooks.io/build-web-application-with-golang/content/en//\" target=\"_blank\" title=\"https://astaxie.gitbooks.io/build-web-application-with-golang/content/en//\">a book that covers a lot of these things</a>. I haven't read it extensively, and I THINK it's based on a django-like library called beego, but there's also a fair bit of vanilla golang to do web stuff.<br>\n2. <a href=\"https://godoc.org/golang.org/x/oauth2\" target=\"_blank\" title=\"https://godoc.org/golang.org/x/oauth2\">https://godoc.org/golang.org/x/oauth2</a> - bonus if you scroll to the bottom, there's a lot of additional libraries that help implement common oauth2 schemes, like facebook, google, github, etc.<br>\n3. The built in <a href=\"https://golang.org/pkg/flag/\" target=\"_blank\" title=\"https://golang.org/pkg/flag/\">flag package</a> is decent, though you'll have to do a little messing around to get it to pick up environment variables AND flags. I have an unfinished website that did some cli stuff. <a href=\"https://github.com/ifo/pic.management/blob/master/config.go#L20-L44\" target=\"_blank\" title=\"https://github.com/ifo/pic.management/blob/master/config.go#L20-L44\">It's not pretty</a>, but it works.<br>\n4. I think <a href=\"https://github.com/astaxie/beego\" target=\"_blank\" title=\"https://github.com/astaxie/beego\">beego</a> is pretty fully featured. Though there are <a href=\"https://github.com/avelino/awesome-go#web-frameworks\" target=\"_blank\" title=\"https://github.com/avelino/awesome-go#web-frameworks\">a number of others</a> &lt;- (good resource in general for golang stuff). Though personally, I just use <a href=\"https://golang.org/pkg/net/http/\" target=\"_blank\" title=\"https://golang.org/pkg/net/http/\">net/http</a>, especially now that it includes <a href=\"https://golang.org/pkg/context/\" target=\"_blank\" title=\"https://golang.org/pkg/context/\">context</a> (golang 1.7 only, which was released suuuuuuper recently?)<br>\n5. I've only played around a little with <a href=\"https://github.com/jinzhu/gorm\" target=\"_blank\" title=\"https://github.com/jinzhu/gorm\">gorm</a>, but it seems nice. I'll have to check out goose, though, because I wasn't suuuuuuper in love with gorm.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 100090348,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "steve@redlua.com",
            "sender_full_name": "Steven McCarthy (he) (SP2'15)",
            "sender_id": 7871,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "Building a WebApp in Golang",
            "submessages": [],
            "timestamp": 1471498143,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/70292d91a79cfd0fb1c8ad4f650480d631a56e9e?x=x&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"andrew@mrdrozdov.com\">@Andrew Drozdov (SP1'15)</span> </p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 100104846,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "lawrence.trey@gmail.com",
            "sender_full_name": "Trey Lawrence (F1'16)",
            "sender_id": 911,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "Building a WebApp in Golang",
            "submessages": [],
            "timestamp": 1471532517,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/70292d91a79cfd0fb1c8ad4f650480d631a56e9e?x=x&version=1",
            "client": "website",
            "content": "<p>1. not sure<br>\n2. I usually role my own<br>\n3. I like that cli package, and use it for most of my cli utilities<br>\n4. I've used goji, and it seems decent, albeit somewhat overkill at times. I've also used gorilla mux, and that was way overkill.<br>\n5. I've used goose (it's unmaintained though) for migrations. It's decent. Gorm seems very ORM heavy and is worth checking out if you're more comfortable with ORMs. I've used gorp as well, but don't really like it. There's a better postgres specific one that I think is called dbx? that I was meaning to check out and looked more like a SQL builder package than a full fledged ORM.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 100104961,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "lawrence.trey@gmail.com",
            "sender_full_name": "Trey Lawrence (F1'16)",
            "sender_id": 911,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "Building a WebApp in Golang",
            "submessages": [],
            "timestamp": 1471532695,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/ea5ab7f7d6e19ffdee32487a6e145475c956689b?x=x&version=3",
            "client": "website",
            "content": "<p>thanks! will probably start building out the server tomorrow. will report back with my choices!</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 100105021,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "andrew@mrdrozdov.com",
            "sender_full_name": "Andrew Drozdov (S2'16)",
            "sender_id": 7630,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "Building a WebApp in Golang",
            "submessages": [],
            "timestamp": 1471532803,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/70292d91a79cfd0fb1c8ad4f650480d631a56e9e?x=x&version=1",
            "client": "website",
            "content": "<p>Ah, it was dat, not dbx (<a href=\"https://github.com/mgutz/dat\" target=\"_blank\" title=\"https://github.com/mgutz/dat\">https://github.com/mgutz/dat</a>)</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 100105140,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "lawrence.trey@gmail.com",
            "sender_full_name": "Trey Lawrence (F1'16)",
            "sender_id": 911,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "Building a WebApp in Golang",
            "submessages": [],
            "timestamp": 1471533063,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/391eb183c3474a15bf9ad0e87d3ff118?d=identicon&version=1",
            "client": "website",
            "content": "<p>Goose is unmaintained! Shit, I'm going to take that back over. I tried contributing way back and the creator and I had some conflicts that I never resolved... But... BUT NOWS MY CHANCE! I WIN, muahahahaha</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 100159202,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "ghthor@gmail.com",
            "sender_full_name": "Will Drengwitz (he) (W1'17)",
            "sender_id": 7099,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "Building a WebApp in Golang",
            "submessages": [],
            "timestamp": 1471647569,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/1f950f2c6fb4d92e4a4e6ea1c0b6575a7465d00c?x=x&version=1",
            "client": "website",
            "content": "<p><img alt=\":tada:\" class=\"emoji\" src=\"/static/third/gemoji/images/emoji/tada.png\" title=\":tada:\"> <img alt=\":tada:\" class=\"emoji\" src=\"/static/third/gemoji/images/emoji/tada.png\" title=\":tada:\"> </p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 100215187,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "kgibilterra@gmail.com",
            "sender_full_name": "Kaylyn Gibilterra (S2'16)",
            "sender_id": 9508,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "Building a WebApp in Golang",
            "submessages": [],
            "timestamp": 1471796731,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/5d46121e9a899e151cfcd0e59aa9e9f8a78989e8?x=x&version=1",
            "client": "website",
            "content": "<p>I'm giving a talk tomorrow on designing interface types in Go, called \"How I Learned to Stop Worrying and Love the Interface\". It's for GoBridge, a remote meetup, so the event is livestreamed. If anyone's interested in attending, here's the livestream link! <a href=\"https://www.bigmarker.com/remote-meetup-go/How-I-Learned-to-Stop-Worrying-and-Love-the-Interface\" target=\"_blank\" title=\"https://www.bigmarker.com/remote-meetup-go/How-I-Learned-to-Stop-Worrying-and-Love-the-Interface\">https://www.bigmarker.com/remote-meetup-go/How-I-Learned-to-Stop-Worrying-and-Love-the-Interface</a></p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 100302731,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "aditya@adityamukerjee.net",
            "sender_full_name": "Aditya Mukerjee (he) (SP1'15)",
            "sender_id": 7644,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "How I Learned to Stop Worrying and Love the Interface",
            "submessages": [],
            "timestamp": 1471989397,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/5d46121e9a899e151cfcd0e59aa9e9f8a78989e8?x=x&version=1",
            "client": "website",
            "content": "<p>It's at 9 EDT tomorrow (Wednesday)</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 100302732,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "aditya@adityamukerjee.net",
            "sender_full_name": "Aditya Mukerjee (he) (SP1'15)",
            "sender_id": 7644,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "How I Learned to Stop Worrying and Love the Interface",
            "submessages": [],
            "timestamp": 1471989409,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/1f950f2c6fb4d92e4a4e6ea1c0b6575a7465d00c?x=x&version=1",
            "client": "website",
            "content": "<p>is it EDT or PST? It mentions 9pm PST on the event page</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 100302898,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "kgibilterra@gmail.com",
            "sender_full_name": "Kaylyn Gibilterra (S2'16)",
            "sender_id": 9508,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "How I Learned to Stop Worrying and Love the Interface",
            "submessages": [],
            "timestamp": 1471989730,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/61f7402a76ff0aff964da46bd7948ca20279ae1f?x=x&version=1",
            "client": "website",
            "content": "<p>thanks for sharing!</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 100302957,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "waldemar.quevedo@gmail.com",
            "sender_full_name": "Waldemar Quevedo (F2'14)",
            "sender_id": 6706,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "How I Learned to Stop Worrying and Love the Interface",
            "submessages": [],
            "timestamp": 1471989844,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/61f7402a76ff0aff964da46bd7948ca20279ae1f?x=x&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"aditya@adityamukerjee.net\">@Aditya Mukerjee (SP1'15)</span> I got a golang interfaces question btw if I may ask... <img alt=\":pray:\" class=\"emoji\" src=\"/static/third/gemoji/images/emoji/pray.png\" title=\":pray:\"> </p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 100305170,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "waldemar.quevedo@gmail.com",
            "sender_full_name": "Waldemar Quevedo (F2'14)",
            "sender_id": 6706,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "How I Learned to Stop Worrying and Love the Interface",
            "submessages": [],
            "timestamp": 1471994830,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/61f7402a76ff0aff964da46bd7948ca20279ae1f?x=x&version=1",
            "client": "website",
            "content": "<p>I've been hesitating on whether implementing the <code>net.Error</code> interface for the client from a messaging system which itself has its own notion of a <code>request timeout</code> when no one replies back, so maybe could be helpful to use <code>net.Error</code> behaviors of <code>Timeout</code> and <code>Temporary</code> to express _retrying_ without having to import the package everywhere and checking against _sentinel_ errors using type assertions as Dave Cheney suggests instead...</p>\n<p>Just wondering if implementing <code>net.Error</code> in other packages for cases like this is common among other projects... the thing with interfaces I guess is once you have one you have a contract so basic decision making as this can become more conservative and involved at times, wondering whether it is the correct interface to be implementing or exposing for example.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 100305678,
            "is_me_message": false,
            "last_edit_timestamp": 1472018425,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "waldemar.quevedo@gmail.com",
            "sender_full_name": "Waldemar Quevedo (F2'14)",
            "sender_id": 6706,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "How I Learned to Stop Worrying and Love the Interface",
            "submessages": [],
            "timestamp": 1471996066,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/61f7402a76ff0aff964da46bd7948ca20279ae1f?x=x&version=1",
            "client": "website",
            "content": "<p>I guess that is the <code>worrying</code> part about using interfaces... <img alt=\":sweat_smile:\" class=\"emoji\" src=\"/static/third/gemoji/images/emoji/sweat_smile.png\" title=\":sweat_smile:\"></p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 100305721,
            "is_me_message": false,
            "last_edit_timestamp": 1471996154,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "waldemar.quevedo@gmail.com",
            "sender_full_name": "Waldemar Quevedo (F2'14)",
            "sender_id": 6706,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "How I Learned to Stop Worrying and Love the Interface",
            "submessages": [],
            "timestamp": 1471996146,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/5d46121e9a899e151cfcd0e59aa9e9f8a78989e8?x=x&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"kgibilterra@gmail.com\">@Kaylyn Gibilterra (S2'16)</span> it's 9 EDT (6 PDT)</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 100310699,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "aditya@adityamukerjee.net",
            "sender_full_name": "Aditya Mukerjee (he) (SP1'15)",
            "sender_id": 7644,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "How I Learned to Stop Worrying and Love the Interface",
            "submessages": [],
            "timestamp": 1472007549,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/5d46121e9a899e151cfcd0e59aa9e9f8a78989e8?x=x&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"waldemar.quevedo@gmail.com\">@Waldemar Quevedo (F2'14)</span> &lt;ack&gt;ing this, will respond tomorrow</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 100310701,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "aditya@adityamukerjee.net",
            "sender_full_name": "Aditya Mukerjee (he) (SP1'15)",
            "sender_id": 7644,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "How I Learned to Stop Worrying and Love the Interface",
            "submessages": [],
            "timestamp": 1472007561,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/61f7402a76ff0aff964da46bd7948ca20279ae1f?x=x&version=1",
            "client": "website",
            "content": "<p>thanks! hopefully fixed some of the grammar/English above...</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 100314941,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "waldemar.quevedo@gmail.com",
            "sender_full_name": "Waldemar Quevedo (F2'14)",
            "sender_id": 6706,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "How I Learned to Stop Worrying and Love the Interface",
            "submessages": [],
            "timestamp": 1472018447,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/1f950f2c6fb4d92e4a4e6ea1c0b6575a7465d00c?x=x&version=1",
            "client": "website",
            "content": "<p>awesome talk <span class=\"user-mention\" data-user-email=\"aditya@adityamukerjee.net\">@Aditya Mukerjee (SP1'15)</span>!!</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 100349732,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "kgibilterra@gmail.com",
            "sender_full_name": "Kaylyn Gibilterra (S2'16)",
            "sender_id": 9508,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "How I Learned to Stop Worrying and Love the Interface",
            "submessages": [],
            "timestamp": 1472090371,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/61f7402a76ff0aff964da46bd7948ca20279ae1f?x=x&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"aditya@adityamukerjee.net\">@Aditya Mukerjee (SP1'15)</span> yeah talk was great! thanks for answering my question :)  Really want to start using more interfaces properly...</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 100349832,
            "is_me_message": false,
            "last_edit_timestamp": 1472090540,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "waldemar.quevedo@gmail.com",
            "sender_full_name": "Waldemar Quevedo (F2'14)",
            "sender_id": 6706,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "How I Learned to Stop Worrying and Love the Interface",
            "submessages": [],
            "timestamp": 1472090526,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/391eb183c3474a15bf9ad0e87d3ff118?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"aditya@adityamukerjee.net\">@Aditya Mukerjee (SP1'15)</span> Will it be posted as a VOD that I can watch later?</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 100388511,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "ghthor@gmail.com",
            "sender_full_name": "Will Drengwitz (he) (W1'17)",
            "sender_id": 7099,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "How I Learned to Stop Worrying and Love the Interface",
            "submessages": [],
            "timestamp": 1472174983,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/61f7402a76ff0aff964da46bd7948ca20279ae1f?x=x&version=1",
            "client": "website",
            "content": "<p>video should be up in the same link above <img alt=\":thumbs_up:\" class=\"emoji\" src=\"/static/third/gemoji/images/emoji/thumbs_up.png\" title=\":thumbs_up:\"> <a href=\"https://www.bigmarker.com/remote-meetup-go/How-I-Learned-to-Stop-Worrying-and-Love-the-Interface\" target=\"_blank\" title=\"https://www.bigmarker.com/remote-meetup-go/How-I-Learned-to-Stop-Worrying-and-Love-the-Interface\">https://www.bigmarker.com/remote-meetup-go/How-I-Learned-to-Stop-Worrying-and-Love-the-Interface</a></p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 100389234,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "waldemar.quevedo@gmail.com",
            "sender_full_name": "Waldemar Quevedo (F2'14)",
            "sender_id": 6706,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "How I Learned to Stop Worrying and Love the Interface",
            "submessages": [],
            "timestamp": 1472176497,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/612c7c2a108d7850c62d1d2293a481aa42855408?x=x&version=2",
            "client": "website",
            "content": "<p>hello golangers! do you prefer recursion or iteration? what about conventions? why?</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 100722618,
            "is_me_message": false,
            "last_edit_timestamp": 1472972651,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "PLRedmond@gmail.com",
            "sender_full_name": "Patrick Redmond (W'14)",
            "sender_id": 5014,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "recursion and iteration",
            "submessages": [],
            "timestamp": 1472972624,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/612c7c2a108d7850c62d1d2293a481aa42855408?x=x&version=2",
            "client": "website",
            "content": "<p>here is an example displaying both (newton's method, from the golang tour) <a href=\"http://pastebin.com/zR66SA4H\" target=\"_blank\" title=\"http://pastebin.com/zR66SA4H\">http://pastebin.com/zR66SA4H</a></p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 100722655,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "PLRedmond@gmail.com",
            "sender_full_name": "Patrick Redmond (W'14)",
            "sender_id": 5014,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "recursion and iteration",
            "submessages": [],
            "timestamp": 1472972668,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/612c7c2a108d7850c62d1d2293a481aa42855408?x=x&version=2",
            "client": "website",
            "content": "<p>i asked on irc and got some good responses:</p>\n<ul>\n<li>Readability is paramount. For tree traversals recursion is likely better. In the example given both versions are readable therefore iteration is preferable because it is smaller. (thanks, teaspoon)</li>\n<li>The go compiler doesn't perform tail-call optimizations, therefore in general iteration is preferred. (thanks, pestle)</li>\n</ul>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 100722777,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "PLRedmond@gmail.com",
            "sender_full_name": "Patrick Redmond (W'14)",
            "sender_id": 5014,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "recursion and iteration",
            "submessages": [],
            "timestamp": 1472973016,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/612c7c2a108d7850c62d1d2293a481aa42855408?x=x&version=2",
            "client": "website",
            "content": "<p>I also put up a poll, to gauge the community's feel for the convention <a href=\"https://twitter.com/f06io/status/772328936302714880\" target=\"_blank\" title=\"https://twitter.com/f06io/status/772328936302714880\">https://twitter.com/f06io/status/772328936302714880</a></p>\n<div class=\"inline-preview-twitter\"><div class=\"twitter-tweet\"><a href=\"https://twitter.com/f06io/status/772328936302714880\" target=\"_blank\"><img class=\"twitter-avatar\" src=\"https://uploads.zulipusercontent.net/5b4cf3d3d4ee56330e0c53ee71840c8da1cf4f3d/687474703a2f2f7062732e7477696d672e636f6d2f70726f66696c655f696d616765732f3532323035333233343430383433393831302f6e414c6143676d705f6e6f726d616c2e6a706567\"></a><p>to #golang programming humans, please inform me about conventions. recursion or iteration? <a href=\"https://t.co/61FKTzRmrN\" target=\"_blank\" title=\"https://t.co/61FKTzRmrN\">http://pastebin.com/zR66SA4H</a></p><span>- P\u03bbR (@f06io)</span></div></div>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 100722778,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "PLRedmond@gmail.com",
            "sender_full_name": "Patrick Redmond (W'14)",
            "sender_id": 5014,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "recursion and iteration",
            "submessages": [],
            "timestamp": 1472973055,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/612c7c2a108d7850c62d1d2293a481aa42855408?x=x&version=2",
            "client": "website",
            "content": "<p>thank you for your input! :)</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 100722782,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "PLRedmond@gmail.com",
            "sender_full_name": "Patrick Redmond (W'14)",
            "sender_id": 5014,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "recursion and iteration",
            "submessages": [],
            "timestamp": 1472973079,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/612c7c2a108d7850c62d1d2293a481aa42855408?x=x&version=2",
            "client": "website",
            "content": "<p>It seems people come down very hard on the side of iteration! thanks for your input :)</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 100819269,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "PLRedmond@gmail.com",
            "sender_full_name": "Patrick Redmond (W'14)",
            "sender_id": 5014,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "recursion and iteration",
            "submessages": [],
            "timestamp": 1473194385,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/5ca882c23204bfc3a53558da17fdb03caf83ced2?x=x&version=1",
            "client": "website",
            "content": "<p>thanks for doing this! i'm fairly new to golang, and this confirms my intution about it :)</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 100829015,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "lisa.neigut@gmail.com",
            "sender_full_name": "Lisa Neigut (she) (S'12)",
            "sender_id": 917,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "recursion and iteration",
            "submessages": [],
            "timestamp": 1473216337,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p>I'm curious, in languages without tail calls, do people ever really prefer recursion?</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 100842341,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "recursion and iteration",
            "submessages": [],
            "timestamp": 1473248841,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p>Even with tail calls though, there are situations where you may have to contort yourself to not blow the stack with recursion. E.g. by using your own explicit stack.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 100842379,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "recursion and iteration",
            "submessages": [],
            "timestamp": 1473248897,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4d074af6cc341ef51b25bb2f738cdb11?d=identicon&version=1",
            "client": "website",
            "content": "<p>There's no shortage of trampoline implementations in Python :). Some algorithms are easier for me to express recursively, so I'm a fan.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 100845313,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "vaibhavsagar@gmail.com",
            "sender_full_name": "Vaibhav Sagar (he) (F1'16)",
            "sender_id": 100041,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "recursion and iteration",
            "submessages": [],
            "timestamp": 1473255841,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4d074af6cc341ef51b25bb2f738cdb11?d=identicon&version=1",
            "client": "website",
            "content": "<p>Here's a cute implementation that ties back to our discussion in the <code>python</code> stream: <a href=\"http://www.usrsb.in/blog/blog/2012/08/12/bouncing-pythons-generators-with-a-trampoline/\" target=\"_blank\" title=\"http://www.usrsb.in/blog/blog/2012/08/12/bouncing-pythons-generators-with-a-trampoline/\">http://www.usrsb.in/blog/blog/2012/08/12/bouncing-pythons-generators-with-a-trampoline/</a></p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 100845933,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "vaibhavsagar@gmail.com",
            "sender_full_name": "Vaibhav Sagar (he) (F1'16)",
            "sender_id": 100041,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "recursion and iteration",
            "submessages": [],
            "timestamp": 1473257048,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4d074af6cc341ef51b25bb2f738cdb11?d=identicon&version=1",
            "client": "website",
            "content": "<p>A comment on the post links to this discussion on LtU: <a href=\"http://lambda-the-ultimate.org/node/1331\" target=\"_blank\" title=\"http://lambda-the-ultimate.org/node/1331\">http://lambda-the-ultimate.org/node/1331</a></p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 100846019,
            "is_me_message": false,
            "last_edit_timestamp": 1473257273,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "vaibhavsagar@gmail.com",
            "sender_full_name": "Vaibhav Sagar (he) (F1'16)",
            "sender_id": 100041,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "recursion and iteration",
            "submessages": [],
            "timestamp": 1473257259,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"vaibhavsagar@gmail.com\">@Vaibhav Sagar (F1'16)</span> oh that's a really good point!</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 100847347,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "recursion and iteration",
            "submessages": [],
            "timestamp": 1473259505,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/c7ecfe9f2764516cd0769548de80a3edb20d81cd?x=x&version=2",
            "client": "website",
            "content": "<p>I don't think anyone really uses recursion in functional languages either. Certainly in clojure it's kinda hard to use, and people tend to iterate (now to be fair, the JVM doesn't have TCO either). In haskell, I'm new but I observe thay recursion is much more rare than you'd think (certainly when you're learning, you're exposed to recursion a lot. Not so much after that).</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 100848492,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "paul.biggar@gmail.com",
            "sender_full_name": "Paul Biggar (he) (F1'16)",
            "sender_id": 100048,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "recursion and iteration",
            "submessages": [],
            "timestamp": 1473261322,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"paul.biggar@gmail.com\">@Paul Biggar (F1'16)</span> in Haskell, by not using recursion, do you mean using instead something higher level, like a fold?</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 100848541,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "recursion and iteration",
            "submessages": [],
            "timestamp": 1473261375,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p>I agree that raw recursion is a little rare. But recursive data types are certainly very common, and at bottom you're going to process them recursively.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 100848620,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "recursion and iteration",
            "submessages": [],
            "timestamp": 1473261519,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/c7ecfe9f2764516cd0769548de80a3edb20d81cd?x=x&version=2",
            "client": "website",
            "content": "<p>yeah, fold, map, filter, etc</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 100849281,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "paul.biggar@gmail.com",
            "sender_full_name": "Paul Biggar (he) (F1'16)",
            "sender_id": 100048,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "recursion and iteration",
            "submessages": [],
            "timestamp": 1473262773,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/612c7c2a108d7850c62d1d2293a481aa42855408?x=x&version=2",
            "client": "website",
            "content": "<p>fold, map, filter, etc have really clear use cases, respectively: Fold changes the organization of a structure or accumulates a summary. Map transforms the contents of a structure without changing the structure. Filter removes elements from structure that has a linear interpretation.</p>\n<p>There are lots of higher-level abstractions in haskell that prevent you from having use raw recursion, but which are less clear cut. I haven't learned to understand these higher-level abstractions or how to recognize when to use them.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 100859876,
            "is_me_message": false,
            "last_edit_timestamp": 1473281867,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "PLRedmond@gmail.com",
            "sender_full_name": "Patrick Redmond (W'14)",
            "sender_id": 5014,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "recursion and iteration",
            "submessages": [],
            "timestamp": 1473280891,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/612c7c2a108d7850c62d1d2293a481aa42855408?x=x&version=2",
            "client": "website",
            "content": "<p>In these cases I've found that raw recursion is often clearer than trying to use a higher-level abstraction in a first version of some code. Certainly a reader of the code might feel differently depending on their familiarity applicable abstractions.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 100859918,
            "is_me_message": false,
            "last_edit_timestamp": 1473281590,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "PLRedmond@gmail.com",
            "sender_full_name": "Patrick Redmond (W'14)",
            "sender_id": 5014,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "recursion and iteration",
            "submessages": [],
            "timestamp": 1473280948,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/612c7c2a108d7850c62d1d2293a481aa42855408?x=x&version=2",
            "client": "website",
            "content": "<p>Likewise, I've found that iterative-style looping with for/while in c/python/javascript doesn't always capture what I'm doing. A vague example that I remember involved a loop where two sets of side effects interacted in a way that make it unclear that anything being done would reach the termination condition.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 100860029,
            "is_me_message": false,
            "last_edit_timestamp": 1473281487,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "PLRedmond@gmail.com",
            "sender_full_name": "Patrick Redmond (W'14)",
            "sender_id": 5014,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "recursion and iteration",
            "submessages": [],
            "timestamp": 1473281187,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/612c7c2a108d7850c62d1d2293a481aa42855408?x=x&version=2",
            "client": "website",
            "content": "<p>Sorry, this is getting long. The point I wanted to make is:</p>\n<blockquote>\n<p>Alan O'Donnell: I'm curious, in languages without tail calls, do people ever really prefer recursion?</p>\n</blockquote>\n<p>Yes, me. Hence this discussion. It rarely blows the stack in my applications.</p>\n<blockquote>\n<p>Paul Biggar (F1'16): I don't think anyone really uses recursion in functional languages either.</p>\n</blockquote>\n<p>This doesn't match my experience, but you're spot on about clojure's nudging the programmer to use macro-abstractions for loops.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 100860330,
            "is_me_message": false,
            "last_edit_timestamp": 1473281818,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "PLRedmond@gmail.com",
            "sender_full_name": "Patrick Redmond (W'14)",
            "sender_id": 5014,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "recursion and iteration",
            "submessages": [],
            "timestamp": 1473281806,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/612c7c2a108d7850c62d1d2293a481aa42855408?x=x&version=2",
            "client": "website",
            "content": "<p>In the example that I started the thread with, the iterative version feels very confusing:</p>\n<div class=\"codehilite\"><pre>// iterative square root using newton&#39;s method\nfunc Sqrt_iter(x float64) (z float64, n uint) {\n    z_ := 1.0\n    for z, n = newt(x, z_, 0); !close(z_, z, 0.000001); z, n = newt(x, z_, n) {\n        z_ = z // shift new to old\n    }\n    return\n}\n</pre></div>\n\n\n<p>The boundary between \"old\" data and \"new\" data is in the combination of the loop increment statement <code>z, n = newt(x, z_, n)</code> and the loop body <code>z_ = z</code>. I have trouble remembering which of these runs first, and get confused because there's an intermediate state between them where the set of variables is inconsistent.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 100860510,
            "is_me_message": false,
            "last_edit_timestamp": 1473282284,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "PLRedmond@gmail.com",
            "sender_full_name": "Patrick Redmond (W'14)",
            "sender_id": 5014,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "recursion and iteration",
            "submessages": [],
            "timestamp": 1473282145,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/612c7c2a108d7850c62d1d2293a481aa42855408?x=x&version=2",
            "client": "website",
            "content": "<p>In the recursive version the meanings of variables w.r.t. time never changes (because they aren't reassigned? because there's no notion of time?).  The recursive call is the boundary where values take on new meanings w.r.t. time. Scopes correspond to the passage of time.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 100860664,
            "is_me_message": false,
            "last_edit_timestamp": 1473282714,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "PLRedmond@gmail.com",
            "sender_full_name": "Patrick Redmond (W'14)",
            "sender_id": 5014,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "recursion and iteration",
            "submessages": [],
            "timestamp": 1473282383,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/612c7c2a108d7850c62d1d2293a481aa42855408?x=x&version=2",
            "client": "website",
            "content": "<p>Furthermore, there's no way to write fold/map/filter (or anything higher-level) in go without runtime type introspection.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 100860688,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "PLRedmond@gmail.com",
            "sender_full_name": "Patrick Redmond (W'14)",
            "sender_id": 5014,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "recursion and iteration",
            "submessages": [],
            "timestamp": 1473282473,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/612c7c2a108d7850c62d1d2293a481aa42855408?x=x&version=2",
            "client": "website",
            "content": "<p>So, new question, since I'm the one who's getting confused by for/while/do,while:</p>\n<p><strong>How do you think about imperative looping constructs?</strong></p>\n<ul>\n<li>Do you use them according to certain use-case patterns that you hold in your head? Or do you have one pattern in your head that's just general enough to apply to all situations where you want to loop?</li>\n<li>How do you deal with \"time boundaries\" in your head, and in your code?</li>\n</ul>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 100860802,
            "is_me_message": false,
            "last_edit_timestamp": 1473282658,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "PLRedmond@gmail.com",
            "sender_full_name": "Patrick Redmond (W'14)",
            "sender_id": 5014,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "recursion and iteration",
            "submessages": [],
            "timestamp": 1473282622,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"PLRedmond@gmail.com\">@Patrick Redmond (W'14)</span> ok, that's an interesting question :) Having practiced implementing a bunch of imperative algorithms lately, I initially had the same issue, where I was much more comfortable using function things, and I was getting lost in my loops.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 100860933,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "recursion and iteration",
            "submessages": [],
            "timestamp": 1473282932,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p>Now I think very explicitly in terms of loop invariants, and I have to admit, it's a super fun way to write loops.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 100860939,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "recursion and iteration",
            "submessages": [],
            "timestamp": 1473282957,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p>Not sure if that's what you're getting at, but I definitely feel much happier than I used to programming imperatively.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 100860987,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "recursion and iteration",
            "submessages": [],
            "timestamp": 1473283008,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/612c7c2a108d7850c62d1d2293a481aa42855408?x=x&version=2",
            "client": "website",
            "content": "<p>Ah! I'm so glad somebody got what I was saying-- it ballooned to too many words!</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 100861046,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "PLRedmond@gmail.com",
            "sender_full_name": "Patrick Redmond (W'14)",
            "sender_id": 5014,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "recursion and iteration",
            "submessages": [],
            "timestamp": 1473283147,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/612c7c2a108d7850c62d1d2293a481aa42855408?x=x&version=2",
            "client": "website",
            "content": "<p>I don't know if \"think[ing] very explicitly in terms of loop invariants\" is I'm getting at!</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 100861052,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "PLRedmond@gmail.com",
            "sender_full_name": "Patrick Redmond (W'14)",
            "sender_id": 5014,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "recursion and iteration",
            "submessages": [],
            "timestamp": 1473283181,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/612c7c2a108d7850c62d1d2293a481aa42855408?x=x&version=2",
            "client": "website",
            "content": "<p>Could you expand, or link to a resource that might convey more about what you mean?</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 100861053,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "PLRedmond@gmail.com",
            "sender_full_name": "Patrick Redmond (W'14)",
            "sender_id": 5014,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "recursion and iteration",
            "submessages": [],
            "timestamp": 1473283192,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/612c7c2a108d7850c62d1d2293a481aa42855408?x=x&version=2",
            "client": "website",
            "content": "<p>This <a href=\"http://stackoverflow.com/questions/3221577/what-is-a-loop-invariant\" target=\"_blank\" title=\"http://stackoverflow.com/questions/3221577/what-is-a-loop-invariant\">stack overflow answer</a> gives a concise definition borrowed from <a href=\"http://www.cs.uofs.edu/~mccloske/courses/cmps144/invariants_lec.html\" target=\"_blank\" title=\"http://www.cs.uofs.edu/~mccloske/courses/cmps144/invariants_lec.html\">these notes</a>:</p>\n<blockquote>\n<p>A loop invariant is a condition [among program variables] that is necessarily true immediately before and immediately after each iteration of a loop. (Note that this says nothing about its truth or falsity part way through an iteration.)</p>\n</blockquote>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 100861159,
            "is_me_message": false,
            "last_edit_timestamp": 1473283355,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "PLRedmond@gmail.com",
            "sender_full_name": "Patrick Redmond (W'14)",
            "sender_id": 5014,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "recursion and iteration",
            "submessages": [],
            "timestamp": 1473283328,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/612c7c2a108d7850c62d1d2293a481aa42855408?x=x&version=2",
            "client": "website",
            "content": "<p>Is that what you meant, <span class=\"user-mention\" data-user-email=\"alan@hackerschool.com\">@Alan O'Donnell</span> ?</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 100861167,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "PLRedmond@gmail.com",
            "sender_full_name": "Patrick Redmond (W'14)",
            "sender_id": 5014,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "recursion and iteration",
            "submessages": [],
            "timestamp": 1473283364,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p>Yeah, I'm trying to think how to expand on how they've helped me.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 100861175,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "recursion and iteration",
            "submessages": [],
            "timestamp": 1473283381,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p>Here's an example of using them to help with implementing quicksort: <a href=\"https://gist.github.com/happy4crazy/36f0a7f25d37815fe3457354be135438\" target=\"_blank\" title=\"https://gist.github.com/happy4crazy/36f0a7f25d37815fe3457354be135438\">https://gist.github.com/happy4crazy/36f0a7f25d37815fe3457354be135438</a></p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 100861254,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "recursion and iteration",
            "submessages": [],
            "timestamp": 1473283520,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/612c7c2a108d7850c62d1d2293a481aa42855408?x=x&version=2",
            "client": "website",
            "content": "<p>So you're maintaining the invariant (sorry, python syntax) <code>all(e &lt;= pivot for e in xs[start:left]) and all(e &gt; pivot for e in xs[left:right])</code> before the beginning of, and at the end of each iteration of, a while loop which does an in-place linear-time partitioning of the array around the pivot value. Cool.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 100861586,
            "is_me_message": false,
            "last_edit_timestamp": 1473284325,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "PLRedmond@gmail.com",
            "sender_full_name": "Patrick Redmond (W'14)",
            "sender_id": 5014,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "recursion and iteration",
            "submessages": [],
            "timestamp": 1473284183,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/612c7c2a108d7850c62d1d2293a481aa42855408?x=x&version=2",
            "client": "website",
            "content": "<p>I'm a little confused though. That invariant isn't (necessarily) true until the end of the last iteration of the while loop, right?</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 100861658,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "PLRedmond@gmail.com",
            "sender_full_name": "Patrick Redmond (W'14)",
            "sender_id": 5014,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "recursion and iteration",
            "submessages": [],
            "timestamp": 1473284389,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p>No, I'm checking it at the end of every iteration.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 100861720,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "recursion and iteration",
            "submessages": [],
            "timestamp": 1473284507,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p>Woops, maybe I misunderstood that--looks you already mentioned that above.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 100861772,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "recursion and iteration",
            "submessages": [],
            "timestamp": 1473284570,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/612c7c2a108d7850c62d1d2293a481aa42855408?x=x&version=2",
            "client": "website",
            "content": "<p>Okay, I think I just finally understood what you're doing in the loop.</p>\n<ul>\n<li>You have two regions, <code>xs[start:left]</code> (the less-eqs) and <code>xs[left:right]</code> (the greaters) which are zones where the the invariants must hold.</li>\n<li>The two regions start out with size zero, so the invariants hold vacuously. (Actually, the less-eqs start out containing the pivot, which is equal to itself.)</li>\n<li>Each iteration you unconditionally add a new element <code>xs(r)</code> to either the left region or the right region. (This is why you unconditionally increment <code>r</code>.) If adding to the greaters, it's done. If adding to the less-eqs, you have to shift the leftmost element from the greaters to the rightmost slot to make room.</li>\n</ul>\n<p>That was super confusing, but I get it now. It's very clear, and the invariants guarantee that it's correct.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 100862679,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "PLRedmond@gmail.com",
            "sender_full_name": "Patrick Redmond (W'14)",
            "sender_id": 5014,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "recursion and iteration",
            "submessages": [],
            "timestamp": 1473286525,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/612c7c2a108d7850c62d1d2293a481aa42855408?x=x&version=2",
            "client": "website",
            "content": "<p>If I were writing this for the first time without this high-level intuition (two shifting adjacent regions, the rightward of which shifts stepwise to the right sometimes), I think I would be utterly lost. I can see how the invariants help a *ton* with clarifying what the code is supposed to be doing, and they can be disabled for an \"optimized\" version.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 100862729,
            "is_me_message": false,
            "last_edit_timestamp": 1473286701,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "PLRedmond@gmail.com",
            "sender_full_name": "Patrick Redmond (W'14)",
            "sender_id": 5014,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "recursion and iteration",
            "submessages": [],
            "timestamp": 1473286668,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/612c7c2a108d7850c62d1d2293a481aa42855408?x=x&version=2",
            "client": "website",
            "content": "<p>The high level intuition seems like a pre-requisite for composing this kind of loop-invariant. If I were composing something totally new without such kind of a high-level intuition, I'd be lost. Maybe the lesson is that I need to do more planning before coding, and then iterative-looping techniques will make more sense.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 100862847,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "PLRedmond@gmail.com",
            "sender_full_name": "Patrick Redmond (W'14)",
            "sender_id": 5014,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "recursion and iteration",
            "submessages": [],
            "timestamp": 1473286886,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/612c7c2a108d7850c62d1d2293a481aa42855408?x=x&version=2",
            "client": "website",
            "content": "<blockquote>\n<p>Alan O'Donnell: ... I definitely feel much happier than I used to programming imperatively.</p>\n</blockquote>\n<p>Yeah. This is what I'd like to get at. :P</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 100862894,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "PLRedmond@gmail.com",
            "sender_full_name": "Patrick Redmond (W'14)",
            "sender_id": 5014,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "recursion and iteration",
            "submessages": [],
            "timestamp": 1473286960,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/612c7c2a108d7850c62d1d2293a481aa42855408?x=x&version=2",
            "client": "website",
            "content": "<p>I think these issues ultimately drove me away from imperative programming, but I don't know if it's a problem with imperative programming, or my practice of it. <img alt=\":face_with_cold_sweat:\" class=\"emoji\" src=\"/static/third/gemoji/images/emoji/face_with_cold_sweat.png\" title=\":face_with_cold_sweat:\"> Since now I'll be starting a new job writing golang, I think I need to address this part of my working habits.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 100862900,
            "is_me_message": false,
            "last_edit_timestamp": 1473287201,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "PLRedmond@gmail.com",
            "sender_full_name": "Patrick Redmond (W'14)",
            "sender_id": 5014,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "recursion and iteration",
            "submessages": [],
            "timestamp": 1473286996,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p>Yeah, in this case coming up with that loop invariant yourself would have been hard--it's really the whole idea of quicksort, in a sense :) But I find these invariants are helpful even if you're doing something simpler, say, selection sort. If I just jump into writing loops without thinking of an actual invariant, I find that I make a lot of \"almost right\" mistakes, off by one errors, etc.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 100863115,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "recursion and iteration",
            "submessages": [],
            "timestamp": 1473287430,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/612c7c2a108d7850c62d1d2293a481aa42855408?x=x&version=2",
            "client": "website",
            "content": "<p>Hm. Okay. I'll try to apply that: Think of an invariant before writing the loop.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 100863172,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "PLRedmond@gmail.com",
            "sender_full_name": "Patrick Redmond (W'14)",
            "sender_id": 5014,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "recursion and iteration",
            "submessages": [],
            "timestamp": 1473287570,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/70292d91a79cfd0fb1c8ad4f650480d631a56e9e?x=x&version=1",
            "client": "website",
            "content": "<p>When did go add print and println to the builtin package? Or am I an idiot and they've been there the whole time?</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 101107837,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "lawrence.trey@gmail.com",
            "sender_full_name": "Trey Lawrence (F1'16)",
            "sender_id": 911,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "print",
            "submessages": [],
            "timestamp": 1473874899,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/eda27ef72edc37e619df90711af3cb55?d=identicon&version=1",
            "client": "desktop app Mac 0.5.2",
            "content": "<p>been there for a while it seems, but not guaranteed to stay there <a href=\"http://stackoverflow.com/questions/14680255/whats-the-difference-between-fmt-println-and-println-in-go\" target=\"_blank\" title=\"http://stackoverflow.com/questions/14680255/whats-the-difference-between-fmt-println-and-println-in-go\">http://stackoverflow.com/questions/14680255/whats-the-difference-between-fmt-println-and-println-in-go</a></p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 101108166,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "nbirnberg@gmail.com",
            "sender_full_name": "Nick Birnberg (S2'16)",
            "sender_id": 9497,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "print",
            "submessages": [],
            "timestamp": 1473875433,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/70292d91a79cfd0fb1c8ad4f650480d631a56e9e?x=x&version=1",
            "client": "website",
            "content": "<p><img alt=\":thumbs_up:\" class=\"emoji\" src=\"/static/third/gemoji/images/emoji/thumbs_up.png\" title=\":thumbs_up:\"></p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 101111385,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "lawrence.trey@gmail.com",
            "sender_full_name": "Trey Lawrence (F1'16)",
            "sender_id": 911,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "print",
            "submessages": [],
            "timestamp": 1473881163,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/6527e077e84e20214d5373101ea15910d6b6f7a3?x=x&version=1",
            "client": "website",
            "content": "<p>So I'm giving a tech talk at my company on Tuesday. It's an introduction to Golang. I'll likely focus mostly on practical pieces that one needs to know to understand the language when coming from a Python or JavaScript background.<br>\nBut I'm also looking for ideas of cool things to talk about. So if <strong>you</strong> were introducing people to Golang, what are the language features you'd be sure to mention? Or are some of the language tools things that you'd highlight? I'm thinking primarily of <code>go fmt</code>, but there are certainly other things.<br>\nTL;DR - I'm crowd sourcing cool things about Golang.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 101127409,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "steve@redlua.com",
            "sender_full_name": "Steven McCarthy (he) (SP2'15)",
            "sender_id": 7871,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "important topics when introducing go",
            "submessages": [],
            "timestamp": 1473917502,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/1f950f2c6fb4d92e4a4e6ea1c0b6575a7465d00c?x=x&version=1",
            "client": "website",
            "content": "<p>showing how simple concurrency is (or even just showing go func()) is fun</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 101143435,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "kgibilterra@gmail.com",
            "sender_full_name": "Kaylyn Gibilterra (S2'16)",
            "sender_id": 9508,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "important topics when introducing go",
            "submessages": [],
            "timestamp": 1473956950,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/1f950f2c6fb4d92e4a4e6ea1c0b6575a7465d00c?x=x&version=1",
            "client": "website",
            "content": "<p>also I like to show people the difference in the number of keywords by language, for if you're into the \"simpler is better\" concept like I am:</p>\n<div class=\"codehilite\"><pre>C++\u200a\u2014\u200a84\nJavaScript\u200a\u2014\u200a63\nPascal\u200a\u2014\u200a54\nRust\u200a\u2014\u200a52\nJava\u200a\u2014\u200a50\nScala\u200a\u2014\u200a39\nPython\u200a\u2014\u200a33\nC\u200a\u2014\u200a32\nGo\u200a\u2014\u200a25 \n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 101143486,
            "is_me_message": false,
            "last_edit_timestamp": 1473957032,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "kgibilterra@gmail.com",
            "sender_full_name": "Kaylyn Gibilterra (S2'16)",
            "sender_id": 9508,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "important topics when introducing go",
            "submessages": [],
            "timestamp": 1473957004,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/1f950f2c6fb4d92e4a4e6ea1c0b6575a7465d00c?x=x&version=1",
            "client": "website",
            "content": "<p>oh and testing/benchmarking is fun too!!</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 101143834,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "kgibilterra@gmail.com",
            "sender_full_name": "Kaylyn Gibilterra (S2'16)",
            "sender_id": 9508,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "important topics when introducing go",
            "submessages": [],
            "timestamp": 1473957797,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/70292d91a79cfd0fb1c8ad4f650480d631a56e9e?x=x&version=1",
            "client": "website",
            "content": "<p>84!! go probably has too few keywords tbh...</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 101143930,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "lawrence.trey@gmail.com",
            "sender_full_name": "Trey Lawrence (F1'16)",
            "sender_id": 911,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "important topics when introducing go",
            "submessages": [],
            "timestamp": 1473957967,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/70292d91a79cfd0fb1c8ad4f650480d631a56e9e?x=x&version=1",
            "client": "website",
            "content": "<p><a href=\"https://play.golang.org/p/mGNCDaMMaN\" target=\"_blank\" title=\"https://play.golang.org/p/mGNCDaMMaN\">https://play.golang.org/p/mGNCDaMMaN</a></p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 101143931,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "lawrence.trey@gmail.com",
            "sender_full_name": "Trey Lawrence (F1'16)",
            "sender_id": 911,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "important topics when introducing go",
            "submessages": [],
            "timestamp": 1473957971,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/1f950f2c6fb4d92e4a4e6ea1c0b6575a7465d00c?x=x&version=1",
            "client": "website",
            "content": "<p>yea I imagine a few more will get added over time, but I like the spirit of it<br>\nAlso as a disclaimer, I came up with the keyword count a bit ago after some light googling for the languages - there could probably be some debate over which keywords to use, but I just used whatever seemed like a reasonable list to me haha</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 101144864,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "kgibilterra@gmail.com",
            "sender_full_name": "Kaylyn Gibilterra (S2'16)",
            "sender_id": 9508,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "important topics when introducing go",
            "submessages": [],
            "timestamp": 1473959910,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/5ca882c23204bfc3a53558da17fdb03caf83ced2?x=x&version=1",
            "client": "website",
            "content": "<p>channels!!!!</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 101145547,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "lisa.neigut@gmail.com",
            "sender_full_name": "Lisa Neigut (she) (S'12)",
            "sender_id": 917,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "important topics when introducing go",
            "submessages": [],
            "timestamp": 1473961229,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/5ca882c23204bfc3a53558da17fdb03caf83ced2?x=x&version=1",
            "client": "website",
            "content": "<p>this is my favorite example of the power of Go's concurrency structs: <a href=\"https://talks.golang.org/2012/concurrency.slide#42\" target=\"_blank\" title=\"https://talks.golang.org/2012/concurrency.slide#42\">https://talks.golang.org/2012/concurrency.slide#42</a></p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 101145733,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "lisa.neigut@gmail.com",
            "sender_full_name": "Lisa Neigut (she) (S'12)",
            "sender_id": 917,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "important topics when introducing go",
            "submessages": [],
            "timestamp": 1473961589,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/5ca882c23204bfc3a53558da17fdb03caf83ced2?x=x&version=1",
            "client": "website",
            "content": "<p>it takes google's search and making it parallel in very few lines</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 101145747,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "lisa.neigut@gmail.com",
            "sender_full_name": "Lisa Neigut (she) (S'12)",
            "sender_id": 917,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "important topics when introducing go",
            "submessages": [],
            "timestamp": 1473961651,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/7d2ab014ebf55e99afffba1a3d92be8155754f0f?x=x&version=1",
            "client": "website",
            "content": "<p><code>go fix</code> is also cool, or seems cool to me as someone who's never used it.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 101151278,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "kamal@marhubi.com",
            "sender_full_name": "Kamal Marhubi (he) (m2'18)",
            "sender_id": 8090,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "important topics when introducing go",
            "submessages": [],
            "timestamp": 1473971201,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/a179bb8c3fc4ab0975954f57d47fa6c53a8c2dad?x=x&version=2",
            "client": "website",
            "content": "<p>Even though I rarely use them, goroutines were what really made the language stand out to me when it was first announced. Lots of languages are building out their concurrency stories, but I think few can still compare to the ease of <code>go doTheThing() // in a new logical thread w/o blocking this one</code>.</p>\n<p>Other things I really like[d] include[d]:</p>\n<ul>\n<li><code>go fmt</code> eliminates an entire class of bike-shedding debates.</li>\n<li>Upper vs lowercase names as a way to make things public vs private.</li>\n<li>Batteries-included standard library (probably the best of any language I've used).</li>\n</ul>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 101161121,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "jay@jayschwa.net",
            "sender_full_name": "Jay Weisskopf Petacat (W2'17)",
            "sender_id": 829,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "important topics when introducing go",
            "submessages": [],
            "timestamp": 1473993453,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/a179bb8c3fc4ab0975954f57d47fa6c53a8c2dad?x=x&version=2",
            "client": "website",
            "content": "<p>And while it can be both a blessing and a curse, there's something to be said for the WYSIWYG simplicity that the language forces upon you.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 101161170,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "jay@jayschwa.net",
            "sender_full_name": "Jay Weisskopf Petacat (W2'17)",
            "sender_id": 829,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "important topics when introducing go",
            "submessages": [],
            "timestamp": 1473993585,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/a179bb8c3fc4ab0975954f57d47fa6c53a8c2dad?x=x&version=2",
            "client": "website",
            "content": "<p>The Go tour is pretty good, so perhaps the main thrust of your talk should be getting people interested enough to have them go check out the tour afterwards.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 101161213,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "jay@jayschwa.net",
            "sender_full_name": "Jay Weisskopf Petacat (W2'17)",
            "sender_id": 829,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "important topics when introducing go",
            "submessages": [],
            "timestamp": 1473993689,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/391eb183c3474a15bf9ad0e87d3ff118?d=identicon&version=1",
            "client": "website",
            "content": "<p>std lib is also approachable for a language noobie. You can dig into the std lib and understand it, work it out. In the process you'll learn idiomatic patterns for solving problems in go.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 101162248,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "ghthor@gmail.com",
            "sender_full_name": "Will Drengwitz (he) (W1'17)",
            "sender_id": 7099,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "important topics when introducing go",
            "submessages": [],
            "timestamp": 1473996337,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/6527e077e84e20214d5373101ea15910d6b6f7a3?x=x&version=1",
            "client": "website",
            "content": "<p>Thanks for all the suggestions everyone! This is great! I think I'm going to take bits and pieces of everything, and show how Go's concurrency and simplicity is something that could (or more like could have :) help(ed) us with some of the issues we have had. Ideally that'll spark people to take the tour. Also, maybe I'll do a comparison of some of the python standard lib that we use, and show some Go equivalents.<br>\nAlso, I might be able to make a decent case for <span class=\"user-mention\" data-user-email=\"jdherg@gmail.com\">@John Hergenroeder (SP2'15)</span> to write part of his current project is Go, giving me more ins for practical things to talk about :)</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 101163081,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "steve@redlua.com",
            "sender_full_name": "Steven McCarthy (he) (SP2'15)",
            "sender_id": 7871,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "important topics when introducing go",
            "submessages": [],
            "timestamp": 1473998244,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/6527e077e84e20214d5373101ea15910d6b6f7a3?x=x&version=1",
            "client": "website",
            "content": "<p>But yeah, thanks again! Also I now need to check out <code>go fix</code>, and think of one of our issues that is similar to the google search example, so I can talk about channels with some specific familiar context. And maybe I can find a good way to talk about the simplicity of go in comparison to JavaScript, since they're on far ends of that keyword count :)</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 101163386,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "steve@redlua.com",
            "sender_full_name": "Steven McCarthy (he) (SP2'15)",
            "sender_id": 7871,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "important topics when introducing go",
            "submessages": [],
            "timestamp": 1473998840,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/391eb183c3474a15bf9ad0e87d3ff118?d=identicon&version=1",
            "client": "website",
            "content": "<p>Happy <img alt=\":goat:\" class=\"emoji\" src=\"/static/third/gemoji/images/emoji/goat.png\" title=\":goat:\"> phering!</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 101163726,
            "is_me_message": false,
            "last_edit_timestamp": 1473999567,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "ghthor@gmail.com",
            "sender_full_name": "Will Drengwitz (he) (W1'17)",
            "sender_id": 7099,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "important topics when introducing go",
            "submessages": [],
            "timestamp": 1473999560,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/4c062449003eb6630b6d5c576c59c6714a1dbca0?x=x&version=1",
            "client": "website",
            "content": "<p>I am new to go and trying to write a few programs. The <a href=\"https://golang.org/doc/install\" target=\"_blank\" title=\"https://golang.org/doc/install\">official documentation</a> suggests a certain on building and running go - i.e  </p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 101935346,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "satabdidas@gmail.com",
            "sender_full_name": "Satabdi Das (F1'16)",
            "sender_id": 100028,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "New to Go",
            "submessages": [],
            "timestamp": 1475787227,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/4c062449003eb6630b6d5c576c59c6714a1dbca0?x=x&version=1",
            "client": "website",
            "content": "<blockquote>\n<p>Then compile it with the go tool:</p>\n</blockquote>\n<p>$ go install <a href=\"http://github.com/user/hello\" target=\"_blank\" title=\"http://github.com/user/hello\">github.com/user/hello</a></p>\n<p>The command above will put an executable command named hello (or hello.exe) inside the bin directory of your workspace. Execute the command to see the greeting:</p>\n<p>$ $GOPATH/bin/hello<br>\nhello, world</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 101935349,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "satabdidas@gmail.com",
            "sender_full_name": "Satabdi Das (F1'16)",
            "sender_id": 100028,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "New to Go",
            "submessages": [],
            "timestamp": 1475787234,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/4c062449003eb6630b6d5c576c59c6714a1dbca0?x=x&version=1",
            "client": "website",
            "content": "<p>I am curious if that's the practice that most of the go developers follow!</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 101935397,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "satabdidas@gmail.com",
            "sender_full_name": "Satabdi Das (F1'16)",
            "sender_id": 100028,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "New to Go",
            "submessages": [],
            "timestamp": 1475787281,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/ab7ac8d0421135a2615ee68497efe480de3a293b?x=x&version=1",
            "client": "website",
            "content": "<p>not me <img alt=\":smile_cat:\" class=\"emoji\" src=\"/static/third/gemoji/images/emoji/smile_cat.png\" title=\":smile_cat:\"> </p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 101935414,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "fenimoreplove@gmail.com",
            "sender_full_name": "Fenimore Love (he) (F2'16)",
            "sender_id": 100182,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "New to Go",
            "submessages": [],
            "timestamp": 1475787314,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/ab7ac8d0421135a2615ee68497efe480de3a293b?x=x&version=1",
            "client": "website",
            "content": "<p>I rarely go install things, but it's nice to have that option</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 101935417,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "fenimoreplove@gmail.com",
            "sender_full_name": "Fenimore Love (he) (F2'16)",
            "sender_id": 100182,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "New to Go",
            "submessages": [],
            "timestamp": 1475787323,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/ab7ac8d0421135a2615ee68497efe480de3a293b?x=x&version=1",
            "client": "website",
            "content": "<p>rather I tend to just <code>go run hello.go</code></p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 101935421,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "fenimoreplove@gmail.com",
            "sender_full_name": "Fenimore Love (he) (F2'16)",
            "sender_id": 100182,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "New to Go",
            "submessages": [],
            "timestamp": 1475787335,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/ab7ac8d0421135a2615ee68497efe480de3a293b?x=x&version=1",
            "client": "website",
            "content": "<p>it <code>go build hello.go</code> and then runs the executable</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 101935424,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "fenimoreplove@gmail.com",
            "sender_full_name": "Fenimore Love (he) (F2'16)",
            "sender_id": 100182,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "New to Go",
            "submessages": [],
            "timestamp": 1475787345,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/4c062449003eb6630b6d5c576c59c6714a1dbca0?x=x&version=1",
            "client": "website",
            "content": "<p>I would love to know more about your development setup. Are you free now?</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 101935523,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "satabdidas@gmail.com",
            "sender_full_name": "Satabdi Das (F1'16)",
            "sender_id": 100028,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "New to Go",
            "submessages": [],
            "timestamp": 1475787511,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/70292d91a79cfd0fb1c8ad4f650480d631a56e9e?x=x&version=1",
            "client": "website",
            "content": "<p>I do <code>go install</code>, but will do <code>go run</code> if it's just a script</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 101966887,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "lawrence.trey@gmail.com",
            "sender_full_name": "Trey Lawrence (F1'16)",
            "sender_id": 911,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "New to Go",
            "submessages": [],
            "timestamp": 1475860080,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/044b59a59f2bfb736b3142db2cd025ca?d=identicon&version=1",
            "client": "website",
            "content": "<p>Two free tickets for GothamGo! <a href=\"https://community.recurse.com/t/gothamgo-tomorrow-two-free-tickets/2151\" target=\"_blank\" title=\"https://community.recurse.com/t/gothamgo-tomorrow-two-free-tickets/2151\">https://community.recurse.com/t/gothamgo-tomorrow-two-free-tickets/2151</a></p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 103586314,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "hi@filippo.io",
            "sender_full_name": "Filippo Valsorda (F2'17)",
            "sender_id": 2884,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "GothamGo",
            "submessages": [],
            "timestamp": 1479437961,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/044b59a59f2bfb736b3142db2cd025ca?d=identicon&version=1",
            "client": "website",
            "content": "<p>(Which is tomorrow!)</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 103586315,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "hi@filippo.io",
            "sender_full_name": "Filippo Valsorda (F2'17)",
            "sender_id": 2884,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "GothamGo",
            "submessages": [],
            "timestamp": 1479437971,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/044b59a59f2bfb736b3142db2cd025ca?d=identicon&version=1",
            "client": "website",
            "content": "<p>There's a copy of the short \"Go Introduction\" in the 455 library, in the C section since there's no Go section :'(</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 103712667,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "hi@filippo.io",
            "sender_full_name": "Filippo Valsorda (F2'17)",
            "sender_id": 2884,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "book",
            "submessages": [],
            "timestamp": 1479747259,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/0a35beaf5a354dafdf10494c0313e10fffc154fd?x=x&version=1",
            "client": "website",
            "content": "<p>I get that this is a rule, but I don't get why this is a rule. Given:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kd\">var</span> <span class=\"nx\">variable</span> <span class=\"kt\">string</span> <span class=\"p\">=</span> <span class=\"s\">&quot;a variable&quot;</span>\n<span class=\"kd\">const</span> <span class=\"nx\">constant</span> <span class=\"kt\">string</span> <span class=\"p\">=</span> <span class=\"s\">&quot;a constant&quot;</span>\n</pre></div>\n\n\n<p><code>p := &amp;variable</code> works just fine, but <code>p := &amp;constant</code> complains: <code>cannot take the address of constant</code></p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 104028635,
            "is_me_message": false,
            "last_edit_timestamp": 1480443841,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "maia.mcc@gmail.com",
            "sender_full_name": "Maia McCormick (she) (S2'14)",
            "sender_id": 6175,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "can't take the address of a constant?",
            "submessages": [],
            "timestamp": 1480443768,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/0a35beaf5a354dafdf10494c0313e10fffc154fd?x=x&version=1",
            "client": "website",
            "content": "<p>(er, where <code>constant</code> is the name of the thing. <code>const foobar string = \"foobar\"; &amp;foobar</code> --&gt; <code>cannot take the address of foobar</code>)</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 104028700,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "maia.mcc@gmail.com",
            "sender_full_name": "Maia McCormick (she) (S2'14)",
            "sender_id": 6175,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "can't take the address of a constant?",
            "submessages": [],
            "timestamp": 1480443877,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/0a35beaf5a354dafdf10494c0313e10fffc154fd?x=x&version=1",
            "client": "website",
            "content": "<p>Playground: <a href=\"https://play.golang.org/p/mjsFJK6S9c\" target=\"_blank\" title=\"https://play.golang.org/p/mjsFJK6S9c\">https://play.golang.org/p/mjsFJK6S9c</a></p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 104028709,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "maia.mcc@gmail.com",
            "sender_full_name": "Maia McCormick (she) (S2'14)",
            "sender_id": 6175,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "can't take the address of a constant?",
            "submessages": [],
            "timestamp": 1480443906,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/6527e077e84e20214d5373101ea15910d6b6f7a3?x=x&version=1",
            "client": "website",
            "content": "<p>That's super neat and super weird. My minute or two of duckduckgo'ing didn't find me anything, but I did play around with the playground you sent. It seems the only way to have a pointer to the same thing as a constant is to copy it into a variable. Which means that you're still not actually getting the same thing as the constant :\\<br>\nBut still this is neat. I'm curious as to why it's the case.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 104037572,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "steve@redlua.com",
            "sender_full_name": "Steven McCarthy (he) (SP2'15)",
            "sender_id": 7871,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "can't take the address of a constant?",
            "submessages": [],
            "timestamp": 1480457070,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/4c062449003eb6630b6d5c576c59c6714a1dbca0?x=x&version=1",
            "client": "website",
            "content": "<p>I can make a guess! If go allows you to take a pointer to a constant, then you can change the value of  the constant.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 104037640,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "satabdidas@gmail.com",
            "sender_full_name": "Satabdi Das (F1'16)",
            "sender_id": 100028,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "can't take the address of a constant?",
            "submessages": [],
            "timestamp": 1480457191,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/6527e077e84e20214d5373101ea15910d6b6f7a3?x=x&version=1",
            "client": "website",
            "content": "<p>That seems totally reasonable. Or maybe as an optimization, a constant <em>is</em> just a automatically dereferencing pointer to it's value, as that value's not allowed to change anyway? So getting a pointer to it wouldn't make sense? Though maybe that's silly. I have no idea <img alt=\":smiley_cat:\" class=\"emoji\" src=\"/static/third/gemoji/images/emoji/smiley_cat.png\" title=\":smiley_cat:\"> </p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 104048477,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "steve@redlua.com",
            "sender_full_name": "Steven McCarthy (he) (SP2'15)",
            "sender_id": 7871,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "can't take the address of a constant?",
            "submessages": [],
            "timestamp": 1480480549,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/f6bd929465d6d225def8062d5a9d3f3f?d=identicon&version=1",
            "client": "website",
            "content": "<p>From the machine's standpoint, there's no need for the concept of \"the address of a constant value\" because there are instructions that can take a constant and put them directly into a register. By not allowing you to take the address of a constant value, the compiler can avoid having to squirrel away the value in memory.</p>\n<p>By contrast, C++ can't do that optimization (I think? I'm not super familiar with the C++ standard). Here's a C++ example where a constant still get stored in memory despite it being totally unnecessary:</p>\n<div class=\"codehilite\"><pre><span></span>const int foo() {\n  const int someNumber = 3;\n  const int x = someNumber * someNumber;\n  return x;\n}\n</pre></div>\n\n\n<p>Resulting assembly (clang 3.9.0) , ignore function prologue/epilogue:</p>\n<div class=\"codehilite\"><pre><span></span>        mov     eax, 9\n        mov     dword ptr [rbp - 4], 3\n        mov     dword ptr [rbp - 8], 9\n</pre></div>\n\n\n<p>The first instruction puts 9 into the register that's used for the return value (the syntax is that the thing on the right gets stored in the thing on the left). That's all that's needed from the machine code level, but then there are these other two instructions that store 3 and 9 into the address of the constant to preserve the idea that variables (including constants) have addresses.</p>\n<p>This example is maybe slightly misleading because you could declare it <code>static</code> to avoid the run-time initialization, but the compile-time initialized version would still live somewhere in memory; it just wouldn't get initialized when the function is called.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 104059203,
            "is_me_message": false,
            "last_edit_timestamp": 1480518214,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "danluu@gmail.com",
            "sender_full_name": "Dan Luu (W'13)",
            "sender_id": 820,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "can't take the address of a constant?",
            "submessages": [],
            "timestamp": 1480507705,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/4c062449003eb6630b6d5c576c59c6714a1dbca0?x=x&version=1",
            "client": "website",
            "content": "<blockquote>\n<p>From the machine's standpoint, there's no need for the concept of \"the address of a constant value\" because there are instructions that can take a constant and put them directly into a register. </p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-email=\"danluu@gmail.com\">@Dan Luu (W'13)</span> I guess, for composite data types it makes sense to put them in memory?<br>\nBut I like Go's approach where it doesn't give any access to the memory where you will never need it</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 104063929,
            "is_me_message": false,
            "last_edit_timestamp": 1480518253,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "satabdidas@gmail.com",
            "sender_full_name": "Satabdi Das (F1'16)",
            "sender_id": 100028,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "can't take the address of a constant?",
            "submessages": [],
            "timestamp": 1480518239,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/0a35beaf5a354dafdf10494c0313e10fffc154fd?x=x&version=1",
            "client": "website",
            "content": "<p>because reasons, i want to call flag.parse() from multiple different places in my code. is this safe? Or will there be weird and scary side effects?</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 104669712,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "maia.mcc@gmail.com",
            "sender_full_name": "Maia McCormick (she) (S2'14)",
            "sender_id": 6175,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "is flag.parse() safe to call 2x?",
            "submessages": [],
            "timestamp": 1481832958,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/6527e077e84e20214d5373101ea15910d6b6f7a3?x=x&version=1",
            "client": "website",
            "content": "<p>So it looks like <code>flag.Parse()</code> eventually comes down to calling <a href=\"https://golang.org/src/flag/flag.go#L833\" target=\"_blank\" title=\"https://golang.org/src/flag/flag.go#L833\"><code>flag.parseOne()</code></a>, which is long and I haven't read it all yet. But it doesn't appear to have any negative side effects. At least I've tried doing multiple parses and defining flags after parsing without issue. Though that's all just in a simple main function.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 104685811,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "steve@redlua.com",
            "sender_full_name": "Steven McCarthy (he) (SP2'15)",
            "sender_id": 7871,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "is flag.parse() safe to call 2x?",
            "submessages": [],
            "timestamp": 1481868190,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/6527e077e84e20214d5373101ea15910d6b6f7a3?x=x&version=1",
            "client": "website",
            "content": "<p>After playing around a tad more, it looks like any flags defined <em>after</em> <code>flag.Parse()</code> is called can't be used. I get a \"flag provided but not defined\" error. However, it still looks like calling <code>flag.Parse()</code> twice isn't an issue itself, unless you're defining flags after it's been called once.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 104706838,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "steve@redlua.com",
            "sender_full_name": "Steven McCarthy (he) (SP2'15)",
            "sender_id": 7871,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "is flag.parse() safe to call 2x?",
            "submessages": [],
            "timestamp": 1481915476,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/57f94408b42b82a5e20157003baa2071?d=identicon&version=1",
            "client": "website",
            "content": "<p>Hi all - i just finished a small project in golang and was wondering if anyone could give me some tips on how to improve the code. I started learning go a couple of months ago and I'm pretty comfortable with the syntax and standard libraries now, but I'm still kind of lost as to how gophers prefer to structure code and what exactly \"good code\" is in go. I'd really appreciate any tips I can get</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 106190734,
            "is_me_message": false,
            "last_edit_timestamp": 1485201004,
            "reactions": [
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "+1",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "stanley@zheng.nyc",
                        "full_name": "Stanley Zheng (they) (W1'19)",
                        "id": 100315
                    },
                    "user_id": 100315
                }
            ],
            "recipient_id": 22624,
            "sender_email": "harialexandre@gmail.com",
            "sender_full_name": "Harry Alexander (he) (SP2'20)",
            "sender_id": 100341,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "code review?",
            "submessages": [],
            "timestamp": 1485200940,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/57f94408b42b82a5e20157003baa2071?d=identicon&version=1",
            "client": "website",
            "content": "<p>Here's the link to the project - <a href=\"https://github.com/harialexandre/terminal-news\" target=\"_blank\" title=\"https://github.com/harialexandre/terminal-news\">https://github.com/harialexandre/terminal-news</a></p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 106190747,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "harialexandre@gmail.com",
            "sender_full_name": "Harry Alexander (he) (SP2'20)",
            "sender_id": 100341,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "code review?",
            "submessages": [],
            "timestamp": 1485200965,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/57f94408b42b82a5e20157003baa2071?d=identicon&version=1",
            "client": "website",
            "content": "<p>Thanks!</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 106190750,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "harialexandre@gmail.com",
            "sender_full_name": "Harry Alexander (he) (SP2'20)",
            "sender_id": 100341,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "code review?",
            "submessages": [],
            "timestamp": 1485200973,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/a179bb8c3fc4ab0975954f57d47fa6c53a8c2dad?x=x&version=2",
            "client": "website",
            "content": "<p>I'll take a look. Where do you want comments?</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 106190883,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "jay@jayschwa.net",
            "sender_full_name": "Jay Weisskopf Petacat (W2'17)",
            "sender_id": 829,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "code review?",
            "submessages": [],
            "timestamp": 1485201133,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/57f94408b42b82a5e20157003baa2071?d=identicon&version=1",
            "client": "website",
            "content": "<p>Thanks a lot!</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 106190892,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "harialexandre@gmail.com",
            "sender_full_name": "Harry Alexander (he) (SP2'20)",
            "sender_id": 100341,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "code review?",
            "submessages": [],
            "timestamp": 1485201172,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/57f94408b42b82a5e20157003baa2071?d=identicon&version=1",
            "client": "website",
            "content": "<p>I can share the repo with you and you can open a pr with any comments if that's okay</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 106190901,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "harialexandre@gmail.com",
            "sender_full_name": "Harry Alexander (he) (SP2'20)",
            "sender_id": 100341,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "code review?",
            "submessages": [],
            "timestamp": 1485201198,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/a179bb8c3fc4ab0975954f57d47fa6c53a8c2dad?x=x&version=2",
            "client": "website",
            "content": "<p>Might be overkill. I'll see how many comments I come up with first.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 106191034,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "jay@jayschwa.net",
            "sender_full_name": "Jay Weisskopf Petacat (W2'17)",
            "sender_id": 829,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "code review?",
            "submessages": [],
            "timestamp": 1485201364,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/57f94408b42b82a5e20157003baa2071?d=identicon&version=1",
            "client": "website",
            "content": "<p>Sure - pasting them on here also works</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 106191057,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "harialexandre@gmail.com",
            "sender_full_name": "Harry Alexander (he) (SP2'20)",
            "sender_id": 100341,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "code review?",
            "submessages": [],
            "timestamp": 1485201415,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/57f94408b42b82a5e20157003baa2071?d=identicon&version=1",
            "client": "website",
            "content": "<p>Thanks again</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 106191065,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "harialexandre@gmail.com",
            "sender_full_name": "Harry Alexander (he) (SP2'20)",
            "sender_id": 100341,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "code review?",
            "submessages": [],
            "timestamp": 1485201427,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/a179bb8c3fc4ab0975954f57d47fa6c53a8c2dad?x=x&version=2",
            "client": "website",
            "content": "<p>For starters, you should add a README explaining what it does and how to use it. Even better if you can make it work with <a href=\"http://godoc.org\" target=\"_blank\" title=\"http://godoc.org\">godoc.org</a>.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 106191138,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "jay@jayschwa.net",
            "sender_full_name": "Jay Weisskopf Petacat (W2'17)",
            "sender_id": 829,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "code review?",
            "submessages": [],
            "timestamp": 1485201527,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/57f94408b42b82a5e20157003baa2071?d=identicon&version=1",
            "client": "website",
            "content": "<p>Duely noted</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 106191157,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "harialexandre@gmail.com",
            "sender_full_name": "Harry Alexander (he) (SP2'20)",
            "sender_id": 100341,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "code review?",
            "submessages": [],
            "timestamp": 1485201576,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/70201dad8f30b376c8e9f8ede010e43b63266850?x=x&version=6",
            "client": "website",
            "content": "<p>.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 106191593,
            "is_me_message": false,
            "last_edit_timestamp": 1605723621,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "stanley@zheng.nyc",
            "sender_full_name": "Stanley Zheng (they) (W1'19)",
            "sender_id": 100315,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "code review?",
            "submessages": [],
            "timestamp": 1485202093,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/57f94408b42b82a5e20157003baa2071?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"stanley@stanzheng.com\">@Stanley Zheng (W1'16)</span> Thanks! Yeah i took your advice and just opened the default browser using the os.Cmd. Works like a charm</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 106192309,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "harialexandre@gmail.com",
            "sender_full_name": "Harry Alexander (he) (SP2'20)",
            "sender_id": 100341,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "code review?",
            "submessages": [],
            "timestamp": 1485203260,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/57f94408b42b82a5e20157003baa2071?d=identicon&version=1",
            "client": "website",
            "content": "<p>I'm not familiar with what you mean by Github inlining, unfortunately. Is that a tool o GH? <span class=\"user-mention\" data-user-email=\"stanley@stanzheng.com\">@Stanley Zheng (W1'16)</span> </p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 106192362,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "harialexandre@gmail.com",
            "sender_full_name": "Harry Alexander (he) (SP2'20)",
            "sender_id": 100341,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "code review?",
            "submessages": [],
            "timestamp": 1485203298,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/a179bb8c3fc4ab0975954f57d47fa6c53a8c2dad?x=x&version=2",
            "client": "website",
            "content": "<p>I'm seeing strange indentation. Has it been put through <code>go fmt</code>? <a href=\"https://github.com/harialexandre/terminal-news/blob/master/src/fetcher/fetcher.go#L17-L22\" target=\"_blank\" title=\"https://github.com/harialexandre/terminal-news/blob/master/src/fetcher/fetcher.go#L17-L22\">https://github.com/harialexandre/terminal-news/blob/master/src/fetcher/fetcher.go#L17-L22</a></p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 106192539,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "jay@jayschwa.net",
            "sender_full_name": "Jay Weisskopf Petacat (W2'17)",
            "sender_id": 829,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "code review?",
            "submessages": [],
            "timestamp": 1485203547,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/57f94408b42b82a5e20157003baa2071?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"jay@jayschwa.net\">@Jay Weisskopf (W2'17)</span> Nope - didn't even think to do that. Thanks for the heads up</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 106192555,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "harialexandre@gmail.com",
            "sender_full_name": "Harry Alexander (he) (SP2'20)",
            "sender_id": 100341,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "code review?",
            "submessages": [],
            "timestamp": 1485203605,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/a179bb8c3fc4ab0975954f57d47fa6c53a8c2dad?x=x&version=2",
            "client": "website",
            "content": "<p>Most popular text editors have Go plugins/extensions that will auto-fmt files on save, which is convenient.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 106192604,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "jay@jayschwa.net",
            "sender_full_name": "Jay Weisskopf Petacat (W2'17)",
            "sender_id": 829,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "code review?",
            "submessages": [],
            "timestamp": 1485203652,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/57f94408b42b82a5e20157003baa2071?d=identicon&version=1",
            "client": "website",
            "content": "<p>I've been holding up stepping up my tooling game, not just in go, but keep procra</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 106192625,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "harialexandre@gmail.com",
            "sender_full_name": "Harry Alexander (he) (SP2'20)",
            "sender_id": 100341,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "code review?",
            "submessages": [],
            "timestamp": 1485203737,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/57f94408b42b82a5e20157003baa2071?d=identicon&version=1",
            "client": "website",
            "content": "<p>stunting and am now stupidly resolved to vim with no plugins</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 106192669,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "harialexandre@gmail.com",
            "sender_full_name": "Harry Alexander (he) (SP2'20)",
            "sender_id": 100341,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "code review?",
            "submessages": [],
            "timestamp": 1485203765,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/57f94408b42b82a5e20157003baa2071?d=identicon&version=1",
            "client": "website",
            "content": "<p>Today might just be the day</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 106192674,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "harialexandre@gmail.com",
            "sender_full_name": "Harry Alexander (he) (SP2'20)",
            "sender_id": 100341,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "code review?",
            "submessages": [],
            "timestamp": 1485203800,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/a179bb8c3fc4ab0975954f57d47fa6c53a8c2dad?x=x&version=2",
            "client": "website",
            "content": "<p>I don't think <code>types</code> should be a separate package since it can't really be used in a standalone manner. It can remain a separate file, but live in package main.</p>\n<p>I'm still trying to decide if the same applies to the other two packages.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 106192967,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "jay@jayschwa.net",
            "sender_full_name": "Jay Weisskopf Petacat (W2'17)",
            "sender_id": 829,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "code review?",
            "submessages": [],
            "timestamp": 1485204261,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/a179bb8c3fc4ab0975954f57d47fa6c53a8c2dad?x=x&version=2",
            "client": "website",
            "content": "<p>The <code>runCommand</code> helper function doesn't appear to be saving you anything other than the <code>Run()</code> at the end. You'd trim lines of code by removing it. <a href=\"https://github.com/harialexandre/terminal-news/blob/master/src/types/item.go#L36-L39\" target=\"_blank\" title=\"https://github.com/harialexandre/terminal-news/blob/master/src/types/item.go#L36-L39\">https://github.com/harialexandre/terminal-news/blob/master/src/types/item.go#L36-L39</a></p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 106193072,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "jay@jayschwa.net",
            "sender_full_name": "Jay Weisskopf Petacat (W2'17)",
            "sender_id": 829,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "code review?",
            "submessages": [],
            "timestamp": 1485204436,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/a179bb8c3fc4ab0975954f57d47fa6c53a8c2dad?x=x&version=2",
            "client": "website",
            "content": "<p>I have a few suggestions for this snippet: <a href=\"https://github.com/harialexandre/terminal-news/blob/master/src/fetcher/fetcher.go#L20-L21\" target=\"_blank\" title=\"https://github.com/harialexandre/terminal-news/blob/master/src/fetcher/fetcher.go#L20-L21\">https://github.com/harialexandre/terminal-news/blob/master/src/fetcher/fetcher.go#L20-L21</a></p>\n<p>1. Declare-and-initialize variables<br>\n2. Move the Get out of the if statement<br>\n3. Return nil slice on error so that it's not confused for success with zero results</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"nx\">resp</span><span class=\"p\">,</span> <span class=\"nx\">err</span> <span class=\"o\">:=</span> <span class=\"nx\">http</span><span class=\"p\">.</span><span class=\"nx\">Get</span><span class=\"p\">(</span><span class=\"nx\">ApiUrl</span> <span class=\"o\">+</span> <span class=\"nx\">category</span> <span class=\"o\">+</span> <span class=\"s\">&quot;stories.json?print=pretty&quot;</span><span class=\"p\">)</span>\n<span class=\"k\">if</span> <span class=\"nx\">err</span> <span class=\"o\">!=</span> <span class=\"kc\">nil</span> <span class=\"p\">{</span>\n    <span class=\"k\">return</span> <span class=\"kc\">nil</span><span class=\"p\">,</span> <span class=\"nx\">err</span>\n<span class=\"p\">}</span>\n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 106193352,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "jay@jayschwa.net",
            "sender_full_name": "Jay Weisskopf Petacat (W2'17)",
            "sender_id": 829,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "code review?",
            "submessages": [],
            "timestamp": 1485204858,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/a179bb8c3fc4ab0975954f57d47fa6c53a8c2dad?x=x&version=2",
            "client": "website",
            "content": "<p><a href=\"https://github.com/harialexandre/terminal-news/blob/master/src/fetcher/fetcher.go#L35\" target=\"_blank\" title=\"https://github.com/harialexandre/terminal-news/blob/master/src/fetcher/fetcher.go#L35\">https://github.com/harialexandre/terminal-news/blob/master/src/fetcher/fetcher.go#L35</a><br>\nSince it is known that <code>len(ids) == len(items)</code>, I suggest setting the capacity of the items slice so it does not need to be resized as it grows. E.g. <code>items := make([]types.Item, 0, len(ids))</code></p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 106193522,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "jay@jayschwa.net",
            "sender_full_name": "Jay Weisskopf Petacat (W2'17)",
            "sender_id": 829,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "code review?",
            "submessages": [],
            "timestamp": 1485205180,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/a179bb8c3fc4ab0975954f57d47fa6c53a8c2dad?x=x&version=2",
            "client": "website",
            "content": "<p>The zero length check and branch can be removed and the effect will be the same since the for loop will not iterate. <a href=\"https://github.com/harialexandre/terminal-news/blob/master/src/fetcher/fetcher.go#L37-L39\" target=\"_blank\" title=\"https://github.com/harialexandre/terminal-news/blob/master/src/fetcher/fetcher.go#L37-L39\">https://github.com/harialexandre/terminal-news/blob/master/src/fetcher/fetcher.go#L37-L39</a></p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 106193588,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "jay@jayschwa.net",
            "sender_full_name": "Jay Weisskopf Petacat (W2'17)",
            "sender_id": 829,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "code review?",
            "submessages": [],
            "timestamp": 1485205258,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/a179bb8c3fc4ab0975954f57d47fa6c53a8c2dad?x=x&version=2",
            "client": "website",
            "content": "<p>It would be nice if the top-level command switch could be compacted somehow. E.g.</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">case</span> <span class=\"s\">&quot;top&quot;</span><span class=\"p\">,</span> <span class=\"s\">&quot;new&quot;</span><span class=\"p\">,</span> <span class=\"s\">&quot;best&quot;</span><span class=\"p\">,</span> <span class=\"s\">&quot;ask&quot;</span><span class=\"p\">,</span> <span class=\"s\">&quot;show&quot;</span><span class=\"p\">:</span>\n    <span class=\"nx\">Foo</span><span class=\"p\">()</span>\n<span class=\"k\">case</span> <span class=\"s\">&quot;next&quot;</span><span class=\"p\">:</span>\n    <span class=\"nx\">Bar</span><span class=\"p\">(</span><span class=\"nx\">storyType</span><span class=\"p\">)</span>\n<span class=\"k\">case</span> <span class=\"s\">&quot;prev&quot;</span><span class=\"p\">:</span>\n    <span class=\"nx\">Baz</span><span class=\"p\">()</span>\n    <span class=\"nx\">Bam</span><span class=\"p\">()</span>\n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 106194007,
            "is_me_message": false,
            "last_edit_timestamp": 1485205855,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "jay@jayschwa.net",
            "sender_full_name": "Jay Weisskopf Petacat (W2'17)",
            "sender_id": 829,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "code review?",
            "submessages": [],
            "timestamp": 1485205842,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/57f94408b42b82a5e20157003baa2071?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"jay@jayschwa.net\">@Jay Weisskopf (W2'17)</span>  Awesome! Thanks for the feedback - I've already implemented most of the changes - gonna finish the rest this morning. Thanks again!</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 106229252,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "harialexandre@gmail.com",
            "sender_full_name": "Harry Alexander (he) (SP2'20)",
            "sender_id": 100341,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "code review?",
            "submessages": [],
            "timestamp": 1485278711,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/3f4785d95e43ecfb2f20d49e6ec824dc?d=identicon&version=1",
            "client": "website",
            "content": "<p>Thanks for asking for review, <span class=\"user-mention\" data-user-email=\"harialexandre@gmail.com\">@Hari Alexandre (W1'16)</span>, and for giving such good feedback, <span class=\"user-mention\" data-user-email=\"jay@jayschwa.net\">@Jay Weisskopf (W2'17)</span>! I love seeing code review on Zulip :)</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 106229383,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "+1",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "steve@redlua.com",
                        "full_name": "Steven McCarthy (he) (SP2'15)",
                        "id": 7871
                    },
                    "user_id": 7871
                },
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "+1",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "harialexandre@gmail.com",
                        "full_name": "Harry Alexander (he) (SP2'20)",
                        "id": 100341
                    },
                    "user_id": 100341
                },
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "+1",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "stanley@zheng.nyc",
                        "full_name": "Stanley Zheng (they) (W1'19)",
                        "id": 100315
                    },
                    "user_id": 100315
                }
            ],
            "recipient_id": 22624,
            "sender_email": "nick@recurse.com",
            "sender_full_name": "Nick Bergson-Shilcock (he)",
            "sender_id": 811,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "code review?",
            "submessages": [],
            "timestamp": 1485278933,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/70201dad8f30b376c8e9f8ede010e43b63266850?x=x&version=6",
            "client": "website",
            "content": "<p>.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 106229537,
            "is_me_message": false,
            "last_edit_timestamp": 1605723625,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "stanley@zheng.nyc",
            "sender_full_name": "Stanley Zheng (they) (W1'19)",
            "sender_id": 100315,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "code review?",
            "submessages": [],
            "timestamp": 1485279231,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/57f94408b42b82a5e20157003baa2071?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"stanley@stanzheng.com\">@Stanley Zheng (W1'16)</span> <img alt=\":blush:\" class=\"emoji\" src=\"/static/generated/emoji/images/emoji/blush.png\" title=\":blush:\"></p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 106229594,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "harialexandre@gmail.com",
            "sender_full_name": "Harry Alexander (he) (SP2'20)",
            "sender_id": 100341,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "code review?",
            "submessages": [],
            "timestamp": 1485279326,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/6527e077e84e20214d5373101ea15910d6b6f7a3?x=x&version=1",
            "client": "website",
            "content": "<p>So I know this is definitely premature optimization, but I'm wondering how to atomically set a number to 0 in Go. My current thought is that, so long as I only ever update the number atomically, that something like this might work:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"nx\">atomic</span><span class=\"p\">.</span><span class=\"nx\">AddInt64</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"nx\">i64</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"nx\">atomic</span><span class=\"p\">.</span><span class=\"nx\">LoadInt64</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"nx\">i64</span><span class=\"p\">))</span>\n</pre></div>\n\n\n<p><a href=\"https://play.golang.org/p/GGFw3z0y-I\" target=\"_blank\" title=\"https://play.golang.org/p/GGFw3z0y-I\">It seems to work in the playground</a>, but I'm wondering if there's anything else I should be considering.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 108046586,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "steve@redlua.com",
            "sender_full_name": "Steven McCarthy (he) (SP2'15)",
            "sender_id": 7871,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "Atomically setting a number to 0",
            "submessages": [],
            "timestamp": 1488991348,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/5d46121e9a899e151cfcd0e59aa9e9f8a78989e8?x=x&version=1",
            "client": "website",
            "content": "<p>I think you want <code>StoreInt64</code></p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 108046611,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "aditya@adityamukerjee.net",
            "sender_full_name": "Aditya Mukerjee (he) (SP1'15)",
            "sender_id": 7644,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "Atomically setting a number to 0",
            "submessages": [],
            "timestamp": 1488991436,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/5d46121e9a899e151cfcd0e59aa9e9f8a78989e8?x=x&version=1",
            "client": "website",
            "content": "<p>Subtracting the value won't necessarily work, because IIRC the atomicity guarantee doesn't apply to the entire line; it's only for the operation itself</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 108046658,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "aditya@adityamukerjee.net",
            "sender_full_name": "Aditya Mukerjee (he) (SP1'15)",
            "sender_id": 7644,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "Atomically setting a number to 0",
            "submessages": [],
            "timestamp": 1488991468,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/5d46121e9a899e151cfcd0e59aa9e9f8a78989e8?x=x&version=1",
            "client": "website",
            "content": "<p>so what you have is equivalent to</p>\n<div class=\"codehilite\"><pre><span></span>a := -1 * atomic.LoadInt64(&amp;i64)\natomic.AddInt64(&amp;i64, a)\n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 108046666,
            "is_me_message": false,
            "last_edit_timestamp": 1488991526,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "aditya@adityamukerjee.net",
            "sender_full_name": "Aditya Mukerjee (he) (SP1'15)",
            "sender_id": 7644,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "Atomically setting a number to 0",
            "submessages": [],
            "timestamp": 1488991502,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/6527e077e84e20214d5373101ea15910d6b6f7a3?x=x&version=1",
            "client": "website",
            "content": "<p>Ah, so I do! I missed that when scanning the atomic package. Thanks <span class=\"user-mention\" data-user-email=\"aditya@adityamukerjee.net\" data-user-id=\"7644\">@Aditya Mukerjee (SP1'15)</span>!</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 108046748,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "steve@redlua.com",
            "sender_full_name": "Steven McCarthy (he) (SP2'15)",
            "sender_id": 7871,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "Atomically setting a number to 0",
            "submessages": [],
            "timestamp": 1488991665,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/57f94408b42b82a5e20157003baa2071?d=identicon&version=1",
            "client": "website",
            "content": "<p>HI all </p>\n<p>I've been working on a web service and have basically had to write roughly the same CRUD database interaction functions for every model. I was just refactoring it today when I started to wonder if there is a standard Golang way of doing this sort of thing (I'm using sqlx)?</p>\n<p>While I'm at it, I'd like to solicit any links to common Golang abstractions and basically anything that enlightens one on the Go way of solving a problem.</p>\n<p>Much appreciated as usual</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 108576558,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "harialexandre@gmail.com",
            "sender_full_name": "Harry Alexander (he) (SP2'20)",
            "sender_id": 100341,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "Collection of gopher approved abstractions?",
            "submessages": [],
            "timestamp": 1490058998,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/0a35beaf5a354dafdf10494c0313e10fffc154fd?x=x&version=1",
            "client": "website",
            "content": "<p>is there a general go-ish preference between:<br>\n1) <code>var myBool bool</code> and<br>\n2) <code>myBool := false</code> ?</p>\n<p>(if yes, is it different between types? <code>myBool := false</code> vs <code>myStr := \"\"</code> vs <code>myInt := 0</code>?)</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 109488232,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "maia.mcc@gmail.com",
            "sender_full_name": "Maia McCormick (she) (S2'14)",
            "sender_id": 6175,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "variable declaration and zero-value initialization",
            "submessages": [],
            "timestamp": 1491943291,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/2de9901913d2f414b7b174d2c2c69a88?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"maia.mcc@gmail.com\" data-user-id=\"6175\">@Maia McCormick (S'14)</span> I didn't have a strong opinion so thought it'd be fun to try to answer these questions experimentally :)</p>\n<div class=\"codehilite\"><pre><span></span> \u03bb cd ~/go/src\n\n \u03bb egrep -r &quot;var (\\w+) bool$&quot; **/*.go | wc -l\n963\n \u03bb egrep -r &quot;(\\w+) := (false|true)$&quot; **/*.go | wc -l\n944\n\n \u03bb egrep -r &quot;var (\\w+) string$&quot; **/*.go | wc -l\n1131\n \u03bb egrep -r &#39;(\\w+) := &quot;&quot;$&#39; **/*.go | wc -l\n404\n\n \u03bb egrep -r &quot;var (\\w+) int$&quot; **/*.go | wc -l\n2581\n \u03bb egrep -r &quot;\\S(\\w+) := 0&quot; **/*.go | wc -l                                                                                                                              go/src caius\n962\n</pre></div>\n\n\n<p>Some regexps could be bad, etc.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 109488708,
            "is_me_message": false,
            "last_edit_timestamp": 1491944110,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "chris@printf.net",
            "sender_full_name": "Chris Ball (SP2'15)",
            "sender_id": 7857,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "variable declaration and zero-value initialization",
            "submessages": [],
            "timestamp": 1491944101,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/a179bb8c3fc4ab0975954f57d47fa6c53a8c2dad?x=x&version=2",
            "client": "website",
            "content": "<p>I haven't seen a strong preference one way or the other. I generally declare and initialize if I want the starting value to be explicit, and use <code>var</code> if the starting value doesn't matter, the initial value is expensive, or I want the type to stand out.</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"nx\">s</span> <span class=\"o\">:=</span> <span class=\"s\">&quot;default&quot;</span>\n<span class=\"k\">if</span> <span class=\"nx\">x</span> <span class=\"p\">&gt;</span> <span class=\"nx\">y</span> <span class=\"p\">{</span>\n    <span class=\"nx\">s</span> <span class=\"p\">=</span> <span class=\"s\">&quot;customized&quot;</span>\n<span class=\"p\">}</span>\n</pre></div>\n\n\n<p>vs.</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kd\">var</span> <span class=\"nx\">s</span> <span class=\"kt\">string</span> <span class=\"c1\">// starting value doesn&#39;t matter</span>\n<span class=\"k\">if</span> <span class=\"nx\">useThis</span> <span class=\"p\">{</span>\n    <span class=\"nx\">s</span> <span class=\"p\">=</span> <span class=\"nx\">getThis</span><span class=\"p\">()</span>\n<span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"nx\">useThat</span> <span class=\"p\">{</span>\n    <span class=\"nx\">s</span> <span class=\"p\">=</span> <span class=\"nx\">getThat</span><span class=\"p\">()</span>\n<span class=\"p\">}</span>\n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 109489647,
            "is_me_message": false,
            "last_edit_timestamp": 1491945626,
            "reactions": [
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "+1",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "maia.mcc@gmail.com",
                        "full_name": "Maia McCormick (she) (S2'14)",
                        "id": 6175
                    },
                    "user_id": 6175
                },
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "+1",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "kgibilterra@gmail.com",
                        "full_name": "Kaylyn Gibilterra (S2'16)",
                        "id": 9508
                    },
                    "user_id": 9508
                }
            ],
            "recipient_id": 22624,
            "sender_email": "jay@jayschwa.net",
            "sender_full_name": "Jay Weisskopf Petacat (W2'17)",
            "sender_id": 829,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "variable declaration and zero-value initialization",
            "submessages": [],
            "timestamp": 1491945566,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/7bfb2e1e56050666b3e5973ea7df6ee4?d=identicon&version=1",
            "client": "website",
            "content": "<p>I wrote my first program in Go over the past couple weeks. Would someone with Go experience be willing to give me some feedback? It lives at <a href=\"https://github.com/vbrown608/cryptolog\" target=\"_blank\" title=\"https://github.com/vbrown608/cryptolog\">https://github.com/vbrown608/cryptolog</a>. Any comments would be greatly appreciated!</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 109723673,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "vivian.brown@gmail.com",
            "sender_full_name": "Vivian Brown (SP2'17)",
            "sender_id": 100931,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "Request for code review",
            "submessages": [],
            "timestamp": 1492459898,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/a604f6425b41d724539755eb2c457f29536f16d9?x=x&version=2",
            "client": "website",
            "content": "<p>paging <span class=\"user-mention\" data-user-email=\"aditya@adityamukerjee.net\" data-user-id=\"7644\">@Aditya Mukerjee (SP1'15)</span> <img alt=\":point_up:\" class=\"emoji\" src=\"/static/generated/emoji/images/emoji/unicode/261d.png\" title=\":point_up:\"> <img alt=\":smile_cat:\" class=\"emoji\" src=\"/static/generated/emoji/images/emoji/unicode/1f638.png\" title=\":smile_cat:\"></p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 109724095,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "sonali@recurse.com",
            "sender_full_name": "Sonali Sridhar",
            "sender_id": 812,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "Request for code review",
            "submessages": [],
            "timestamp": 1492460528,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4aed3eb291895487e95cc2850cb92391?d=identicon&version=1",
            "client": "website",
            "content": "<p>nice, <span class=\"user-mention\" data-user-email=\"vivian.brown@gmail.com\" data-user-id=\"100931\">@Vivian Brown (SP2'17)</span>! If I read this correctly, there's a potential race condition in <code>generateSalt</code>- it overwrites that global byte array without locking, so if a log line comes in while <code>rand.Read</code> is running, you end up using an incomplete salt.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 109742388,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "asf@boinkor.net",
            "sender_full_name": "Andreas Fuchs (he/they)",
            "sender_id": 9362,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "Request for code review",
            "submessages": [],
            "timestamp": 1492497840,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4aed3eb291895487e95cc2850cb92391?d=identicon&version=1",
            "client": "website",
            "content": "<p>That's the one not-minor nitpick that I see: You could use a mutex to avoid that race (I don't think channel-based communication will help here much)</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 109742428,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "asf@boinkor.net",
            "sender_full_name": "Andreas Fuchs (he/they)",
            "sender_id": 9362,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "Request for code review",
            "submessages": [],
            "timestamp": 1492497900,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4aed3eb291895487e95cc2850cb92391?d=identicon&version=1",
            "client": "website",
            "content": "<p>Other minor things: go's <code>flag</code> library has <code>StringVar</code> and <code>BoolVar</code>functions that you could pass the addresses of global variables into (this seems to be common go practice, as long as they're not exported I guess). Would save you the many <code>*</code>s referencing them.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 109742475,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "asf@boinkor.net",
            "sender_full_name": "Andreas Fuchs (he/they)",
            "sender_id": 9362,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "Request for code review",
            "submessages": [],
            "timestamp": 1492498021,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4aed3eb291895487e95cc2850cb92391?d=identicon&version=1",
            "client": "website",
            "content": "<p>Also, instead of the <code>Sleep(delay)</code>, you could use: </p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">for</span> <span class=\"p\">{</span>\n  <span class=\"c1\">// TODO: lock &amp; unlock</span>\n  <span class=\"nx\">rand</span><span class=\"p\">.</span><span class=\"nx\">Read</span><span class=\"p\">(</span><span class=\"nx\">salt</span><span class=\"p\">)</span>\n  <span class=\"o\">&lt;-</span> <span class=\"nx\">time</span><span class=\"p\">.</span><span class=\"nx\">After</span><span class=\"p\">(</span><span class=\"nx\">delay</span><span class=\"p\">)</span>\n<span class=\"p\">}</span>\n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 109742520,
            "is_me_message": false,
            "last_edit_timestamp": 1492498132,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "asf@boinkor.net",
            "sender_full_name": "Andreas Fuchs (he/they)",
            "sender_id": 9362,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "Request for code review",
            "submessages": [],
            "timestamp": 1492498112,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4aed3eb291895487e95cc2850cb92391?d=identicon&version=1",
            "client": "website",
            "content": "<p>Though I guess that's less useful unless you're using this together with another channel that you wait for.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 109742527,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "asf@boinkor.net",
            "sender_full_name": "Andreas Fuchs (he/they)",
            "sender_id": 9362,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "Request for code review",
            "submessages": [],
            "timestamp": 1492498167,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4aed3eb291895487e95cc2850cb92391?d=identicon&version=1",
            "client": "website",
            "content": "<p>That's all I have - hope that's useful (:</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 109742529,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "asf@boinkor.net",
            "sender_full_name": "Andreas Fuchs (he/they)",
            "sender_id": 9362,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "Request for code review",
            "submessages": [],
            "timestamp": 1492498179,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/7bfb2e1e56050666b3e5973ea7df6ee4?d=identicon&version=1",
            "client": "website",
            "content": "<p>Thanks so much for the feedback <span class=\"user-mention\" data-user-email=\"asf@boinkor.net\" data-user-id=\"9362\">@Andreas Fuchs</span> ! Good point about the race condition - I'll update to protect against problems there and incorporate those stylistic recommendations :)</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 109777491,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "vivian.brown@gmail.com",
            "sender_full_name": "Vivian Brown (SP2'17)",
            "sender_id": 100931,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "Request for code review",
            "submessages": [],
            "timestamp": 1492563441,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4aed3eb291895487e95cc2850cb92391?d=identicon&version=1",
            "client": "website",
            "content": "<p>Glad you found it useful, <span class=\"user-mention\" data-user-email=\"vivian.brown@gmail.com\" data-user-id=\"100931\">@Vivian Brown (SP2'17)</span>! I just remembered why I brought up <code>time.After</code> - there's <code>time.AfterFunc</code>, which lets you reduce the whole thing to: </p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kd\">var</span> <span class=\"nx\">regenerateTimer</span> <span class=\"o\">*</span><span class=\"nx\">time</span><span class=\"p\">.</span><span class=\"nx\">Timer</span>\n<span class=\"kd\">func</span> <span class=\"nx\">generateSalt</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n    <span class=\"c1\">// TODO: lock &amp; defer the unlock (-:</span>\n    <span class=\"nx\">rand</span><span class=\"p\">.</span><span class=\"nx\">Read</span><span class=\"p\">(</span><span class=\"nx\">salt</span><span class=\"p\">)</span>\n    <span class=\"nx\">regenerateTimer</span><span class=\"p\">.</span><span class=\"nx\">Reset</span><span class=\"p\">(</span><span class=\"nx\">saltLifetime</span><span class=\"p\">)</span> <span class=\"c1\">// assuming a global saltLifetime</span>\n<span class=\"p\">}</span>\n\n<span class=\"c1\">// and in main:</span>\n    <span class=\"nx\">regenerateTimer</span> <span class=\"p\">=</span> <span class=\"nx\">time</span><span class=\"p\">.</span><span class=\"nx\">AfterFunc</span><span class=\"p\">(</span><span class=\"nx\">saltLifetime</span><span class=\"p\">,</span> <span class=\"nx\">generateSalt</span><span class=\"p\">)</span>\n</pre></div>\n\n\n<p>That will make a timer that continually gets reset to regenerate the salt by calling <code>generateSalt</code>, saving you from all that looping and sleeping (:</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 109785739,
            "is_me_message": false,
            "last_edit_timestamp": 1492583138,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "asf@boinkor.net",
            "sender_full_name": "Andreas Fuchs (he/they)",
            "sender_id": 9362,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "Request for code review",
            "submessages": [],
            "timestamp": 1492583129,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/81e645a63cb8f1d096638f68388642f0c6048bc7?x=x&version=2",
            "client": "website",
            "content": "<p>Please excuse the noob question - but does go support anything analogous to decorators? I\u2019m thinking about this for avoiding code repetition when performance logging a function. Is there a best practice for doing something like this?</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 111900389,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "Dlichte5@jhu.edu",
            "sender_full_name": "David Lichtenberg (S'13)",
            "sender_id": 2136,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "Decorators",
            "submessages": [],
            "timestamp": 1497044042,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/661412d42ecbf0c0bd354116859a5af3562f8e5f?x=x&version=4",
            "client": "website",
            "content": "<p>no, i generally just use a higher order function for that, which could be analogous to a decorator, depending on the use case.  <a href=\"https://github.com/ecix/birdwatcher/blob/master/birdwatcher.go#L32\" target=\"_blank\" title=\"https://github.com/ecix/birdwatcher/blob/master/birdwatcher.go#L32\">here</a> is an example.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 111901067,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "+1",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "stanley@zheng.nyc",
                        "full_name": "Stanley Zheng (they) (W1'19)",
                        "id": 100315
                    },
                    "user_id": 100315
                }
            ],
            "recipient_id": 22624,
            "sender_email": "veit@veitheller.de",
            "sender_full_name": "Veit Heller (he) (S1'17)",
            "sender_id": 101103,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "Decorators",
            "submessages": [],
            "timestamp": 1497045334,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/ff7f41de2091a8d3f5ff0a0722bdeda1ab87faa3?x=x&version=2",
            "client": "website",
            "content": "<p>There's an example of higher order functions <a href=\"https://golang.org/doc/articles/wiki/#tmp_12\" target=\"_blank\" title=\"https://golang.org/doc/articles/wiki/#tmp_12\">here</a></p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 111901544,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "jroutley@gmail.com",
            "sender_full_name": "James Routley (S1'17)",
            "sender_id": 101082,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "Decorators",
            "submessages": [],
            "timestamp": 1497046173,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/661412d42ecbf0c0bd354116859a5af3562f8e5f?x=x&version=4",
            "client": "website",
            "content": "<p>thats nuts! thats exactly what we did in the project i linked to above, but i didnt know about that article! so cool!</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 111901653,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "veit@veitheller.de",
            "sender_full_name": "Veit Heller (he) (S1'17)",
            "sender_id": 101103,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "Decorators",
            "submessages": [],
            "timestamp": 1497046323,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/81e645a63cb8f1d096638f68388642f0c6048bc7?x=x&version=2",
            "client": "website",
            "content": "<p>Thank you guys - That's very helpful.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 111902563,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "Dlichte5@jhu.edu",
            "sender_full_name": "David Lichtenberg (S'13)",
            "sender_id": 2136,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "Decorators",
            "submessages": [],
            "timestamp": 1497048004,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/8b0373befcb9fe1ca27ee0ac86fccc63eb8ccabe?x=x&version=2",
            "client": "website",
            "content": "<p>Hi I'm working on reactivex/rxgo library. Anyone wants to talk about it or golang in general let's do it!</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 112990311,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "jo.chasinga@gmail.com",
            "sender_full_name": "Joe Chasinga (S2'17)",
            "sender_id": 101482,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "reactiveX",
            "submessages": [],
            "timestamp": 1499294306,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/6527e077e84e20214d5373101ea15910d6b6f7a3?x=x&version=1",
            "client": "website",
            "content": "<p>Hey y'all. I'm trying to generate a random hash for the <code>state</code> url parameter in an OAuth2 ... authorization thingy?<br>\nAnyway, this technically needs to be cryptographically secure, so I was wondering if this was a reasonable way to make it:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">package</span> <span class=\"nx\">main</span>\n\n<span class=\"kn\">import</span> <span class=\"p\">(</span>\n    <span class=\"s\">&quot;crypto/rand&quot;</span>\n    <span class=\"s\">&quot;crypto/sha1&quot;</span>\n    <span class=\"s\">&quot;encoding/hex&quot;</span>\n    <span class=\"s\">&quot;fmt&quot;</span>\n<span class=\"p\">)</span>\n\n<span class=\"kd\">func</span> <span class=\"nx\">main</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n    <span class=\"c1\">// &quot;/dev/urandom&quot; in linux if getrandom(2) isn&#39;t available</span>\n    <span class=\"nx\">seed</span> <span class=\"o\">:=</span> <span class=\"nx\">rand</span><span class=\"p\">.</span><span class=\"nx\">Reader</span>\n\n    <span class=\"c1\">// Is 64 too few bits? Would a smaller number of bits still be acceptable?</span>\n    <span class=\"nx\">randomBytes</span><span class=\"p\">,</span> <span class=\"nx\">err</span> <span class=\"o\">:=</span> <span class=\"nx\">rand</span><span class=\"p\">.</span><span class=\"nx\">Prime</span><span class=\"p\">(</span><span class=\"nx\">seed</span><span class=\"p\">,</span> <span class=\"mi\">64</span><span class=\"p\">)</span>\n    <span class=\"k\">if</span> <span class=\"nx\">err</span> <span class=\"o\">!=</span> <span class=\"kc\">nil</span> <span class=\"p\">{</span>\n        <span class=\"nb\">panic</span><span class=\"p\">(</span><span class=\"nx\">err</span><span class=\"p\">)</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"c1\">// apparently I need to set the sha sum as a variable</span>\n    <span class=\"c1\">// so I can convert it to a slice (e.g. between [20]uint8 to []uint8)</span>\n    <span class=\"c1\">// It&#39;s otherwise unaddressable</span>\n    <span class=\"nx\">sum</span> <span class=\"o\">:=</span> <span class=\"nx\">sha1</span><span class=\"p\">.</span><span class=\"nx\">Sum</span><span class=\"p\">(</span><span class=\"nx\">randomBytes</span><span class=\"p\">.</span><span class=\"nx\">Bytes</span><span class=\"p\">())</span>\n\n    <span class=\"c1\">// Make it URL safe</span>\n    <span class=\"nx\">state</span> <span class=\"o\">:=</span> <span class=\"nx\">hex</span><span class=\"p\">.</span><span class=\"nx\">EncodeToString</span><span class=\"p\">(</span><span class=\"nx\">sum</span><span class=\"p\">[:])</span>\n\n    <span class=\"nx\">fmt</span><span class=\"p\">.</span><span class=\"nx\">Println</span><span class=\"p\">(</span><span class=\"nx\">state</span><span class=\"p\">)</span>\n<span class=\"p\">}</span>\n</pre></div>\n\n\n<p><a href=\"https://play.golang.org/p/rGOAWnV0i5\" target=\"_blank\" title=\"https://play.golang.org/p/rGOAWnV0i5\">Here's a playground for reference</a></p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 113144930,
            "is_me_message": false,
            "last_edit_timestamp": 1499633832,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "steve@redlua.com",
            "sender_full_name": "Steven McCarthy (he) (SP2'15)",
            "sender_id": 7871,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "Generating a random hash",
            "submessages": [],
            "timestamp": 1499633775,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/8b0373befcb9fe1ca27ee0ac86fccc63eb8ccabe?x=x&version=2",
            "client": "website",
            "content": "<p>Haven't been working with encryption for a while, but looks acceptable to me.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 113147172,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "jo.chasinga@gmail.com",
            "sender_full_name": "Joe Chasinga (S2'17)",
            "sender_id": 101482,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "Generating a random hash",
            "submessages": [],
            "timestamp": 1499639220,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/7d2ab014ebf55e99afffba1a3d92be8155754f0f?x=x&version=1",
            "client": "website",
            "content": "<p>Maybe silly questions: why must it be a prime if you're going to hash it? And is there a reason you can't just hex encode the output of something out of <code>rand</code> directly instead of hashing it?</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 113147643,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "kamal@marhubi.com",
            "sender_full_name": "Kamal Marhubi (he) (m2'18)",
            "sender_id": 8090,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "Generating a random hash",
            "submessages": [],
            "timestamp": 1499640311,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/6527e077e84e20214d5373101ea15910d6b6f7a3?x=x&version=1",
            "client": "website",
            "content": "<p>It doesn't actually have to be a prime. But the only other <code>rand</code> function is getting a random <code>int</code>, which requires having a maximum int. Then again, you have inspired me to re-read the <code>crypto/rand</code> package again, and I now realize that I can just use the <code>Read</code> function to fill a byte slice of an arbitrary size....</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 113154705,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "steve@redlua.com",
            "sender_full_name": "Steven McCarthy (he) (SP2'15)",
            "sender_id": 7871,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "Generating a random hash",
            "submessages": [],
            "timestamp": 1499656922,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/6527e077e84e20214d5373101ea15910d6b6f7a3?x=x&version=1",
            "client": "website",
            "content": "<p>So I guess that makes it something like this:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kd\">func</span> <span class=\"nx\">main</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n    <span class=\"c1\">// is 80 bits fine?</span>\n    <span class=\"nx\">randomBytes</span> <span class=\"o\">:=</span> <span class=\"nb\">make</span><span class=\"p\">([]</span><span class=\"kt\">byte</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">)</span>\n\n    <span class=\"c1\">// &quot;/dev/urandom&quot; in linux if getrandom(2) isn&#39;t available</span>\n    <span class=\"nx\">n</span><span class=\"p\">,</span> <span class=\"nx\">err</span> <span class=\"o\">:=</span> <span class=\"nx\">rand</span><span class=\"p\">.</span><span class=\"nx\">Read</span><span class=\"p\">(</span><span class=\"nx\">randomBytes</span><span class=\"p\">)</span>\n    <span class=\"k\">if</span> <span class=\"nx\">err</span> <span class=\"o\">!=</span> <span class=\"kc\">nil</span> <span class=\"p\">{</span>\n        <span class=\"nb\">panic</span><span class=\"p\">(</span><span class=\"nx\">err</span><span class=\"p\">)</span>\n    <span class=\"p\">}</span>\n    <span class=\"c1\">// ensure we read enough random bytes</span>\n    <span class=\"k\">if</span> <span class=\"nx\">n</span> <span class=\"o\">!=</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"nx\">randomBytes</span><span class=\"p\">)</span> <span class=\"cm\">/* 10 */</span> <span class=\"p\">{</span>\n        <span class=\"nb\">panic</span><span class=\"p\">(</span><span class=\"s\">&quot;not enough read&quot;</span><span class=\"p\">)</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"c1\">// apparently I need to set the sha sum as a variable</span>\n    <span class=\"c1\">// so I can convert it to a slice (e.g. between [20]uint8 to []uint8)</span>\n    <span class=\"c1\">// It&#39;s otherwise unaddressable</span>\n    <span class=\"nx\">sum</span> <span class=\"o\">:=</span> <span class=\"nx\">sha1</span><span class=\"p\">.</span><span class=\"nx\">Sum</span><span class=\"p\">(</span><span class=\"nx\">randomBytes</span><span class=\"p\">)</span>\n\n    <span class=\"c1\">// Make it URL safe</span>\n    <span class=\"nx\">state</span> <span class=\"o\">:=</span> <span class=\"nx\">hex</span><span class=\"p\">.</span><span class=\"nx\">EncodeToString</span><span class=\"p\">(</span><span class=\"nx\">sum</span><span class=\"p\">[:])</span>\n\n    <span class=\"nx\">fmt</span><span class=\"p\">.</span><span class=\"nx\">Println</span><span class=\"p\">(</span><span class=\"nx\">state</span><span class=\"p\">)</span>\n<span class=\"p\">}</span>\n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 113154851,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "steve@redlua.com",
            "sender_full_name": "Steven McCarthy (he) (SP2'15)",
            "sender_id": 7871,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "Generating a random hash",
            "submessages": [],
            "timestamp": 1499657277,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/6527e077e84e20214d5373101ea15910d6b6f7a3?x=x&version=1",
            "client": "website",
            "content": "<p>Thanks <span class=\"user-mention\" data-user-email=\"jo.chasinga@gmail.com\" data-user-id=\"101482\">@Panisuan Chasinga</span> and <span class=\"user-mention\" data-user-email=\"kamal@marhubi.com\" data-user-id=\"8090\">@Kamal Marhubi (S1'15)</span> !</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 113154904,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "steve@redlua.com",
            "sender_full_name": "Steven McCarthy (he) (SP2'15)",
            "sender_id": 7871,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "Generating a random hash",
            "submessages": [],
            "timestamp": 1499657364,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/7d2ab014ebf55e99afffba1a3d92be8155754f0f?x=x&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"steve@redlua.com\" data-user-id=\"7871\">@Steven McCarthy (SP2'15)</span> there's still the question of why you need to hash the bytes instead of directly hex encoding them. :-)</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 113161000,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "+1",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "jay@jayschwa.net",
                        "full_name": "Jay Weisskopf Petacat (W2'17)",
                        "id": 829
                    },
                    "user_id": 829
                },
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "+1",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "steve@redlua.com",
                        "full_name": "Steven McCarthy (he) (SP2'15)",
                        "id": 7871
                    },
                    "user_id": 7871
                },
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "+1",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "jo.chasinga@gmail.com",
                        "full_name": "Joe Chasinga (S2'17)",
                        "id": 101482
                    },
                    "user_id": 101482
                }
            ],
            "recipient_id": 22624,
            "sender_email": "kamal@marhubi.com",
            "sender_full_name": "Kamal Marhubi (he) (m2'18)",
            "sender_id": 8090,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "Generating a random hash",
            "submessages": [],
            "timestamp": 1499672959,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/8b0373befcb9fe1ca27ee0ac86fccc63eb8ccabe?x=x&version=2",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"steve@redlua.com\" data-user-id=\"7871\">@Steven McCarthy (SP2'15)</span> normally I'd go for sha1 with some kind of salt appended. For instance, a simple md5 hash, like what I did in this project <a href=\"https://github.com/jochasinga/hog\" target=\"_blank\" title=\"https://github.com/jochasinga/hog\">https://github.com/jochasinga/hog</a> That way it is way more secured.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 113171444,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "jo.chasinga@gmail.com",
            "sender_full_name": "Joe Chasinga (S2'17)",
            "sender_id": 101482,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "Generating a random hash",
            "submessages": [],
            "timestamp": 1499696691,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/7d2ab014ebf55e99afffba1a3d92be8155754f0f?x=x&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"jo.chasinga@gmail.com\" data-user-id=\"101482\">@Panisuan Chasinga</span> I'm a bit confused. We're hashing random bytes that we never store or use again. There's no need for salting, and I'm trying to suggest that there's no need for hashing at all. Unless the code here isn't the whole thing that's going on?</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 113182218,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "kamal@marhubi.com",
            "sender_full_name": "Kamal Marhubi (he) (m2'18)",
            "sender_id": 8090,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "Generating a random hash",
            "submessages": [],
            "timestamp": 1499714036,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/8b0373befcb9fe1ca27ee0ac86fccc63eb8ccabe?x=x&version=2",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"kamal@marhubi.com\" data-user-id=\"8090\">@Kamal Marhubi (S1'15)</span> I totally missed that. If that's the case then I agree.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 113182479,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "+1",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "kamal@marhubi.com",
                        "full_name": "Kamal Marhubi (he) (m2'18)",
                        "id": 8090
                    },
                    "user_id": 8090
                }
            ],
            "recipient_id": 22624,
            "sender_email": "jo.chasinga@gmail.com",
            "sender_full_name": "Joe Chasinga (S2'17)",
            "sender_id": 101482,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "Generating a random hash",
            "submessages": [],
            "timestamp": 1499714375,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/6527e077e84e20214d5373101ea15910d6b6f7a3?x=x&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"kamal@marhubi.com\" data-user-id=\"8090\">@Kamal Marhubi (S1'15)</span> Why not?</p>\n<p>Just kidding. Yeah, you're right. I was thinking that I needed to do something other than just hex encoding to ensure that it'd be URL safe. But yeah, bytes are bytes, so that's not necessary.</p>\n<p><a href=\"https://play.golang.org/p/Xj-2B1fnTS\" target=\"_blank\" title=\"https://play.golang.org/p/Xj-2B1fnTS\">Final answer</a></p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">package</span> <span class=\"nx\">main</span>\n\n<span class=\"kn\">import</span> <span class=\"p\">(</span>\n    <span class=\"s\">&quot;crypto/rand&quot;</span>\n    <span class=\"s\">&quot;encoding/hex&quot;</span>\n    <span class=\"s\">&quot;fmt&quot;</span>\n<span class=\"p\">)</span>\n\n<span class=\"kd\">func</span> <span class=\"nx\">main</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n    <span class=\"c1\">// 160 bits of goodness</span>\n    <span class=\"nx\">randomBytes</span> <span class=\"o\">:=</span> <span class=\"nb\">make</span><span class=\"p\">([]</span><span class=\"kt\">byte</span><span class=\"p\">,</span> <span class=\"mi\">20</span><span class=\"p\">)</span>\n\n    <span class=\"c1\">// &quot;/dev/urandom&quot; in linux if getrandom(2) isn&#39;t available</span>\n    <span class=\"nx\">n</span><span class=\"p\">,</span> <span class=\"nx\">err</span> <span class=\"o\">:=</span> <span class=\"nx\">rand</span><span class=\"p\">.</span><span class=\"nx\">Read</span><span class=\"p\">(</span><span class=\"nx\">randomBytes</span><span class=\"p\">)</span>\n    <span class=\"k\">if</span> <span class=\"nx\">err</span> <span class=\"o\">!=</span> <span class=\"kc\">nil</span> <span class=\"p\">{</span>\n        <span class=\"nb\">panic</span><span class=\"p\">(</span><span class=\"nx\">err</span><span class=\"p\">)</span>\n    <span class=\"p\">}</span>\n    <span class=\"c1\">// ensure we read enough random bytes</span>\n    <span class=\"k\">if</span> <span class=\"nx\">n</span> <span class=\"o\">!=</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"nx\">randomBytes</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"nb\">panic</span><span class=\"p\">(</span><span class=\"s\">&quot;not enough bits!&quot;</span><span class=\"p\">)</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"nx\">fmt</span><span class=\"p\">.</span><span class=\"nx\">Println</span><span class=\"p\">(</span><span class=\"nx\">hex</span><span class=\"p\">.</span><span class=\"nx\">EncodeToString</span><span class=\"p\">(</span><span class=\"nx\">randomBytes</span><span class=\"p\">))</span>\n<span class=\"p\">}</span>\n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 113195624,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "steve@redlua.com",
            "sender_full_name": "Steven McCarthy (he) (SP2'15)",
            "sender_id": 7871,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "Generating a random hash",
            "submessages": [],
            "timestamp": 1499738741,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/a179bb8c3fc4ab0975954f57d47fa6c53a8c2dad?x=x&version=2",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"steve@redlua.com\" data-user-id=\"7871\">@Steven McCarthy (SP2'15)</span>, checking the number of bytes read (in addition to the error) is unnecessary. The documentation for <code>rand.Read</code> says:</p>\n<blockquote>\n<p>On return, n == len(b) if and only if err == nil</p>\n</blockquote>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 113197206,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "jay@jayschwa.net",
            "sender_full_name": "Jay Weisskopf Petacat (W2'17)",
            "sender_id": 829,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "Generating a random hash",
            "submessages": [],
            "timestamp": 1499742274,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/a179bb8c3fc4ab0975954f57d47fa6c53a8c2dad?x=x&version=2",
            "client": "website",
            "content": "<p>You'll also save some characters in the URL if you replace hex with base64 encoding.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 113197419,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "+1",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "steve@redlua.com",
                        "full_name": "Steven McCarthy (he) (SP2'15)",
                        "id": 7871
                    },
                    "user_id": 7871
                }
            ],
            "recipient_id": 22624,
            "sender_email": "jay@jayschwa.net",
            "sender_full_name": "Jay Weisskopf Petacat (W2'17)",
            "sender_id": 829,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "Generating a random hash",
            "submessages": [],
            "timestamp": 1499742813,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/6527e077e84e20214d5373101ea15910d6b6f7a3?x=x&version=1",
            "client": "website",
            "content": "<p>Thanks <span class=\"user-mention\" data-user-email=\"jay@jayschwa.net\" data-user-id=\"829\">@Jay Weisskopf (W2'17)</span>. I knew I missed something when I was looking at base64. I just looked at their encoding example and saw the <code>==</code> padding and just decided to hex it.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 113237313,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "steve@redlua.com",
            "sender_full_name": "Steven McCarthy (he) (SP2'15)",
            "sender_id": 7871,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "Generating a random hash",
            "submessages": [],
            "timestamp": 1499821070,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/6527e077e84e20214d5373101ea15910d6b6f7a3?x=x&version=1",
            "client": "website",
            "content": "<p><a href=\"https://play.golang.org/p/rzpbYxk0eQ\" target=\"_blank\" title=\"https://play.golang.org/p/rzpbYxk0eQ\">Even more final answer</a></p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">package</span> <span class=\"nx\">main</span>\n\n<span class=\"kn\">import</span> <span class=\"p\">(</span>\n    <span class=\"s\">&quot;crypto/rand&quot;</span>\n    <span class=\"s\">&quot;encoding/base64&quot;</span>\n    <span class=\"s\">&quot;fmt&quot;</span>\n<span class=\"p\">)</span>\n\n<span class=\"kd\">func</span> <span class=\"nx\">main</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n    <span class=\"c1\">// 160 bits of goodness</span>\n    <span class=\"nx\">randomBytes</span> <span class=\"o\">:=</span> <span class=\"nb\">make</span><span class=\"p\">([]</span><span class=\"kt\">byte</span><span class=\"p\">,</span> <span class=\"mi\">20</span><span class=\"p\">)</span>\n\n    <span class=\"c1\">// &quot;/dev/urandom&quot; in linux if getrandom(2) isn&#39;t available</span>\n    <span class=\"nx\">_</span><span class=\"p\">,</span> <span class=\"nx\">err</span> <span class=\"o\">:=</span> <span class=\"nx\">rand</span><span class=\"p\">.</span><span class=\"nx\">Read</span><span class=\"p\">(</span><span class=\"nx\">randomBytes</span><span class=\"p\">)</span>\n    <span class=\"k\">if</span> <span class=\"nx\">err</span> <span class=\"o\">!=</span> <span class=\"kc\">nil</span> <span class=\"p\">{</span>\n        <span class=\"nb\">panic</span><span class=\"p\">(</span><span class=\"nx\">err</span><span class=\"p\">)</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"nx\">fmt</span><span class=\"p\">.</span><span class=\"nx\">Println</span><span class=\"p\">(</span><span class=\"nx\">base64</span><span class=\"p\">.</span><span class=\"nx\">RawURLEncoding</span><span class=\"p\">.</span><span class=\"nx\">EncodeToString</span><span class=\"p\">(</span><span class=\"nx\">randomBytes</span><span class=\"p\">))</span>\n<span class=\"p\">}</span>\n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 113237421,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "+1",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "jay@jayschwa.net",
                        "full_name": "Jay Weisskopf Petacat (W2'17)",
                        "id": 829
                    },
                    "user_id": 829
                }
            ],
            "recipient_id": 22624,
            "sender_email": "steve@redlua.com",
            "sender_full_name": "Steven McCarthy (he) (SP2'15)",
            "sender_id": 7871,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "Generating a random hash",
            "submessages": [],
            "timestamp": 1499821219,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/a179bb8c3fc4ab0975954f57d47fa6c53a8c2dad?x=x&version=2",
            "client": "website",
            "content": "<p>This is the first year I haven't attended GopherCon, and apparently Go 2 was just announced there <img alt=\":gopher:\" class=\"emoji\" src=\"https://zulip-avatars.s3.amazonaws.com/13/emoji/gopher.png\" title=\":gopher:\"><br>\n<a href=\"https://blog.golang.org/toward-go2\" target=\"_blank\" title=\"https://blog.golang.org/toward-go2\">https://blog.golang.org/toward-go2</a></p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 113306169,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f389",
                    "emoji_name": "tada",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "ghthor@gmail.com",
                        "full_name": "Will Drengwitz (he) (W1'17)",
                        "id": 7099
                    },
                    "user_id": 7099
                },
                {
                    "emoji_code": "1f389",
                    "emoji_name": "tada",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "ormatt@outlook.com",
                        "full_name": "Or Mattatia (SP2'17)",
                        "id": 100918
                    },
                    "user_id": 100918
                }
            ],
            "recipient_id": 22624,
            "sender_email": "jay@jayschwa.net",
            "sender_full_name": "Jay Weisskopf Petacat (W2'17)",
            "sender_id": 829,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "Go 2 announced at GopherCon",
            "submessages": [],
            "timestamp": 1499966650,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/b032a1f03a1eecfcf9b5aa94f3d67a4d327a01fe?x=x&version=2",
            "client": "website",
            "content": "<p>That's exciting!</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 113670442,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "ormatt@outlook.com",
            "sender_full_name": "Or Mattatia (SP2'17)",
            "sender_id": 100918,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "Go 2 announced at GopherCon",
            "submessages": [],
            "timestamp": 1500752668,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/ec9ef0758874dcec321295060e8deeb31087b54e?x=x&version=2",
            "client": "website",
            "content": "<p>hi y'all! I figured I wanted to dip my toe into all things Go for this week, and have been working my way through the Go Tour online -- I was wondering if anyone had any other suggestions for good tutorials to work through?</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 114040417,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "hannahmimipark@gmail.com",
            "sender_full_name": "Hannah Mimi Park (S2'17)",
            "sender_id": 101397,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "good go starter tutorials?",
            "submessages": [],
            "timestamp": 1501528573,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/a179bb8c3fc4ab0975954f57d47fa6c53a8c2dad?x=x&version=2",
            "client": "website",
            "content": "<p><a href=\"https://golang.org/doc/articles/wiki/\" target=\"_blank\" title=\"https://golang.org/doc/articles/wiki/\">https://golang.org/doc/articles/wiki/</a></p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 114040503,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "jay@jayschwa.net",
            "sender_full_name": "Jay Weisskopf Petacat (W2'17)",
            "sender_id": 829,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "good go starter tutorials?",
            "submessages": [],
            "timestamp": 1501528784,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/8b0373befcb9fe1ca27ee0ac86fccc63eb8ccabe?x=x&version=2",
            "client": "website",
            "content": "<p>These were almost all I needed when I started programming in Go </p>\n<ul>\n<li><a href=\"https://www.golang-book.com/books/intro\" target=\"_blank\" title=\"https://www.golang-book.com/books/intro\">https://www.golang-book.com/books/intro</a></li>\n<li><a href=\"https://gobyexample.com/hello-world\" target=\"_blank\" title=\"https://gobyexample.com/hello-world\">https://gobyexample.com/hello-world</a></li>\n</ul>\n<p>The rest went with playground, the docs, and the Go blog posts. I think I've never seen a language with docs as readable as Go</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 114040621,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "+1",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "aftaberski@gmail.com",
                        "full_name": "Anna Taberski (S2'17)",
                        "id": 101323
                    },
                    "user_id": 101323
                }
            ],
            "recipient_id": 22624,
            "sender_email": "jo.chasinga@gmail.com",
            "sender_full_name": "Joe Chasinga (S2'17)",
            "sender_id": 101482,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "good go starter tutorials?",
            "submessages": [],
            "timestamp": 1501528981,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/ec9ef0758874dcec321295060e8deeb31087b54e?x=x&version=2",
            "client": "website",
            "content": "<p>awesome. thank you so much!</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 114041740,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "hannahmimipark@gmail.com",
            "sender_full_name": "Hannah Mimi Park (S2'17)",
            "sender_id": 101397,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "good go starter tutorials?",
            "submessages": [],
            "timestamp": 1501531049,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/ff7f41de2091a8d3f5ff0a0722bdeda1ab87faa3?x=x&version=2",
            "client": "website",
            "content": "<p>I found <a href=\"https://golang.org/doc/effective_go.html\" target=\"_blank\" title=\"https://golang.org/doc/effective_go.html\">Effective Go</a>, written by the Golang team themselves pretty helpful when starting out. It covers most of the language features concisely, and I use it as a reference when I forget syntax/behaviour. If you're looking for something more complicated, I worked though the book <a href=\"https://interpreterbook.com/\" target=\"_blank\" title=\"https://interpreterbook.com/\">Writing an Interpreter in Go</a> and found it helped my understanding of how larger applications fit together. It might be more of a commitment than you're looking for atm but I thought I'd mention it.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 114041942,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "+1",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "jo.chasinga@gmail.com",
                        "full_name": "Joe Chasinga (S2'17)",
                        "id": 101482
                    },
                    "user_id": 101482
                }
            ],
            "recipient_id": 22624,
            "sender_email": "jroutley@gmail.com",
            "sender_full_name": "James Routley (S1'17)",
            "sender_id": 101082,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "good go starter tutorials?",
            "submessages": [],
            "timestamp": 1501531412,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/8b0373befcb9fe1ca27ee0ac86fccc63eb8ccabe?x=x&version=2",
            "client": "website",
            "content": "<p>+1 for Writing an Interpreter in Go book. I think it's one of the friendliest books on interpreter/compiler in general.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 114042212,
            "is_me_message": false,
            "last_edit_timestamp": 1501531939,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "jo.chasinga@gmail.com",
            "sender_full_name": "Joe Chasinga (S2'17)",
            "sender_id": 101482,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "good go starter tutorials?",
            "submessages": [],
            "timestamp": 1501531910,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/6dd8ec78c904fd082520dd4dc842dd7a914052d7?x=x&version=2",
            "client": "website",
            "content": "<p>This book looks awesome!</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 114049587,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "aftaberski@gmail.com",
            "sender_full_name": "Anna Taberski (S2'17)",
            "sender_id": 101323,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "good go starter tutorials?",
            "submessages": [],
            "timestamp": 1501545367,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/b032a1f03a1eecfcf9b5aa94f3d67a4d327a01fe?x=x&version=2",
            "client": "website",
            "content": "<p>Hey golang folks! <br>\nI'm writing a small tool in go and some of my internal logic is pretty similar to something I've found in Github but implemented in C.<br>\nI'm wondering whether I should copy it as-is and use a cgo wrapper around it, or should I rewrite it myself in pure go.<br>\nIt's about 600 lines of C so I guess it should sum to something near 400 lines of go.<br>\nFun facts-<br>\n1) I've never used cgo<br>\n2) I've never slept in the RC Closet</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 114335752,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "6",
                    "emoji_name": "hackerschool",
                    "reaction_type": "realm_emoji",
                    "user": {
                        "email": "dangonrei@gmail.com",
                        "full_name": "Daniel Gonz\u00e1lez Reina (he) (S1'17)",
                        "id": 101095
                    },
                    "user_id": 101095
                },
                {
                    "emoji_code": "6",
                    "emoji_name": "hackerschool",
                    "reaction_type": "realm_emoji",
                    "user": {
                        "email": "brad@isbrad.com",
                        "full_name": "Bradley Boccuzzi (he/they) (S1'15)",
                        "id": 8094
                    },
                    "user_id": 8094
                }
            ],
            "recipient_id": 22624,
            "sender_email": "ormatt@outlook.com",
            "sender_full_name": "Or Mattatia (SP2'17)",
            "sender_id": 100918,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "go vs cgo",
            "submessages": [],
            "timestamp": 1502147621,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/0e74dfe9b92822b1371cae0f22538b2e?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"ormatt@outlook.com\" data-user-id=\"100918\">@Or Mattatia (SP2'17)</span> Have you read this: <a href=\"https://dave.cheney.net/2016/01/18/cgo-is-not-go\" target=\"_blank\" title=\"https://dave.cheney.net/2016/01/18/cgo-is-not-go\">https://dave.cheney.net/2016/01/18/cgo-is-not-go</a> ?</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 114335954,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "indradhanush.gupta@gmail.com",
            "sender_full_name": "Indradhanush Gupta (he) (S1'17)",
            "sender_id": 101105,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "go vs cgo",
            "submessages": [],
            "timestamp": 1502147939,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/b032a1f03a1eecfcf9b5aa94f3d67a4d327a01fe?x=x&version=2",
            "client": "ZulipAndroid",
            "content": "<p>Thanks <span class=\"user-mention\" data-user-email=\"indradhanush.gupta@gmail.com\" data-user-id=\"101105\">@Indradhanush Gupta (S1'17)</span>! Funny, I just read it yesterday :)</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 114336176,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "ormatt@outlook.com",
            "sender_full_name": "Or Mattatia (SP2'17)",
            "sender_id": 100918,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "go vs cgo",
            "submessages": [],
            "timestamp": 1502148303,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/b032a1f03a1eecfcf9b5aa94f3d67a4d327a01fe?x=x&version=2",
            "client": "ZulipAndroid",
            "content": "<p>From that article I get the notion that including cgo might not be trivial and may come with an overhead, but still it seems like a valid option</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 114336238,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "ormatt@outlook.com",
            "sender_full_name": "Or Mattatia (SP2'17)",
            "sender_id": 100918,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "go vs cgo",
            "submessages": [],
            "timestamp": 1502148385,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/0e74dfe9b92822b1371cae0f22538b2e?d=identicon&version=1",
            "client": "website",
            "content": "<p>Aha. In that case, if rewriting is not going to be time consuming you may implement the library in native go. However if writing the cgo wrapper is not a big ask, I would first use cgo, and get the project to work and then slowly work on getting rid of the dependency.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 114336306,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "+1",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "ormatt@outlook.com",
                        "full_name": "Or Mattatia (SP2'17)",
                        "id": 100918
                    },
                    "user_id": 100918
                }
            ],
            "recipient_id": 22624,
            "sender_email": "indradhanush.gupta@gmail.com",
            "sender_full_name": "Indradhanush Gupta (he) (S1'17)",
            "sender_id": 101105,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "go vs cgo",
            "submessages": [],
            "timestamp": 1502148484,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/391eb183c3474a15bf9ad0e87d3ff118?d=identicon&version=1",
            "client": "website",
            "content": "<p>I hoping to find a position that will allow me to influence and work on the Go 2 spec and implementation. Such an exciting time to be a gopher!</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 114374333,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "ghthor@gmail.com",
            "sender_full_name": "Will Drengwitz (he) (W1'17)",
            "sender_id": 7099,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "Go 2 announced at GopherCon",
            "submessages": [],
            "timestamp": 1502225739,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/6527e077e84e20214d5373101ea15910d6b6f7a3?x=x&version=1",
            "client": "website",
            "content": "<p>I'd never really considered porting C to Go, until I read <a href=\"https://blog.kowalczyk.info/article/wN9R/experience-porting-4.5k-loc-of-c-to-go-facebooks-css-flexbox-implementation-yoga.html\" target=\"_blank\" title=\"https://blog.kowalczyk.info/article/wN9R/experience-porting-4.5k-loc-of-c-to-go-facebooks-css-flexbox-implementation-yoga.html\">this blog post</a>. It's not suuuuuuper heavy on the exact details, but it's interesting that a 4.5k line C program was ported to Go.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 114383754,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "steve@redlua.com",
            "sender_full_name": "Steven McCarthy (he) (SP2'15)",
            "sender_id": 7871,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "go vs cgo",
            "submessages": [],
            "timestamp": 1502242827,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/b032a1f03a1eecfcf9b5aa94f3d67a4d327a01fe?x=x&version=2",
            "client": "website",
            "content": "<p>Thanks <span class=\"user-mention\" data-user-email=\"steve@redlua.com\" data-user-id=\"7871\">@Steven McCarthy (SP2'15)</span> , that was a good read!<br>\nAnd I like <a href=\"https://github.com/elliotchance/c2go\" target=\"_blank\" title=\"https://github.com/elliotchance/c2go\">this repo</a> that was listed in that article that attempts to convert C into go.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 114417912,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "ormatt@outlook.com",
            "sender_full_name": "Or Mattatia (SP2'17)",
            "sender_id": 100918,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "go vs cgo",
            "submessages": [],
            "timestamp": 1502311081,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/b032a1f03a1eecfcf9b5aa94f3d67a4d327a01fe?x=x&version=2",
            "client": "website",
            "content": "<p>In my quest for a go replacement for Python's <em>yield</em>, I've found <a href=\"https://ewencp.org/blog/golang-iterators/\" target=\"_blank\" title=\"https://ewencp.org/blog/golang-iterators/\">this</a> blog post, which is really awesome imho.<br>\nMy conclusion: Don't use channels to make iterators when you don't need async behavior.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 114818404,
            "is_me_message": false,
            "last_edit_timestamp": 1503179595,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "ormatt@outlook.com",
            "sender_full_name": "Or Mattatia (SP2'17)",
            "sender_id": 100918,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "golang iterators",
            "submessages": [],
            "timestamp": 1503179568,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/da27a2081fcf44c802c1806cdb5bb881310dfe7c?x=x&version=5",
            "client": "website",
            "content": "<p>Is there a way to create an empty <code>interface{}</code> as an expression?<br>\nI'm calling a function that wants an <code>interface{}</code> as an argument, and I want to pass it an empty one (for now). <br>\nI'm creating a <code>var dummy interface{}</code> and passing <code>dummy</code> as the argument, but I'm wondering if there's a way to do without the declaration.</p>\n<p>I tried passing <code>interface{}</code> directly, but the go compiler complains it's not an expression. I also tried <code>interface{}{}</code> but it doesn't like it either \u00af\\_(\u30c4)_/\u00af</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 115284190,
            "is_me_message": false,
            "last_edit_timestamp": 1504184318,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "ad@lamarque.fr",
            "sender_full_name": "Adrien Lamarque (they/he) (S1'16)",
            "sender_id": 9335,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "empty interface{}",
            "submessages": [],
            "timestamp": 1504184270,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/db3bb2e8cfa9c62e206a0fa100a024da6f6e41df?x=x&version=4",
            "client": "website",
            "content": "<p>Any reason <code>nil</code> won't work? Any object should conform to <code>interface{}</code>, I don't think you need anything special.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 115284402,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "thumbs_up",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "ad@lamarque.fr",
                        "full_name": "Adrien Lamarque (they/he) (S1'16)",
                        "id": 9335
                    },
                    "user_id": 9335
                }
            ],
            "recipient_id": 22624,
            "sender_email": "raph.levien@gmail.com",
            "sender_full_name": "Raph Levien (F1'17)",
            "sender_id": 101701,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "empty interface{}",
            "submessages": [],
            "timestamp": 1504184759,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/6527e077e84e20214d5373101ea15910d6b6f7a3?x=x&version=1",
            "client": "website",
            "content": "<p>Hey y'all. I find myself in the situation where I want to encode files in JSON. I know that I'm going to be base64 encoding their bytes and passing it as a string, but I'm wondering if <a href=\"https://play.golang.org/p/BD5FSSbEFx\" target=\"_blank\" title=\"https://play.golang.org/p/BD5FSSbEFx\">my method of doing it</a> could be better.<br>\nRight now it feels clunky, because the Marshaling and Unmarshaling require me to sort of abstract away the actual type I'm using. Then again, perhaps it would make more sense to pull the <code>Files map[string][]byte</code> into its own type, and simply add a MarshalJSON and UnmarshalJSON for that? Then my functions get a lot simpler. Hmmm. I may have rubber ducked this. Either way, would love anyone's feedback on the playground link above.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 115479884,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "steve@redlua.com",
            "sender_full_name": "Steven McCarthy (he) (SP2'15)",
            "sender_id": 7871,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "encoding files in json",
            "submessages": [],
            "timestamp": 1504620274,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/a6a0ff0a4a9a86ae7bc4524453d439bd?d=identicon&version=1",
            "client": "website",
            "content": "<p>I am currently trying to figure out exactly the same thing</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 115489084,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "annie.cherk@gmail.com",
            "sender_full_name": "Annie Cherkaev (she/they) (m4'18)",
            "sender_id": 9502,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "encoding files in json",
            "submessages": [],
            "timestamp": 1504636658,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/da27a2081fcf44c802c1806cdb5bb881310dfe7c?x=x&version=5",
            "client": "website",
            "content": "<p>It does :) Thanks!</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 115491618,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "ad@lamarque.fr",
            "sender_full_name": "Adrien Lamarque (they/he) (S1'16)",
            "sender_id": 9335,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "empty interface{}",
            "submessages": [],
            "timestamp": 1504640810,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/6527e077e84e20214d5373101ea15910d6b6f7a3?x=x&version=1",
            "client": "website",
            "content": "<p>Alrighty. I took a second pass at this and turned the file map itself into a type, and only created UnmarshalJSON and MarshalJSON functions for that, and I think it's okay.</p>\n<p>...</p>\n<p>Then, I took a 3rd pass, and tried running all of this without any of my json marshaling and unmarshaling. Turns out Golang base64 encodes <code>[]byte</code>'s in JSON by default...</p>\n<blockquote>\n<p>Array and slice values encode as JSON arrays, except that <strong>[]byte encodes as a base64-encoded string</strong>, and a nil slice encodes as the null JSON value. </p>\n</blockquote>\n<p>So all of that is a big <img alt=\":sweat_smile:\" class=\"emoji\" src=\"/static/generated/emoji/images/emoji/unicode/1f605.png\" title=\"sweat smile\"> and my final \"solution\" is to just <a href=\"https://play.golang.org/p/btdr3O9uZx\" target=\"_blank\" title=\"https://play.golang.org/p/btdr3O9uZx\">Marshal and Unmarshal normally</a> <img alt=\":smile_cat:\" class=\"emoji\" src=\"/static/generated/emoji/images/emoji/unicode/1f638.png\" title=\"smile cat\"></p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 115504532,
            "is_me_message": false,
            "last_edit_timestamp": 1504665021,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "steve@redlua.com",
            "sender_full_name": "Steven McCarthy (he) (SP2'15)",
            "sender_id": 7871,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "encoding files in json",
            "submessages": [],
            "timestamp": 1504664982,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/702d182dc365825040b1ad0b85c0fa3c?d=identicon&version=1",
            "client": "website",
            "content": "<p>Ok, I have got it admit that it would be really nice to have some first-class metaprogramming here. I've got a large number of constants defined in the wrong representation, and they need to be converted and then rewritten into valid Go source</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 117183296,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "george.tankersley@gmail.com",
            "sender_full_name": "George Tankersley (F2'17)",
            "sender_id": 102096,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "code generation",
            "submessages": [],
            "timestamp": 1508185558,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/702d182dc365825040b1ad0b85c0fa3c?d=identicon&version=1",
            "client": "website",
            "content": "<p>It ends up looking like this at the moment:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kd\">func</span> <span class=\"nx\">main</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n   <span class=\"kd\">var</span> <span class=\"nx\">fe64</span> <span class=\"nx\">FieldElement64</span>\n   <span class=\"kd\">var</span> <span class=\"nx\">buf</span> <span class=\"p\">[</span><span class=\"mi\">32</span><span class=\"p\">]</span><span class=\"kt\">byte</span>\n\n   <span class=\"nx\">FeToBytes32</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"nx\">buf</span><span class=\"p\">,</span> <span class=\"o\">&amp;</span><span class=\"nx\">d</span><span class=\"p\">)</span>\n   <span class=\"nx\">FeFromBytes64</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"nx\">fe64</span><span class=\"p\">,</span> <span class=\"o\">&amp;</span><span class=\"nx\">buf</span><span class=\"p\">)</span>\n   <span class=\"nx\">printFE64Decl</span><span class=\"p\">(</span><span class=\"s\">&quot;d&quot;</span><span class=\"p\">,</span> <span class=\"nx\">fe64</span><span class=\"p\">)</span>\n\n   <span class=\"nx\">FeToBytes32</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"nx\">buf</span><span class=\"p\">,</span> <span class=\"o\">&amp;</span><span class=\"nx\">d2</span><span class=\"p\">)</span>\n   <span class=\"nx\">FeFromBytes64</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"nx\">fe64</span><span class=\"p\">,</span> <span class=\"o\">&amp;</span><span class=\"nx\">buf</span><span class=\"p\">)</span>\n   <span class=\"nx\">printFE64Decl</span><span class=\"p\">(</span><span class=\"s\">&quot;d2&quot;</span><span class=\"p\">,</span> <span class=\"nx\">fe64</span><span class=\"p\">)</span>\n\n   <span class=\"c1\">// [...]</span>\n<span class=\"p\">}</span>\n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 117183353,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "george.tankersley@gmail.com",
            "sender_full_name": "George Tankersley (F2'17)",
            "sender_id": 102096,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "code generation",
            "submessages": [],
            "timestamp": 1508185609,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/702d182dc365825040b1ad0b85c0fa3c?d=identicon&version=1",
            "client": "website",
            "content": "<p>anyone have clever ideas for how to do this other than writing <em>a lot</em> of those? <span class=\"user-mention\" data-user-email=\"hi@filippo.io\" data-user-id=\"2884\">@Filippo Valsorda (F2'17)</span>  ?</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 117183371,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "george.tankersley@gmail.com",
            "sender_full_name": "George Tankersley (F2'17)",
            "sender_id": 102096,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "code generation",
            "submessages": [],
            "timestamp": 1508185640,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/702d182dc365825040b1ad0b85c0fa3c?d=identicon&version=1",
            "client": "website",
            "content": "<p>(presumably there's \"something something reflection/ast\" i could do, but it might not be faster to figure out than to just do this a bunch, since this only needs to happen once)</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 117183443,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "george.tankersley@gmail.com",
            "sender_full_name": "George Tankersley (F2'17)",
            "sender_id": 102096,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "code generation",
            "submessages": [],
            "timestamp": 1508185750,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/044b59a59f2bfb736b3142db2cd025ca?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"george.tankersley@gmail.com\" data-user-id=\"102096\">@George Tankersley (F2'17)</span> literally text/template?</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 117184395,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "hi@filippo.io",
            "sender_full_name": "Filippo Valsorda (F2'17)",
            "sender_id": 2884,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "code generation",
            "submessages": [],
            "timestamp": 1508187152,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/702d182dc365825040b1ad0b85c0fa3c?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"hi@filippo.io\" data-user-id=\"2884\">@Filippo Valsorda (F2'17)</span> it turned out to be very fast to just tell printf what I wanted it to say</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 117185943,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "george.tankersley@gmail.com",
            "sender_full_name": "George Tankersley (F2'17)",
            "sender_id": 102096,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "code generation",
            "submessages": [],
            "timestamp": 1508189827,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/702d182dc365825040b1ad0b85c0fa3c?d=identicon&version=1",
            "client": "website",
            "content": "<p>(i built a table of the vars and iterated through it, like with tests)</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 117185946,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "george.tankersley@gmail.com",
            "sender_full_name": "George Tankersley (F2'17)",
            "sender_id": 102096,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "code generation",
            "submessages": [],
            "timestamp": 1508189840,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/702d182dc365825040b1ad0b85c0fa3c?d=identicon&version=1",
            "client": "website",
            "content": "<p>Golang: sure there's an elegant solution, but isn't it better to just get it done? (tm)</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 117186067,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f6e0",
                    "emoji_name": "hammer_and_wrench",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "ghthor@gmail.com",
                        "full_name": "Will Drengwitz (he) (W1'17)",
                        "id": 7099
                    },
                    "user_id": 7099
                }
            ],
            "recipient_id": 22624,
            "sender_email": "george.tankersley@gmail.com",
            "sender_full_name": "George Tankersley (F2'17)",
            "sender_id": 102096,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "code generation",
            "submessages": [],
            "timestamp": 1508190019,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/842e08a228d86d5163ac24f95b6a92d321fc7193?x=x&version=2",
            "client": "website",
            "content": "<p>I had a senior engineer once tell me \"Go taught me that sometimes it is ok to cut and paste\"</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 117186217,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f923",
                    "emoji_name": "rolling_on_the_floor_laughing",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "steve@redlua.com",
                        "full_name": "Steven McCarthy (he) (SP2'15)",
                        "id": 7871
                    },
                    "user_id": 7871
                },
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "thumbs_up",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "steve@redlua.com",
                        "full_name": "Steven McCarthy (he) (SP2'15)",
                        "id": 7871
                    },
                    "user_id": 7871
                },
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "thumbs_up",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "hi@filippo.io",
                        "full_name": "Filippo Valsorda (F2'17)",
                        "id": 2884
                    },
                    "user_id": 2884
                },
                {
                    "emoji_code": "1f923",
                    "emoji_name": "rolling_on_the_floor_laughing",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "ghthor@gmail.com",
                        "full_name": "Will Drengwitz (he) (W1'17)",
                        "id": 7099
                    },
                    "user_id": 7099
                },
                {
                    "emoji_code": "1f923",
                    "emoji_name": "rolling_on_the_floor_laughing",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "stanley@zheng.nyc",
                        "full_name": "Stanley Zheng (they) (W1'19)",
                        "id": 100315
                    },
                    "user_id": 100315
                }
            ],
            "recipient_id": 22624,
            "sender_email": "ian@theknown.net",
            "sender_full_name": "Ian Whitlock (S'13)",
            "sender_id": 2119,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "code generation",
            "submessages": [],
            "timestamp": 1508190274,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/a6a0ff0a4a9a86ae7bc4524453d439bd?d=identicon&version=1",
            "client": "website",
            "content": "<p>I'm having trouble getting <a href=\"https://play.golang.org/p/mV2i21Sh7u\" target=\"_blank\" title=\"https://play.golang.org/p/mV2i21Sh7u\">this</a> very minimal example of slices to work- I basically set up two slices and print out what they are, but they're not at all what I expected. I've tried things like changing the value of the index (which gives me the same result...) and changing the names in case I was accidentally shadowing things. Can anyone explain where I'm going wrong?</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 117426182,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "annie.cherk@gmail.com",
            "sender_full_name": "Annie Cherkaev (she/they) (m4'18)",
            "sender_id": 9502,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "trouble with slices",
            "submessages": [],
            "timestamp": 1508517020,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/eb83a236abf1b10c096dc6b656ae856aa58dfeee?x=x&version=2",
            "client": "website",
            "content": "<p>the 'make([]string, 3)' is creating an empty slice of capacity 3, you're then appending to that, if you look closely, you'll see that there additional spaces before the '\"a\", \"b\",...' values in the second example</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 117426510,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "jari@takkala.net",
            "sender_full_name": "Jari Takkala (F2'17)",
            "sender_id": 2853,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "trouble with slices",
            "submessages": [],
            "timestamp": 1508517592,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/eb83a236abf1b10c096dc6b656ae856aa58dfeee?x=x&version=2",
            "client": "website",
            "content": "<p>if you do index+3 in the second example, you'll get the output you're expecting</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 117426557,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "jari@takkala.net",
            "sender_full_name": "Jari Takkala (F2'17)",
            "sender_id": 2853,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "trouble with slices",
            "submessages": [],
            "timestamp": 1508517640,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/eb83a236abf1b10c096dc6b656ae856aa58dfeee?x=x&version=2",
            "client": "website",
            "content": "<p>try initializing the slices with 'make([]string, 0)'</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 117426620,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "jari@takkala.net",
            "sender_full_name": "Jari Takkala (F2'17)",
            "sender_id": 2853,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "trouble with slices",
            "submessages": [],
            "timestamp": 1508517730,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/eb83a236abf1b10c096dc6b656ae856aa58dfeee?x=x&version=2",
            "client": "website",
            "content": "<p>also, in this case, you don't need the make(), you could do for example: t := []string{\"a\", \"b\", \"c\", \"d\", \"e\"}</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 117426641,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "jari@takkala.net",
            "sender_full_name": "Jari Takkala (F2'17)",
            "sender_id": 2853,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "trouble with slices",
            "submessages": [],
            "timestamp": 1508517787,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/eb83a236abf1b10c096dc6b656ae856aa58dfeee?x=x&version=2",
            "client": "website",
            "content": "<p>s/capacity/length</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 117426692,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "jari@takkala.net",
            "sender_full_name": "Jari Takkala (F2'17)",
            "sender_id": 2853,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "trouble with slices",
            "submessages": [],
            "timestamp": 1508517861,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/eb83a236abf1b10c096dc6b656ae856aa58dfeee?x=x&version=2",
            "client": "website",
            "content": "<p>in your example, you're first creating a slice with a default empty value of an empty string, \"\" (see <a href=\"https://tour.golang.org/basics/12\" target=\"_blank\" title=\"https://tour.golang.org/basics/12\">https://tour.golang.org/basics/12</a>), then you're appending your additional characters to those empty strings</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 117426709,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "jari@takkala.net",
            "sender_full_name": "Jari Takkala (F2'17)",
            "sender_id": 2853,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "trouble with slices",
            "submessages": [],
            "timestamp": 1508517961,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/a6a0ff0a4a9a86ae7bc4524453d439bd?d=identicon&version=1",
            "client": "website",
            "content": "<p>oh!! Thanks <span class=\"user-mention\" data-user-email=\"jari@takkala.net\" data-user-id=\"2853\">@Jari Takkala (F2'17)</span> !!</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 117426961,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "annie.cherk@gmail.com",
            "sender_full_name": "Annie Cherkaev (she/they) (m4'18)",
            "sender_id": 9502,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "trouble with slices",
            "submessages": [],
            "timestamp": 1508518408,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/eb83a236abf1b10c096dc6b656ae856aa58dfeee?x=x&version=2",
            "client": "website",
            "content": "<p>no problem! :)</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 117426962,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "jari@takkala.net",
            "sender_full_name": "Jari Takkala (F2'17)",
            "sender_id": 2853,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "trouble with slices",
            "submessages": [],
            "timestamp": 1508518419,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/3ad220596b601687b8785b5fbfa8ecbe?d=identicon&version=1",
            "client": "website",
            "content": "<p>I'm changing teams at work and I'll be writing exclusively Go for the first time - I have some familiarity with the language, mostly because I'm interested in its design, but haven't programmed a lot in it.<br>\nI've gone through A Tour of Go and worked my way through Effective Go over the last few days.<br>\nAre there any other must-read Go books from your perspective?</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 117497272,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "bgmuthalaly@gmail.com",
            "sender_full_name": "Bert Muthalaly (S1'14)",
            "sender_id": 5871,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "learning go",
            "submessages": [],
            "timestamp": 1508685155,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/8ede63f05c0a949ad0dce6b1e120fa5f2a1cc72a?x=x&version=2",
            "client": "website",
            "content": "<p><a href=\"http://www.gopl.io/\" target=\"_blank\" title=\"http://www.gopl.io/\">http://www.gopl.io/</a> is a good read <span class=\"user-mention\" data-user-email=\"bgmuthalaly@gmail.com\" data-user-id=\"5871\">@Bert Muthalaly (S'14)</span></p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 117497473,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "danweasel@gmail.com",
            "sender_full_name": "Andrew Nichols (he) (F2'17)",
            "sender_id": 101997,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "learning go",
            "submessages": [],
            "timestamp": 1508685681,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/3ad220596b601687b8785b5fbfa8ecbe?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"danweasel@gmail.com\" data-user-id=\"101997\">@Andrew Nichols (F2'17)</span> I was surprised to hear mixed reviews of The Go Programming Language early on (mostly in the context of comparisons to The C Programming Language, Kernighan's earlier book).<br>\nWhat did you love about it?</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 117497678,
            "is_me_message": false,
            "last_edit_timestamp": 1508686174,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "bgmuthalaly@gmail.com",
            "sender_full_name": "Bert Muthalaly (S1'14)",
            "sender_id": 5871,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "learning go",
            "submessages": [],
            "timestamp": 1508686127,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/8ede63f05c0a949ad0dce6b1e120fa5f2a1cc72a?x=x&version=2",
            "client": "website",
            "content": "<p>Good clear explanations with nice exercises that'll push you to understand not just the syntax but the idioms. Since I haven't read K&amp;R, I can't directly compare them.</p>\n<p>The other book I've seen come up repeatedly (but haven't read, so I can't recommend it) is Go in Action.</p>\n<p>Not a book, but a valuable tool: <a href=\"https://gobyexample.com/\" target=\"_blank\" title=\"https://gobyexample.com/\">https://gobyexample.com/</a></p>\n<p>You've started with the best two resources in any case. :)</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 117497827,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "danweasel@gmail.com",
            "sender_full_name": "Andrew Nichols (he) (F2'17)",
            "sender_id": 101997,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "learning go",
            "submessages": [],
            "timestamp": 1508686473,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/3ad220596b601687b8785b5fbfa8ecbe?d=identicon&version=1",
            "client": "website",
            "content": "<p>OK, awesome, that's enough for me to check it out :)<br>\nThanks!</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 117497922,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "bgmuthalaly@gmail.com",
            "sender_full_name": "Bert Muthalaly (S1'14)",
            "sender_id": 5871,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "learning go",
            "submessages": [],
            "timestamp": 1508686732,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/702d182dc365825040b1ad0b85c0fa3c?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"bgmuthalaly@gmail.com\" data-user-id=\"5871\">@Bert Muthalaly (S'14)</span> I would also recommend reading parts of the standard library as they become relevant/interesting. I have learned a lot about Go that way</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 117583963,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "george.tankersley@gmail.com",
            "sender_full_name": "George Tankersley (F2'17)",
            "sender_id": 102096,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "learning go",
            "submessages": [],
            "timestamp": 1508864398,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/391eb183c3474a15bf9ad0e87d3ff118?d=identicon&version=1",
            "client": "website",
            "content": "<p>I second that recommendation. Being able to read and understand the go stdlib is still a main driver behind my love of the language.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 117584504,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "ghthor@gmail.com",
            "sender_full_name": "Will Drengwitz (he) (W1'17)",
            "sender_id": 7099,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "learning go",
            "submessages": [],
            "timestamp": 1508865250,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/d4e1d473a995ef37b3e03e9e6006c3e3?d=identicon&version=1",
            "client": "website",
            "content": "<p>I'm looking for data points on what is wrong/surprising/confusing in golang as a language. I'm writing a short talk.  I'm looking for short/concise arguments. For example this rant is awesome <a href=\"https://twitter.com/pasiphae_goals/status/923829078553133057\" target=\"_blank\" title=\"https://twitter.com/pasiphae_goals/status/923829078553133057\">https://twitter.com/pasiphae_goals/status/923829078553133057</a></p>\n<div class=\"inline-preview-twitter\"><div class=\"twitter-tweet\"><a href=\"https://twitter.com/pasiphae_goals/status/923829078553133057\" target=\"_blank\"><img class=\"twitter-avatar\" src=\"https://uploads.zulipusercontent.net/bf49fcd2084067c78bd7856cb83266d634214fd4/687474703a2f2f7062732e7477696d672e636f6d2f70726f66696c655f696d616765732f3830363535373337383432363531393535322f6672314a44484d2d5f6e6f726d616c2e6a7067\"></a><p>Fact #11: go\u2019s error handling has been compared to shoving spaghetti up your nose with a salad fork.</p><span>- Loch Nessa Monster\ud83c\udf38 (@pasiphae_goals)</span></div></div>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 118258259,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "majek04@gmail.com",
            "sender_full_name": "Marek Majkowski (W'13)",
            "sender_id": 824,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "\"Go sucks\"",
            "submessages": [],
            "timestamp": 1510240962,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/d4e1d473a995ef37b3e03e9e6006c3e3?d=identicon&version=1",
            "client": "website",
            "content": "<p>Any suggestions? Any other rants? What were your feeling when you started learning golang?</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 118258268,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "majek04@gmail.com",
            "sender_full_name": "Marek Majkowski (W'13)",
            "sender_id": 824,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "\"Go sucks\"",
            "submessages": [],
            "timestamp": 1510240990,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/661412d42ecbf0c0bd354116859a5af3562f8e5f?x=x&version=4",
            "client": "website",
            "content": "<p>\"go is supposedly a garbage collected language, but it has not once deleted itself nor any of my code.\" got me</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 118260451,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "veit@veitheller.de",
            "sender_full_name": "Veit Heller (he) (S1'17)",
            "sender_id": 101103,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "\"Go sucks\"",
            "submessages": [],
            "timestamp": 1510244340,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/661412d42ecbf0c0bd354116859a5af3562f8e5f?x=x&version=4",
            "client": "website",
            "content": "<p>anyway, all fun aside, <a href=\"https://github.com/ksimka/go-is-not-good\" target=\"_blank\" title=\"https://github.com/ksimka/go-is-not-good\">here</a> is a curated list of articles on why go sucks. it\u2019s curated by someone who likes go, though.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 118260624,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "veit@veitheller.de",
            "sender_full_name": "Veit Heller (he) (S1'17)",
            "sender_id": 101103,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "\"Go sucks\"",
            "submessages": [],
            "timestamp": 1510244570,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/d4e1d473a995ef37b3e03e9e6006c3e3?d=identicon&version=1",
            "client": "website",
            "content": "<p>Noted. Thanks. Keep the rants coming :P</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 118261745,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "majek04@gmail.com",
            "sender_full_name": "Marek Majkowski (W'13)",
            "sender_id": 824,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "\"Go sucks\"",
            "submessages": [],
            "timestamp": 1510246165,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/81c6c8040fc0263607edd05c09dacf6b?d=identicon&version=1",
            "client": "website",
            "content": "<p>(Caveat: I have read a fair bit of Go code, but written practically none.  Don't take my criticisms too seriously.)</p>\n<p>Go seems ok, but I think for me the main thing is that the purported CSP model is broken, which you can tell by the sheer amount of conventional lock-based code that's out there.  That's my biased, pro-Erlang anti-Go view, though.  I'm pretty sure at least one article about this is included in the \"go is not good\" list; channels not being GC'd and other problems.  The implementation of channels also sucked last time I checked, but that's something that can be improved at least.</p>\n<p>The other thing was talking to someone working on another OS's Linux emulation stuff, who mentioned that the Go compiler badly abuses the x86-64 SysV ABI among other things.  This is more of an implementation detail however.</p>\n<p>I guess a third thing, which always comes with language popularity, is that most Go software I've used (if I can even get it to build) is especially buggy and unstable.  Perhaps less so than C, but surprisingly moreso than Python.  There are prominent pieces of Go infrastructure (just to call out a specific example: Prometheus) that I couldn't deploy in production because the routine stress tests my team used to evaluate such things revealed serious problems.</p>\n<p>I've come to have a more favorable view of Go now that I've seen everyone using it more like statically-typed-Python or GC'd-C rather than an ideal implementation of CSP.  I think this has been the case for a long time, but there has been some revisionism here where people forget that early on, channels were a big selling point and it was supposed to replace Erlang.  YMMV.  Sorry if this seems unnecessarily inflamatory; no hate intended towards Go programmers.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 118265307,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "julian@cipht.net",
            "sender_full_name": "Julian Squires (he) (F2'17)",
            "sender_id": 101992,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "\"Go sucks\"",
            "submessages": [],
            "timestamp": 1510251423,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/dcf9561473705b0e781edb4525bed2ac?d=identicon&version=1",
            "client": "website",
            "content": "<p>What is CSP? I'm having a hard time not mapping that to Content Security Policy.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 118265384,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "thumbs_up",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "recurse@sweeting.me",
                        "full_name": "Nick Sweeting (he) (S1'14)",
                        "id": 5883
                    },
                    "user_id": 5883
                }
            ],
            "recipient_id": 22624,
            "sender_email": "ternus@cternus.net",
            "sender_full_name": "Christian Ternus (F1'17)",
            "sender_id": 101717,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "\"Go sucks\"",
            "submessages": [],
            "timestamp": 1510251593,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/661412d42ecbf0c0bd354116859a5af3562f8e5f?x=x&version=4",
            "client": "website",
            "content": "<p><a href=\"https://en.wikipedia.org/wiki/Communicating_sequential_processes\" target=\"_blank\" title=\"https://en.wikipedia.org/wiki/Communicating_sequential_processes\">Communicating sequential processes</a>, a prime example for \"everything old is new again\"</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 118265495,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "veit@veitheller.de",
            "sender_full_name": "Veit Heller (he) (S1'17)",
            "sender_id": 101103,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "\"Go sucks\"",
            "submessages": [],
            "timestamp": 1510251752,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/dcf9561473705b0e781edb4525bed2ac?d=identicon&version=1",
            "client": "website",
            "content": "<p>Ah, thanks.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 118265572,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "ternus@cternus.net",
            "sender_full_name": "Christian Ternus (F1'17)",
            "sender_id": 101717,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "\"Go sucks\"",
            "submessages": [],
            "timestamp": 1510251877,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/661412d42ecbf0c0bd354116859a5af3562f8e5f?x=x&version=4",
            "client": "website",
            "content": "<p>it\u2019s basically a formal language for expressing communication between multiple actors (and their actions), and its fairly similar, but not really, to channels in go</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 118265574,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "veit@veitheller.de",
            "sender_full_name": "Veit Heller (he) (S1'17)",
            "sender_id": 101103,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "\"Go sucks\"",
            "submessages": [],
            "timestamp": 1510251883,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/81c6c8040fc0263607edd05c09dacf6b?d=identicon&version=1",
            "client": "website",
            "content": "<p>IIRC it's the usual cited inspiration for Go's channels.  Incidentally, just above the section on CSP in the Go FAQ, we also have <a href=\"https://golang.org/doc/faq#assertions\" target=\"_blank\" title=\"https://golang.org/doc/faq#assertions\">Why does Go not have assertions?</a>, which is another thing I strongly disagree with.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 118266111,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "julian@cipht.net",
            "sender_full_name": "Julian Squires (he) (F2'17)",
            "sender_id": 101992,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "\"Go sucks\"",
            "submessages": [],
            "timestamp": 1510252599,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/661412d42ecbf0c0bd354116859a5af3562f8e5f?x=x&version=4",
            "client": "website",
            "content": "<p>that\u2019s pretty much the other side of the coin to erlangs \"fail early &amp; fast\" mentality, huh?</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 118267165,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "veit@veitheller.de",
            "sender_full_name": "Veit Heller (he) (S1'17)",
            "sender_id": 101103,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "\"Go sucks\"",
            "submessages": [],
            "timestamp": 1510254030,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/661412d42ecbf0c0bd354116859a5af3562f8e5f?x=x&version=4",
            "client": "website",
            "content": "<p>\"There are many things in the Go language and libraries that differ from modern practices, simply because we feel it's sometimes worth trying a different approach.\"\u2014not saying this is neceassrily bad, but it sure seems like a cop-out to me.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 118267201,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "veit@veitheller.de",
            "sender_full_name": "Veit Heller (he) (S1'17)",
            "sender_id": 101103,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "\"Go sucks\"",
            "submessages": [],
            "timestamp": 1510254080,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/a6a0ff0a4a9a86ae7bc4524453d439bd?d=identicon&version=1",
            "client": "website",
            "content": "<p>I'm unhappy that Go doesn't have tuples because they're useful, and I know you can make a struct but...</p>\n<p>I also dislike that when you grab say keys out of a dictionary and it doesn't have the key it gives you a \"zero value\" and you have to remember to not be lazy and explicitly check if it contains the value- the problem is that the zero value is also a valid key value! That just seems like the kind of mistake I'm going to make. </p>\n<p>It's also strange that golang doesn't have inheritance- I know it has interfaces and maybe I don't grok how to use them but inheritance seems like a really useful abstraction.</p>\n<p>There's something strange about the way golang handles pointers that I remember from the tutorial- discussed <a href=\"https://tour.golang.org/methods/6\" target=\"_blank\" title=\"https://tour.golang.org/methods/6\">here</a>- but where it sometimes casts pointers for you and sometimes doesn't which I find more confusing then just getting compiler errors.</p>\n<p>I also dislike the signatures of the RPC library- that you pass in the args &amp; a return variable both as arguments and the return type is an error; it seems like it would make more sense if the signature was taking an arg and returned a datatype that is either an error or the return type you want...</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 118276158,
            "is_me_message": false,
            "last_edit_timestamp": 1510268139,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "annie.cherk@gmail.com",
            "sender_full_name": "Annie Cherkaev (she/they) (m4'18)",
            "sender_id": 9502,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "\"Go sucks\"",
            "submessages": [],
            "timestamp": 1510267585,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/8ede63f05c0a949ad0dce6b1e120fa5f2a1cc72a?x=x&version=2",
            "client": "website",
            "content": "<p>For the most part when you want inheritance, you can instead use composition of structs/interfaces.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 118276237,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "danweasel@gmail.com",
            "sender_full_name": "Andrew Nichols (he) (F2'17)",
            "sender_id": 101997,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "\"Go sucks\"",
            "submessages": [],
            "timestamp": 1510267694,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/a6a0ff0a4a9a86ae7bc4524453d439bd?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"danweasel@gmail.com\" data-user-id=\"101997\">@Andrew Nichols (F2'17)</span> Fair enough <span class=\"emoji emoji-1f44d\" title=\"thumbs up\">:thumbs_up:</span></p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 118276527,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "annie.cherk@gmail.com",
            "sender_full_name": "Annie Cherkaev (she/they) (m4'18)",
            "sender_id": 9502,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "\"Go sucks\"",
            "submessages": [],
            "timestamp": 1510268267,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/a6a0ff0a4a9a86ae7bc4524453d439bd?d=identicon&version=1",
            "client": "website",
            "content": "<p>Thought of one more complaint: I don't like how you have to set up the GOPATH and use the model that all your golang projects live in the same directory because that's not how I live the rest of my life and I find it highly annoying to not be able to control how I organize my machine</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 118276688,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "annie.cherk@gmail.com",
            "sender_full_name": "Annie Cherkaev (she/they) (m4'18)",
            "sender_id": 9502,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "\"Go sucks\"",
            "submessages": [],
            "timestamp": 1510268486,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/8ede63f05c0a949ad0dce6b1e120fa5f2a1cc72a?x=x&version=2",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"annie.cherk@gmail.com\" data-user-id=\"9502\">@Annie Cherkaev (S2'16)</span> <a href=\"https://getgb.io/\" target=\"_blank\" title=\"https://getgb.io/\">https://getgb.io/</a> is a useful alternative to \"one true GOPATH\" style.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 118277044,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "danweasel@gmail.com",
            "sender_full_name": "Andrew Nichols (he) (F2'17)",
            "sender_id": 101997,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "\"Go sucks\"",
            "submessages": [],
            "timestamp": 1510269169,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/a6a0ff0a4a9a86ae7bc4524453d439bd?d=identicon&version=1",
            "client": "website",
            "content": "<p>oooh nice. I do love build tools. Thanks for the link.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 118277121,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "annie.cherk@gmail.com",
            "sender_full_name": "Annie Cherkaev (she/they) (m4'18)",
            "sender_id": 9502,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "\"Go sucks\"",
            "submessages": [],
            "timestamp": 1510269341,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/702d182dc365825040b1ad0b85c0fa3c?d=identicon&version=1",
            "client": "website",
            "content": "<p>...is a really great library. Specifically, I just noticed you can now easily override the default certificate validation logic by passing <code>InsecureSkipVerify: true</code> and a custom VerifyPeerCertificate func <a href=\"https://github.com/golang/go/issues/16363\" target=\"_blank\" title=\"https://github.com/golang/go/issues/16363\">https://github.com/golang/go/issues/16363</a></p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 118307130,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "george.tankersley@gmail.com",
            "sender_full_name": "George Tankersley (F2'17)",
            "sender_id": 102096,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "crypto/tls",
            "submessages": [],
            "timestamp": 1510331029,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/702d182dc365825040b1ad0b85c0fa3c?d=identicon&version=1",
            "client": "website",
            "content": "<p>(A few months before that patch landed, I had to implement certificate pinning by messing around with a custom TLS dialer and I hadn't noticed it got easier until juuuuust now)</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 118307186,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "george.tankersley@gmail.com",
            "sender_full_name": "George Tankersley (F2'17)",
            "sender_id": 102096,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "crypto/tls",
            "submessages": [],
            "timestamp": 1510331076,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/7d2ab014ebf55e99afffba1a3d92be8155754f0f?x=x&version=1",
            "client": "website",
            "content": "<p>The whole GOPATH thing is definitely something that puts me off. It's absurd that they make it so hard for a non-Go programmer to use the system. For a language that aims to be easy to pickup, they have a bizarre roadblock fairly early in language use.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 118350480,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "261d",
                    "emoji_name": "point_up",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "ternus@cternus.net",
                        "full_name": "Christian Ternus (F1'17)",
                        "id": 101717
                    },
                    "user_id": 101717
                }
            ],
            "recipient_id": 22624,
            "sender_email": "kamal@marhubi.com",
            "sender_full_name": "Kamal Marhubi (he) (m2'18)",
            "sender_id": 8090,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "\"Go sucks\"",
            "submessages": [],
            "timestamp": 1510416445,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/61f7402a76ff0aff964da46bd7948ca20279ae1f?x=x&version=1",
            "client": "website",
            "content": "<p>I found it amusing that <code>for</code> loops cannot be inlined in Go <a href=\"https://github.com/golang/go/issues/14768\" target=\"_blank\" title=\"https://github.com/golang/go/issues/14768\">https://github.com/golang/go/issues/14768</a>  like if you optimize something it has to be the for loops no? <span class=\"emoji emoji-1f643\" title=\"upside down face\">:upside_down_face:</span> as a workaround doing the same loop with a <code>goto</code> allows it to be inlined so you get some extra ns perf if you need it for a certain fast path</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 118485628,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "waldemar.quevedo@gmail.com",
            "sender_full_name": "Waldemar Quevedo (F2'14)",
            "sender_id": 6706,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "\"Go sucks\"",
            "submessages": [],
            "timestamp": 1510690985,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/5ca882c23204bfc3a53558da17fdb03caf83ced2?x=x&version=1",
            "client": "website",
            "content": "<p>dependency management on go always strikes me as particularly abysmal; i've been using whatever the 'officially' supported thing is but it's still in beta/alpha whatever. (i think it's <code>dep</code>?)</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 118499596,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "lisa.neigut@gmail.com",
            "sender_full_name": "Lisa Neigut (she) (S'12)",
            "sender_id": 917,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "\"Go sucks\"",
            "submessages": [],
            "timestamp": 1510715610,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/5ca882c23204bfc3a53558da17fdb03caf83ced2?x=x&version=1",
            "client": "website",
            "content": "<p>i believe this is strongly correlated to the GOPATH misery</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 118499598,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "lisa.neigut@gmail.com",
            "sender_full_name": "Lisa Neigut (she) (S'12)",
            "sender_id": 917,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "\"Go sucks\"",
            "submessages": [],
            "timestamp": 1510715637,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/5ca882c23204bfc3a53558da17fdb03caf83ced2?x=x&version=1",
            "client": "website",
            "content": "<p>keeping golang projects nicely colocated w/ non golang projects in a directory isn't straightforward</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 118499641,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "lisa.neigut@gmail.com",
            "sender_full_name": "Lisa Neigut (she) (S'12)",
            "sender_id": 917,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "\"Go sucks\"",
            "submessages": [],
            "timestamp": 1510715699,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/5ca882c23204bfc3a53558da17fdb03caf83ced2?x=x&version=1",
            "client": "website",
            "content": "<p>i found the pointer/inheritance type stuff really really non-intuitive until last week, when i stumbled onto <span class=\"user-mention\" data-user-email=\"jordanorelli@gmail.com\" data-user-id=\"872\">@Jordan Orelli (F'11)</span> 's blog post on them <a href=\"http://jordanorelli.com/post/32665860244/how-to-use-interfaces-in-go\" target=\"_blank\" title=\"http://jordanorelli.com/post/32665860244/how-to-use-interfaces-in-go\">http://jordanorelli.com/post/32665860244/how-to-use-interfaces-in-go</a>.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 118499695,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "lisa.neigut@gmail.com",
            "sender_full_name": "Lisa Neigut (she) (S'12)",
            "sender_id": 917,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "\"Go sucks\"",
            "submessages": [],
            "timestamp": 1510715791,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/5ca882c23204bfc3a53558da17fdb03caf83ced2?x=x&version=1",
            "client": "website",
            "content": "<p>figuring out how 'inheritance' works honestly changed my opinion of the language, for the positive</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 118499702,
            "is_me_message": false,
            "last_edit_timestamp": 1510715895,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "lisa.neigut@gmail.com",
            "sender_full_name": "Lisa Neigut (she) (S'12)",
            "sender_id": 917,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "\"Go sucks\"",
            "submessages": [],
            "timestamp": 1510715822,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/702d182dc365825040b1ad0b85c0fa3c?d=identicon&version=1",
            "client": "website",
            "content": "<p>Speaking of the Go inliner, it can't inline assembly functions! So if you write code that looks like this awful crap <a href=\"https://github.com/gtank/gophercon2017-examples/blob/master/multiply.go\" target=\"_blank\" title=\"https://github.com/gtank/gophercon2017-examples/blob/master/multiply.go\">https://github.com/gtank/gophercon2017-examples/blob/master/multiply.go</a> you can get better performance than if you'd written it in asm</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 118503347,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f629",
                    "emoji_name": "weary",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "phoebe@slub.co",
                        "full_name": "phoebe beatrice jenkins (she) (m4'18)",
                        "id": 101991
                    },
                    "user_id": 101991
                }
            ],
            "recipient_id": 22624,
            "sender_email": "george.tankersley@gmail.com",
            "sender_full_name": "George Tankersley (F2'17)",
            "sender_id": 102096,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "\"Go sucks\"",
            "submessages": [],
            "timestamp": 1510723403,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/044b59a59f2bfb736b3142db2cd025ca?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"majek04@gmail.com\" data-user-id=\"824\">@Marek Majkowski (W'13)</span> I'm late to the discussion, and oh-so-obviously biased, but that Twitter rant started nice and insightful, and turned very fast to mean to people personally, factually incorrect (the xor thing for example), and a lot of \"oh Go doesn't implement the full literature on convex recursive partial numbers, and just confusing boring numbers\" which misses the point of Go</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 118527520,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "hi@filippo.io",
            "sender_full_name": "Filippo Valsorda (F2'17)",
            "sender_id": 2884,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "\"Go sucks\"",
            "submessages": [],
            "timestamp": 1510768172,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/044b59a59f2bfb736b3142db2cd025ca?d=identicon&version=1",
            "client": "website",
            "content": "<p>Go has a very clear and explicit position on the tradeoff between explicit/simple and implicit/\"expressive\". It's always trying to give you as few tools as it can, so that everybody will be familiar with them when reading code, and tries to always make everything the program does explicit, so that you don't have to read any other part of the codebase to understand what's going on.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 118527695,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "hi@filippo.io",
            "sender_full_name": "Filippo Valsorda (F2'17)",
            "sender_id": 2884,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "\"Go sucks\"",
            "submessages": [],
            "timestamp": 1510768295,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/044b59a59f2bfb736b3142db2cd025ca?d=identicon&version=1",
            "client": "website",
            "content": "<p>It does fail of course sometimes, for example on dependency management, but I think a bunch of the things mentioned in that thread simply wouldn't belong in Go</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 118527744,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "hi@filippo.io",
            "sender_full_name": "Filippo Valsorda (F2'17)",
            "sender_id": 2884,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "\"Go sucks\"",
            "submessages": [],
            "timestamp": 1510768333,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/044b59a59f2bfb736b3142db2cd025ca?d=identicon&version=1",
            "client": "website",
            "content": "<p>Ah, and about GOPATH, the struggle is real. I built this to help a little: <a href=\"https://github.com/FiloSottile/hellogopher\" target=\"_blank\" title=\"https://github.com/FiloSottile/hellogopher\">https://github.com/FiloSottile/hellogopher</a></p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 118527753,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "hi@filippo.io",
            "sender_full_name": "Filippo Valsorda (F2'17)",
            "sender_id": 2884,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "\"Go sucks\"",
            "submessages": [],
            "timestamp": 1510768356,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/3ad220596b601687b8785b5fbfa8ecbe?d=identicon&version=1",
            "client": "website",
            "content": "<p>Is there any precedent in Go for writing unit tests in the same package as the code under test? <br>\nI'm currently working on a library called <a href=\"https://github.com/google/netstack/tree/master/tcpip\" target=\"_blank\" title=\"https://github.com/google/netstack/tree/master/tcpip\">netstack</a> which has test cases specified in a separate package from the code under test (e.g. <a href=\"https://github.com/google/netstack/blob/master/tcpip/transport/tcp/tcp_test.go\" target=\"_blank\" title=\"https://github.com/google/netstack/blob/master/tcpip/transport/tcp/tcp_test.go\">tcp_test.go</a>).</p>\n<p>I'd like to write more granular tests than these using functions from the package under test that aren't publicly visible.</p>\n<p>I know that this is usually a smell that something is wrong with the public API of the code under test, but there a few reasons why I think this is actually reasonable in this case that I'd be happy to go into if anyone is interested.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 118791635,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "bgmuthalaly@gmail.com",
            "sender_full_name": "Bert Muthalaly (S1'14)",
            "sender_id": 5871,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "go unit testing and package visibility",
            "submessages": [],
            "timestamp": 1511295489,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/8ede63f05c0a949ad0dce6b1e120fa5f2a1cc72a?x=x&version=2",
            "client": "website",
            "content": "<p>Yeah you can just declare your test files to be in the same package, and you'll have access to unexported stuff.</p>\n<p>I've seen both styles used, for unit tests on private functions vs testing the actual interface of your package.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 118792149,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "danweasel@gmail.com",
            "sender_full_name": "Andrew Nichols (he) (F2'17)",
            "sender_id": 101997,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "go unit testing and package visibility",
            "submessages": [],
            "timestamp": 1511296369,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/391eb183c3474a15bf9ad0e87d3ff118?d=identicon&version=1",
            "client": "ZulipMobile",
            "content": "<p>It's fine, it just means the tests are more about sanity checks then specifying the behavior or UI of the package. I do this, but the tests are essentially part of the implementation and aren't super useful for performing refactoring. I usually document that intention in the test code, which basically means, if this breaks just delete it and rewrite new tests for the new implementation.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 118793459,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "ghthor@gmail.com",
            "sender_full_name": "Will Drengwitz (he) (W1'17)",
            "sender_id": 7099,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "go unit testing and package visibility",
            "submessages": [],
            "timestamp": 1511298522,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/842e08a228d86d5163ac24f95b6a92d321fc7193?x=x&version=2",
            "client": "website",
            "content": "<p>I've been writing Go as my day job for almost two years now and I gotta say the title of this thread successfully flame-baited me</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 119469230,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "ian@theknown.net",
            "sender_full_name": "Ian Whitlock (S'13)",
            "sender_id": 2119,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "\"Go sucks\"",
            "submessages": [],
            "timestamp": 1512688161,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/842e08a228d86d5163ac24f95b6a92d321fc7193?x=x&version=2",
            "client": "website",
            "content": "<p>Go is <em>adequate</em>, dammit!</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 119469245,
            "is_me_message": false,
            "last_edit_timestamp": 1512688211,
            "reactions": [
                {
                    "emoji_code": "261d",
                    "emoji_name": "point_up",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "travis@mcdem.us",
                        "full_name": "Travis McDemus (S'13)",
                        "id": 2139
                    },
                    "user_id": 2139
                },
                {
                    "emoji_code": "1f604",
                    "emoji_name": "smile",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "bgmuthalaly@gmail.com",
                        "full_name": "Bert Muthalaly (S1'14)",
                        "id": 5871
                    },
                    "user_id": 5871
                },
                {
                    "emoji_code": "261d",
                    "emoji_name": "point_up",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "steve@redlua.com",
                        "full_name": "Steven McCarthy (he) (SP2'15)",
                        "id": 7871
                    },
                    "user_id": 7871
                },
                {
                    "emoji_code": "1f604",
                    "emoji_name": "smile",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "sonali@recurse.com",
                        "full_name": "Sonali Sridhar",
                        "id": 812
                    },
                    "user_id": 812
                },
                {
                    "emoji_code": "1f604",
                    "emoji_name": "smile",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "ghthor@gmail.com",
                        "full_name": "Will Drengwitz (he) (W1'17)",
                        "id": 7099
                    },
                    "user_id": 7099
                },
                {
                    "emoji_code": "1f604",
                    "emoji_name": "smile",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "danweasel@gmail.com",
                        "full_name": "Andrew Nichols (he) (F2'17)",
                        "id": 101997
                    },
                    "user_id": 101997
                },
                {
                    "emoji_code": "1f604",
                    "emoji_name": "smile",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "james@recurse.com",
                        "full_name": "James J. Porter (he) (S'13)",
                        "id": 2113
                    },
                    "user_id": 2113
                }
            ],
            "recipient_id": 22624,
            "sender_email": "ian@theknown.net",
            "sender_full_name": "Ian Whitlock (S'13)",
            "sender_id": 2119,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "\"Go sucks\"",
            "submessages": [],
            "timestamp": 1512688200,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/a3e610d8bcbd1089a39b1a8caf972ab6?d=identicon&version=1",
            "client": "ZulipElectron",
            "content": "<p>In case anyone doing Go hasn't heard yet, <span class=\"user-mention\" data-user-email=\"atmalagon@gmail.com\" data-user-id=\"103124\">@Ana Malagon (W1'17)</span> and I and a few others have been doing a practice interview problem every morning. Feel free to join. I also made a stream for it: <a class=\"stream\" data-stream-id=\"110048\" href=\"/#narrow/stream/golang%20morning%20practice\">#golang morning practice</a></p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 120892704,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "tyler.tape@gmail.com",
            "sender_full_name": "Tyler Tape (he) (W1'17)",
            "sender_id": 103045,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "morning practice problems",
            "submessages": [],
            "timestamp": 1515625179,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/c55d5b0f6b48fe10eae3bd82fdc9ec479c66f7b7?x=x&version=1",
            "client": "website",
            "content": "<p>It turns out that searching for \"go `\" doesn't yield anything useful...</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 121387017,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "msteigerwalt@gmail.com",
            "sender_full_name": "Michelle Steigerwalt (she/her) (W2'17)",
            "sender_id": 7655,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "`",
            "submessages": [],
            "timestamp": 1516635772,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/c55d5b0f6b48fe10eae3bd82fdc9ec479c66f7b7?x=x&version=1",
            "client": "website",
            "content": "<p>But I'm seeing like </p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kd\">type</span> <span class=\"nx\">Client</span> <span class=\"kd\">struct</span> <span class=\"p\">{</span>\n    <span class=\"nx\">Id</span>          <span class=\"kt\">int32</span>                   <span class=\"s\">`protobuf:&quot;varint,1,opt,name=id&quot; json:&quot;id,omitempty&quot;`</span>\n<span class=\"p\">}</span>\n</pre></div>\n\n\n<p>And am curious if it's a comment or what.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 121387026,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "msteigerwalt@gmail.com",
            "sender_full_name": "Michelle Steigerwalt (she/her) (W2'17)",
            "sender_id": 7655,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "`",
            "submessages": [],
            "timestamp": 1516635794,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/c55d5b0f6b48fe10eae3bd82fdc9ec479c66f7b7?x=x&version=1",
            "client": "website",
            "content": "<p>Syntax highlighting seems to indicate it is.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 121387031,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "msteigerwalt@gmail.com",
            "sender_full_name": "Michelle Steigerwalt (she/her) (W2'17)",
            "sender_id": 7655,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "`",
            "submessages": [],
            "timestamp": 1516635804,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/661412d42ecbf0c0bd354116859a5af3562f8e5f?x=x&version=4",
            "client": "website",
            "content": "<p>this is actually a <a href=\"https://golang.org/ref/spec#Tag\" target=\"_blank\" title=\"https://golang.org/ref/spec#Tag\">struct tag</a> those are useful for reflection</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 121387089,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "veit@veitheller.de",
            "sender_full_name": "Veit Heller (he) (S1'17)",
            "sender_id": 101103,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "`",
            "submessages": [],
            "timestamp": 1516635872,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/661412d42ecbf0c0bd354116859a5af3562f8e5f?x=x&version=4",
            "client": "website",
            "content": "<p>in this case it tells the protobuf and json packages how to handle the field (it will be lowercased in the serialization, omitted when empty in json, and is optional in protobuf)</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 121387131,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "veit@veitheller.de",
            "sender_full_name": "Veit Heller (he) (S1'17)",
            "sender_id": 101103,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "`",
            "submessages": [],
            "timestamp": 1516635928,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/661412d42ecbf0c0bd354116859a5af3562f8e5f?x=x&version=4",
            "client": "website",
            "content": "<p>it\u2019s one of my less favorite go features, but fairly useful in serialization/deserialization to and from various formats</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 121387181,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "veit@veitheller.de",
            "sender_full_name": "Veit Heller (he) (S1'17)",
            "sender_id": 101103,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "`",
            "submessages": [],
            "timestamp": 1516635967,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/c55d5b0f6b48fe10eae3bd82fdc9ec479c66f7b7?x=x&version=1",
            "client": "website",
            "content": "<p>Oh that is pretty hacky.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 121387276,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "msteigerwalt@gmail.com",
            "sender_full_name": "Michelle Steigerwalt (she/her) (W2'17)",
            "sender_id": 7655,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "`",
            "submessages": [],
            "timestamp": 1516636148,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/c55d5b0f6b48fe10eae3bd82fdc9ec479c66f7b7?x=x&version=1",
            "client": "website",
            "content": "<p>I feel like a lot of Go though is just convention to make things easier when a large corporation is using it to do lots of things.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 121387282,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "msteigerwalt@gmail.com",
            "sender_full_name": "Michelle Steigerwalt (she/her) (W2'17)",
            "sender_id": 7655,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "`",
            "submessages": [],
            "timestamp": 1516636169,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/661412d42ecbf0c0bd354116859a5af3562f8e5f?x=x&version=4",
            "client": "website",
            "content": "<p>it\u2019s pretty much just \"is it useful for Google? It\u2019s part of the language now.\"</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 121387340,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "veit@veitheller.de",
            "sender_full_name": "Veit Heller (he) (S1'17)",
            "sender_id": 101103,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "`",
            "submessages": [],
            "timestamp": 1516636204,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/661412d42ecbf0c0bd354116859a5af3562f8e5f?x=x&version=4",
            "client": "website",
            "content": "<p>this is especially apparent in gopacket. there are a few types of packages that are just not implemented, and it\u2019s not documented anywhere. the package types are fairly esoteric (MLPS packets wrapped in SFlow), but one of m clients shot themselves in the foot with it and I got to debug it. After a few hours I found <a href=\"https://github.com/google/gopacket/blob/master/layers/sflow.go#L529\" target=\"_blank\" title=\"https://github.com/google/gopacket/blob/master/layers/sflow.go#L529\">this</a>.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 121387423,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "veit@veitheller.de",
            "sender_full_name": "Veit Heller (he) (S1'17)",
            "sender_id": 101103,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "`",
            "submessages": [],
            "timestamp": 1516636335,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/c55d5b0f6b48fe10eae3bd82fdc9ec479c66f7b7?x=x&version=1",
            "client": "website",
            "content": "<p>It's kind of interesting though because reading through the code you just get this very minimalist view of This is Just How Things Are Done and there aren't a whole lot of other strange ways to do things.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 121387425,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "msteigerwalt@gmail.com",
            "sender_full_name": "Michelle Steigerwalt (she/her) (W2'17)",
            "sender_id": 7655,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "`",
            "submessages": [],
            "timestamp": 1516636339,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/661412d42ecbf0c0bd354116859a5af3562f8e5f?x=x&version=4",
            "client": "website",
            "content": "<p>totally! it\u2019s good for the language, not so great for the standard library IMO</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 121387433,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "veit@veitheller.de",
            "sender_full_name": "Veit Heller (he) (S1'17)",
            "sender_id": 101103,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "`",
            "submessages": [],
            "timestamp": 1516636371,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/c55d5b0f6b48fe10eae3bd82fdc9ec479c66f7b7?x=x&version=1",
            "client": "website",
            "content": "<p>Yeah, if I <em>really</em> wanted to master Go I'd probably have to work at Google (never gonna happen; they don't believe my style of programming is real) or a company with xooglers.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 121387440,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "msteigerwalt@gmail.com",
            "sender_full_name": "Michelle Steigerwalt (she/her) (W2'17)",
            "sender_id": 7655,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "`",
            "submessages": [],
            "timestamp": 1516636392,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/c55d5b0f6b48fe10eae3bd82fdc9ec479c66f7b7?x=x&version=1",
            "client": "website",
            "content": "<p>But this is just unpacking a protobuf and chunking it up so I can probably manage.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 121387449,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "msteigerwalt@gmail.com",
            "sender_full_name": "Michelle Steigerwalt (she/her) (W2'17)",
            "sender_id": 7655,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "`",
            "submessages": [],
            "timestamp": 1516636430,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/c55d5b0f6b48fe10eae3bd82fdc9ec479c66f7b7?x=x&version=1",
            "client": "website",
            "content": "<p>Though I'd <em>really</em> like to do a serious project in it. <span class=\"emoji emoji-1f914\" title=\"thinking face\">:thinking_face:</span></p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 121387492,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "msteigerwalt@gmail.com",
            "sender_full_name": "Michelle Steigerwalt (she/her) (W2'17)",
            "sender_id": 7655,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "`",
            "submessages": [],
            "timestamp": 1516636448,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/661412d42ecbf0c0bd354116859a5af3562f8e5f?x=x&version=4",
            "client": "website",
            "content": "<p>i\u2019ve written a fair amount of Go. hip low-level internet companies (as in, real networking type things) use it a lot, at least in europe.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 121387493,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "veit@veitheller.de",
            "sender_full_name": "Veit Heller (he) (S1'17)",
            "sender_id": 101103,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "`",
            "submessages": [],
            "timestamp": 1516636452,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/661412d42ecbf0c0bd354116859a5af3562f8e5f?x=x&version=4",
            "client": "website",
            "content": "<p>i\u2019m talking ISPs/IXPs and such</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 121387537,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "veit@veitheller.de",
            "sender_full_name": "Veit Heller (he) (S1'17)",
            "sender_id": 101103,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "`",
            "submessages": [],
            "timestamp": 1516636471,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/6527e077e84e20214d5373101ea15910d6b6f7a3?x=x&version=1",
            "client": "website",
            "content": "<p>Hey y'all. I'm working on setting up an https server in pure go as a fun learning exercise. I found <a href=\"https://blog.gopheracademy.com/advent-2016/exposing-go-on-the-internet/\" target=\"_blank\" title=\"https://blog.gopheracademy.com/advent-2016/exposing-go-on-the-internet/\">this fun post</a> by <span class=\"user-mention\" data-user-email=\"hi@filippo.io\" data-user-id=\"2884\">@Filippo Valsorda (F2'17)</span> , which was super helpful for getting a general sever config up. And I used the <a href=\"https://godoc.org/golang.org/x/crypto/acme/autocert#example-Manager\" target=\"_blank\" title=\"https://godoc.org/golang.org/x/crypto/acme/autocert#example-Manager\">autocert manager example</a> to get most of the rest of the way there.<br>\nHowever, I'm pretty unfamiliar with this stuff, and it <em>is</em> security related. So I was wondering if anyone wanted to give it a look?<br>\n<a href=\"https://gist.github.com/ifo/aaa10a90a5074dd7a5160adf5e252f33\" target=\"_blank\" title=\"https://gist.github.com/ifo/aaa10a90a5074dd7a5160adf5e252f33\">Here's the gist</a><br>\nBy the by, I eventually I intend to put this somewhere in the quine.space domain. You can technically see this example at <a href=\"https://playground.quine.space\" target=\"_blank\" title=\"https://playground.quine.space\">https://playground.quine.space</a> right now, though eventually I'll actually turn it into a quine and all that.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 121650556,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "steve@redlua.com",
            "sender_full_name": "Steven McCarthy (he) (SP2'15)",
            "sender_id": 7871,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "HTTPS server with Let's Encrypt - how bad is it?",
            "submessages": [],
            "timestamp": 1517099278,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/115cc18c6976b3afa7f0727fd7c57d27?d=identicon&version=1",
            "client": "website",
            "content": "<p>I'd be interested in what  you learn -- I've been putting my golang servers behind NGINX, and I didn't know this was a possibility.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 121652601,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "charlesholbrow@gmail.com",
            "sender_full_name": "Charles Joseph Holbrow (he) (m1'18)",
            "sender_id": 105433,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "HTTPS server with Let's Encrypt - how bad is it?",
            "submessages": [],
            "timestamp": 1517103656,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/661412d42ecbf0c0bd354116859a5af3562f8e5f?x=x&version=4",
            "client": "website",
            "content": "<p>hey! i\u2019m writing a little webapp and i would like to tinker a little with graphl. my current stack is gorm+gin, and i can\u2019t seem to figure out what graphql library to use how and how to make it interact cleanly with the rest of the stack. most graphl libraries seem to have subpar documentation, and it\u2019s making me very sad. am i missing something?</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 121880024,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "veit@veitheller.de",
            "sender_full_name": "Veit Heller (he) (S1'17)",
            "sender_id": 101103,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "graphl situation",
            "submessages": [],
            "timestamp": 1517492616,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/6527e077e84e20214d5373101ea15910d6b6f7a3?x=x&version=1",
            "client": "website",
            "content": "<p>Welp, good idea or not, it's now live: <a href=\"https://https.quine.space/\" target=\"_blank\" title=\"https://https.quine.space/\">https://https.quine.space/</a></p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 121987890,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "thumbs_up",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "veit@veitheller.de",
                        "full_name": "Veit Heller (he) (S1'17)",
                        "id": 101103
                    },
                    "user_id": 101103
                },
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "thumbs_up",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "stanley@zheng.nyc",
                        "full_name": "Stanley Zheng (they) (W1'19)",
                        "id": 100315
                    },
                    "user_id": 100315
                },
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "thumbs_up",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "ds2643@columbia.edu",
                        "full_name": "David Shaked (W2'16)",
                        "id": 8995
                    },
                    "user_id": 8995
                }
            ],
            "recipient_id": 22624,
            "sender_email": "steve@redlua.com",
            "sender_full_name": "Steven McCarthy (he) (SP2'15)",
            "sender_id": 7871,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "HTTPS server with Let's Encrypt - how bad is it?",
            "submessages": [],
            "timestamp": 1517702822,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/6527e077e84e20214d5373101ea15910d6b6f7a3?x=x&version=1",
            "client": "website",
            "content": "<p>I've noticed that this code doesn't correctly handle the first request, where it actually gets the cert. Maybe it isn't attempting to redirect that one? I'll have to experiment more.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 121987897,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "steve@redlua.com",
            "sender_full_name": "Steven McCarthy (he) (SP2'15)",
            "sender_id": 7871,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "HTTPS server with Let's Encrypt - how bad is it?",
            "submessages": [],
            "timestamp": 1517702855,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/6527e077e84e20214d5373101ea15910d6b6f7a3?x=x&version=1",
            "client": "website",
            "content": "<p>But I have learned, at least in theory, how NGINX and other things allow you to handle multiple domains, even though everything's going through the same two ports. I may attempt to make a very bad <span class=\"emoji emoji-2122\" title=\"tm\">:tm:</span> version of this in the future.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 121987947,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "steve@redlua.com",
            "sender_full_name": "Steven McCarthy (he) (SP2'15)",
            "sender_id": 7871,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "HTTPS server with Let's Encrypt - how bad is it?",
            "submessages": [],
            "timestamp": 1517702973,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/6527e077e84e20214d5373101ea15910d6b6f7a3?x=x&version=1",
            "client": "website",
            "content": "<p>Also it throws a ton of TLS errors. Maybe that's normal but other programs don't log as verbosely? Though more likely is that it just doesn't handle things well <span class=\"emoji emoji-1f605\" title=\"sweat smile\">:sweat_smile:</span></p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 121988004,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f6e0",
                    "emoji_name": "hammer_and_wrench",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "charlesholbrow@gmail.com",
                        "full_name": "Charles Joseph Holbrow (he) (m1'18)",
                        "id": 105433
                    },
                    "user_id": 105433
                }
            ],
            "recipient_id": 22624,
            "sender_email": "steve@redlua.com",
            "sender_full_name": "Steven McCarthy (he) (SP2'15)",
            "sender_id": 7871,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "HTTPS server with Let's Encrypt - how bad is it?",
            "submessages": [],
            "timestamp": 1517703107,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/612c7c2a108d7850c62d1d2293a481aa42855408?x=x&version=2",
            "client": "ZulipMobile",
            "content": "<p>Can anyone recommend a good graph library capable of a variety of standard operations?</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 122093380,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "PLRedmond@gmail.com",
            "sender_full_name": "Patrick Redmond (W'14)",
            "sender_id": 5014,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "Graph libraries",
            "submessages": [],
            "timestamp": 1517927020,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/612c7c2a108d7850c62d1d2293a481aa42855408?x=x&version=2",
            "client": "website",
            "content": "<p>some things i need to do with the graph:<br>\n- reverse all the edges<br>\n- find spanning trees<br>\n- produce a graphviz diagram<br>\netc..</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 122114638,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "PLRedmond@gmail.com",
            "sender_full_name": "Patrick Redmond (W'14)",
            "sender_id": 5014,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "Graph libraries",
            "submessages": [],
            "timestamp": 1517957725,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/612c7c2a108d7850c62d1d2293a481aa42855408?x=x&version=2",
            "client": "website",
            "content": "<p>i've done everything so far in haskell, but my job is probably going to ask me to rewrite it soon :heh:</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 122114640,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "PLRedmond@gmail.com",
            "sender_full_name": "Patrick Redmond (W'14)",
            "sender_id": 5014,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "Graph libraries",
            "submessages": [],
            "timestamp": 1517957757,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/7d2ab014ebf55e99afffba1a3d92be8155754f0f?x=x&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"steve@redlua.com\" data-user-id=\"7871\">@Steven McCarthy (SP2'15)</span> this is hilarious. Am I right to understand that this doesn't care where it's hosted, and uses the HTTP request to figure out what name to request the cert for?</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 122123135,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "kamal@marhubi.com",
            "sender_full_name": "Kamal Marhubi (he) (m2'18)",
            "sender_id": 8090,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "HTTPS server with Let's Encrypt - how bad is it?",
            "submessages": [],
            "timestamp": 1517974324,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/7d2ab014ebf55e99afffba1a3d92be8155754f0f?x=x&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"PLRedmond@gmail.com\" data-user-id=\"5014\">@Patrick Redmond (W'14)</span> I have absolutely no experience with it, but <a href=\"https://github.com/cayleygraph/cayley\" target=\"_blank\" title=\"https://github.com/cayleygraph/cayley\">cayley</a> is a graph database written in go. Of interest: it can be used as a go library, and has a memory-based backend.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 122123192,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "kamal@marhubi.com",
            "sender_full_name": "Kamal Marhubi (he) (m2'18)",
            "sender_id": 8090,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "Graph libraries",
            "submessages": [],
            "timestamp": 1517974457,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/612c7c2a108d7850c62d1d2293a481aa42855408?x=x&version=2",
            "client": "ZulipMobile",
            "content": "<p>Thanks! I'll take a look at it today.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 122140416,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "PLRedmond@gmail.com",
            "sender_full_name": "Patrick Redmond (W'14)",
            "sender_id": 5014,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "Graph libraries",
            "submessages": [],
            "timestamp": 1518012615,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/6527e077e84e20214d5373101ea15910d6b6f7a3?x=x&version=1",
            "client": "website",
            "content": "<p>Huh. I hadn't realized the significance of that, but yeah <span class=\"user-mention\" data-user-email=\"kamal@marhubi.com\" data-user-id=\"8090\">@Kamal Marhubi (S1'15)</span> ! The only caveat is that the default <code>autocert.HostWhitelist</code> will require it to be within the quine.space domain, or some subdomain (I believe).<br>\nBut yeah, as you say. This code has been used without modification to create a cert for playground.quine.space (no longer exists), and https.quine.space :)</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 122163626,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "steve@redlua.com",
            "sender_full_name": "Steven McCarthy (he) (SP2'15)",
            "sender_id": 7871,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "HTTPS server with Let's Encrypt - how bad is it?",
            "submessages": [],
            "timestamp": 1518050561,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/7d2ab014ebf55e99afffba1a3d92be8155754f0f?x=x&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"steve@redlua.com\" data-user-id=\"7871\">@Steven McCarthy (SP2'15)</span> if I'm reading <a href=\"https://github.com/golang/crypto/blob/master/acme/autocert/autocert.go\" target=\"_blank\" title=\"https://github.com/golang/crypto/blob/master/acme/autocert/autocert.go\">the source</a> correctly, removing the host whitelist would allow it to work on any domain. Is that right?</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 122214974,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "kamal@marhubi.com",
            "sender_full_name": "Kamal Marhubi (he) (m2'18)",
            "sender_id": 8090,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "HTTPS server with Let's Encrypt - how bad is it?",
            "submessages": [],
            "timestamp": 1518148336,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/6527e077e84e20214d5373101ea15910d6b6f7a3?x=x&version=1",
            "client": "website",
            "content": "<p>I believe so <span class=\"user-mention\" data-user-email=\"kamal@marhubi.com\" data-user-id=\"8090\">@Kamal Marhubi (S1'15)</span></p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 122282939,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "steve@redlua.com",
            "sender_full_name": "Steven McCarthy (he) (SP2'15)",
            "sender_id": 7871,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "HTTPS server with Let's Encrypt - how bad is it?",
            "submessages": [],
            "timestamp": 1518291085,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/7d2ab014ebf55e99afffba1a3d92be8155754f0f?x=x&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"steve@redlua.com\" data-user-id=\"7871\">@Steven McCarthy (SP2'15)</span>  do you accept pull requests? :-)</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 122293986,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "kamal@marhubi.com",
            "sender_full_name": "Kamal Marhubi (he) (m2'18)",
            "sender_id": 8090,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "HTTPS server with Let's Encrypt - how bad is it?",
            "submessages": [],
            "timestamp": 1518318462,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/6527e077e84e20214d5373101ea15910d6b6f7a3?x=x&version=1",
            "client": "website",
            "content": "<p>Most certainly <span class=\"user-mention\" data-user-email=\"kamal@marhubi.com\" data-user-id=\"8090\">@Kamal Marhubi (S1'15)</span> . Lemme finally update the repo real quick: <a href=\"https://github.com/ifo/quine.space\" target=\"_blank\" title=\"https://github.com/ifo/quine.space\">https://github.com/ifo/quine.space</a></p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 122319877,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "steve@redlua.com",
            "sender_full_name": "Steven McCarthy (he) (SP2'15)",
            "sender_id": 7871,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "HTTPS server with Let's Encrypt - how bad is it?",
            "submessages": [],
            "timestamp": 1518380474,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/6527e077e84e20214d5373101ea15910d6b6f7a3?x=x&version=1",
            "client": "website",
            "content": "<p>Updated!</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 122320147,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "steve@redlua.com",
            "sender_full_name": "Steven McCarthy (he) (SP2'15)",
            "sender_id": 7871,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "HTTPS server with Let's Encrypt - how bad is it?",
            "submessages": [],
            "timestamp": 1518381138,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/c55d5b0f6b48fe10eae3bd82fdc9ec479c66f7b7?x=x&version=1",
            "client": "website",
            "content": "<p>I dunno why I'm having such a hard time grokking IO in golang, but like, why can't I have a ReaderWriter that writes <em>and</em> reads?  Changing the states between readers and writers gets confusing. <span class=\"emoji emoji-1f63f\" title=\"crying cat face\">:crying_cat_face:</span></p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 122351989,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "msteigerwalt@gmail.com",
            "sender_full_name": "Michelle Steigerwalt (she/her) (W2'17)",
            "sender_id": 7655,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "Readers and Writers",
            "submessages": [],
            "timestamp": 1518450964,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/c55d5b0f6b48fe10eae3bd82fdc9ec479c66f7b7?x=x&version=1",
            "client": "website",
            "content": "<p>Also, do I need a mutex to do a bunch of concurrent reads on the same file?</p>\n<p>(Asking for a friend.)</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 122352013,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "msteigerwalt@gmail.com",
            "sender_full_name": "Michelle Steigerwalt (she/her) (W2'17)",
            "sender_id": 7655,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "Readers and Writers",
            "submessages": [],
            "timestamp": 1518451007,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/8ede63f05c0a949ad0dce6b1e120fa5f2a1cc72a?x=x&version=2",
            "client": "website",
            "content": "<p><a href=\"https://golang.org/pkg/bufio/#NewReadWriter\" target=\"_blank\" title=\"https://golang.org/pkg/bufio/#NewReadWriter\">https://golang.org/pkg/bufio/#NewReadWriter</a></p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 122352273,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "danweasel@gmail.com",
            "sender_full_name": "Andrew Nichols (he) (F2'17)",
            "sender_id": 101997,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "Readers and Writers",
            "submessages": [],
            "timestamp": 1518451377,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/8ede63f05c0a949ad0dce6b1e120fa5f2a1cc72a?x=x&version=2",
            "client": "website",
            "content": "<p>Does that possible help?</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 122352306,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "danweasel@gmail.com",
            "sender_full_name": "Andrew Nichols (he) (F2'17)",
            "sender_id": 101997,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "Readers and Writers",
            "submessages": [],
            "timestamp": 1518451418,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/c55d5b0f6b48fe10eae3bd82fdc9ec479c66f7b7?x=x&version=1",
            "client": "website",
            "content": "<p>Ahhh, it lives in bufio.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 122352312,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "msteigerwalt@gmail.com",
            "sender_full_name": "Michelle Steigerwalt (she/her) (W2'17)",
            "sender_id": 7655,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "Readers and Writers",
            "submessages": [],
            "timestamp": 1518451430,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/c55d5b0f6b48fe10eae3bd82fdc9ec479c66f7b7?x=x&version=1",
            "client": "website",
            "content": "<p>Somehow I get the impression that bufio is for the people who can't grok standard io, though.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 122352317,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "msteigerwalt@gmail.com",
            "sender_full_name": "Michelle Steigerwalt (she/her) (W2'17)",
            "sender_id": 7655,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "Readers and Writers",
            "submessages": [],
            "timestamp": 1518451441,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/c55d5b0f6b48fe10eae3bd82fdc9ec479c66f7b7?x=x&version=1",
            "client": "website",
            "content": "<p>Every time I'm about to do something terrible like, \"Oh, I'll just copy this entire thing into memory twice,\" it's in bufio.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 122352365,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "msteigerwalt@gmail.com",
            "sender_full_name": "Michelle Steigerwalt (she/her) (W2'17)",
            "sender_id": 7655,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "Readers and Writers",
            "submessages": [],
            "timestamp": 1518451465,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/8ede63f05c0a949ad0dce6b1e120fa5f2a1cc72a?x=x&version=2",
            "client": "website",
            "content": "<p><code>io</code> specifies interfaces (like <code>ReadWriter</code>), and <code>bufio</code> provides some nice implementations.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 122352379,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "danweasel@gmail.com",
            "sender_full_name": "Andrew Nichols (he) (F2'17)",
            "sender_id": 101997,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "Readers and Writers",
            "submessages": [],
            "timestamp": 1518451493,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/8ede63f05c0a949ad0dce6b1e120fa5f2a1cc72a?x=x&version=2",
            "client": "website",
            "content": "<p>For the concurrent reads, are you also writing?</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 122352387,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "danweasel@gmail.com",
            "sender_full_name": "Andrew Nichols (he) (F2'17)",
            "sender_id": 101997,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "Readers and Writers",
            "submessages": [],
            "timestamp": 1518451511,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/c55d5b0f6b48fe10eae3bd82fdc9ec479c66f7b7?x=x&version=1",
            "client": "website",
            "content": "<p>Nope.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 122352392,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "msteigerwalt@gmail.com",
            "sender_full_name": "Michelle Steigerwalt (she/her) (W2'17)",
            "sender_id": 7655,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "Readers and Writers",
            "submessages": [],
            "timestamp": 1518451523,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/c55d5b0f6b48fe10eae3bd82fdc9ec479c66f7b7?x=x&version=1",
            "client": "website",
            "content": "<p>Also is there an easy way to pipe a buffer into stdin of a command line process?</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 122352400,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "msteigerwalt@gmail.com",
            "sender_full_name": "Michelle Steigerwalt (she/her) (W2'17)",
            "sender_id": 7655,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "Readers and Writers",
            "submessages": [],
            "timestamp": 1518451544,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/8ede63f05c0a949ad0dce6b1e120fa5f2a1cc72a?x=x&version=2",
            "client": "website",
            "content": "<p>Should be safe to concurrently read then.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 122352402,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "danweasel@gmail.com",
            "sender_full_name": "Andrew Nichols (he) (F2'17)",
            "sender_id": 101997,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "Readers and Writers",
            "submessages": [],
            "timestamp": 1518451549,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/8ede63f05c0a949ad0dce6b1e120fa5f2a1cc72a?x=x&version=2",
            "client": "website",
            "content": "<p><a href=\"https://golang.org/pkg/os/exec/#Cmd.StdinPipe\" target=\"_blank\" title=\"https://golang.org/pkg/os/exec/#Cmd.StdinPipe\">https://golang.org/pkg/os/exec/#Cmd.StdinPipe</a></p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 122352454,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "danweasel@gmail.com",
            "sender_full_name": "Andrew Nichols (he) (F2'17)",
            "sender_id": 101997,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "Readers and Writers",
            "submessages": [],
            "timestamp": 1518451580,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/c55d5b0f6b48fe10eae3bd82fdc9ec479c66f7b7?x=x&version=1",
            "client": "website",
            "content": "<p>And are byte arrays bad?</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 122352455,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "msteigerwalt@gmail.com",
            "sender_full_name": "Michelle Steigerwalt (she/her) (W2'17)",
            "sender_id": 7655,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "Readers and Writers",
            "submessages": [],
            "timestamp": 1518451586,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/c55d5b0f6b48fe10eae3bd82fdc9ec479c66f7b7?x=x&version=1",
            "client": "website",
            "content": "<p>Or do they all boil down to byte arrays in the end anyways?</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 122352466,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f600",
                    "emoji_name": "grinning",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "danweasel@gmail.com",
                        "full_name": "Andrew Nichols (he) (F2'17)",
                        "id": 101997
                    },
                    "user_id": 101997
                }
            ],
            "recipient_id": 22624,
            "sender_email": "msteigerwalt@gmail.com",
            "sender_full_name": "Michelle Steigerwalt (she/her) (W2'17)",
            "sender_id": 7655,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "Readers and Writers",
            "submessages": [],
            "timestamp": 1518451607,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/8ede63f05c0a949ad0dce6b1e120fa5f2a1cc72a?x=x&version=2",
            "client": "website",
            "content": "<p>Probably, but I'm running out of knowledge on that point.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 122352481,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "danweasel@gmail.com",
            "sender_full_name": "Andrew Nichols (he) (F2'17)",
            "sender_id": 101997,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "Readers and Writers",
            "submessages": [],
            "timestamp": 1518451641,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/6527e077e84e20214d5373101ea15910d6b6f7a3?x=x&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"msteigerwalt@gmail.com\" data-user-id=\"7655\">@Michelle Steigerwalt (W2'17)</span> What do you mean by the question \"are byte arrays bad?\" Bad for what purpose?</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 122376264,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "steve@redlua.com",
            "sender_full_name": "Steven McCarthy (he) (SP2'15)",
            "sender_id": 7871,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "Readers and Writers",
            "submessages": [],
            "timestamp": 1518481715,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/c55d5b0f6b48fe10eae3bd82fdc9ec479c66f7b7?x=x&version=1",
            "client": "website",
            "content": "<p>Performance?  Memory?  Being a cool Go developer?</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 122376267,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "msteigerwalt@gmail.com",
            "sender_full_name": "Michelle Steigerwalt (she/her) (W2'17)",
            "sender_id": 7655,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "Readers and Writers",
            "submessages": [],
            "timestamp": 1518481733,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/c55d5b0f6b48fe10eae3bd82fdc9ec479c66f7b7?x=x&version=1",
            "client": "website",
            "content": "<p>For example, putting ReadAll everywhere is probably not a good idea and buffered pipes are a better way because it doesn't chew up all the memory with whatever's in a file.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 122376324,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "msteigerwalt@gmail.com",
            "sender_full_name": "Michelle Steigerwalt (she/her) (W2'17)",
            "sender_id": 7655,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "Readers and Writers",
            "submessages": [],
            "timestamp": 1518481807,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/6527e077e84e20214d5373101ea15910d6b6f7a3?x=x&version=1",
            "client": "website",
            "content": "<p>My generally-uninformed opinion is that byte arrays / slices are pretty good for performance, and you generally want to prefer them to things like strings if that's the alternative. But yeah, I do think you're write that, if perf <em>really</em> matters, you probably want something like buffered pipes and such.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 122376464,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "steve@redlua.com",
            "sender_full_name": "Steven McCarthy (he) (SP2'15)",
            "sender_id": 7871,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "Readers and Writers",
            "submessages": [],
            "timestamp": 1518482050,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/6527e077e84e20214d5373101ea15910d6b6f7a3?x=x&version=1",
            "client": "website",
            "content": "<p>But yeah. You're already a <span class=\"emoji emoji-1f60e\" title=\"smiling face with sunglasses\">:smiling_face_with_sunglasses:</span> Go developer for wanting to rewrite something in Go. Even more so for actually doing the writing, too :)</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 122376482,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "steve@redlua.com",
            "sender_full_name": "Steven McCarthy (he) (SP2'15)",
            "sender_id": 7871,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "Readers and Writers",
            "submessages": [],
            "timestamp": 1518482106,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/c55d5b0f6b48fe10eae3bd82fdc9ec479c66f7b7?x=x&version=1",
            "client": "website",
            "content": "<p>The rewrite is a horrific failure. <span class=\"emoji emoji-1f638\" title=\"smile cat\">:smile_cat:</span></p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 122376533,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "msteigerwalt@gmail.com",
            "sender_full_name": "Michelle Steigerwalt (she/her) (W2'17)",
            "sender_id": 7655,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "Readers and Writers",
            "submessages": [],
            "timestamp": 1518482166,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/c55d5b0f6b48fe10eae3bd82fdc9ec479c66f7b7?x=x&version=1",
            "client": "website",
            "content": "<p>But the go part is super performant!</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 122376534,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "msteigerwalt@gmail.com",
            "sender_full_name": "Michelle Steigerwalt (she/her) (W2'17)",
            "sender_id": 7655,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "Readers and Writers",
            "submessages": [],
            "timestamp": 1518482174,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/6527e077e84e20214d5373101ea15910d6b6f7a3?x=x&version=1",
            "client": "website",
            "content": "<p>I saw the <a class=\"stream\" data-stream-id=\"100640\" href=\"/#narrow/stream/defeat\">#defeat</a> post, and I think you can always blame Java. That's what I do <span class=\"emoji emoji-1f638\" title=\"smile cat\">:smile_cat:</span></p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 122376536,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "steve@redlua.com",
            "sender_full_name": "Steven McCarthy (he) (SP2'15)",
            "sender_id": 7871,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "Readers and Writers",
            "submessages": [],
            "timestamp": 1518482211,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/c55d5b0f6b48fe10eae3bd82fdc9ec479c66f7b7?x=x&version=1",
            "client": "website",
            "content": "<p>Yes but it was really foolish not to take the Java load time into account considering my favorite joke is \"Knock knock; who's there; :uncomfortably long pause:; Java.\"</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 122376729,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f923",
                    "emoji_name": "rolling_on_the_floor_laughing",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "charlesholbrow@gmail.com",
                        "full_name": "Charles Joseph Holbrow (he) (m1'18)",
                        "id": 105433
                    },
                    "user_id": 105433
                },
                {
                    "emoji_code": "1f923",
                    "emoji_name": "rolling_on_the_floor_laughing",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "fenimoreplove@gmail.com",
                        "full_name": "Fenimore Love (he) (F2'16)",
                        "id": 100182
                    },
                    "user_id": 100182
                }
            ],
            "recipient_id": 22624,
            "sender_email": "msteigerwalt@gmail.com",
            "sender_full_name": "Michelle Steigerwalt (she/her) (W2'17)",
            "sender_id": 7655,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "Readers and Writers",
            "submessages": [],
            "timestamp": 1518482567,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/ab7ac8d0421135a2615ee68497efe480de3a293b?x=x&version=1",
            "client": "website",
            "content": "<p>Hi, I'm trying to cross compile a small program of mine for Mac, but I've only got a Linux distros at my disposal. So I figure I'll cross compile it, but I'm using cgo for the <code>libvlc</code> library. This is not straightforward \"since LibVLC it is directly shipped in VLC source code.\"</p>\n<p>The C bindings I need call the library like this:</p>\n<div class=\"codehilite\"><pre><span></span>// #cgo LDFLAGS: -lvlc\n// #include &lt;vlc/vlc.h&gt;\n// #include &lt;stdlib.h&gt;\n</pre></div>\n\n\n<p>So I realize that simply running this doesn't work:</p>\n<div class=\"codehilite\"><pre><span></span>$ GOOS=darwin GOARCH=amd64 CGO_ENABLED=1 go build -v -o myprogram\n</pre></div>\n\n\n<p>So I found this:</p>\n<div class=\"codehilite\"><pre><span></span>CC=x86_64-pc-linux-gcc GOOS=darwin GOARCH=amd64 CGO_ENABLED=1 go build -v -o myprogram -ldflags=&quot;-extld=$CC&quot;\n</pre></div>\n\n\n<p>which compiles it, for Linux <span class=\"emoji emoji-1f914\" title=\"thinking face\">:thinking_face:</span> and succeeds</p>\n<p>but I figured I would have at least had to include the vlc header files? <span class=\"emoji emoji-1f62c\" title=\"grimacing\">:grimacing:</span> I basically don't know C at all, and know about compiling it even less. But I figure I need a C compiler for mac <span class=\"emoji emoji-1f914\" title=\"thinking face\">:thinking_face:</span> <span class=\"emoji emoji-1f62c\" title=\"grimacing\">:grimacing:</span> ? I dunno </p>\n<p>Anyone out there know... I'm not even sure what to ask, I feel a bit turned around. Can someone make sense of this for me <span class=\"emoji emoji-1f633\" title=\"flushed\">:flushed:</span> <span class=\"emoji emoji-1f411\" title=\"sheep\">:sheep:</span> <span class=\"emoji emoji-1f411\" title=\"sheep\">:sheep:</span></p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 122596553,
            "is_me_message": false,
            "last_edit_timestamp": 1518825439,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "fenimoreplove@gmail.com",
            "sender_full_name": "Fenimore Love (he) (F2'16)",
            "sender_id": 100182,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "Cross Compiling With CGO",
            "submessages": [],
            "timestamp": 1518825333,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/7d2ab014ebf55e99afffba1a3d92be8155754f0f?x=x&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"fenimoreplove@gmail.com\" data-user-id=\"100182\">@Fenimore Love (F2'16)</span> I was directed to <a href=\"https://github.com/moby/moby/pull/17937/commits/6c818f3e5f1bb4966c8fb54aa0c412360c9094fe\" target=\"_blank\" title=\"https://github.com/moby/moby/pull/17937/commits/6c818f3e5f1bb4966c8fb54aa0c412360c9094fe\">this commit</a> by Jessie Frazelle via <span class=\"user-mention\" data-user-email=\"hi@filippo.io\" data-user-id=\"2884\">@Filippo Valsorda (F2'17)</span>, who <a href=\"https://blog.filippo.io/easy-windows-and-linux-cross-compilers-for-macos/\" target=\"_blank\" title=\"https://blog.filippo.io/easy-windows-and-linux-cross-compilers-for-macos/\">wrote about cross-compiling the other way</a>.  I have no idea any of this is useful or not.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 122618256,
            "is_me_message": false,
            "last_edit_timestamp": 1518878125,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "kamal@marhubi.com",
            "sender_full_name": "Kamal Marhubi (he) (m2'18)",
            "sender_id": 8090,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "Cross Compiling With CGO",
            "submessages": [],
            "timestamp": 1518878057,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/1a6b4da7376fc80448030d18fb4bd345308a04ac?x=x&version=2",
            "client": "website",
            "content": "<p>Hey all. I'm trying to implement what I think should be a simple CRUD in go. I'm using gorm (a seemingly straightforward ORM for go) but am having trouble getting my types converted and stored. </p>\n<p>I guess I needed to implement a valuer and scanner interface so the gorm would know how to translate and store my types correctly, but having done that I'm still having trouble. Anyone have experience in this arena?</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 122711277,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "nephilim.eric@gmail.com",
            "sender_full_name": "Eric Lindgren (he) (F2'17)",
            "sender_id": 102032,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "Sql and complex types",
            "submessages": [],
            "timestamp": 1519085130,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/9b29f100095e5e013806f5099120daa7?d=identicon&version=1",
            "client": "website",
            "content": "<p><a href=\"https://research.swtch.com/vgo-intro\" target=\"_blank\" title=\"https://research.swtch.com/vgo-intro\">https://research.swtch.com/vgo-intro</a></p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 122760472,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f615",
                    "emoji_name": "confused",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "asf@boinkor.net",
                        "full_name": "Andreas Fuchs (he/they)",
                        "id": 9362
                    },
                    "user_id": 9362
                },
                {
                    "emoji_code": "1f615",
                    "emoji_name": "confused",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "carlos@amedee.net",
                        "full_name": "Carlos Amedee (he) (m1'18)",
                        "id": 105722
                    },
                    "user_id": 105722
                }
            ],
            "recipient_id": 22624,
            "sender_email": "blinsay@gmail.com",
            "sender_full_name": "Ben Linsay (he) (SP1'18)",
            "sender_id": 109385,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "vgo",
            "submessages": [],
            "timestamp": 1519166147,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/115cc18c6976b3afa7f0727fd7c57d27?d=identicon&version=1",
            "client": "website",
            "content": "<p>Hi go friends, is anyone else using (or interested in) kubernetes? I'm starting a dedicated stream here: <a href=\"#narrow/stream/113100-kubernetes\" title=\"#narrow/stream/113100-kubernetes\">https://recurse.zulipchat.com/#narrow/stream/113100-kubernetes</a></p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 123148390,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f389",
                    "emoji_name": "tada",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "katrina.m.ellison@gmail.com",
                        "full_name": "Katrina Ellison Geltman (she) (W'14)",
                        "id": 4996
                    },
                    "user_id": 4996
                },
                {
                    "emoji_code": "1f389",
                    "emoji_name": "tada",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "carlos@amedee.net",
                        "full_name": "Carlos Amedee (he) (m1'18)",
                        "id": 105722
                    },
                    "user_id": 105722
                }
            ],
            "recipient_id": 22624,
            "sender_email": "charlesholbrow@gmail.com",
            "sender_full_name": "Charles Joseph Holbrow (he) (m1'18)",
            "sender_id": 105433,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "k8 stream",
            "submessages": [],
            "timestamp": 1519928558,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/115cc18c6976b3afa7f0727fd7c57d27?d=identicon&version=1",
            "client": "website",
            "content": "<p>Kubernetes may be the largest open source golang project, but discussions may not fit into golang stream.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 123148471,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "charlesholbrow@gmail.com",
            "sender_full_name": "Charles Joseph Holbrow (he) (m1'18)",
            "sender_id": 105433,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "k8 stream",
            "submessages": [],
            "timestamp": 1519928646,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/d78ab1df3a0ad57e48ac2f39be4af853ddb1db17?x=x&version=3",
            "client": "ZulipElectron",
            "content": "<p>Is there anyone interested in doing a code review of a very simple Golang backend? (Crossposted to <a class=\"stream\" data-stream-id=\"18929\" href=\"/#narrow/stream/18929-code-review\">#code review</a>)</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 123583887,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "logan.williams@alum.mit.edu",
            "sender_full_name": "Logan Williams (he) (W2'18)",
            "sender_id": 105229,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "Code review",
            "submessages": [],
            "timestamp": 1520807646,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/eff8f6d876233d41e341ecb555a54fb4?d=identicon&version=1",
            "client": "website",
            "content": "<p>I'm new to Go but would be willing to pair on it</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 123585769,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "nsmon@protonmail.ch",
            "sender_full_name": "Nicolas Montanaro (SP1'18)",
            "sender_id": 109169,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "Code review",
            "submessages": [],
            "timestamp": 1520811824,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/d78ab1df3a0ad57e48ac2f39be4af853ddb1db17?x=x&version=3",
            "client": "ZulipElectron",
            "content": "<p><span class=\"user-mention\" data-user-id=\"109169\">@Nicolas Montanaro (SP1'18)</span> let's talk Monday! (or later next week)</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 123585929,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "thumbs_up",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "nsmon@protonmail.ch",
                        "full_name": "Nicolas Montanaro (SP1'18)",
                        "id": 109169
                    },
                    "user_id": 109169
                }
            ],
            "recipient_id": 22624,
            "sender_email": "logan.williams@alum.mit.edu",
            "sender_full_name": "Logan Williams (he) (W2'18)",
            "sender_id": 105229,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "Code review",
            "submessages": [],
            "timestamp": 1520812197,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/8393210b98b504e92071066321ec32c297574496?x=x&version=3",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-id=\"105229\">@Logan Williams (W2'18)</span> , I'd be interested in doing a code review :)</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 123591276,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "c@polygon.pizza",
            "sender_full_name": "coco Walsh (they) (m5'20)",
            "sender_id": 102029,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "Code review",
            "submessages": [],
            "timestamp": 1520824758,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/d78ab1df3a0ad57e48ac2f39be4af853ddb1db17?x=x&version=3",
            "client": "ZulipElectron",
            "content": "<p>Great, I'd love to pair on the next version of this.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 123591323,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "270c",
                    "emoji_name": "victory_hand",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "c@polygon.pizza",
                        "full_name": "coco Walsh (they) (m5'20)",
                        "id": 102029
                    },
                    "user_id": 102029
                }
            ],
            "recipient_id": 22624,
            "sender_email": "logan.williams@alum.mit.edu",
            "sender_full_name": "Logan Williams (he) (W2'18)",
            "sender_id": 105229,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "Code review",
            "submessages": [],
            "timestamp": 1520824821,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/68488e45306787a644c104f8adc0cef2?d=identicon&version=1",
            "client": "website",
            "content": "<p>I'm here for the mini batch, April 2018.  Just pushed the code I'm working on to github.  I invite all gophers to look it over...</p>\n<div class=\"codehilite\"><pre><span></span>go get -u github.com/dncohen/rcl/cmd/...\n</pre></div>\n\n\n<p>Be gentle, its work in progress. :)</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 124595157,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "thumbs_up",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "charlesholbrow@gmail.com",
                        "full_name": "Charles Joseph Holbrow (he) (m1'18)",
                        "id": 105433
                    },
                    "user_id": 105433
                }
            ],
            "recipient_id": 22624,
            "sender_email": "recurse@dave-cohen.com",
            "sender_full_name": "Dave Cohen (he) (m3'18)",
            "sender_id": 111955,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "April 2018",
            "submessages": [],
            "timestamp": 1522791407,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/68488e45306787a644c104f8adc0cef2?d=identicon&version=1",
            "client": "website",
            "content": "<p>BTW, I think that repo is \"go gettable\" and has a relatively good README, in case anyone wants to take a closer look.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 124639833,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "recurse@dave-cohen.com",
            "sender_full_name": "Dave Cohen (he) (m3'18)",
            "sender_id": 111955,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "April 2018",
            "submessages": [],
            "timestamp": 1522873127,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/391eb183c3474a15bf9ad0e87d3ff118?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-id=\"111955\">@Dave Cohen (m3'18)</span>  You're writing awesome go code. So glad to see someone working on some cryptocurrency related projects!</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 124708336,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "ghthor@gmail.com",
            "sender_full_name": "Will Drengwitz (he) (W1'17)",
            "sender_id": 7099,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "April 2018",
            "submessages": [],
            "timestamp": 1522999038,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/68488e45306787a644c104f8adc0cef2?d=identicon&version=1",
            "client": "website",
            "content": "<p>Thanks <span class=\"user-mention\" data-user-id=\"7099\">@Willa Drengwitz (W1'17)</span> , appreciated!  are you also working on anything crypto?</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 124724432,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "recurse@dave-cohen.com",
            "sender_full_name": "Dave Cohen (he) (m3'18)",
            "sender_id": 111955,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "April 2018",
            "submessages": [],
            "timestamp": 1523029151,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/391eb183c3474a15bf9ad0e87d3ff118?d=identicon&version=1",
            "client": "website",
            "content": "<p>I've been watching the space closely. Right now I'm mostly focusing on IPFS, and experimenting with ether contracts.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 124724566,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "ghthor@gmail.com",
            "sender_full_name": "Will Drengwitz (he) (W1'17)",
            "sender_id": 7099,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "April 2018",
            "submessages": [],
            "timestamp": 1523029337,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/0a35beaf5a354dafdf10494c0313e10fffc154fd?x=x&version=1",
            "client": "website",
            "content": "<p>Heyyy y'all, who's heeeere?? If you wanna meet up you can drop me a text at 917.279.8194 or come by <code>/windmill</code>'s booth on the first floor just at the top of the escalator (with the big sign that says \"Dev Tools Help, \u00a25\", courtesy of the baller <span class=\"user-mention\" data-user-id=\"105705\">@Han Yu (W2'18)</span> )</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 125774053,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "maia.mcc@gmail.com",
            "sender_full_name": "Maia McCormick (she) (S2'14)",
            "sender_id": 6175,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "gothamgo 2018",
            "submessages": [],
            "timestamp": 1524835509,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/68c07aa24ae39681409794daff1a921b08e5e324?x=x&version=2",
            "client": "website",
            "content": "<p>haha, that's an amazing sign <span class=\"emoji emoji-1f601\" title=\"grin\">:grin:</span></p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 125818553,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "james@recurse.com",
            "sender_full_name": "James J. Porter (he) (S'13)",
            "sender_id": 2113,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "gothamgo 2018",
            "submessages": [],
            "timestamp": 1524918226,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/842e08a228d86d5163ac24f95b6a92d321fc7193?x=x&version=2",
            "client": "website",
            "content": "<p>I just found this in our code (our product is OSS so I'm not breaking any licenses by sharing)</p>\n<div class=\"codehilite\"><pre><span></span>type TerminateProcessInGuestResponse struct {\n}\n</pre></div>\n\n\n<p>Does anybody know what the point of an empty struct type like this is? I guess for defining methods on it? I think this came out of generated code.. but I'm very much having this reaction <a href=\"http://i0.kym-cdn.com/entries/icons/facebook/000/018/489/nick-young-confused-face-300x256_nqlyaa.jpg\" target=\"_blank\" title=\"http://i0.kym-cdn.com/entries/icons/facebook/000/018/489/nick-young-confused-face-300x256_nqlyaa.jpg\">http://i0.kym-cdn.com/entries/icons/facebook/000/018/489/nick-young-confused-face-300x256_nqlyaa.jpg</a></p>\n<div class=\"message_inline_image\"><a href=\"http://i0.kym-cdn.com/entries/icons/facebook/000/018/489/nick-young-confused-face-300x256_nqlyaa.jpg\" target=\"_blank\" title=\"http://i0.kym-cdn.com/entries/icons/facebook/000/018/489/nick-young-confused-face-300x256_nqlyaa.jpg\"><img src=\"https://uploads.zulipusercontent.net/a6c0edceb4c5a42997bdecd3f5bb50a060e54732/687474703a2f2f69302e6b796d2d63646e2e636f6d2f656e74726965732f69636f6e732f66616365626f6f6b2f3030302f3031382f3438392f6e69636b2d796f756e672d636f6e66757365642d666163652d333030783235365f6e716c7961612e6a7067\"></a></div>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 125905825,
            "is_me_message": false,
            "last_edit_timestamp": 1525112620,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "ian@theknown.net",
            "sender_full_name": "Ian Whitlock (S'13)",
            "sender_id": 2119,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "empty struct type",
            "submessages": [],
            "timestamp": 1525112368,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/842e08a228d86d5163ac24f95b6a92d321fc7193?x=x&version=2",
            "client": "website",
            "content": "<p>wow I don't remember how to code blocks on Zulip</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 125905832,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "ian@theknown.net",
            "sender_full_name": "Ian Whitlock (S'13)",
            "sender_id": 2119,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "empty struct type",
            "submessages": [],
            "timestamp": 1525112389,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/842e08a228d86d5163ac24f95b6a92d321fc7193?x=x&version=2",
            "client": "website",
            "content": "<p>amaze</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 125905834,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "ian@theknown.net",
            "sender_full_name": "Ian Whitlock (S'13)",
            "sender_id": 2119,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "empty struct type",
            "submessages": [],
            "timestamp": 1525112390,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/200183991cd15d8c08fc2f29cc78fa65e7b2f5ae?x=x&version=4",
            "client": "ZulipElectron",
            "content": "<p>I think they're mostly used as method receivers, and might also be useful for sending through channels between goroutines</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 125906111,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "sory.rawyer@gmail.com",
            "sender_full_name": "Rory Sawyer (he) (SP2'18)",
            "sender_id": 111920,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "empty struct type",
            "submessages": [],
            "timestamp": 1525112741,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/200183991cd15d8c08fc2f29cc78fa65e7b2f5ae?x=x&version=4",
            "client": "ZulipElectron",
            "content": "<p>this post (which is now quite old), is interesting (and has some insightful comments, I think): <a href=\"https://dave.cheney.net/2014/03/25/the-empty-struct\" target=\"_blank\" title=\"https://dave.cheney.net/2014/03/25/the-empty-struct\">https://dave.cheney.net/2014/03/25/the-empty-struct</a></p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 125906163,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "sory.rawyer@gmail.com",
            "sender_full_name": "Rory Sawyer (he) (SP2'18)",
            "sender_id": 111920,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "empty struct type",
            "submessages": [],
            "timestamp": 1525112773,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/842e08a228d86d5163ac24f95b6a92d321fc7193?x=x&version=2",
            "client": "website",
            "content": "<p>oh goroutines is a good point, it could just be for signalling based on type I guess...</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 125906199,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "ian@theknown.net",
            "sender_full_name": "Ian Whitlock (S'13)",
            "sender_id": 2119,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "empty struct type",
            "submessages": [],
            "timestamp": 1525112828,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/842e08a228d86d5163ac24f95b6a92d321fc7193?x=x&version=2",
            "client": "website",
            "content": "<p>I wish this stream was a little more active.. surprised to see Go isn't more popular at RC</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 125906518,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "ian@theknown.net",
            "sender_full_name": "Ian Whitlock (S'13)",
            "sender_id": 2119,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "empty struct type",
            "submessages": [],
            "timestamp": 1525113197,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/842e08a228d86d5163ac24f95b6a92d321fc7193?x=x&version=2",
            "client": "website",
            "content": "<p>such an excellent language</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 125906529,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "ian@theknown.net",
            "sender_full_name": "Ian Whitlock (S'13)",
            "sender_id": 2119,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "empty struct type",
            "submessages": [],
            "timestamp": 1525113234,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/200183991cd15d8c08fc2f29cc78fa65e7b2f5ae?x=x&version=4",
            "client": "ZulipElectron",
            "content": "<p>this batch has got rust fever</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 125906594,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "sory.rawyer@gmail.com",
            "sender_full_name": "Rory Sawyer (he) (SP2'18)",
            "sender_id": 111920,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "empty struct type",
            "submessages": [],
            "timestamp": 1525113282,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/200183991cd15d8c08fc2f29cc78fa65e7b2f5ae?x=x&version=4",
            "client": "ZulipElectron",
            "content": "<p>but I do miss writing go from time to time</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 125906651,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "sory.rawyer@gmail.com",
            "sender_full_name": "Rory Sawyer (he) (SP2'18)",
            "sender_id": 111920,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "empty struct type",
            "submessages": [],
            "timestamp": 1525113348,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/842e08a228d86d5163ac24f95b6a92d321fc7193?x=x&version=2",
            "client": "website",
            "content": "<p>Man I've been wanting to learn Rust... but Go pays the bills for now</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 125906955,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f4b8",
                    "emoji_name": "money_with_wings",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "Dwaynekj@gmail.com",
                        "full_name": "Dwayne Khallique Jones (F'12)",
                        "id": 915
                    },
                    "user_id": 915
                },
                {
                    "emoji_code": "1f4b8",
                    "emoji_name": "money_with_wings",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "carlos@amedee.net",
                        "full_name": "Carlos Amedee (he) (m1'18)",
                        "id": 105722
                    },
                    "user_id": 105722
                },
                {
                    "emoji_code": "1f4b8",
                    "emoji_name": "money_with_wings",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "PLRedmond@gmail.com",
                        "full_name": "Patrick Redmond (W'14)",
                        "id": 5014
                    },
                    "user_id": 5014
                }
            ],
            "recipient_id": 22624,
            "sender_email": "ian@theknown.net",
            "sender_full_name": "Ian Whitlock (S'13)",
            "sender_id": 2119,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "empty struct type",
            "submessages": [],
            "timestamp": 1525113638,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/8ede63f05c0a949ad0dce6b1e120fa5f2a1cc72a?x=x&version=2",
            "client": "website",
            "content": "<p>I think the relative lack of popularity of Go at RC is driven by the fact that Go is <em>boring</em>. (not that there's anything wrong with that)</p>\n<p>But yes, empty struct is the ideal type to send on a channel if you're just trying to signal job completion without any other data.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 125915336,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "danweasel@gmail.com",
            "sender_full_name": "Andrew Nichols (he) (F2'17)",
            "sender_id": 101997,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "empty struct type",
            "submessages": [],
            "timestamp": 1525125167,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/9b29f100095e5e013806f5099120daa7?d=identicon&version=1",
            "client": "website",
            "content": "<p>(there are at least a few of us folks this batch writing projects in Go, but nobody's doing study groups and stuff)</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 125915490,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "blinsay@gmail.com",
            "sender_full_name": "Ben Linsay (he) (SP1'18)",
            "sender_id": 109385,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "empty struct type",
            "submessages": [],
            "timestamp": 1525125412,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/423a5327ed896db2dfd052de561709d0e6ae2689?x=x&version=1",
            "client": "ZulipElectron",
            "content": "<p>So, to make a long story short, I briefly ran a ponzi scheme in Eve Online before I was forced to shut it down due to regulatory interference. If anyone is interested in picking it up and running it, it's in Go and the code is pretty reasonable, so let me know!</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 126240641,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f44f",
                    "emoji_name": "clap",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "ben@benjojo.co.uk",
                        "full_name": "Ben Cartwright-Cox (he) (SP2'18)",
                        "id": 111926
                    },
                    "user_id": 111926
                }
            ],
            "recipient_id": 22624,
            "sender_email": "casey@rodarmor.com",
            "sender_full_name": "Casey Rodarmor (SP2'18)",
            "sender_id": 6935,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "Eve Online Ponzi Scheme, Lightly Used",
            "submessages": [],
            "timestamp": 1525738910,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/423a5327ed896db2dfd052de561709d0e6ae2689?x=x&version=1",
            "client": "ZulipElectron",
            "content": "<p>It needs to be reworked to hit a different API, since you can't scam people using the SSO API, but I think it's pretty doable.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 126240687,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "casey@rodarmor.com",
            "sender_full_name": "Casey Rodarmor (SP2'18)",
            "sender_id": 6935,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "Eve Online Ponzi Scheme, Lightly Used",
            "submessages": [],
            "timestamp": 1525738954,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/c55d5b0f6b48fe10eae3bd82fdc9ec479c66f7b7?x=x&version=1",
            "client": "website",
            "content": "<p>...I have so many questions...</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 126240732,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "msteigerwalt@gmail.com",
            "sender_full_name": "Michelle Steigerwalt (she/her) (W2'17)",
            "sender_id": 7655,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "Eve Online Ponzi Scheme, Lightly Used",
            "submessages": [],
            "timestamp": 1525739043,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/423a5327ed896db2dfd052de561709d0e6ae2689?x=x&version=1",
            "client": "ZulipElectron",
            "content": "<p>Ask away!</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 126240740,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "casey@rodarmor.com",
            "sender_full_name": "Casey Rodarmor (SP2'18)",
            "sender_id": 6935,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "Eve Online Ponzi Scheme, Lightly Used",
            "submessages": [],
            "timestamp": 1525739052,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/c55d5b0f6b48fe10eae3bd82fdc9ec479c66f7b7?x=x&version=1",
            "client": "website",
            "content": "<p>What regulatory interference?</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 126240744,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "msteigerwalt@gmail.com",
            "sender_full_name": "Michelle Steigerwalt (she/her) (W2'17)",
            "sender_id": 7655,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "Eve Online Ponzi Scheme, Lightly Used",
            "submessages": [],
            "timestamp": 1525739069,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/c55d5b0f6b48fe10eae3bd82fdc9ec479c66f7b7?x=x&version=1",
            "client": "website",
            "content": "<p>Is this like an in-game ponzi scheme or a real money ponzi scheme using Eve Online as its hook?</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 126240749,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "msteigerwalt@gmail.com",
            "sender_full_name": "Michelle Steigerwalt (she/her) (W2'17)",
            "sender_id": 7655,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "Eve Online Ponzi Scheme, Lightly Used",
            "submessages": [],
            "timestamp": 1525739093,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/c55d5b0f6b48fe10eae3bd82fdc9ec479c66f7b7?x=x&version=1",
            "client": "website",
            "content": "<p>It reminds me of back in the e-gold days where some folks ran an \"investment\" scheme and their explanation for 12x returns was that they used bots to cheat at poker.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 126240757,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "msteigerwalt@gmail.com",
            "sender_full_name": "Michelle Steigerwalt (she/her) (W2'17)",
            "sender_id": 7655,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "Eve Online Ponzi Scheme, Lightly Used",
            "submessages": [],
            "timestamp": 1525739128,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/423a5327ed896db2dfd052de561709d0e6ae2689?x=x&version=1",
            "client": "ZulipElectron",
            "content": "<p>The regulatory interference was from the devs. Scamming is explicitly allowed in Eve. However, there is an SSO/JSON API which I was using to allow users to log in to my app with their Eve identities, and you're not allowed to scam people with that API.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 126240858,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "casey@rodarmor.com",
            "sender_full_name": "Casey Rodarmor (SP2'18)",
            "sender_id": 6935,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "Eve Online Ponzi Scheme, Lightly Used",
            "submessages": [],
            "timestamp": 1525739301,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/423a5327ed896db2dfd052de561709d0e6ae2689?x=x&version=1",
            "client": "ZulipElectron",
            "content": "<p>In game! I would definitely not scam people out of real money.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 126240860,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "casey@rodarmor.com",
            "sender_full_name": "Casey Rodarmor (SP2'18)",
            "sender_id": 6935,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "Eve Online Ponzi Scheme, Lightly Used",
            "submessages": [],
            "timestamp": 1525739315,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/423a5327ed896db2dfd052de561709d0e6ae2689?x=x&version=1",
            "client": "ZulipElectron",
            "content": "<p>I think the code could be easily reworked to follow the rules though. There's an XML API which you <em>are</em> allowed to scam people with.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 126240862,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "casey@rodarmor.com",
            "sender_full_name": "Casey Rodarmor (SP2'18)",
            "sender_id": 6935,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "Eve Online Ponzi Scheme, Lightly Used",
            "submessages": [],
            "timestamp": 1525739335,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/c55d5b0f6b48fe10eae3bd82fdc9ec479c66f7b7?x=x&version=1",
            "client": "website",
            "content": "<p>Oh, wow, scamming people as part of the game sounds fun.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 126241195,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "msteigerwalt@gmail.com",
            "sender_full_name": "Michelle Steigerwalt (she/her) (W2'17)",
            "sender_id": 7655,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "Eve Online Ponzi Scheme, Lightly Used",
            "submessages": [],
            "timestamp": 1525739945,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/423a5327ed896db2dfd052de561709d0e6ae2689?x=x&version=1",
            "client": "ZulipElectron",
            "content": "<p>Can confirm! I ran it for two weekends and amassed $x00 worth of ISK, it was great fun.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 126241645,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "casey@rodarmor.com",
            "sender_full_name": "Casey Rodarmor (SP2'18)",
            "sender_id": 6935,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "Eve Online Ponzi Scheme, Lightly Used",
            "submessages": [],
            "timestamp": 1525740779,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/423a5327ed896db2dfd052de561709d0e6ae2689?x=x&version=1",
            "client": "ZulipElectron",
            "content": "<p>The code is here, if anyone wants to take a look: <a href=\"https://gitlab.com/rodarmor/kaiju\" target=\"_blank\" title=\"https://gitlab.com/rodarmor/kaiju\">https://gitlab.com/rodarmor/kaiju</a> (gotta be logged into gitlab tho)</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 126241652,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "casey@rodarmor.com",
            "sender_full_name": "Casey Rodarmor (SP2'18)",
            "sender_id": 6935,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "Eve Online Ponzi Scheme, Lightly Used",
            "submessages": [],
            "timestamp": 1525740797,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/423a5327ed896db2dfd052de561709d0e6ae2689?x=x&version=1",
            "client": "ZulipElectron",
            "content": "<p>The code handles logins and deposits, allows users to initiate withdrawal requests, and has a referral program/scheme</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 126241654,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "casey@rodarmor.com",
            "sender_full_name": "Casey Rodarmor (SP2'18)",
            "sender_id": 6935,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "Eve Online Ponzi Scheme, Lightly Used",
            "submessages": [],
            "timestamp": 1525740827,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/423a5327ed896db2dfd052de561709d0e6ae2689?x=x&version=1",
            "client": "ZulipElectron",
            "content": "<p>Scammy frontend here: <a href=\"https://kaiju.co/\" target=\"_blank\" title=\"https://kaiju.co/\">https://kaiju.co/</a></p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 126241703,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "casey@rodarmor.com",
            "sender_full_name": "Casey Rodarmor (SP2'18)",
            "sender_id": 6935,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "Eve Online Ponzi Scheme, Lightly Used",
            "submessages": [],
            "timestamp": 1525740896,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/c55d5b0f6b48fe10eae3bd82fdc9ec479c66f7b7?x=x&version=1",
            "client": "website",
            "content": "<p>Nice, 1% is a good legitimate sounding number.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 126242241,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "msteigerwalt@gmail.com",
            "sender_full_name": "Michelle Steigerwalt (she/her) (W2'17)",
            "sender_id": 7655,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "Eve Online Ponzi Scheme, Lightly Used",
            "submessages": [],
            "timestamp": 1525741990,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/002c4f97784bd6c6e747c239d84097b220aa51a4?x=x&version=2",
            "client": "website",
            "content": "<p>Hello. If anyone here is studying Go and wants to discuss it, I'm here and happy to help any way I can.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 126929233,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f389",
                    "emoji_name": "tada",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "henry@henrystanley.com",
                        "full_name": "Henry Stanley (S1'18)",
                        "id": 116362
                    },
                    "user_id": 116362
                },
                {
                    "emoji_code": "1f389",
                    "emoji_name": "tada",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "stanley@zheng.nyc",
                        "full_name": "Stanley Zheng (they) (W1'19)",
                        "id": 100315
                    },
                    "user_id": 100315
                },
                {
                    "emoji_code": "1f389",
                    "emoji_name": "tada",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "alcara_m@pm.me",
                        "full_name": "Mar\u00edn Alcaraz (he) (W2'15)",
                        "id": 7082
                    },
                    "user_id": 7082
                },
                {
                    "emoji_code": "1f389",
                    "emoji_name": "tada",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "bogomolnyelad@gmail.com",
                        "full_name": "Elad Bogomolny (he) (S1'18)",
                        "id": 116355
                    },
                    "user_id": 116355
                }
            ],
            "recipient_id": 22624,
            "sender_email": "david@zentus.com",
            "sender_full_name": "David Crawshaw (he) (S1'18)",
            "sender_id": 116353,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "learning go",
            "submessages": [],
            "timestamp": 1527003320,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/612c7c2a108d7850c62d1d2293a481aa42855408?x=x&version=2",
            "client": "website",
            "content": "<p>what if you have multiple channels you'd like to join together?<br>\nwhat if you'd like to do so with only one goroutine?<br>\nyou'd need to wait on multiple channels until all close, and you'd like to avoid a busy wait</p>\n<p>i don't know how to avoid the busy wait</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">package</span> <span class=\"nx\">main</span>\n\n<span class=\"kn\">import</span> <span class=\"s\">&quot;fmt&quot;</span>\n<span class=\"kn\">import</span> <span class=\"s\">&quot;time&quot;</span>\n<span class=\"kn\">import</span> <span class=\"s\">&quot;math/rand&quot;</span>\n\n<span class=\"kd\">func</span> <span class=\"nx\">feeder</span><span class=\"p\">(</span><span class=\"nx\">label</span> <span class=\"kt\">string</span><span class=\"p\">)</span> <span class=\"o\">&lt;-</span><span class=\"kd\">chan</span> <span class=\"kt\">string</span> <span class=\"p\">{</span>\n    <span class=\"nx\">c</span> <span class=\"o\">:=</span> <span class=\"nb\">make</span><span class=\"p\">(</span><span class=\"kd\">chan</span> <span class=\"kt\">string</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n    <span class=\"k\">go</span> <span class=\"kd\">func</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n        <span class=\"k\">defer</span> <span class=\"nb\">close</span><span class=\"p\">(</span><span class=\"nx\">c</span><span class=\"p\">)</span>\n        <span class=\"k\">for</span> <span class=\"nx\">i</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"nx\">i</span> <span class=\"p\">&lt;</span> <span class=\"mi\">8</span><span class=\"p\">;</span> <span class=\"nx\">i</span> <span class=\"o\">+=</span> <span class=\"mi\">1</span> <span class=\"p\">{</span>\n            <span class=\"nx\">time</span><span class=\"p\">.</span><span class=\"nx\">Sleep</span><span class=\"p\">(</span><span class=\"nx\">time</span><span class=\"p\">.</span><span class=\"nx\">Millisecond</span> <span class=\"o\">*</span> <span class=\"nx\">time</span><span class=\"p\">.</span><span class=\"nx\">Duration</span><span class=\"p\">(</span><span class=\"nx\">rand</span><span class=\"p\">.</span><span class=\"nx\">Intn</span><span class=\"p\">(</span><span class=\"mi\">50</span><span class=\"p\">)))</span>\n            <span class=\"nx\">datum</span> <span class=\"o\">:=</span> <span class=\"nx\">fmt</span><span class=\"p\">.</span><span class=\"nx\">Sprintf</span><span class=\"p\">(</span><span class=\"s\">&quot;%s%d&quot;</span><span class=\"p\">,</span> <span class=\"nx\">label</span><span class=\"p\">,</span> <span class=\"nx\">i</span><span class=\"p\">)</span>\n            <span class=\"k\">select</span> <span class=\"p\">{</span>\n            <span class=\"k\">case</span> <span class=\"nx\">c</span> <span class=\"o\">&lt;-</span> <span class=\"nx\">datum</span><span class=\"p\">:</span>\n            <span class=\"k\">default</span><span class=\"p\">:</span>\n                <span class=\"nx\">fmt</span><span class=\"p\">.</span><span class=\"nx\">Println</span><span class=\"p\">(</span><span class=\"s\">&quot;feeder dropped update:&quot;</span><span class=\"p\">,</span> <span class=\"nx\">datum</span><span class=\"p\">)</span>\n            <span class=\"p\">}</span>\n        <span class=\"p\">}</span>\n        <span class=\"nx\">fmt</span><span class=\"p\">.</span><span class=\"nx\">Println</span><span class=\"p\">(</span><span class=\"s\">&quot;feeder exited:&quot;</span><span class=\"p\">,</span> <span class=\"nx\">label</span><span class=\"p\">)</span>\n    <span class=\"p\">}()</span>\n    <span class=\"k\">return</span> <span class=\"nx\">c</span>\n<span class=\"p\">}</span>\n\n<span class=\"kd\">func</span> <span class=\"nx\">join</span><span class=\"p\">(</span><span class=\"nx\">a</span> <span class=\"o\">&lt;-</span><span class=\"kd\">chan</span> <span class=\"kt\">string</span><span class=\"p\">,</span> <span class=\"nx\">b</span> <span class=\"o\">&lt;-</span><span class=\"kd\">chan</span> <span class=\"kt\">string</span><span class=\"p\">)</span> <span class=\"o\">&lt;-</span><span class=\"kd\">chan</span> <span class=\"kt\">string</span> <span class=\"p\">{</span>\n    <span class=\"nx\">c</span> <span class=\"o\">:=</span> <span class=\"nb\">make</span><span class=\"p\">(</span><span class=\"kd\">chan</span> <span class=\"kt\">string</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n    <span class=\"nx\">send</span> <span class=\"o\">:=</span> <span class=\"kd\">func</span><span class=\"p\">(</span><span class=\"nx\">datum</span> <span class=\"kt\">string</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"k\">select</span> <span class=\"p\">{</span>\n        <span class=\"k\">case</span> <span class=\"nx\">c</span> <span class=\"o\">&lt;-</span> <span class=\"nx\">datum</span><span class=\"p\">:</span>\n        <span class=\"k\">default</span><span class=\"p\">:</span>\n            <span class=\"nx\">fmt</span><span class=\"p\">.</span><span class=\"nx\">Println</span><span class=\"p\">(</span><span class=\"s\">&quot;join dropped update:&quot;</span><span class=\"p\">,</span> <span class=\"nx\">datum</span><span class=\"p\">)</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n    <span class=\"k\">go</span> <span class=\"kd\">func</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n        <span class=\"k\">defer</span> <span class=\"nb\">close</span><span class=\"p\">(</span><span class=\"nx\">c</span><span class=\"p\">)</span>\n        <span class=\"kd\">var</span> <span class=\"nx\">datum</span> <span class=\"kt\">string</span>\n        <span class=\"kd\">var</span> <span class=\"nx\">aOk</span> <span class=\"kt\">bool</span>\n        <span class=\"kd\">var</span> <span class=\"nx\">bOk</span> <span class=\"kt\">bool</span>\n        <span class=\"kd\">var</span> <span class=\"nx\">busy</span> <span class=\"kt\">int</span>\n        <span class=\"k\">for</span> <span class=\"p\">{</span>\n            <span class=\"k\">select</span> <span class=\"p\">{</span>\n            <span class=\"k\">case</span> <span class=\"nx\">datum</span><span class=\"p\">,</span> <span class=\"nx\">aOk</span> <span class=\"p\">=</span> <span class=\"o\">&lt;-</span><span class=\"nx\">a</span><span class=\"p\">:</span>\n                <span class=\"k\">if</span> <span class=\"nx\">aOk</span> <span class=\"p\">{</span>\n                    <span class=\"nx\">send</span><span class=\"p\">(</span><span class=\"nx\">datum</span><span class=\"p\">)</span>\n                    <span class=\"k\">continue</span>\n                <span class=\"p\">}</span>\n                <span class=\"nx\">busy</span> <span class=\"o\">+=</span> <span class=\"mi\">1</span>\n            <span class=\"k\">case</span> <span class=\"nx\">datum</span><span class=\"p\">,</span> <span class=\"nx\">bOk</span> <span class=\"p\">=</span> <span class=\"o\">&lt;-</span><span class=\"nx\">b</span><span class=\"p\">:</span>\n                <span class=\"k\">if</span> <span class=\"nx\">bOk</span> <span class=\"p\">{</span>\n                    <span class=\"nx\">send</span><span class=\"p\">(</span><span class=\"nx\">datum</span><span class=\"p\">)</span>\n                    <span class=\"k\">continue</span>\n                <span class=\"p\">}</span>\n                <span class=\"nx\">busy</span> <span class=\"o\">+=</span> <span class=\"mi\">1</span>\n            <span class=\"p\">}</span>\n            <span class=\"k\">if</span> <span class=\"p\">!</span><span class=\"nx\">aOk</span> <span class=\"o\">&amp;&amp;</span> <span class=\"p\">!</span><span class=\"nx\">bOk</span> <span class=\"p\">{</span>\n                <span class=\"nx\">fmt</span><span class=\"p\">.</span><span class=\"nx\">Println</span><span class=\"p\">(</span><span class=\"s\">&quot;join finished after&quot;</span><span class=\"p\">,</span> <span class=\"nx\">busy</span><span class=\"p\">,</span> <span class=\"s\">&quot;busy loops&quot;</span><span class=\"p\">)</span>\n                <span class=\"k\">return</span>\n            <span class=\"p\">}</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">}()</span>\n    <span class=\"k\">return</span> <span class=\"nx\">c</span>\n<span class=\"p\">}</span>\n\n<span class=\"kd\">func</span> <span class=\"nx\">main</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n    <span class=\"nx\">a</span> <span class=\"o\">:=</span> <span class=\"nx\">feeder</span><span class=\"p\">(</span><span class=\"s\">&quot;a&quot;</span><span class=\"p\">)</span>\n    <span class=\"nx\">b</span> <span class=\"o\">:=</span> <span class=\"nx\">feeder</span><span class=\"p\">(</span><span class=\"s\">&quot;b&quot;</span><span class=\"p\">)</span>\n    <span class=\"nx\">start</span> <span class=\"o\">:=</span> <span class=\"nx\">time</span><span class=\"p\">.</span><span class=\"nx\">Now</span><span class=\"p\">()</span>\n    <span class=\"k\">for</span> <span class=\"nx\">x</span> <span class=\"o\">:=</span> <span class=\"k\">range</span> <span class=\"nx\">join</span><span class=\"p\">(</span><span class=\"nx\">a</span><span class=\"p\">,</span> <span class=\"nx\">b</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"nx\">fmt</span><span class=\"p\">.</span><span class=\"nx\">Println</span><span class=\"p\">(</span><span class=\"s\">&quot;consumer received&quot;</span><span class=\"p\">,</span> <span class=\"nx\">x</span><span class=\"p\">,</span> <span class=\"s\">&quot;after&quot;</span><span class=\"p\">,</span> <span class=\"nx\">time</span><span class=\"p\">.</span><span class=\"nx\">Since</span><span class=\"p\">(</span><span class=\"nx\">start</span><span class=\"p\">))</span>\n    <span class=\"p\">}</span>\n    <span class=\"nx\">fmt</span><span class=\"p\">.</span><span class=\"nx\">Println</span><span class=\"p\">(</span><span class=\"s\">&quot;done&quot;</span><span class=\"p\">)</span>\n<span class=\"p\">}</span>\n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 126931371,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "PLRedmond@gmail.com",
            "sender_full_name": "Patrick Redmond (W'14)",
            "sender_id": 5014,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "wait on multiple channels until all close w/o busy wait",
            "submessages": [],
            "timestamp": 1527006107,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/612c7c2a108d7850c62d1d2293a481aa42855408?x=x&version=2",
            "client": "website",
            "content": "<p>output from one run:</p>\n<div class=\"codehilite\"><pre><span></span>consumer received a0 after 31.497858ms\nconsumer received b0 after 37.480945ms\nconsumer received b1 after 46.819963ms\nconsumer received b2 after 78.231972ms\nconsumer received a1 after 78.783719ms\nconsumer received b3 after 96.73382ms\nconsumer received a2 after 104.135202ms\nconsumer received a3 after 110.554259ms\nconsumer received a4 after 110.59236ms\nconsumer received b4 after 137.257583ms\nconsumer received b5 after 148.595679ms\nconsumer received a5 after 154.953392ms\nconsumer received b6 after 161.005885ms\nfeeder exited: b\nconsumer received b7 after 189.516211ms\nconsumer received a6 after 194.14403ms\nfeeder exited: a\njoin finished after 288004 busy loops\nconsumer received a7 after 218.174937ms\ndone\n</pre></div>\n\n\n<p>with a goroutine-per-channel you could avoid the busy wait... but is there any way to avoid the busy wait with only one goroutine?</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 126931426,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "PLRedmond@gmail.com",
            "sender_full_name": "Patrick Redmond (W'14)",
            "sender_id": 5014,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "wait on multiple channels until all close w/o busy wait",
            "submessages": [],
            "timestamp": 1527006178,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/1c860d00a4cedc01147fbb2e0533c37b?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-id=\"116353\">@David Crawshaw (S1'18)</span>  I am going to start a project in go in the next few weeks so I will definitely have questions.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 126931434,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "corydominguez@gmail.com",
            "sender_full_name": "Cory Michael Dominguez (he) (SP1'15)",
            "sender_id": 7625,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "learning go",
            "submessages": [],
            "timestamp": 1527006197,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/200183991cd15d8c08fc2f29cc78fa65e7b2f5ae?x=x&version=4",
            "client": "ZulipElectron",
            "content": "<p>have you looked at <a href=\"https://golang.org/pkg/sync/#WaitGroup\" target=\"_blank\" title=\"https://golang.org/pkg/sync/#WaitGroup\">WaitGroup</a>s? I found them super useful when I wanted to just sit tight until a bunch of goroutines finished</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 126931509,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "sory.rawyer@gmail.com",
            "sender_full_name": "Rory Sawyer (he) (SP2'18)",
            "sender_id": 111920,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "wait on multiple channels until all close w/o busy wait",
            "submessages": [],
            "timestamp": 1527006334,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/200183991cd15d8c08fc2f29cc78fa65e7b2f5ae?x=x&version=4",
            "client": "ZulipElectron",
            "content": "<p>basically, inside your goroutine you'd call <code>wg.Add(1)</code> and <code>defer wg.Done()</code></p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 126931556,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "sory.rawyer@gmail.com",
            "sender_full_name": "Rory Sawyer (he) (SP2'18)",
            "sender_id": 111920,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "wait on multiple channels until all close w/o busy wait",
            "submessages": [],
            "timestamp": 1527006379,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/612c7c2a108d7850c62d1d2293a481aa42855408?x=x&version=2",
            "client": "website",
            "content": "<p>I'm familiar with waitgroups. They're great when you want to wait for goroutines which are doing some work. I don't think they address this problem.</p>\n<p>I'm curious about how to wait on two channels, with the assumption being that somebody else has taken care of the goroutines themselves.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 126931696,
            "is_me_message": false,
            "last_edit_timestamp": 1527006838,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "PLRedmond@gmail.com",
            "sender_full_name": "Patrick Redmond (W'14)",
            "sender_id": 5014,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "wait on multiple channels until all close w/o busy wait",
            "submessages": [],
            "timestamp": 1527006611,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/002c4f97784bd6c6e747c239d84097b220aa51a4?x=x&version=2",
            "client": "website",
            "content": "<p>That's a really good question. I usually don't use close(ch) this way, instead I send a sentinel value on the channel, or have pre-arranged the number of elements. I'll play around and see if I can come up with something.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 126932071,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "david@zentus.com",
            "sender_full_name": "David Crawshaw (he) (S1'18)",
            "sender_id": 116353,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "wait on multiple channels until all close w/o busy wait",
            "submessages": [],
            "timestamp": 1527007229,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/612c7c2a108d7850c62d1d2293a481aa42855408?x=x&version=2",
            "client": "website",
            "content": "<p>I've found that <code>defer close(ch)</code> can often be used in place of a <code>context.Context</code> for things in a pipeline, as long as the consumers are written to respect channel closure. Perhaps this habit has lead me to this corner artificially?</p>\n<p>A pre-arranged number of elements or a sentinel value seems like it still wouldn't exactly solve this (if your join is using <code>select</code>) but I'm interested to see what you come up with!!</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 126932146,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "PLRedmond@gmail.com",
            "sender_full_name": "Patrick Redmond (W'14)",
            "sender_id": 5014,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "wait on multiple channels until all close w/o busy wait",
            "submessages": [],
            "timestamp": 1527007353,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/002c4f97784bd6c6e747c239d84097b220aa51a4?x=x&version=2",
            "client": "website",
            "content": "<p>Here is a case that might work, as long as you don't send zero values on your channels:</p>\n<div class=\"codehilite\"><pre><span></span>handle := func(val string) {\n        fmt.Println(&quot;ch value: &quot;, val)\n}\nch1 := make(chan string, 8)\nch2 := make(chan string, 8)\n\nch1 &lt;- &quot;ch1 val&quot;\nclose(ch1)\nch2 &lt;- &quot;ch2 val&quot;\nclose(ch2)\n\nvar ch1Closed, ch2Closed bool\nfor {\n        select {\n        case v, ok := &lt;-ch1:\n                if !ok {\n                        ch1Closed = true\n                } else {\n                        handle(v)\n                }\n        default:\n        }\n\n        select {\n        case v, ok := &lt;-ch2:\n                if !ok {\n                        ch2Closed = true\n                } else {\n                        handle(v)\n                }\n        default:\n        }\n\n        if ch1Closed &amp;&amp; ch2Closed {\n                fmt.Println(&quot;done&quot;)\n                break\n        }\n\n        select {\n        case v := &lt;-ch1:\n                if v != &quot;&quot; {\n                        handle(v)\n                }\n        case v := &lt;-ch2:\n                if v != &quot;&quot; {\n                        handle(v)\n                }\n        }\n}\n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 126932665,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "david@zentus.com",
            "sender_full_name": "David Crawshaw (he) (S1'18)",
            "sender_id": 116353,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "wait on multiple channels until all close w/o busy wait",
            "submessages": [],
            "timestamp": 1527008121,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/612c7c2a108d7850c62d1d2293a481aa42855408?x=x&version=2",
            "client": "website",
            "content": "<p>so the first two <code>select</code> blocks are just there to check if the channels are empty (and handle a value incidentally) but otherwise you primarily wait in the third <code>select</code>?</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 126934453,
            "is_me_message": false,
            "last_edit_timestamp": 1527010282,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "PLRedmond@gmail.com",
            "sender_full_name": "Patrick Redmond (W'14)",
            "sender_id": 5014,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "wait on multiple channels until all close w/o busy wait",
            "submessages": [],
            "timestamp": 1527010272,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/612c7c2a108d7850c62d1d2293a481aa42855408?x=x&version=2",
            "client": "website",
            "content": "<p>hmm <span class=\"emoji emoji-1f914\" title=\"thinking face\">:thinking_face:</span></p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 126934580,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "PLRedmond@gmail.com",
            "sender_full_name": "Patrick Redmond (W'14)",
            "sender_id": 5014,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "wait on multiple channels until all close w/o busy wait",
            "submessages": [],
            "timestamp": 1527010407,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/002c4f97784bd6c6e747c239d84097b220aa51a4?x=x&version=2",
            "client": "website",
            "content": "<p>right, the first two selects don't block, they check for closed channels. the final select blocks and ignores zero values, which is what it gets if both channels are closed.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 126936113,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "david@zentus.com",
            "sender_full_name": "David Crawshaw (he) (S1'18)",
            "sender_id": 116353,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "wait on multiple channels until all close w/o busy wait",
            "submessages": [],
            "timestamp": 1527012145,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/002c4f97784bd6c6e747c239d84097b220aa51a4?x=x&version=2",
            "client": "website",
            "content": "<p>it kinda sucks to lose zero values though, they are useful. the way to make it hurt least is if your send a *T, where it's clear that a nil *T doesn't make any sense.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 126936146,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "david@zentus.com",
            "sender_full_name": "David Crawshaw (he) (S1'18)",
            "sender_id": 116353,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "wait on multiple channels until all close w/o busy wait",
            "submessages": [],
            "timestamp": 1527012187,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/391eb183c3474a15bf9ad0e87d3ff118?d=identicon&version=1",
            "client": "website",
            "content": "<p>One of the great examples where it'd be so much clearer if we had and Either/Maybe type. I suppose the <code>v, ok := &lt;-ch</code> syntax does fulfill the Either/Maybe pattern.</p>\n<div class=\"codehilite\"><pre><span></span>var closed = 0\nin1, in2 := make(chan, string, 8), make(chan, string, 8)\nproc := make(chan, struct{})\n\nhandle := func(v string) {\n        fmt.Println(&quot;read:&quot;, v)\n}\n\ngo func() {\n    for {\n        select {\n        case v, ok := &lt;- in1:\n            if !ok {\n                closed++\n            } else {\n                handle(v)\n            }\n        case v, ok := &lt;- in2:\n            if !ok {\n                closed++\n            } else {\n                handle(v)\n            }\n        }\n        if closed &gt; 2 {\n            close(proc)\n            return\n        }\n    }\n}()\n\nin1 &lt;- &quot;&quot;\nin2 &lt;- &quot;&quot;\n\nclose(in1)\nclose(in2)\n&lt;-proc\n</pre></div>\n\n\n<p>I think the above allows usage of zero values? It's basically a Waitgroup, using a count to trigger exiting. Oh, danmit, haha I just made a busy wait.....</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 127008269,
            "is_me_message": false,
            "last_edit_timestamp": 1527127593,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "ghthor@gmail.com",
            "sender_full_name": "Will Drengwitz (he) (W1'17)",
            "sender_id": 7099,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "wait on multiple channels until all close w/o busy wait",
            "submessages": [],
            "timestamp": 1527127402,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/391eb183c3474a15bf9ad0e87d3ff118?d=identicon&version=1",
            "client": "website",
            "content": "<p>No Busy Wait!! Heres my solution using my favorite statement <code>goto</code>! </p>\n<p><a href=\"https://play.golang.org/p/XYqKnhf8Gpv\" target=\"_blank\" title=\"https://play.golang.org/p/XYqKnhf8Gpv\">https://play.golang.org/p/XYqKnhf8Gpv</a></p>\n<p>I lied, the above has a bug. The trick is to set the channel == nil when you get the !ok value signaling it was closed.</p>\n<p><a href=\"https://play.golang.org/p/sMvSex5td2c\" target=\"_blank\" title=\"https://play.golang.org/p/sMvSex5td2c\">https://play.golang.org/p/sMvSex5td2c</a></p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">package</span> <span class=\"nx\">main</span>\n\n<span class=\"kn\">import</span> <span class=\"p\">(</span>\n    <span class=\"s\">&quot;fmt&quot;</span>\n    <span class=\"s\">&quot;time&quot;</span>\n<span class=\"p\">)</span>\n\n<span class=\"kd\">func</span> <span class=\"nx\">main</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n    <span class=\"nx\">in1</span> <span class=\"o\">:=</span> <span class=\"nb\">make</span><span class=\"p\">(</span><span class=\"kd\">chan</span> <span class=\"kt\">string</span><span class=\"p\">,</span> <span class=\"mi\">8</span><span class=\"p\">)</span>\n    <span class=\"nx\">in2</span> <span class=\"o\">:=</span> <span class=\"nb\">make</span><span class=\"p\">(</span><span class=\"kd\">chan</span> <span class=\"kt\">string</span><span class=\"p\">,</span> <span class=\"mi\">8</span><span class=\"p\">)</span>\n    <span class=\"nx\">proc</span> <span class=\"o\">:=</span> <span class=\"nb\">make</span><span class=\"p\">(</span><span class=\"kd\">chan</span> <span class=\"kd\">struct</span><span class=\"p\">{})</span>\n\n    <span class=\"k\">go</span> <span class=\"kd\">func</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n        <span class=\"k\">defer</span> <span class=\"nb\">close</span><span class=\"p\">(</span><span class=\"nx\">proc</span><span class=\"p\">)</span>\n        <span class=\"kd\">var</span> <span class=\"nx\">v</span> <span class=\"kt\">string</span>\n        <span class=\"kd\">var</span> <span class=\"nx\">ok</span> <span class=\"kt\">bool</span>\n    <span class=\"nx\">readLoop</span><span class=\"p\">:</span>\n        <span class=\"k\">for</span> <span class=\"p\">{</span>\n            <span class=\"k\">if</span> <span class=\"nx\">in1</span> <span class=\"o\">==</span> <span class=\"kc\">nil</span> <span class=\"o\">&amp;&amp;</span> <span class=\"nx\">in2</span> <span class=\"o\">==</span> <span class=\"kc\">nil</span> <span class=\"p\">{</span>\n                <span class=\"k\">return</span>\n            <span class=\"p\">}</span>\n\n            <span class=\"k\">select</span> <span class=\"p\">{</span>\n            <span class=\"k\">case</span> <span class=\"nx\">v</span><span class=\"p\">,</span> <span class=\"nx\">ok</span> <span class=\"p\">=</span> <span class=\"o\">&lt;-</span><span class=\"nx\">in1</span><span class=\"p\">:</span>\n                <span class=\"k\">if</span> <span class=\"p\">!</span><span class=\"nx\">ok</span> <span class=\"p\">{</span>\n                    <span class=\"nx\">in1</span> <span class=\"p\">=</span> <span class=\"kc\">nil</span>\n                    <span class=\"k\">goto</span> <span class=\"nx\">readLoop</span>\n                <span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"p\">{</span>\n                    <span class=\"k\">goto</span> <span class=\"nx\">handle</span>\n                <span class=\"p\">}</span>\n            <span class=\"k\">case</span> <span class=\"nx\">v</span><span class=\"p\">,</span> <span class=\"nx\">ok</span> <span class=\"p\">=</span> <span class=\"o\">&lt;-</span><span class=\"nx\">in2</span><span class=\"p\">:</span>\n                <span class=\"k\">if</span> <span class=\"p\">!</span><span class=\"nx\">ok</span> <span class=\"p\">{</span>\n                    <span class=\"nx\">in2</span> <span class=\"p\">=</span> <span class=\"kc\">nil</span>\n                    <span class=\"k\">goto</span> <span class=\"nx\">readLoop</span>\n                <span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"p\">{</span>\n                    <span class=\"k\">goto</span> <span class=\"nx\">handle</span>\n                <span class=\"p\">}</span>\n            <span class=\"p\">}</span>\n\n            <span class=\"nb\">panic</span><span class=\"p\">(</span><span class=\"s\">&quot;BUSY WAIT&quot;</span><span class=\"p\">)</span>\n        <span class=\"nx\">handle</span><span class=\"p\">:</span>\n            <span class=\"nx\">fmt</span><span class=\"p\">.</span><span class=\"nx\">Println</span><span class=\"p\">(</span><span class=\"s\">&quot;read:&quot;</span><span class=\"p\">,</span> <span class=\"nx\">v</span><span class=\"p\">)</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">}()</span>\n\n    <span class=\"nx\">in1</span> <span class=\"o\">&lt;-</span> <span class=\"s\">&quot;in1&quot;</span>\n    <span class=\"nx\">in2</span> <span class=\"o\">&lt;-</span> <span class=\"s\">&quot;in2&quot;</span>\n    <span class=\"nb\">close</span><span class=\"p\">(</span><span class=\"nx\">in1</span><span class=\"p\">)</span>\n    <span class=\"nx\">time</span><span class=\"p\">.</span><span class=\"nx\">Sleep</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n    <span class=\"nx\">in2</span> <span class=\"o\">&lt;-</span> <span class=\"s\">&quot;&quot;</span>\n    <span class=\"nx\">in2</span> <span class=\"o\">&lt;-</span> <span class=\"s\">&quot;&quot;</span>\n    <span class=\"nx\">in2</span> <span class=\"o\">&lt;-</span> <span class=\"s\">&quot;val1&quot;</span>\n    <span class=\"nb\">close</span><span class=\"p\">(</span><span class=\"nx\">in2</span><span class=\"p\">)</span>\n\n    <span class=\"k\">select</span> <span class=\"p\">{</span>\n    <span class=\"k\">case</span> <span class=\"o\">&lt;-</span><span class=\"nx\">time</span><span class=\"p\">.</span><span class=\"nx\">After</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span>\n    <span class=\"k\">case</span> <span class=\"o\">&lt;-</span><span class=\"nx\">proc</span><span class=\"p\">:</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 127009061,
            "is_me_message": false,
            "last_edit_timestamp": 1527130028,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "ghthor@gmail.com",
            "sender_full_name": "Will Drengwitz (he) (W1'17)",
            "sender_id": 7099,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "wait on multiple channels until all close w/o busy wait",
            "submessages": [],
            "timestamp": 1527129272,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/0a35beaf5a354dafdf10494c0313e10fffc154fd?x=x&version=1",
            "client": "website",
            "content": "<p>(deleted)</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 127316610,
            "is_me_message": false,
            "last_edit_timestamp": 1527698848,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "maia.mcc@gmail.com",
            "sender_full_name": "Maia McCormick (she) (S2'14)",
            "sender_id": 6175,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "which goroutine is not blocking?",
            "submessages": [],
            "timestamp": 1527698402,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/0a35beaf5a354dafdf10494c0313e10fffc154fd?x=x&version=1",
            "client": "website",
            "content": "<p>(deleted)</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 127316659,
            "is_me_message": false,
            "last_edit_timestamp": 1527698843,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "maia.mcc@gmail.com",
            "sender_full_name": "Maia McCormick (she) (S2'14)",
            "sender_id": 6175,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "which goroutine is not blocking?",
            "submessages": [],
            "timestamp": 1527698414,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/6527e077e84e20214d5373101ea15910d6b6f7a3?x=x&version=1",
            "client": "website",
            "content": "<p>Hey y'all. I'm wondering if there's a super common and solid pattern for running a go application indefinitely. I'm specifically thinking about bots here. But here's my exact situation. I'm running <a href=\"https://github.com/ifo/alum-bot\" target=\"_blank\" title=\"https://github.com/ifo/alum-bot\">alum-bot</a> using a for loop that ranges on a channel that <em>should</em> always have messages in it, or be waiting for them. It's also just being run with a <code>./golang-binary</code> type thing. But it seems to turn itself off after 2 - 5 days, and I'm not sure why, or what the best way to monitor it is.<br>\nAnyway, what do you all use to run your bot like things forever? Also if there's a potentially very easy way to turn this into a service (I run debian), I'm all ears :)</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 127578898,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "steve@redlua.com",
            "sender_full_name": "Steven McCarthy (he) (SP2'15)",
            "sender_id": 7871,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "Run something (like a bot) indefinitely",
            "submessages": [],
            "timestamp": 1528167253,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/7d2ab014ebf55e99afffba1a3d92be8155754f0f?x=x&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-id=\"7871\">@Steven McCarthy (SP2'15)</span> getting this run by your init system (probably systemd at this point) is pretty approachable. If it's systemd, something like <code>mybot.service</code> in <code>/etc/systemd/system/</code> with contents</p>\n<div class=\"codehilite\"><pre><span></span>[Unit]\nDescription=Some string you want to show up in systemctl status\n\n[Service]\nExecStart=/path/to/binary\nRestart=always\n\n[Install]\nAfter=network.target\nWante=network.target\n</pre></div>\n\n\n<p>If you want to be slightly fancy with security, you can put <code>DynamicUser=yes</code> under the <code>[Service]</code> section. This will run the binary as a non-root user that you don't have to manage yourself. It's a semi-new thing so depending on your debian release, you may or may not have it.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 127580654,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "kamal@marhubi.com",
            "sender_full_name": "Kamal Marhubi (he) (m2'18)",
            "sender_id": 8090,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "Run something (like a bot) indefinitely",
            "submessages": [],
            "timestamp": 1528170962,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/612c7c2a108d7850c62d1d2293a481aa42855408?x=x&version=2",
            "client": "website",
            "content": "<p>At twitch most of our services' <code>main(){ ... }</code> drop in to the <code>http.ListenAndServe</code> loop and that \"runs indefinitely\"</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 127663229,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "PLRedmond@gmail.com",
            "sender_full_name": "Patrick Redmond (W'14)",
            "sender_id": 5014,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "Run something (like a bot) indefinitely",
            "submessages": [],
            "timestamp": 1528300724,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/612c7c2a108d7850c62d1d2293a481aa42855408?x=x&version=2",
            "client": "website",
            "content": "<p>IE. You build an abstraction that doesn't return and call it a service.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 127663254,
            "is_me_message": false,
            "last_edit_timestamp": 1528301028,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "PLRedmond@gmail.com",
            "sender_full_name": "Patrick Redmond (W'14)",
            "sender_id": 5014,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "Run something (like a bot) indefinitely",
            "submessages": [],
            "timestamp": 1528300753,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/612c7c2a108d7850c62d1d2293a481aa42855408?x=x&version=2",
            "client": "website",
            "content": "<p>Monitoring: Add log messages to find out where it crashed! Try running it once with <code>strace</code> and <code>tail</code> or something to get a very vebose log of the moment leading up to the crash. Get graphs of system memory &amp; cpu around the crash time (I like <code>htop</code> for small things, but there are also system monitor tools that log to disk, giving you a graph).</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 127663270,
            "is_me_message": false,
            "last_edit_timestamp": 1528300957,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "PLRedmond@gmail.com",
            "sender_full_name": "Patrick Redmond (W'14)",
            "sender_id": 5014,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "Run something (like a bot) indefinitely",
            "submessages": [],
            "timestamp": 1528300771,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/612c7c2a108d7850c62d1d2293a481aa42855408?x=x&version=2",
            "client": "website",
            "content": "<p>In addition to leveraging your init system: Tell your init-system to restart your daemon when it crashes! :) (And then use <code>journalctl -u &lt;your unit name&gt;</code> or your init-system's system logger to find out more about when, why, and how-often your daemon is crashing!)</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 127663283,
            "is_me_message": false,
            "last_edit_timestamp": 1528371549,
            "reactions": [
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "thumbs_up",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "stanley@zheng.nyc",
                        "full_name": "Stanley Zheng (they) (W1'19)",
                        "id": 100315
                    },
                    "user_id": 100315
                }
            ],
            "recipient_id": 22624,
            "sender_email": "PLRedmond@gmail.com",
            "sender_full_name": "Patrick Redmond (W'14)",
            "sender_id": 5014,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "Run something (like a bot) indefinitely",
            "submessages": [],
            "timestamp": 1528300790,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/002c4f97784bd6c6e747c239d84097b220aa51a4?x=x&version=2",
            "client": "website",
            "content": "<p>Speaking of supervisors, I wrote one for Go programs last week: <a href=\"https://github.com/crawshaw/littleboss\" target=\"_blank\" title=\"https://github.com/crawshaw/littleboss\">https://github.com/crawshaw/littleboss</a></p>\n<p>I have no particular problem with systemd, but I've seen a lot of init systems come and go, and prefer all of my configuration to be in my programs where possible.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 127907102,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f389",
                    "emoji_name": "tada",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "ghthor@gmail.com",
                        "full_name": "Will Drengwitz (he) (W1'17)",
                        "id": 7099
                    },
                    "user_id": 7099
                },
                {
                    "emoji_code": "1f389",
                    "emoji_name": "tada",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "stanley@zheng.nyc",
                        "full_name": "Stanley Zheng (they) (W1'19)",
                        "id": 100315
                    },
                    "user_id": 100315
                }
            ],
            "recipient_id": 22624,
            "sender_email": "david@zentus.com",
            "sender_full_name": "David Crawshaw (he) (S1'18)",
            "sender_id": 116353,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "Run something (like a bot) indefinitely",
            "submessages": [],
            "timestamp": 1528734063,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/7d2ab014ebf55e99afffba1a3d92be8155754f0f?x=x&version=1",
            "client": "website",
            "content": "<p>Quis custodiet ipsos custodes? You'll still want your little boss to be supervised by init, I think.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 127912168,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "kamal@marhubi.com",
            "sender_full_name": "Kamal Marhubi (he) (m2'18)",
            "sender_id": 8090,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "Run something (like a bot) indefinitely",
            "submessages": [],
            "timestamp": 1528740999,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/002c4f97784bd6c6e747c239d84097b220aa51a4?x=x&version=2",
            "client": "website",
            "content": "<p>For sure, though my favorite init systems involve a single rc script. And you'll want to pipe the output to something that manages logs. (Anything from a log rotator, to syslog, or oklog.)</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 127913784,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "david@zentus.com",
            "sender_full_name": "David Crawshaw (he) (S1'18)",
            "sender_id": 116353,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "Run something (like a bot) indefinitely",
            "submessages": [],
            "timestamp": 1528742988,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/6527e077e84e20214d5373101ea15910d6b6f7a3?x=x&version=1",
            "client": "website",
            "content": "<p>There's a lot of good stuff here. I feel like I have a new <span class=\"emoji emoji-1f430\" title=\"rabbit\">:rabbit:</span> <span class=\"emoji emoji-1f573\" title=\"hole\">:hole:</span> to dive into to figure out how my bot is dying, now that it's running with systemd. Thanks y'all!</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 127931467,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "steve@redlua.com",
            "sender_full_name": "Steven McCarthy (he) (SP2'15)",
            "sender_id": 7871,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "Run something (like a bot) indefinitely",
            "submessages": [],
            "timestamp": 1528771158,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/0a35beaf5a354dafdf10494c0313e10fffc154fd?x=x&version=1",
            "client": "website",
            "content": "<p>(deleted)</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 128489717,
            "is_me_message": false,
            "last_edit_timestamp": 1529696133,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "maia.mcc@gmail.com",
            "sender_full_name": "Maia McCormick (she) (S2'14)",
            "sender_id": 6175,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "[deleted]",
            "submessages": [],
            "timestamp": 1529696058,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/0a35beaf5a354dafdf10494c0313e10fffc154fd?x=x&version=1",
            "client": "website",
            "content": "<p>(deleted)</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 128489721,
            "is_me_message": false,
            "last_edit_timestamp": 1529696117,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "maia.mcc@gmail.com",
            "sender_full_name": "Maia McCormick (she) (S2'14)",
            "sender_id": 6175,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "[deleted]",
            "submessages": [],
            "timestamp": 1529696070,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/0a35beaf5a354dafdf10494c0313e10fffc154fd?x=x&version=1",
            "client": "website",
            "content": "<p>aka come try the new toy product i've been working on!</p>\n<p>we've got an experimental little app-let that we're calling <code>wat</code> (for <strong>Win At Testing!</strong>) that smartly decides what tests you should run (based on all of your available commands) and runs them for you.<br>\nuse cases include:<br>\n1. oh shoot, what's the incantation to run the tests for this package? (wat will run them for you automatically!)<br>\n2. i just changed code in 5 different packages and i can't remember what tests to run<br>\n3. <em>gosh i sure hope this file i changed doesn't affect tests all the way on the other side of the codebase</em>. (spoiler: you can never rely on this)</p>\n<p>check it out: <a href=\"https://github.com/windmilleng/wat\" target=\"_blank\" title=\"https://github.com/windmilleng/wat\">https://github.com/windmilleng/wat</a></p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 128490290,
            "is_me_message": false,
            "last_edit_timestamp": 1529696990,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "maia.mcc@gmail.com",
            "sender_full_name": "Maia McCormick (she) (S2'14)",
            "sender_id": 6175,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "WAT: Win at Testing!",
            "submessages": [],
            "timestamp": 1529696966,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/7d2ab014ebf55e99afffba1a3d92be8155754f0f?x=x&version=1",
            "client": "website",
            "content": "<p>This sounds pretty cool. I don't write go, but might give it a shot on my nodejs (mixed typescript / coffeescript) codebase at work.</p>\n<p>The learning-by-fuzzing is interesting, but I expect it to be really quite painful on our test suite. I'm curious how you arrived at it vs a static analysis approach. Anything you can share about the design process?</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 128811256,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "kamal@marhubi.com",
            "sender_full_name": "Kamal Marhubi (he) (m2'18)",
            "sender_id": 8090,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "WAT: Win at Testing!",
            "submessages": [],
            "timestamp": 1530248312,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/216dd445a46512212fb170dd7574e740416478c2?x=x&version=1",
            "client": "ZulipElectron",
            "content": "<p>Hey y'all,</p>\n<p>I thought I'd write my thoughts/questions on Go while I learn on this stream. I'm only just starting coming from three plus years of Erlang/Elixir.</p>\n<p>I'm slowly going thru <a href=\"http://howistart.org/posts/go/1/index.html\" target=\"_blank\" title=\"http://howistart.org/posts/go/1/index.html\">http://howistart.org/posts/go/1/index.html</a>. I'll take the tour next. The first thing I wonder is why <code>main</code> has no signature:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kd\">func</span> <span class=\"nx\">main</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n    <span class=\"nx\">http</span><span class=\"p\">.</span><span class=\"nx\">HandleFunc</span><span class=\"p\">(</span><span class=\"s\">&quot;/&quot;</span><span class=\"p\">,</span> <span class=\"nx\">hello</span><span class=\"p\">)</span>\n    <span class=\"nx\">http</span><span class=\"p\">.</span><span class=\"nx\">ListenAndServe</span><span class=\"p\">(</span><span class=\"s\">&quot;:8080&quot;</span><span class=\"p\">,</span> <span class=\"kc\">nil</span><span class=\"p\">)</span>\n<span class=\"p\">}</span>\n</pre></div>\n\n\n<p>Then, <code>hello</code> has a partial signature (no return value):</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kd\">func</span> <span class=\"nx\">hello</span><span class=\"p\">(</span><span class=\"nx\">w</span> <span class=\"nx\">http</span><span class=\"p\">.</span><span class=\"nx\">ResponseWriter</span><span class=\"p\">,</span> <span class=\"nx\">r</span> <span class=\"o\">*</span><span class=\"nx\">http</span><span class=\"p\">.</span><span class=\"nx\">Request</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"nx\">w</span><span class=\"p\">.</span><span class=\"nx\">Write</span><span class=\"p\">([]</span><span class=\"nb\">byte</span><span class=\"p\">(</span><span class=\"s\">&quot;Hey Joe!\\n&quot;</span><span class=\"p\">))</span>\n<span class=\"p\">}</span>\n</pre></div>\n\n\n<p>What does it mean... is there <code>void</code> in Go? No doubt I'll find out but I'm curious to see how this plays out. Granted: declaring a return type isn't important if returning a value isn't important.</p>\n<p>A couple more questions that <code>hello</code> raises for me are:</p>\n<p>\u2022 when do we pass/return pointers? There are some obvious answers if some kinds of efficiency are important<br>\n\u2022 why not just pass a <code>Request</code> into <code>hello</code> and have the signature declare and enforce that we return a hypothetical <code>Response</code>?<br>\n\u2022 does anyone else find it confusing to mix interfaces like the <code>ResponseWriter</code> with something more like a concrete/type declaration like <code>Request</code> pointer?</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 128871965,
            "is_me_message": false,
            "last_edit_timestamp": 1530352114,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "joseph.yiasemides13@alumni.imperial.ac.uk",
            "sender_full_name": "Joseph George Yiasemides (he) (SP1'17)",
            "sender_id": 100508,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "Learning Go - Question",
            "submessages": [],
            "timestamp": 1530349557,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/c080bc6b7669256b064858686aca1c97a8bc27e1?x=x&version=1",
            "client": "ZulipMobile",
            "content": "<p>Hey! A few answers to your questions:</p>\n<ul>\n<li>\n<p><code>main()</code> has \u201cno signature\u201d because it takes no arguments and it returns no values. <code>hello()</code> has a \u201cpartial signature\u201d because it returns no values. There is no <code>void</code> - if there are no values to be mentioned, you just don\u2019t write anything. (I used quotes above because those signatures are in fact complete).</p>\n</li>\n<li>\n<p>Usually you pass a pointer for performance, because you want to mutate the value, or because you want to be able to pass <code>nil</code> (nothing) for that argument.</p>\n</li>\n<li>\n<p>You could have functions in your application that return <code>Response</code>s, but at some point you need to put data on the wire, and that\u2019s what <code>http.ResponseWriter</code> is for. In general, it is common to pass a <code>Reader</code> or a <code>Writer</code> to functions that do I/O; it\u2019s a form of dependency injection. For example, you can pass <code>hello()</code> an <code>httptest.ResponseRecorder</code> object in tests, but pass it a \u201creal\u201d ResponseWriter (that writes data to a real connection) in production.</p>\n</li>\n<li>\n<p>Mixing concrete types and interfaces is a bit confusing, but it\u2019s very common... my guess is you\u2019ll get used to it after a while.</p>\n</li>\n</ul>\n<p>Hope this helps!</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 128894534,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "katrina.m.ellison@gmail.com",
            "sender_full_name": "Katrina Ellison Geltman (she) (W'14)",
            "sender_id": 4996,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "Learning Go - Question",
            "submessages": [],
            "timestamp": 1530392640,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/8b0373befcb9fe1ca27ee0ac86fccc63eb8ccabe?x=x&version=2",
            "client": "website",
            "content": "<p>Hi <span class=\"user-mention\" data-user-id=\"100508\">@Joseph George Yiasemides (SP1'17)</span>. Thought I'd be in a position to answer this since I was in Go for a while before coming into Erlang (your exact opposite!):</p>\n<ul>\n<li>\n<p>First, Go isn't a functional language like Erlang. When it doesn't return, it doesn't. No <code>()</code>, <code>unit</code>, or what not. You can return a <code>nil</code> from your custom function if you want, but that's mostly when your intent was to return either a meaningful value or <code>nil</code>.</p>\n</li>\n<li>\n<p>Every function copies a value from what you pass into the parameter, so if your intent is to mutate the initial value, you need to pass its pointer/reference instead.</p>\n</li>\n<li>\n<p>Mixing Interfaces and concrete types are indeed confusing to me too.</p>\n</li>\n</ul>\n<p>I have been programming in Go for a few years and even created a few libraries, but what's funny is upon entering my batch at RC I started learning other functional languages and haven't really returned to work with Go that much any more. </p>\n<p>Happy coding!</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 128894990,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "jo.chasinga@gmail.com",
            "sender_full_name": "Joe Chasinga (S2'17)",
            "sender_id": 101482,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "Learning Go - Question",
            "submessages": [],
            "timestamp": 1530393487,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/216dd445a46512212fb170dd7574e740416478c2?x=x&version=1",
            "client": "ZulipElectron",
            "content": "<p>Hey both (<span class=\"user-mention\" data-user-id=\"4996\">@Katrina Ellison Geltman (W'14)</span> + <span class=\"user-mention\" data-user-id=\"101482\">@Panisuan Chasinga (S2'17)</span>)! Thanks for your answers... it's really interesting to experience, again, how a change in language (or paradigm rather) needs a change in mindset.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 128912242,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "joseph.yiasemides13@alumni.imperial.ac.uk",
            "sender_full_name": "Joseph George Yiasemides (he) (SP1'17)",
            "sender_id": 100508,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "Learning Go - Question",
            "submessages": [],
            "timestamp": 1530431445,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/8b0373befcb9fe1ca27ee0ac86fccc63eb8ccabe?x=x&version=2",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-id=\"100508\">@Joseph George Yiasemides (SP1'17)</span> you're welcome. I think the change in mindset only happens or is necessary when switching between languages with different \"paradigm\", such as from a functional language to an imperative one.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 128923072,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "jo.chasinga@gmail.com",
            "sender_full_name": "Joe Chasinga (S2'17)",
            "sender_id": 101482,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "Learning Go - Question",
            "submessages": [],
            "timestamp": 1530456224,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/216dd445a46512212fb170dd7574e740416478c2?x=x&version=1",
            "client": "ZulipElectron",
            "content": "<p><span class=\"user-mention\" data-user-id=\"101482\">@Panisuan Chasinga (S2'17)</span> Yeah: that's certainly true... it's nice to experience it. This is why I wanted to go for another language and another paradigm. <span class=\"user-mention\" data-user-id=\"4996\">@Katrina Ellison Geltman (W'14)</span> You see... the reason I ask is because if I were designing an API w/ a handler then I'd do it so that the handler return a data-structure that the caller would be responsible for writing out <span class=\"emoji emoji-1f638\" title=\"smile cat\">:smile_cat:</span> Perhaps the reason for the <code>http.ResponseWriter</code> is so that we can write out fragments of a request (a stream of sorts or whatever the HTTP terminology is). Not sure tho. The thought has just occurred to me</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 128963438,
            "is_me_message": false,
            "last_edit_timestamp": 1530538120,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "joseph.yiasemides13@alumni.imperial.ac.uk",
            "sender_full_name": "Joseph George Yiasemides (he) (SP1'17)",
            "sender_id": 100508,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "Learning Go - Question",
            "submessages": [],
            "timestamp": 1530538067,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/c080bc6b7669256b064858686aca1c97a8bc27e1?x=x&version=1",
            "client": "ZulipMobile",
            "content": "<p>Oh yeah... you could totally do it that way. In that case, you would probably use an <code>http.ResponseWriter</code> in the caller to write out whatever data structure the handler returns.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 128964962,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "thumbs_up",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "carlos@amedee.net",
                        "full_name": "Carlos Amedee (he) (m1'18)",
                        "id": 105722
                    },
                    "user_id": 105722
                },
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "thumbs_up",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "jo.chasinga@gmail.com",
                        "full_name": "Joe Chasinga (S2'17)",
                        "id": 101482
                    },
                    "user_id": 101482
                }
            ],
            "recipient_id": 22624,
            "sender_email": "katrina.m.ellison@gmail.com",
            "sender_full_name": "Katrina Ellison Geltman (she) (W'14)",
            "sender_id": 4996,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "Learning Go - Question",
            "submessages": [],
            "timestamp": 1530539846,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/8b0373befcb9fe1ca27ee0ac86fccc63eb8ccabe?x=x&version=2",
            "client": "website",
            "content": "<p>A shameless plug, but <span class=\"user-mention\" data-user-id=\"100508\">@Joseph George Yiasemides (SP1'17)</span> you might find this past writeup of mine worthy of reading <a href=\"https://medium.com/code-zen/go-middlewares-in-a-nutshell-6e01d5846a5a\" target=\"_blank\" title=\"https://medium.com/code-zen/go-middlewares-in-a-nutshell-6e01d5846a5a\">https://medium.com/code-zen/go-middlewares-in-a-nutshell-6e01d5846a5a</a></p>\n<p>It's not specific to HTTP server, but the middleware pattern goes really well with it like peanut butter and jelly.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 128981120,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "jo.chasinga@gmail.com",
            "sender_full_name": "Joe Chasinga (S2'17)",
            "sender_id": 101482,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "Learning Go - Question",
            "submessages": [],
            "timestamp": 1530557369,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/002c4f97784bd6c6e747c239d84097b220aa51a4?x=x&version=2",
            "client": "website",
            "content": "<p>On the off chance anyone is looking for a mini-project to learn Go:</p>\n<p>I've been working on an sqlite wrapper that, unlike the other wrappers, has good multi-threading support: <a href=\"https://github.com/crawshaw/sqlite\" target=\"_blank\" title=\"https://github.com/crawshaw/sqlite\">https://github.com/crawshaw/sqlite</a></p>\n<p>But it's a low-level wrapper. It doesn't implement a database/sql driver. A driver could be built on top of the low-level wrapper. If anyone wants to give it a try I'd be happy to help.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 128992235,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "david@zentus.com",
            "sender_full_name": "David Crawshaw (he) (S1'18)",
            "sender_id": 116353,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "sqlite",
            "submessages": [],
            "timestamp": 1530572200,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/6527e077e84e20214d5373101ea15910d6b6f7a3?x=x&version=1",
            "client": "website",
            "content": "<p>I love this discussion! This makes me happy as an alum who only first used Golang in batch and has been hooked ever since. It's also my favorite language forever (at the moment) and I'm excited to have more people in batch trying it out or using it for stuff :)</p>\n<p>Anyway, one reason I find the golang http handler very interesting is the fact that it <em>doesn't</em> use the return value as the http Response. It's something I hadn't even thought about until I was writing a Django app for work and needed to respond within 4 seconds, but needed to actually do a variable amount of processing for the request. As much as 60 seconds in some cases. It meant that, instead of being able to respond and then do the necessary processing, I had to setup a job worker system that was a fair bit more complex. Theoretically I could have used python threads but I hadn't touched them at that point and time was of the essence.<br>\nFunnily enough, that specific case is less applicable to Go as goroutines are a thing. But a case I hadn't thought about until you mentioned it is that you could have this stream large files where you wouldn't <em>necessarily</em> be able to just return the file from a handler. And I suspect that might be specifically why the library is this way, considering that <a href=\"http://dl.google.com\" target=\"_blank\" title=\"http://dl.google.com\">dl.google.com</a> was one of the first big projects fully written in Go at Google (I believe, anyway). And that handles lots of downloads.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 128998722,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "steve@redlua.com",
            "sender_full_name": "Steven McCarthy (he) (SP2'15)",
            "sender_id": 7871,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "Learning Go - Question",
            "submessages": [],
            "timestamp": 1530584256,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/6527e077e84e20214d5373101ea15910d6b6f7a3?x=x&version=1",
            "client": "website",
            "content": "<p>As for interfaces vs concrete types, I also think it can be confusing. But the way I like to think about it is - interfaces are for grouping small bits of things you can <strong>do</strong>, while concrete types are for collecting stuff that you have. This, in my mind, comes from Go encouraging only having getters and setters for private properties (<a href=\"https://golang.org/doc/effective_go.html#Getters\" target=\"_blank\" title=\"https://golang.org/doc/effective_go.html#Getters\">some info here</a>) (<a href=\"https://golang.org/doc/effective_go.html#interfaces_and_types\" target=\"_blank\" title=\"https://golang.org/doc/effective_go.html#interfaces_and_types\">also here's stuff about interfaces</a>).<br>\nSo in the http handler case, I think this makes sense. A request is a big ball of information, but it's unlikely that you have many actions to take on it, other than to respond. But an http response writer is about taking a small number of actions - set headers, write some data, or inspecting the headers you're planning on sending.</p>\n<p>Though, a lot of this is admittedly more theoretical, as I don't tend to use interfaces enough in my own code. That's probably partly because I've never worked on a large project in Go professionally.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 128999344,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "steve@redlua.com",
            "sender_full_name": "Steven McCarthy (he) (SP2'15)",
            "sender_id": 7871,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "Learning Go - Question",
            "submessages": [],
            "timestamp": 1530585601,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/216dd445a46512212fb170dd7574e740416478c2?x=x&version=1",
            "client": "ZulipElectron",
            "content": "<blockquote>\n<p>But a case I hadn't thought about until you mentioned it is that you could have this stream large files where you wouldn't necessarily be able to just return the file from a handler.</p>\n</blockquote>\n<p>This is really interesting for me because the big Elixir library that does HTTP, <code>Plug</code>, is all about a pipeline of functions. One after the other. They pass around this one data-structure so <em>returning</em> is of the essence. AFAIK this is somewhat limiting if you want to send files or any response in chunks coz either there is no way to do it or it's not nice (not quite sure which).</p>\n<p>It <em>is</em> nice coming to Go to see that this kind of thing is acceptable and that there are real advantages to it</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 129031502,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "joseph.yiasemides13@alumni.imperial.ac.uk",
            "sender_full_name": "Joseph George Yiasemides (he) (SP1'17)",
            "sender_id": 100508,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "Learning Go - Question",
            "submessages": [],
            "timestamp": 1530633386,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/7bfb2e1e56050666b3e5973ea7df6ee4?d=identicon&version=1",
            "client": "website",
            "content": "<p>Hi! I've been reading a lot about testing web applications that connect to a postgres database. It seems common the implement a mock data source for testing, as described here: <a href=\"https://mycodesmells.com/post/tdd-with-golang-web-app-part-2:-database\" target=\"_blank\" title=\"https://mycodesmells.com/post/tdd-with-golang-web-app-part-2:-database\">https://mycodesmells.com/post/tdd-with-golang-web-app-part-2:-database</a>. Having a single mock data source that must implement all the methods of the datasource interface seems very inflexible. When I write unit tests in Rails, I'm used to mocking single methods on a per-test basis. Has anyone used this pattern on a larger app? It makes sense to me in small examples but seems unwieldy when there are many methods on the datastore. FWIW I'm also planning to allow integration tests to access a real test database.</p>\n<p>I was also wondering if anyone could point me to any open source go web applications that they think are well built and well tested. I've mostly been working with Rails and the open-endedness of setting up a go app feels like a big shift - it would be helpful to see some examples of how others are doing things, especially once the app gets bigger than a blog post-sized code sample.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 129546547,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "65",
                    "emoji_name": "gopher",
                    "reaction_type": "realm_emoji",
                    "user": {
                        "email": "bittmanmax@gmail.com",
                        "full_name": "Max Bittman (he) (S2'18)",
                        "id": 120392
                    },
                    "user_id": 120392
                }
            ],
            "recipient_id": 22624,
            "sender_email": "vivian.brown@gmail.com",
            "sender_full_name": "Vivian Brown (SP2'17)",
            "sender_id": 100931,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "Testing web app with database",
            "submessages": [],
            "timestamp": 1531413387,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/216dd445a46512212fb170dd7574e740416478c2?x=x&version=1",
            "client": "ZulipElectron",
            "content": "<p>Hey Vivian,</p>\n<p>Is this web application really a simple database wrapper? If so I wouldn't mock a thing. I'd go for  the DB right away. A lot of web applications I've seen are just JSON/HTTP wrappers around a DB. There's nothing we can do except to test the interaction.</p>\n<p>If there is some business logic in there then a mock might be a good idea like you said on a per test case basis. Though I have a preference against mocking... it really depends on what kind of mock we're talking about. A good design should lend itself to testing w/o a mock after all</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 130042706,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "joseph.yiasemides13@alumni.imperial.ac.uk",
            "sender_full_name": "Joseph George Yiasemides (he) (SP1'17)",
            "sender_id": 100508,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "Testing web app with database",
            "submessages": [],
            "timestamp": 1532156404,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/dbfaba9f794e06717bee38c2b6f34a5a7fcf6bc3?x=x&version=2",
            "client": "ZulipMobile",
            "content": "<p>When testing data stores in go, I almost always create an interface for the store and have two concrete implementations: memory and the DB (let's say sql or MongoDB). In integration tests against an API, I usually use a test harness that will construct a memory store. If I need to really mock the store and not the service that uses it, I create a mock struct that embeds the interface and also declares all the same methods. Those methods also have a property counterpart like SqueakFunc which is the function that should be used for Squeak instead of the underlying store. That means you can get a spy like mock where you can partially mock behavior. The stores themselves are tested agnostic from the type of store it is such that you know your DB store works the same as the memory store and you can use the memory store more often in tests for speed.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 131038179,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "Eric@erdaniels.com",
            "sender_full_name": "Eric Daniels (he) (m5'18)",
            "sender_id": 125078,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "Testing web app with database",
            "submessages": [],
            "timestamp": 1533641251,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/5d46121e9a899e151cfcd0e59aa9e9f8a78989e8?x=x&version=1",
            "client": "website",
            "content": "<p>Anyone else at GopherCon in Denver?</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 132950573,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "aditya@adityamukerjee.net",
            "sender_full_name": "Aditya Mukerjee (he) (SP1'15)",
            "sender_id": 7644,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "GopherCon",
            "submessages": [],
            "timestamp": 1535488395,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/baf638546edafe27d0eeb3964ce8d33d268047f6?x=x&version=2",
            "client": "website",
            "content": "<p>Hey golang folks, I am currently using a websocket to subscribe to a pub/sub stream from an ethereum node. The data read from the websocket could be in multiple formats i.e. the messages need to be unmarshalled into different structs. Right now I am just trying to unmarshall the messages into all of the possible formats and checking which one is filled with non-default values to know what type of message it actually is. This seems like an unscalable and bad practise - any better ways?</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 136346078,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "connor.stein2@gmail.com",
            "sender_full_name": "Connor Stein (F1'18)",
            "sender_id": 125761,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "Unmarshalling unknown json from websocket",
            "submessages": [],
            "timestamp": 1540309959,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/f47c30352bcf26bb97f17f9ee3db944cf167e09b?x=x&version=2",
            "client": "website",
            "content": "<p>Could you Unmarshal into a map[string]*json.RawMessage?</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 136347153,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "williamsykesfisher@gmail.com",
            "sender_full_name": "William Sykes Fisher (he) (F2'18)",
            "sender_id": 129933,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "Unmarshalling unknown json from websocket",
            "submessages": [],
            "timestamp": 1540310964,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/baf638546edafe27d0eeb3964ce8d33d268047f6?x=x&version=2",
            "client": "website",
            "content": "<p>Ah yeah that unmarshal raw json example in the godocs looks like what I need thx</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 136347543,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "connor.stein2@gmail.com",
            "sender_full_name": "Connor Stein (F1'18)",
            "sender_id": 125761,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "Unmarshalling unknown json from websocket",
            "submessages": [],
            "timestamp": 1540311254,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/baf638546edafe27d0eeb3964ce8d33d268047f6?x=x&version=2",
            "client": "website",
            "content": "<p>Wait no still doesn't seem to work - that example has the msg type in the message itself which is piece I don't have an don't control. I'd still have to result to checking if a field is present somehow</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 136348426,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "connor.stein2@gmail.com",
            "sender_full_name": "Connor Stein (F1'18)",
            "sender_id": 125761,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "Unmarshalling unknown json from websocket",
            "submessages": [],
            "timestamp": 1540312104,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/f47c30352bcf26bb97f17f9ee3db944cf167e09b?x=x&version=2",
            "client": "website",
            "content": "<p>Yeah, you would still need to unmarshal directly into a <code>map[string]json.RawMessage</code>, check whether the map had particular properties, and then Unmarshal the original byte string</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 136348679,
            "is_me_message": false,
            "last_edit_timestamp": 1540312377,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "williamsykesfisher@gmail.com",
            "sender_full_name": "William Sykes Fisher (he) (F2'18)",
            "sender_id": 129933,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "Unmarshalling unknown json from websocket",
            "submessages": [],
            "timestamp": 1540312357,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/216dd445a46512212fb170dd7574e740416478c2?x=x&version=1",
            "client": "website",
            "content": "<p>Hey all,</p>\n<p>I have this echo server: <a href=\"https://github.com/Dzol/ego/blob/master/main.go\" target=\"_blank\" title=\"https://github.com/Dzol/ego/blob/master/main.go\">https://github.com/Dzol/ego/blob/master/main.go</a></p>\n<p>There is OS signal handling toward the end of <code>main</code>. What I'm wondering is how we can close, cleanly, all the various sockets (currently that's the one listening socket and an arbitrary number of accepting sockets) that might be open (more generally any resource or clean-up/tear-down we have to do). The first thing that comes to mind is to give each goroutine a control channel thru which we tell them to it's time to clean-up/tear-down but that seems too much. We have to pass it around, keep hold of it, and write logic around it.</p>\n<p>In Erlang/Elixir there is a means w/ which the programmer can take care of this kind of thing.</p>\n<p>Is there a better/another way in Go (apart from the control channel approach)?</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 136815724,
            "is_me_message": false,
            "last_edit_timestamp": 1540943783,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "joseph.yiasemides13@alumni.imperial.ac.uk",
            "sender_full_name": "Joseph George Yiasemides (he) (SP1'17)",
            "sender_id": 100508,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "How to manage resources in Go",
            "submessages": [],
            "timestamp": 1540943619,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/216dd445a46512212fb170dd7574e740416478c2?x=x&version=1",
            "client": "website",
            "content": "<p><strong>update:</strong> I may have found a potential solution @ <a href=\"https://blog.golang.org/context\" target=\"_blank\" title=\"https://blog.golang.org/context\">https://blog.golang.org/context</a></p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 136835022,
            "is_me_message": false,
            "last_edit_timestamp": 1540975960,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "joseph.yiasemides13@alumni.imperial.ac.uk",
            "sender_full_name": "Joseph George Yiasemides (he) (SP1'17)",
            "sender_id": 100508,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "How to manage resources in Go",
            "submessages": [],
            "timestamp": 1540975919,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/21b9cce736cbbe8e0761bbb33863c7d3112d0136?x=x&version=2",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-id=\"100508\">@Joseph George Yiasemides (SP1'17)</span> Looking at section 8.9 of The Go Programming Language, the recommended way to handle cancelling is to pass a channel around. They recommend creating a special <code>done</code> channel that you never add items to. Instead of adding items to it, you close it. Wherever you currently read from a channel:</p>\n<div class=\"codehilite\"><pre><span></span>x := &lt;-regularChannel\n</pre></div>\n\n\n<p>you replace it with something like:</p>\n<div class=\"codehilite\"><pre><span></span>select {\n  case &lt;-done:\n    return\n  case x := &lt;-regularChannel:\n    //...\n}\n//...\n</pre></div>\n\n\n<p>That way, when the <code>done</code> channel is closed, the function will immediately return.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 137135362,
            "is_me_message": false,
            "last_edit_timestamp": 1541293047,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "michaelmalis2@gmail.com",
            "sender_full_name": "Michael Malis (SP2'19)",
            "sender_id": 8099,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "How to manage resources in Go",
            "submessages": [],
            "timestamp": 1541292867,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/216dd445a46512212fb170dd7574e740416478c2?x=x&version=1",
            "client": "website",
            "content": "<p>Thank you! I'm kinda getting to like the idea of passing a control channel around (which we can potentially close) <span class=\"emoji emoji-1f638\" title=\"smile cat\">:smile_cat:</span></p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 137151069,
            "is_me_message": false,
            "last_edit_timestamp": 1541327440,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "joseph.yiasemides13@alumni.imperial.ac.uk",
            "sender_full_name": "Joseph George Yiasemides (he) (SP1'17)",
            "sender_id": 100508,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "How to manage resources in Go",
            "submessages": [],
            "timestamp": 1541327113,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4aed3eb291895487e95cc2850cb92391?d=identicon&version=1",
            "client": "ZulipElectron",
            "content": "<p>The channel is also roughly how contexts &amp; cancelation work (via the <code>ctx.Done()</code> method), with the added benefit that you can have a tree of them (with the added trade-off that they use a tiny bit of a resource and you need to manage their cancelation correctly); I think your echo server would be really well-suited for using a root context created with <code>WithCancel</code>; then each connection could get its own additional child context with a deadline too, if you wanted, to e.g. give them a maximum connection lifetime.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 137174791,
            "is_me_message": false,
            "last_edit_timestamp": 1541372741,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "asf@boinkor.net",
            "sender_full_name": "Andreas Fuchs (he/they)",
            "sender_id": 9362,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "How to manage resources in Go",
            "submessages": [],
            "timestamp": 1541372735,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/216dd445a46512212fb170dd7574e740416478c2?x=x&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-id=\"9362\">@Andreas Fuchs</span> Thanx. I'm gonna dedicate some time to this the weekend after next... really interested to see what the code will look like</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 147929921,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "joseph.yiasemides13@alumni.imperial.ac.uk",
            "sender_full_name": "Joseph George Yiasemides (he) (SP1'17)",
            "sender_id": 100508,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "How to manage resources in Go",
            "submessages": [],
            "timestamp": 1542573004,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/0a35beaf5a354dafdf10494c0313e10fffc154fd?x=x&version=1",
            "client": "website",
            "content": "<p>hey gophers! anyone able to help with an <code>exec</code> + streaming issue?</p>\n<p>tl/dr: i want to shell out to <code>docker-compose events</code> (which prints events to stdout as they happen) and send each line of output to a channel as I receive it.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 148828755,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "maia.mcc@gmail.com",
            "sender_full_name": "Maia McCormick (she) (S2'14)",
            "sender_id": 6175,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "streaming `exec` output",
            "submessages": [],
            "timestamp": 1543534692,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/0a35beaf5a354dafdf10494c0313e10fffc154fd?x=x&version=1",
            "client": "website",
            "content": "<p>i assume my code is generally gonna look like this:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"nx\">outChan</span> <span class=\"o\">:=</span> <span class=\"nb\">make</span><span class=\"p\">(</span><span class=\"kd\">chan</span><span class=\"p\">,</span> <span class=\"kt\">string</span><span class=\"p\">)</span>\n\n<span class=\"nx\">cmd</span> <span class=\"o\">:=</span> <span class=\"nx\">exec</span><span class=\"p\">.</span><span class=\"nx\">CommandContext</span><span class=\"p\">(</span><span class=\"nx\">ctx</span><span class=\"p\">,</span> <span class=\"s\">&quot;docker-compose&quot;</span><span class=\"p\">,</span> <span class=\"s\">&quot;events&quot;</span><span class=\"p\">)</span>\n<span class=\"nx\">stderr</span><span class=\"p\">,</span> <span class=\"nx\">_</span> <span class=\"o\">:=</span> <span class=\"nx\">cmd</span><span class=\"p\">.</span><span class=\"nx\">StderrPipe</span><span class=\"p\">()</span>\n<span class=\"nx\">cmd</span><span class=\"p\">.</span><span class=\"nx\">Start</span><span class=\"p\">()</span>\n\n<span class=\"c1\">// QUESTIONABLE PSEUDOCODE BEGINS HERE</span>\n<span class=\"k\">for</span> <span class=\"nx\">_</span><span class=\"p\">,</span> <span class=\"nx\">ln</span> <span class=\"o\">:=</span> <span class=\"k\">range</span> <span class=\"nx\">stderr</span> <span class=\"p\">{</span>   <span class=\"c1\">// uhh this loop will end when the process exits and closes the pipe riiiight?</span>\n    <span class=\"nx\">outChan</span> <span class=\"o\">&lt;-</span> <span class=\"nx\">ln</span>\n<span class=\"p\">}</span>\n\n<span class=\"k\">return</span> <span class=\"nx\">cmd</span><span class=\"p\">.</span><span class=\"nx\">Wait</span><span class=\"p\">()</span>\n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 148828833,
            "is_me_message": false,
            "last_edit_timestamp": 1543535010,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "maia.mcc@gmail.com",
            "sender_full_name": "Maia McCormick (she) (S2'14)",
            "sender_id": 6175,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "streaming `exec` output",
            "submessages": [],
            "timestamp": 1543534818,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/0a35beaf5a354dafdf10494c0313e10fffc154fd?x=x&version=1",
            "client": "website",
            "content": "<p>annnnnd got my question answered else-chat: what i was looking for was <a href=\"https://golang.org/pkg/bufio/#example_Scanner_lines\" target=\"_blank\" title=\"https://golang.org/pkg/bufio/#example_Scanner_lines\"><code>bufio.Scanner</code></a></p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 148873524,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "maia.mcc@gmail.com",
            "sender_full_name": "Maia McCormick (she) (S2'14)",
            "sender_id": 6175,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "streaming `exec` output",
            "submessages": [],
            "timestamp": 1543596743,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/0a35beaf5a354dafdf10494c0313e10fffc154fd?x=x&version=1",
            "client": "website",
            "content": "<p>code snippets for anyone who's curious:</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 148873529,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "maia.mcc@gmail.com",
            "sender_full_name": "Maia McCormick (she) (S2'14)",
            "sender_id": 6175,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "streaming `exec` output",
            "submessages": [],
            "timestamp": 1543596748,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/0a35beaf5a354dafdf10494c0313e10fffc154fd?x=x&version=1",
            "client": "website",
            "content": "<p><strong>l'il test go script</strong></p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">package</span> <span class=\"nx\">main</span>\n\n<span class=\"kn\">import</span> <span class=\"p\">(</span>\n    <span class=\"s\">&quot;bufio&quot;</span>\n    <span class=\"s\">&quot;context&quot;</span>\n    <span class=\"s\">&quot;fmt&quot;</span>\n    <span class=\"s\">&quot;os&quot;</span>\n    <span class=\"s\">&quot;os/exec&quot;</span>\n    <span class=\"s\">&quot;time&quot;</span>\n<span class=\"p\">)</span>\n\n<span class=\"kd\">func</span> <span class=\"nx\">main</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n    <span class=\"nx\">ctx</span><span class=\"p\">,</span> <span class=\"nx\">_</span> <span class=\"o\">:=</span> <span class=\"nx\">context</span><span class=\"p\">.</span><span class=\"nx\">WithTimeout</span><span class=\"p\">(</span><span class=\"nx\">context</span><span class=\"p\">.</span><span class=\"nx\">Background</span><span class=\"p\">(),</span> <span class=\"nx\">time</span><span class=\"p\">.</span><span class=\"nx\">Second</span><span class=\"o\">*</span><span class=\"mi\">10</span><span class=\"p\">)</span>\n\n    <span class=\"nx\">cmd</span> <span class=\"o\">:=</span> <span class=\"nx\">exec</span><span class=\"p\">.</span><span class=\"nx\">CommandContext</span><span class=\"p\">(</span><span class=\"nx\">ctx</span><span class=\"p\">,</span> <span class=\"s\">&quot;./streaming_out.sh&quot;</span><span class=\"p\">)</span>\n    <span class=\"nx\">stdout</span><span class=\"p\">,</span> <span class=\"nx\">err</span> <span class=\"o\">:=</span> <span class=\"nx\">cmd</span><span class=\"p\">.</span><span class=\"nx\">StdoutPipe</span><span class=\"p\">()</span>\n    <span class=\"k\">if</span> <span class=\"nx\">err</span> <span class=\"o\">!=</span> <span class=\"kc\">nil</span> <span class=\"p\">{</span>\n        <span class=\"nb\">panic</span><span class=\"p\">(</span><span class=\"nx\">fmt</span><span class=\"p\">.</span><span class=\"nx\">Sprintf</span><span class=\"p\">(</span><span class=\"s\">&quot;making stdout pipe: %v&quot;</span><span class=\"p\">,</span> <span class=\"nx\">err</span><span class=\"p\">))</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"nx\">cmd</span><span class=\"p\">.</span><span class=\"nx\">Start</span><span class=\"p\">()</span>\n\n    <span class=\"nx\">time</span><span class=\"p\">.</span><span class=\"nx\">Sleep</span><span class=\"p\">(</span><span class=\"nx\">time</span><span class=\"p\">.</span><span class=\"nx\">Second</span> <span class=\"o\">*</span> <span class=\"mi\">2</span><span class=\"p\">)</span> <span class=\"c1\">// even if don&#39;t start scanning right away,</span>\n    <span class=\"c1\">// I&#39;ll still get all the lines since beginning of exec.</span>\n\n    <span class=\"nx\">scanner</span> <span class=\"o\">:=</span> <span class=\"nx\">bufio</span><span class=\"p\">.</span><span class=\"nx\">NewScanner</span><span class=\"p\">(</span><span class=\"nx\">stdout</span><span class=\"p\">)</span>\n    <span class=\"k\">for</span> <span class=\"nx\">scanner</span><span class=\"p\">.</span><span class=\"nx\">Scan</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n        <span class=\"nx\">fmt</span><span class=\"p\">.</span><span class=\"nx\">Println</span><span class=\"p\">(</span><span class=\"s\">&quot;GOT LINE:&quot;</span><span class=\"p\">,</span> <span class=\"nx\">scanner</span><span class=\"p\">.</span><span class=\"nx\">Text</span><span class=\"p\">())</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"k\">if</span> <span class=\"nx\">err</span> <span class=\"o\">:=</span> <span class=\"nx\">scanner</span><span class=\"p\">.</span><span class=\"nx\">Err</span><span class=\"p\">();</span> <span class=\"nx\">err</span> <span class=\"o\">!=</span> <span class=\"kc\">nil</span> <span class=\"p\">{</span>\n        <span class=\"nx\">fmt</span><span class=\"p\">.</span><span class=\"nx\">Fprintln</span><span class=\"p\">(</span><span class=\"nx\">os</span><span class=\"p\">.</span><span class=\"nx\">Stderr</span><span class=\"p\">,</span> <span class=\"s\">&quot;reading standard input:&quot;</span><span class=\"p\">,</span> <span class=\"nx\">err</span><span class=\"p\">)</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"nx\">err</span> <span class=\"p\">=</span> <span class=\"nx\">cmd</span><span class=\"p\">.</span><span class=\"nx\">Wait</span><span class=\"p\">()</span>\n    <span class=\"k\">if</span> <span class=\"nx\">err</span> <span class=\"o\">!=</span> <span class=\"kc\">nil</span> <span class=\"p\">{</span>\n        <span class=\"nb\">panic</span><span class=\"p\">(</span><span class=\"nx\">fmt</span><span class=\"p\">.</span><span class=\"nx\">Sprintf</span><span class=\"p\">(</span><span class=\"s\">&quot;cmd raised error: %v&quot;</span><span class=\"p\">,</span> <span class=\"nx\">err</span><span class=\"p\">))</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 148873549,
            "is_me_message": false,
            "last_edit_timestamp": 1543596784,
            "reactions": [
                {
                    "emoji_code": "1f389",
                    "emoji_name": "tada",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "ghthor@gmail.com",
                        "full_name": "Will Drengwitz (he) (W1'17)",
                        "id": 7099
                    },
                    "user_id": 7099
                }
            ],
            "recipient_id": 22624,
            "sender_email": "maia.mcc@gmail.com",
            "sender_full_name": "Maia McCormick (she) (S2'14)",
            "sender_id": 6175,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "streaming `exec` output",
            "submessages": [],
            "timestamp": 1543596768,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/0a35beaf5a354dafdf10494c0313e10fffc154fd?x=x&version=1",
            "client": "website",
            "content": "<p><strong>testing against this bash script:</strong></p>\n<div class=\"codehilite\"><pre><span></span><span class=\"ch\">#!/usr/bin/env bash</span>\n\n<span class=\"nv\">n</span><span class=\"o\">=</span><span class=\"m\">10</span>\n<span class=\"k\">for</span> <span class=\"o\">((</span><span class=\"nv\">i</span> <span class=\"o\">=</span> <span class=\"m\">0</span><span class=\"p\">;</span> i &lt; <span class=\"nv\">$n</span><span class=\"p\">;</span> i++<span class=\"o\">))</span><span class=\"p\">;</span> <span class=\"k\">do</span>\n  <span class=\"nv\">cur</span><span class=\"o\">=</span><span class=\"nv\">$i</span>\n  <span class=\"nb\">let</span> cur++\n  <span class=\"nb\">echo</span> <span class=\"s2\">&quot;this is iter </span><span class=\"nv\">$cur</span><span class=\"s2\">/</span><span class=\"nv\">$n</span><span class=\"s2\">&quot;</span>\n  sleep <span class=\"m\">0</span>.5\n<span class=\"k\">done</span>\n\nsleep <span class=\"m\">1</span>\n<span class=\"nb\">echo</span> <span class=\"s2\">&quot;finished hooray&quot;</span>\n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 148873600,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "maia.mcc@gmail.com",
            "sender_full_name": "Maia McCormick (she) (S2'14)",
            "sender_id": 6175,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "streaming `exec` output",
            "submessages": [],
            "timestamp": 1543596819,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/f86911c918d9c3eb1644189a50d74ccb?d=identicon&version=1",
            "client": "website",
            "content": "<p>Hey all, anyone pretty familiar with go modules yet?</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 158825220,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "tieg.zaharia@gmail.com",
            "sender_full_name": "Tieg A Zaharia (he) (m2'19)",
            "sender_id": 203985,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "go modules",
            "submessages": [],
            "timestamp": 1550520027,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/6527e077e84e20214d5373101ea15910d6b6f7a3?x=x&version=1",
            "client": "website",
            "content": "<p>I am so-so at them. I wrote this quick start type thing for them (<a href=\"http://redlua.com/post/go-modules-are-neat/\" target=\"_blank\" title=\"http://redlua.com/post/go-modules-are-neat/\">blog post</a>), and am happy to attempt answer questions you might have :)</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 158826535,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "steve@redlua.com",
            "sender_full_name": "Steven McCarthy (he) (SP2'15)",
            "sender_id": 7871,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "go modules",
            "submessages": [],
            "timestamp": 1550521392,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/6527e077e84e20214d5373101ea15910d6b6f7a3?x=x&version=1",
            "client": "website",
            "content": "<p>I'll add that the <a href=\"https://github.com/golang/go/wiki/Modules\" target=\"_blank\" title=\"https://github.com/golang/go/wiki/Modules\">modules wiki</a> is good but also explains too much to be a good quick reference, I think.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 158826558,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "steve@redlua.com",
            "sender_full_name": "Steven McCarthy (he) (SP2'15)",
            "sender_id": 7871,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "go modules",
            "submessages": [],
            "timestamp": 1550521435,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/6f674730326d1de1f798b147bd91c088f1ca6887?x=x&version=2",
            "client": "website",
            "content": "<p>I've been trying to use them in my workflow, happy to talk!</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 158837376,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "karthik.188@gmail.com",
            "sender_full_name": "Karthik Nayak (he) (W2'19)",
            "sender_id": 158588,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "go modules",
            "submessages": [],
            "timestamp": 1550533594,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/f86911c918d9c3eb1644189a50d74ccb?d=identicon&version=1",
            "client": "website",
            "content": "<p>Thanks <span class=\"user-mention\" data-user-id=\"7871\">@Steven McCarthy (SP2'15)</span> <span class=\"user-mention\" data-user-id=\"158588\">@Karthik Nayak (W2'19)</span> ! We were tripped up yesterday setting up a go env with modules, but I think it was bc they're disabled when you're working within $GOPATH <img alt=\":shruggies:\" class=\"emoji\" src=\"https://zulip-avatars.s3.amazonaws.com/13/emoji/images/1179.png\" title=\"shruggies\"></p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 158890381,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "tieg.zaharia@gmail.com",
            "sender_full_name": "Tieg A Zaharia (he) (m2'19)",
            "sender_id": 203985,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "go modules",
            "submessages": [],
            "timestamp": 1550590232,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/f86911c918d9c3eb1644189a50d74ccb?d=identicon&version=1",
            "client": "website",
            "content": "<p>Anyone remember off-hand if there are disadvantages to using slices if you don't need to resize them?</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 158917818,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "tieg.zaharia@gmail.com",
            "sender_full_name": "Tieg A Zaharia (he) (m2'19)",
            "sender_id": 203985,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "go modules",
            "submessages": [],
            "timestamp": 1550609395,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/052b3000f2489ccb2a411dea821d021a4c62f1e2?x=x&version=2",
            "client": "ZulipElectron",
            "content": "<p>Do you need to pass around the slices to other functions Tieg?</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 158919275,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "gs051095@gmail.com",
            "sender_full_name": "Gargi Sharma (she/they) (SP1'19)",
            "sender_id": 203533,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "go modules",
            "submessages": [],
            "timestamp": 1550610625,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/f86911c918d9c3eb1644189a50d74ccb?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-id=\"203533\">@Gargi Sharma (SP1'19)</span> nah, they'll just be used inside private functions of its owner type. Are you thinking about the difference btwn passing an array vs slice as value vs ref?</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 158919701,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "tieg.zaharia@gmail.com",
            "sender_full_name": "Tieg A Zaharia (he) (m2'19)",
            "sender_id": 203985,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "go modules",
            "submessages": [],
            "timestamp": 1550610977,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/052b3000f2489ccb2a411dea821d021a4c62f1e2?x=x&version=2",
            "client": "ZulipElectron",
            "content": "<p>Yes, I couldn't recall any disadvantages of using slices :) A slice is a wrapper over an array, so IMO there shouldn't be a downside.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 158920023,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "gs051095@gmail.com",
            "sender_full_name": "Gargi Sharma (she/they) (SP1'19)",
            "sender_id": 203533,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "go modules",
            "submessages": [],
            "timestamp": 1550611239,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/f86911c918d9c3eb1644189a50d74ccb?d=identicon&version=1",
            "client": "website",
            "content": "<p>Ok, thx! That makes sense <span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span></p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 158921799,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "tieg.zaharia@gmail.com",
            "sender_full_name": "Tieg A Zaharia (he) (m2'19)",
            "sender_id": 203985,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "go modules",
            "submessages": [],
            "timestamp": 1550612659,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/052b3000f2489ccb2a411dea821d021a4c62f1e2?x=x&version=2",
            "client": "ZulipElectron",
            "content": "<p>In the debug/elf library(<a href=\"https://golang.org/pkg/debug/elf/\" target=\"_blank\" title=\"https://golang.org/pkg/debug/elf/\">https://golang.org/pkg/debug/elf/</a>), there are two calls for getting the symbol table. To me it seems like these two calls should be equivalent, both fetching the symbol table. But when I run these I get two different answers, what is more is that the Section(\".gosymtab\") has a \"SHT_PROGBITS\" in the result. Anyone know why or what am i missing?</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 159446902,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "gs051095@gmail.com",
            "sender_full_name": "Gargi Sharma (she/they) (SP1'19)",
            "sender_id": 203533,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "Section(\".gosymtab\") vs SectionByType(elf.SHT_SYMTAB)",
            "submessages": [],
            "timestamp": 1551206855,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/052b3000f2489ccb2a411dea821d021a4c62f1e2?x=x&version=2",
            "client": "ZulipElectron",
            "content": "<p>&amp;{{.symtab SHT_SYMTAB 0x0 0 1851392 76848 23 116 8 24 76848} 0xc000072b70 0xc000072b70 0 0} when using SectionByType </p>\n<p>vs </p>\n<p>&amp;{{.gosymtab SHT_PROGBITS SHF_ALLOC 5076824 882520 0 0 0 1 0 0} 0xc0000c6300 0xc0000c6300 0 0} when using Section</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 159447004,
            "is_me_message": false,
            "last_edit_timestamp": 1551206924,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "gs051095@gmail.com",
            "sender_full_name": "Gargi Sharma (she/they) (SP1'19)",
            "sender_id": 203533,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "Section(\".gosymtab\") vs SectionByType(elf.SHT_SYMTAB)",
            "submessages": [],
            "timestamp": 1551206913,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/6527e077e84e20214d5373101ea15910d6b6f7a3?x=x&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-id=\"203533\">@Gargi Sharma (SP1'19)</span> With major caveats that I don't know much of anything about elf files, I'm curious as to what result you'd get if you called <code>elfFile.Section(\".symtab\")</code> or <code>elfFile.SectionByType(SHT_PROGBITS)</code>.<br>\nI think both of these functions return a part, but not the whole, of the symbol table. e.g. <a href=\"https://golang.org/src/debug/elf/file.go?s=5305:5359#L214\" target=\"_blank\" title=\"https://golang.org/src/debug/elf/file.go?s=5305:5359#L214\"><code>SectionByType</code></a> returns the first symbol table section with that type, and <code>Section</code> does the same but with the symbol table section name.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 159459864,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "steve@redlua.com",
            "sender_full_name": "Steven McCarthy (he) (SP2'15)",
            "sender_id": 7871,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "Section(\".gosymtab\") vs SectionByType(elf.SHT_SYMTAB)",
            "submessages": [],
            "timestamp": 1551216320,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/052b3000f2489ccb2a411dea821d021a4c62f1e2?x=x&version=2",
            "client": "ZulipElectron",
            "content": "<p>elfFile.SectionByType(SHT_PROGBITS) gives me the same result as elfFile.SectionByType(\".gosymtab\") . maybe it's just a coincidence?<br>\nAlso, someone in the go-nuts forum pointed out that the .gosymtab is not the same as ELF  symbol table.   It holds the<br>\ninformation used for stack backtraces, including runtime.Callers and friends. <br>\n<a href=\"https://golang.org/s/go12symtab\" target=\"_blank\" title=\"https://golang.org/s/go12symtab\">https://golang.org/s/go12symtab</a></p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 159460551,
            "is_me_message": false,
            "last_edit_timestamp": 1551216811,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "gs051095@gmail.com",
            "sender_full_name": "Gargi Sharma (she/they) (SP1'19)",
            "sender_id": 203533,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "Section(\".gosymtab\") vs SectionByType(elf.SHT_SYMTAB)",
            "submessages": [],
            "timestamp": 1551216797,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/6527e077e84e20214d5373101ea15910d6b6f7a3?x=x&version=1",
            "client": "website",
            "content": "<p>Ah, I'd guessed about <code>elfFile.SectionByType(SHT_PROGBITS)</code> because your output of <code>Section(\".gosymtab\")</code> above. It looks like that section has the <code>Name</code> of <code>.gosymtab</code> and the <code>Type</code> of <code>SHT_PROGBITS</code>.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 159460909,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "steve@redlua.com",
            "sender_full_name": "Steven McCarthy (he) (SP2'15)",
            "sender_id": 7871,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "Section(\".gosymtab\") vs SectionByType(elf.SHT_SYMTAB)",
            "submessages": [],
            "timestamp": 1551217060,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/6527e077e84e20214d5373101ea15910d6b6f7a3?x=x&version=1",
            "client": "website",
            "content": "<p>So calling those two functions with those two inputs should yield the same output. Possibly the same thing as <code>SectionByType(SHT_SYMTAB)</code> and <code>Section(\".symtab\")</code>.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 159460999,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "steve@redlua.com",
            "sender_full_name": "Steven McCarthy (he) (SP2'15)",
            "sender_id": 7871,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "Section(\".gosymtab\") vs SectionByType(elf.SHT_SYMTAB)",
            "submessages": [],
            "timestamp": 1551217113,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/052b3000f2489ccb2a411dea821d021a4c62f1e2?x=x&version=2",
            "client": "ZulipElectron",
            "content": "<p>Yes, makes sense. I think my confusion stemmed from the belief that .gosymtab and .symtab should be the same (they're not!). .symtab is something that the ELF tools need (.symtab stores the information from readelf -s ) vs .gosymtab stores a lot more information.  There's another Symbols() function in the debug/gosym table as well which returns the .symtab (i don't know why!!)<br>\nIntrestingly, I get an error when I try elfFile.Section(\".symtab\"): panic: bad symbol type '0' at byte 0x4</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 159556558,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f419",
                    "emoji_name": "octopus",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "steve@redlua.com",
                        "full_name": "Steven McCarthy (he) (SP2'15)",
                        "id": 7871
                    },
                    "user_id": 7871
                }
            ],
            "recipient_id": 22624,
            "sender_email": "gs051095@gmail.com",
            "sender_full_name": "Gargi Sharma (she/they) (SP1'19)",
            "sender_id": 203533,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "Section(\".gosymtab\") vs SectionByType(elf.SHT_SYMTAB)",
            "submessages": [],
            "timestamp": 1551304739,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/61f7402a76ff0aff964da46bd7948ca20279ae1f?x=x&version=1",
            "client": "website",
            "content": "<p>I thought for range` over a map was supposed to be random, it kind of is but it seems very imbalanced towards the first entry from the map... <span aria-label=\"scream\" class=\"emoji emoji-1f631\" role=\"img\" title=\"scream\">:scream:</span> </p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">package</span> <span class=\"nx\">main</span>\n\n<span class=\"kn\">import</span> <span class=\"p\">(</span>\n    <span class=\"s\">&quot;fmt&quot;</span>\n<span class=\"p\">)</span>\n\n<span class=\"kd\">func</span> <span class=\"nx\">main</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n    <span class=\"nx\">hosts</span> <span class=\"o\">:=</span> <span class=\"nb\">make</span><span class=\"p\">(</span><span class=\"kd\">map</span><span class=\"p\">[</span><span class=\"kt\">string</span><span class=\"p\">]</span><span class=\"kt\">int</span><span class=\"p\">)</span>\n    <span class=\"nx\">hosts</span><span class=\"p\">[</span><span class=\"s\">&quot;A&quot;</span><span class=\"p\">]</span> <span class=\"p\">=</span> <span class=\"mi\">0</span>\n    <span class=\"nx\">hosts</span><span class=\"p\">[</span><span class=\"s\">&quot;B&quot;</span><span class=\"p\">]</span> <span class=\"p\">=</span> <span class=\"mi\">0</span>\n    <span class=\"nx\">hosts</span><span class=\"p\">[</span><span class=\"s\">&quot;C&quot;</span><span class=\"p\">]</span> <span class=\"p\">=</span> <span class=\"mi\">0</span>\n    <span class=\"k\">for</span> <span class=\"nx\">i</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"nx\">i</span> <span class=\"p\">&lt;</span> <span class=\"mi\">10000</span><span class=\"p\">;</span> <span class=\"nx\">i</span><span class=\"o\">++</span> <span class=\"p\">{</span>\n        <span class=\"k\">for</span> <span class=\"nx\">k</span><span class=\"p\">,</span> <span class=\"nx\">_</span> <span class=\"o\">:=</span> <span class=\"k\">range</span> <span class=\"nx\">hosts</span> <span class=\"p\">{</span>\n            <span class=\"nx\">hosts</span><span class=\"p\">[</span><span class=\"nx\">k</span><span class=\"p\">]</span><span class=\"o\">++</span>\n            <span class=\"k\">break</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"k\">for</span> <span class=\"nx\">k</span><span class=\"p\">,</span> <span class=\"nx\">v</span> <span class=\"o\">:=</span> <span class=\"k\">range</span> <span class=\"nx\">hosts</span> <span class=\"p\">{</span>\n        <span class=\"nx\">fmt</span><span class=\"p\">.</span><span class=\"nx\">Printf</span><span class=\"p\">(</span><span class=\"s\">&quot;key=%s hit=%v\\n&quot;</span><span class=\"p\">,</span> <span class=\"nx\">k</span><span class=\"p\">,</span> <span class=\"nx\">v</span><span class=\"p\">)</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 159772110,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "waldemar.quevedo@gmail.com",
            "sender_full_name": "Waldemar Quevedo (F2'14)",
            "sender_id": 6706,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "for range on map not that random :O",
            "submessages": [],
            "timestamp": 1551491966,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/61f7402a76ff0aff964da46bd7948ca20279ae1f?x=x&version=1",
            "client": "website",
            "content": "<p>Result: </p>\n<div class=\"codehilite\"><pre><span></span>: key=A hit=7371\n: key=B hit=1333\n: key=C hit=1296\n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 159772140,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "waldemar.quevedo@gmail.com",
            "sender_full_name": "Waldemar Quevedo (F2'14)",
            "sender_id": 6706,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "for range on map not that random :O",
            "submessages": [],
            "timestamp": 1551491982,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/61f7402a76ff0aff964da46bd7948ca20279ae1f?x=x&version=1",
            "client": "website",
            "content": "<p>Looks like should have been using <code>rand</code> package for it to be truly random...</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">package</span> <span class=\"nx\">main</span>\n\n<span class=\"kn\">import</span> <span class=\"p\">(</span>\n    <span class=\"s\">&quot;fmt&quot;</span>\n    <span class=\"s\">&quot;math/rand&quot;</span>\n<span class=\"p\">)</span>\n\n<span class=\"kd\">func</span> <span class=\"nx\">main</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n    <span class=\"nx\">hosts</span> <span class=\"o\">:=</span> <span class=\"nb\">make</span><span class=\"p\">(</span><span class=\"kd\">map</span><span class=\"p\">[</span><span class=\"kt\">string</span><span class=\"p\">]</span><span class=\"kt\">int</span><span class=\"p\">)</span>\n    <span class=\"nx\">choices</span> <span class=\"o\">:=</span> <span class=\"p\">[]</span><span class=\"kt\">string</span><span class=\"p\">{</span><span class=\"s\">&quot;A&quot;</span><span class=\"p\">,</span> <span class=\"s\">&quot;B&quot;</span><span class=\"p\">,</span> <span class=\"s\">&quot;C&quot;</span><span class=\"p\">}</span>\n    <span class=\"k\">for</span> <span class=\"nx\">_</span><span class=\"p\">,</span> <span class=\"nx\">k</span> <span class=\"o\">:=</span> <span class=\"k\">range</span> <span class=\"nx\">choices</span> <span class=\"p\">{</span>\n        <span class=\"nx\">hosts</span><span class=\"p\">[</span><span class=\"nx\">k</span><span class=\"p\">]</span> <span class=\"p\">=</span> <span class=\"mi\">0</span>\n    <span class=\"p\">}</span>\n    <span class=\"k\">for</span> <span class=\"nx\">i</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"nx\">i</span> <span class=\"p\">&lt;</span> <span class=\"mi\">10000</span><span class=\"p\">;</span> <span class=\"nx\">i</span><span class=\"o\">++</span> <span class=\"p\">{</span>\n        <span class=\"nx\">c</span> <span class=\"o\">:=</span> <span class=\"nx\">rand</span><span class=\"p\">.</span><span class=\"nx\">Intn</span><span class=\"p\">(</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"nx\">hosts</span><span class=\"p\">))</span>\n        <span class=\"nx\">k</span> <span class=\"o\">:=</span> <span class=\"nx\">choices</span><span class=\"p\">[</span><span class=\"nx\">c</span><span class=\"p\">]</span>\n        <span class=\"nx\">hosts</span><span class=\"p\">[</span><span class=\"nx\">k</span><span class=\"p\">]</span><span class=\"o\">++</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"k\">for</span> <span class=\"nx\">k</span><span class=\"p\">,</span> <span class=\"nx\">v</span> <span class=\"o\">:=</span> <span class=\"k\">range</span> <span class=\"nx\">hosts</span> <span class=\"p\">{</span>\n        <span class=\"nx\">fmt</span><span class=\"p\">.</span><span class=\"nx\">Printf</span><span class=\"p\">(</span><span class=\"s\">&quot;key=%s hit=%v\\n&quot;</span><span class=\"p\">,</span> <span class=\"nx\">k</span><span class=\"p\">,</span> <span class=\"nx\">v</span><span class=\"p\">)</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 159772280,
            "is_me_message": false,
            "last_edit_timestamp": 1551492088,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "waldemar.quevedo@gmail.com",
            "sender_full_name": "Waldemar Quevedo (F2'14)",
            "sender_id": 6706,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "for range on map not that random :O",
            "submessages": [],
            "timestamp": 1551492074,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/61f7402a76ff0aff964da46bd7948ca20279ae1f?x=x&version=1",
            "client": "website",
            "content": "<p>results:</p>\n<div class=\"codehilite\"><pre><span></span>: host=B hit=3311\n: host=C hit=3345\n: host=A hit=3344\n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 159772287,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "waldemar.quevedo@gmail.com",
            "sender_full_name": "Waldemar Quevedo (F2'14)",
            "sender_id": 6706,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "for range on map not that random :O",
            "submessages": [],
            "timestamp": 1551492095,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/61f7402a76ff0aff964da46bd7948ca20279ae1f?x=x&version=1",
            "client": "website",
            "content": "<p>have committed so many bugs from this I bet... <span aria-label=\"ladybug\" class=\"emoji emoji-1f41e\" role=\"img\" title=\"ladybug\">:ladybug:</span> <span aria-label=\"distraught\" class=\"emoji emoji-1f629\" role=\"img\" title=\"distraught\">:distraught:</span></p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 159772295,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "waldemar.quevedo@gmail.com",
            "sender_full_name": "Waldemar Quevedo (F2'14)",
            "sender_id": 6706,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "for range on map not that random :O",
            "submessages": [],
            "timestamp": 1551492121,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/6527e077e84e20214d5373101ea15910d6b6f7a3?x=x&version=1",
            "client": "website",
            "content": "<p>This is very interesting! I knew they had randomness to them but I had no idea what the distribution was.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 159775337,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "steve@redlua.com",
            "sender_full_name": "Steven McCarthy (he) (SP2'15)",
            "sender_id": 7871,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "for range on map not that random :O",
            "submessages": [],
            "timestamp": 1551497335,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/8ef0cc9607b07f392f70560a43dbbb2d0efd6328?x=x&version=1",
            "client": "website",
            "content": "<p>In fact, I would wager that iteration order would be deterministic normally, and that they add random jitter to lookup order so that people can't accidentally depend on deterministic iteration, since that's not part of the map contract</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 159775926,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "+1",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "mauricio@collares.org",
                        "full_name": "Mauricio Collares (he) (W2'19)",
                        "id": 158563
                    },
                    "user_id": 158563
                }
            ],
            "recipient_id": 22624,
            "sender_email": "brian.kihoon.lee@gmail.com",
            "sender_full_name": "Brian Lee (F1'16)",
            "sender_id": 100043,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "for range on map not that random :O",
            "submessages": [],
            "timestamp": 1551498409,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/8ef0cc9607b07f392f70560a43dbbb2d0efd6328?x=x&version=1",
            "client": "website",
            "content": "<p><a href=\"https://www.youtube.com/watch?v=npw4s1QTmPg\" target=\"_blank\" title=\"https://www.youtube.com/watch?v=npw4s1QTmPg\">https://www.youtube.com/watch?v=npw4s1QTmPg</a> see for how python does it and why it would lead to deterministic iteration</p>\n<div class=\"youtube-video message_inline_image\"><a data-id=\"npw4s1QTmPg\" href=\"https://www.youtube.com/watch?v=npw4s1QTmPg\" target=\"_blank\" title=\"https://www.youtube.com/watch?v=npw4s1QTmPg\"><img src=\"https://i.ytimg.com/vi/npw4s1QTmPg/default.jpg\"></a></div>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 159775939,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "brian.kihoon.lee@gmail.com",
            "sender_full_name": "Brian Lee (F1'16)",
            "sender_id": 100043,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "for range on map not that random :O",
            "submessages": [],
            "timestamp": 1551498452,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/8ef0cc9607b07f392f70560a43dbbb2d0efd6328?x=x&version=1",
            "client": "website",
            "content": "<p><a href=\"https://nathanleclaire.com/blog/2014/04/27/a-surprising-feature-of-golang-that-colored-me-impressed/\" target=\"_blank\" title=\"https://nathanleclaire.com/blog/2014/04/27/a-surprising-feature-of-golang-that-colored-me-impressed/\">https://nathanleclaire.com/blog/2014/04/27/a-surprising-feature-of-golang-that-colored-me-impressed/</a></p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 159777716,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "brian.kihoon.lee@gmail.com",
            "sender_full_name": "Brian Lee (F1'16)",
            "sender_id": 100043,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "for range on map not that random :O",
            "submessages": [],
            "timestamp": 1551501721,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/8ef0cc9607b07f392f70560a43dbbb2d0efd6328?x=x&version=1",
            "client": "website",
            "content": "<p>this is also a hilarious demo of <a href=\"http://www.hyrumslaw.com/\" target=\"_blank\" title=\"http://www.hyrumslaw.com/\">http://www.hyrumslaw.com/</a></p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 159778017,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "brian.kihoon.lee@gmail.com",
            "sender_full_name": "Brian Lee (F1'16)",
            "sender_id": 100043,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "for range on map not that random :O",
            "submessages": [],
            "timestamp": 1551502293,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/61f7402a76ff0aff964da46bd7948ca20279ae1f?x=x&version=1",
            "client": "website",
            "content": "<p>right... in this case though I accidentally depended on the non deterministic iteration of the map, looping on a map is a bit random but not truly random then</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 159808450,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "waldemar.quevedo@gmail.com",
            "sender_full_name": "Waldemar Quevedo (F2'14)",
            "sender_id": 6706,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "for range on map not that random :O",
            "submessages": [],
            "timestamp": 1551550218,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/36716766e555f85a2c18cf8f358d6f63ccc077d9?x=x&version=2",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-id=\"6706\">@Waldemar Quevedo (F2'14)</span> this would be great to share if you have time to post it somewhere. I bet your interpretation &amp; expectation is very common</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 160318627,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "mattg@leema.org",
            "sender_full_name": "Matthew Graham (he) (F1'18)",
            "sender_id": 125276,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "for range on map not that random :O",
            "submessages": [],
            "timestamp": 1552074080,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/61f7402a76ff0aff964da46bd7948ca20279ae1f?x=x&version=1",
            "client": "website",
            "content": "<p>right... couldn't get much info on why that is the behavior, I will post something to <a href=\"http://dev.to\" target=\"_blank\" title=\"http://dev.to\">dev.to</a>, thanks for the idea :)</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 160319390,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "waldemar.quevedo@gmail.com",
            "sender_full_name": "Waldemar Quevedo (F2'14)",
            "sender_id": 6706,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "for range on map not that random :O",
            "submessages": [],
            "timestamp": 1552074626,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/61f7402a76ff0aff964da46bd7948ca20279ae1f?x=x&version=1",
            "client": "website",
            "content": "<p>All right posted about this here! <a href=\"https://dev.to/wallyqs/gos-map-iteration-order-is-not-that-random-mag\" target=\"_blank\" title=\"https://dev.to/wallyqs/gos-map-iteration-order-is-not-that-random-mag\">https://dev.to/wallyqs/gos-map-iteration-order-is-not-that-random-mag</a></p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 160325864,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f64f",
                    "emoji_name": "thank_you",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "mattg@leema.org",
                        "full_name": "Matthew Graham (he) (F1'18)",
                        "id": 125276
                    },
                    "user_id": 125276
                }
            ],
            "recipient_id": 22624,
            "sender_email": "waldemar.quevedo@gmail.com",
            "sender_full_name": "Waldemar Quevedo (F2'14)",
            "sender_id": 6706,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "for range on map not that random :O",
            "submessages": [],
            "timestamp": 1552079374,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/b2a6b06ba040fd7f7c2acd4d1440e7de?d=identicon&version=1",
            "client": "website",
            "content": "<p>Judging by [0], Go's map iterator implementation initializes the iterator by choosing a random bucket and a random offset within the bucket (after some resistance [1], the random offset was added in [2], because tests frequently use small maps and just choosing the initial bucket at random implied deterministic order for those). This is done by choosing a random number and using some of the random bits for the bucket index and the some for the offset; since map buckets can hold at most 8 elements, this effectively means the offset is a randomly-chosen number between 0 and 7.</p>\n<p>You can imagine what happens when you choose a start position at random from [0, 7] and your map only has 3 elements: With probability 6/8, you either hit 0 or an index that does not exist and it wraps around to 0.</p>\n<p>[0] <a href=\"https://github.com/golang/go/blob/ed15e82413c7b16e21a493f5a647f68b46e965ee/src/runtime/map.go#L833\" target=\"_blank\" title=\"https://github.com/golang/go/blob/ed15e82413c7b16e21a493f5a647f68b46e965ee/src/runtime/map.go#L833\">https://github.com/golang/go/blob/ed15e82413c7b16e21a493f5a647f68b46e965ee/src/runtime/map.go#L833</a><br>\n[1] <a href=\"https://github.com/golang/go/issues/5362\" target=\"_blank\" title=\"https://github.com/golang/go/issues/5362\">https://github.com/golang/go/issues/5362</a><br>\n[2] <a href=\"https://github.com/golang/go/issues/6719\" target=\"_blank\" title=\"https://github.com/golang/go/issues/6719\">https://github.com/golang/go/issues/6719</a></p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 160329892,
            "is_me_message": false,
            "last_edit_timestamp": 1552083037,
            "reactions": [
                {
                    "emoji_code": "1f44f",
                    "emoji_name": "clap",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "waldemar.quevedo@gmail.com",
                        "full_name": "Waldemar Quevedo (F2'14)",
                        "id": 6706
                    },
                    "user_id": 6706
                },
                {
                    "emoji_code": "1f44f",
                    "emoji_name": "clap",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "gs051095@gmail.com",
                        "full_name": "Gargi Sharma (she/they) (SP1'19)",
                        "id": 203533
                    },
                    "user_id": 203533
                },
                {
                    "emoji_code": "1f44f",
                    "emoji_name": "clap",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "mattg@leema.org",
                        "full_name": "Matthew Graham (he) (F1'18)",
                        "id": 125276
                    },
                    "user_id": 125276
                }
            ],
            "recipient_id": 22624,
            "sender_email": "mauricio@collares.org",
            "sender_full_name": "Mauricio Collares (he) (W2'19)",
            "sender_id": 158563,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "for range on map not that random :O",
            "submessages": [],
            "timestamp": 1552082608,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/61f7402a76ff0aff964da46bd7948ca20279ae1f?x=x&version=1",
            "client": "website",
            "content": "<p>thanks for sharing the links source! <span aria-label=\"bow\" class=\"emoji emoji-1f647\" role=\"img\" title=\"bow\">:bow:</span></p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 160340528,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "waldemar.quevedo@gmail.com",
            "sender_full_name": "Waldemar Quevedo (F2'14)",
            "sender_id": 6706,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "for range on map not that random :O",
            "submessages": [],
            "timestamp": 1552092175,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/36716766e555f85a2c18cf8f358d6f63ccc077d9?x=x&version=2",
            "client": "website",
            "content": "<p>oh yeah, thanks for sharing the explanation <span class=\"user-mention\" data-user-id=\"158563\">@Mauricio Collares (W2'19)</span> !</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 160739804,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "mattg@leema.org",
            "sender_full_name": "Matthew Graham (he) (F1'18)",
            "sender_id": 125276,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "for range on map not that random :O",
            "submessages": [],
            "timestamp": 1552522847,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4aed3eb291895487e95cc2850cb92391?d=identicon&version=1",
            "client": "ZulipElectron",
            "content": "<p>Hey all, I've been waffling over an API choice that seems to come with historical context that I lack. I made <a href=\"https://github.com/antifuchs/o\" target=\"_blank\" title=\"https://github.com/antifuchs/o\">o</a>, a ring buffer accountant, and it comes with two backend structs (one for capacities of <code>2^n</code> and one for non-powers-of-two). To unify the two implementations, I made them implement the <code>Ring</code> interface &amp; they have a bunch of methods that are specific to the respective backend implementation (one modulo's, the other bitshifts)</p>\n<p>That choice however means not all the functionality the package offers is available on methods, at least not without re-implementing the method for every backing struct. So looking at <code>http</code> as an example, I made functions that take the <code>Ring</code> interface as an argument. That division of functionality bothers me, though: I feels weird to force users to consider whether the thing they want would have a specific implementation/how it's available.</p>\n<p>The alternative option would be to make a wrapper struct that contains just that ring interface, and hang methods off that, like so:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kd\">type</span> <span class=\"nx\">ringBackend</span> <span class=\"kd\">interface</span> <span class=\"p\">{</span>\n    <span class=\"kd\">func</span> <span class=\"nx\">Push</span><span class=\"p\">()</span> <span class=\"p\">(</span><span class=\"kt\">uint</span><span class=\"p\">,</span> <span class=\"kt\">error</span><span class=\"p\">)</span>\n    <span class=\"c1\">// ...</span>\n<span class=\"p\">}</span>\n\n<span class=\"kd\">type</span> <span class=\"nx\">Ring</span> <span class=\"kd\">struct</span> <span class=\"p\">{</span>\n    <span class=\"nx\">ringBackend</span>\n<span class=\"p\">}</span>\n\n<span class=\"kd\">func</span> <span class=\"p\">(</span><span class=\"nx\">r</span> <span class=\"nx\">Ring</span><span class=\"p\">)</span> <span class=\"nx\">ForcePush</span> <span class=\"kt\">uint</span> <span class=\"p\">{</span> <span class=\"c1\">// ...</span>\n<span class=\"p\">}</span>\n</pre></div>\n\n\n<p>This might be nicer, possibly? I'm not sure what people prefer these days, and since I'd like to make the API as clear as possible - what are y'all's preferences? I'm pretty sure I talked about this with <span class=\"user-mention\" data-user-id=\"4992\">@Chen Lin (W'14)</span> before &amp; would like to hear your thoughts ((:</p>\n<p>(One weird thing about the way the second option works is that <code>godoc</code> doesn't show the public methods belonging to <code>Ring</code> if <code>Ring</code> composes with <code>ringBackend</code> the way it does there. I guess I'd have to make public methods that proxy to private implementations, in order to get a good api doc set?</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 161054003,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "asf@boinkor.net",
            "sender_full_name": "Andreas Fuchs (he/they)",
            "sender_id": 9362,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "API preference: methods or functions that take an interface?",
            "submessages": [],
            "timestamp": 1552913242,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4aed3eb291895487e95cc2850cb92391?d=identicon&version=1",
            "client": "ZulipElectron",
            "content": "<p>After working through it, I now prefer the method style too, with a <code>ringBackend</code> definition that only has unexported methods on it... I just made \"proxy\" methods for the ones that were on the interface before.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 161077199,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "asf@boinkor.net",
            "sender_full_name": "Andreas Fuchs (he/they)",
            "sender_id": 9362,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "API preference: methods or functions that take an interface?",
            "submessages": [],
            "timestamp": 1552929519,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/21b9cce736cbbe8e0761bbb33863c7d3112d0136?x=x&version=2",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-id=\"9362\">@Andreas Fuchs</span> Let me make sure I'm understanding your question properly. What you are trying to figure out is what's a good way to deduplicate code shared between multiple implementations of an interface. The two ways you are looking at this are:</p>\n<p>1. Define a function that takes the interface and operates on it: <code>f(*interface)</code>.<br>\n2. Define a wrapper class that has the methods implemented on it: <code>func (r Wrapper) { ... }</code>.<br>\nI think the main difference is that 1 is simpler from an implementation prospective (no layers of abstraction) while 2 makes it easier to make changes to the interface (because there is a layer of abstraction). 1 bakes in the fact that the functions that take in an interface cannot have different implementations for each interface.</p>\n<p>Personally, I would prefer 1 as long as you are certain that the function definitions won't change across each implementation. If there's a chance you will need to change the implementation, I would prefer 2 as changing the function definitions across implementations is a lot easier in 2.</p>\n<p>Honestly, I don't think it matters too much. I would just pick one of the approaches. If i started running into problems with that approach, I would then see if it made sense to switch to the other approach.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 161085147,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "michaelmalis2@gmail.com",
            "sender_full_name": "Michael Malis (SP2'19)",
            "sender_id": 8099,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "API preference: methods or functions that take an interface?",
            "submessages": [],
            "timestamp": 1552934896,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4aed3eb291895487e95cc2850cb92391?d=identicon&version=1",
            "client": "ZulipElectron",
            "content": "<p>That makes sense! Mostly, what I'm hoping to resolve is whether a mix of methods / functions is useful to anyone, or if I should prefer to stick to one or the other for an API (and also which one is currently the preferred one) (:</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 161106554,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "asf@boinkor.net",
            "sender_full_name": "Andreas Fuchs (he/they)",
            "sender_id": 9362,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "API preference: methods or functions that take an interface?",
            "submessages": [],
            "timestamp": 1552952121,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4aed3eb291895487e95cc2850cb92391?d=identicon&version=1",
            "client": "ZulipElectron",
            "content": "<p>I should also add that I redid the interface to be full of methods and it looks a lot better now: <a href=\"https://godoc.org/github.com/antifuchs/o\" target=\"_blank\" title=\"https://godoc.org/github.com/antifuchs/o\">https://godoc.org/github.com/antifuchs/o</a> is the result (:</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 161106577,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "asf@boinkor.net",
            "sender_full_name": "Andreas Fuchs (he/they)",
            "sender_id": 9362,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "API preference: methods or functions that take an interface?",
            "submessages": [],
            "timestamp": 1552952154,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/4caef236e2bd75fb71e3235d4ae0098d135a6bdf?x=x&version=1",
            "client": "website",
            "content": "<p>Why hello there :). Hope things are well!</p>\n<p>My 2c: I also think 1 is preferable here. I don't actually have an objection to module level functions, but module level state and globals. globals/singletons aren't great in most languages, but I'm particularly wary in Go because concurrency is so common.</p>\n<p>I agree with Michael that 2 adds an unnecessary layer of abstraction.</p>\n<p>That said, I'm a wary of the exported interface.</p>\n<p>If you decide to add an exported method to each struct, which is normally a backwards compatible change, go's type system will complain if users have implemented their own version of the data structure, making it a major version bump. This makes deprecating old versions difficult and is a major source of maintenance cost for teams that maintain complex libraries. Also, it's common for some public go libraries to add a method to an interface and forget to bump their major version breaking everyone's builds <em>cough</em> docker <em>cough</em> uber/tally <em>cough</em> <em>cough</em> <em>cough</em>.</p>\n<p>This usually happens in tests. People like to build mock versions of interfaces. But probably not an issue here since the data structure is just in memory, so who needs a mock?</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 161125123,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "chenmonitor@gmail.com",
            "sender_full_name": "Chen Lin (W'14)",
            "sender_id": 4992,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "API preference: methods or functions that take an interface?",
            "submessages": [],
            "timestamp": 1552977541,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4aed3eb291895487e95cc2850cb92391?d=identicon&version=1",
            "client": "ZulipElectron",
            "content": "<p>Ahhh, that makes perfect sense. I feel a lot better about removing the exported <code>interface</code> and going with an all-methods approach on this API now (also because in tests, I could never keep the set of methods that were on the interface vs. the module-level functions straight). </p>\n<p>Also, absolutely agreed on globals and adding methods on interfaces. The interface I had before basically disallowed anyone from implementing it anyway - there were unexported methods specified on it alongside the exported ones (not sure if that makes anything better or worse, but it did feel icky).</p>\n<p>One thing I found useful in my tests with method-based APIs is to have an internal interface defining the methods that my code uses (I think you may have told me about this trick one day?), and then be able to make a reduced mock containing just those methods - I  have code that uses the <a href=\"https://godoc.org/github.com/nlopes/slack#Client\" target=\"_blank\" title=\"https://godoc.org/github.com/nlopes/slack#Client\">nlopes/slack.Client</a> api, and making a Client stub with the reduced feature set is much less daunting than mocking out all of them (:</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 161229625,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "asf@boinkor.net",
            "sender_full_name": "Andreas Fuchs (he/they)",
            "sender_id": 9362,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "API preference: methods or functions that take an interface?",
            "submessages": [],
            "timestamp": 1553074870,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/65d6c64fa1f9d28ab178a7dda4cfb5e3d978dd5e?x=x&version=2",
            "client": "ZulipElectron",
            "content": "<p>I have a mystery: I'm practicing templates in Go,  and I am unable to get my stylesheet to load. Thinking it might be an issue with &lt;head&gt;, I put a title in, which renders. Thinking it might be an issue with &lt;link&gt;, I put google fonts in, which render. Thinking it could be an issue with the filepath, I put in an image src to that same directory,  which renders. I'm out of ideas. Any thoughts?</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 161462563,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "housker@gmail.com",
            "sender_full_name": "Adelle Housker (she) (W2'19)",
            "sender_id": 158595,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "Template",
            "submessages": [],
            "timestamp": 1553271812,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/052b3000f2489ccb2a411dea821d021a4c62f1e2?x=x&version=2",
            "client": "ZulipElectron",
            "content": "<p>I haven't used templates, but happy to take a look with you if it would help! :)</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 161463990,
            "is_me_message": false,
            "last_edit_timestamp": 1553274041,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "gs051095@gmail.com",
            "sender_full_name": "Gargi Sharma (she/they) (SP1'19)",
            "sender_id": 203533,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "Template",
            "submessages": [],
            "timestamp": 1553272966,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/6f674730326d1de1f798b147bd91c088f1ca6887?x=x&version=2",
            "client": "website",
            "content": "<p>Happy to help too! :)</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 161464461,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "karthik.188@gmail.com",
            "sender_full_name": "Karthik Nayak (he) (W2'19)",
            "sender_id": 158588,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "Template",
            "submessages": [],
            "timestamp": 1553273315,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/65d6c64fa1f9d28ab178a7dda4cfb5e3d978dd5e?x=x&version=2",
            "client": "ZulipElectron",
            "content": "<p>Hey guys, thank you for offering to help. I feel really silly: It wasn't a Go thing at all. I was using src instead of href in my link!</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 161486137,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "housker@gmail.com",
            "sender_full_name": "Adelle Housker (she) (W2'19)",
            "sender_id": 158595,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "Template",
            "submessages": [],
            "timestamp": 1553290544,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/4caef236e2bd75fb71e3235d4ae0098d135a6bdf?x=x&version=1",
            "client": "website",
            "content": "<p>ya that makes a ton of sense!</p>\n<p>heh, let me guess, bigredbutton? :&gt;</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 161729283,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "chenmonitor@gmail.com",
            "sender_full_name": "Chen Lin (W'14)",
            "sender_id": 4992,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "API preference: methods or functions that take an interface?",
            "submessages": [],
            "timestamp": 1553572728,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4aed3eb291895487e95cc2850cb92391?d=identicon&version=1",
            "client": "ZulipMobile",
            "content": "<p>Haha, oh no! This was for a mood to veneur that i'd been thinking about, but had no good way of implementing yet (:</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 161738766,
            "is_me_message": false,
            "last_edit_timestamp": 1553586422,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "asf@boinkor.net",
            "sender_full_name": "Andreas Fuchs (he/they)",
            "sender_id": 9362,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "API preference: methods or functions that take an interface?",
            "submessages": [],
            "timestamp": 1553586405,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/65d6c64fa1f9d28ab178a7dda4cfb5e3d978dd5e?x=x&version=2",
            "client": "ZulipElectron",
            "content": "<p>Funfact:<br>\n<a href=\"https://rcoh.me/posts/why-you-can-have-a-million-go-routines-but-only-1000-java-threads/\" target=\"_blank\" title=\"https://rcoh.me/posts/why-you-can-have-a-million-go-routines-but-only-1000-java-threads/\">https://rcoh.me/posts/why-you-can-have-a-million-go-routines-but-only-1000-java-threads/</a></p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 162356149,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "housker@gmail.com",
            "sender_full_name": "Adelle Housker (she) (W2'19)",
            "sender_id": 158595,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "go routines and channels are weird..",
            "submessages": [],
            "timestamp": 1554226262,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/61f7402a76ff0aff964da46bd7948ca20279ae1f?x=x&version=1",
            "client": "website",
            "content": "<p>Approach is a bit gnarly, but in case someone may find it useful: <a href=\"https://dev.to/wallyqs/wrapping-callbacks-dynamically-with-a-goroutine-using-reflect-46dg\" target=\"_blank\" title=\"https://dev.to/wallyqs/wrapping-callbacks-dynamically-with-a-goroutine-using-reflect-46dg\">https://dev.to/wallyqs/wrapping-callbacks-dynamically-with-a-goroutine-using-reflect-46dg</a></p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 162497954,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "waldemar.quevedo@gmail.com",
            "sender_full_name": "Waldemar Quevedo (F2'14)",
            "sender_id": 6706,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "converting callbacks into goroutines with reflect",
            "submessages": [],
            "timestamp": 1554358422,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/bdff4cf717811adf3c8d5513719f2350b0c723f6?x=x&version=2",
            "client": "ZulipElectron",
            "content": "<p>json.Unmarshal does not reset the field in a struct back to their zero values, so if you reuse a struct and unmarshal a {} into it, code ends up very confused. perhaps reusing structs is asking for problems <a href=\"https://play.golang.org/p/uiWYS_8OTgr\" target=\"_blank\" title=\"https://play.golang.org/p/uiWYS_8OTgr\">https://play.golang.org/p/uiWYS_8OTgr</a></p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 162647512,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "jelle@vandenhooff.name",
            "sender_full_name": "Jelle van den Hooff (he) (m3'19)",
            "sender_id": 215907,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "fun bugs",
            "submessages": [],
            "timestamp": 1554488576,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/bdff4cf717811adf3c8d5513719f2350b0c723f6?x=x&version=2",
            "client": "ZulipElectron",
            "content": "<p>being able to merge multiple JSON files into one object seems nice for config management so the behavior is useful in at least some cases</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 162647588,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "jelle@vandenhooff.name",
            "sender_full_name": "Jelle van den Hooff (he) (m3'19)",
            "sender_id": 215907,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "fun bugs",
            "submessages": [],
            "timestamp": 1554488642,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/f244e3545a6792c557adf5475475c0cc2e6d5d7b?x=x&version=3",
            "client": "ZulipElectron",
            "content": "<p>Looking at learning a bit of golang! Any links/books/tutorials appreciated, thinking about just messing around but some direction is always nice. I have a bit of C experience (it's been a while), but mostly Python/Java/Javascript, nervous about learning a backend programming langauge</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 163498261,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "aatigar@gmail.com",
            "sender_full_name": "Adam Avery Tigar (he) (F2'18)",
            "sender_id": 130218,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "Any getting started tips?",
            "submessages": [],
            "timestamp": 1555442178,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/e53f7dbb47c94693d5ecb4059df20f05?d=identicon&version=1",
            "client": "website",
            "content": "<p>The official \"Tour of Go\" is a good place to get started: <a href=\"https://tour.golang.org/list\" target=\"_blank\" title=\"https://tour.golang.org/list\">https://tour.golang.org/list</a>. And I love the Kernighan book, \"The Go Programming Language.\"</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 163498752,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "brhpkns@gmail.com",
            "sender_full_name": "Brandon Hopkins (he) (SP2'19)",
            "sender_id": 216115,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "Any getting started tips?",
            "submessages": [],
            "timestamp": 1555442596,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/e53f7dbb47c94693d5ecb4059df20f05?d=identicon&version=1",
            "client": "website",
            "content": "<p>This is a good next step after the \"Tour of Go\": <a href=\"https://golang.org/doc/effective_go.html\" target=\"_blank\" title=\"https://golang.org/doc/effective_go.html\">https://golang.org/doc/effective_go.html</a>. In general the official docs are pretty great</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 163498888,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "brhpkns@gmail.com",
            "sender_full_name": "Brandon Hopkins (he) (SP2'19)",
            "sender_id": 216115,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "Any getting started tips?",
            "submessages": [],
            "timestamp": 1555442690,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/e53f7dbb47c94693d5ecb4059df20f05?d=identicon&version=1",
            "client": "website",
            "content": "<p>And definitely check out Francesc Campoy's videos: <a href=\"https://www.youtube.com/channel/UC_BzFbxG2za3bp5NRRRXJSw\" target=\"_blank\" title=\"https://www.youtube.com/channel/UC_BzFbxG2za3bp5NRRRXJSw\">https://www.youtube.com/channel/UC_BzFbxG2za3bp5NRRRXJSw</a></p>\n<div class=\"youtube-video message_inline_image\"><a data-id=\"channel\" href=\"https://www.youtube.com/channel/UC_BzFbxG2za3bp5NRRRXJSw\" target=\"_blank\" title=\"https://www.youtube.com/channel/UC_BzFbxG2za3bp5NRRRXJSw\"><img src=\"https://i.ytimg.com/vi/channel/default.jpg\"></a></div>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 163498961,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "+1",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "carlos@amedee.net",
                        "full_name": "Carlos Amedee (he) (m1'18)",
                        "id": 105722
                    },
                    "user_id": 105722
                }
            ],
            "recipient_id": 22624,
            "sender_email": "brhpkns@gmail.com",
            "sender_full_name": "Brandon Hopkins (he) (SP2'19)",
            "sender_id": 216115,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "Any getting started tips?",
            "submessages": [],
            "timestamp": 1555442743,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/052b3000f2489ccb2a411dea821d021a4c62f1e2?x=x&version=2",
            "client": "website",
            "content": "<p>I have found <a href=\"https://gobyexample.com/\" target=\"_blank\" title=\"https://gobyexample.com/\">https://gobyexample.com/</a> to be very useful at times. Also, as a de-facto Exercism evangelist, I would be remiss to not mention it :) <br>\n<a href=\"https://exercism.io/tracks/go\" target=\"_blank\" title=\"https://exercism.io/tracks/go\">https://exercism.io/tracks/go</a><br>\nYou can go on a mentored track and receive code reviews. The feedback loop is long, so could be something you do once in a while on the side :))</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 163499170,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "gs051095@gmail.com",
            "sender_full_name": "Gargi Sharma (she/they) (SP1'19)",
            "sender_id": 203533,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "Any getting started tips?",
            "submessages": [],
            "timestamp": 1555442875,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/36611558e050b2875a1f8e4ebe465c5470d14b84?x=x&version=5",
            "client": "website",
            "content": "<p>These are all good resources I've used! Also, if you get to the point where you're using Go to handle web requests, this is a nice tool to go from JSON to a struct: <br>\n<a href=\"https://mholt.github.io/json-to-go/\" target=\"_blank\" title=\"https://mholt.github.io/json-to-go/\">https://mholt.github.io/json-to-go/</a></p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 163508997,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "annacarolinewalsh@gmail.com",
            "sender_full_name": "Anna Walsh (she) (SP1'19)",
            "sender_id": 204350,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "Any getting started tips?",
            "submessages": [],
            "timestamp": 1555450247,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/0a35beaf5a354dafdf10494c0313e10fffc154fd?x=x&version=1",
            "client": "website",
            "content": "<p>fwiw, Tour of Go assumes a C-ish background, and doesn't explain things like \"pointers\" and \"interfaces\". I agree that it's a real good resource, but wanted to give you the heads up that depending on your background, some bits may still be confusing. (you should totally ping this stream with any questions! I'm currently talking a friend through the Tour of Go and am happy to be pinged <span aria-label=\"smile\" class=\"emoji emoji-263a\" role=\"img\" title=\"smile\">:smile:</span> )</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 163658793,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "maia.mcc@gmail.com",
            "sender_full_name": "Maia McCormick (she) (S2'14)",
            "sender_id": 6175,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "Any getting started tips?",
            "submessages": [],
            "timestamp": 1555599242,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/1c860d00a4cedc01147fbb2e0533c37b?d=identicon&version=1",
            "client": "website",
            "content": "<p>Hey all I am writing a SQLite clone in Go following and translating this tutorial in C </p>\n<p><a href=\"https://cstack.github.io/db_tutorial/parts/part3.html\" target=\"_blank\" title=\"https://cstack.github.io/db_tutorial/parts/part3.html\">https://cstack.github.io/db_tutorial/parts/part3.html</a></p>\n<p>I am stuck at this intermediate step where they are persisting the table in memory and they use memcpy()</p>\n<div class=\"codehilite\"><pre><span></span>void serialize_row(Row* source, void* destination) {\n  memcpy(destination + ID_OFFSET, &amp;(source-&gt;id), ID_SIZE);\n  memcpy(destination + USERNAME_OFFSET, &amp;(source-&gt;username), USERNAME_SIZE);\n  memcpy(destination + EMAIL_OFFSET, &amp;(source-&gt;email), EMAIL_SIZE);\n}\n\nvoid deserialize_row(void* source, Row* destination) {\n  memcpy(&amp;(destination-&gt;id), source + ID_OFFSET, ID_SIZE);\n  memcpy(&amp;(destination-&gt;username), source + USERNAME_OFFSET, USERNAME_SIZE);\n  memcpy(&amp;(destination-&gt;email), source + EMAIL_OFFSET, EMAIL_SIZE);\n}\n</pre></div>\n\n\n<p>I found this example that looks like it interops with C </p>\n<p><a href=\"https://github.com/jsgilmore/shm/blob/master/memcpy.go\" target=\"_blank\" title=\"https://github.com/jsgilmore/shm/blob/master/memcpy.go\">https://github.com/jsgilmore/shm/blob/master/memcpy.go</a></p>\n<p>But I thought maybe one of you would give me advice on the idiomatic way to support this functionality in Go.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 164100717,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "corydominguez@gmail.com",
            "sender_full_name": "Cory Michael Dominguez (he) (SP1'15)",
            "sender_id": 7625,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "SQLite Clone",
            "submessages": [],
            "timestamp": 1556126332,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/e53f7dbb47c94693d5ecb4059df20f05?d=identicon&version=1",
            "client": "website",
            "content": "<p>I've been thinking of doing something very similar, porting this (which I'm working on right now in C) to Go! <a href=\"http://chi.cs.uchicago.edu/chidb/index.html\" target=\"_blank\" title=\"http://chi.cs.uchicago.edu/chidb/index.html\">http://chi.cs.uchicago.edu/chidb/index.html</a></p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 164101033,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "brhpkns@gmail.com",
            "sender_full_name": "Brandon Hopkins (he) (SP2'19)",
            "sender_id": 216115,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "SQLite Clone",
            "submessages": [],
            "timestamp": 1556126532,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/e53f7dbb47c94693d5ecb4059df20f05?d=identicon&version=1",
            "client": "website",
            "content": "<p>Hmm, thinking about that question though... I'd say the most \"idiomatic\" thing would be to not use the unsafe package, but rather just use the binary package to convert each field to/from its proper type on the Row struct/its binary encoding in a byte slice</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 164101201,
            "is_me_message": false,
            "last_edit_timestamp": 1556126852,
            "reactions": [
                {
                    "emoji_code": "1f64f",
                    "emoji_name": "thank_you",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "corydominguez@gmail.com",
                        "full_name": "Cory Michael Dominguez (he) (SP1'15)",
                        "id": 7625
                    },
                    "user_id": 7625
                }
            ],
            "recipient_id": 22624,
            "sender_email": "brhpkns@gmail.com",
            "sender_full_name": "Brandon Hopkins (he) (SP2'19)",
            "sender_id": 216115,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "SQLite Clone",
            "submessages": [],
            "timestamp": 1556126678,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/e53f7dbb47c94693d5ecb4059df20f05?d=identicon&version=1",
            "client": "website",
            "content": "<p>But interested to hear if others have different thoughts</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 164101257,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "brhpkns@gmail.com",
            "sender_full_name": "Brandon Hopkins (he) (SP2'19)",
            "sender_id": 216115,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "SQLite Clone",
            "submessages": [],
            "timestamp": 1556126710,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/c080bc6b7669256b064858686aca1c97a8bc27e1?x=x&version=1",
            "client": "ZulipMobile",
            "content": "<p>Dave Cheney has a great collection of articles about Go, including this selection aimed at new gophers: <a href=\"https://dave.cheney.net/resources-for-new-go-programmers\" target=\"_blank\" title=\"https://dave.cheney.net/resources-for-new-go-programmers\">https://dave.cheney.net/resources-for-new-go-programmers</a></p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 164499458,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "+1",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "carlos@amedee.net",
                        "full_name": "Carlos Amedee (he) (m1'18)",
                        "id": 105722
                    },
                    "user_id": 105722
                }
            ],
            "recipient_id": 22624,
            "sender_email": "katrina.m.ellison@gmail.com",
            "sender_full_name": "Katrina Ellison Geltman (she) (W'14)",
            "sender_id": 4996,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "Any getting started tips?",
            "submessages": [],
            "timestamp": 1556582812,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/32721626292fa2708ee74d852696e44f426cd631?x=x&version=2",
            "client": "website",
            "content": "<p>Hey <span class=\"user-mention\" data-user-id=\"216115\">@Brandon Hopkins (SP2'19)</span> My next project will be doing Chi-DB in Go. How have you been finding it? Is it worth going through?</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 166118368,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "dabbagh.aos@gmail.com",
            "sender_full_name": "Aos Dabbagh (S2'17)",
            "sender_id": 101320,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "SQLite Clone",
            "submessages": [],
            "timestamp": 1558385093,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/32721626292fa2708ee74d852696e44f426cd631?x=x&version=2",
            "client": "website",
            "content": "<p>It was between that or building an IRC bot/client/server using the RFCs... <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 166118425,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "dabbagh.aos@gmail.com",
            "sender_full_name": "Aos Dabbagh (S2'17)",
            "sender_id": 101320,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "SQLite Clone",
            "submessages": [],
            "timestamp": 1558385158,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/e53f7dbb47c94693d5ecb4059df20f05?d=identicon&version=1",
            "client": "website",
            "content": "<p>Awesome! I'm currently working on porting it to Go. It was worth it for me, but the C definitely made it a challenge because I'm not very experienced with debugging large C projects</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 166118825,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "brhpkns@gmail.com",
            "sender_full_name": "Brandon Hopkins (he) (SP2'19)",
            "sender_id": 216115,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "SQLite Clone",
            "submessages": [],
            "timestamp": 1558385544,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/32721626292fa2708ee74d852696e44f426cd631?x=x&version=2",
            "client": "website",
            "content": "<p>So I've been diving into Go's networking package, trying to understand how <code>net.Listen()</code> works by mapping it to the socket syscalls... and around 2 hours and 10 or so files later:</p>\n<p><a href=\"/user_uploads/13/utvEqmVBgh5rzfoUSPjNrzQR/pasted_image.png\" target=\"_blank\" title=\"pasted_image.png\">pasted image</a> </p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/13/utvEqmVBgh5rzfoUSPjNrzQR/pasted_image.png\" target=\"_blank\" title=\"pasted image\"><img src=\"/user_uploads/13/utvEqmVBgh5rzfoUSPjNrzQR/pasted_image.png\"></a></div><p>Finally found <code>bind()</code>! Interesting to compare it to C and Python. Go does a lot more than just wrap the system calls in a nice API the way Python does it. At least the documentation is very thorough and helpful.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 172432957,
            "is_me_message": false,
            "last_edit_timestamp": 1564895684,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "dabbagh.aos@gmail.com",
            "sender_full_name": "Aos Dabbagh (S2'17)",
            "sender_id": 101320,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "Digging into the \"net\" package",
            "submessages": [],
            "timestamp": 1564891464,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/e53f7dbb47c94693d5ecb4059df20f05?d=identicon&version=1",
            "client": "website",
            "content": "<p>So cool! Is there a blog post coming out of this? <span aria-label=\"wink\" class=\"emoji emoji-1f609\" role=\"img\" title=\"wink\">:wink:</span></p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 172445623,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f446",
                    "emoji_name": "this",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "thwidge@gmail.com",
                        "full_name": "Maren Beam (she) (SP2'19)",
                        "id": 215391
                    },
                    "user_id": 215391
                }
            ],
            "recipient_id": 22624,
            "sender_email": "brhpkns@gmail.com",
            "sender_full_name": "Brandon Hopkins (he) (SP2'19)",
            "sender_id": 216115,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "Digging into the \"net\" package",
            "submessages": [],
            "timestamp": 1564917596,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/32721626292fa2708ee74d852696e44f426cd631?x=x&version=2",
            "client": "website",
            "content": "<p>Oh good idea -- I'll see if I can take some time to write this.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 172602483,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f389",
                    "emoji_name": "tada",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "ghthor@gmail.com",
                        "full_name": "Will Drengwitz (he) (W1'17)",
                        "id": 7099
                    },
                    "user_id": 7099
                },
                {
                    "emoji_code": "1f389",
                    "emoji_name": "tada",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "thwidge@gmail.com",
                        "full_name": "Maren Beam (she) (SP2'19)",
                        "id": 215391
                    },
                    "user_id": 215391
                }
            ],
            "recipient_id": 22624,
            "sender_email": "dabbagh.aos@gmail.com",
            "sender_full_name": "Aos Dabbagh (S2'17)",
            "sender_id": 101320,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "Digging into the \"net\" package",
            "submessages": [],
            "timestamp": 1565107559,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/f40a7b8ecee48e051585750f7572f4b338cbc0a0?x=x&version=3",
            "client": "website",
            "content": "<p>A bit confused by  <code>[]int{2}</code> go syntax... It seems like we're initializing a slice (dynamic array) with some integer literals. Is this a common pattern to initialize a slice with an arbitrary number of literals?</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 173385332,
            "is_me_message": false,
            "last_edit_timestamp": 1565971314,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "evanercolano@gmail.com",
            "sender_full_name": "Evan Ercolano (he) (F1'19)",
            "sender_id": 234255,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "Go syntax help",
            "submessages": [],
            "timestamp": 1565971226,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/546e3e6a562ed246169ef3984d97a185e77753c0?x=x&version=2",
            "client": "ZulipElectron",
            "content": "<p>Yeah that's idiomatic IMO. You could also initialize it empty, e.g. <code>numbers := []int{}</code></p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 173386221,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "ross@ross-snyder.com",
            "sender_full_name": "Ross Snyder (he) (m5'19)",
            "sender_id": 234689,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "Go syntax help",
            "submessages": [],
            "timestamp": 1565972020,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/70201dad8f30b376c8e9f8ede010e43b63266850?x=x&version=6",
            "client": "website",
            "content": "<p>.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 173386422,
            "is_me_message": false,
            "last_edit_timestamp": 1605729509,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "stanley@zheng.nyc",
            "sender_full_name": "Stanley Zheng (they) (W1'19)",
            "sender_id": 100315,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "Go syntax help",
            "submessages": [],
            "timestamp": 1565972176,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/e53f7dbb47c94693d5ecb4059df20f05?d=identicon&version=1",
            "client": "website",
            "content": "<p>Yeah. Just curious what you're finding confusing about it (i.e. what languages are you coming from) in case that might lead to any interesting discussions?</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 173386761,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "brhpkns@gmail.com",
            "sender_full_name": "Brandon Hopkins (he) (SP2'19)",
            "sender_id": 216115,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "Go syntax help",
            "submessages": [],
            "timestamp": 1565972500,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/546e3e6a562ed246169ef3984d97a185e77753c0?x=x&version=2",
            "client": "ZulipElectron",
            "content": "<p>When I started out with Go, I think my eyes wanted to read <code>[]int{2}</code> as an <code>int</code> array of length two, though I don't know offhand which language that'd be coming from.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 173388241,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "ross@ross-snyder.com",
            "sender_full_name": "Ross Snyder (he) (m5'19)",
            "sender_id": 234689,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "Go syntax help",
            "submessages": [],
            "timestamp": 1565973747,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/4d05a1864740bfcbe9e387dcc84c176442985158?x=x&version=8",
            "client": "ZulipElectron",
            "content": "<p>Maybe this page from the Tour of Go is clarifying? <a href=\"https://tour.golang.org/moretypes/9\" target=\"_blank\" title=\"https://tour.golang.org/moretypes/9\">https://tour.golang.org/moretypes/9</a></p>\n<p>I'm actually not sure if I'd ever really thought about he difference between slice literals and array literals in Go.</p>\n<p>EDIT: And I'm glad that I have now! Thanks <span class=\"user-mention\" data-user-id=\"234255\">@Evan Ercolano (he) (F1'19)</span></p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 173388672,
            "is_me_message": false,
            "last_edit_timestamp": 1565974177,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "thwidge@gmail.com",
            "sender_full_name": "Maren Beam (she) (SP2'19)",
            "sender_id": 215391,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "Go syntax help",
            "submessages": [],
            "timestamp": 1565974130,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/e53f7dbb47c94693d5ecb4059df20f05?d=identicon&version=1",
            "client": "website",
            "content": "<p>Ah maybe because of <code>new int[2]</code> in Java?</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 173388688,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "brhpkns@gmail.com",
            "sender_full_name": "Brandon Hopkins (he) (SP2'19)",
            "sender_id": 216115,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "Go syntax help",
            "submessages": [],
            "timestamp": 1565974141,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/f40a7b8ecee48e051585750f7572f4b338cbc0a0?x=x&version=3",
            "client": "ZulipMobile",
            "content": "<p>Sorry was away from Zulip - <span class=\"user-mention\" data-user-id=\"234689\">@Ross Snyder (he) (m5'19)</span> that\u2019s exactly what I thought it would mean. Ah yes Brandon I mainly programmed in Java at my old gig so that makes sense</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 173406663,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "evanercolano@gmail.com",
            "sender_full_name": "Evan Ercolano (he) (F1'19)",
            "sender_id": 234255,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "Go syntax help",
            "submessages": [],
            "timestamp": 1565988784,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/f40a7b8ecee48e051585750f7572f4b338cbc0a0?x=x&version=3",
            "client": "ZulipMobile",
            "content": "<p><span class=\"user-mention\" data-user-id=\"215391\">@Maren Beam (she) (SP2'19)</span> that\u2019s exactly what I was looking for - thank you. Also no problem \ud83d\ude0f</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 173406752,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f64f",
                    "emoji_name": "welcome",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "thwidge@gmail.com",
                        "full_name": "Maren Beam (she) (SP2'19)",
                        "id": 215391
                    },
                    "user_id": 215391
                }
            ],
            "recipient_id": 22624,
            "sender_email": "evanercolano@gmail.com",
            "sender_full_name": "Evan Ercolano (he) (F1'19)",
            "sender_id": 234255,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "Go syntax help",
            "submessages": [],
            "timestamp": 1565988874,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/cb2b09d7dd97767f491a30952ce1366c065c2d01?x=x&version=2",
            "client": "website",
            "content": "<p>hi! I have a technical screen tomorrow and they told me to think about concurrency. I've been trying to work through these exercises, but getting pretty stuck. if anyone has time to pair on these with me between now and tomorrow afternoon, I'd really appreciate it! the exercises are here: <a href=\"https://github.com/mindworker/go-concurrency-exercises\" target=\"_blank\" title=\"https://github.com/mindworker/go-concurrency-exercises\">https://github.com/mindworker/go-concurrency-exercises</a></p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 174913124,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "maryum.styles@gmail.com",
            "sender_full_name": "Maryum Styles (she) (S2'19)",
            "sender_id": 228108,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "concurrency struggles",
            "submessages": [],
            "timestamp": 1567624378,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/0a35beaf5a354dafdf10494c0313e10fffc154fd?x=x&version=1",
            "client": "website",
            "content": "<p>hey <span class=\"user-mention\" data-user-id=\"228108\">@Maryum Styles (she) (S2'19)</span>, i'm at work so I don't have a tonnn of time but i can hop on a 30-45ish call (as long as i'm off by 6) or pair async via zulip!</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 174918351,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "maia.mcc@gmail.com",
            "sender_full_name": "Maia McCormick (she) (S2'14)",
            "sender_id": 6175,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "concurrency struggles",
            "submessages": [],
            "timestamp": 1567627946,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/0a35beaf5a354dafdf10494c0313e10fffc154fd?x=x&version=1",
            "client": "website",
            "content": "<p>i'm not SUPER experienced at go concurrency but I work in Go and have at least seen the paradigms a fair bit</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 174918399,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "maia.mcc@gmail.com",
            "sender_full_name": "Maia McCormick (she) (S2'14)",
            "sender_id": 6175,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "concurrency struggles",
            "submessages": [],
            "timestamp": 1567627991,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/0a35beaf5a354dafdf10494c0313e10fffc154fd?x=x&version=1",
            "client": "website",
            "content": "<p>...also idk if this is a weird offer but maybe one of my coworkers has more time this afternoon/evening than i do -- they're somewhat more experienced at go concurrency than i am, and they're all sweet people who would probs be willing to pitch in some time! lmk if you want me to ask them (and if so, how they should contact you :) )</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 174918526,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "maia.mcc@gmail.com",
            "sender_full_name": "Maia McCormick (she) (S2'14)",
            "sender_id": 6175,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "concurrency struggles",
            "submessages": [],
            "timestamp": 1567628071,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/cb2b09d7dd97767f491a30952ce1366c065c2d01?x=x&version=2",
            "client": "website",
            "content": "<p>hey <span class=\"user-mention\" data-user-id=\"6175\">@Maia McCormick (she) (S2'14)</span> thanks for reaching out. I rubber ducked with <span class=\"user-mention\" data-user-id=\"233941\">@Natalie K Olivo (she) (F1'19)</span> and I feel a bit more confident now</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 174922981,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "maryum.styles@gmail.com",
            "sender_full_name": "Maryum Styles (she) (S2'19)",
            "sender_id": 228108,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "concurrency struggles",
            "submessages": [],
            "timestamp": 1567631257,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/0a35beaf5a354dafdf10494c0313e10fffc154fd?x=x&version=1",
            "client": "website",
            "content": "<p>yay i'm glad to hear it! good luck with your screen!! and feel free to ping (DM or @-message is best b/c then I get an email) if you want any (async) rubber ducking</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 174923120,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "maia.mcc@gmail.com",
            "sender_full_name": "Maia McCormick (she) (S2'14)",
            "sender_id": 6175,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "concurrency struggles",
            "submessages": [],
            "timestamp": 1567631365,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/40e1eb4186c76edfecca264f74e088ed0e62af25?x=x&version=2",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-id=\"203533\">@Gargi Sharma (she/they) (SP1'19)</span> did an entire talk on this recently :D</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 175366742,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "jaseemabid@gmail.com",
            "sender_full_name": "Jaseem Abid (he) (S1'17)",
            "sender_id": 101128,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "for range on map not that random :O",
            "submessages": [],
            "timestamp": 1568141178,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/8a33421d2bcd8a9924c8a516619c2731?d=identicon&version=1",
            "client": "website",
            "content": "<p>I am planning on going to the GolangNYC meetup tomorrow night if any other Gophers at RC are interested. I think there is a waitlist right now but I expect you'll get a spot if you sign up now. <a href=\"https://www.meetup.com/golanguagenewyork/events/264249534/\" target=\"_blank\" title=\"https://www.meetup.com/golanguagenewyork/events/264249534/\">https://www.meetup.com/golanguagenewyork/events/264249534/</a></p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 176402899,
            "is_me_message": false,
            "last_edit_timestamp": 1569268311,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "mmcloughlin@gmail.com",
            "sender_full_name": "Michael Ben McLoughlin (he) (m6'19)",
            "sender_id": 240578,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "GolangNYC Meetup",
            "submessages": [],
            "timestamp": 1569268289,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/59647f3b8a0c4e85b8ac7b9e1cba251f05a6e847?x=x&version=2",
            "client": "ZulipElectron",
            "content": "<p>Signed up. on a waiting list!</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 176403317,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f389",
                    "emoji_name": "tada",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "mmcloughlin@gmail.com",
                        "full_name": "Michael Ben McLoughlin (he) (m6'19)",
                        "id": 240578
                    },
                    "user_id": 240578
                }
            ],
            "recipient_id": 22624,
            "sender_email": "kavirajkanagaraj@gmail.com",
            "sender_full_name": "Kaviraj Kanagaraj (he) (F2'19)",
            "sender_id": 240579,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "GolangNYC Meetup",
            "submessages": [],
            "timestamp": 1569268591,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/7becb5bc5504919827409f72f5d193c5?d=identicon&version=1",
            "client": "website",
            "content": "<p>I've recently pushed my first sizeable Go project into production, and while it's working fine I'm unhappy with how messy / interdependent my code is. I came upon this article which seems like a clean, not-too-pedantic setup: <a href=\"https://medium.com/@benbjohnson/standard-package-layout-7cdbc8391fc1\" target=\"_blank\" title=\"https://medium.com/@benbjohnson/standard-package-layout-7cdbc8391fc1\">https://medium.com/@benbjohnson/standard-package-layout-7cdbc8391fc1</a> </p>\n<p>Would love thoughts on how other RCers organize their medium-to-large Go projects</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 176876679,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "hi@charlietran.com",
            "sender_full_name": "Charlie Tran (he) (F1'18)",
            "sender_id": 124995,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "Project Structure",
            "submessages": [],
            "timestamp": 1569772546,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/59647f3b8a0c4e85b8ac7b9e1cba251f05a6e847?x=x&version=2",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-id=\"124995\">@Charlie Tran (he) (F1'18)</span> we have several medium to large sized Go projects in my  current company with micro-service architecture. The layout suggested by William Kennedy worked for us very well. <a href=\"https://www.ardanlabs.com/blog/2017/02/package-oriented-design.html\" target=\"_blank\" title=\"https://www.ardanlabs.com/blog/2017/02/package-oriented-design.html\">https://www.ardanlabs.com/blog/2017/02/package-oriented-design.html</a></p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 176943326,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "+1",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "daniel.rigberg@gmail.com",
                        "full_name": "Daniel Lucas Rigberg (he) (W1'16)",
                        "id": 100342
                    },
                    "user_id": 100342
                }
            ],
            "recipient_id": 22624,
            "sender_email": "kavirajkanagaraj@gmail.com",
            "sender_full_name": "Kaviraj Kanagaraj (he) (F2'19)",
            "sender_id": 240579,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "Project Structure",
            "submessages": [],
            "timestamp": 1569857379,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/7becb5bc5504919827409f72f5d193c5?d=identicon&version=1",
            "client": "ZulipMobile",
            "content": "<p>Thank you <span class=\"user-mention\" data-user-id=\"240579\">@Kaviraj Kanagaraj (he) (F2'19)</span>! Do you still use a vendor/ folder or have you switched over to Go Modules?</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 176983582,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "hi@charlietran.com",
            "sender_full_name": "Charlie Tran (he) (F1'18)",
            "sender_id": 124995,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "Project Structure",
            "submessages": [],
            "timestamp": 1569885660,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/59647f3b8a0c4e85b8ac7b9e1cba251f05a6e847?x=x&version=2",
            "client": "ZulipMobile",
            "content": "<p><span class=\"user-mention\" data-user-id=\"124995\">@Charlie Tran (he) (F1'18)</span>  we switched to Go modules everywhere!</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 177003280,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "kavirajkanagaraj@gmail.com",
            "sender_full_name": "Kaviraj Kanagaraj (he) (F2'19)",
            "sender_id": 240579,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "Project Structure",
            "submessages": [],
            "timestamp": 1569897910,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/32721626292fa2708ee74d852696e44f426cd631?x=x&version=2",
            "client": "website",
            "content": "<p>Hi. Is there a way to conditionally compile some code in go? I'm thinking something akin to C's preprocessor (<code>#ifdef</code>, <code>#define</code>, etc.). I looked at build constraints, but that's not _quite_ it. Or maybe it is possible with build constraints and I'm not doing it right? </p>\n<p>Basically, I'm writing an interpreter and I want to be able to trace/profile the code, but only compile the tracing bits with a flag. Is that possible?</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 179153467,
            "is_me_message": false,
            "last_edit_timestamp": 1572148667,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "dabbagh.aos@gmail.com",
            "sender_full_name": "Aos Dabbagh (S2'17)",
            "sender_id": 101320,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "Preprocessing/conditional compilation",
            "submessages": [],
            "timestamp": 1572148643,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/32721626292fa2708ee74d852696e44f426cd631?x=x&version=2",
            "client": "website",
            "content": "<p>Update: Looks like I got a working preprocessing ability! Albeit somewhat simple... Basically, I build using optional <code>tags</code>, and use those as <code>bool</code>s in branch statements. Turns out golang does do dead-code elimination so there is no overhead with building without tags.</p>\n<p>You can see a simple working example of it here: <a href=\"https://github.com/aos/bff\" target=\"_blank\" title=\"https://github.com/aos/bff\">https://github.com/aos/bff</a>. I define a constant in two separate files and build accordingly :<code>trace.go</code> and <code>notrace.go</code> with <code>// +build</code> tags. I know it works because the difference in runtime in traced vs un-traced builds is huge!</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 179156000,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "65",
                    "emoji_name": "gopher",
                    "reaction_type": "realm_emoji",
                    "user": {
                        "email": "jaseemabid@gmail.com",
                        "full_name": "Jaseem Abid (he) (S1'17)",
                        "id": 101128
                    },
                    "user_id": 101128
                },
                {
                    "emoji_code": "1172",
                    "emoji_name": "cool",
                    "reaction_type": "realm_emoji",
                    "user": {
                        "email": "thwidge@gmail.com",
                        "full_name": "Maren Beam (she) (SP2'19)",
                        "id": 215391
                    },
                    "user_id": 215391
                },
                {
                    "emoji_code": "65",
                    "emoji_name": "gopher",
                    "reaction_type": "realm_emoji",
                    "user": {
                        "email": "thwidge@gmail.com",
                        "full_name": "Maren Beam (she) (SP2'19)",
                        "id": 215391
                    },
                    "user_id": 215391
                }
            ],
            "recipient_id": 22624,
            "sender_email": "dabbagh.aos@gmail.com",
            "sender_full_name": "Aos Dabbagh (S2'17)",
            "sender_id": 101320,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "Preprocessing/conditional compilation",
            "submessages": [],
            "timestamp": 1572154171,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/a324f3b4f67811400d9ab128eff5a5520747223c?x=x&version=2",
            "client": "ZulipMobile",
            "content": "<p>Hi Everyone! I'm starting next week and am churning around some ideas for projects. I have been wondering about how Go might perform as an OS programming language, what modules it might be best for, speed considerations, etc. Do you all have any thoughts on this?</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 179374319,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "alex@astar.app",
            "sender_full_name": "Alexander Paul Mozeak (he) (W1'19)",
            "sender_id": 246970,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "Go for Systems",
            "submessages": [],
            "timestamp": 1572383174,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/e92d09f5fc22b08f4dde0a7c76f059ce2c668ec9?x=x&version=2",
            "client": "website",
            "content": "<p>I was wondering is there anyway to compile a regexp at compile-time? I'm relatively new to go and I'm writing a library - it feels weird to have a step to compile the regexps at runtime. <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 182498530,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "sean.rankine@me.com",
            "sender_full_name": "Sean Rankine (he) (SP1'18)",
            "sender_id": 109426,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "Is it possible to compile regexps at compile time?",
            "submessages": [],
            "timestamp": 1575408717,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/40e1eb4186c76edfecca264f74e088ed0e62af25?x=x&version=2",
            "client": "website",
            "content": "<p>Go comes with a runtime, is garbage collected and makes low level memory access kinda tricky - things you might need a lot while building an OS.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 189905954,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "jaseemabid@gmail.com",
            "sender_full_name": "Jaseem Abid (he) (S1'17)",
            "sender_id": 101128,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "Go for Systems",
            "submessages": [],
            "timestamp": 1583509934,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/c6a4682e6a46285de64c97c77b771481?d=identicon&version=1",
            "client": "website",
            "content": "<p>It's... probably doable, but you'd need to be pretty careful. The Go runtime is written in Go, and does most of what you'd need for an OS -- but you'd need to be very careful to avoid, for example, allocating in your allocator.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 189907563,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "ori@eigenstate.org",
            "sender_full_name": "Ori Dean Bernstein (he) (W2'20)",
            "sender_id": 255045,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "Go for Systems",
            "submessages": [],
            "timestamp": 1583510901,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/661412d42ecbf0c0bd354116859a5af3562f8e5f?x=x&version=4",
            "client": "website",
            "content": "<p>hey y\u2019all! i\u2019m not sure, how many people know about this, but i just stumbled upon a fun bug in golang (<a href=\"https://github.com/golang/go/issues/20135\">ticket 20135</a>).</p>\n<p>maps do not ever shrink and size is never reclaimed unless you throw away the map and copy all values in it. imo that\u2019s a pretty severe bug and it actually explains a bunch of behaviors i observed in the past but never quite knew how to debug (and they were never dealbreakers until today).</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 199011080,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f628",
                    "emoji_name": "shock",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "asf@boinkor.net",
                        "full_name": "Andreas Fuchs (he/they)",
                        "id": 9362
                    },
                    "user_id": 9362
                },
                {
                    "emoji_code": "1f628",
                    "emoji_name": "shock",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "tristan.fisher@gmail.com",
                        "full_name": "Tristan Fisher (S2'14)",
                        "id": 6173
                    },
                    "user_id": 6173
                },
                {
                    "emoji_code": "1f628",
                    "emoji_name": "shock",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "shean.lin2018@gmail.com",
                        "full_name": "Shean Lin (he) (S1'20)",
                        "id": 263507
                    },
                    "user_id": 263507
                },
                {
                    "emoji_code": "1f628",
                    "emoji_name": "shock",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "thwidge@gmail.com",
                        "full_name": "Maren Beam (she) (SP2'19)",
                        "id": 215391
                    },
                    "user_id": 215391
                }
            ],
            "recipient_id": 22624,
            "sender_email": "veit@veitheller.de",
            "sender_full_name": "Veit Heller (he) (S1'17)",
            "sender_id": 101103,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "bug 20135",
            "submessages": [],
            "timestamp": 1590666453,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/444b51546aefb8c4a59a14b5ffead40e?d=identicon&version=1",
            "client": "ZulipElectron",
            "content": "<p>That's a pretty wild thread. I'm not incredibly knowledgeable about this stuff, but I suppose you could have 2 parallel slices that act \"like\" a map if you need to store some giant K=&gt;Vs in memory, but then you would lose any advantages of having a HashMap with O(1) access time, right?</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 199272137,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "reid.savage@gmail.com",
            "sender_full_name": "Reid Savage (they) (m4'20)",
            "sender_id": 301271,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "bug 20135",
            "submessages": [],
            "timestamp": 1590866632,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/c6a4682e6a46285de64c97c77b771481?d=identicon&version=1",
            "client": "website",
            "content": "<p>you could easily enough implement your own hash map, but shrinking is still hard -- at least if you want to spread the cost out.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 199272673,
            "is_me_message": false,
            "last_edit_timestamp": 1590867382,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "ori@eigenstate.org",
            "sender_full_name": "Ori Dean Bernstein (he) (W2'20)",
            "sender_id": 255045,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "bug 20135",
            "submessages": [],
            "timestamp": 1590867341,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/842e08a228d86d5163ac24f95b6a92d321fc7193?x=x&version=2",
            "client": "website",
            "content": "<p>does anyone know if it's possible to mock out an entire package with <code>mockgen</code>?</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 202370683,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "ian@theknown.net",
            "sender_full_name": "Ian Whitlock (S'13)",
            "sender_id": 2119,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "go mock",
            "submessages": [],
            "timestamp": 1593466339,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/842e08a228d86d5163ac24f95b6a92d321fc7193?x=x&version=2",
            "client": "website",
            "content": "<p>hmm this stream is a little quiet. is Go an unpopular choice at Recurse?</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 202370718,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "ian@theknown.net",
            "sender_full_name": "Ian Whitlock (S'13)",
            "sender_id": 2119,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "go mock",
            "submessages": [],
            "timestamp": 1593466367,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/aa00aab2a15eb677ff74f7abf5e2519cdcef19da?x=x&version=2",
            "client": "website",
            "content": "<p>I'm working in Go (today is my first day in batch, so I haven't gotten to say much yet)</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 202375634,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "b.toma.morris@gmail.com",
            "sender_full_name": "Toma Morris (they) (m5'20)",
            "sender_id": 314654,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "go mock",
            "submessages": [],
            "timestamp": 1593469696,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/aa00aab2a15eb677ff74f7abf5e2519cdcef19da?x=x&version=2",
            "client": "website",
            "content": "<p>I haven't used <code>mockgen</code>. I've done all my mocking using dependency injection</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 202375660,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "b.toma.morris@gmail.com",
            "sender_full_name": "Toma Morris (they) (m5'20)",
            "sender_id": 314654,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "go mock",
            "submessages": [],
            "timestamp": 1593469725,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/40e1eb4186c76edfecca264f74e088ed0e62af25?x=x&version=2",
            "client": "website",
            "content": "<p>WOW. That's an interesting and very useful TIL.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 202632053,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "jaseemabid@gmail.com",
            "sender_full_name": "Jaseem Abid (he) (S1'17)",
            "sender_id": 101128,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "bug 20135",
            "submessages": [],
            "timestamp": 1593643164,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/842e08a228d86d5163ac24f95b6a92d321fc7193?x=x&version=2",
            "client": "website",
            "content": "<p>the answer to this seems to be \"use it to mock out interfaces\"</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 207349405,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "ian@theknown.net",
            "sender_full_name": "Ian Whitlock (S'13)",
            "sender_id": 2119,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "go mock",
            "submessages": [],
            "timestamp": 1597789523,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/0031ae6808e421803a47dd48c189e6a205070b92?x=x&version=5",
            "client": "website",
            "content": "<p>I am not a go engineer, but at work i have been tasked with getting a repo to build with nixpkgs (which is not entirely relevant, but if someone has some advice on go-lang in nix, that would also be appreciated). I have noticed that <code>go build</code> inside the src repo works just fine, but <code>go mod vendor</code> fails with: \"&lt;dep&gt;@latest found but does not contain package &lt;dep&gt;/package-name\". It is worth noting, that before running each command i have <code>rm -rf ~/go</code> and <code>rm -rf ~/.cache/go-builds</code> which should force both commands to download the deps regardless. So why does <code>go build</code> properly produce an executable, but go mod vendor fails due to a missing dep?</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 207580340,
            "is_me_message": false,
            "last_edit_timestamp": 1597961522,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "jacquin.mininger@gmail.com",
            "sender_full_name": "Jacquin Mininger (F2'17)",
            "sender_id": 102005,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "Deps via: go build vs go mod vendor",
            "submessages": [],
            "timestamp": 1597961428,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/8883f6051fe385c3b03f16804c838d4c6b10e4bc?x=x&version=2",
            "client": "website",
            "content": "<p>Alas can't help here, just wanted to share there's also a <a class=\"stream\" data-stream-id=\"100724\" href=\"/#narrow/stream/100724-nix\">#nix</a>  stream in case cross-posting could help.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 207583533,
            "is_me_message": false,
            "last_edit_timestamp": 1597963724,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "ezzeri.esa@gmail.com",
            "sender_full_name": "Ezzeri Esa (he) (F1'20)",
            "sender_id": 327456,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "Deps via: go build vs go mod vendor",
            "submessages": [],
            "timestamp": 1597963712,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/0031ae6808e421803a47dd48c189e6a205070b92?x=x&version=5",
            "client": "website",
            "content": "<p>Thank you very much. I think its more of a go issue right now. I only mentioned the nix part because i came across this issue by trying to fix a failing nix-build (by reproing everything manually, on the command line)</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 207585884,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "+1",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "ezzeri.esa@gmail.com",
                        "full_name": "Ezzeri Esa (he) (F1'20)",
                        "id": 327456
                    },
                    "user_id": 327456
                }
            ],
            "recipient_id": 22624,
            "sender_email": "jacquin.mininger@gmail.com",
            "sender_full_name": "Jacquin Mininger (F2'17)",
            "sender_id": 102005,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "Deps via: go build vs go mod vendor",
            "submessages": [],
            "timestamp": 1597965800,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/2ce71a96d529311d42a8a041471b31f9?d=identicon&version=1",
            "client": "ZulipElectron",
            "content": "<p>I don't know the answer off the top of my head but I vaguely remember there being a big thread that talked about similar issues and workarounds in the nixpkgs repo around the time go modules were released. (Though I vaguely remember it being more related to mutability issues rather than vendoring specifically.)</p>\n<p>Is the package or derivation so far up somewhere that I can take a look? Curious what the go.mod looks like.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 207638327,
            "is_me_message": false,
            "last_edit_timestamp": 1598019079,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "andrey.petrov@shazow.net",
            "sender_full_name": "Andrey Petrov (he) (F1'20)",
            "sender_id": 327980,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "Deps via: go build vs go mod vendor",
            "submessages": [],
            "timestamp": 1598019045,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/0031ae6808e421803a47dd48c189e6a205070b92?x=x&version=5",
            "client": "website",
            "content": "<p>Heh, so i removed the offending import, and everything works well again (should have been the first thing i did). This seems to suggest to me that <code>go build</code> only pulls in necessary dependencies, while <code>go mod vendor</code> pulls in dependencies for everything in the src?</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 207643684,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "jacquin.mininger@gmail.com",
            "sender_full_name": "Jacquin Mininger (F2'17)",
            "sender_id": 102005,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "Deps via: go build vs go mod vendor",
            "submessages": [],
            "timestamp": 1598021651,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/0031ae6808e421803a47dd48c189e6a205070b92?x=x&version=5",
            "client": "website",
            "content": "<p>The new issue i am having is that running nix-build repeatedly produces a new derivation each time, which certainly isn't supposed to happen, but I need to investigate some more, and Ill move to <a class=\"stream\" data-stream-id=\"100724\" href=\"/#narrow/stream/100724-nix\">#nix</a> when I come up with a related question</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 207643915,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "jacquin.mininger@gmail.com",
            "sender_full_name": "Jacquin Mininger (F2'17)",
            "sender_id": 102005,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "Deps via: go build vs go mod vendor",
            "submessages": [],
            "timestamp": 1598021756,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/2ce71a96d529311d42a8a041471b31f9?d=identicon&version=1",
            "client": "ZulipMobile",
            "content": "<p>Hmm maybe go mod vendor only looks at the mod file which has extraneous things, have you tried <code>go mod tidy</code>?</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 207648624,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "andrey.petrov@shazow.net",
            "sender_full_name": "Andrey Petrov (he) (F1'20)",
            "sender_id": 327980,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "Deps via: go build vs go mod vendor",
            "submessages": [],
            "timestamp": 1598024080,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/0031ae6808e421803a47dd48c189e6a205070b92?x=x&version=5",
            "client": "website",
            "content": "<p>Yeah, it failed in the same way that <code>go mod vendor</code> failed</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 207650953,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "65",
                    "emoji_name": "gopher",
                    "reaction_type": "realm_emoji",
                    "user": {
                        "email": "andrey.petrov@shazow.net",
                        "full_name": "Andrey Petrov (he) (F1'20)",
                        "id": 327980
                    },
                    "user_id": 327980
                },
                {
                    "emoji_code": "1f641",
                    "emoji_name": "frown",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "andrey.petrov@shazow.net",
                        "full_name": "Andrey Petrov (he) (F1'20)",
                        "id": 327980
                    },
                    "user_id": 327980
                }
            ],
            "recipient_id": 22624,
            "sender_email": "jacquin.mininger@gmail.com",
            "sender_full_name": "Jacquin Mininger (F2'17)",
            "sender_id": 102005,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "Deps via: go build vs go mod vendor",
            "submessages": [],
            "timestamp": 1598025346,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/2ce71a96d529311d42a8a041471b31f9?d=identicon&version=1",
            "client": "ZulipElectron",
            "content": "<p>if the code is public, would be happy to try it on my end too. :)</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 207653307,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "andrey.petrov@shazow.net",
            "sender_full_name": "Andrey Petrov (he) (F1'20)",
            "sender_id": 327980,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "Deps via: go build vs go mod vendor",
            "submessages": [],
            "timestamp": 1598026497,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/0031ae6808e421803a47dd48c189e6a205070b92?x=x&version=5",
            "client": "website",
            "content": "<p>So the code in which i solved the problem by removing the extra import is: <a href=\"https://github.com/ava-labs/avash/tree/everest\">https://github.com/ava-labs/avash/tree/everest</a></p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 207662357,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "jacquin.mininger@gmail.com",
            "sender_full_name": "Jacquin Mininger (F2'17)",
            "sender_id": 102005,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "Deps via: go build vs go mod vendor",
            "submessages": [],
            "timestamp": 1598031676,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/0031ae6808e421803a47dd48c189e6a205070b92?x=x&version=5",
            "client": "website",
            "content": "<p>And the repo that is proving to be a much bigger pain to package reliably with nix is: <a href=\"https://github.com/ava-labs/gecko\">https://github.com/ava-labs/gecko</a></p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 207662518,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "jacquin.mininger@gmail.com",
            "sender_full_name": "Jacquin Mininger (F2'17)",
            "sender_id": 102005,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "Deps via: go build vs go mod vendor",
            "submessages": [],
            "timestamp": 1598031756,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/0031ae6808e421803a47dd48c189e6a205070b92?x=x&version=5",
            "client": "website",
            "content": "<p>To be clear: The initial question/problem has been solved</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 207662623,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "jacquin.mininger@gmail.com",
            "sender_full_name": "Jacquin Mininger (F2'17)",
            "sender_id": 102005,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "Deps via: go build vs go mod vendor",
            "submessages": [],
            "timestamp": 1598031832,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/0031ae6808e421803a47dd48c189e6a205070b92?x=x&version=5",
            "client": "website",
            "content": "<p>And now im just complaining more generally about nixpkgs and golang not getting along well in that 2nd repo</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 207662751,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "jacquin.mininger@gmail.com",
            "sender_full_name": "Jacquin Mininger (F2'17)",
            "sender_id": 102005,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "Deps via: go build vs go mod vendor",
            "submessages": [],
            "timestamp": 1598031891,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/2ce71a96d529311d42a8a041471b31f9?d=identicon&version=1",
            "client": "ZulipElectron",
            "content": "<p>Got it. I use both golang and nix, so I'm interested to follow along and see the derivation you come up with. :)</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 207663378,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "andrey.petrov@shazow.net",
            "sender_full_name": "Andrey Petrov (he) (F1'20)",
            "sender_id": 327980,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "Deps via: go build vs go mod vendor",
            "submessages": [],
            "timestamp": 1598032259,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/0031ae6808e421803a47dd48c189e6a205070b92?x=x&version=5",
            "client": "website",
            "content": "<p>So i ended up using the \"older\" version of buildGoModule, which you get by specifying the modSha256 and setting the vendorSha256 to null. This results in using <code>go mod download</code> instead of <code>go mod vendor</code> to download deps.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 207664137,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "jacquin.mininger@gmail.com",
            "sender_full_name": "Jacquin Mininger (F2'17)",
            "sender_id": 102005,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "Deps via: go build vs go mod vendor",
            "submessages": [],
            "timestamp": 1598032651,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/0031ae6808e421803a47dd48c189e6a205070b92?x=x&version=5",
            "client": "website",
            "content": "<p>(Using <code>go mod download</code>  is what the non-nixpkg build script does in the second repo). The other thing i did was override buildPhase to something simpler <code> mkdir $out &amp;&amp; go build -o $out/bin/ava main.go</code> (or something to that effect), and then set <code>dontInstall=true</code>. This works, but seems to produce a different derivation upon successive invocations of nix-build, which is very very odd. It seems to have something to do with the way that the derivation for the dependencies are created</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 207664484,
            "is_me_message": false,
            "last_edit_timestamp": 1598032946,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "jacquin.mininger@gmail.com",
            "sender_full_name": "Jacquin Mininger (F2'17)",
            "sender_id": 102005,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "Deps via: go build vs go mod vendor",
            "submessages": [],
            "timestamp": 1598032812,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/0031ae6808e421803a47dd48c189e6a205070b92?x=x&version=5",
            "client": "website",
            "content": "<p>I used the \"old\" version (soon to be deprecated) because I couldn't get the version that uses <code>go mod vendor</code> to work at all. I suspect that this has more to do with my very limited understanding of go and its module system than it does the way nixpkgs does things</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 207664585,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "jacquin.mininger@gmail.com",
            "sender_full_name": "Jacquin Mininger (F2'17)",
            "sender_id": 102005,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "Deps via: go build vs go mod vendor",
            "submessages": [],
            "timestamp": 1598032874,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/0031ae6808e421803a47dd48c189e6a205070b92?x=x&version=5",
            "client": "website",
            "content": "<p>While I don't have time atm, i do intend on digging into this, later in the weekend</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 207664805,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "jacquin.mininger@gmail.com",
            "sender_full_name": "Jacquin Mininger (F2'17)",
            "sender_id": 102005,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "Deps via: go build vs go mod vendor",
            "submessages": [],
            "timestamp": 1598032989,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/2ce71a96d529311d42a8a041471b31f9?d=identicon&version=1",
            "client": "ZulipElectron",
            "content": "<p>Have you seen the newer <code>buildGoPackage</code>? (Related thread: <a href=\"https://github.com/NixOS/nixpkgs/issues/84826\">https://github.com/NixOS/nixpkgs/issues/84826</a>)</p>\n<p>Edit: Actually not sure which is newer, I haven't used either yet but I did stumble on that thread before.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 207665029,
            "is_me_message": false,
            "last_edit_timestamp": 1598033164,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "andrey.petrov@shazow.net",
            "sender_full_name": "Andrey Petrov (he) (F1'20)",
            "sender_id": 327980,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "Deps via: go build vs go mod vendor",
            "submessages": [],
            "timestamp": 1598033100,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/0031ae6808e421803a47dd48c189e6a205070b92?x=x&version=5",
            "client": "website",
            "content": "<p>Ha! I assumed from the docs that that buildGoModule was newer, although i happened upon that thread last night, and don't know what to make of it</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 207665254,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f643",
                    "emoji_name": "upside_down",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "andrey.petrov@shazow.net",
                        "full_name": "Andrey Petrov (he) (F1'20)",
                        "id": 327980
                    },
                    "user_id": 327980
                }
            ],
            "recipient_id": 22624,
            "sender_email": "jacquin.mininger@gmail.com",
            "sender_full_name": "Jacquin Mininger (F2'17)",
            "sender_id": 102005,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "Deps via: go build vs go mod vendor",
            "submessages": [],
            "timestamp": 1598033210,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/65d6c64fa1f9d28ab178a7dda4cfb5e3d978dd5e?x=x&version=2",
            "client": "ZulipElectron",
            "content": "<p>Is anyone free now to pair on getting a python function call in a go server to work? I just have the one function I need access to, otherwise, I'd set up two servers, one for Python as well as Go. If not able to pair, maybe advise? I've got something along these lines working, but am not able to <code>json.Unmarshal</code> because I get some output from the import statement <code>cmd := exec.Command(\"python\", \"-c\", \"from ai.prediction import chatbot_response as chatbotResponse;\")</code> before I get to the function call <code>cmd = exec.Command(\"python\", \"-c\", \"print(chatbotResponse('What is her title?'))\")</code> I'll post in the Python channel as well.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 207786364,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "housker@gmail.com",
            "sender_full_name": "Adelle Housker (she) (W2'19)",
            "sender_id": 158595,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "python call in go",
            "submessages": [],
            "timestamp": 1598209006,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/c6a4682e6a46285de64c97c77b771481?d=identicon&version=1",
            "client": "website",
            "content": "<p>Why are you getting output? Can you remove the unwanted output from the library?</p>\n<p>If not, you can you can use a different communication channel -- a  fifo is simple and easy -- that go sets up (see <code>syscall.Mkfifo</code>, or <code>man 2 mkfifo</code>), and write only the response to that.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 207786896,
            "is_me_message": false,
            "last_edit_timestamp": 1598209974,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "ori@eigenstate.org",
            "sender_full_name": "Ori Dean Bernstein (he) (W2'20)",
            "sender_id": 255045,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "python call in go",
            "submessages": [],
            "timestamp": 1598209780,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/70201dad8f30b376c8e9f8ede010e43b63266850?x=x&version=6",
            "client": "website",
            "content": "<p>.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 207791288,
            "is_me_message": false,
            "last_edit_timestamp": 1605721905,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "stanley@zheng.nyc",
            "sender_full_name": "Stanley Zheng (they) (W1'19)",
            "sender_id": 100315,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "python call in go",
            "submessages": [],
            "timestamp": 1598216648,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/65d6c64fa1f9d28ab178a7dda4cfb5e3d978dd5e?x=x&version=2",
            "client": "ZulipElectron",
            "content": "<p><span class=\"user-mention\" data-user-id=\"100315\">@Stanley Zheng (they) (W1'19)</span> , you're right. The two calls need to be together. I got a hacky workaround with regex, but this is what I came up with:</p>\n<div class=\"codehilite\"><pre><span></span><code>func GetPrediction(question string) {\n    cmd := exec.Command(&quot;python&quot;, &quot;-c&quot;, fmt.Sprintf(&quot;from ai.prediction import chatbot_response as chatbotResponse; print(chatbotResponse(&#39;%v&#39;))&quot;, question))\n    out, err := cmd.CombinedOutput()\n    if err != nil {\n        fmt.Println(err)\n    }\n    re := regexp.MustCompile(`{[^\\\\&quot;]+}`)\n    return re.Find([]byte(string(out)))\n}\n</code></pre></div>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 207792093,
            "is_me_message": false,
            "last_edit_timestamp": 1598217898,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "housker@gmail.com",
            "sender_full_name": "Adelle Housker (she) (W2'19)",
            "sender_id": 158595,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "python call in go",
            "submessages": [],
            "timestamp": 1598217853,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/70201dad8f30b376c8e9f8ede010e43b63266850?x=x&version=6",
            "client": "ZulipMobile",
            "content": "<p>.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 207792337,
            "is_me_message": false,
            "last_edit_timestamp": 1605721905,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "stanley@zheng.nyc",
            "sender_full_name": "Stanley Zheng (they) (W1'19)",
            "sender_id": 100315,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "python call in go",
            "submessages": [],
            "timestamp": 1598218222,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/c6a4682e6a46285de64c97c77b771481?d=identicon&version=1",
            "client": "website",
            "content": "<p>note, be careful: if users can control the input with that code, then they can inject arbitrary python.</p>\n<div class=\"codehilite\"><pre><span></span><code> print(chatbotResponse(&#39;%v&#39;))&quot;, question))\n</code></pre></div>\n\n\n<p>Imagine if my question was <code>question') &amp;&amp; system('rm -rf /</code>, for example. Then, the code you put in would become:</p>\n<div class=\"codehilite\"><pre><span></span><code> print(chatbotResponse(&#39;question&#39;); &amp;&amp;system(rm -rf))\n</code></pre></div>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 207793064,
            "is_me_message": false,
            "last_edit_timestamp": 1598219761,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "ori@eigenstate.org",
            "sender_full_name": "Ori Dean Bernstein (he) (W2'20)",
            "sender_id": 255045,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "python call in go",
            "submessages": [],
            "timestamp": 1598219623,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/c6a4682e6a46285de64c97c77b771481?d=identicon&version=1",
            "client": "website",
            "content": "<p>a simple solution that doesn't require much thinking would be to read the question from stdin. That would be completely safe, and would also let you submit multiple questions.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 207793394,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "ori@eigenstate.org",
            "sender_full_name": "Ori Dean Bernstein (he) (W2'20)",
            "sender_id": 255045,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "python call in go",
            "submessages": [],
            "timestamp": 1598220208,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/65d6c64fa1f9d28ab178a7dda4cfb5e3d978dd5e?x=x&version=2",
            "client": "ZulipElectron",
            "content": "<p>Good point, <span class=\"user-mention\" data-user-id=\"255045\">@Ori Dean Bernstein (he) (W2'20)</span> Thank you for that advice!</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 207795246,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "housker@gmail.com",
            "sender_full_name": "Adelle Housker (she) (W2'19)",
            "sender_id": 158595,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "python call in go",
            "submessages": [],
            "timestamp": 1598223485,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/842e08a228d86d5163ac24f95b6a92d321fc7193?x=x&version=2",
            "client": "website",
            "content": "<p>Hey folks, does anybody know if it's possible to decode a JSON string into a struct type that has a member which is an interface type?</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 217185535,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "ian@theknown.net",
            "sender_full_name": "Ian Whitlock (S'13)",
            "sender_id": 2119,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "polymorphic json decoding",
            "submessages": [],
            "timestamp": 1605728102,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/842e08a228d86d5163ac24f95b6a92d321fc7193?x=x&version=2",
            "client": "website",
            "content": "<p>e.g. the concrete string input in the value field in JSON correlates to a concrete struct in Go which implements an interface, but the definition of the type into which the string should be marshaled contains the interface instead of a concrete type, because I would like to allow that field to be able to hold other structs that implement the interface</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 217185749,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "ian@theknown.net",
            "sender_full_name": "Ian Whitlock (S'13)",
            "sender_id": 2119,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "polymorphic json decoding",
            "submessages": [],
            "timestamp": 1605728200,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/842e08a228d86d5163ac24f95b6a92d321fc7193?x=x&version=2",
            "client": "website",
            "content": "<p>but from looking on Google I can't seem to determine if this is something that's possible in Go, or if I need to think of a different solution</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 217185821,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "ian@theknown.net",
            "sender_full_name": "Ian Whitlock (S'13)",
            "sender_id": 2119,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "polymorphic json decoding",
            "submessages": [],
            "timestamp": 1605728231,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/842e08a228d86d5163ac24f95b6a92d321fc7193?x=x&version=2",
            "client": "website",
            "content": "<p>if anybody knows what the hell I'm talking about and wants to help, I'm happy to share more details, or even code (this codebase is OSS)</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 217185877,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "ian@theknown.net",
            "sender_full_name": "Ian Whitlock (S'13)",
            "sender_id": 2119,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "polymorphic json decoding",
            "submessages": [],
            "timestamp": 1605728263,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/842e08a228d86d5163ac24f95b6a92d321fc7193?x=x&version=2",
            "client": "website",
            "content": "<p>also tag me if you reply, thanks</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 217186016,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "ian@theknown.net",
            "sender_full_name": "Ian Whitlock (S'13)",
            "sender_id": 2119,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "polymorphic json decoding",
            "submessages": [],
            "timestamp": 1605728326,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/842e08a228d86d5163ac24f95b6a92d321fc7193?x=x&version=2",
            "client": "website",
            "content": "<p><code>context deadline exceeded</code> is the <code>NullPointerException</code> of Go.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 217446701,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "ian@theknown.net",
            "sender_full_name": "Ian Whitlock (S'13)",
            "sender_id": 2119,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "context deadline exceeded",
            "submessages": [],
            "timestamp": 1605899935,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/842e08a228d86d5163ac24f95b6a92d321fc7193?x=x&version=2",
            "client": "website",
            "content": "<p>(of course the actual behavior when a nil pointer is dereferenced is a <code>panic</code>, but it feels  like <code>context deadline exceeded</code> is the real nemesis sometimes with how it is always the harbinger of the most awful Go bugs)</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 217446768,
            "is_me_message": false,
            "last_edit_timestamp": 1605900270,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "ian@theknown.net",
            "sender_full_name": "Ian Whitlock (S'13)",
            "sender_id": 2119,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "context deadline exceeded",
            "submessages": [],
            "timestamp": 1605899976,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/c6a4682e6a46285de64c97c77b771481?d=identicon&version=1",
            "client": "website",
            "content": "<p>I feel like trying to put deadlines on things and time operations out at anything but the top level is a huge antipattern.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 217448962,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "ori@eigenstate.org",
            "sender_full_name": "Ori Dean Bernstein (he) (W2'20)",
            "sender_id": 255045,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "context deadline exceeded",
            "submessages": [],
            "timestamp": 1605901015,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/842e08a228d86d5163ac24f95b6a92d321fc7193?x=x&version=2",
            "client": "website",
            "content": "<p>yeah, I think that might be why the error is such a plague</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 217450234,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "ian@theknown.net",
            "sender_full_name": "Ian Whitlock (S'13)",
            "sender_id": 2119,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "context deadline exceeded",
            "submessages": [],
            "timestamp": 1605901679,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/842e08a228d86d5163ac24f95b6a92d321fc7193?x=x&version=2",
            "client": "website",
            "content": "<p>something about the context pattern in general just feels wrong</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 217450290,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "ian@theknown.net",
            "sender_full_name": "Ian Whitlock (S'13)",
            "sender_id": 2119,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "context deadline exceeded",
            "submessages": [],
            "timestamp": 1605901691,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/c6a4682e6a46285de64c97c77b771481?d=identicon&version=1",
            "client": "website",
            "content": "<p>yeah -- concurrent cancellations are fundamentally hard, though.</p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 217451026,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "ori@eigenstate.org",
            "sender_full_name": "Ori Dean Bernstein (he) (W2'20)",
            "sender_id": 255045,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "context deadline exceeded",
            "submessages": [],
            "timestamp": 1605902084,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/842e08a228d86d5163ac24f95b6a92d321fc7193?x=x&version=2",
            "client": "website",
            "content": "<p>for sure. What I have is a bunch of frustration over this error. What I don't have is a useful suggestion for a better design <span aria-label=\"joy\" class=\"emoji emoji-1f602\" role=\"img\" title=\"joy\">:joy:</span></p>",
            "content_type": "text/html",
            "display_recipient": "golang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 217452694,
            "is_me_message": false,
            "last_edit_timestamp": 1605902853,
            "reactions": [],
            "recipient_id": 22624,
            "sender_email": "ian@theknown.net",
            "sender_full_name": "Ian Whitlock (S'13)",
            "sender_id": 2119,
            "sender_realm_str": "recurse",
            "stream_id": 20275,
            "subject": "context deadline exceeded",
            "submessages": [],
            "timestamp": 1605902844,
            "topic_links": [],
            "type": "stream"
        }
    ],
    "msg": "",
    "result": "success"
}
