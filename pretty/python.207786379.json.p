{
    "anchor": 207786379,
    "found_anchor": true,
    "found_newest": true,
    "found_oldest": false,
    "history_limited": false,
    "messages": [
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/3c38f253217c1b67500972630b0e83e581de8880?x=x&version=4",
            "client": "ZulipMobile",
            "content": "<p>Thank you <span class=\"user-mention\" data-user-id=\"216353\">@Joannah Nanjekye (she) (SP2'19)</span> for your talk and these resources!</p>",
            "content_type": "text/html",
            "display_recipient": "python",
            "flags": [
                "read",
                "historical"
            ],
            "id": 207738709,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20338,
            "sender_email": "ariesunique@gmail.com",
            "sender_full_name": "Aiyana Brooks (she) (W2'20)",
            "sender_id": 255068,
            "sender_realm_str": "recurse",
            "stream_id": 19044,
            "subject": "Getting started with Python contributions",
            "submessages": [],
            "timestamp": 1598124531,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/65d6c64fa1f9d28ab178a7dda4cfb5e3d978dd5e?x=x&version=2",
            "client": "ZulipElectron",
            "content": "<p>Is anyone free now to pair on getting a python function call in a go server to work? I just have the one function I need access to, otherwise, I'd set up two servers, one for Python as well as Go. If not able to pair, maybe advise? I've got something along these lines working, but am not able to <code>json.Unmarshal</code> because I get some output from the import statement <code>cmd := exec.Command(\"python\", \"-c\", \"from ai.prediction import chatbot_response as chatbotResponse;\")</code> before I get to the function call <code>cmd = exec.Command(\"python\", \"-c\", \"print(chatbotResponse('What is her title?'))\")</code> I posted in the Go stream as well.</p>",
            "content_type": "text/html",
            "display_recipient": "python",
            "flags": [
                "read",
                "historical"
            ],
            "id": 207786379,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20338,
            "sender_email": "housker@gmail.com",
            "sender_full_name": "Adelle Housker (she) (W2'19)",
            "sender_id": 158595,
            "sender_realm_str": "recurse",
            "stream_id": 19044,
            "subject": "python called in go server",
            "submessages": [],
            "timestamp": 1598209057,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/8ef0cc9607b07f392f70560a43dbbb2d0efd6328?x=x&version=1",
            "client": "website",
            "content": "<p>Does anybody have practical experience using Numba? I'm seeing some magical-seeming performance gains relative to JAX/TF for some simple code, and I'm trying to figure out what's the catch</p>",
            "content_type": "text/html",
            "display_recipient": "python",
            "flags": [
                "read",
                "historical"
            ],
            "id": 208436375,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20338,
            "sender_email": "brian.kihoon.lee@gmail.com",
            "sender_full_name": "Brian Lee (F1'16)",
            "sender_id": 100043,
            "sender_realm_str": "recurse",
            "stream_id": 19044,
            "subject": "Numba limitations?",
            "submessages": [],
            "timestamp": 1598710998,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/8ef0cc9607b07f392f70560a43dbbb2d0efd6328?x=x&version=1",
            "client": "website",
            "content": "<p>in particular, jax.jit and tf.function have various constraints on how their jit caching works, in terms of what shapes are compatible / acceptable</p>",
            "content_type": "text/html",
            "display_recipient": "python",
            "flags": [
                "read",
                "historical"
            ],
            "id": 208436442,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20338,
            "sender_email": "brian.kihoon.lee@gmail.com",
            "sender_full_name": "Brian Lee (F1'16)",
            "sender_id": 100043,
            "sender_realm_str": "recurse",
            "stream_id": 19044,
            "subject": "Numba limitations?",
            "submessages": [],
            "timestamp": 1598711092,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/8ef0cc9607b07f392f70560a43dbbb2d0efd6328?x=x&version=1",
            "client": "website",
            "content": "<p>so I'm wondering if Numba is only achieving those speed gains by specializing to exact array dimensions, or something like that</p>",
            "content_type": "text/html",
            "display_recipient": "python",
            "flags": [
                "read",
                "historical"
            ],
            "id": 208436450,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20338,
            "sender_email": "brian.kihoon.lee@gmail.com",
            "sender_full_name": "Brian Lee (F1'16)",
            "sender_id": 100043,
            "sender_realm_str": "recurse",
            "stream_id": 19044,
            "subject": "Numba limitations?",
            "submessages": [],
            "timestamp": 1598711111,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/8ef0cc9607b07f392f70560a43dbbb2d0efd6328?x=x&version=1",
            "client": "website",
            "content": "<p>whereas TF/JAX have broader shape constraints and may suffer runtime dispatch overhead</p>",
            "content_type": "text/html",
            "display_recipient": "python",
            "flags": [
                "read",
                "historical"
            ],
            "id": 208436457,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20338,
            "sender_email": "brian.kihoon.lee@gmail.com",
            "sender_full_name": "Brian Lee (F1'16)",
            "sender_id": 100043,
            "sender_realm_str": "recurse",
            "stream_id": 19044,
            "subject": "Numba limitations?",
            "submessages": [],
            "timestamp": 1598711132,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/8ef0cc9607b07f392f70560a43dbbb2d0efd6328?x=x&version=1",
            "client": "website",
            "content": "<p>the answer could also just be that XLA hasn't been optimized for as long as LLVM/Numba have been optimized</p>",
            "content_type": "text/html",
            "display_recipient": "python",
            "flags": [
                "read",
                "historical"
            ],
            "id": 208436515,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20338,
            "sender_email": "brian.kihoon.lee@gmail.com",
            "sender_full_name": "Brian Lee (F1'16)",
            "sender_id": 100043,
            "sender_realm_str": "recurse",
            "stream_id": 19044,
            "subject": "Numba limitations?",
            "submessages": [],
            "timestamp": 1598711178,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/7857f26c1ef2e9bdbfa843f9087710f7?d=identicon&version=1",
            "client": "ZulipMobile",
            "content": "<p>For numerical code it\u2019s great, easy perf wins, for code that uses higher level python semantics more, it\u2019s not so great. I also found in the past that when it wasn\u2019t giving good performance it wasn\u2019t easy to see why. For your specific question I\u2019m not sure, it\u2019s possible, it might be helpful to see a specific example where you\u2019re seeing surprising performance gains.</p>",
            "content_type": "text/html",
            "display_recipient": "python",
            "flags": [
                "read",
                "historical"
            ],
            "id": 208436519,
            "is_me_message": false,
            "last_edit_timestamp": 1598711228,
            "reactions": [],
            "recipient_id": 20338,
            "sender_email": "nathan12343@gmail.com",
            "sender_full_name": "Nathan Goldbaum (he) (S1'19)",
            "sender_id": 221814,
            "sender_realm_str": "recurse",
            "stream_id": 19044,
            "subject": "Numba limitations?",
            "submessages": [],
            "timestamp": 1598711202,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/8ef0cc9607b07f392f70560a43dbbb2d0efd6328?x=x&version=1",
            "client": "website",
            "content": "<p>yeah, gimme a sec to push the code and a perf plot</p>",
            "content_type": "text/html",
            "display_recipient": "python",
            "flags": [
                "read",
                "historical"
            ],
            "id": 208436530,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20338,
            "sender_email": "brian.kihoon.lee@gmail.com",
            "sender_full_name": "Brian Lee (F1'16)",
            "sender_id": 100043,
            "sender_realm_str": "recurse",
            "stream_id": 19044,
            "subject": "Numba limitations?",
            "submessages": [],
            "timestamp": 1598711234,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/8ef0cc9607b07f392f70560a43dbbb2d0efd6328?x=x&version=1",
            "client": "website",
            "content": "<p><a href=\"https://github.com/brilee/python_pagerank\">https://github.com/brilee/python_pagerank</a><br>\n<a href=\"/user_uploads/13/EkCjHpYnmOQ3xdZ41L1VV-6K/visualization-2.png\">visualization-2.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/13/EkCjHpYnmOQ3xdZ41L1VV-6K/visualization-2.png\" title=\"visualization-2.png\"><img src=\"/user_uploads/13/EkCjHpYnmOQ3xdZ41L1VV-6K/visualization-2.png\"></a></div>",
            "content_type": "text/html",
            "display_recipient": "python",
            "flags": [
                "read",
                "historical"
            ],
            "id": 208436591,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20338,
            "sender_email": "brian.kihoon.lee@gmail.com",
            "sender_full_name": "Brian Lee (F1'16)",
            "sender_id": 100043,
            "sender_realm_str": "recurse",
            "stream_id": 19044,
            "subject": "Numba limitations?",
            "submessages": [],
            "timestamp": 1598711315,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/8ef0cc9607b07f392f70560a43dbbb2d0efd6328?x=x&version=1",
            "client": "website",
            "content": "<p>and yes, I stumbled through several layers of very cryptic stack traces before I got my numba to work</p>",
            "content_type": "text/html",
            "display_recipient": "python",
            "flags": [
                "read",
                "historical"
            ],
            "id": 208436741,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20338,
            "sender_email": "brian.kihoon.lee@gmail.com",
            "sender_full_name": "Brian Lee (F1'16)",
            "sender_id": 100043,
            "sender_realm_str": "recurse",
            "stream_id": 19044,
            "subject": "Numba limitations?",
            "submessages": [],
            "timestamp": 1598711532,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/8ef0cc9607b07f392f70560a43dbbb2d0efd6328?x=x&version=1",
            "client": "website",
            "content": "<p>it's funny because I worked on some of the stack trace rewriting niceties in tf.function/autograph and I can see that they're running into the same issues we'd run into</p>",
            "content_type": "text/html",
            "display_recipient": "python",
            "flags": [
                "read",
                "historical"
            ],
            "id": 208436751,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20338,
            "sender_email": "brian.kihoon.lee@gmail.com",
            "sender_full_name": "Brian Lee (F1'16)",
            "sender_id": 100043,
            "sender_realm_str": "recurse",
            "stream_id": 19044,
            "subject": "Numba limitations?",
            "submessages": [],
            "timestamp": 1598711560,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/7857f26c1ef2e9bdbfa843f9087710f7?d=identicon&version=1",
            "client": "ZulipMobile",
            "content": "<p>if you can read asm iirc there\u2019s a way to get numba to spit out the compiled version of the code to see exactly what it produced, just looking at the code you\u2019re doing purely numerical stuff with arrays, this is where numba does best and is able to apply the most high-level optimizations before handing the code to llvm</p>",
            "content_type": "text/html",
            "display_recipient": "python",
            "flags": [
                "read",
                "historical"
            ],
            "id": 208436913,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20338,
            "sender_email": "nathan12343@gmail.com",
            "sender_full_name": "Nathan Goldbaum (he) (S1'19)",
            "sender_id": 221814,
            "sender_realm_str": "recurse",
            "stream_id": 19044,
            "subject": "Numba limitations?",
            "submessages": [],
            "timestamp": 1598711788,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/8ef0cc9607b07f392f70560a43dbbb2d0efd6328?x=x&version=1",
            "client": "website",
            "content": "<p>do you know anything about how numba dispatches calls with varying shapes?</p>",
            "content_type": "text/html",
            "display_recipient": "python",
            "flags": [
                "read",
                "historical"
            ],
            "id": 208436932,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20338,
            "sender_email": "brian.kihoon.lee@gmail.com",
            "sender_full_name": "Brian Lee (F1'16)",
            "sender_id": 100043,
            "sender_realm_str": "recurse",
            "stream_id": 19044,
            "subject": "Numba limitations?",
            "submessages": [],
            "timestamp": 1598711850,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/8ef0cc9607b07f392f70560a43dbbb2d0efd6328?x=x&version=1",
            "client": "website",
            "content": "<p>e.g. let's say I have</p>\n<div class=\"codehilite\"><pre><span></span><code>@numba.njit\ndef f(x):\n  return x * 2\n\nf(np.ones((3, 5)))\nf(4)\n</code></pre></div>",
            "content_type": "text/html",
            "display_recipient": "python",
            "flags": [
                "read",
                "historical"
            ],
            "id": 208436992,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20338,
            "sender_email": "brian.kihoon.lee@gmail.com",
            "sender_full_name": "Brian Lee (F1'16)",
            "sender_id": 100043,
            "sender_realm_str": "recurse",
            "stream_id": 19044,
            "subject": "Numba limitations?",
            "submessages": [],
            "timestamp": 1598711887,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/7857f26c1ef2e9bdbfa843f9087710f7?d=identicon&version=1",
            "client": "ZulipMobile",
            "content": "<p>i think it\u2019s able to generate kernels that know how to optimally use CPU caches by e.g. appropriately selecting strides and chunks over the arrays, but not the details of that sorry, I bet you could ask for more details on e.g. <a href=\"https://numba.discourse.group\">their discourse</a></p>",
            "content_type": "text/html",
            "display_recipient": "python",
            "flags": [
                "read",
                "historical"
            ],
            "id": 208437018,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20338,
            "sender_email": "nathan12343@gmail.com",
            "sender_full_name": "Nathan Goldbaum (he) (S1'19)",
            "sender_id": 221814,
            "sender_realm_str": "recurse",
            "stream_id": 19044,
            "subject": "Numba limitations?",
            "submessages": [],
            "timestamp": 1598711976,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/8ef0cc9607b07f392f70560a43dbbb2d0efd6328?x=x&version=1",
            "client": "website",
            "content": "<p>ooh, thanks for the pointer - will check there</p>",
            "content_type": "text/html",
            "display_recipient": "python",
            "flags": [
                "read",
                "historical"
            ],
            "id": 208437069,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20338,
            "sender_email": "brian.kihoon.lee@gmail.com",
            "sender_full_name": "Brian Lee (F1'16)",
            "sender_id": 100043,
            "sender_realm_str": "recurse",
            "stream_id": 19044,
            "subject": "Numba limitations?",
            "submessages": [],
            "timestamp": 1598712012,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/8ef0cc9607b07f392f70560a43dbbb2d0efd6328?x=x&version=1",
            "client": "website",
            "content": "<p>well, after digging through the developer manual <a href=\"https://numba.pydata.org/numba-doc/dev/developer/index.html\">https://numba.pydata.org/numba-doc/dev/developer/index.html</a> I'm starting to be more and more convinced that numba is in fact that much better optimized than TF/JAX</p>",
            "content_type": "text/html",
            "display_recipient": "python",
            "flags": [
                "read",
                "historical"
            ],
            "id": 208437856,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20338,
            "sender_email": "brian.kihoon.lee@gmail.com",
            "sender_full_name": "Brian Lee (F1'16)",
            "sender_id": 100043,
            "sender_realm_str": "recurse",
            "stream_id": 19044,
            "subject": "Numba limitations?",
            "submessages": [],
            "timestamp": 1598713105,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/8ef0cc9607b07f392f70560a43dbbb2d0efd6328?x=x&version=1",
            "client": "website",
            "content": "<p>now I feel like I have to give the benchmark a go on GPUs to see if it's just an \"LLVM is optimized for CPU\" issue</p>",
            "content_type": "text/html",
            "display_recipient": "python",
            "flags": [
                "read",
                "historical"
            ],
            "id": 208437870,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20338,
            "sender_email": "brian.kihoon.lee@gmail.com",
            "sender_full_name": "Brian Lee (F1'16)",
            "sender_id": 100043,
            "sender_realm_str": "recurse",
            "stream_id": 19044,
            "subject": "Numba limitations?",
            "submessages": [],
            "timestamp": 1598713132,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/8ef0cc9607b07f392f70560a43dbbb2d0efd6328?x=x&version=1",
            "client": "website",
            "content": "<p>their docs are incredibly thorough and the source code pristine</p>",
            "content_type": "text/html",
            "display_recipient": "python",
            "flags": [
                "read",
                "historical"
            ],
            "id": 208437905,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20338,
            "sender_email": "brian.kihoon.lee@gmail.com",
            "sender_full_name": "Brian Lee (F1'16)",
            "sender_id": 100043,
            "sender_realm_str": "recurse",
            "stream_id": 19044,
            "subject": "Numba limitations?",
            "submessages": [],
            "timestamp": 1598713184,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/d16cd71b27dfd2af0f84e16276c00b61314db772?x=x&version=3",
            "client": "ZulipElectron",
            "content": "<p>hi, I'm having a weird issue with django and while I have a workaround, it's very strange and I thought maybe someone would have an idea</p>",
            "content_type": "text/html",
            "display_recipient": "python",
            "flags": [
                "read",
                "historical"
            ],
            "id": 208459908,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20338,
            "sender_email": "to@akiva.email",
            "sender_full_name": "Akiva Leffert (he) (W2'19)",
            "sender_id": 198444,
            "sender_realm_str": "recurse",
            "stream_id": 19044,
            "subject": "django migration problem",
            "submessages": [],
            "timestamp": 1598744889,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/d16cd71b27dfd2af0f84e16276c00b61314db772?x=x&version=3",
            "client": "ZulipElectron",
            "content": "<p>I'm working on a codebase that I haven't touched in a while, though others have, and am seeing something odd. I have a migration, from early in the project years ago, that alters a field from a foreign key to a string. later there's a migration that adds a default string value. applying that second migration fails because somehow the field is still an integer. this migration used to work, last time I built this project over a year ago</p>",
            "content_type": "text/html",
            "display_recipient": "python",
            "flags": [
                "read",
                "historical"
            ],
            "id": 208459925,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20338,
            "sender_email": "to@akiva.email",
            "sender_full_name": "Akiva Leffert (he) (W2'19)",
            "sender_id": 198444,
            "sender_realm_str": "recurse",
            "stream_id": 19044,
            "subject": "django migration problem",
            "submessages": [],
            "timestamp": 1598744983,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/d16cd71b27dfd2af0f84e16276c00b61314db772?x=x&version=3",
            "client": "ZulipElectron",
            "content": "<p>django is pretty good about this sort of thing so I'd be surprised if there was a behavior change here\u2014also I didn't see anything in any vaguely recent release notes</p>",
            "content_type": "text/html",
            "display_recipient": "python",
            "flags": [
                "read",
                "historical"
            ],
            "id": 208459975,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20338,
            "sender_email": "to@akiva.email",
            "sender_full_name": "Akiva Leffert (he) (W2'19)",
            "sender_id": 198444,
            "sender_realm_str": "recurse",
            "stream_id": 19044,
            "subject": "django migration problem",
            "submessages": [],
            "timestamp": 1598745043,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/d16cd71b27dfd2af0f84e16276c00b61314db772?x=x&version=3",
            "client": "ZulipElectron",
            "content": "<p>but the other strange thing is that the tests pass\u2014which I assume would be applying all the migrations</p>",
            "content_type": "text/html",
            "display_recipient": "python",
            "flags": [
                "read",
                "historical"
            ],
            "id": 208459979,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20338,
            "sender_email": "to@akiva.email",
            "sender_full_name": "Akiva Leffert (he) (W2'19)",
            "sender_id": 198444,
            "sender_realm_str": "recurse",
            "stream_id": 19044,
            "subject": "django migration problem",
            "submessages": [],
            "timestamp": 1598745049,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/d16cd71b27dfd2af0f84e16276c00b61314db772?x=x&version=3",
            "client": "ZulipElectron",
            "content": "<p>I was able to work around this by manually updating my old migrations to include a RunSQL migration to do the ALTER COLUMN, but that seems like a weird thing to have to do</p>",
            "content_type": "text/html",
            "display_recipient": "python",
            "flags": [
                "read",
                "historical"
            ],
            "id": 208459981,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20338,
            "sender_email": "to@akiva.email",
            "sender_full_name": "Akiva Leffert (he) (W2'19)",
            "sender_id": 198444,
            "sender_realm_str": "recurse",
            "stream_id": 19044,
            "subject": "django migration problem",
            "submessages": [],
            "timestamp": 1598745054,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/7dc1374e8307c45a20af92a81bd15fc1?d=identicon&version=1",
            "client": "website",
            "content": "<p>Weird indeed... here are some debug ideas:</p>\n<ol>\n<li>\n<p>What do you see if you run <code>select * from django_migrations;</code>  in the DB?   Is the int--&gt;str migration in there?   You can also run <code>./manage.py showmigrations</code> to confirm same info. [WHAT DJANGO THINKS DB REALITY IS]</p>\n</li>\n<li>\n<p>Also if you run <code>\\d  yourapp_yourmodel;</code> is your local DB, is it currently an int or a str?   [DB REALITY]</p>\n</li>\n<li>\n<p>Check what settings files you are using for local dev to make sure you are connecting to the expected DB (I often mess things up and use the wrong DJANGO_SETTINGS_MODULE.</p>\n</li>\n</ol>",
            "content_type": "text/html",
            "display_recipient": "python",
            "flags": [
                "read",
                "historical"
            ],
            "id": 208468229,
            "is_me_message": false,
            "last_edit_timestamp": 1598763127,
            "reactions": [],
            "recipient_id": 20338,
            "sender_email": "ivan.savov@gmail.com",
            "sender_full_name": "Ivan Savov (SP2'17)",
            "sender_id": 100772,
            "sender_realm_str": "recurse",
            "stream_id": 19044,
            "subject": "django migration problem",
            "submessages": [],
            "timestamp": 1598762358,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/7dc1374e8307c45a20af92a81bd15fc1?d=identicon&version=1",
            "client": "website",
            "content": "<p>In my experience too running django tests applies all the migrations available, so maybe you're just missing the int--&gt;str migration in your local DB.</p>",
            "content_type": "text/html",
            "display_recipient": "python",
            "flags": [
                "read",
                "historical"
            ],
            "id": 208468355,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20338,
            "sender_email": "ivan.savov@gmail.com",
            "sender_full_name": "Ivan Savov (SP2'17)",
            "sender_id": 100772,
            "sender_realm_str": "recurse",
            "stream_id": 19044,
            "subject": "django migration problem",
            "submessages": [],
            "timestamp": 1598762614,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/94a346b8b7e9d9af710e554f113b201887fc9bd6?x=x&version=2",
            "client": "website",
            "content": "<p>Hi! I don't have much experience deploying apps and there is probably a simple solution to this.. but I'm trying to deploy a flask app that uses the google sheets api and requires a credentials file. I'm not sure how to deploy it without exposing the credentials file.  Can anyone give any suggestions? I'm using AWS EC2.</p>\n<p>Also I've been setting all of my environment variables  manually using export VAR_NAME=var for each variable. Is there a way to set all at once with perhaps a bash script or something else?</p>",
            "content_type": "text/html",
            "display_recipient": "python",
            "flags": [
                "read",
                "historical"
            ],
            "id": 208763192,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20338,
            "sender_email": "pascalemariebell@gmail.com",
            "sender_full_name": "Pascale Bell (she) (S2'20)",
            "sender_id": 316754,
            "sender_realm_str": "recurse",
            "stream_id": 19044,
            "subject": "Deploying and secret files",
            "submessages": [],
            "timestamp": 1599004054,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/612c7c2a108d7850c62d1d2293a481aa42855408?x=x&version=2",
            "client": "website",
            "content": "<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n\n<p>Possibly irrelevant background information.</p>\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n\n<p>The way this is handled in cloud infra is to have a service that acts as a permissions barrier and hands your process the latest versions of the secrets on demand (amazon ec2 metadata service, and google compute's medata service). This lets your process drop secrets from memory as soon as they're not needed, and it allows your infra to rotate secrets transparently / outside-of your process. (eg. Change the DB password and then provide the new password to your process when your process next attempts access). [Edit: You don't use these metadata services directly. AWS's and Google's SDKs will talk to the metadata service for you.]</p>\n</div></div>\n\n<p>Feeding the credentials to your process on startup and keeping them in memory is fine. I think environment variables are a common, widely accepted, approach. Just keep in mind that envvars are easily readable from outside of your process. Depending on how they're passed to your process, they might even be readable by other users on the system. If you want to do it a different way, then writing secrets to your process's stdin handle at startup is probably safer than envvars.</p>\n<p>If you want to go the AWS way then I recommend <a href=\"https://aws.amazon.com/secrets-manager/\">AWS Secrets Manager</a> to store your secrets. Then, give read access to Secrets Manager to your EC2 Instance in its IAM policy. Then use the AWS SDK to read them at runtime. The AWS SDK will get the AWS creds to talk to Secrets Manager transparently when your process is run on the EC2 Instance (if curious about this, see background info above). You'll basically just be able to request them without any initialization, in a secure way, and pass them on to the Google Sheets API. [Edit: This requires a lot of pointing-and-clicking in the AWS console to set up. Alternatively, it requires terraform or cloudformation to set up using Infrastructure As Code (IAC) approaches. This complexity might not be worth your while! It depends on whether you want to learn a lot about AWS or just get it done.]</p>",
            "content_type": "text/html",
            "display_recipient": "python",
            "flags": [
                "read",
                "historical"
            ],
            "id": 208769069,
            "is_me_message": false,
            "last_edit_timestamp": 1599009885,
            "reactions": [
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "+1",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "stanley@zheng.nyc",
                        "full_name": "Stanley Zheng (they) (W1'19)",
                        "id": 100315
                    },
                    "user_id": 100315
                },
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "+1",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "travis@travish.com",
                        "full_name": "Travis Horton (he) (SP1'19)",
                        "id": 203425
                    },
                    "user_id": 203425
                },
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "+1",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "pascalemariebell@gmail.com",
                        "full_name": "Pascale Bell (she) (S2'20)",
                        "id": 316754
                    },
                    "user_id": 316754
                },
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "+1",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "ezzeri.esa@gmail.com",
                        "full_name": "Ezzeri Esa (he) (F1'20)",
                        "id": 327456
                    },
                    "user_id": 327456
                }
            ],
            "recipient_id": 20338,
            "sender_email": "PLRedmond@gmail.com",
            "sender_full_name": "Patrick Redmond (W'14)",
            "sender_id": 5014,
            "sender_realm_str": "recurse",
            "stream_id": 19044,
            "subject": "Deploying and secret files",
            "submessages": [],
            "timestamp": 1599009348,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/7dc1374e8307c45a20af92a81bd15fc1?d=identicon&version=1",
            "client": "website",
            "content": "<blockquote>\n<p>... export VAR_NAME=var ...  </p>\n</blockquote>\n<p>Yep. This is the easiest and most common way to do things. The assumption is you control the computer and not in a multi-user scenario (e.g. if other users on the computer they may be able to access env vars under /proc/{pid}/environ but usually not to worry about).</p>\n<blockquote>\n<p>Is there a way to set all at once with perhaps a bash script or something else?</p>\n</blockquote>\n<p>Yes, you can create a bash file and <code>source</code> it before running your server. I usually put those files in a directory called <code>credentials/</code> in the project root and make sure to .gitignore it to avoid adding to git, then manually put the info there.</p>\n<p>e.g. create <code>credentials/googlesheets.env</code> that contains </p>\n<div class=\"codehilite\"><pre><span></span><code>export VAR_NAME=val1\nexport VAR_NAME2=val2\n</code></pre></div>\n\n\n<p>then start your server as</p>\n<div class=\"codehilite\"><pre><span></span><code>&gt; source credentials/googlesheets.env\n&gt; flask run\n</code></pre></div>\n\n\n<p>if for some reason you need to run as a single line, you can run as follows:</p>\n<div class=\"codehilite\"><pre><span></span><code>&gt; source credentials/googlesheets.env &amp;&amp; flask run\n</code></pre></div>",
            "content_type": "text/html",
            "display_recipient": "python",
            "flags": [
                "read",
                "historical"
            ],
            "id": 208866784,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "2795",
                    "emoji_name": "plus",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "andrew.montalenti@gmail.com",
                        "full_name": "Andrew Montalenti (he) (m7'19)",
                        "id": 247727
                    },
                    "user_id": 247727
                },
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "+1",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "andrew.montalenti@gmail.com",
                        "full_name": "Andrew Montalenti (he) (m7'19)",
                        "id": 247727
                    },
                    "user_id": 247727
                },
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "+1",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "pascalemariebell@gmail.com",
                        "full_name": "Pascale Bell (she) (S2'20)",
                        "id": 316754
                    },
                    "user_id": 316754
                },
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "+1",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "travis@travish.com",
                        "full_name": "Travis Horton (he) (SP1'19)",
                        "id": 203425
                    },
                    "user_id": 203425
                },
                {
                    "emoji_code": "2795",
                    "emoji_name": "plus",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "PLRedmond@gmail.com",
                        "full_name": "Patrick Redmond (W'14)",
                        "id": 5014
                    },
                    "user_id": 5014
                }
            ],
            "recipient_id": 20338,
            "sender_email": "ivan.savov@gmail.com",
            "sender_full_name": "Ivan Savov (SP2'17)",
            "sender_id": 100772,
            "sender_realm_str": "recurse",
            "stream_id": 19044,
            "subject": "Deploying and secret files",
            "submessages": [],
            "timestamp": 1599071248,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/541aab26abf25ac195df55d7e6c0f2daf3f00c70?x=x&version=1",
            "client": "website",
            "content": "<p>If you like watching videos, <a href=\"https://twit.tv/shows/floss-weekly/episodes/594?autostart=false\">I just got interviewed on FLOSS Weekly about the pip work</a></p>",
            "content_type": "text/html",
            "display_recipient": "python",
            "flags": [
                "read",
                "historical"
            ],
            "id": 208954842,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20338,
            "sender_email": "sumanah@fastmail.com",
            "sender_full_name": "Sumana Harihareswara (she) (F2'14)",
            "sender_id": 2909,
            "sender_realm_str": "recurse",
            "stream_id": 19044,
            "subject": "pip",
            "submessages": [],
            "timestamp": 1599133878,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/541aab26abf25ac195df55d7e6c0f2daf3f00c70?x=x&version=1",
            "client": "website",
            "content": "<p><a href=\"https://twitter.com/TWiT/status/1301276397411930116\">https://twitter.com/TWiT/status/1301276397411930116</a></p>\n<div class=\"inline-preview-twitter\"><div class=\"twitter-tweet\"><a href=\"https://twitter.com/TWiT/status/1301276397411930116\"><img class=\"twitter-avatar\" src=\"https://pbs.twimg.com/profile_images/2230145587/TWiT_as_specd_normal.png\"></a><p>Fresh out of the podcast printer! Here's a brand new episode of \"FLOSS Weekly 594: PIP and the Python Package Index\" Subscribe and listen here&gt; <a href=\"https://t.co/ZwEZnPa17d\">https://bit.ly/3jEkCen</a></p><span>- TWiT Tech Podcasts (@TWiT)</span></div></div>",
            "content_type": "text/html",
            "display_recipient": "python",
            "flags": [
                "read",
                "historical"
            ],
            "id": 208954883,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20338,
            "sender_email": "sumanah@fastmail.com",
            "sender_full_name": "Sumana Harihareswara (she) (F2'14)",
            "sender_id": 2909,
            "sender_realm_str": "recurse",
            "stream_id": 19044,
            "subject": "pip",
            "submessages": [],
            "timestamp": 1599133910,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/5c9f6b47dcb9445449eefb07bc719483?d=identicon&version=1",
            "client": "ZulipElectron",
            "content": "<p>I watched it live, it was great!</p>",
            "content_type": "text/html",
            "display_recipient": "python",
            "flags": [
                "read",
                "historical"
            ],
            "id": 208954891,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20338,
            "sender_email": "vmehta94@gmail.com",
            "sender_full_name": "Vinayak Mehta (he) (F1'20)",
            "sender_id": 327359,
            "sender_realm_str": "recurse",
            "stream_id": 19044,
            "subject": "pip",
            "submessages": [],
            "timestamp": 1599133922,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/541aab26abf25ac195df55d7e6c0f2daf3f00c70?x=x&version=1",
            "client": "website",
            "content": "<p>Oh cool <span class=\"user-mention\" data-user-id=\"327359\">@Vinayak Mehta (he) (F1'20)</span> was there anything in particular you liked?</p>",
            "content_type": "text/html",
            "display_recipient": "python",
            "flags": [
                "read",
                "historical"
            ],
            "id": 208954971,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20338,
            "sender_email": "sumanah@fastmail.com",
            "sender_full_name": "Sumana Harihareswara (she) (F2'14)",
            "sender_id": 2909,
            "sender_realm_str": "recurse",
            "stream_id": 19044,
            "subject": "pip",
            "submessages": [],
            "timestamp": 1599133958,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/5c9f6b47dcb9445449eefb07bc719483?d=identicon&version=1",
            "client": "ZulipElectron",
            "content": "<p>Apart from the regular Python packaging stuff that I've also been reading about at other places, I loved it when you mentioned how the tech industry is showcased only with a few examples in pop culture, and how you talk about things (that aren't usually talked about) like open-source and licensing in your standup, for example in the one that you performed at a GSoC mentor summit IIRC! (I would love to watch those videos if they're available online!)</p>",
            "content_type": "text/html",
            "display_recipient": "python",
            "flags": [
                "read",
                "historical"
            ],
            "id": 208955350,
            "is_me_message": false,
            "last_edit_timestamp": 1599134316,
            "reactions": [],
            "recipient_id": 20338,
            "sender_email": "vmehta94@gmail.com",
            "sender_full_name": "Vinayak Mehta (he) (F1'20)",
            "sender_id": 327359,
            "sender_realm_str": "recurse",
            "stream_id": 19044,
            "subject": "pip",
            "submessages": [],
            "timestamp": 1599134183,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/5c9f6b47dcb9445449eefb07bc719483?d=identicon&version=1",
            "client": "ZulipElectron",
            "content": "<p>I think I joined pretty late and missed the first half of the live show, I'll watch that part later!</p>",
            "content_type": "text/html",
            "display_recipient": "python",
            "flags": [
                "read",
                "historical"
            ],
            "id": 208955873,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20338,
            "sender_email": "vmehta94@gmail.com",
            "sender_full_name": "Vinayak Mehta (he) (F1'20)",
            "sender_id": 327359,
            "sender_realm_str": "recurse",
            "stream_id": 19044,
            "subject": "pip",
            "submessages": [],
            "timestamp": 1599134509,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/541aab26abf25ac195df55d7e6c0f2daf3f00c70?x=x&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-id=\"327359\">@Vinayak Mehta (he) (F1'20)</span> thanks! Good to know! You can watch some of my past stand-up <a href=\"https://www.harihareswara.net/talks.html#stand-up-comedy\">via these links on my Talks page</a>. Still waiting for the GUADEC video.</p>\n<p>And within <a href=\"https://www.harihareswara.net/talks.html#tech-talks\">this list of tech and tech-adjacent talks</a> I think you might also be interested in the plays I did with <span class=\"user-mention\" data-user-id=\"100450\">@Jason Owen (SP2'19)</span> [not subscribed].</p>",
            "content_type": "text/html",
            "display_recipient": "python",
            "flags": [
                "read",
                "historical"
            ],
            "id": 208956392,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20338,
            "sender_email": "sumanah@fastmail.com",
            "sender_full_name": "Sumana Harihareswara (she) (F2'14)",
            "sender_id": 2909,
            "sender_realm_str": "recurse",
            "stream_id": 19044,
            "subject": "pip",
            "submessages": [],
            "timestamp": 1599134815,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/541aab26abf25ac195df55d7e6c0f2daf3f00c70?x=x&version=1",
            "client": "website",
            "content": "<p>Plus <a href=\"https://www.harihareswara.net/ArtofPython2019/#why\">the \"what I thought was missing\" section of my Art of Python writeup</a>.</p>",
            "content_type": "text/html",
            "display_recipient": "python",
            "flags": [
                "read",
                "historical"
            ],
            "id": 208956465,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20338,
            "sender_email": "sumanah@fastmail.com",
            "sender_full_name": "Sumana Harihareswara (she) (F2'14)",
            "sender_id": 2909,
            "sender_realm_str": "recurse",
            "stream_id": 19044,
            "subject": "pip",
            "submessages": [],
            "timestamp": 1599134869,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/5c9f6b47dcb9445449eefb07bc719483?d=identicon&version=1",
            "client": "ZulipElectron",
            "content": "<p>Thanks for pointing me to the links! I'll start going through them one by one <span aria-label=\"grinning\" class=\"emoji emoji-1f600\" role=\"img\" title=\"grinning\">:grinning:</span></p>\n<p>I loved The Art of Python at PyCon 2019! (though I had to hop off to the Friday dinner (FOMO) which was happening at the same time just before Dr. Russell Keith-Magee's performance, I wish I could've been at both places at the same time)</p>",
            "content_type": "text/html",
            "display_recipient": "python",
            "flags": [
                "read",
                "historical"
            ],
            "id": 208958668,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20338,
            "sender_email": "vmehta94@gmail.com",
            "sender_full_name": "Vinayak Mehta (he) (F1'20)",
            "sender_id": 327359,
            "sender_realm_str": "recurse",
            "stream_id": 19044,
            "subject": "pip",
            "submessages": [],
            "timestamp": 1599136094,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/5c9f6b47dcb9445449eefb07bc719483?d=identicon&version=1",
            "client": "ZulipElectron",
            "content": "<p>I'm so glad I found this again just now: <a href=\"https://echan.dreamwidth.org/73641.html\">https://echan.dreamwidth.org/73641.html</a></p>",
            "content_type": "text/html",
            "display_recipient": "python",
            "flags": [
                "read",
                "historical"
            ],
            "id": 208959151,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20338,
            "sender_email": "vmehta94@gmail.com",
            "sender_full_name": "Vinayak Mehta (he) (F1'20)",
            "sender_id": 327359,
            "sender_realm_str": "recurse",
            "stream_id": 19044,
            "subject": "pip",
            "submessages": [],
            "timestamp": 1599136343,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/541aab26abf25ac195df55d7e6c0f2daf3f00c70?x=x&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention silent\" data-user-id=\"101322\">Paul Gowder (S2'17)</span> <a href=\"#narrow/stream/19044-python/topic/Python.20environments.20on.20macOS.3F/near/196931648\">said</a>:</p>\n<blockquote>\n<p>Thank you, <span class=\"user-mention silent\" data-user-id=\"2909\">Sumana Harihareswara (she) (F2'14)</span> , for helping the community out with the situation!  You think, given the prominence of python among languages in, like, basically every company, that some big company (Dropbox, yoo-hoo, where are youuuuu?) would find it in their self-interest to just fund a big packaging push.</p>\n</blockquote>\n<p>I <a href=\"https://www.harihareswara.net/sumana/2020/09/08/0\">wrote a blog post about the 15 hours of volunteering it took</a> to revitalize Pipenv -- feel free to pass that around at your employers in case y'all depend on Python and want to rejuvenate more of the ecosystem.</p>",
            "content_type": "text/html",
            "display_recipient": "python",
            "flags": [
                "read",
                "historical"
            ],
            "id": 209843888,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20338,
            "sender_email": "sumanah@fastmail.com",
            "sender_full_name": "Sumana Harihareswara (she) (F2'14)",
            "sender_id": 2909,
            "sender_realm_str": "recurse",
            "stream_id": 19044,
            "subject": "Python environments on macOS?",
            "submessages": [],
            "timestamp": 1599864129,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/8883f6051fe385c3b03f16804c838d4c6b10e4bc?x=x&version=2",
            "client": "website",
            "content": "<p>I've had a habit of having my tests in the same directory as my files, and just started separating them out.</p>\n<div class=\"codehilite\"><pre><span></span><code>|-- src\n|   |--__init__.py\n|   |--run.py\n|-- test\n    |--__init__.py\n    |--test_run.py\n</code></pre></div>",
            "content_type": "text/html",
            "display_recipient": "python",
            "flags": [
                "read",
                "historical"
            ],
            "id": 210331133,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20338,
            "sender_email": "ezzeri.esa@gmail.com",
            "sender_full_name": "Ezzeri Esa (he) (F1'20)",
            "sender_id": 327456,
            "sender_realm_str": "recurse",
            "stream_id": 19044,
            "subject": "pytest directory",
            "submessages": [],
            "timestamp": 1600297908,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/8883f6051fe385c3b03f16804c838d4c6b10e4bc?x=x&version=2",
            "client": "website",
            "content": "<p>how do i import <code>run.py</code> from <code>test_run.py</code>? i tried adding a <code>conftest.py</code> but doesn't seem to be working</p>",
            "content_type": "text/html",
            "display_recipient": "python",
            "flags": [
                "read",
                "historical"
            ],
            "id": 210331196,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20338,
            "sender_email": "ezzeri.esa@gmail.com",
            "sender_full_name": "Ezzeri Esa (he) (F1'20)",
            "sender_id": 327456,
            "sender_realm_str": "recurse",
            "stream_id": 19044,
            "subject": "pytest directory",
            "submessages": [],
            "timestamp": 1600297942,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/7857f26c1ef2e9bdbfa843f9087710f7?d=identicon&version=1",
            "client": "ZulipMobile",
            "content": "<p>you need to install your package with e.g. pip</p>",
            "content_type": "text/html",
            "display_recipient": "python",
            "flags": [
                "read",
                "historical"
            ],
            "id": 210333169,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20338,
            "sender_email": "nathan12343@gmail.com",
            "sender_full_name": "Nathan Goldbaum (he) (S1'19)",
            "sender_id": 221814,
            "sender_realm_str": "recurse",
            "stream_id": 19044,
            "subject": "pytest directory",
            "submessages": [],
            "timestamp": 1600299695,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/7857f26c1ef2e9bdbfa843f9087710f7?d=identicon&version=1",
            "client": "ZulipMobile",
            "content": "<p>using tox to automate this helps me</p>",
            "content_type": "text/html",
            "display_recipient": "python",
            "flags": [
                "read",
                "historical"
            ],
            "id": 210333177,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20338,
            "sender_email": "nathan12343@gmail.com",
            "sender_full_name": "Nathan Goldbaum (he) (S1'19)",
            "sender_id": 221814,
            "sender_realm_str": "recurse",
            "stream_id": 19044,
            "subject": "pytest directory",
            "submessages": [],
            "timestamp": 1600299706,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/7857f26c1ef2e9bdbfa843f9087710f7?d=identicon&version=1",
            "client": "ZulipMobile",
            "content": "<p>you need a <code>setup.py</code>, <code>setup.cfg</code>, or <code>pyproject.toml</code> to define metadata for your project</p>",
            "content_type": "text/html",
            "display_recipient": "python",
            "flags": [
                "read",
                "historical"
            ],
            "id": 210333285,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20338,
            "sender_email": "nathan12343@gmail.com",
            "sender_full_name": "Nathan Goldbaum (he) (S1'19)",
            "sender_id": 221814,
            "sender_realm_str": "recurse",
            "stream_id": 19044,
            "subject": "pytest directory",
            "submessages": [],
            "timestamp": 1600299788,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/6ddd1dac23c28efe065d6b7cd0fdf91077132fa7?x=x&version=3",
            "client": "website",
            "content": "<p>I've done this before with a <code>conftest.py</code> file. Here's <a href=\"https://github.com/capnfabs/emoji-haiku\">a repo</a> where I'm using that. I think adding that one file was sufficient, but maybe you have to be in the root directory when you run <code>py.test</code> as well?</p>",
            "content_type": "text/html",
            "display_recipient": "python",
            "flags": [
                "read",
                "historical"
            ],
            "id": 210334014,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20338,
            "sender_email": "fabi@hey.com",
            "sender_full_name": "Fabian Tamp (he) (W2'20)",
            "sender_id": 255053,
            "sender_realm_str": "recurse",
            "stream_id": 19044,
            "subject": "pytest directory",
            "submessages": [],
            "timestamp": 1600300403,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/8883f6051fe385c3b03f16804c838d4c6b10e4bc?x=x&version=2",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-id=\"255053\">@Fabian Tamp (he) (W2'20)</span> thanks! this works.</p>\n<p>interesting. it only seems to work when i have <code>conftest.py</code> in root but not the in <code>src</code> (calling the test in both cases from root)</p>",
            "content_type": "text/html",
            "display_recipient": "python",
            "flags": [
                "read",
                "historical"
            ],
            "id": 210335582,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "14067",
                    "emoji_name": "thinking_face_3d",
                    "reaction_type": "realm_emoji",
                    "user": {
                        "email": "fabi@hey.com",
                        "full_name": "Fabian Tamp (he) (W2'20)",
                        "id": 255053
                    },
                    "user_id": 255053
                }
            ],
            "recipient_id": 20338,
            "sender_email": "ezzeri.esa@gmail.com",
            "sender_full_name": "Ezzeri Esa (he) (F1'20)",
            "sender_id": 327456,
            "sender_realm_str": "recurse",
            "stream_id": 19044,
            "subject": "pytest directory",
            "submessages": [],
            "timestamp": 1600301935,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/8883f6051fe385c3b03f16804c838d4c6b10e4bc?x=x&version=2",
            "client": "website",
            "content": "<p>so i have <code>from src import run</code> from the inside <code>test_run.py</code></p>",
            "content_type": "text/html",
            "display_recipient": "python",
            "flags": [
                "read",
                "historical"
            ],
            "id": 210335609,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20338,
            "sender_email": "ezzeri.esa@gmail.com",
            "sender_full_name": "Ezzeri Esa (he) (F1'20)",
            "sender_id": 327456,
            "sender_realm_str": "recurse",
            "stream_id": 19044,
            "subject": "pytest directory",
            "submessages": [],
            "timestamp": 1600301977,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/8883f6051fe385c3b03f16804c838d4c6b10e4bc?x=x&version=2",
            "client": "website",
            "content": "<p>I had a quick look at algebraic data types and tried to see if i could implement something similar in Python. here's the code in Rust:<br>\n<a href=\"https://blog.softwaremill.com/algebraic-data-types-in-four-languages-858788043d4e\">https://blog.softwaremill.com/algebraic-data-types-in-four-languages-858788043d4e</a></p>\n<div class=\"codehilite\"><pre><span></span><code>enum Tree&lt;T&gt; {\n    Empty,\n    Node(T, Box&lt;Tree&lt;T&gt;&gt;, Box&lt;Tree&lt;T&gt;&gt;)\n}\n</code></pre></div>",
            "content_type": "text/html",
            "display_recipient": "python",
            "flags": [
                "read",
                "historical"
            ],
            "id": 210565002,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20338,
            "sender_email": "ezzeri.esa@gmail.com",
            "sender_full_name": "Ezzeri Esa (he) (F1'20)",
            "sender_id": 327456,
            "sender_realm_str": "recurse",
            "stream_id": 19044,
            "subject": "algebraic data types",
            "submessages": [],
            "timestamp": 1600457269,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/8883f6051fe385c3b03f16804c838d4c6b10e4bc?x=x&version=2",
            "client": "website",
            "content": "<p>This is how far I got in Python</p>\n<div class=\"codehilite\"><pre><span></span><code>from typing import Any, Generic, Optional, TypeVar, Union\nfrom enum import Enum\n\nT = TypeVar(&#39;T&#39;)\n\nclass Node(Generic[T]):\n    def __init__(self, value=None, left=None, right=None):\n        # type: (Optional[T], Optional[&#39;Tree[T]&#39;], Optional[&#39;Tree[T]&#39;]) -&gt; None\n        self.value = value\n        self.left = left\n        self.right = right\n\nTree = Union[None, Node[T, Tree[T], Tree[T]]]\n</code></pre></div>",
            "content_type": "text/html",
            "display_recipient": "python",
            "flags": [
                "read",
                "historical"
            ],
            "id": 210565013,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20338,
            "sender_email": "ezzeri.esa@gmail.com",
            "sender_full_name": "Ezzeri Esa (he) (F1'20)",
            "sender_id": 327456,
            "sender_realm_str": "recurse",
            "stream_id": 19044,
            "subject": "algebraic data types",
            "submessages": [],
            "timestamp": 1600457278,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/8883f6051fe385c3b03f16804c838d4c6b10e4bc?x=x&version=2",
            "client": "website",
            "content": "<p>running the Python code gave me an error, presume there isn't a way to get it work?</p>",
            "content_type": "text/html",
            "display_recipient": "python",
            "flags": [
                "read",
                "historical"
            ],
            "id": 210565093,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20338,
            "sender_email": "ezzeri.esa@gmail.com",
            "sender_full_name": "Ezzeri Esa (he) (F1'20)",
            "sender_id": 327456,
            "sender_realm_str": "recurse",
            "stream_id": 19044,
            "subject": "algebraic data types",
            "submessages": [],
            "timestamp": 1600457312,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/c6a4682e6a46285de64c97c77b771481?d=identicon&version=1",
            "client": "website",
            "content": "<p>This works for me:</p>\n<div class=\"codehilite\"><pre><span></span><code>from typing import Any, Generic, Optional, TypeVar, Union\nfrom enum import Enum\n\nT = TypeVar(&#39;T&#39;)\nU = TypeVar(&#39;U&#39;)\nV = TypeVar(&#39;V&#39;)\n\nclass Node(Generic[T, U, V]):\n    def __init__(self, value=None, left=None, right=None):\n        # type: (Optional[T], Optional[&#39;Tree[T]&#39;], Optional[&#39;Tree[T]&#39;]) -&gt; None\n        self.value = value\n        self.left = left\n        self.right = right\n\nTree = Union[None, Node[T, Tree[T], Tree[T]]]\n</code></pre></div>",
            "content_type": "text/html",
            "display_recipient": "python",
            "flags": [
                "read",
                "historical"
            ],
            "id": 210567049,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20338,
            "sender_email": "ori@eigenstate.org",
            "sender_full_name": "Ori Dean Bernstein (he) (W2'20)",
            "sender_id": 255045,
            "sender_realm_str": "recurse",
            "stream_id": 19044,
            "subject": "algebraic data types",
            "submessages": [],
            "timestamp": 1600458429,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/c6a4682e6a46285de64c97c77b771481?d=identicon&version=1",
            "client": "website",
            "content": "<p>haven't messed around much with python typing, so I don't know if this is the best way to do it (probably not)</p>",
            "content_type": "text/html",
            "display_recipient": "python",
            "flags": [
                "read",
                "historical"
            ],
            "id": 210567685,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20338,
            "sender_email": "ori@eigenstate.org",
            "sender_full_name": "Ori Dean Bernstein (he) (W2'20)",
            "sender_id": 255045,
            "sender_realm_str": "recurse",
            "stream_id": 19044,
            "subject": "algebraic data types",
            "submessages": [],
            "timestamp": 1600458731,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/c6a4682e6a46285de64c97c77b771481?d=identicon&version=1",
            "client": "website",
            "content": "<p>but you're passing 3 types to Node, but you said it only has one type var</p>",
            "content_type": "text/html",
            "display_recipient": "python",
            "flags": [
                "read",
                "historical"
            ],
            "id": 210567700,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20338,
            "sender_email": "ori@eigenstate.org",
            "sender_full_name": "Ori Dean Bernstein (he) (W2'20)",
            "sender_id": 255045,
            "sender_realm_str": "recurse",
            "stream_id": 19044,
            "subject": "algebraic data types",
            "submessages": [],
            "timestamp": 1600458742,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/c6a4682e6a46285de64c97c77b771481?d=identicon&version=1",
            "client": "website",
            "content": "<p>Actually, what you <em>PROBABLY</em> want:</p>\n<div class=\"codehilite\"><pre><span></span><code>from typing import Any, Generic, Optional, TypeVar, Union\nfrom enum import Enum\n\nT = TypeVar(&#39;T&#39;)\n\nclass Node(Generic[T]):\n    C = Optional[Tree[T]]\n    def __init__(self, value: T, left: C, right: C) -&gt; None:\n        # type: (Optional[T], Optional[&#39;Tree[T]&#39;], Optional[&#39;Tree[T]&#39;]) -&gt; None\n        self.value = value\n        self.left = left\n        self.right = right\n\nTree = Union[None, Node[T]]\n</code></pre></div>",
            "content_type": "text/html",
            "display_recipient": "python",
            "flags": [
                "read",
                "historical"
            ],
            "id": 210568209,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20338,
            "sender_email": "ori@eigenstate.org",
            "sender_full_name": "Ori Dean Bernstein (he) (W2'20)",
            "sender_id": 255045,
            "sender_realm_str": "recurse",
            "stream_id": 19044,
            "subject": "algebraic data types",
            "submessages": [],
            "timestamp": 1600459026,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/c6a4682e6a46285de64c97c77b771481?d=identicon&version=1",
            "client": "website",
            "content": "<p>though, the 'Tree  = Union[None, Node[T]]' is actually just a hand-rolled optional.</p>",
            "content_type": "text/html",
            "display_recipient": "python",
            "flags": [
                "read",
                "historical"
            ],
            "id": 210568358,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20338,
            "sender_email": "ori@eigenstate.org",
            "sender_full_name": "Ori Dean Bernstein (he) (W2'20)",
            "sender_id": 255045,
            "sender_realm_str": "recurse",
            "stream_id": 19044,
            "subject": "algebraic data types",
            "submessages": [],
            "timestamp": 1600459090,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/c6a4682e6a46285de64c97c77b771481?d=identicon&version=1",
            "client": "website",
            "content": "<p>so, you can probably pare down to:</p>\n<div class=\"codehilite\"><pre><span></span><code>from typing import Any, Generic, Optional, TypeVar, Union\nfrom enum import Enum\n\nT = TypeVar(&#39;T&#39;)\n\nclass Node(Generic[T]):\n    C = Tree[T]\n    def __init__(self, value: T, left: C, right: C) -&gt; None:\n        # type: (Optional[T], Optional[&#39;Tree[T]&#39;], Optional[&#39;Tree[T]&#39;]) -&gt; None\n        self.value = value\n        self.left = left\n        self.right = right\n\nTree = Optional[Node[T]]\n</code></pre></div>",
            "content_type": "text/html",
            "display_recipient": "python",
            "flags": [
                "read",
                "historical"
            ],
            "id": 210568448,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20338,
            "sender_email": "ori@eigenstate.org",
            "sender_full_name": "Ori Dean Bernstein (he) (W2'20)",
            "sender_id": 255045,
            "sender_realm_str": "recurse",
            "stream_id": 19044,
            "subject": "algebraic data types",
            "submessages": [],
            "timestamp": 1600459144,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/8883f6051fe385c3b03f16804c838d4c6b10e4bc?x=x&version=2",
            "client": "website",
            "content": "<p>hmm... annoyingly i'm getting a <code>NameError: name 'Tree' is not defined</code></p>",
            "content_type": "text/html",
            "display_recipient": "python",
            "flags": [
                "read",
                "historical"
            ],
            "id": 210568913,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20338,
            "sender_email": "ezzeri.esa@gmail.com",
            "sender_full_name": "Ezzeri Esa (he) (F1'20)",
            "sender_id": 327456,
            "sender_realm_str": "recurse",
            "stream_id": 19044,
            "subject": "algebraic data types",
            "submessages": [],
            "timestamp": 1600459367,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/8883f6051fe385c3b03f16804c838d4c6b10e4bc?x=x&version=2",
            "client": "website",
            "content": "<p>what Python version are you using?</p>",
            "content_type": "text/html",
            "display_recipient": "python",
            "flags": [
                "read",
                "historical"
            ],
            "id": 210568931,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20338,
            "sender_email": "ezzeri.esa@gmail.com",
            "sender_full_name": "Ezzeri Esa (he) (F1'20)",
            "sender_id": 327456,
            "sender_realm_str": "recurse",
            "stream_id": 19044,
            "subject": "algebraic data types",
            "submessages": [],
            "timestamp": 1600459378,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/c6a4682e6a46285de64c97c77b771481?d=identicon&version=1",
            "client": "website",
            "content": "<p>3.7.9</p>",
            "content_type": "text/html",
            "display_recipient": "python",
            "flags": [
                "read",
                "historical"
            ],
            "id": 210570263,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20338,
            "sender_email": "ori@eigenstate.org",
            "sender_full_name": "Ori Dean Bernstein (he) (W2'20)",
            "sender_id": 255045,
            "sender_realm_str": "recurse",
            "stream_id": 19044,
            "subject": "algebraic data types",
            "submessages": [],
            "timestamp": 1600460051,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/c6a4682e6a46285de64c97c77b771481?d=identicon&version=1",
            "client": "website",
            "content": "<p>oh.</p>",
            "content_type": "text/html",
            "display_recipient": "python",
            "flags": [
                "read",
                "historical"
            ],
            "id": 210570315,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20338,
            "sender_email": "ori@eigenstate.org",
            "sender_full_name": "Ori Dean Bernstein (he) (W2'20)",
            "sender_id": 255045,
            "sender_realm_str": "recurse",
            "stream_id": 19044,
            "subject": "algebraic data types",
            "submessages": [],
            "timestamp": 1600460084,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/c6a4682e6a46285de64c97c77b771481?d=identicon&version=1",
            "client": "website",
            "content": "<p>shit, I get that too -- I had stale repl state from trying things out, so there was already an incorrectly defined Tree in scope.</p>",
            "content_type": "text/html",
            "display_recipient": "python",
            "flags": [
                "read",
                "historical"
            ],
            "id": 210570328,
            "is_me_message": false,
            "last_edit_timestamp": 1600460218,
            "reactions": [],
            "recipient_id": 20338,
            "sender_email": "ori@eigenstate.org",
            "sender_full_name": "Ori Dean Bernstein (he) (W2'20)",
            "sender_id": 255045,
            "sender_realm_str": "recurse",
            "stream_id": 19044,
            "subject": "algebraic data types",
            "submessages": [],
            "timestamp": 1600460088,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/c6a4682e6a46285de64c97c77b771481?d=identicon&version=1",
            "client": "website",
            "content": "<p>was why I didn't get an error when I was pasting it in.</p>",
            "content_type": "text/html",
            "display_recipient": "python",
            "flags": [
                "read",
                "historical"
            ],
            "id": 210570332,
            "is_me_message": false,
            "last_edit_timestamp": 1600460234,
            "reactions": [],
            "recipient_id": 20338,
            "sender_email": "ori@eigenstate.org",
            "sender_full_name": "Ori Dean Bernstein (he) (W2'20)",
            "sender_id": 255045,
            "sender_realm_str": "recurse",
            "stream_id": 19044,
            "subject": "algebraic data types",
            "submessages": [],
            "timestamp": 1600460094,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/c6a4682e6a46285de64c97c77b771481?d=identicon&version=1",
            "client": "website",
            "content": "<p>forward references should solve that: <a href=\"https://www.python.org/dev/peps/pep-0484/#forward-references\">https://www.python.org/dev/peps/pep-0484/#forward-references</a></p>",
            "content_type": "text/html",
            "display_recipient": "python",
            "flags": [
                "read",
                "historical"
            ],
            "id": 210570405,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20338,
            "sender_email": "ori@eigenstate.org",
            "sender_full_name": "Ori Dean Bernstein (he) (W2'20)",
            "sender_id": 255045,
            "sender_realm_str": "recurse",
            "stream_id": 19044,
            "subject": "algebraic data types",
            "submessages": [],
            "timestamp": 1600460140,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/c6a4682e6a46285de64c97c77b771481?d=identicon&version=1",
            "client": "website",
            "content": "<p>(god, typing in python is such a bolt-on :/)</p>",
            "content_type": "text/html",
            "display_recipient": "python",
            "flags": [
                "read",
                "historical"
            ],
            "id": 210570422,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20338,
            "sender_email": "ori@eigenstate.org",
            "sender_full_name": "Ori Dean Bernstein (he) (W2'20)",
            "sender_id": 255045,
            "sender_realm_str": "recurse",
            "stream_id": 19044,
            "subject": "algebraic data types",
            "submessages": [],
            "timestamp": 1600460152,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/8883f6051fe385c3b03f16804c838d4c6b10e4bc?x=x&version=2",
            "client": "website",
            "content": "<p>ah cool that works - thank you!</p>",
            "content_type": "text/html",
            "display_recipient": "python",
            "flags": [
                "read",
                "historical"
            ],
            "id": 210571190,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20338,
            "sender_email": "ezzeri.esa@gmail.com",
            "sender_full_name": "Ezzeri Esa (he) (F1'20)",
            "sender_id": 327456,
            "sender_realm_str": "recurse",
            "stream_id": 19044,
            "subject": "algebraic data types",
            "submessages": [],
            "timestamp": 1600460610,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/8883f6051fe385c3b03f16804c838d4c6b10e4bc?x=x&version=2",
            "client": "website",
            "content": "<p>wait, since we're able to do this, does this mean Python supports ADTs?</p>",
            "content_type": "text/html",
            "display_recipient": "python",
            "flags": [
                "read",
                "historical"
            ],
            "id": 210571332,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20338,
            "sender_email": "ezzeri.esa@gmail.com",
            "sender_full_name": "Ezzeri Esa (he) (F1'20)",
            "sender_id": 327456,
            "sender_realm_str": "recurse",
            "stream_id": 19044,
            "subject": "algebraic data types",
            "submessages": [],
            "timestamp": 1600460697,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/c6a4682e6a46285de64c97c77b771481?d=identicon&version=1",
            "client": "website",
            "content": "<p>depends on what you mean by 'supports'</p>",
            "content_type": "text/html",
            "display_recipient": "python",
            "flags": [
                "read",
                "historical"
            ],
            "id": 210574063,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20338,
            "sender_email": "ori@eigenstate.org",
            "sender_full_name": "Ori Dean Bernstein (he) (W2'20)",
            "sender_id": 255045,
            "sender_realm_str": "recurse",
            "stream_id": 19044,
            "subject": "algebraic data types",
            "submessages": [],
            "timestamp": 1600462418,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/c6a4682e6a46285de64c97c77b771481?d=identicon&version=1",
            "client": "website",
            "content": "<p>you can definitely shove some parts of them in.</p>",
            "content_type": "text/html",
            "display_recipient": "python",
            "flags": [
                "read",
                "historical"
            ],
            "id": 210574072,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20338,
            "sender_email": "ori@eigenstate.org",
            "sender_full_name": "Ori Dean Bernstein (he) (W2'20)",
            "sender_id": 255045,
            "sender_realm_str": "recurse",
            "stream_id": 19044,
            "subject": "algebraic data types",
            "submessages": [],
            "timestamp": 1600462425,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/097edbae0d41f8a5149c6ada6fd5c4941e572159?x=x&version=2",
            "client": "ZulipElectron",
            "content": "<p>If you'd like to learn more about Python internals, this app that displays Python source code and bytecode side-by-side might be interesting to you! <a href=\"https://github.com/JoshKarpel/dis-cli\">https://github.com/JoshKarpel/dis-cli</a></p>",
            "content_type": "text/html",
            "display_recipient": "python",
            "flags": [
                "read",
                "historical"
            ],
            "id": 210625086,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "2764",
                    "emoji_name": "heart",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "ezzeri.esa@gmail.com",
                        "full_name": "Ezzeri Esa (he) (F1'20)",
                        "id": 327456
                    },
                    "user_id": 327456
                }
            ],
            "recipient_id": 20338,
            "sender_email": "rprior@protonmail.com",
            "sender_full_name": "Ryan Prior (he) (F1'19)",
            "sender_id": 234256,
            "sender_realm_str": "recurse",
            "stream_id": 19044,
            "subject": "Python code & bytecode side-by-side",
            "submessages": [],
            "timestamp": 1600535635,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/097edbae0d41f8a5149c6ada6fd5c4941e572159?x=x&version=2",
            "client": "ZulipElectron",
            "content": "<p>If you want to store your secrets somewhere more secure than a <code>.env</code> file (like maybe your operating system keyring or a cloud-based secret store) you can use <a href=\"https://github.com/cyberark/summon\">Summon</a>: </p>\n<p>When you run <code>summon &lt;program&gt;</code>, it looks for a file called <code>secrets.yml</code> and fetches the secrets named there, then launches <code>&lt;program&gt;</code></p>\n<p>For example, suppose you're on your laptop and want to keep a Postgres password in your keyring, then use Summon to provide to Flask at runtime.</p>\n<p>First install Summon, keyring, and the keyring provider:</p>\n<div class=\"codehilite\"><pre><span></span><code>curl -sSL https://raw.githubusercontent.com/cyberark/summon/master/install.sh | bash\npip install keyring\ncurl https://raw.githubusercontent.com/cyberark/summon-keyring/master/ring.py | sudo tee /usr/local/lib/summon/ring.py\n</code></pre></div>\n\n\n<p>Put the password into your keyring:</p>\n<div class=\"codehilite\"><pre><span></span><code>keyring set summon postgres/password &lt;&lt;&lt;&quot;the-password&quot;\n</code></pre></div>\n\n\n<p>Write a <code>secrets.yml</code> like this:</p>\n<div class=\"codehilite\"><pre><span></span><code>DB_PASSWORD: !var postgres/password\n</code></pre></div>\n\n\n<p>Then run Flask using Summon:</p>\n<div class=\"codehilite\"><pre><span></span><code>summon -p ring.py flask run\n</code></pre></div>\n\n\n<p>Now Flask will have its <code>DB_PASSWORD</code> environment variable set with the secret from your keyring.</p>\n<p>If your local laptop keyring isn't what you had in mind, there's other providers for different use cases: <a href=\"https://cyberark.github.io/summon/#providers\">https://cyberark.github.io/summon/#providers</a></p>",
            "content_type": "text/html",
            "display_recipient": "python",
            "flags": [
                "read",
                "historical"
            ],
            "id": 210633433,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20338,
            "sender_email": "rprior@protonmail.com",
            "sender_full_name": "Ryan Prior (he) (F1'19)",
            "sender_id": 234256,
            "sender_realm_str": "recurse",
            "stream_id": 19044,
            "subject": "Deploying and secret files",
            "submessages": [],
            "timestamp": 1600546689,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/8883f6051fe385c3b03f16804c838d4c6b10e4bc?x=x&version=2",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-id=\"807\">@Tom Ballinger (he) (W'12)</span> Thanks for sharing this (naturally found it on HackerNews)! Curious to hear if you have any thoughts on RustPython re: Python in the browser.</p>\n<p><a href=\"http://ballingt.com/next-python\">http://ballingt.com/next-python</a></p>",
            "content_type": "text/html",
            "display_recipient": "python",
            "flags": [
                "read",
                "historical"
            ],
            "id": 210677323,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20338,
            "sender_email": "ezzeri.esa@gmail.com",
            "sender_full_name": "Ezzeri Esa (he) (F1'20)",
            "sender_id": 327456,
            "sender_realm_str": "recurse",
            "stream_id": 19044,
            "subject": "Waiting for the next python",
            "submessages": [],
            "timestamp": 1600624489,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/b4d94d953db52e1e7cfc3724b95a6dc906fa9d58?x=x&version=2",
            "client": "ZulipMobile",
            "content": "<p>Thanks for letting me know! I haven't followed RustPython in particular, but it seems reasonable!</p>",
            "content_type": "text/html",
            "display_recipient": "python",
            "flags": [
                "read",
                "historical"
            ],
            "id": 210682022,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "+1",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "ezzeri.esa@gmail.com",
                        "full_name": "Ezzeri Esa (he) (F1'20)",
                        "id": 327456
                    },
                    "user_id": 327456
                }
            ],
            "recipient_id": 20338,
            "sender_email": "me@ballingt.com",
            "sender_full_name": "Tom Ballinger (he) (W'12)",
            "sender_id": 807,
            "sender_realm_str": "recurse",
            "stream_id": 19044,
            "subject": "Waiting for the next python",
            "submessages": [],
            "timestamp": 1600631326,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/8883f6051fe385c3b03f16804c838d4c6b10e4bc?x=x&version=2",
            "client": "website",
            "content": "<p>I'm trying to get a toy example of patching return values from function calls to work, based the last time I used it:</p>\n<div class=\"codehilite\"><pre><span></span><code># me.py\n\ndef f1():\n    return 10\n\ndef f2():\n    return f1() * 2\n\n\n# test_me.py\n\nimport contextlib\nimport mock\n\nimport me\n\ndef test_mock():\n    with contextlib.ExitStack() as stack:\n        stack.enter_context(mock.patch(&quot;me.f1&quot;, return_value=1000))\n        assert me.f2() == 2000\n</code></pre></div>",
            "content_type": "text/html",
            "display_recipient": "python",
            "flags": [
                "read",
                "historical"
            ],
            "id": 210912021,
            "is_me_message": false,
            "last_edit_timestamp": 1600799233,
            "reactions": [],
            "recipient_id": 20338,
            "sender_email": "ezzeri.esa@gmail.com",
            "sender_full_name": "Ezzeri Esa (he) (F1'20)",
            "sender_id": 327456,
            "sender_realm_str": "recurse",
            "stream_id": 19044,
            "subject": "Patching function calls",
            "submessages": [],
            "timestamp": 1600799183,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/8883f6051fe385c3b03f16804c838d4c6b10e4bc?x=x&version=2",
            "client": "website",
            "content": "<p>There's something I'm missing but I can't seem to get it to work</p>",
            "content_type": "text/html",
            "display_recipient": "python",
            "flags": [
                "read",
                "historical"
            ],
            "id": 210912045,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20338,
            "sender_email": "ezzeri.esa@gmail.com",
            "sender_full_name": "Ezzeri Esa (he) (F1'20)",
            "sender_id": 327456,
            "sender_realm_str": "recurse",
            "stream_id": 19044,
            "subject": "Patching function calls",
            "submessages": [],
            "timestamp": 1600799203,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/8883f6051fe385c3b03f16804c838d4c6b10e4bc?x=x&version=2",
            "client": "website",
            "content": "<p>LOL i just wasted an hour. it turns out my <code>me.py</code> actually had to be patched as <code>src.me</code>. sigh :/</p>",
            "content_type": "text/html",
            "display_recipient": "python",
            "flags": [
                "read",
                "historical"
            ],
            "id": 210914644,
            "is_me_message": false,
            "last_edit_timestamp": 1600801190,
            "reactions": [
                {
                    "emoji_code": "1f605",
                    "emoji_name": "sweat_smile",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "fabi@hey.com",
                        "full_name": "Fabian Tamp (he) (W2'20)",
                        "id": 255053
                    },
                    "user_id": 255053
                }
            ],
            "recipient_id": 20338,
            "sender_email": "ezzeri.esa@gmail.com",
            "sender_full_name": "Ezzeri Esa (he) (F1'20)",
            "sender_id": 327456,
            "sender_realm_str": "recurse",
            "stream_id": 19044,
            "subject": "Patching function calls",
            "submessages": [],
            "timestamp": 1600800507,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/8883f6051fe385c3b03f16804c838d4c6b10e4bc?x=x&version=2",
            "client": "website",
            "content": "<p>fun times</p>",
            "content_type": "text/html",
            "display_recipient": "python",
            "flags": [
                "read",
                "historical"
            ],
            "id": 210914675,
            "is_me_message": false,
            "last_edit_timestamp": 1600800530,
            "reactions": [],
            "recipient_id": 20338,
            "sender_email": "ezzeri.esa@gmail.com",
            "sender_full_name": "Ezzeri Esa (he) (F1'20)",
            "sender_id": 327456,
            "sender_realm_str": "recurse",
            "stream_id": 19044,
            "subject": "Patching function calls",
            "submessages": [],
            "timestamp": 1600800525,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/5ac24ef595f7d1cd016bc3de24f78e60?d=identicon&version=1",
            "client": "ZulipElectron",
            "content": "<p>haha, I was going to say I just ran this and it seemed to work fine</p>",
            "content_type": "text/html",
            "display_recipient": "python",
            "flags": [
                "read",
                "historical"
            ],
            "id": 210914863,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20338,
            "sender_email": "simon@simonmweber.com",
            "sender_full_name": "Simon Weber (he) (S'13)",
            "sender_id": 2111,
            "sender_realm_str": "recurse",
            "stream_id": 19044,
            "subject": "Patching function calls",
            "submessages": [],
            "timestamp": 1600800608,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/29581c8174d213b28a7fd1d59b1ce0d8?d=identicon&version=1",
            "client": "website",
            "content": "<p><del>Hi! I'm thinking of modifying cpython to add tail recursion to the interpreter and was wondering if anyone here was familiar with the python internals?</del> Looks like I posted this to the wrong stream! Still learning Zulip!</p>",
            "content_type": "text/html",
            "display_recipient": "python",
            "flags": [
                "read",
                "historical"
            ],
            "id": 211042169,
            "is_me_message": false,
            "last_edit_timestamp": 1600885114,
            "reactions": [],
            "recipient_id": 20338,
            "sender_email": "pstefek2@gmail.com",
            "sender_full_name": "Peter Stefek (he) (F2'20)",
            "sender_id": 329808,
            "sender_realm_str": "recurse",
            "stream_id": 19044,
            "subject": "Patching function calls",
            "submessages": [],
            "timestamp": 1600885067,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/29581c8174d213b28a7fd1d59b1ce0d8?d=identicon&version=1",
            "client": "website",
            "content": "<p>Hi! I'm thinking of modifying cpython to add tail recursion to the interpreter and was wondering if anyone here was familiar with the python internals?</p>",
            "content_type": "text/html",
            "display_recipient": "python",
            "flags": [
                "read",
                "historical"
            ],
            "id": 211042354,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20338,
            "sender_email": "pstefek2@gmail.com",
            "sender_full_name": "Peter Stefek (he) (F2'20)",
            "sender_id": 329808,
            "sender_realm_str": "recurse",
            "stream_id": 19044,
            "subject": "Python Internals",
            "submessages": [],
            "timestamp": 1600885149,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/3f4785d95e43ecfb2f20d49e6ec824dc?d=identicon&version=1",
            "client": "website",
            "content": "<p>It's not exactly what you're looking for, but <a href=\"https://codewords.recurse.com/issues/seven/dragon-taming-with-tailbiter-a-bytecode-compiler\">this article</a> by <span class=\"user-mention\" data-user-id=\"902\">@Darius Bacon (W1'16)</span> might be helpful!</p>",
            "content_type": "text/html",
            "display_recipient": "python",
            "flags": [
                "read",
                "historical"
            ],
            "id": 211046190,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f419",
                    "emoji_name": "octopus",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "benschac@gmail.com",
                        "full_name": "Benjamin Schachter (he/they) (W1'16)",
                        "id": 100320
                    },
                    "user_id": 100320
                },
                {
                    "emoji_code": "1f419",
                    "emoji_name": "octopus",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "pstefek2@gmail.com",
                        "full_name": "Peter Stefek (he) (F2'20)",
                        "id": 329808
                    },
                    "user_id": 329808
                }
            ],
            "recipient_id": 20338,
            "sender_email": "nick@recurse.com",
            "sender_full_name": "Nick Bergson-Shilcock (he)",
            "sender_id": 811,
            "sender_realm_str": "recurse",
            "stream_id": 19044,
            "subject": "Python Internals",
            "submessages": [],
            "timestamp": 1600886946,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/3f4785d95e43ecfb2f20d49e6ec824dc?d=identicon&version=1",
            "client": "website",
            "content": "<p>Also, I believe <span class=\"user-mention\" data-user-id=\"216353\">@Joannah Nanjekye (she) (SP2'19)</span> has contributed to CPython</p>",
            "content_type": "text/html",
            "display_recipient": "python",
            "flags": [
                "read",
                "historical"
            ],
            "id": 211046434,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20338,
            "sender_email": "nick@recurse.com",
            "sender_full_name": "Nick Bergson-Shilcock (he)",
            "sender_id": 811,
            "sender_realm_str": "recurse",
            "stream_id": 19044,
            "subject": "Python Internals",
            "submessages": [],
            "timestamp": 1600887057,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/c52df4d54166ed7db0141bdb21c7935e502d6ddc?x=x&version=1",
            "client": "website",
            "content": "<p>Near the top there's a link to <span class=\"user-mention\" data-user-id=\"809\">@Allison Kaptur (S'12)</span>'s article on the bytecode interpreter, probably a better starting point. I know there have been changes since the 3.4 version we both were writing about.</p>",
            "content_type": "text/html",
            "display_recipient": "python",
            "flags": [
                "read",
                "historical"
            ],
            "id": 211218027,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20338,
            "sender_email": "darius@wry.me",
            "sender_full_name": "Darius Bacon (W1'16)",
            "sender_id": 902,
            "sender_realm_str": "recurse",
            "stream_id": 19044,
            "subject": "Python Internals",
            "submessages": [],
            "timestamp": 1601009113,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/29581c8174d213b28a7fd1d59b1ce0d8?d=identicon&version=1",
            "client": "website",
            "content": "<p>Thanks for the suggestion <span class=\"user-mention\" data-user-id=\"902\">@Darius Bacon (W1'16)</span> . I'll check out Allison's  article. Also your article was fantastic and really gave me everything I needed to add tail recursion.</p>",
            "content_type": "text/html",
            "display_recipient": "python",
            "flags": [
                "read",
                "historical"
            ],
            "id": 211282968,
            "is_me_message": false,
            "last_edit_timestamp": 1601052293,
            "reactions": [],
            "recipient_id": 20338,
            "sender_email": "pstefek2@gmail.com",
            "sender_full_name": "Peter Stefek (he) (F2'20)",
            "sender_id": 329808,
            "sender_realm_str": "recurse",
            "stream_id": 19044,
            "subject": "Python Internals",
            "submessages": [],
            "timestamp": 1601052266,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/c52df4d54166ed7db0141bdb21c7935e502d6ddc?x=x&version=1",
            "client": "website",
            "content": "<p>Neat! I'm happy it helped.</p>",
            "content_type": "text/html",
            "display_recipient": "python",
            "flags": [
                "read",
                "historical"
            ],
            "id": 211286340,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20338,
            "sender_email": "darius@wry.me",
            "sender_full_name": "Darius Bacon (W1'16)",
            "sender_id": 902,
            "sender_realm_str": "recurse",
            "stream_id": 19044,
            "subject": "Python Internals",
            "submessages": [],
            "timestamp": 1601053879,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/29581c8174d213b28a7fd1d59b1ce0d8?d=identicon&version=1",
            "client": "website",
            "content": "<p>Posting the slides for my 5 minute talk from today here <span class=\"user-mention\" data-user-id=\"342383\">@Dana Miller (she) (F2'20)</span>  I think you mentioned you were interested? There are references at the end. I'm cleaning up the code today and will likely have it ready by Monday. <a href=\"https://docs.google.com/presentation/d/1TY2JQLr-q_HVgGug2-xhLlKh2AIm2w7aukcM5s3Fw74/edit?usp=sharing\">https://docs.google.com/presentation/d/1TY2JQLr-q_HVgGug2-xhLlKh2AIm2w7aukcM5s3Fw74/edit?usp=sharing</a></p>",
            "content_type": "text/html",
            "display_recipient": "python",
            "flags": [
                "read",
                "historical"
            ],
            "id": 211319116,
            "is_me_message": false,
            "last_edit_timestamp": 1601068786,
            "reactions": [],
            "recipient_id": 20338,
            "sender_email": "pstefek2@gmail.com",
            "sender_full_name": "Peter Stefek (he) (F2'20)",
            "sender_id": 329808,
            "sender_realm_str": "recurse",
            "stream_id": 19044,
            "subject": "Python Internals",
            "submessages": [],
            "timestamp": 1601068729,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/541aab26abf25ac195df55d7e6c0f2daf3f00c70?x=x&version=1",
            "client": "website",
            "content": "<p><a href=\"https://twitter.com/ThePSF/status/1311038036013199363\">https://twitter.com/ThePSF/status/1311038036013199363</a></p>\n<div class=\"inline-preview-twitter\"><div class=\"twitter-tweet\"><a href=\"https://twitter.com/ThePSF/status/1311038036013199363\"><img class=\"twitter-avatar\" src=\"https://pbs.twimg.com/profile_images/439154912719413248/pUBY5pVj_normal.png\"></a><p>Changes are coming to pip, #Python's package installation tool, in October 2020.\n<a href=\"https://t.co/7U5nJFADDL\">https://youtu.be/B4GQCBBsuNU</a>\n\nMigration guide: <a href=\"https://t.co/WGwwL7Hp5D\">https://pip.pypa.io/en/latest/user_guide/#changes-to-the-pip-dependency-resolver-in-20-2-2020</a>\n\nSign up for user experience studies: <a href=\"https://t.co/cCRyK15lOs\">https://bit.ly/pip-ux-studies</a></p><span>- Python Software Foundation (@ThePSF)</span></div></div>",
            "content_type": "text/html",
            "display_recipient": "python",
            "flags": [
                "read",
                "historical"
            ],
            "id": 211680025,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20338,
            "sender_email": "sumanah@fastmail.com",
            "sender_full_name": "Sumana Harihareswara (she) (F2'14)",
            "sender_id": 2909,
            "sender_realm_str": "recurse",
            "stream_id": 19044,
            "subject": "pip",
            "submessages": [],
            "timestamp": 1601411443,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/8883f6051fe385c3b03f16804c838d4c6b10e4bc?x=x&version=2",
            "client": "website",
            "content": "<p>x-posting from #rust on wasm as FFIs - 10x speed up when generating prime numbers in Python with Rust vs pure Python</p>\n<div class=\"codehilite\"><pre><span></span><code>average time Python: 5.923739s\naverage time Rust: 0.400865s\n</code></pre></div>\n\n\n<p><a href=\"#narrow/stream/20305-rust/topic/rust.20vs.20js.20benchmarks/near/212442519\">https://recurse.zulipchat.com/#narrow/stream/20305-rust/topic/rust.20vs.20js.20benchmarks/near/212442519</a></p>",
            "content_type": "text/html",
            "display_recipient": "python",
            "flags": [
                "read",
                "historical"
            ],
            "id": 212442721,
            "is_me_message": false,
            "last_edit_timestamp": 1601998337,
            "reactions": [
                {
                    "emoji_code": "1f389",
                    "emoji_name": "tada",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "pstefek2@gmail.com",
                        "full_name": "Peter Stefek (he) (F2'20)",
                        "id": 329808
                    },
                    "user_id": 329808
                },
                {
                    "emoji_code": "1f389",
                    "emoji_name": "tada",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "vmehta94@gmail.com",
                        "full_name": "Vinayak Mehta (he) (F1'20)",
                        "id": 327359
                    },
                    "user_id": 327359
                }
            ],
            "recipient_id": 20338,
            "sender_email": "ezzeri.esa@gmail.com",
            "sender_full_name": "Ezzeri Esa (he) (F1'20)",
            "sender_id": 327456,
            "sender_realm_str": "recurse",
            "stream_id": 19044,
            "subject": "speed up Python with Rust via WebAssembly",
            "submessages": [],
            "timestamp": 1601997275,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/5c9f6b47dcb9445449eefb07bc719483?d=identicon&version=1",
            "client": "ZulipElectron",
            "content": "<p>Does anyone have experience bundling shared libraries inside Windows wheels? My <a href=\"https://github.com/vinayak-mehta/pdftopng/\">Python C extension</a> seems to work only when all the DLLs required by it are placed in the same directory as the compiled <code>.pyd</code> file. Here are some questions I have:</p>\n<ul>\n<li>Is copying over all the DLLs from the build directory into the Wheel (since it's just a zip file) a good way to go about it? Apache Arrow seems to do that, see <a href=\"https://github.com/apache/arrow/blob/master/python/setup.py#L361\">here</a> and <a href=\"https://github.com/apache/arrow/blob/master/python/setup.py#L480\">here</a>. And it does not specify all the files as <code>package_data</code> in the <code>setup.py</code>, so I suspect that it gets the generated wheel, unpacks it, copies over the DLLs, and then zips the contents again. I'll have to look a bit deeper into the code.</li>\n<li><a href=\"https://github.com/pypa/auditwheel\">auditwheel</a>, which does this bundling for Linux wheels modifies the <code>RPATH</code> for the extension module (I think) so that the dynamic linker on Linux knows where to find the shared libraries. Do <code>.pyd</code> files (which are also DLLs) on Windows have a similar property that needs to be modified? How does the Windows dynamic linker work?</li>\n<li>Does the answer lie somewhere in static linking?</li>\n</ul>\n<p>Here are <a href=\"https://vinayak.io/2020/10/14/day-45b-how-to-almost-build-a-c-extension-wheel-on-windows-with-external-dependencies/\">some more details</a> about my experience compiling the extension on Windows.</p>",
            "content_type": "text/html",
            "display_recipient": "python",
            "flags": [
                "read",
                "historical"
            ],
            "id": 213622433,
            "is_me_message": false,
            "last_edit_timestamp": 1603060063,
            "reactions": [],
            "recipient_id": 20338,
            "sender_email": "vmehta94@gmail.com",
            "sender_full_name": "Vinayak Mehta (he) (F1'20)",
            "sender_id": 327359,
            "sender_realm_str": "recurse",
            "stream_id": 19044,
            "subject": "Bundling shared libraries in Windows wheels",
            "submessages": [],
            "timestamp": 1602888686,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/5c9f6b47dcb9445449eefb07bc719483?d=identicon&version=1",
            "client": "ZulipElectron",
            "content": "<p>I found 4 ways to go about it:</p>\n<ol>\n<li><a href=\"https://vinayak.io/2020/10/21/day-51-bundling-dlls-with-windows-wheels-the-package-data-way/\">the <code>package_data</code> way</a></li>\n<li><a href=\"https://vinayak.io/2020/10/22/day-52-bundling-dlls-with-windows-wheels-the-dll-mangling-way/\">the DLL mangling way</a></li>\n<li><a href=\"https://docs.microsoft.com/en-us/windows/win32/sbscs/about-side-by-side-assemblies-\">side by side assemblies</a></li>\n<li>static linking</li>\n</ol>\n<p>I was able to get to 2 (details in the posts above) so I didn't look much into 3 and 4. I need to test 2 on a fresh Windows installation though.</p>\n<p>re: dynamic link library search order: I found this <a href=\"https://docs.microsoft.com/en-us/windows/win32/dlls/dynamic-link-library-search-order\">nice doc page</a> about it.</p>",
            "content_type": "text/html",
            "display_recipient": "python",
            "flags": [
                "read",
                "historical"
            ],
            "id": 214202110,
            "is_me_message": false,
            "last_edit_timestamp": 1603380249,
            "reactions": [],
            "recipient_id": 20338,
            "sender_email": "vmehta94@gmail.com",
            "sender_full_name": "Vinayak Mehta (he) (F1'20)",
            "sender_id": 327359,
            "sender_realm_str": "recurse",
            "stream_id": 19044,
            "subject": "Bundling shared libraries in Windows wheels",
            "submessages": [],
            "timestamp": 1603379851,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/1588fc084a150438206141abca2a434daa4c8fa5?x=x&version=2",
            "client": "website",
            "content": "<p>hello!<br>\nas mentionned elsewhere, I have been working on a text editor inspired by kilo - instead of C, mine is written in Python.<br>\nRecently, I have been working on refactoring the code and adding new features that were not in the tutorial. Having mostly figured out the features I want for this project, I am considering doing a second refactor, focusing on designing a fair set of classes for this project.</p>\n<p>Would anyone have any advice or resources on how I could go about for this ? E.g. questions to ask myself before deciding to do a new class, how to name methods, the pro/cons of having subclasses, etc.</p>",
            "content_type": "text/html",
            "display_recipient": "python",
            "flags": [
                "read",
                "historical"
            ],
            "id": 214348211,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20338,
            "sender_email": "finartcialist@gmail.com",
            "sender_full_name": "Edith Viau (she) (F2'20)",
            "sender_id": 341049,
            "sender_realm_str": "recurse",
            "stream_id": 19044,
            "subject": "general advice /resources on code refactoring: classes?",
            "submessages": [],
            "timestamp": 1603477133,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/1588fc084a150438206141abca2a434daa4c8fa5?x=x&version=2",
            "client": "website",
            "content": "<p>E.g. what do peopple think about this resource : <a href=\"https://python-patterns.guide/\">https://python-patterns.guide/</a> (it feels a bit over my head for now, but it seems to make sense)</p>",
            "content_type": "text/html",
            "display_recipient": "python",
            "flags": [
                "read",
                "historical"
            ],
            "id": 214349434,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20338,
            "sender_email": "finartcialist@gmail.com",
            "sender_full_name": "Edith Viau (she) (F2'20)",
            "sender_id": 341049,
            "sender_realm_str": "recurse",
            "stream_id": 19044,
            "subject": "general advice /resources on code refactoring: classes?",
            "submessages": [],
            "timestamp": 1603477776,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/a8755809612b3b2e2b30b65bd71786d8?d=identicon&version=1",
            "client": "ZulipElectron",
            "content": "<p>Hey Edith! Yes, I wrote about this in my public Python style guide, <a href=\"https://github.com/amontalenti/elements-of-python-style/blob/master/README.md\">\"The Elements of Python Style\"</a>. See, for example, my section on <a href=\"https://github.com/amontalenti/elements-of-python-style#functions-vs-classes\">\"Functions vs classes\"</a> and also <a href=\"https://github.com/amontalenti/elements-of-python-style#avoid-traditional-oop\">\"Avoid 'traditional' OOP\"</a>. Hope that helps!</p>",
            "content_type": "text/html",
            "display_recipient": "python",
            "flags": [
                "read",
                "historical"
            ],
            "id": 214437085,
            "is_me_message": false,
            "last_edit_timestamp": 1603558119,
            "reactions": [
                {
                    "emoji_code": "1f6e0",
                    "emoji_name": "working_on_it",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "danammiller360@gmail.com",
                        "full_name": "Dana Miller (she) (F2'20)",
                        "id": 342383
                    },
                    "user_id": 342383
                },
                {
                    "emoji_code": "1f6e0",
                    "emoji_name": "working_on_it",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "ertysdl@gmail.com",
                        "full_name": "Erty Seidohl (he) (S'13)",
                        "id": 2154
                    },
                    "user_id": 2154
                },
                {
                    "emoji_code": "1f6e0",
                    "emoji_name": "working_on_it",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "finartcialist@gmail.com",
                        "full_name": "Edith Viau (she) (F2'20)",
                        "id": 341049
                    },
                    "user_id": 341049
                },
                {
                    "emoji_code": "1f389",
                    "emoji_name": "tada",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "finartcialist@gmail.com",
                        "full_name": "Edith Viau (she) (F2'20)",
                        "id": 341049
                    },
                    "user_id": 341049
                },
                {
                    "emoji_code": "14181",
                    "emoji_name": "thank-you-word",
                    "reaction_type": "realm_emoji",
                    "user": {
                        "email": "finartcialist@gmail.com",
                        "full_name": "Edith Viau (she) (F2'20)",
                        "id": 341049
                    },
                    "user_id": 341049
                }
            ],
            "recipient_id": 20338,
            "sender_email": "andrew.montalenti@gmail.com",
            "sender_full_name": "Andrew Montalenti (he) (m7'19)",
            "sender_id": 247727,
            "sender_realm_str": "recurse",
            "stream_id": 19044,
            "subject": "general advice /resources on code refactoring: classes?",
            "submessages": [],
            "timestamp": 1603558096,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/1588fc084a150438206141abca2a434daa4c8fa5?x=x&version=2",
            "client": "website",
            "content": "<p>Although I have been a Python user for a few years now, navigating the implementations is confusing...</p>\n<p>I am trying to navigate Python in order to figure out how is os.write(fd,str) implemented... to no avail. I am looking at various information on the dev guide to Python and after looking everywhere it could be, I am still coming up empty handed <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span> </p>\n<p>In general, it is not obvious to me how to go about reading code to find how something is implemented - does anyone have advice? How can I wrap my head around how Python is structured? </p>\n<p>Is this supposed to be difficult - or am I missing something obvious?</p>\n<p>Thanks <span aria-label=\"wish\" class=\"emoji emoji-1f320\" role=\"img\" title=\"wish\">:wish:</span></p>",
            "content_type": "text/html",
            "display_recipient": "python",
            "flags": [
                "read",
                "historical"
            ],
            "id": 214984451,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20338,
            "sender_email": "finartcialist@gmail.com",
            "sender_full_name": "Edith Viau (she) (F2'20)",
            "sender_id": 341049,
            "sender_realm_str": "recurse",
            "stream_id": 19044,
            "subject": "how to navigate CPython?",
            "submessages": [],
            "timestamp": 1603985844,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/7857f26c1ef2e9bdbfa843f9087710f7?d=identicon&version=1",
            "client": "ZulipMobile",
            "content": "<p>the problem you may be having is that os.write is defined in a platform-specific extension module</p>",
            "content_type": "text/html",
            "display_recipient": "python",
            "flags": [
                "read",
                "historical"
            ],
            "id": 214986315,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20338,
            "sender_email": "nathan12343@gmail.com",
            "sender_full_name": "Nathan Goldbaum (he) (S1'19)",
            "sender_id": 221814,
            "sender_realm_str": "recurse",
            "stream_id": 19044,
            "subject": "how to navigate CPython?",
            "submessages": [],
            "timestamp": 1603986543,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/7857f26c1ef2e9bdbfa843f9087710f7?d=identicon&version=1",
            "client": "ZulipMobile",
            "content": "<p>here\u2019s the implementation for posix: <a href=\"https://github.com/python/cpython/blob/5776663675b48f011d428a5874cc3c79d1deb59e/Modules/posixmodule.c#L9267\">https://github.com/python/cpython/blob/5776663675b48f011d428a5874cc3c79d1deb59e/Modules/posixmodule.c#L9267</a></p>",
            "content_type": "text/html",
            "display_recipient": "python",
            "flags": [
                "read",
                "historical"
            ],
            "id": 214986334,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20338,
            "sender_email": "nathan12343@gmail.com",
            "sender_full_name": "Nathan Goldbaum (he) (S1'19)",
            "sender_id": 221814,
            "sender_realm_str": "recurse",
            "stream_id": 19044,
            "subject": "how to navigate CPython?",
            "submessages": [],
            "timestamp": 1603986554,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/7857f26c1ef2e9bdbfa843f9087710f7?d=identicon&version=1",
            "client": "ZulipMobile",
            "content": "<p>the os module itself is written in python, although it populates itself using code defined in C at runtime</p>",
            "content_type": "text/html",
            "display_recipient": "python",
            "flags": [
                "read",
                "historical"
            ],
            "id": 214986390,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20338,
            "sender_email": "nathan12343@gmail.com",
            "sender_full_name": "Nathan Goldbaum (he) (S1'19)",
            "sender_id": 221814,
            "sender_realm_str": "recurse",
            "stream_id": 19044,
            "subject": "how to navigate CPython?",
            "submessages": [],
            "timestamp": 1603986584,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/7857f26c1ef2e9bdbfa843f9087710f7?d=identicon&version=1",
            "client": "ZulipMobile",
            "content": "<p><a href=\"https://github.com/python/cpython/blob/master/Lib/os.py\">https://github.com/python/cpython/blob/master/Lib/os.py</a></p>",
            "content_type": "text/html",
            "display_recipient": "python",
            "flags": [
                "read",
                "historical"
            ],
            "id": 214986482,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20338,
            "sender_email": "nathan12343@gmail.com",
            "sender_full_name": "Nathan Goldbaum (he) (S1'19)",
            "sender_id": 221814,
            "sender_realm_str": "recurse",
            "stream_id": 19044,
            "subject": "how to navigate CPython?",
            "submessages": [],
            "timestamp": 1603986610,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/7857f26c1ef2e9bdbfa843f9087710f7?d=identicon&version=1",
            "client": "ZulipMobile",
            "content": "<p>i was able to find this quickly because I knew that the bits of the standard library that are written in python are located in the <code>Lib/</code> folder</p>",
            "content_type": "text/html",
            "display_recipient": "python",
            "flags": [
                "read",
                "historical"
            ],
            "id": 214986588,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20338,
            "sender_email": "nathan12343@gmail.com",
            "sender_full_name": "Nathan Goldbaum (he) (S1'19)",
            "sender_id": 221814,
            "sender_realm_str": "recurse",
            "stream_id": 19044,
            "subject": "how to navigate CPython?",
            "submessages": [],
            "timestamp": 1603986660,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/7857f26c1ef2e9bdbfa843f9087710f7?d=identicon&version=1",
            "client": "ZulipMobile",
            "content": "<p>oh also that\u2019s just the implementation for posix, there\u2019s a different one for windows which I didn\u2019t locate</p>",
            "content_type": "text/html",
            "display_recipient": "python",
            "flags": [
                "read",
                "historical"
            ],
            "id": 214986685,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20338,
            "sender_email": "nathan12343@gmail.com",
            "sender_full_name": "Nathan Goldbaum (he) (S1'19)",
            "sender_id": 221814,
            "sender_realm_str": "recurse",
            "stream_id": 19044,
            "subject": "how to navigate CPython?",
            "submessages": [],
            "timestamp": 1603986693,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/7857f26c1ef2e9bdbfa843f9087710f7?d=identicon&version=1",
            "client": "ZulipMobile",
            "content": "<p>and the actual low-level implementation is here: <a href=\"https://github.com/python/cpython/blob/f2312037e3a974d26ed3e23884f94c6af111a27a/Python/fileutils.c#L1665\">https://github.com/python/cpython/blob/f2312037e3a974d26ed3e23884f94c6af111a27a/Python/fileutils.c#L1665</a></p>",
            "content_type": "text/html",
            "display_recipient": "python",
            "flags": [
                "read",
                "historical"
            ],
            "id": 214987366,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20338,
            "sender_email": "nathan12343@gmail.com",
            "sender_full_name": "Nathan Goldbaum (he) (S1'19)",
            "sender_id": 221814,
            "sender_realm_str": "recurse",
            "stream_id": 19044,
            "subject": "how to navigate CPython?",
            "submessages": [],
            "timestamp": 1603986962,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/7857f26c1ef2e9bdbfa843f9087710f7?d=identicon&version=1",
            "client": "ZulipMobile",
            "content": "<p>I guess for more general advice, not really sure, I guess generally being aware that lots of stuff is written in C with different C-level naming conventions and just to be aware of that?</p>",
            "content_type": "text/html",
            "display_recipient": "python",
            "flags": [
                "read",
                "historical"
            ],
            "id": 214987551,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20338,
            "sender_email": "nathan12343@gmail.com",
            "sender_full_name": "Nathan Goldbaum (he) (S1'19)",
            "sender_id": 221814,
            "sender_realm_str": "recurse",
            "stream_id": 19044,
            "subject": "how to navigate CPython?",
            "submessages": [],
            "timestamp": 1603987026,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/f59b1bd52e790e176d04d3610ea3ada8?d=identicon&version=1",
            "client": "website",
            "content": "<p>EDIT: blah, wrong thread</p>",
            "content_type": "text/html",
            "display_recipient": "python",
            "flags": [
                "read",
                "historical"
            ],
            "id": 214987804,
            "is_me_message": false,
            "last_edit_timestamp": 1603987430,
            "reactions": [],
            "recipient_id": 20338,
            "sender_email": "adeshar00@gmail.com",
            "sender_full_name": "Andrew Desharnais (he) (W1'20)",
            "sender_id": 8863,
            "sender_realm_str": "recurse",
            "stream_id": 19044,
            "subject": "how to navigate CPython?",
            "submessages": [],
            "timestamp": 1603987119,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/1588fc084a150438206141abca2a434daa4c8fa5?x=x&version=2",
            "client": "website",
            "content": "<p>thank you <span class=\"user-mention\" data-user-id=\"221814\">@Nathan Goldbaum (he) (S1'19)</span> !! this is really helpful - I guess I need to get better at C in general if I really want to understand Python then?</p>",
            "content_type": "text/html",
            "display_recipient": "python",
            "flags": [
                "read",
                "historical"
            ],
            "id": 214989751,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20338,
            "sender_email": "finartcialist@gmail.com",
            "sender_full_name": "Edith Viau (she) (F2'20)",
            "sender_id": 341049,
            "sender_realm_str": "recurse",
            "stream_id": 19044,
            "subject": "how to navigate CPython?",
            "submessages": [],
            "timestamp": 1603987818,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/7857f26c1ef2e9bdbfa843f9087710f7?d=identicon&version=1",
            "client": "ZulipMobile",
            "content": "<p>Yeah, that and how the bits of python that are written in C get exposed to the rest of the language, maybe just playing with building a toy extension module from scratch would allow you to see how it all gets set up</p>",
            "content_type": "text/html",
            "display_recipient": "python",
            "flags": [
                "read",
                "historical"
            ],
            "id": 214990024,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f4a1",
                    "emoji_name": "light_bulb",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "finartcialist@gmail.com",
                        "full_name": "Edith Viau (she) (F2'20)",
                        "id": 341049
                    },
                    "user_id": 341049
                }
            ],
            "recipient_id": 20338,
            "sender_email": "nathan12343@gmail.com",
            "sender_full_name": "Nathan Goldbaum (he) (S1'19)",
            "sender_id": 221814,
            "sender_realm_str": "recurse",
            "stream_id": 19044,
            "subject": "how to navigate CPython?",
            "submessages": [],
            "timestamp": 1603987934,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/5c9f6b47dcb9445449eefb07bc719483?d=identicon&version=1",
            "client": "ZulipElectron",
            "content": "<blockquote>\n<p>maybe just playing with building a toy extension module from scratch would allow you to see how it all gets set up</p>\n</blockquote>\n<p>YES! Writing a toy C extension module helped me understand (a little bit) how the CPython C code works! I wrote a bit about it <a href=\"https://vinayak.io/2020/09/23/day-32-a-python-c-extension-module/\">here</a>.</p>\n<p>You might be interested in checking this awesome talk by Ned Batchelder: <a href=\"https://nedbatchelder.com/text/whirlext.html\">A Whirlwind Excursion through Python C Extensions</a>.</p>",
            "content_type": "text/html",
            "display_recipient": "python",
            "flags": [
                "read",
                "historical"
            ],
            "id": 214991950,
            "is_me_message": false,
            "last_edit_timestamp": 1603988825,
            "reactions": [
                {
                    "emoji_code": "14181",
                    "emoji_name": "thank-you-word",
                    "reaction_type": "realm_emoji",
                    "user": {
                        "email": "finartcialist@gmail.com",
                        "full_name": "Edith Viau (she) (F2'20)",
                        "id": 341049
                    },
                    "user_id": 341049
                }
            ],
            "recipient_id": 20338,
            "sender_email": "vmehta94@gmail.com",
            "sender_full_name": "Vinayak Mehta (he) (F1'20)",
            "sender_id": 327359,
            "sender_realm_str": "recurse",
            "stream_id": 19044,
            "subject": "how to navigate CPython?",
            "submessages": [],
            "timestamp": 1603988762,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/1588fc084a150438206141abca2a434daa4c8fa5?x=x&version=2",
            "client": "website",
            "content": "<p>thanks <span class=\"user-mention\" data-user-id=\"221814\">@Nathan Goldbaum (he) (S1'19)</span> and <span class=\"user-mention\" data-user-id=\"327359\">@Vinayak Mehta (he) (F1'20)</span> !! time for some studying <span aria-label=\"sunglasses\" class=\"emoji emoji-1f60e\" role=\"img\" title=\"sunglasses\">:sunglasses:</span></p>",
            "content_type": "text/html",
            "display_recipient": "python",
            "flags": [
                "read",
                "historical"
            ],
            "id": 214993513,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f419",
                    "emoji_name": "octopus",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "vmehta94@gmail.com",
                        "full_name": "Vinayak Mehta (he) (F1'20)",
                        "id": 327359
                    },
                    "user_id": 327359
                }
            ],
            "recipient_id": 20338,
            "sender_email": "finartcialist@gmail.com",
            "sender_full_name": "Edith Viau (she) (F2'20)",
            "sender_id": 341049,
            "sender_realm_str": "recurse",
            "stream_id": 19044,
            "subject": "how to navigate CPython?",
            "submessages": [],
            "timestamp": 1603989387,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/8ef0cc9607b07f392f70560a43dbbb2d0efd6328?x=x&version=1",
            "client": "website",
            "content": "<p>Just wanted to echo that yes, this is supposed to be difficult. When you start a new job, someone is usually there to handhold you through the codebase, and nobody expects anybody to be able to just dive into a codebase and understand the structure just by looking at the file hierarchies.</p>",
            "content_type": "text/html",
            "display_recipient": "python",
            "flags": [
                "read",
                "historical"
            ],
            "id": 215030154,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20338,
            "sender_email": "brian.kihoon.lee@gmail.com",
            "sender_full_name": "Brian Lee (F1'16)",
            "sender_id": 100043,
            "sender_realm_str": "recurse",
            "stream_id": 19044,
            "subject": "how to navigate CPython?",
            "submessages": [],
            "timestamp": 1604006581,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/8ef0cc9607b07f392f70560a43dbbb2d0efd6328?x=x&version=1",
            "client": "website",
            "content": "<p>so you shouldn't expect that you can dive into CPython source and understand what's going on</p>",
            "content_type": "text/html",
            "display_recipient": "python",
            "flags": [
                "read",
                "historical"
            ],
            "id": 215030187,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f60c",
                    "emoji_name": "relieved",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "vmehta94@gmail.com",
                        "full_name": "Vinayak Mehta (he) (F1'20)",
                        "id": 327359
                    },
                    "user_id": 327359
                },
                {
                    "emoji_code": "1f60c",
                    "emoji_name": "relieved",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "finartcialist@gmail.com",
                        "full_name": "Edith Viau (she) (F2'20)",
                        "id": 341049
                    },
                    "user_id": 341049
                },
                {
                    "emoji_code": "14181",
                    "emoji_name": "thank-you-word",
                    "reaction_type": "realm_emoji",
                    "user": {
                        "email": "finartcialist@gmail.com",
                        "full_name": "Edith Viau (she) (F2'20)",
                        "id": 341049
                    },
                    "user_id": 341049
                }
            ],
            "recipient_id": 20338,
            "sender_email": "brian.kihoon.lee@gmail.com",
            "sender_full_name": "Brian Lee (F1'16)",
            "sender_id": 100043,
            "sender_realm_str": "recurse",
            "stream_id": 19044,
            "subject": "how to navigate CPython?",
            "submessages": [],
            "timestamp": 1604006598,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/3f6bef626649c46b4cc3fd9f67c151a19170da5e?x=x&version=21",
            "client": "website",
            "content": "<p>Yeah, reading code is 1000x more difficult than writing code. Barely anyone can do it. If you're really good at writing readable code, you can make it only 300x as difficult as writing code. People who can read code easily are extremely rare (and highly paid) because they reverse engineer software and find exploitable vulnerabilities.</p>",
            "content_type": "text/html",
            "display_recipient": "python",
            "flags": [
                "read",
                "historical"
            ],
            "id": 215030678,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20338,
            "sender_email": "jkozak@fmail.co.uk",
            "sender_full_name": "Jake \u26e4 Prozvyshe (they) (W1'17)",
            "sender_id": 8478,
            "sender_realm_str": "recurse",
            "stream_id": 19044,
            "subject": "how to navigate CPython?",
            "submessages": [],
            "timestamp": 1604006854,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/50c0f109320065168bd7a918c9f5e205?d=identicon&version=1",
            "client": "ZulipElectron",
            "content": "<p>Hey Python friends! I wanted to ask - does anyone lean into a specific python web framework over another these days? I had started some work in Flask a year or so ago, but I'm wondering if things have changed and what people's thoughts were.</p>",
            "content_type": "text/html",
            "display_recipient": "python",
            "flags": [
                "read",
                "historical"
            ],
            "id": 216141918,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20338,
            "sender_email": "imran@imranmalek.com",
            "sender_full_name": "Imran Malek (he) (W1'20)",
            "sender_id": 361178,
            "sender_realm_str": "recurse",
            "stream_id": 19044,
            "subject": "web frameworks",
            "submessages": [],
            "timestamp": 1604955462,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/5f0d83f1f8dbe978ecbb0e11f0ec669c?d=identicon&version=1",
            "client": "ZulipElectron",
            "content": "<p>I think flask is good enough if you're building a small personal project. For building database heavy, full fledged applications, I prefer django. Django's ORM system is very nice, makes it easy to create and update records in the db.  I've seen some people use <a href=\"https://github.com/tiangolo/fastapi\">FastAPI</a>, if the purpose is to just create API endpoints. I haven't used it personally.</p>",
            "content_type": "text/html",
            "display_recipient": "python",
            "flags": [
                "read",
                "historical"
            ],
            "id": 216144649,
            "is_me_message": false,
            "last_edit_timestamp": 1605004417,
            "reactions": [],
            "recipient_id": 20338,
            "sender_email": "weirdmailid@gmail.com",
            "sender_full_name": "Yasharth Choudhary (he) (W1'20)",
            "sender_id": 360487,
            "sender_realm_str": "recurse",
            "stream_id": 19044,
            "subject": "web frameworks",
            "submessages": [],
            "timestamp": 1604957084,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/50c0f109320065168bd7a918c9f5e205?d=identicon&version=1",
            "client": "ZulipElectron",
            "content": "<p>Thanks <span class=\"user-mention\" data-user-id=\"360487\">@Yasharth Choudhary (W1'20)</span> , I think in this case \"sticking to what I know\" is the right move and I'll dive into Flask</p>",
            "content_type": "text/html",
            "display_recipient": "python",
            "flags": [
                "read",
                "historical"
            ],
            "id": 216146506,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "+1",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "fabi@hey.com",
                        "full_name": "Fabian Tamp (he) (W2'20)",
                        "id": 255053
                    },
                    "user_id": 255053
                },
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "+1",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "jkozak@fmail.co.uk",
                        "full_name": "Jake \u26e4 Prozvyshe (they) (W1'17)",
                        "id": 8478
                    },
                    "user_id": 8478
                }
            ],
            "recipient_id": 20338,
            "sender_email": "imran@imranmalek.com",
            "sender_full_name": "Imran Malek (he) (W1'20)",
            "sender_id": 361178,
            "sender_realm_str": "recurse",
            "stream_id": 19044,
            "subject": "web frameworks",
            "submessages": [],
            "timestamp": 1604958112,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/3f6bef626649c46b4cc3fd9f67c151a19170da5e?x=x&version=21",
            "client": "website",
            "content": "<p>I would second this... flask has been around probably almost 10 years at this point, it's a great microframework that Does The Job for personal projects and more, and pretty much anything that django provides can be bolted on to flask (sqlalchemy is a fine alternative to Django's ORM, for instance).</p>",
            "content_type": "text/html",
            "display_recipient": "python",
            "flags": [
                "read",
                "historical"
            ],
            "id": 216146960,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20338,
            "sender_email": "jkozak@fmail.co.uk",
            "sender_full_name": "Jake \u26e4 Prozvyshe (they) (W1'17)",
            "sender_id": 8478,
            "sender_realm_str": "recurse",
            "stream_id": 19044,
            "subject": "web frameworks",
            "submessages": [],
            "timestamp": 1604958364,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/50c0f109320065168bd7a918c9f5e205?d=identicon&version=1",
            "client": "ZulipElectron",
            "content": "<p>Thank you, <span class=\"user-mention\" data-user-id=\"8478\">@Jake \u26e4 Prozvyshe (they) (W1'17)</span> - my mind is made.</p>",
            "content_type": "text/html",
            "display_recipient": "python",
            "flags": [
                "read",
                "historical"
            ],
            "id": 216147321,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20338,
            "sender_email": "imran@imranmalek.com",
            "sender_full_name": "Imran Malek (he) (W1'20)",
            "sender_id": 361178,
            "sender_realm_str": "recurse",
            "stream_id": 19044,
            "subject": "web frameworks",
            "submessages": [],
            "timestamp": 1604958582,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/50c0f109320065168bd7a918c9f5e205?d=identicon&version=1",
            "client": "ZulipElectron",
            "content": "<p>I will report in on all my flask adventures!</p>",
            "content_type": "text/html",
            "display_recipient": "python",
            "flags": [
                "read",
                "historical"
            ],
            "id": 216147372,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f526",
                    "emoji_name": "flashlight",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "jkozak@fmail.co.uk",
                        "full_name": "Jake \u26e4 Prozvyshe (they) (W1'17)",
                        "id": 8478
                    },
                    "user_id": 8478
                }
            ],
            "recipient_id": 20338,
            "sender_email": "imran@imranmalek.com",
            "sender_full_name": "Imran Malek (he) (W1'20)",
            "sender_id": 361178,
            "sender_realm_str": "recurse",
            "stream_id": 19044,
            "subject": "web frameworks",
            "submessages": [],
            "timestamp": 1604958604,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/e622b23d56ce1dbfd935c38e071636c4a40935e8?x=x&version=2",
            "client": "website",
            "content": "<p><a href=\"https://github.com/bottlepy/bottle\">bottle</a> is noteworthy as a relatively simple \"framework\"\u2014no third-party dependencies, just a single (4k LOC) file that you drop into your project. <span class=\"user-mention\" data-user-id=\"361178\">@Imran Malek (he) (W1'20)</span>, whether this is a viable choice depends on your use case, of course; but given its simplicity, its internals are arguably easier to modify and grok than those of standard alternatives.</p>",
            "content_type": "text/html",
            "display_recipient": "python",
            "flags": [
                "read",
                "historical"
            ],
            "id": 216190038,
            "is_me_message": false,
            "last_edit_timestamp": 1605006288,
            "reactions": [],
            "recipient_id": 20338,
            "sender_email": "eha@posteo.de",
            "sender_full_name": "Eugene Ha (he) (S1'18)",
            "sender_id": 116366,
            "sender_realm_str": "recurse",
            "stream_id": 19044,
            "subject": "web frameworks",
            "submessages": [],
            "timestamp": 1605001886,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/50c0f109320065168bd7a918c9f5e205?d=identicon&version=1",
            "client": "ZulipElectron",
            "content": "<p>Thanks <span class=\"user-mention\" data-user-id=\"116366\">@Eugene Ha (he) (S1'18)</span> The truly compact nature of this is compelling... I'll have to do dig into it as well. So many options!</p>",
            "content_type": "text/html",
            "display_recipient": "python",
            "flags": [
                "read",
                "historical"
            ],
            "id": 216219931,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20338,
            "sender_email": "imran@imranmalek.com",
            "sender_full_name": "Imran Malek (he) (W1'20)",
            "sender_id": 361178,
            "sender_realm_str": "recurse",
            "stream_id": 19044,
            "subject": "web frameworks",
            "submessages": [],
            "timestamp": 1605018986,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/692e4b98820a7c9bd5fe6c17408346c6e7f67c6b?x=x&version=2",
            "client": "ZulipElectron",
            "content": "<p>How do people feel about adding line breaks before and after docstring text?</p>\n<p><a href=\"/user_uploads/13/G1efaZtcgLZo9jO8KxwngKVd/image.png\">image.png</a> </p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/13/G1efaZtcgLZo9jO8KxwngKVd/image.png\" title=\"image.png\"><img src=\"/user_uploads/13/G1efaZtcgLZo9jO8KxwngKVd/image.png\"></a></div><p>Overkill? Just right? Do you have a different docstring philosophy? Please share!</p>",
            "content_type": "text/html",
            "display_recipient": "python",
            "flags": [
                "read",
                "historical"
            ],
            "id": 216304754,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20338,
            "sender_email": "azhadsyed17@gmail.com",
            "sender_full_name": "Azhad Syed (he) (W1'20)",
            "sender_id": 363087,
            "sender_realm_str": "recurse",
            "stream_id": 19044,
            "subject": "general advice /resources on code refactoring: classes?",
            "submessages": [],
            "timestamp": 1605066083,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/7857f26c1ef2e9bdbfa843f9087710f7?d=identicon&version=1",
            "client": "ZulipMobile",
            "content": "<p>I don\u2019t think it matters much so long as you\u2019re consistent</p>",
            "content_type": "text/html",
            "display_recipient": "python",
            "flags": [
                "read",
                "historical"
            ],
            "id": 216305830,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20338,
            "sender_email": "nathan12343@gmail.com",
            "sender_full_name": "Nathan Goldbaum (he) (S1'19)",
            "sender_id": 221814,
            "sender_realm_str": "recurse",
            "stream_id": 19044,
            "subject": "general advice /resources on code refactoring: classes?",
            "submessages": [],
            "timestamp": 1605067674,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/7857f26c1ef2e9bdbfa843f9087710f7?d=identicon&version=1",
            "client": "ZulipMobile",
            "content": "<p>these days for me that means doing whatever black says i should do</p>",
            "content_type": "text/html",
            "display_recipient": "python",
            "flags": [
                "read",
                "historical"
            ],
            "id": 216305871,
            "is_me_message": false,
            "last_edit_timestamp": 1605067901,
            "reactions": [],
            "recipient_id": 20338,
            "sender_email": "nathan12343@gmail.com",
            "sender_full_name": "Nathan Goldbaum (he) (S1'19)",
            "sender_id": 221814,
            "sender_realm_str": "recurse",
            "stream_id": 19044,
            "subject": "general advice /resources on code refactoring: classes?",
            "submessages": [],
            "timestamp": 1605067689,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/7857f26c1ef2e9bdbfa843f9087710f7?d=identicon&version=1",
            "client": "ZulipMobile",
            "content": "<p>it\u2019s just way less effort wasted worrying about style if i let a tool do it for me and add a test saying black shouldn\u2019t have any edits</p>",
            "content_type": "text/html",
            "display_recipient": "python",
            "flags": [
                "read",
                "historical"
            ],
            "id": 216305898,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20338,
            "sender_email": "nathan12343@gmail.com",
            "sender_full_name": "Nathan Goldbaum (he) (S1'19)",
            "sender_id": 221814,
            "sender_realm_str": "recurse",
            "stream_id": 19044,
            "subject": "general advice /resources on code refactoring: classes?",
            "submessages": [],
            "timestamp": 1605067746,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/692e4b98820a7c9bd5fe6c17408346c6e7f67c6b?x=x&version=2",
            "client": "ZulipElectron",
            "content": "<p>True - specifically asking because Black is unopinionated on this particular issue, and I'm curious if others have a standard workflow</p>",
            "content_type": "text/html",
            "display_recipient": "python",
            "flags": [
                "read",
                "historical"
            ],
            "id": 216306259,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20338,
            "sender_email": "azhadsyed17@gmail.com",
            "sender_full_name": "Azhad Syed (he) (W1'20)",
            "sender_id": 363087,
            "sender_realm_str": "recurse",
            "stream_id": 19044,
            "subject": "general advice /resources on code refactoring: classes?",
            "submessages": [],
            "timestamp": 1605068251,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/bb70fabdfe4cd05efdbd460db10bcb5b37b77f49?x=x&version=1",
            "client": "website",
            "content": "<p>I don't think there are many general technical considerations that pertain to formatting docstrings, above and beyond PEP 257. You <em>will</em> find innumerable personal opinions <span aria-label=\"wink\" class=\"emoji emoji-1f609\" role=\"img\" title=\"wink\">:wink:</span>  I agree consistency is the key though.</p>",
            "content_type": "text/html",
            "display_recipient": "python",
            "flags": [
                "read",
                "historical"
            ],
            "id": 216351977,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20338,
            "sender_email": "dleonardotn@gmail.com",
            "sender_full_name": "Leo Torres (he) (SP2'16)",
            "sender_id": 9247,
            "sender_realm_str": "recurse",
            "stream_id": 19044,
            "subject": "general advice /resources on code refactoring: classes?",
            "submessages": [],
            "timestamp": 1605104762,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/3f6bef626649c46b4cc3fd9f67c151a19170da5e?x=x&version=21",
            "client": "website",
            "content": "<p><span class=\"user-mention silent\" data-user-id=\"8478\">Jake \u26e4 Prozvyshe (they) (W1'17)</span> <a href=\"#narrow/stream/19042-397-Bridge/topic/Poetry.3A.20Python.20environment.20and.20dependency.20management/near/216370276\">said</a>:</p>\n<blockquote>\n<h1>Event about how to manage Python dependency hell for Data Science and more</h1>\n<p>This is happening today at 1pm! If that's too short notice for you, we can reschedule, or I'm happy to talk 1-on-1 about this topic.</p>\n<p>calendar event: <a href=\"https://www.recurse.com/calendar/13593\">https://www.recurse.com/calendar/13593</a></p>\n<h1>What is this about?</h1>\n<p>One of the most common problems I hear from both experts and beginners alike is the difficulty of managing various python versions, packages, and dependencies. It's a situation where the defaults aren't sensible and the things that seem obvious can easily break your whole system's python installation!</p>\n<p>Fortunately, there is a solution! It's called poetry and it handles all your python environment needs! Join us for a demo of the poetry tool and an explanation of what problems it solves.</p>\n<h1>How will this help me?</h1>\n<p>If you're getting started with a new python project, you'll almost always run into trouble getting dependencies pulled down and build, and without using a tool like this, you'll likely waste days just getting set up. This is very frustrating when you want to focus on training a neural network! This talk will show you how to get up and running with a <strong>maintainable, isolated python environment that tracks and installs dependencies automatically</strong>.</p>\n</blockquote>",
            "content_type": "text/html",
            "display_recipient": "python",
            "flags": [
                "read",
                "historical"
            ],
            "id": 216370422,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "26a0",
                    "emoji_name": "warning",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "danammiller360@gmail.com",
                        "full_name": "Dana Miller (she) (F2'20)",
                        "id": 342383
                    },
                    "user_id": 342383
                }
            ],
            "recipient_id": 20338,
            "sender_email": "jkozak@fmail.co.uk",
            "sender_full_name": "Jake \u26e4 Prozvyshe (they) (W1'17)",
            "sender_id": 8478,
            "sender_realm_str": "recurse",
            "stream_id": 19044,
            "subject": "Poetry: Python environment and dependency management",
            "submessages": [],
            "timestamp": 1605113524,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/e3320e126276138a2347efd87ca2a61bd1ab4016?x=x&version=2",
            "client": "website",
            "content": "<p>I tend to like to have a one-liner up top and then two breaks before more stuff, i.e.</p>\n<div class=\"codehilite\" data-code-language=\"Python\"><pre><span></span><code><span class=\"k\">def</span> <span class=\"nf\">list_collection_names</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">session</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"nb\">filter</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n    <span class=\"sd\">\"\"\"Get a list of all the collection names in this database.</span>\n\n<span class=\"sd\">    Listing collection names has a rich history in computer science...</span>\n<span class=\"sd\">    ...and now you are mentally prepared to use this function.</span>\n<span class=\"sd\">    \"\"\"</span>\n    <span class=\"k\">pass</span>\n</code></pre></div>\n<p>Some tools use this convention for interactive documentation. For example, Shift-Tab inside parens of an imported function in a Jupyter notebook for me will show the first line, and hitting Tab again while holding Shift will reveal the rest of the docstring. I guess this is similar to the convention for git commit messages?</p>\n<p>I usually don't double-line-break at the end of my docstrings, but I don't really think about whether I do that or not.</p>",
            "content_type": "text/html",
            "display_recipient": "python",
            "flags": [
                "read",
                "historical"
            ],
            "id": 216493139,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20338,
            "sender_email": "dwinston@alum.mit.edu",
            "sender_full_name": "Donny Winston (he) (W1'19)",
            "sender_id": 246979,
            "sender_realm_str": "recurse",
            "stream_id": 19044,
            "subject": "general advice /resources on code refactoring: classes?",
            "submessages": [],
            "timestamp": 1605198916,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/50c0f109320065168bd7a918c9f5e205?d=identicon&version=1",
            "client": "ZulipElectron",
            "content": "<p>Does anyone have a recommendation for their favorite python email handling library? Something that can send/receive or even periodically check for mails</p>",
            "content_type": "text/html",
            "display_recipient": "python",
            "flags": [
                "read",
                "historical"
            ],
            "id": 216498714,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20338,
            "sender_email": "imran@imranmalek.com",
            "sender_full_name": "Imran Malek (he) (W1'20)",
            "sender_id": 361178,
            "sender_realm_str": "recurse",
            "stream_id": 19044,
            "subject": "email",
            "submessages": [],
            "timestamp": 1605201288,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/1588fc084a150438206141abca2a434daa4c8fa5?x=x&version=2",
            "client": "website",
            "content": "<p>I don't have one, but I am curious to hear about how others library compares to the one included in the python library - I might decide at some point to write my own email client, so yeah...!</p>",
            "content_type": "text/html",
            "display_recipient": "python",
            "flags": [
                "read",
                "historical"
            ],
            "id": 216502739,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20338,
            "sender_email": "finartcialist@gmail.com",
            "sender_full_name": "Edith Viau (she) (F2'20)",
            "sender_id": 341049,
            "sender_realm_str": "recurse",
            "stream_id": 19044,
            "subject": "email",
            "submessages": [],
            "timestamp": 1605203134,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/50c0f109320065168bd7a918c9f5e205?d=identicon&version=1",
            "client": "ZulipElectron",
            "content": "<p>Oh I didn't realize one was included - I should have googled first :)</p>",
            "content_type": "text/html",
            "display_recipient": "python",
            "flags": [
                "read",
                "historical"
            ],
            "id": 216503150,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20338,
            "sender_email": "imran@imranmalek.com",
            "sender_full_name": "Imran Malek (he) (W1'20)",
            "sender_id": 361178,
            "sender_realm_str": "recurse",
            "stream_id": 19044,
            "subject": "email",
            "submessages": [],
            "timestamp": 1605203347,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/541aab26abf25ac195df55d7e6c0f2daf3f00c70?x=x&version=1",
            "client": "website",
            "content": "<p><a href=\"https://www.youtube.com/watch?v=B4GQCBBsuNU\">https://www.youtube.com/watch?v=B4GQCBBsuNU</a></p>\n<div class=\"youtube-video message_inline_image\"><a data-id=\"B4GQCBBsuNU\" href=\"https://www.youtube.com/watch?v=B4GQCBBsuNU\"><img src=\"https://i.ytimg.com/vi/B4GQCBBsuNU/default.jpg\"></a></div>",
            "content_type": "text/html",
            "display_recipient": "python",
            "flags": [
                "read",
                "historical"
            ],
            "id": 216510310,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20338,
            "sender_email": "sumanah@fastmail.com",
            "sender_full_name": "Sumana Harihareswara (she) (F2'14)",
            "sender_id": 2909,
            "sender_realm_str": "recurse",
            "stream_id": 19044,
            "subject": "pip",
            "submessages": [],
            "timestamp": 1605206595,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/541aab26abf25ac195df55d7e6c0f2daf3f00c70?x=x&version=1",
            "client": "website",
            "content": "<p>We've released pip 20.3 beta 1 and now's a good time to test it - this video explains why.</p>",
            "content_type": "text/html",
            "display_recipient": "python",
            "flags": [
                "read",
                "historical"
            ],
            "id": 216510335,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20338,
            "sender_email": "sumanah@fastmail.com",
            "sender_full_name": "Sumana Harihareswara (she) (F2'14)",
            "sender_id": 2909,
            "sender_realm_str": "recurse",
            "stream_id": 19044,
            "subject": "pip",
            "submessages": [],
            "timestamp": 1605206614,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/2dd869aa22bdb3491ea3727890869a8f?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-id=\"361178\">@Imran Malek (he) (W1'20)</span>  here's an example using the standard Python libraries <code>smtplib</code> and <code>email</code>: <a href=\"https://gitlab.com/tkuriyama/pixelpusher-admin/-/blob/master/src/email_lib.py\">https://gitlab.com/tkuriyama/pixelpusher-admin/-/blob/master/src/email_lib.py</a></p>",
            "content_type": "text/html",
            "display_recipient": "python",
            "flags": [
                "read",
                "historical"
            ],
            "id": 216668292,
            "is_me_message": false,
            "last_edit_timestamp": 1605299271,
            "reactions": [],
            "recipient_id": 20338,
            "sender_email": "taro.kuriyama@gmail.com",
            "sender_full_name": "Taro Kuriyama (he) (F1'20)",
            "sender_id": 327353,
            "sender_realm_str": "recurse",
            "stream_id": 19044,
            "subject": "email",
            "submessages": [],
            "timestamp": 1605299246,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/ee0ddeb6695d909dc44e4ccc9fc543c7b494c7d0?x=x&version=2",
            "client": "website",
            "content": "<p>I'm on Windows (also familiar working on Ubuntu), and realizing I don't know which of the several possible python locations on my computer makes the most sense for installing Flask - it's my first time using it! (or any web framework beyond RShiny). Would love to hear if one makes workflows meaningfully easier, or if they'd all work fine. </p>\n<p>Options:</p>\n<ul>\n<li>1 - Through Windows Subsystem for Linux, I have Ubuntu and python 3.8.2 installed, can create a directory,  use <code> python3 -m venv [name]</code> and install Flask </li>\n<li>2 - Through Anaconda, I have python 3.8.3 installed, and created a new environment with Flask, and can launch VS Code or terminal from there</li>\n<li>3 - Windows is also prompting me to install python 3.8 from the  Windows App store, which is a third potential  location, and could again use <code> python3 -m venv [name]</code></li>\n</ul>",
            "content_type": "text/html",
            "display_recipient": "python",
            "flags": [
                "read",
                "historical"
            ],
            "id": 217043049,
            "is_me_message": false,
            "last_edit_timestamp": 1605637800,
            "reactions": [],
            "recipient_id": 20338,
            "sender_email": "danammiller360@gmail.com",
            "sender_full_name": "Dana Miller (she) (F2'20)",
            "sender_id": 342383,
            "sender_realm_str": "recurse",
            "stream_id": 19044,
            "subject": "Locations for Flask on Windows",
            "submessages": [],
            "timestamp": 1605637782,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/7857f26c1ef2e9bdbfa843f9087710f7?d=identicon&version=1",
            "client": "ZulipMobile",
            "content": "<p>These days i don\u2019t think it makes much difference in terms of what will be possible and the answer is contingent on what you want to do. WSL makes sense if whatever you\u2019re trying to use with flask isn\u2019t available on windows or you\u2019re used to a linux development environment and don\u2019t mind the awkwardness of working accross the wsl/windows boundary. Anaconda makes sense if you want to use a library that is packaged there. The native microsoft <a href=\"http://python.org\">python.org</a> or windows app store one will also work fine probably, many things are pip installable these days.</p>",
            "content_type": "text/html",
            "display_recipient": "python",
            "flags": [
                "read",
                "historical"
            ],
            "id": 217043947,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20338,
            "sender_email": "nathan12343@gmail.com",
            "sender_full_name": "Nathan Goldbaum (he) (S1'19)",
            "sender_id": 221814,
            "sender_realm_str": "recurse",
            "stream_id": 19044,
            "subject": "Locations for Flask on Windows",
            "submessages": [],
            "timestamp": 1605638138,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/ee0ddeb6695d909dc44e4ccc9fc543c7b494c7d0?x=x&version=2",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-id=\"221814\">@Nathan Goldbaum (he) (S1'19)</span>  thanks for such a quick response <span aria-label=\"pray\" class=\"emoji emoji-1f64f\" role=\"img\" title=\"pray\">:pray:</span> </p>\n<p>For option 1, I was under the impression that python3 <em>includes</em> venv support, but I'm prompted to install: </p>\n<div class=\"codehilite\"><pre><span></span><code>The virtual environment was not created successfully because ensurepip is not\navailable.  On Debian/Ubuntu systems, you need to install the python3-venv\npackage using the following command.\n\n    apt-get install python3-venv\n\nYou may need to use sudo with that command.  After installing the python3-venv\npackage, recreate your virtual environment.\n</code></pre></div>\n<p>I can do this, but if I already need to install <code>venv</code> does this mean I might as well install a newer tool like <code>Pipenv</code> , eg per <a href=\"https://dev.to/py3course/setting-up-a-python-environment-in-2020-3e9e\">these</a> instructions?</p>",
            "content_type": "text/html",
            "display_recipient": "python",
            "flags": [
                "read",
                "historical"
            ],
            "id": 217044633,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20338,
            "sender_email": "danammiller360@gmail.com",
            "sender_full_name": "Dana Miller (she) (F2'20)",
            "sender_id": 342383,
            "sender_realm_str": "recurse",
            "stream_id": 19044,
            "subject": "Locations for Flask on Windows",
            "submessages": [],
            "timestamp": 1605638438,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/7857f26c1ef2e9bdbfa843f9087710f7?d=identicon&version=1",
            "client": "ZulipMobile",
            "content": "<p>debian patched (some say broke) upstream python and removed it</p>",
            "content_type": "text/html",
            "display_recipient": "python",
            "flags": [
                "read",
                "historical"
            ],
            "id": 217044738,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20338,
            "sender_email": "nathan12343@gmail.com",
            "sender_full_name": "Nathan Goldbaum (he) (S1'19)",
            "sender_id": 221814,
            "sender_realm_str": "recurse",
            "stream_id": 19044,
            "subject": "Locations for Flask on Windows",
            "submessages": [],
            "timestamp": 1605638484,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/7857f26c1ef2e9bdbfa843f9087710f7?d=identicon&version=1",
            "client": "ZulipMobile",
            "content": "<p>i don\u2019t use pipenv personally</p>",
            "content_type": "text/html",
            "display_recipient": "python",
            "flags": [
                "read",
                "historical"
            ],
            "id": 217044779,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20338,
            "sender_email": "nathan12343@gmail.com",
            "sender_full_name": "Nathan Goldbaum (he) (S1'19)",
            "sender_id": 221814,
            "sender_realm_str": "recurse",
            "stream_id": 19044,
            "subject": "Locations for Flask on Windows",
            "submessages": [],
            "timestamp": 1605638504,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/7857f26c1ef2e9bdbfa843f9087710f7?d=identicon&version=1",
            "client": "ZulipMobile",
            "content": "<p>if you want to use it don\u2019t let it not being built in to python stop you</p>",
            "content_type": "text/html",
            "display_recipient": "python",
            "flags": [
                "read",
                "historical"
            ],
            "id": 217044823,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20338,
            "sender_email": "nathan12343@gmail.com",
            "sender_full_name": "Nathan Goldbaum (he) (S1'19)",
            "sender_id": 221814,
            "sender_realm_str": "recurse",
            "stream_id": 19044,
            "subject": "Locations for Flask on Windows",
            "submessages": [],
            "timestamp": 1605638519,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/7857f26c1ef2e9bdbfa843f9087710f7?d=identicon&version=1",
            "client": "ZulipMobile",
            "content": "<p>while it\u2019s true that python is \u201cbatteries included\u201d, a lot of those batteries have community-developed replacements or alternatives</p>",
            "content_type": "text/html",
            "display_recipient": "python",
            "flags": [
                "read",
                "historical"
            ],
            "id": 217044960,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20338,
            "sender_email": "nathan12343@gmail.com",
            "sender_full_name": "Nathan Goldbaum (he) (S1'19)",
            "sender_id": 221814,
            "sender_realm_str": "recurse",
            "stream_id": 19044,
            "subject": "Locations for Flask on Windows",
            "submessages": [],
            "timestamp": 1605638573,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/7857f26c1ef2e9bdbfa843f9087710f7?d=identicon&version=1",
            "client": "ZulipMobile",
            "content": "<p>and since they aren\u2019t locked into python\u2019s release cadence and relative conservatism, they are often superior</p>",
            "content_type": "text/html",
            "display_recipient": "python",
            "flags": [
                "read",
                "historical"
            ],
            "id": 217045270,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20338,
            "sender_email": "nathan12343@gmail.com",
            "sender_full_name": "Nathan Goldbaum (he) (S1'19)",
            "sender_id": 221814,
            "sender_realm_str": "recurse",
            "stream_id": 19044,
            "subject": "Locations for Flask on Windows",
            "submessages": [],
            "timestamp": 1605638730,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/7857f26c1ef2e9bdbfa843f9087710f7?d=identicon&version=1",
            "client": "ZulipMobile",
            "content": "<p>and these days things are a lot easier to install than, say, 10 years ago before the wheel format existed</p>",
            "content_type": "text/html",
            "display_recipient": "python",
            "flags": [
                "read",
                "historical"
            ],
            "id": 217045310,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20338,
            "sender_email": "nathan12343@gmail.com",
            "sender_full_name": "Nathan Goldbaum (he) (S1'19)",
            "sender_id": 221814,
            "sender_realm_str": "recurse",
            "stream_id": 19044,
            "subject": "Locations for Flask on Windows",
            "submessages": [],
            "timestamp": 1605638759,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/7857f26c1ef2e9bdbfa843f9087710f7?d=identicon&version=1",
            "client": "ZulipMobile",
            "content": "<p>especially on windows</p>",
            "content_type": "text/html",
            "display_recipient": "python",
            "flags": [
                "read",
                "historical"
            ],
            "id": 217045362,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20338,
            "sender_email": "nathan12343@gmail.com",
            "sender_full_name": "Nathan Goldbaum (he) (S1'19)",
            "sender_id": 221814,
            "sender_realm_str": "recurse",
            "stream_id": 19044,
            "subject": "Locations for Flask on Windows",
            "submessages": [],
            "timestamp": 1605638768,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/ee0ddeb6695d909dc44e4ccc9fc543c7b494c7d0?x=x&version=2",
            "client": "website",
            "content": "<p>Thanks again. For anyone else working on figuring this out, I decided to go back to a pure Windows approach (partly since not sure how I'd use a web browser inside Windows Subsystem for Linux), tried installing pipenv per their <a href=\"https://pipenv.pypa.io/en/latest/install/#id2\">docs</a>, and ultimately went back to venv.</p>\n<p>I think the pipenv install issue could have been addressed by adding userpath to PATH (per error message below), but at this point I want to stay focused on Flask compared to install rabbit holes</p>\n<div class=\"codehilite\"><pre><span></span><code> WARNING: The script userpath.exe is installed in &#39;C:\\Users\\dmmma\\AppData\\Roaming\\Python\\Python38\\Scripts&#39; which is not on PATH.\n  Consider adding this directory to PATH or, if you prefer to suppress this warning, use --no-warn-script-location.\n  WARNING: The script pipx.exe is installed in &#39;C:\\Users\\dmmma\\AppData\\Roaming\\Python\\Python38\\Scripts&#39; which is not on PATH.\nSuccessfully installed argcomplete-1.12.1 pipx-0.15.6.0 userpath-1.4.1\nPS C:\\Users\\dmmma&gt; pipx install pipenv\npipx : The term &#39;pipx&#39; is not recognized as the name of a cmdlet, function, script file, or operable program. Check the spelling of\nthe name, or if a path was included, verify that the path is correct and try again.\nAt line:1 char:1\n+ pipx install pipenv\n+ ~~~~\n    + CategoryInfo          : ObjectNotFound: (pipx:String) [], CommandNotFoundException\n    + FullyQualifiedErrorId : CommandNotFoundException\n</code></pre></div>",
            "content_type": "text/html",
            "display_recipient": "python",
            "flags": [
                "read",
                "historical"
            ],
            "id": 217049387,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20338,
            "sender_email": "danammiller360@gmail.com",
            "sender_full_name": "Dana Miller (she) (F2'20)",
            "sender_id": 342383,
            "sender_realm_str": "recurse",
            "stream_id": 19044,
            "subject": "Locations for Flask on Windows",
            "submessages": [],
            "timestamp": 1605640816,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/50c0f109320065168bd7a918c9f5e205?d=identicon&version=1",
            "client": "ZulipElectron",
            "content": "<p>Windows is so screwy with python installs. Anaconda even has a separate command \"conda init powershell\" which tries to plug all this together</p>",
            "content_type": "text/html",
            "display_recipient": "python",
            "flags": [
                "read",
                "historical"
            ],
            "id": 217050364,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20338,
            "sender_email": "imran@imranmalek.com",
            "sender_full_name": "Imran Malek (he) (W1'20)",
            "sender_id": 361178,
            "sender_realm_str": "recurse",
            "stream_id": 19044,
            "subject": "Locations for Flask on Windows",
            "submessages": [],
            "timestamp": 1605641303,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/50c0f109320065168bd7a918c9f5e205?d=identicon&version=1",
            "client": "ZulipElectron",
            "content": "<p>Does anyone have a Python style guide/PEP 8 \"Cheat Sheet\" that they recommend? I want something to print and stick next to my monitor for reference if possible</p>",
            "content_type": "text/html",
            "display_recipient": "python",
            "flags": [
                "read",
                "historical"
            ],
            "id": 217050455,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20338,
            "sender_email": "imran@imranmalek.com",
            "sender_full_name": "Imran Malek (he) (W1'20)",
            "sender_id": 361178,
            "sender_realm_str": "recurse",
            "stream_id": 19044,
            "subject": "Style Guide",
            "submessages": [],
            "timestamp": 1605641370,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/7857f26c1ef2e9bdbfa843f9087710f7?d=identicon&version=1",
            "client": "ZulipMobile",
            "content": "<p>i don\u2019t have a cheat sheet, but my approach to this is to make my editor run black on the file whenever i save it to disk</p>",
            "content_type": "text/html",
            "display_recipient": "python",
            "flags": [
                "read",
                "historical"
            ],
            "id": 217051000,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20338,
            "sender_email": "nathan12343@gmail.com",
            "sender_full_name": "Nathan Goldbaum (he) (S1'19)",
            "sender_id": 221814,
            "sender_realm_str": "recurse",
            "stream_id": 19044,
            "subject": "Style Guide",
            "submessages": [],
            "timestamp": 1605641641,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/7857f26c1ef2e9bdbfa843f9087710f7?d=identicon&version=1",
            "client": "ZulipMobile",
            "content": "<p>you have to be ok with your code editor rewriting code underneath you though :)</p>",
            "content_type": "text/html",
            "display_recipient": "python",
            "flags": [
                "read",
                "historical"
            ],
            "id": 217051099,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20338,
            "sender_email": "nathan12343@gmail.com",
            "sender_full_name": "Nathan Goldbaum (he) (S1'19)",
            "sender_id": 221814,
            "sender_realm_str": "recurse",
            "stream_id": 19044,
            "subject": "Style Guide",
            "submessages": [],
            "timestamp": 1605641678,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/50c0f109320065168bd7a918c9f5e205?d=identicon&version=1",
            "client": "ZulipElectron",
            "content": "<p><span class=\"user-mention silent\" data-user-id=\"221814\">Nathan Goldbaum (he) (S1'19)</span> <a href=\"#narrow/stream/19044-python/topic/Style.20Guide/near/217051099\">said</a>:</p>\n<blockquote>\n<p>you have to be ok with your code editor rewriting code underneath you though :)</p>\n</blockquote>\n<p>Is this the \"black\" you're referring to? Pardon my ignorance: <a href=\"http://black.readthedocs.io\">black.readthedocs.io</a></p>",
            "content_type": "text/html",
            "display_recipient": "python",
            "flags": [
                "read",
                "historical"
            ],
            "id": 217051141,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "+1",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "jacoblevgw@gmail.com",
                        "full_name": "Jacob Lev Goldman-Wetlzer (he) (m2'20)",
                        "id": 264901
                    },
                    "user_id": 264901
                }
            ],
            "recipient_id": 20338,
            "sender_email": "imran@imranmalek.com",
            "sender_full_name": "Imran Malek (he) (W1'20)",
            "sender_id": 361178,
            "sender_realm_str": "recurse",
            "stream_id": 19044,
            "subject": "Style Guide",
            "submessages": [],
            "timestamp": 1605641699,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/7857f26c1ef2e9bdbfa843f9087710f7?d=identicon&version=1",
            "client": "ZulipMobile",
            "content": "<p>yup!</p>",
            "content_type": "text/html",
            "display_recipient": "python",
            "flags": [
                "read",
                "historical"
            ],
            "id": 217052609,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20338,
            "sender_email": "nathan12343@gmail.com",
            "sender_full_name": "Nathan Goldbaum (he) (S1'19)",
            "sender_id": 221814,
            "sender_realm_str": "recurse",
            "stream_id": 19044,
            "subject": "Style Guide",
            "submessages": [],
            "timestamp": 1605642444,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/50c0f109320065168bd7a918c9f5e205?d=identicon&version=1",
            "client": "ZulipElectron",
            "content": "<p>I'll give it a try, thanks <span class=\"user-mention\" data-user-id=\"221814\">@Nathan Goldbaum (he) (S1'19)</span> !</p>",
            "content_type": "text/html",
            "display_recipient": "python",
            "flags": [
                "read",
                "historical"
            ],
            "id": 217052633,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f40d",
                    "emoji_name": "snake",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "nathan12343@gmail.com",
                        "full_name": "Nathan Goldbaum (he) (S1'19)",
                        "id": 221814
                    },
                    "user_id": 221814
                }
            ],
            "recipient_id": 20338,
            "sender_email": "imran@imranmalek.com",
            "sender_full_name": "Imran Malek (he) (W1'20)",
            "sender_id": 361178,
            "sender_realm_str": "recurse",
            "stream_id": 19044,
            "subject": "Style Guide",
            "submessages": [],
            "timestamp": 1605642459,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/a6a0ff0a4a9a86ae7bc4524453d439bd?d=identicon&version=1",
            "client": "website",
            "content": "<p>Seconding, I also enjoy using <code>black</code> to format my python code so I don't have to. Two other formatting tools I enjoy: </p>\n<ul>\n<li><a href=\"https://github.com/myint/docformatter\">docformatter</a> to get nice consistent docstrings</li>\n<li><a href=\"https://pycqa.github.io/isort/\">isort</a> to sort the imports at the top of my python files so they're alphabet and organized into project related import and general imports</li>\n</ul>",
            "content_type": "text/html",
            "display_recipient": "python",
            "flags": [
                "read",
                "historical"
            ],
            "id": 217062569,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20338,
            "sender_email": "annie.cherk@gmail.com",
            "sender_full_name": "Annie Cherkaev (she/they) (m4'18)",
            "sender_id": 9502,
            "sender_realm_str": "recurse",
            "stream_id": 19044,
            "subject": "Style Guide",
            "submessages": [],
            "timestamp": 1605647115,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/a6a0ff0a4a9a86ae7bc4524453d439bd?d=identicon&version=1",
            "client": "website",
            "content": "<blockquote>\n<p>you have to be ok with your code editor rewriting code underneath you though :)</p>\n</blockquote>\n<p>I don't have my formatters (and linters) run on save, but I have a command that I run to reformat all my files whenever I'm ready to do so, so that's another option.</p>",
            "content_type": "text/html",
            "display_recipient": "python",
            "flags": [
                "read",
                "historical"
            ],
            "id": 217062716,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20338,
            "sender_email": "annie.cherk@gmail.com",
            "sender_full_name": "Annie Cherkaev (she/they) (m4'18)",
            "sender_id": 9502,
            "sender_realm_str": "recurse",
            "stream_id": 19044,
            "subject": "Style Guide",
            "submessages": [],
            "timestamp": 1605647188,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/5f0d83f1f8dbe978ecbb0e11f0ec669c?d=identicon&version=1",
            "client": "ZulipElectron",
            "content": "<p><span class=\"user-mention\" data-user-id=\"361178\">@Imran Malek (he) (W1'20)</span> if you want something more simpler, I would suggest to use flake8 linter. Easily configurable with most editors. It will warn you about stylistic deviations from pep8 and you can follow or ignore it(based on your personal preference).</p>\n<p>You will also get better at styling your code accordingly over time.</p>",
            "content_type": "text/html",
            "display_recipient": "python",
            "flags": [
                "read",
                "historical"
            ],
            "id": 217093928,
            "is_me_message": false,
            "last_edit_timestamp": 1605674578,
            "reactions": [],
            "recipient_id": 20338,
            "sender_email": "weirdmailid@gmail.com",
            "sender_full_name": "Yasharth Choudhary (he) (W1'20)",
            "sender_id": 360487,
            "sender_realm_str": "recurse",
            "stream_id": 19044,
            "subject": "Style Guide",
            "submessages": [],
            "timestamp": 1605671949,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/50c0f109320065168bd7a918c9f5e205?d=identicon&version=1",
            "client": "ZulipElectron",
            "content": "<p>Thanks <span class=\"user-mention\" data-user-id=\"360487\">@Yasharth Choudhary (he) (W1'20)</span> ! I'll give it a shot</p>",
            "content_type": "text/html",
            "display_recipient": "python",
            "flags": [
                "read",
                "historical"
            ],
            "id": 217134890,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20338,
            "sender_email": "imran@imranmalek.com",
            "sender_full_name": "Imran Malek (he) (W1'20)",
            "sender_id": 361178,
            "sender_realm_str": "recurse",
            "stream_id": 19044,
            "subject": "Style Guide",
            "submessages": [],
            "timestamp": 1605706723,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/bb70fabdfe4cd05efdbd460db10bcb5b37b77f49?x=x&version=1",
            "client": "website",
            "content": "<p>IIRC, PEP8 and black have a large overlap but neither is contained in the other. So for maximum strictness, you could use both <img alt=\":shruggies:\" class=\"emoji\" src=\"https://zulip-avatars.s3.amazonaws.com/13/emoji/images/1179.png\" title=\"shruggies\"></p>",
            "content_type": "text/html",
            "display_recipient": "python",
            "flags": [
                "read",
                "historical"
            ],
            "id": 217139630,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20338,
            "sender_email": "dleonardotn@gmail.com",
            "sender_full_name": "Leo Torres (he) (SP2'16)",
            "sender_id": 9247,
            "sender_realm_str": "recurse",
            "stream_id": 19044,
            "subject": "Style Guide",
            "submessages": [],
            "timestamp": 1605709167,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/bb70fabdfe4cd05efdbd460db10bcb5b37b77f49?x=x&version=1",
            "client": "website",
            "content": "<p>(I use both)</p>",
            "content_type": "text/html",
            "display_recipient": "python",
            "flags": [
                "read",
                "historical"
            ],
            "id": 217139645,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20338,
            "sender_email": "dleonardotn@gmail.com",
            "sender_full_name": "Leo Torres (he) (SP2'16)",
            "sender_id": 9247,
            "sender_realm_str": "recurse",
            "stream_id": 19044,
            "subject": "Style Guide",
            "submessages": [],
            "timestamp": 1605709176,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/50c0f109320065168bd7a918c9f5e205?d=identicon&version=1",
            "client": "ZulipElectron",
            "content": "<p>Interesting... this is all part of my quest to graduate from my current \"spaghetti against the wall\" programming style</p>",
            "content_type": "text/html",
            "display_recipient": "python",
            "flags": [
                "read",
                "historical"
            ],
            "id": 217139773,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20338,
            "sender_email": "imran@imranmalek.com",
            "sender_full_name": "Imran Malek (he) (W1'20)",
            "sender_id": 361178,
            "sender_realm_str": "recurse",
            "stream_id": 19044,
            "subject": "Style Guide",
            "submessages": [],
            "timestamp": 1605709233,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/7857f26c1ef2e9bdbfa843f9087710f7?d=identicon&version=1",
            "client": "ZulipMobile",
            "content": "<p>flake8 is a combo of two checkers called <code>pep8</code> (just for pep8 issues) and <code>pyflakes</code> (for more general python code smells). I\u2019d definitely suggest using flake8 mostly for the pyflakes checks since it will prevent you from common python footguns like trying to use a variable you haven\u2019t defined yet</p>",
            "content_type": "text/html",
            "display_recipient": "python",
            "flags": [
                "read",
                "historical"
            ],
            "id": 217141764,
            "is_me_message": false,
            "last_edit_timestamp": 1605710343,
            "reactions": [],
            "recipient_id": 20338,
            "sender_email": "nathan12343@gmail.com",
            "sender_full_name": "Nathan Goldbaum (he) (S1'19)",
            "sender_id": 221814,
            "sender_realm_str": "recurse",
            "stream_id": 19044,
            "subject": "Style Guide",
            "submessages": [],
            "timestamp": 1605710104,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/7857f26c1ef2e9bdbfa843f9087710f7?d=identicon&version=1",
            "client": "ZulipMobile",
            "content": "<p>i even have an integration with my editor that makes it so flake8 runs as i type code</p>",
            "content_type": "text/html",
            "display_recipient": "python",
            "flags": [
                "read",
                "historical"
            ],
            "id": 217141810,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20338,
            "sender_email": "nathan12343@gmail.com",
            "sender_full_name": "Nathan Goldbaum (he) (S1'19)",
            "sender_id": 221814,
            "sender_realm_str": "recurse",
            "stream_id": 19044,
            "subject": "Style Guide",
            "submessages": [],
            "timestamp": 1605710126,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/7857f26c1ef2e9bdbfa843f9087710f7?d=identicon&version=1",
            "client": "ZulipMobile",
            "content": "<p>so if i type something that is a flake8 error, as soon as I type it the error gets underlined in red and I can move my cursor to it to get more info</p>",
            "content_type": "text/html",
            "display_recipient": "python",
            "flags": [
                "read",
                "historical"
            ],
            "id": 217141917,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20338,
            "sender_email": "nathan12343@gmail.com",
            "sender_full_name": "Nathan Goldbaum (he) (S1'19)",
            "sender_id": 221814,
            "sender_realm_str": "recurse",
            "stream_id": 19044,
            "subject": "Style Guide",
            "submessages": [],
            "timestamp": 1605710164,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/7857f26c1ef2e9bdbfa843f9087710f7?d=identicon&version=1",
            "client": "ZulipMobile",
            "content": "<p>In fact you asked earlier in the thread about ways to slowly improve your ability to \u201cnaturally\u201d<br>\nwrite pep8 code, having your editor run flake8 in the background is a good way to do that as you\u2019ll get instant visual feedback that you wrote something that broke a style rule</p>",
            "content_type": "text/html",
            "display_recipient": "python",
            "flags": [
                "read",
                "historical"
            ],
            "id": 217142449,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20338,
            "sender_email": "nathan12343@gmail.com",
            "sender_full_name": "Nathan Goldbaum (he) (S1'19)",
            "sender_id": 221814,
            "sender_realm_str": "recurse",
            "stream_id": 19044,
            "subject": "Style Guide",
            "submessages": [],
            "timestamp": 1605710404,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/7857f26c1ef2e9bdbfa843f9087710f7?d=identicon&version=1",
            "client": "ZulipMobile",
            "content": "<p>i used flycheck on emacs to set that up in my setup, your editor likely has something similar</p>",
            "content_type": "text/html",
            "display_recipient": "python",
            "flags": [
                "read",
                "historical"
            ],
            "id": 217142542,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20338,
            "sender_email": "nathan12343@gmail.com",
            "sender_full_name": "Nathan Goldbaum (he) (S1'19)",
            "sender_id": 221814,
            "sender_realm_str": "recurse",
            "stream_id": 19044,
            "subject": "Style Guide",
            "submessages": [],
            "timestamp": 1605710444,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/50c0f109320065168bd7a918c9f5e205?d=identicon&version=1",
            "client": "ZulipElectron",
            "content": "<p>Nice! I just kicked on flake8 in vscode and have autosave enabled so it'll alert me on save, not as I write unfortunately via flycheck - there's probably a vscode extension for it</p>",
            "content_type": "text/html",
            "display_recipient": "python",
            "flags": [
                "read",
                "historical"
            ],
            "id": 217142639,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20338,
            "sender_email": "imran@imranmalek.com",
            "sender_full_name": "Imran Malek (he) (W1'20)",
            "sender_id": 361178,
            "sender_realm_str": "recurse",
            "stream_id": 19044,
            "subject": "Style Guide",
            "submessages": [],
            "timestamp": 1605710489,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/50c0f109320065168bd7a918c9f5e205?d=identicon&version=1",
            "client": "ZulipElectron",
            "content": "<p>I really appreciate you guiding me through all this, Nathan!</p>",
            "content_type": "text/html",
            "display_recipient": "python",
            "flags": [
                "read",
                "historical"
            ],
            "id": 217142674,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20338,
            "sender_email": "imran@imranmalek.com",
            "sender_full_name": "Imran Malek (he) (W1'20)",
            "sender_id": 361178,
            "sender_realm_str": "recurse",
            "stream_id": 19044,
            "subject": "Style Guide",
            "submessages": [],
            "timestamp": 1605710503,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/7857f26c1ef2e9bdbfa843f9087710f7?d=identicon&version=1",
            "client": "ZulipMobile",
            "content": "<p>another nice way to handle this is to add a test to your code that checks to see whether black, flake8, or whatever other linter you want to use have any output and fail if they do, telling you to fix the lints that the linters found</p>",
            "content_type": "text/html",
            "display_recipient": "python",
            "flags": [
                "read",
                "historical"
            ],
            "id": 217143200,
            "is_me_message": false,
            "last_edit_timestamp": 1605710832,
            "reactions": [],
            "recipient_id": 20338,
            "sender_email": "nathan12343@gmail.com",
            "sender_full_name": "Nathan Goldbaum (he) (S1'19)",
            "sender_id": 221814,
            "sender_realm_str": "recurse",
            "stream_id": 19044,
            "subject": "Style Guide",
            "submessages": [],
            "timestamp": 1605710730,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/7857f26c1ef2e9bdbfa843f9087710f7?d=identicon&version=1",
            "client": "ZulipMobile",
            "content": "<p>here\u2019s how i did that in one of my projects: <a href=\"https://github.com/yt-project/unyt/blob/master/unyt/tests/test_linters.py\">https://github.com/yt-project/unyt/blob/master/unyt/tests/test_linters.py</a></p>",
            "content_type": "text/html",
            "display_recipient": "python",
            "flags": [
                "read",
                "historical"
            ],
            "id": 217143374,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20338,
            "sender_email": "nathan12343@gmail.com",
            "sender_full_name": "Nathan Goldbaum (he) (S1'19)",
            "sender_id": 221814,
            "sender_realm_str": "recurse",
            "stream_id": 19044,
            "subject": "Style Guide",
            "submessages": [],
            "timestamp": 1605710790,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/50c0f109320065168bd7a918c9f5e205?d=identicon&version=1",
            "client": "ZulipElectron",
            "content": "<p>That reminds me, I have to still learn about writing and running tests - it's one of those things I never got around to because most of my programs have been little toy programs</p>",
            "content_type": "text/html",
            "display_recipient": "python",
            "flags": [
                "read",
                "historical"
            ],
            "id": 217143561,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20338,
            "sender_email": "imran@imranmalek.com",
            "sender_full_name": "Imran Malek (he) (W1'20)",
            "sender_id": 361178,
            "sender_realm_str": "recurse",
            "stream_id": 19044,
            "subject": "Style Guide",
            "submessages": [],
            "timestamp": 1605710883,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/7857f26c1ef2e9bdbfa843f9087710f7?d=identicon&version=1",
            "client": "ZulipMobile",
            "content": "<p>yeah the tests help more on bigger projects, especially if you don\u2019t control the editor setups of other contributors</p>",
            "content_type": "text/html",
            "display_recipient": "python",
            "flags": [
                "read",
                "historical"
            ],
            "id": 217143660,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20338,
            "sender_email": "nathan12343@gmail.com",
            "sender_full_name": "Nathan Goldbaum (he) (S1'19)",
            "sender_id": 221814,
            "sender_realm_str": "recurse",
            "stream_id": 19044,
            "subject": "Style Guide",
            "submessages": [],
            "timestamp": 1605710924,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/ee0ddeb6695d909dc44e4ccc9fc543c7b494c7d0?x=x&version=2",
            "client": "website",
            "content": "<p>Following this thread since  I've also been trying out both pylint and flake8 in VS Code for python, and just learned how to explicitly flag a certain line of code to <em>not</em> be checked for certain errors. I'm not sure if this is considered good practice, but is described in flake8 docs <a href=\"https://flake8.pycqa.org/en/3.1.1/user/ignoring-errors.html#in-line-ignoring-errors\">here</a>, and I've found in useful eg to get tests to pass where a tutorial explains 'usually we never import libraries at the bottom of a file, but in this specific case it's appropriate practice' <a href=\"/user_uploads/13/yl5w-DgUmHa-UIXkHgMdjdOu/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/13/yl5w-DgUmHa-UIXkHgMdjdOu/image.png\" title=\"image.png\"><img src=\"/user_uploads/13/yl5w-DgUmHa-UIXkHgMdjdOu/image.png\"></a></div>",
            "content_type": "text/html",
            "display_recipient": "python",
            "flags": [
                "read",
                "historical"
            ],
            "id": 217151792,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20338,
            "sender_email": "danammiller360@gmail.com",
            "sender_full_name": "Dana Miller (she) (F2'20)",
            "sender_id": 342383,
            "sender_realm_str": "recurse",
            "stream_id": 19044,
            "subject": "Style Guide",
            "submessages": [],
            "timestamp": 1605714137,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/5f0d83f1f8dbe978ecbb0e11f0ec669c?d=identicon&version=1",
            "client": "ZulipElectron",
            "content": "<p>I just ignore flake8 warnings in these kind of one-off scenarios rather than configuring it.  Maybe, I'm just being lazy. As for it being a good or bad practice, ultimately you will be the judge. Linter is there just to guide you.  Just keep tweaking it until it works for you.</p>",
            "content_type": "text/html",
            "display_recipient": "python",
            "flags": [
                "read",
                "historical"
            ],
            "id": 217152949,
            "is_me_message": false,
            "last_edit_timestamp": 1605714664,
            "reactions": [],
            "recipient_id": 20338,
            "sender_email": "weirdmailid@gmail.com",
            "sender_full_name": "Yasharth Choudhary (he) (W1'20)",
            "sender_id": 360487,
            "sender_realm_str": "recurse",
            "stream_id": 19044,
            "subject": "Style Guide",
            "submessages": [],
            "timestamp": 1605714619,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/5f0d83f1f8dbe978ecbb0e11f0ec669c?d=identicon&version=1",
            "client": "ZulipElectron",
            "content": "<p>I especially get annoyed by the <a href=\"https://www.flake8rules.com/rules/E501.html\">line too long rule</a>. So, I've disabled it globally.</p>",
            "content_type": "text/html",
            "display_recipient": "python",
            "flags": [
                "read",
                "historical"
            ],
            "id": 217153949,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20338,
            "sender_email": "weirdmailid@gmail.com",
            "sender_full_name": "Yasharth Choudhary (he) (W1'20)",
            "sender_id": 360487,
            "sender_realm_str": "recurse",
            "stream_id": 19044,
            "subject": "Style Guide",
            "submessages": [],
            "timestamp": 1605714977,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/50c0f109320065168bd7a918c9f5e205?d=identicon&version=1",
            "client": "ZulipElectron",
            "content": "<p>I was today years old when I learned that you could have <code>else</code> blocks after <code>for</code> loops</p>",
            "content_type": "text/html",
            "display_recipient": "python",
            "flags": [
                "read",
                "historical"
            ],
            "id": 217155984,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "18813",
                    "emoji_name": "cake-tiered",
                    "reaction_type": "realm_emoji",
                    "user": {
                        "email": "victoria@unconventionaldata.ai",
                        "full_name": "Victoria Levchenko (she) (W2'19)",
                        "id": 198466
                    },
                    "user_id": 198466
                },
                {
                    "emoji_code": "15890",
                    "emoji_name": "same",
                    "reaction_type": "realm_emoji",
                    "user": {
                        "email": "paul.gowder@gmail.com",
                        "full_name": "Paul Gowder (S2'17)",
                        "id": 101322
                    },
                    "user_id": 101322
                },
                {
                    "emoji_code": "15890",
                    "emoji_name": "same",
                    "reaction_type": "realm_emoji",
                    "user": {
                        "email": "dabbagh.aos@gmail.com",
                        "full_name": "Aos Dabbagh (S2'17)",
                        "id": 101320
                    },
                    "user_id": 101320
                }
            ],
            "recipient_id": 20338,
            "sender_email": "imran@imranmalek.com",
            "sender_full_name": "Imran Malek (he) (W1'20)",
            "sender_id": 361178,
            "sender_realm_str": "recurse",
            "stream_id": 19044,
            "subject": "else",
            "submessages": [],
            "timestamp": 1605715642,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/50c0f109320065168bd7a918c9f5e205?d=identicon&version=1",
            "client": "ZulipElectron",
            "content": "<p>Sorry about bugging out early <span class=\"user-mention\" data-user-id=\"341026\">@Bud B Coulson (he) (F2'20)</span>  - I appreciate the review, it actually makes a bit more sense to me given the utility example of running more complex operations during list comprehension</p>",
            "content_type": "text/html",
            "display_recipient": "python",
            "flags": [
                "read",
                "historical"
            ],
            "id": 217171257,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20338,
            "sender_email": "imran@imranmalek.com",
            "sender_full_name": "Imran Malek (he) (W1'20)",
            "sender_id": 361178,
            "sender_realm_str": "recurse",
            "stream_id": 19044,
            "subject": "walrus",
            "submessages": [],
            "timestamp": 1605721645,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/a8755809612b3b2e2b30b65bd71786d8?d=identicon&version=1",
            "client": "ZulipMobile",
            "content": "<p><span class=\"user-mention\" data-user-id=\"361178\">@Imran Malek (he) (W1'20)</span> I wrote a (somewhat) popular style guide on Python called \"The Elements of Python Style\". You can find it freely available on GitHub here:</p>\n<p><a href=\"https://github.com/amontalenti/elements-of-python-style/blob/master/README.md\">https://github.com/amontalenti/elements-of-python-style/blob/master/README.md</a></p>\n<p>I'm also putting some nights &amp; weekend time into improving it further, there is some chatter on the issues / PRs about this.</p>",
            "content_type": "text/html",
            "display_recipient": "python",
            "flags": [
                "read",
                "historical"
            ],
            "id": 217185238,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20338,
            "sender_email": "andrew.montalenti@gmail.com",
            "sender_full_name": "Andrew Montalenti (he) (m7'19)",
            "sender_id": 247727,
            "sender_realm_str": "recurse",
            "stream_id": 19044,
            "subject": "Style Guide",
            "submessages": [],
            "timestamp": 1605727970,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/50c0f109320065168bd7a918c9f5e205?d=identicon&version=1",
            "client": "ZulipElectron",
            "content": "<p>Thanks, <span class=\"user-mention\" data-user-id=\"247727\">@Andrew Montalenti (he) (m7'19)</span> - I'll add it to my RC reading list!</p>",
            "content_type": "text/html",
            "display_recipient": "python",
            "flags": [
                "read",
                "historical"
            ],
            "id": 217185354,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20338,
            "sender_email": "imran@imranmalek.com",
            "sender_full_name": "Imran Malek (he) (W1'20)",
            "sender_id": 361178,
            "sender_realm_str": "recurse",
            "stream_id": 19044,
            "subject": "Style Guide",
            "submessages": [],
            "timestamp": 1605728023,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/ae3ded07fcf2d22039e8bdb6a9ff9249ddec42e8?x=x&version=5",
            "client": "website",
            "content": "<p>For any large codebase worked on by multiple people independently (at work, for instance), I highly recommend <code>black</code>. It's fast, consistent, and reliable. It's also largely non-configurable. That's a deal-breaker for my personal Python code, because I have my own preferred style, but in a group setting it means avoiding a vast range of nasty and totally opinionated arguments.</p>\n<p>A few months ago I managed to get a large work codebase reformatted with <code>black</code> running in CI. The technical side of this is simple and painless, but the social side is arduous. The big obstacle is reactionaries with bad taste in code. Programmers mostly do not like to be told to change their code, or even to have their code changed for them. But a codebase with a uniform style is much easier to navigate.</p>\n<p>If anyone has been trying to introduce <code>black</code> into a setting like that and running into problems, let me know and I can advise further.</p>",
            "content_type": "text/html",
            "display_recipient": "python",
            "flags": [
                "read",
                "historical"
            ],
            "id": 217191179,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "18882",
                    "emoji_name": "wow-circle",
                    "reaction_type": "realm_emoji",
                    "user": {
                        "email": "victoria@unconventionaldata.ai",
                        "full_name": "Victoria Levchenko (she) (W2'19)",
                        "id": 198466
                    },
                    "user_id": 198466
                },
                {
                    "emoji_code": "12795",
                    "emoji_name": "plus1",
                    "reaction_type": "realm_emoji",
                    "user": {
                        "email": "simon@simonmweber.com",
                        "full_name": "Simon Weber (he) (S'13)",
                        "id": 2111
                    },
                    "user_id": 2111
                }
            ],
            "recipient_id": 20338,
            "sender_email": "nicholasdrozd@gmail.com",
            "sender_full_name": "Nick Drozd (SP2'16)",
            "sender_id": 9260,
            "sender_realm_str": "recurse",
            "stream_id": 19044,
            "subject": "Style Guide",
            "submessages": [],
            "timestamp": 1605730795,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/c2004dab6a5b7f7ddfca0ea3dcf1b312cf28113d?x=x&version=2",
            "client": "ZulipElectron",
            "content": "<p>I'm building up a search endpoint for a hotel reservation system api project. The endpoint takes a few parameters and runs a query on the room inventory table to see which hotels have available rooms for the duration of stay.  The query against the room inventory table involves 3 CTEs. I've decided to pass the query statement as a string to SqlAlchemy core instead of using the ORM\u2014seemed tedious to attempt to translate the query into ORM syntax. Thoughts on whether this approach is in-line with best practices? Am I headed for SqlAlchemy hell for my sins?</p>\n<div class=\"codehilite\"><pre><span></span><code>stmt = (\n            &quot;with hotel_dates as ( &quot;\n                &quot;select distinct hotel_id, date &quot;\n                &quot;from room_inventory &quot;\n                f&quot;where date between &#39;{checkin}&#39; and &#39;{lastnight}&#39; &quot;\n                &quot;and (max_rooms_available - rooms_reserved) &gt; 0 &quot;\n                f&quot;and room_type in {room_types} &quot;\n                f&quot;and hotel_id in {hotel_ids} &quot;\n                &quot;order by hotel_id, date &quot;\n                &quot;), &quot;\n            &quot;hotel_day_count as ( &quot;\n                &quot;select distinct hotel_id, count(date) over(PARTITION BY hotel_id) as day_count &quot;\n                &quot;from hotel_dates &quot;\n                &quot;), &quot;\n            &quot;available_hotels as ( &quot;\n                &quot;select hotel_id &quot;\n                &quot;from hotel_day_count &quot;\n                f&quot;where day_count = {day_count} &quot;\n                &quot;) &quot;\n            &quot;select hotels.* &quot;\n            &quot;from available_hotels left join hotels on available_hotels.hotel_id = hotels.id; &quot;\n        )\n\nresult = db.engine.execute(stmt).fetchall()\n</code></pre></div>",
            "content_type": "text/html",
            "display_recipient": "python",
            "flags": [
                "read",
                "historical"
            ],
            "id": 217221005,
            "is_me_message": false,
            "last_edit_timestamp": 1605750889,
            "reactions": [],
            "recipient_id": 20338,
            "sender_email": "pattersoncharlesl@gmail.com",
            "sender_full_name": "Charlie Patterson (he) (SP2'20)",
            "sender_id": 279703,
            "sender_realm_str": "recurse",
            "stream_id": 19044,
            "subject": "SqlAlchemy Complex Query Best Practices",
            "submessages": [],
            "timestamp": 1605750845,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/8ef0cc9607b07f392f70560a43dbbb2d0efd6328?x=x&version=1",
            "client": "website",
            "content": "<p>I don't get the hate against inline SQL - I think it's perfectly fine especially for complex queries with potential ORM-generated performance pitfalls.</p>",
            "content_type": "text/html",
            "display_recipient": "python",
            "flags": [
                "read",
                "historical"
            ],
            "id": 217222962,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20338,
            "sender_email": "brian.kihoon.lee@gmail.com",
            "sender_full_name": "Brian Lee (F1'16)",
            "sender_id": 100043,
            "sender_realm_str": "recurse",
            "stream_id": 19044,
            "subject": "SqlAlchemy Complex Query Best Practices",
            "submessages": [],
            "timestamp": 1605753057,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/8ef0cc9607b07f392f70560a43dbbb2d0efd6328?x=x&version=1",
            "client": "website",
            "content": "<p>my only nitpick here is that f-strings can lead to injection vulnerabilities</p>",
            "content_type": "text/html",
            "display_recipient": "python",
            "flags": [
                "read",
                "historical"
            ],
            "id": 217222972,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20338,
            "sender_email": "brian.kihoon.lee@gmail.com",
            "sender_full_name": "Brian Lee (F1'16)",
            "sender_id": 100043,
            "sender_realm_str": "recurse",
            "stream_id": 19044,
            "subject": "SqlAlchemy Complex Query Best Practices",
            "submessages": [],
            "timestamp": 1605753068,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/8ef0cc9607b07f392f70560a43dbbb2d0efd6328?x=x&version=1",
            "client": "website",
            "content": "<p>there's probably a proper way to template your queries while escaping inputs</p>",
            "content_type": "text/html",
            "display_recipient": "python",
            "flags": [
                "read",
                "historical"
            ],
            "id": 217222981,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20338,
            "sender_email": "brian.kihoon.lee@gmail.com",
            "sender_full_name": "Brian Lee (F1'16)",
            "sender_id": 100043,
            "sender_realm_str": "recurse",
            "stream_id": 19044,
            "subject": "SqlAlchemy Complex Query Best Practices",
            "submessages": [],
            "timestamp": 1605753082,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/c2004dab6a5b7f7ddfca0ea3dcf1b312cf28113d?x=x&version=2",
            "client": "ZulipElectron",
            "content": "<p>Thanks and  good catch. Wasn't thinking about security. I think there is a safe way to pass params using the text() function. Will take a look.</p>",
            "content_type": "text/html",
            "display_recipient": "python",
            "flags": [
                "read",
                "historical"
            ],
            "id": 217224632,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20338,
            "sender_email": "pattersoncharlesl@gmail.com",
            "sender_full_name": "Charlie Patterson (he) (SP2'20)",
            "sender_id": 279703,
            "sender_realm_str": "recurse",
            "stream_id": 19044,
            "subject": "SqlAlchemy Complex Query Best Practices",
            "submessages": [],
            "timestamp": 1605754836,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/c2004dab6a5b7f7ddfca0ea3dcf1b312cf28113d?x=x&version=2",
            "client": "ZulipElectron",
            "content": "<p>This <a href=\"https://stackoverflow.com/questions/19314342/python-sqlalchemy-pass-parameters-in-connection-execute\">stackoverflow</a> post helped me do the trick.</p>",
            "content_type": "text/html",
            "display_recipient": "python",
            "flags": [
                "read",
                "historical"
            ],
            "id": 217225412,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20338,
            "sender_email": "pattersoncharlesl@gmail.com",
            "sender_full_name": "Charlie Patterson (he) (SP2'20)",
            "sender_id": 279703,
            "sender_realm_str": "recurse",
            "stream_id": 19044,
            "subject": "SqlAlchemy Complex Query Best Practices",
            "submessages": [],
            "timestamp": 1605755796,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/ee0ddeb6695d909dc44e4ccc9fc543c7b494c7d0?x=x&version=2",
            "client": "website",
            "content": "<p>Here's the example we talked through in the demo <a href=\"/user_uploads/13/ZZozRgvl6bbheqk5IeEOLo5r/image.png\">image.png</a> - thanks again <span class=\"user-mention\" data-user-id=\"341026\">@Bud B Coulson (he) (F2'20)</span></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/13/ZZozRgvl6bbheqk5IeEOLo5r/image.png\" title=\"image.png\"><img src=\"/user_uploads/13/ZZozRgvl6bbheqk5IeEOLo5r/image.png\"></a></div>",
            "content_type": "text/html",
            "display_recipient": "python",
            "flags": [
                "read",
                "historical"
            ],
            "id": 217300341,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20338,
            "sender_email": "danammiller360@gmail.com",
            "sender_full_name": "Dana Miller (she) (F2'20)",
            "sender_id": 342383,
            "sender_realm_str": "recurse",
            "stream_id": 19044,
            "subject": "walrus",
            "submessages": [],
            "timestamp": 1605805771,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/29581c8174d213b28a7fd1d59b1ce0d8?d=identicon&version=1",
            "client": "website",
            "content": "<p>not exactly python related but golang also make use of the walrus pretty heavily</p>",
            "content_type": "text/html",
            "display_recipient": "python",
            "flags": [
                "read",
                "historical"
            ],
            "id": 217434051,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f419",
                    "emoji_name": "octopus",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "danammiller360@gmail.com",
                        "full_name": "Dana Miller (she) (F2'20)",
                        "id": 342383
                    },
                    "user_id": 342383
                }
            ],
            "recipient_id": 20338,
            "sender_email": "pstefek2@gmail.com",
            "sender_full_name": "Peter Stefek (he) (F2'20)",
            "sender_id": 329808,
            "sender_realm_str": "recurse",
            "stream_id": 19044,
            "subject": "walrus",
            "submessages": [],
            "timestamp": 1605893825,
            "topic_links": [],
            "type": "stream"
        }
    ],
    "msg": "",
    "result": "success"
}
