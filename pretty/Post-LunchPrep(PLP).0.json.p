{
    "anchor": 0,
    "found_anchor": false,
    "found_newest": true,
    "found_oldest": true,
    "history_limited": false,
    "messages": [
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/1000/1cd87892343b6620726b112851f0b66cbda4a68f?x=x&version=4",
            "client": "Internal",
            "content": "<p>Welcome to <a class=\"stream\" data-stream-id=\"144212\" href=\"/#narrow/stream/144212-Post-Lunch-Prep-.28PLP.29\">#Post-Lunch Prep (PLP)</a>.</p>\n<p><strong>Description</strong>: Join this stream if you'd like to be kept up-to-date on our daily (Mon-Thur) optional interview-style questions. We pair on questions from leetcode, and spend a time-boxed 1h15min on working through and sharing solutions. Feel free to participate remotely too, and post your solutions in here.</p>",
            "content_type": "text/html",
            "display_recipient": "Post-Lunch Prep (PLP)",
            "flags": [
                "read",
                "historical"
            ],
            "id": 134998733,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 183179,
            "sender_email": "welcome-bot@zulip.com",
            "sender_full_name": "Welcome Bot",
            "sender_id": 100007,
            "sender_realm_str": "zulipcore",
            "stream_id": 144212,
            "subject": "hello",
            "submessages": [],
            "timestamp": 1538430539,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/ff35ce36c86dfb01da582bed81b61ac4c14d2096?x=x&version=4",
            "client": "ZulipElectron",
            "content": "<p>hey everyone! Please feel free to unsub from this if you're not interested, but from now on all new Recursers will be default subbed to this stream, and we'll be moving all PLP discussions here, instead of in <a class=\"stream\" data-stream-id=\"19042\" href=\"/#narrow/stream/19042-397-Bridge\">#397 Bridge</a> . Thanks!</p>",
            "content_type": "text/html",
            "display_recipient": "Post-Lunch Prep (PLP)",
            "flags": [
                "read",
                "historical"
            ],
            "id": 134998808,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f44f",
                    "emoji_name": "clap",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "adampalay@gmail.com",
                        "full_name": "Adam Palay (he) (SP2'18)",
                        "id": 111960
                    },
                    "user_id": 111960
                },
                {
                    "emoji_code": "1f60e",
                    "emoji_name": "sunglasses",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "adampalay@gmail.com",
                        "full_name": "Adam Palay (he) (SP2'18)",
                        "id": 111960
                    },
                    "user_id": 111960
                },
                {
                    "emoji_code": "1f6e0",
                    "emoji_name": "working_on_it",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "adampalay@gmail.com",
                        "full_name": "Adam Palay (he) (SP2'18)",
                        "id": 111960
                    },
                    "user_id": 111960
                },
                {
                    "emoji_code": "1f389",
                    "emoji_name": "tada",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "adampalay@gmail.com",
                        "full_name": "Adam Palay (he) (SP2'18)",
                        "id": 111960
                    },
                    "user_id": 111960
                },
                {
                    "emoji_code": "1f389",
                    "emoji_name": "tada",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "williamsykesfisher@gmail.com",
                        "full_name": "William Sykes Fisher (he) (F2'18)",
                        "id": 129933
                    },
                    "user_id": 129933
                },
                {
                    "emoji_code": "1f6e0",
                    "emoji_name": "working_on_it",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "hi@charlietran.com",
                        "full_name": "Charlie Tran (he) (F1'18)",
                        "id": 124995
                    },
                    "user_id": 124995
                },
                {
                    "emoji_code": "1f60e",
                    "emoji_name": "sunglasses",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "hi@charlietran.com",
                        "full_name": "Charlie Tran (he) (F1'18)",
                        "id": 124995
                    },
                    "user_id": 124995
                },
                {
                    "emoji_code": "1f389",
                    "emoji_name": "tada",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "hi@charlietran.com",
                        "full_name": "Charlie Tran (he) (F1'18)",
                        "id": 124995
                    },
                    "user_id": 124995
                },
                {
                    "emoji_code": "1f44f",
                    "emoji_name": "clap",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "hi@charlietran.com",
                        "full_name": "Charlie Tran (he) (F1'18)",
                        "id": 124995
                    },
                    "user_id": 124995
                },
                {
                    "emoji_code": "1f6e0",
                    "emoji_name": "working_on_it",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "aaron_wood@protonmail.com",
                        "full_name": "Aaron Wood (he) (F1'18)",
                        "id": 125145
                    },
                    "user_id": 125145
                },
                {
                    "emoji_code": "1f389",
                    "emoji_name": "tada",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "nekanek@protonmail.com",
                        "full_name": "Marina Inina (she) (F2'18)",
                        "id": 129939
                    },
                    "user_id": 129939
                },
                {
                    "emoji_code": "1f60e",
                    "emoji_name": "sunglasses",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "KeenanKomoto@gmail.com",
                        "full_name": "Keenan Tsuruichi Komoto (he) (F2'18)",
                        "id": 129934
                    },
                    "user_id": 129934
                },
                {
                    "emoji_code": "1f44f",
                    "emoji_name": "clap",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "john.danger.xia@gmail.com",
                        "full_name": "John Xia (he) (F2'18)",
                        "id": 8472
                    },
                    "user_id": 8472
                },
                {
                    "emoji_code": "1f389",
                    "emoji_name": "tada",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "john.danger.xia@gmail.com",
                        "full_name": "John Xia (he) (F2'18)",
                        "id": 8472
                    },
                    "user_id": 8472
                },
                {
                    "emoji_code": "1f44f",
                    "emoji_name": "clap",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "mattg@leema.org",
                        "full_name": "Matthew Graham (he) (F1'18)",
                        "id": 125276
                    },
                    "user_id": 125276
                }
            ],
            "recipient_id": 183179,
            "sender_email": "sheridan.kates@gmail.com",
            "sender_full_name": "Sheridan Kates (she) (F1'18)",
            "sender_id": 125277,
            "sender_realm_str": "recurse",
            "stream_id": 144212,
            "subject": "hello",
            "submessages": [],
            "timestamp": 1538430624,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/6145d0683a46b1516d14fa79f4980dfa1143bdcc?x=x&version=9",
            "client": "website",
            "content": "<p>welcome to today's PLP!!  the problems will be projected in the presentation space around lunchtime.  if you're interested in pairing, come to the presentation space at 1:45pm to find a partner.  if you're interested in post-PLP discussion (PPLPD), meet back at the presentation space at 2:45pm.  see you there!!</p>\n<p>topic: <br>\nDynamic Programming</p>\n<p>resource: <br>\n<a href=\"https://www.topcoder.com/community/competitive-programming/tutorials/dynamic-programming-from-novice-to-advanced/\" target=\"_blank\" title=\"https://www.topcoder.com/community/competitive-programming/tutorials/dynamic-programming-from-novice-to-advanced/\">https://www.topcoder.com/community/competitive-programming/tutorials/dynamic-programming-from-novice-to-advanced/</a></p>\n<p>problems:<br>\n<a href=\"https://leetcode.com/problems/house-robber/description/\" target=\"_blank\" title=\"https://leetcode.com/problems/house-robber/description/\">https://leetcode.com/problems/house-robber/description/</a><br>\n<a href=\"https://leetcode.com/problems/unique-paths/description/\" target=\"_blank\" title=\"https://leetcode.com/problems/unique-paths/description/\">https://leetcode.com/problems/unique-paths/description/</a></p>\n<p>host:<br>\n<span class=\"user-mention\" data-user-id=\"125145\">@Aaron Wood (F1'18)</span> (contact me if you have any questions, concerns, or feedback regarding today's or other days' topics.)</p>",
            "content_type": "text/html",
            "display_recipient": "Post-Lunch Prep (PLP)",
            "flags": [
                "read",
                "historical"
            ],
            "id": 135043169,
            "is_me_message": false,
            "last_edit_timestamp": 1538493961,
            "reactions": [],
            "recipient_id": 183179,
            "sender_email": "aaron_wood@protonmail.com",
            "sender_full_name": "Aaron Wood (he) (F1'18)",
            "sender_id": 125145,
            "sender_realm_str": "recurse",
            "stream_id": 144212,
            "subject": "10 / 2 / 2018",
            "submessages": [],
            "timestamp": 1538493907,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/927039f8a9a749e3be410a6969f8e2e8175cedf4?x=x&version=2",
            "client": "website",
            "content": "<p>Problem 62. Unique Paths</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">class</span> <span class=\"nc\">Solution</span><span class=\"p\">(</span><span class=\"nb\">object</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"nf\">uniquePaths</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">m</span><span class=\"p\">,</span> <span class=\"n\">n</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">        :type m: int</span>\n<span class=\"sd\">        :type n: int</span>\n<span class=\"sd\">        :rtype: int</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"n\">M</span> <span class=\"o\">=</span> <span class=\"nb\">dict</span><span class=\"p\">()</span>\n        <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"n\">m</span><span class=\"p\">):</span>\n            <span class=\"n\">M</span><span class=\"p\">[(</span><span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">)]</span> <span class=\"o\">=</span> <span class=\"mi\">1</span>\n        <span class=\"k\">for</span> <span class=\"n\">j</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">):</span>\n            <span class=\"n\">M</span><span class=\"p\">[(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">j</span><span class=\"p\">)]</span> <span class=\"o\">=</span> <span class=\"mi\">1</span>\n        <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">m</span><span class=\"p\">):</span>\n            <span class=\"k\">for</span> <span class=\"n\">j</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">n</span><span class=\"p\">):</span>\n                <span class=\"n\">M</span><span class=\"p\">[(</span><span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"n\">j</span><span class=\"p\">)]</span> <span class=\"o\">=</span> <span class=\"n\">M</span><span class=\"p\">[(</span><span class=\"n\">i</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">j</span><span class=\"p\">)]</span> <span class=\"o\">+</span> <span class=\"n\">M</span><span class=\"p\">[(</span><span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"n\">j</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">)]</span>\n        <span class=\"k\">return</span> <span class=\"n\">M</span><span class=\"p\">[(</span><span class=\"n\">m</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">n</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">)]</span>\n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "Post-Lunch Prep (PLP)",
            "flags": [
                "read",
                "historical"
            ],
            "id": 135053232,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 183179,
            "sender_email": "gretchen.m.wright@gmail.com",
            "sender_full_name": "Gretchen Wright (she) (F2'18)",
            "sender_id": 130181,
            "sender_realm_str": "recurse",
            "stream_id": 144212,
            "subject": "10 / 2 / 2018",
            "submessages": [],
            "timestamp": 1538504056,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/927039f8a9a749e3be410a6969f8e2e8175cedf4?x=x&version=2",
            "client": "website",
            "content": "<p>Problem 198. House Robber</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">class</span> <span class=\"nc\">Solution</span><span class=\"p\">(</span><span class=\"nb\">object</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"nf\">rob</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">nums</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">        :type nums: List[int]</span>\n<span class=\"sd\">        :rtype: int</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">if</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">nums</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"mi\">0</span>\n        <span class=\"k\">if</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">nums</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"mi\">1</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"n\">nums</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n        <span class=\"n\">best</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">nums</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]]</span>\n        <span class=\"n\">best</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"nb\">max</span><span class=\"p\">(</span><span class=\"n\">nums</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"n\">nums</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]))</span>\n        <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">nums</span><span class=\"p\">)):</span>\n            <span class=\"n\">best</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"nb\">max</span><span class=\"p\">(</span><span class=\"n\">best</span><span class=\"p\">[</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">],</span> <span class=\"n\">best</span><span class=\"p\">[</span><span class=\"o\">-</span><span class=\"mi\">2</span><span class=\"p\">]</span> <span class=\"o\">+</span> <span class=\"n\">nums</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]))</span>\n        <span class=\"k\">return</span> <span class=\"n\">best</span><span class=\"p\">[</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">]</span>\n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "Post-Lunch Prep (PLP)",
            "flags": [
                "read",
                "historical"
            ],
            "id": 135053302,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 183179,
            "sender_email": "gretchen.m.wright@gmail.com",
            "sender_full_name": "Gretchen Wright (she) (F2'18)",
            "sender_id": 130181,
            "sender_realm_str": "recurse",
            "stream_id": 144212,
            "subject": "10 / 2 / 2018",
            "submessages": [],
            "timestamp": 1538504134,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/bcdd159d2e3c9a915a029aa7128f29cf?d=identicon&version=1",
            "client": "website",
            "content": "<p>House robbers w/ <span class=\"user-mention\" data-user-id=\"125145\">@Aaron Wood (F1'18)</span> </p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">class</span> <span class=\"nc\">Solution</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"nf\">rob</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">nums</span><span class=\"p\">):</span>\n        <span class=\"k\">if</span> <span class=\"n\">nums</span> <span class=\"o\">==</span> <span class=\"p\">[]:</span>\n            <span class=\"k\">return</span> <span class=\"mi\">0</span>\n        <span class=\"k\">if</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">nums</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"mi\">1</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"n\">nums</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n        <span class=\"k\">elif</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">nums</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"mi\">2</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"nb\">max</span><span class=\"p\">(</span><span class=\"n\">nums</span><span class=\"p\">)</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"n\">A</span><span class=\"p\">,</span> <span class=\"n\">sum_A</span><span class=\"p\">,</span> <span class=\"n\">B</span><span class=\"p\">,</span> <span class=\"n\">sum_B</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">],</span> <span class=\"n\">nums</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"n\">nums</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n            <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">,</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">nums</span><span class=\"p\">)</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"p\">):</span>\n                <span class=\"n\">A</span><span class=\"p\">,</span> <span class=\"n\">sum_A</span><span class=\"p\">,</span> <span class=\"n\">B</span><span class=\"p\">,</span> <span class=\"n\">sum_B</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">update_robbed_houses</span><span class=\"p\">(</span><span class=\"n\">nums</span><span class=\"p\">[:</span><span class=\"n\">i</span><span class=\"p\">],</span> <span class=\"n\">A</span><span class=\"p\">,</span> <span class=\"n\">sum_A</span><span class=\"p\">,</span> <span class=\"n\">B</span><span class=\"p\">,</span> <span class=\"n\">sum_B</span><span class=\"p\">)</span>\n            <span class=\"k\">return</span> <span class=\"nb\">max</span><span class=\"p\">(</span><span class=\"n\">sum_A</span><span class=\"p\">,</span> <span class=\"n\">sum_B</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">update_robbed_houses</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">nums</span><span class=\"p\">,</span> <span class=\"n\">A</span><span class=\"p\">,</span> <span class=\"n\">sum_A</span><span class=\"p\">,</span> <span class=\"n\">B</span><span class=\"p\">,</span> <span class=\"n\">sum_B</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">        A = optimal list of robbed houses in nums[:-1] if second-to-last house is robbed</span>\n<span class=\"sd\">        B = optimal list of robbed houses in nums[:-1] if not</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"n\">new_amount</span> <span class=\"o\">=</span> <span class=\"n\">nums</span><span class=\"p\">[</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">]</span>\n        <span class=\"n\">new_index</span> <span class=\"o\">=</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">nums</span><span class=\"p\">)</span> <span class=\"o\">-</span> <span class=\"mi\">1</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">sum_B</span> <span class=\"o\">+</span> <span class=\"n\">new_amount</span><span class=\"p\">)</span> <span class=\"o\">&gt;=</span> <span class=\"p\">(</span><span class=\"n\">sum_A</span> <span class=\"o\">-</span> <span class=\"n\">nums</span><span class=\"p\">[</span><span class=\"o\">-</span><span class=\"mi\">2</span><span class=\"p\">]</span> <span class=\"o\">+</span> <span class=\"n\">new_amount</span><span class=\"p\">):</span>\n            <span class=\"n\">new_A</span> <span class=\"o\">=</span> <span class=\"n\">B</span> <span class=\"o\">+</span> <span class=\"p\">[</span><span class=\"n\">new_index</span><span class=\"p\">]</span>\n            <span class=\"n\">new_sum_A</span> <span class=\"o\">=</span> <span class=\"n\">sum_B</span> <span class=\"o\">+</span> <span class=\"n\">new_amount</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"n\">new_A</span> <span class=\"o\">=</span> <span class=\"n\">A</span><span class=\"p\">[:</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">+</span> <span class=\"p\">[</span><span class=\"n\">new_index</span><span class=\"p\">]</span>\n            <span class=\"n\">new_sum_A</span> <span class=\"o\">=</span> <span class=\"n\">sum_A</span> <span class=\"o\">-</span> <span class=\"n\">nums</span><span class=\"p\">[</span><span class=\"o\">-</span><span class=\"mi\">2</span><span class=\"p\">]</span> <span class=\"o\">+</span> <span class=\"n\">new_amount</span>\n        <span class=\"n\">new_B</span> <span class=\"o\">=</span> <span class=\"n\">A</span>\n        <span class=\"n\">new_sum_B</span> <span class=\"o\">=</span> <span class=\"n\">sum_A</span>\n        <span class=\"k\">return</span> <span class=\"n\">new_A</span><span class=\"p\">,</span> <span class=\"n\">new_sum_A</span><span class=\"p\">,</span> <span class=\"n\">new_B</span><span class=\"p\">,</span> <span class=\"n\">new_sum_B</span>\n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "Post-Lunch Prep (PLP)",
            "flags": [
                "read",
                "historical"
            ],
            "id": 135056195,
            "is_me_message": false,
            "last_edit_timestamp": 1538506666,
            "reactions": [
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "+1",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "mattg@leema.org",
                        "full_name": "Matthew Graham (he) (F1'18)",
                        "id": 125276
                    },
                    "user_id": 125276
                }
            ],
            "recipient_id": 183179,
            "sender_email": "mganesh@wellesley.edu",
            "sender_full_name": "Mathangi (Maya) Ganesh (she) (F2'18)",
            "sender_id": 130478,
            "sender_realm_str": "recurse",
            "stream_id": 144212,
            "subject": "10 / 2 / 2018",
            "submessages": [],
            "timestamp": 1538506635,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/927039f8a9a749e3be410a6969f8e2e8175cedf4?x=x&version=2",
            "client": "website",
            "content": "<p>Closed form for Unique Paths:<br>\nN + M choose N, that is<br>\nC(N + M, N) = (N + M)! / (N! * M!) </p>\n<p>Reason: Express the path as a string of N + M characters where each character is 'D' (down) or 'R' (right). Then we choose N of those paths to be 'D' and the remaining ones are 'R' (unless I've flipped the dimensions).</p>",
            "content_type": "text/html",
            "display_recipient": "Post-Lunch Prep (PLP)",
            "flags": [
                "read",
                "historical"
            ],
            "id": 135057304,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 183179,
            "sender_email": "gretchen.m.wright@gmail.com",
            "sender_full_name": "Gretchen Wright (she) (F2'18)",
            "sender_id": 130181,
            "sender_realm_str": "recurse",
            "stream_id": 144212,
            "subject": "10 / 2 / 2018",
            "submessages": [],
            "timestamp": 1538507670,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/ca9f8cb0bcede6fa920c47295ad4e7a972c9f863?x=x&version=2",
            "client": "ZulipElectron",
            "content": "<p>oh i got (m+n-2) choose (m-1) ... is that different?</p>",
            "content_type": "text/html",
            "display_recipient": "Post-Lunch Prep (PLP)",
            "flags": [
                "read",
                "historical"
            ],
            "id": 135057870,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 183179,
            "sender_email": "chunli.developer@gmail.com",
            "sender_full_name": "Chun Li (he) (F2'18)",
            "sender_id": 129956,
            "sender_realm_str": "recurse",
            "stream_id": 144212,
            "subject": "10 / 2 / 2018",
            "submessages": [],
            "timestamp": 1538508261,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/ca9f8cb0bcede6fa920c47295ad4e7a972c9f863?x=x&version=2",
            "client": "ZulipElectron",
            "content": "<p>ironically calculating choose is slower</p>",
            "content_type": "text/html",
            "display_recipient": "Post-Lunch Prep (PLP)",
            "flags": [
                "read",
                "historical"
            ],
            "id": 135057890,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 183179,
            "sender_email": "chunli.developer@gmail.com",
            "sender_full_name": "Chun Li (he) (F2'18)",
            "sender_id": 129956,
            "sender_realm_str": "recurse",
            "stream_id": 144212,
            "subject": "10 / 2 / 2018",
            "submessages": [],
            "timestamp": 1538508278,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/ca9f8cb0bcede6fa920c47295ad4e7a972c9f863?x=x&version=2",
            "client": "ZulipElectron",
            "content": "<p>sorry <span class=\"user-mention\" data-user-id=\"130181\">@Gretchen Wright (F2'18)</span> i don't think your formula is right b/c you haven't filtered out the strings that don't bring you to the bottom-right corner. For example given m=2, n=2 you could choose all 4 strings as 'D': 'DDDD' (which isn't a valid path)</p>\n<p>EDIT: ^that's wrong b/c Gretchen is counting the correct number of D's to set so DDDD wouldn't even show up</p>",
            "content_type": "text/html",
            "display_recipient": "Post-Lunch Prep (PLP)",
            "flags": [
                "read",
                "historical"
            ],
            "id": 135058615,
            "is_me_message": false,
            "last_edit_timestamp": 1538518329,
            "reactions": [],
            "recipient_id": 183179,
            "sender_email": "chunli.developer@gmail.com",
            "sender_full_name": "Chun Li (he) (F2'18)",
            "sender_id": 129956,
            "sender_realm_str": "recurse",
            "stream_id": 144212,
            "subject": "10 / 2 / 2018",
            "submessages": [],
            "timestamp": 1538508905,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/7da8f8ef20569f6876aeb1188d2ebb6d41c6f842?x=x&version=2",
            "client": "ZulipElectron",
            "content": "<p>Came across this fantastic solution: </p>\n<div class=\"codehilite\"><pre><span></span>class Solution(object):\n    def uniquePaths(self, m, n):\n        return int(math.factorial(m+n-2)/math.factorial(m-1)/math.factorial(n-1))\n</pre></div>\n\n\n<p>Basically exactly what <span class=\"user-mention\" data-user-id=\"130181\">@Gretchen Wright (F2'18)</span>  has</p>",
            "content_type": "text/html",
            "display_recipient": "Post-Lunch Prep (PLP)",
            "flags": [
                "read",
                "historical"
            ],
            "id": 135062700,
            "is_me_message": false,
            "last_edit_timestamp": 1538513160,
            "reactions": [
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "+1",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "hi@charlietran.com",
                        "full_name": "Charlie Tran (he) (F1'18)",
                        "id": 124995
                    },
                    "user_id": 124995
                }
            ],
            "recipient_id": 183179,
            "sender_email": "KeenanKomoto@gmail.com",
            "sender_full_name": "Keenan Tsuruichi Komoto (he) (F2'18)",
            "sender_id": 129934,
            "sender_realm_str": "recurse",
            "stream_id": 144212,
            "subject": "10 / 2 / 2018",
            "submessages": [],
            "timestamp": 1538513090,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/7becb5bc5504919827409f72f5d193c5?d=identicon&version=1",
            "client": "website",
            "content": "<p>nice find <span class=\"user-mention\" data-user-id=\"129934\">@Keenan Tsuruichi Komoto (F2'18)</span>, where'd you see that?</p>",
            "content_type": "text/html",
            "display_recipient": "Post-Lunch Prep (PLP)",
            "flags": [
                "read",
                "historical"
            ],
            "id": 135062789,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 183179,
            "sender_email": "hi@charlietran.com",
            "sender_full_name": "Charlie Tran (he) (F1'18)",
            "sender_id": 124995,
            "sender_realm_str": "recurse",
            "stream_id": 144212,
            "subject": "10 / 2 / 2018",
            "submessages": [],
            "timestamp": 1538513190,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/7da8f8ef20569f6876aeb1188d2ebb6d41c6f842?x=x&version=2",
            "client": "ZulipElectron",
            "content": "<p>This blog: <a href=\"http://yueguo1217.com/leetcode-unique-paths-medium-28-in-python/\" target=\"_blank\" title=\"http://yueguo1217.com/leetcode-unique-paths-medium-28-in-python/\">http://yueguo1217.com/leetcode-unique-paths-medium-28-in-python/</a></p>",
            "content_type": "text/html",
            "display_recipient": "Post-Lunch Prep (PLP)",
            "flags": [
                "read",
                "historical"
            ],
            "id": 135062807,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 183179,
            "sender_email": "KeenanKomoto@gmail.com",
            "sender_full_name": "Keenan Tsuruichi Komoto (he) (F2'18)",
            "sender_id": 129934,
            "sender_realm_str": "recurse",
            "stream_id": 144212,
            "subject": "10 / 2 / 2018",
            "submessages": [],
            "timestamp": 1538513215,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/ff35ce36c86dfb01da582bed81b61ac4c14d2096?x=x&version=4",
            "client": "ZulipElectron",
            "content": "<p>wow thanks for sharing!</p>",
            "content_type": "text/html",
            "display_recipient": "Post-Lunch Prep (PLP)",
            "flags": [
                "read",
                "historical"
            ],
            "id": 135062938,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 183179,
            "sender_email": "sheridan.kates@gmail.com",
            "sender_full_name": "Sheridan Kates (she) (F1'18)",
            "sender_id": 125277,
            "sender_realm_str": "recurse",
            "stream_id": 144212,
            "subject": "10 / 2 / 2018",
            "submessages": [],
            "timestamp": 1538513323,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/7614b2155716cc9e51f8be991671ed44?d=identicon&version=1",
            "client": "ZulipElectron",
            "content": "<p>I finished our solution.  We solved it by mutual recursion but It is too slow to be accepted by leetcode.</p>\n<div class=\"codehilite\"><pre><span></span>class Solution:\n\n    def uniquePaths(self, m, n):\n\n        return self.proccessMove((0, 0), m - 1, n - 1)\n\n\n    def proccessMoves(self, arrMoves, m, n):\n\n        result = []\n\n        for move in arrMoves:\n            result.append(self.proccessMove(move, m, n))\n\n        return sum(result)\n\n    def proccessMove(self, move, m, n):\n\n        if self.solved(move, m, n):\n\n            return self.isPath(move, m, n)\n\n        return self.proccessMoves(self.generateMoves(move), m, n)\n\n    def generateMoves(self, move):\n\n        return [(move[0] + 1, move[1]), (move[0], move[1] + 1)]\n\n\n    def solved(self, move, m, n):\n        return move[0] == m and move[1] == n or (move[0] &gt; m or move[1] &gt; n)\n\n    def isPath(self, move, m, n):\n\n        if move[0] == m and move[1] == n:\n            return 1\n\n        return 0\n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "Post-Lunch Prep (PLP)",
            "flags": [
                "read",
                "historical"
            ],
            "id": 135063719,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 183179,
            "sender_email": "carl.schubert@gmail.com",
            "sender_full_name": "Carl Schubert (he) (F2'18)",
            "sender_id": 130326,
            "sender_realm_str": "recurse",
            "stream_id": 144212,
            "subject": "10 / 2 / 2018",
            "submessages": [],
            "timestamp": 1538514139,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/36716766e555f85a2c18cf8f358d6f63ccc077d9?x=x&version=2",
            "client": "website",
            "content": "<p>robber solution in leema. well maybe b/c leetcode still refuses to check leema. and syntax highlighting would be nice too</p>\n<div class=\"codehilite\"><pre><span></span>import list\n\nfunc count_most: (Int, [(Int, Int)])\n.houses: [Int]\n.house_count: Int\n.rob_streak: Int\n.subtotal: Int\n.past_robbed: [(Int, Int)]\n&gt;&gt;\n    match (houses, rob_streak)\n    |([], _) &gt;&gt; (subtotal, list::reverse(past_robbed))\n    |(_;tail, 1) &gt;&gt;\n        count_most(tail, house_count + 1, 0, subtotal, past_robbed)\n    |(head;tail, 0) &gt;&gt;\n        let nhouses2 := house_count + 1\n        let past_if_rob := (house_count, head);past_robbed\n        let subtotal_if_rob := subtotal + head\n        let (rob_total, houses_rob) :=\n            count_most(tail, nhouses2, 1, subtotal_if_rob, past_if_rob)\n        let (skip_total, houses_skip) :=\n            count_most(tail, nhouses2 + 1, 0, subtotal, past_robbed)\n        if\n        |skip_total &lt; rob_total &gt;&gt; (rob_total, houses_rob)\n        |else &gt;&gt; (skip_total, houses_skip)\n        --\n    --\n--\n\nfunc main() -&gt;\n    ## let d := [2,7,9,3,1]\n    let d := [2,1,1,3]\n\n    let (cash, houses) := count_most(d, 0, 0, 0, [])\n    print(&quot;robbed \\$$cash from houses: $houses\\n&quot;)\n--\n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "Post-Lunch Prep (PLP)",
            "flags": [
                "read",
                "historical"
            ],
            "id": 135066041,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 183179,
            "sender_email": "mattg@leema.org",
            "sender_full_name": "Matthew Graham (he) (F1'18)",
            "sender_id": 125276,
            "sender_realm_str": "recurse",
            "stream_id": 144212,
            "subject": "10 / 2 / 2018",
            "submessages": [],
            "timestamp": 1538516683,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/ca9f8cb0bcede6fa920c47295ad4e7a972c9f863?x=x&version=2",
            "client": "ZulipElectron",
            "content": "<p>Sorry actually after discussion <span class=\"user-mention\" data-user-id=\"130181\">@Gretchen Wright (F2'18)</span> 's logic is right but there is a small 1-off error:</p>\n<p>if you have a MxN box with say M=3 and N=2<br>\nS X X<br>\nX X F<br>\nThen the string length you actually want is M-1+N-1 or 3 in this case<br>\nThe number of D's you want is N-1 or 1 in this case<br>\nThis gives you the same formula</p>",
            "content_type": "text/html",
            "display_recipient": "Post-Lunch Prep (PLP)",
            "flags": [
                "read",
                "historical"
            ],
            "id": 135067131,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 183179,
            "sender_email": "chunli.developer@gmail.com",
            "sender_full_name": "Chun Li (he) (F2'18)",
            "sender_id": 129956,
            "sender_realm_str": "recurse",
            "stream_id": 144212,
            "subject": "10 / 2 / 2018",
            "submessages": [],
            "timestamp": 1538518290,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/927039f8a9a749e3be410a6969f8e2e8175cedf4?x=x&version=2",
            "client": "website",
            "content": "<p>Yes, I agree. Thanks for the correction, <span class=\"user-mention\" data-user-id=\"129956\">@Chun Li (F2'18)</span> !</p>",
            "content_type": "text/html",
            "display_recipient": "Post-Lunch Prep (PLP)",
            "flags": [
                "read",
                "historical"
            ],
            "id": 135067244,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 183179,
            "sender_email": "gretchen.m.wright@gmail.com",
            "sender_full_name": "Gretchen Wright (she) (F2'18)",
            "sender_id": 130181,
            "sender_realm_str": "recurse",
            "stream_id": 144212,
            "subject": "10 / 2 / 2018",
            "submessages": [],
            "timestamp": 1538518432,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/ff35ce36c86dfb01da582bed81b61ac4c14d2096?x=x&version=4",
            "client": "ZulipElectron",
            "content": "<p><span class=\"user-mention\" data-user-id=\"*\">@all</span> welcome to today's PLP!! the problems will be projected in the presentation space in a few minutes. if you're interested in pairing, come to the presentation space at 1:45pm to find a partner. if you're interested in post-PLP discussion (PPLPD), meet back at the presentation space at 2:45pm. see you there!!</p>\n<p>topic: <br>\nArrays, loosely :)</p>\n<p>problems:<br>\n<a href=\"https://leetcode.com/problems/find-all-duplicates-in-an-array/description/\" target=\"_blank\" title=\"https://leetcode.com/problems/find-all-duplicates-in-an-array/description/\">https://leetcode.com/problems/find-all-duplicates-in-an-array/description/</a> (medium difficulty level)<br>\n<a href=\"https://leetcode.com/problems/median-of-two-sorted-arrays/description/\" target=\"_blank\" title=\"https://leetcode.com/problems/median-of-two-sorted-arrays/description/\">https://leetcode.com/problems/median-of-two-sorted-arrays/description/</a> (hard level)</p>\n<p>host:<br>\n<span class=\"user-mention\" data-user-id=\"125277\">@Sheridan Kates (F1'18)</span>  (contact me if you have any questions, concerns, or feedback regarding today's or other days' topics.)</p>",
            "content_type": "text/html",
            "display_recipient": "Post-Lunch Prep (PLP)",
            "flags": [
                "read",
                "historical"
            ],
            "id": 135114616,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 183179,
            "sender_email": "sheridan.kates@gmail.com",
            "sender_full_name": "Sheridan Kates (she) (F1'18)",
            "sender_id": 125277,
            "sender_realm_str": "recurse",
            "stream_id": 144212,
            "subject": "03-Oct-2018",
            "submessages": [],
            "timestamp": 1538583613,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/ca9f8cb0bcede6fa920c47295ad4e7a972c9f863?x=x&version=2",
            "client": "ZulipElectron",
            "content": "<p>First problem in what i hope is O(n) time and not really constant space:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">class</span> <span class=\"nc\">Solution</span><span class=\"p\">(</span><span class=\"nb\">object</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"nf\">findDuplicates</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">nums</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">        :type nums: List[int]</span>\n<span class=\"sd\">        :rtype: List[int]</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"n\">answer</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n        <span class=\"k\">for</span> <span class=\"n\">idx</span><span class=\"p\">,</span> <span class=\"n\">n</span> <span class=\"ow\">in</span> <span class=\"nb\">enumerate</span><span class=\"p\">(</span><span class=\"n\">nums</span><span class=\"p\">):</span>\n            <span class=\"n\">index</span> <span class=\"o\">=</span> <span class=\"n\">nums</span><span class=\"p\">[</span><span class=\"n\">idx</span><span class=\"p\">]</span><span class=\"o\">-</span><span class=\"mi\">1</span>\n            <span class=\"k\">while</span> <span class=\"n\">nums</span><span class=\"p\">[</span><span class=\"n\">index</span><span class=\"p\">]</span> <span class=\"o\">!=</span> <span class=\"n\">index</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">:</span>\n                <span class=\"n\">tmp</span> <span class=\"o\">=</span> <span class=\"n\">nums</span><span class=\"p\">[</span><span class=\"n\">index</span><span class=\"p\">]</span>\n                <span class=\"n\">nums</span><span class=\"p\">[</span><span class=\"n\">index</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">nums</span><span class=\"p\">[</span><span class=\"n\">idx</span><span class=\"p\">]</span>\n                <span class=\"n\">nums</span><span class=\"p\">[</span><span class=\"n\">idx</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">tmp</span>\n                <span class=\"n\">index</span> <span class=\"o\">=</span> <span class=\"n\">nums</span><span class=\"p\">[</span><span class=\"n\">idx</span><span class=\"p\">]</span><span class=\"o\">-</span><span class=\"mi\">1</span>\n\n        <span class=\"c1\"># we need a second pass; it&#39;s possible we skipped over one when it got swapped by an unrelated number</span>\n        <span class=\"k\">for</span> <span class=\"n\">idx</span><span class=\"p\">,</span> <span class=\"n\">n</span> <span class=\"ow\">in</span> <span class=\"nb\">enumerate</span><span class=\"p\">(</span><span class=\"n\">nums</span><span class=\"p\">):</span>\n            <span class=\"n\">index</span> <span class=\"o\">=</span> <span class=\"n\">n</span><span class=\"o\">-</span><span class=\"mi\">1</span>\n            <span class=\"k\">if</span> <span class=\"n\">nums</span><span class=\"p\">[</span><span class=\"n\">index</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"n\">n</span> <span class=\"ow\">and</span> <span class=\"n\">idx</span> <span class=\"o\">!=</span> <span class=\"n\">index</span><span class=\"p\">:</span>\n                <span class=\"n\">answer</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">answer</span>\n</pre></div>\n\n\n<p>I do this by swapping in an element to it's indexed position i.e. the number 4 would be swapped into nums[3]. If nums[3] is already taken by a 4, then I know there is another one, and so I add it into the list.</p>\n<p>Not constant space b/c you still need space to store the solution, but looking at some of the other solutions it seems like everyone has this caveat.</p>\n<p>Linear time b/c every index can only be touched once by a swap, after which it's value is it's index+1 so it cannot be reupdated. Hence the first for loop should always be O(n) time.</p>",
            "content_type": "text/html",
            "display_recipient": "Post-Lunch Prep (PLP)",
            "flags": [
                "read",
                "historical"
            ],
            "id": 135117635,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 183179,
            "sender_email": "chunli.developer@gmail.com",
            "sender_full_name": "Chun Li (he) (F2'18)",
            "sender_id": 129956,
            "sender_realm_str": "recurse",
            "stream_id": 144212,
            "subject": "03-Oct-2018",
            "submessages": [],
            "timestamp": 1538586677,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/ca9f8cb0bcede6fa920c47295ad4e7a972c9f863?x=x&version=2",
            "client": "ZulipElectron",
            "content": "<p>The leetcode soln is also pretty clever so I would read it !</p>",
            "content_type": "text/html",
            "display_recipient": "Post-Lunch Prep (PLP)",
            "flags": [
                "read",
                "historical"
            ],
            "id": 135117660,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 183179,
            "sender_email": "chunli.developer@gmail.com",
            "sender_full_name": "Chun Li (he) (F2'18)",
            "sender_id": 129956,
            "sender_realm_str": "recurse",
            "stream_id": 144212,
            "subject": "03-Oct-2018",
            "submessages": [],
            "timestamp": 1538586709,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/ff35ce36c86dfb01da582bed81b61ac4c14d2096?x=x&version=4",
            "client": "ZulipElectron",
            "content": "<p>getting started in the presentation space in 2 min - join us if you want to get paired! <span class=\"user-mention\" data-user-id=\"*\">@stream</span></p>",
            "content_type": "text/html",
            "display_recipient": "Post-Lunch Prep (PLP)",
            "flags": [
                "read",
                "historical"
            ],
            "id": 135120185,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 183179,
            "sender_email": "sheridan.kates@gmail.com",
            "sender_full_name": "Sheridan Kates (she) (F1'18)",
            "sender_id": 125277,
            "sender_realm_str": "recurse",
            "stream_id": 144212,
            "subject": "03-Oct-2018",
            "submessages": [],
            "timestamp": 1538588645,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/23e1fe70d5308e1361010e0519c5d4ec36b53702?x=x&version=2",
            "client": "website",
            "content": "<p>Where is the leetcode soln? I'm starting to think that it's not possible to do it in O(n) runtime, O(1) space, but maybe I'm wrong?</p>",
            "content_type": "text/html",
            "display_recipient": "Post-Lunch Prep (PLP)",
            "flags": [
                "read",
                "historical"
            ],
            "id": 135122000,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 183179,
            "sender_email": "zichongkao@gmail.com",
            "sender_full_name": "Zi Chong Kao (he) (F1'18)",
            "sender_id": 125310,
            "sender_realm_str": "recurse",
            "stream_id": 144212,
            "subject": "03-Oct-2018",
            "submessages": [],
            "timestamp": 1538589966,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/23e1fe70d5308e1361010e0519c5d4ec36b53702?x=x&version=2",
            "client": "website",
            "content": "<p>Ok. I guess it is possible. Pretty cool indeed :)</p>",
            "content_type": "text/html",
            "display_recipient": "Post-Lunch Prep (PLP)",
            "flags": [
                "read",
                "historical"
            ],
            "id": 135122286,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 183179,
            "sender_email": "zichongkao@gmail.com",
            "sender_full_name": "Zi Chong Kao (he) (F1'18)",
            "sender_id": 125310,
            "sender_realm_str": "recurse",
            "stream_id": 144212,
            "subject": "03-Oct-2018",
            "submessages": [],
            "timestamp": 1538590225,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/725b72e62dee517d5a85bb050caf09b4a2ee775a?x=x&version=2",
            "client": "website",
            "content": "<p>Chun - you can get rid of the tmp by swapping using xor then i think it can be considered constant space</p>",
            "content_type": "text/html",
            "display_recipient": "Post-Lunch Prep (PLP)",
            "flags": [
                "read",
                "historical"
            ],
            "id": 135123589,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 183179,
            "sender_email": "heime.a@gmail.com",
            "sender_full_name": "Heime S Ashkenazie (F2'18)",
            "sender_id": 130406,
            "sender_realm_str": "recurse",
            "stream_id": 144212,
            "subject": "03-Oct-2018",
            "submessages": [],
            "timestamp": 1538591283,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/6145d0683a46b1516d14fa79f4980dfa1143bdcc?x=x&version=9",
            "client": "website",
            "content": "<p>@all Welcome to today's PLP!! the problems will be projected in the presentation space  around lunchtime. If you're interested in pairing, come to the presentation space at 1:45pm to find a partner. If you're interested in post-PLP discussion (PPLPD), meet back at the presentation space at 2:45pm. See you there!!</p>\n<p>topic: <br>\nHash tables</p>\n<p>resource:<br>\n<a href=\"https://www.hackerearth.com/practice/data-structures/hash-tables/basics-of-hash-tables/tutorial/\" target=\"_blank\" title=\"https://www.hackerearth.com/practice/data-structures/hash-tables/basics-of-hash-tables/tutorial/\">https://www.hackerearth.com/practice/data-structures/hash-tables/basics-of-hash-tables/tutorial/</a></p>\n<p>problems:<br>\n<a href=\"https://leetcode.com/problems/island-perimeter/description/\" target=\"_blank\" title=\"https://leetcode.com/problems/island-perimeter/description/\">https://leetcode.com/problems/island-perimeter/description/</a><br>\n<a href=\"https://leetcode.com/problems/daily-temperatures/description/\" target=\"_blank\" title=\"https://leetcode.com/problems/daily-temperatures/description/\">https://leetcode.com/problems/daily-temperatures/description/</a></p>\n<p>host:<br>\n<span class=\"user-mention\" data-user-id=\"125145\">@Aaron Wood (F1'18)</span> (Contact me if you have any questions, concerns, or feedback regarding today's or other days' topics.)</p>",
            "content_type": "text/html",
            "display_recipient": "Post-Lunch Prep (PLP)",
            "flags": [
                "read",
                "historical"
            ],
            "id": 135196499,
            "is_me_message": false,
            "last_edit_timestamp": 1538666796,
            "reactions": [],
            "recipient_id": 183179,
            "sender_email": "aaron_wood@protonmail.com",
            "sender_full_name": "Aaron Wood (he) (F1'18)",
            "sender_id": 125145,
            "sender_realm_str": "recurse",
            "stream_id": 144212,
            "subject": "Thursday, 4 Oct 2018",
            "submessages": [],
            "timestamp": 1538666778,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/6145d0683a46b1516d14fa79f4980dfa1143bdcc?x=x&version=9",
            "client": "website",
            "content": "<p>A <em>convoluted</em> solution (beating an impressive 2% of other python submissions) to the island perimeter problem brought to you by <span class=\"user-mention\" data-user-id=\"125145\">@Aaron Wood (F1'18)</span> <span class=\"user-mention\" data-user-id=\"130218\">@Adam Tigar (F2'18)</span> and <span class=\"user-mention\" data-user-id=\"129933\">@William Sykes Fisher (F2'18)</span> </p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">class</span> <span class=\"nc\">Solution</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"nf\">islandPerimeter</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">grid</span><span class=\"p\">):</span>\n        <span class=\"n\">perimeter</span> <span class=\"o\">=</span> <span class=\"mi\">1</span>\n        <span class=\"n\">gw</span> <span class=\"o\">=</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">grid</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">])</span>\n        <span class=\"n\">gh</span> <span class=\"o\">=</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">grid</span><span class=\"p\">)</span>\n        <span class=\"n\">cells</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">first_land</span><span class=\"p\">(</span><span class=\"n\">grid</span><span class=\"p\">,</span> <span class=\"n\">gw</span><span class=\"p\">,</span> <span class=\"n\">gh</span><span class=\"p\">)</span>\n        <span class=\"n\">nbhd</span><span class=\"p\">,</span> <span class=\"n\">additional_perimeter</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">good_neighbors</span><span class=\"p\">(</span><span class=\"n\">cells</span><span class=\"p\">,</span> <span class=\"nb\">set</span><span class=\"p\">(),</span> <span class=\"n\">grid</span><span class=\"p\">,</span> <span class=\"n\">gw</span><span class=\"p\">,</span> <span class=\"n\">gh</span><span class=\"p\">)</span>\n        <span class=\"n\">perimeter</span> <span class=\"o\">+=</span> <span class=\"n\">additional_perimeter</span>\n        <span class=\"k\">while</span> <span class=\"n\">nbhd</span> <span class=\"o\">!=</span> <span class=\"nb\">set</span><span class=\"p\">():</span>\n            <span class=\"n\">cells</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"n\">nbhd</span><span class=\"p\">,</span> <span class=\"n\">additional_perimeter</span><span class=\"p\">)</span> <span class=\"o\">=</span>\\\n                    <span class=\"n\">nbhd</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">good_neighbors</span><span class=\"p\">(</span><span class=\"n\">nbhd</span><span class=\"p\">,</span> <span class=\"n\">cells</span><span class=\"p\">,</span> <span class=\"n\">grid</span><span class=\"p\">,</span> <span class=\"n\">gw</span><span class=\"p\">,</span> <span class=\"n\">gh</span><span class=\"p\">)</span>\n            <span class=\"n\">perimeter</span> <span class=\"o\">+=</span> <span class=\"n\">additional_perimeter</span>\n        <span class=\"k\">return</span> <span class=\"n\">perimeter</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">neighbors</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">cell</span><span class=\"p\">,</span> <span class=\"n\">grid</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"p\">[(</span><span class=\"n\">cell</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">+</span> <span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"n\">cell</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">+</span> <span class=\"n\">j</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"n\">j</span> <span class=\"ow\">in</span> <span class=\"nb\">zip</span><span class=\"p\">([</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">])]</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">get_value</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">cell</span><span class=\"p\">,</span> <span class=\"n\">grid</span><span class=\"p\">,</span> <span class=\"n\">gw</span><span class=\"p\">,</span> <span class=\"n\">gh</span><span class=\"p\">):</span>\n        <span class=\"k\">if</span> <span class=\"n\">cell</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">&lt;</span> <span class=\"mi\">0</span> <span class=\"ow\">or</span> <span class=\"n\">cell</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">&gt;=</span> <span class=\"n\">gw</span> <span class=\"ow\">or</span> <span class=\"n\">cell</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">&lt;</span> <span class=\"mi\">0</span> <span class=\"ow\">or</span> <span class=\"n\">cell</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">&gt;=</span> <span class=\"n\">gh</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"mi\">0</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"n\">grid</span><span class=\"p\">[</span><span class=\"n\">cell</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]][</span><span class=\"n\">cell</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]]</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">good_neighbors</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">curr_cells</span><span class=\"p\">,</span> <span class=\"n\">prev_cells</span><span class=\"p\">,</span> <span class=\"n\">grid</span><span class=\"p\">,</span> <span class=\"n\">gw</span><span class=\"p\">,</span> <span class=\"n\">gh</span><span class=\"p\">):</span>\n        <span class=\"n\">nbhd</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n        <span class=\"n\">additional_perimeter</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n        <span class=\"k\">for</span> <span class=\"n\">cell</span> <span class=\"ow\">in</span> <span class=\"n\">curr_cells</span><span class=\"p\">:</span>\n            <span class=\"n\">new_neighbors</span> <span class=\"o\">=</span> <span class=\"p\">[</span> <span class=\"n\">c</span> <span class=\"k\">for</span> <span class=\"n\">c</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">neighbors</span><span class=\"p\">(</span><span class=\"n\">cell</span><span class=\"p\">,</span> <span class=\"n\">grid</span><span class=\"p\">)</span>\\\n                             <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">get_value</span><span class=\"p\">(</span><span class=\"n\">c</span><span class=\"p\">,</span> <span class=\"n\">grid</span><span class=\"p\">,</span> <span class=\"n\">gw</span><span class=\"p\">,</span> <span class=\"n\">gh</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"mi\">1</span> <span class=\"ow\">and</span> <span class=\"n\">c</span> <span class=\"ow\">not</span> <span class=\"ow\">in</span> <span class=\"n\">prev_cells</span><span class=\"p\">)</span> <span class=\"p\">]</span>\n            <span class=\"n\">nbhd</span> <span class=\"o\">=</span> <span class=\"n\">nbhd</span> <span class=\"o\">+</span> <span class=\"n\">new_neighbors</span>\n            <span class=\"n\">additional_perimeter</span> <span class=\"o\">+=</span> <span class=\"mi\">3</span> <span class=\"o\">-</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">new_neighbors</span><span class=\"p\">)</span>\n        <span class=\"n\">nbhd_set</span> <span class=\"o\">=</span> <span class=\"nb\">set</span><span class=\"p\">(</span><span class=\"n\">nbhd</span><span class=\"p\">)</span>\n        <span class=\"n\">additional_perimeter</span> <span class=\"o\">-=</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">nbhd</span><span class=\"p\">)</span> <span class=\"o\">-</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">nbhd_set</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">nbhd_set</span><span class=\"p\">,</span> <span class=\"n\">additional_perimeter</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">first_land</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">grid</span><span class=\"p\">,</span> <span class=\"n\">gw</span><span class=\"p\">,</span> <span class=\"n\">gh</span><span class=\"p\">):</span>\n        <span class=\"k\">for</span> <span class=\"n\">j</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"n\">gh</span><span class=\"p\">):</span>\n            <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"n\">gw</span><span class=\"p\">):</span>\n                <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">get_value</span><span class=\"p\">([</span><span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"n\">j</span><span class=\"p\">],</span> <span class=\"n\">grid</span><span class=\"p\">,</span> <span class=\"n\">gw</span><span class=\"p\">,</span> <span class=\"n\">gh</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"mi\">1</span><span class=\"p\">:</span>\n                    <span class=\"k\">return</span> <span class=\"nb\">set</span><span class=\"p\">([(</span><span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"n\">j</span><span class=\"p\">)])</span>\n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "Post-Lunch Prep (PLP)",
            "flags": [
                "read",
                "historical"
            ],
            "id": 135210903,
            "is_me_message": false,
            "last_edit_timestamp": 1538681453,
            "reactions": [
                {
                    "emoji_code": "1f389",
                    "emoji_name": "tada",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "ethanzanemiller@gmail.com",
                        "full_name": "Ethan Zane Miller (he) (F2'18)",
                        "id": 130321
                    },
                    "user_id": 130321
                },
                {
                    "emoji_code": "1f389",
                    "emoji_name": "tada",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "aatigar@gmail.com",
                        "full_name": "Adam Avery Tigar (he) (F2'18)",
                        "id": 130218
                    },
                    "user_id": 130218
                }
            ],
            "recipient_id": 183179,
            "sender_email": "aaron_wood@protonmail.com",
            "sender_full_name": "Aaron Wood (he) (F1'18)",
            "sender_id": 125145,
            "sender_realm_str": "recurse",
            "stream_id": 144212,
            "subject": "Thursday, 4 Oct 2018",
            "submessages": [],
            "timestamp": 1538681416,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/1fdd84a57c15f7ecfdded3d0c32019ad32f8af5d?x=x&version=5",
            "client": "website",
            "content": "<p>temperatures</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">class</span> <span class=\"nc\">Solution</span><span class=\"p\">(</span><span class=\"nb\">object</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"nf\">dailyTemperatures</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">temperatures</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">        :type temperatures: List[int]</span>\n<span class=\"sd\">        :rtype: List[int]</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"n\">stack</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n        <span class=\"n\">ret</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">*</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">temperatures</span><span class=\"p\">)</span>\n        <span class=\"k\">for</span> <span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"n\">t</span> <span class=\"ow\">in</span> <span class=\"nb\">enumerate</span><span class=\"p\">(</span><span class=\"n\">temperatures</span><span class=\"p\">):</span>\n            <span class=\"k\">while</span> <span class=\"n\">stack</span> <span class=\"ow\">and</span> <span class=\"n\">t</span> <span class=\"o\">&gt;</span> <span class=\"n\">stack</span><span class=\"p\">[</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">][</span><span class=\"mi\">1</span><span class=\"p\">]:</span>\n                <span class=\"n\">j</span> <span class=\"o\">=</span> <span class=\"n\">stack</span><span class=\"o\">.</span><span class=\"n\">pop</span><span class=\"p\">()[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n                <span class=\"n\">ret</span><span class=\"p\">[</span><span class=\"n\">j</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">i</span> <span class=\"o\">-</span> <span class=\"n\">j</span>\n            <span class=\"n\">stack</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">((</span><span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"n\">t</span><span class=\"p\">))</span>\n        <span class=\"k\">return</span> <span class=\"n\">ret</span>\n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "Post-Lunch Prep (PLP)",
            "flags": [
                "read",
                "historical"
            ],
            "id": 135275591,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 183179,
            "sender_email": "arpith@feedreader.co",
            "sender_full_name": "Arpith Siromoney (he) (m6'20)",
            "sender_id": 9503,
            "sender_realm_str": "recurse",
            "stream_id": 144212,
            "subject": "Thursday, 4 Oct 2018",
            "submessages": [],
            "timestamp": 1538767394,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/6145d0683a46b1516d14fa79f4980dfa1143bdcc?x=x&version=9",
            "client": "website",
            "content": "<p>@all Welcome to today's PLP!! the problems will be projected in the presentation space around lunchtime. If you're interested in pairing, come to the presentation space at 1:45pm to find a partner. If you're interested in post-PLP discussion (PPLPD), meet back at the presentation space at 2:45pm. See you there!!</p>\n<p>topic: <br>\nBinary trees</p>\n<p>resource:<br>\n<a href=\"http://interactivepython.org/runestone/static/pythonds/Trees/VocabularyandDefinitions.html\" target=\"_blank\" title=\"http://interactivepython.org/runestone/static/pythonds/Trees/VocabularyandDefinitions.html\">http://interactivepython.org/runestone/static/pythonds/Trees/VocabularyandDefinitions.html</a></p>\n<p>problems:<br>\n<a href=\"https://leetcode.com/problems/diameter-of-binary-tree/description/\" target=\"_blank\" title=\"https://leetcode.com/problems/diameter-of-binary-tree/description/\">https://leetcode.com/problems/diameter-of-binary-tree/description/</a><br>\n<a href=\"https://leetcode.com/problems/lowest-common-ancestor-of-a-binary-tree/description/\" target=\"_blank\" title=\"https://leetcode.com/problems/lowest-common-ancestor-of-a-binary-tree/description/\">https://leetcode.com/problems/lowest-common-ancestor-of-a-binary-tree/description/</a></p>\n<p>host:<br>\n@Aaron Wood (F1'18) (Contact me if you have any questions, concerns, or feedback regarding today's or other days' PLP.)</p>",
            "content_type": "text/html",
            "display_recipient": "Post-Lunch Prep (PLP)",
            "flags": [
                "read",
                "historical"
            ],
            "id": 135414287,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 183179,
            "sender_email": "aaron_wood@protonmail.com",
            "sender_full_name": "Aaron Wood (he) (F1'18)",
            "sender_id": 125145,
            "sender_realm_str": "recurse",
            "stream_id": 144212,
            "subject": "Monday, 8 Oct 2018",
            "submessages": [],
            "timestamp": 1539015847,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/36716766e555f85a2c18cf8f358d6f63ccc077d9?x=x&version=2",
            "client": "website",
            "content": "<p>here's the solution for binary tree diameter that <span class=\"user-mention\" data-user-id=\"130321\">@Ethan Zane Miller (F2'18)</span> and I worked on.</p>\n<div class=\"codehilite\"><pre><span></span>import list\n\nstruct Node(Int, [Node], [Node])\n\nfunc get_diameter(root: Node): (Int, Int) -&gt;\n    match root\n    |Node(_, [], []) -&gt;\n        (0, 0)\n    |Node(_, [left], []) -&gt;\n        let (l_diameter, l_depth) := get_diameter(left)\n        (l_diameter, l_depth + 1)\n    |Node(_, [], [right]) -&gt;\n        let (r_diameter, r_depth) := get_diameter(right)\n        (r_diameter, r_depth + 1)\n    |Node(_, [left], [right]) -&gt;\n        let (l_diameter, l_depth) := get_diameter(left)\n        let (r_diameter, r_depth) := get_diameter(right)\n        let l_depth_2 := l_depth + 1\n        let r_depth_2 := r_depth + 1\n        let max_diameter_children := max(l_diameter, r_diameter)\n        let max_diameter := l_depth_2 + r_depth_2\n        (max(max_diameter, max_diameter_children), max(l_depth_2, r_depth_2))\n    --\n--\n\nfunc main() -&gt;\n    let d := make_data()\n    print(&quot;data is $d\\n&quot;)\n    let (max_path, _) := get_diameter(d)\n    print(&quot;max_path is $max_path\\n&quot;)\n--\n\nfunc make_data(): Node -&gt;\n    Node(1,\n        [Node(2,\n            [Node(4, [], [\n                Node(8, [], [\n                    Node(9, [], []),\n                ]),\n            ])],\n            [Node(5, [], [\n                Node(6, [], [\n                    Node(7, [], []),\n                ]),\n            ])],\n        )],\n        [Node(3, [], [])],\n    )\n--\n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "Post-Lunch Prep (PLP)",
            "flags": [
                "read",
                "historical"
            ],
            "id": 135424834,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "+1",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "chunli.developer@gmail.com",
                        "full_name": "Chun Li (he) (F2'18)",
                        "id": 129956
                    },
                    "user_id": 129956
                },
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "+1",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "ethanzanemiller@gmail.com",
                        "full_name": "Ethan Zane Miller (he) (F2'18)",
                        "id": 130321
                    },
                    "user_id": 130321
                }
            ],
            "recipient_id": 183179,
            "sender_email": "mattg@leema.org",
            "sender_full_name": "Matthew Graham (he) (F1'18)",
            "sender_id": 125276,
            "sender_realm_str": "recurse",
            "stream_id": 144212,
            "subject": "Monday, 8 Oct 2018",
            "submessages": [],
            "timestamp": 1539028741,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/ff35ce36c86dfb01da582bed81b61ac4c14d2096?x=x&version=4",
            "client": "ZulipElectron",
            "content": "<p>JS solution for binary tree diameter (I definitely don't think that was an easy level problem, FWIW). This beats 98% of submissions on runtime:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"cm\">/**</span>\n<span class=\"cm\"> * Definition for a binary tree node.</span>\n<span class=\"cm\"> * function TreeNode(val) {</span>\n<span class=\"cm\"> *     this.val = val;</span>\n<span class=\"cm\"> *     this.left = this.right = null;</span>\n<span class=\"cm\"> * }</span>\n<span class=\"cm\"> */</span>\n<span class=\"cm\">/**</span>\n<span class=\"cm\"> * @param {TreeNode} root</span>\n<span class=\"cm\"> * @return {number}</span>\n<span class=\"cm\"> */</span>\n<span class=\"kd\">var</span> <span class=\"nx\">diameterOfBinaryTree</span> <span class=\"o\">=</span> <span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">root</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n  <span class=\"c1\">// keep track of the length of each branch separately</span>\n  <span class=\"kd\">var</span> <span class=\"nx\">maxDiameter</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">];</span>\n\n  <span class=\"kd\">function</span> <span class=\"nx\">getDiameter</span><span class=\"p\">(</span><span class=\"nx\">node</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">node</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n      <span class=\"kd\">var</span> <span class=\"nx\">dLeft</span> <span class=\"o\">=</span> <span class=\"nx\">node</span><span class=\"p\">.</span><span class=\"nx\">left</span> <span class=\"o\">?</span> <span class=\"mi\">1</span> <span class=\"o\">+</span> <span class=\"nx\">getDiameter</span><span class=\"p\">(</span><span class=\"nx\">node</span><span class=\"p\">.</span><span class=\"nx\">left</span><span class=\"p\">)</span> <span class=\"o\">:</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n      <span class=\"kd\">var</span> <span class=\"nx\">dRight</span> <span class=\"o\">=</span> <span class=\"nx\">node</span><span class=\"p\">.</span><span class=\"nx\">right</span> <span class=\"o\">?</span> <span class=\"mi\">1</span> <span class=\"o\">+</span> <span class=\"nx\">getDiameter</span><span class=\"p\">(</span><span class=\"nx\">node</span><span class=\"p\">.</span><span class=\"nx\">right</span><span class=\"p\">)</span> <span class=\"o\">:</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n      <span class=\"kd\">var</span> <span class=\"nx\">currDiameter</span> <span class=\"o\">=</span> <span class=\"nx\">dLeft</span> <span class=\"o\">+</span> <span class=\"nx\">dRight</span><span class=\"p\">;</span>\n\n      <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">currDiameter</span> <span class=\"o\">&gt;</span> <span class=\"nx\">maxDiameter</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">+</span> <span class=\"nx\">maxDiameter</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">])</span>\n        <span class=\"nx\">maxDiameter</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"nx\">dLeft</span><span class=\"p\">,</span> <span class=\"nx\">dRight</span><span class=\"p\">];</span>\n      <span class=\"k\">return</span> <span class=\"nb\">Math</span><span class=\"p\">.</span><span class=\"nx\">max</span><span class=\"p\">(</span><span class=\"nx\">dLeft</span><span class=\"p\">,</span> <span class=\"nx\">dRight</span><span class=\"p\">);</span>\n    <span class=\"p\">}</span>\n    <span class=\"k\">return</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n  <span class=\"p\">}</span>\n\n  <span class=\"nx\">getDiameter</span><span class=\"p\">(</span><span class=\"nx\">root</span><span class=\"p\">);</span>\n  <span class=\"k\">return</span> <span class=\"nx\">maxDiameter</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">+</span> <span class=\"nx\">maxDiameter</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">];</span>\n<span class=\"p\">};</span>\n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "Post-Lunch Prep (PLP)",
            "flags": [
                "read",
                "historical"
            ],
            "id": 135435799,
            "is_me_message": false,
            "last_edit_timestamp": 1539044782,
            "reactions": [
                {
                    "emoji_code": "1f389",
                    "emoji_name": "tada",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "aaron_wood@protonmail.com",
                        "full_name": "Aaron Wood (he) (F1'18)",
                        "id": 125145
                    },
                    "user_id": 125145
                }
            ],
            "recipient_id": 183179,
            "sender_email": "sheridan.kates@gmail.com",
            "sender_full_name": "Sheridan Kates (she) (F1'18)",
            "sender_id": 125277,
            "sender_realm_str": "recurse",
            "stream_id": 144212,
            "subject": "Monday, 8 Oct 2018",
            "submessages": [],
            "timestamp": 1539044664,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/ff35ce36c86dfb01da582bed81b61ac4c14d2096?x=x&version=4",
            "client": "ZulipElectron",
            "content": "<p>@all Welcome to today's PLP!! the problems will be projected in the presentation space around lunchtime. If you're interested in pairing, come to the presentation space at 1:45pm to find a partner. If you're interested in post-PLP discussion (PPLPD), meet back at the presentation space at 2:45pm. See you there!!</p>\n<p>topic: <br>\nGraphs</p>\n<p>resource:<br>\n<a href=\"https://www.hackerearth.com/fr/practice/algorithms/graphs/graph-representation/tutorial/\" target=\"_blank\" title=\"https://www.hackerearth.com/fr/practice/algorithms/graphs/graph-representation/tutorial/\">https://www.hackerearth.com/fr/practice/algorithms/graphs/graph-representation/tutorial/</a></p>\n<p>problems:<br>\n<a href=\"https://leetcode.com/problems/keys-and-rooms/description/\" target=\"_blank\" title=\"https://leetcode.com/problems/keys-and-rooms/description/\">https://leetcode.com/problems/keys-and-rooms/description/</a> (Medium difficulty)<br>\n<a href=\"https://leetcode.com/problems/network-delay-time/description/\" target=\"_blank\" title=\"https://leetcode.com/problems/network-delay-time/description/\">https://leetcode.com/problems/network-delay-time/description/</a> (Medium difficulty)</p>\n<p>host:<br>\n<span class=\"user-mention\" data-user-id=\"125277\">@Sheridan Kates (F1'18)</span>  (Contact me if you have any questions, concerns, or feedback regarding today's or other days' PLP.)</p>",
            "content_type": "text/html",
            "display_recipient": "Post-Lunch Prep (PLP)",
            "flags": [
                "read",
                "historical"
            ],
            "id": 135480649,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "+1",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "aaron_wood@protonmail.com",
                        "full_name": "Aaron Wood (he) (F1'18)",
                        "id": 125145
                    },
                    "user_id": 125145
                }
            ],
            "recipient_id": 183179,
            "sender_email": "sheridan.kates@gmail.com",
            "sender_full_name": "Sheridan Kates (she) (F1'18)",
            "sender_id": 125277,
            "sender_realm_str": "recurse",
            "stream_id": 144212,
            "subject": "Tuesday, 9 Oct 2018",
            "submessages": [],
            "timestamp": 1539101616,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/36716766e555f85a2c18cf8f358d6f63ccc077d9?x=x&version=2",
            "client": "website",
            "content": "<p>oof, graphs</p>",
            "content_type": "text/html",
            "display_recipient": "Post-Lunch Prep (PLP)",
            "flags": [
                "read",
                "historical"
            ],
            "id": 135480783,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 183179,
            "sender_email": "mattg@leema.org",
            "sender_full_name": "Matthew Graham (he) (F1'18)",
            "sender_id": 125276,
            "sender_realm_str": "recurse",
            "stream_id": 144212,
            "subject": "Tuesday, 9 Oct 2018",
            "submessages": [],
            "timestamp": 1539101731,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/36716766e555f85a2c18cf8f358d6f63ccc077d9?x=x&version=2",
            "client": "website",
            "content": "<p>... by which I mean sounds like a good challenge, I'm looking forward to it</p>",
            "content_type": "text/html",
            "display_recipient": "Post-Lunch Prep (PLP)",
            "flags": [
                "read",
                "historical"
            ],
            "id": 135481008,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f389",
                    "emoji_name": "tada",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "sheridan.kates@gmail.com",
                        "full_name": "Sheridan Kates (she) (F1'18)",
                        "id": 125277
                    },
                    "user_id": 125277
                }
            ],
            "recipient_id": 183179,
            "sender_email": "mattg@leema.org",
            "sender_full_name": "Matthew Graham (he) (F1'18)",
            "sender_id": 125276,
            "sender_realm_str": "recurse",
            "stream_id": 144212,
            "subject": "Tuesday, 9 Oct 2018",
            "submessages": [],
            "timestamp": 1539101915,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/42eb8364884b6847ba9c7485ae5b47650e0e95fc?x=x&version=2",
            "client": "website",
            "content": "<p>A nitpick on that hackerearth article -- the \"types of nodes\" section only applies to trees (not all graphs are trees). Also, 'ancestor' and 'successor' only have meaning in the context of directed graphs</p>",
            "content_type": "text/html",
            "display_recipient": "Post-Lunch Prep (PLP)",
            "flags": [
                "read",
                "historical"
            ],
            "id": 135485663,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 183179,
            "sender_email": "dfriedman58@gmail.com",
            "sender_full_name": "Daniel Friedman (he) (S1'18)",
            "sender_id": 116363,
            "sender_realm_str": "recurse",
            "stream_id": 144212,
            "subject": "Tuesday, 9 Oct 2018",
            "submessages": [],
            "timestamp": 1539106877,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/42eb8364884b6847ba9c7485ae5b47650e0e95fc?x=x&version=2",
            "client": "website",
            "content": "<p>Keys and Rooms:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">def</span> <span class=\"nf\">find_connected_rooms</span><span class=\"p\">(</span><span class=\"n\">rooms</span><span class=\"p\">,</span> <span class=\"n\">visited</span><span class=\"p\">,</span> <span class=\"n\">cur_room</span><span class=\"p\">):</span>\n    <span class=\"k\">if</span> <span class=\"n\">cur_room</span> <span class=\"ow\">in</span> <span class=\"n\">visited</span><span class=\"p\">:</span>\n        <span class=\"k\">return</span> <span class=\"n\">visited</span>\n    <span class=\"n\">visited</span><span class=\"o\">.</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"n\">cur_room</span><span class=\"p\">)</span>\n    <span class=\"n\">next_rooms</span> <span class=\"o\">=</span> <span class=\"n\">rooms</span><span class=\"p\">[</span><span class=\"n\">cur_room</span><span class=\"p\">]</span>\n    <span class=\"k\">for</span> <span class=\"n\">neighboring_room</span> <span class=\"ow\">in</span> <span class=\"n\">next_rooms</span><span class=\"p\">:</span>\n        <span class=\"n\">find_connected_rooms</span><span class=\"p\">(</span><span class=\"n\">rooms</span><span class=\"p\">,</span> <span class=\"n\">visited</span><span class=\"p\">,</span> <span class=\"n\">neighboring_room</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"n\">visited</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">Solution</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"nf\">canVisitAllRooms</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">rooms</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">        :type rooms: List[List[int]]</span>\n<span class=\"sd\">        :rtype: bool</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"n\">all_rooms</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"n\">room</span> <span class=\"k\">for</span> <span class=\"n\">room</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">rooms</span><span class=\"p\">))}</span>\n        <span class=\"n\">rooms_we_can_visit</span> <span class=\"o\">=</span> <span class=\"n\">find_connected_rooms</span><span class=\"p\">(</span><span class=\"n\">rooms</span><span class=\"p\">,</span> <span class=\"nb\">set</span><span class=\"p\">(),</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">all_rooms</span><span class=\"o\">.</span><span class=\"n\">difference</span><span class=\"p\">(</span><span class=\"n\">rooms_we_can_visit</span><span class=\"p\">))</span> <span class=\"o\">==</span> <span class=\"mi\">0</span>\n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "Post-Lunch Prep (PLP)",
            "flags": [
                "read",
                "historical"
            ],
            "id": 135491749,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 183179,
            "sender_email": "dfriedman58@gmail.com",
            "sender_full_name": "Daniel Friedman (he) (S1'18)",
            "sender_id": 116363,
            "sender_realm_str": "recurse",
            "stream_id": 144212,
            "subject": "Tuesday, 9 Oct 2018",
            "submessages": [],
            "timestamp": 1539112417,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/42eb8364884b6847ba9c7485ae5b47650e0e95fc?x=x&version=2",
            "client": "website",
            "content": "<p>Network Delay Time:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"nn\">heapq</span>\n<span class=\"kn\">from</span> <span class=\"nn\">math</span> <span class=\"k\">import</span> <span class=\"n\">inf</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">nodes</span><span class=\"p\">(</span><span class=\"n\">N</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"p\">(</span><span class=\"n\">node</span> <span class=\"k\">for</span> <span class=\"n\">node</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">N</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">))</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">make_adjacency_list</span><span class=\"p\">(</span><span class=\"n\">times</span><span class=\"p\">,</span> <span class=\"n\">N</span><span class=\"p\">):</span>\n    <span class=\"n\">graph</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"n\">node</span><span class=\"p\">:</span> <span class=\"p\">[]</span> <span class=\"k\">for</span> <span class=\"n\">node</span> <span class=\"ow\">in</span> <span class=\"n\">nodes</span><span class=\"p\">(</span><span class=\"n\">N</span><span class=\"p\">)}</span>\n    <span class=\"k\">for</span> <span class=\"n\">source</span><span class=\"p\">,</span> <span class=\"n\">dest</span><span class=\"p\">,</span> <span class=\"n\">time</span> <span class=\"ow\">in</span> <span class=\"n\">times</span><span class=\"p\">:</span>\n        <span class=\"n\">graph</span><span class=\"o\">.</span><span class=\"n\">setdefault</span><span class=\"p\">(</span><span class=\"n\">source</span><span class=\"p\">,</span> <span class=\"p\">[])</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">((</span><span class=\"n\">time</span><span class=\"p\">,</span> <span class=\"n\">dest</span><span class=\"p\">))</span>\n    <span class=\"k\">return</span> <span class=\"n\">graph</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">get_times_to_nodes</span><span class=\"p\">(</span><span class=\"n\">graph</span><span class=\"p\">,</span> <span class=\"n\">N</span><span class=\"p\">,</span> <span class=\"n\">start</span><span class=\"p\">):</span>\n    <span class=\"n\">times</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"n\">node</span><span class=\"p\">:</span> <span class=\"n\">inf</span> <span class=\"k\">for</span> <span class=\"n\">node</span> <span class=\"ow\">in</span> <span class=\"n\">nodes</span><span class=\"p\">(</span><span class=\"n\">N</span><span class=\"p\">)}</span>\n    <span class=\"n\">times</span><span class=\"p\">[</span><span class=\"n\">start</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n    <span class=\"n\">to_visit</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n    <span class=\"n\">heapq</span><span class=\"o\">.</span><span class=\"n\">heappush</span><span class=\"p\">(</span><span class=\"n\">to_visit</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"n\">times</span><span class=\"p\">[</span><span class=\"n\">start</span><span class=\"p\">],</span> <span class=\"n\">start</span><span class=\"p\">))</span>\n    <span class=\"k\">while</span> <span class=\"n\">to_visit</span><span class=\"p\">:</span>\n        <span class=\"n\">time_to_cur</span><span class=\"p\">,</span> <span class=\"n\">cur</span> <span class=\"o\">=</span> <span class=\"n\">heapq</span><span class=\"o\">.</span><span class=\"n\">heappop</span><span class=\"p\">(</span><span class=\"n\">to_visit</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"n\">time_to_cur</span> <span class=\"o\">!=</span> <span class=\"n\">times</span><span class=\"p\">[</span><span class=\"n\">cur</span><span class=\"p\">]:</span>\n            <span class=\"c1\"># This node has already been explored</span>\n            <span class=\"k\">continue</span>\n        <span class=\"k\">for</span> <span class=\"n\">cur_to_neighbor_time</span><span class=\"p\">,</span> <span class=\"n\">neighbor</span> <span class=\"ow\">in</span> <span class=\"n\">graph</span><span class=\"p\">[</span><span class=\"n\">cur</span><span class=\"p\">]:</span>\n            <span class=\"n\">new_time_to_neighbor</span> <span class=\"o\">=</span> <span class=\"n\">time_to_cur</span> <span class=\"o\">+</span> <span class=\"n\">cur_to_neighbor_time</span>\n            <span class=\"k\">if</span> <span class=\"n\">new_time_to_neighbor</span> <span class=\"o\">&lt;</span> <span class=\"n\">times</span><span class=\"p\">[</span><span class=\"n\">neighbor</span><span class=\"p\">]:</span>\n                <span class=\"n\">times</span><span class=\"p\">[</span><span class=\"n\">neighbor</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">new_time_to_neighbor</span>\n                <span class=\"n\">heapq</span><span class=\"o\">.</span><span class=\"n\">heappush</span><span class=\"p\">(</span><span class=\"n\">to_visit</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"n\">times</span><span class=\"p\">[</span><span class=\"n\">neighbor</span><span class=\"p\">],</span> <span class=\"n\">neighbor</span><span class=\"p\">))</span>\n    <span class=\"k\">return</span> <span class=\"n\">times</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">Solution</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"nf\">networkDelayTime</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">times</span><span class=\"p\">,</span> <span class=\"n\">N</span><span class=\"p\">,</span> <span class=\"n\">K</span><span class=\"p\">):</span>\n        <span class=\"n\">graph</span> <span class=\"o\">=</span> <span class=\"n\">make_adjacency_list</span><span class=\"p\">(</span><span class=\"n\">times</span><span class=\"p\">,</span> <span class=\"n\">N</span><span class=\"p\">)</span>\n        <span class=\"n\">times_to_nodes</span> <span class=\"o\">=</span> <span class=\"n\">get_times_to_nodes</span><span class=\"p\">(</span><span class=\"n\">graph</span><span class=\"p\">,</span> <span class=\"n\">N</span><span class=\"p\">,</span> <span class=\"n\">K</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"nb\">all</span><span class=\"p\">(</span><span class=\"n\">time</span> <span class=\"o\">&lt;</span> <span class=\"n\">inf</span> <span class=\"k\">for</span> <span class=\"n\">node</span><span class=\"p\">,</span> <span class=\"n\">time</span> <span class=\"ow\">in</span> <span class=\"n\">times_to_nodes</span><span class=\"o\">.</span><span class=\"n\">items</span><span class=\"p\">()):</span>\n            <span class=\"k\">return</span> <span class=\"o\">-</span><span class=\"mi\">1</span>\n        <span class=\"k\">return</span> <span class=\"nb\">max</span><span class=\"p\">(</span><span class=\"n\">time</span> <span class=\"k\">for</span> <span class=\"n\">_node</span><span class=\"p\">,</span> <span class=\"n\">time</span> <span class=\"ow\">in</span> <span class=\"n\">times_to_nodes</span><span class=\"o\">.</span><span class=\"n\">items</span><span class=\"p\">())</span>\n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "Post-Lunch Prep (PLP)",
            "flags": [
                "read",
                "historical"
            ],
            "id": 135491812,
            "is_me_message": false,
            "last_edit_timestamp": 1539112632,
            "reactions": [],
            "recipient_id": 183179,
            "sender_email": "dfriedman58@gmail.com",
            "sender_full_name": "Daniel Friedman (he) (S1'18)",
            "sender_id": 116363,
            "sender_realm_str": "recurse",
            "stream_id": 144212,
            "subject": "Tuesday, 9 Oct 2018",
            "submessages": [],
            "timestamp": 1539112472,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/ff35ce36c86dfb01da582bed81b61ac4c14d2096?x=x&version=4",
            "client": "ZulipElectron",
            "content": "<p>hmm good points <span class=\"user-mention\" data-user-id=\"116363\">@Daniel Friedman (S1'18)</span> - thanks for the feedback. We use this wiki page to keep a history of resources for various topics, and there wasn't one for a general overview of graphs, so if you have an overview that you like better then please send through to me or add it to the wiki page yourself! <a href=\"https://github.com/recursecenter/wiki/wiki/Post-lunch-Prep\" target=\"_blank\" title=\"https://github.com/recursecenter/wiki/wiki/Post-lunch-Prep\">https://github.com/recursecenter/wiki/wiki/Post-lunch-Prep</a></p>",
            "content_type": "text/html",
            "display_recipient": "Post-Lunch Prep (PLP)",
            "flags": [
                "read",
                "historical"
            ],
            "id": 135499447,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 183179,
            "sender_email": "sheridan.kates@gmail.com",
            "sender_full_name": "Sheridan Kates (she) (F1'18)",
            "sender_id": 125277,
            "sender_realm_str": "recurse",
            "stream_id": 144212,
            "subject": "Tuesday, 9 Oct 2018",
            "submessages": [],
            "timestamp": 1539119545,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/42eb8364884b6847ba9c7485ae5b47650e0e95fc?x=x&version=2",
            "client": "ZulipMobile",
            "content": "<p>Awesome I\u2019ll take a look!</p>",
            "content_type": "text/html",
            "display_recipient": "Post-Lunch Prep (PLP)",
            "flags": [
                "read",
                "historical"
            ],
            "id": 135499643,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 183179,
            "sender_email": "dfriedman58@gmail.com",
            "sender_full_name": "Daniel Friedman (he) (S1'18)",
            "sender_id": 116363,
            "sender_realm_str": "recurse",
            "stream_id": 144212,
            "subject": "Tuesday, 9 Oct 2018",
            "submessages": [],
            "timestamp": 1539119729,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/ff35ce36c86dfb01da582bed81b61ac4c14d2096?x=x&version=4",
            "client": "ZulipElectron",
            "content": "<p>:D thanks!</p>",
            "content_type": "text/html",
            "display_recipient": "Post-Lunch Prep (PLP)",
            "flags": [
                "read",
                "historical"
            ],
            "id": 135500231,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 183179,
            "sender_email": "sheridan.kates@gmail.com",
            "sender_full_name": "Sheridan Kates (she) (F1'18)",
            "sender_id": 125277,
            "sender_realm_str": "recurse",
            "stream_id": 144212,
            "subject": "Tuesday, 9 Oct 2018",
            "submessages": [],
            "timestamp": 1539120319,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/42eb8364884b6847ba9c7485ae5b47650e0e95fc?x=x&version=2",
            "client": "website",
            "content": "<p>sure, np! just added a link to the wikipedia page, which while it may seem obvious, is a pretty decent resource!</p>",
            "content_type": "text/html",
            "display_recipient": "Post-Lunch Prep (PLP)",
            "flags": [
                "read",
                "historical"
            ],
            "id": 135508614,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 183179,
            "sender_email": "dfriedman58@gmail.com",
            "sender_full_name": "Daniel Friedman (he) (S1'18)",
            "sender_id": 116363,
            "sender_realm_str": "recurse",
            "stream_id": 144212,
            "subject": "Tuesday, 9 Oct 2018",
            "submessages": [],
            "timestamp": 1539130034,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/ff35ce36c86dfb01da582bed81b61ac4c14d2096?x=x&version=4",
            "client": "ZulipElectron",
            "content": "<p>excellent, much appreciated</p>",
            "content_type": "text/html",
            "display_recipient": "Post-Lunch Prep (PLP)",
            "flags": [
                "read",
                "historical"
            ],
            "id": 135514531,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 183179,
            "sender_email": "sheridan.kates@gmail.com",
            "sender_full_name": "Sheridan Kates (she) (F1'18)",
            "sender_id": 125277,
            "sender_realm_str": "recurse",
            "stream_id": 144212,
            "subject": "Tuesday, 9 Oct 2018",
            "submessages": [],
            "timestamp": 1539139614,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/a7e34bfec28361a2b2e6c4d5116dd59646029c3a?x=x&version=1",
            "client": "ZulipElectron",
            "content": "<p>@all Welcome to today's PLP!! the problems will be projected in the presentation space around lunchtime. If you're interested in pairing, come to the presentation space at 1:45pm to find a partner. If you're interested in post-PLP discussion (PPLPD), meet back at the presentation space at 2:45pm. See you there!!</p>\n<p>problems:<br>\n<a href=\"https://leetcode.com/problems/group-anagrams/description/\" target=\"_blank\" title=\"https://leetcode.com/problems/group-anagrams/description/\">https://leetcode.com/problems/group-anagrams/description/</a> (Medium difficulty)<br>\n<a href=\"https://leetcode.com/problems/search-a-2d-matrix-ii/description/\" target=\"_blank\" title=\"https://leetcode.com/problems/search-a-2d-matrix-ii/description/\">https://leetcode.com/problems/search-a-2d-matrix-ii/description/</a> (Medium difficulty)</p>\n<p>host:<br>\n<span class=\"user-mention\" data-user-id=\"7103\">@Gloria Chou (F1'18)</span>  (Contact me if you have any questions, concerns, or feedback regarding today's or other days' PLP.)</p>",
            "content_type": "text/html",
            "display_recipient": "Post-Lunch Prep (PLP)",
            "flags": [
                "read",
                "historical"
            ],
            "id": 135551016,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 183179,
            "sender_email": "gchou8@gmail.com",
            "sender_full_name": "Gloria Chou (F1'18)",
            "sender_id": 7103,
            "sender_realm_str": "recurse",
            "stream_id": 144212,
            "subject": "Wednesday, 10 Oct 2018",
            "submessages": [],
            "timestamp": 1539187332,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4c6c33ba34805ad702799c529d0cdce4?d=identicon&version=1",
            "client": "ZulipElectron",
            "content": "<p>I have a kind of clever hack for group anagrams using prime numbers. It runs in <code>O(nk)</code> where <code>n</code> is the length of the list of strings and <code>k</code> is the length of each string. Anyway, thought I'd post it as a curiosity </p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"nn\">string</span>\n<span class=\"kn\">from</span> <span class=\"nn\">collections</span> <span class=\"k\">import</span> <span class=\"n\">defaultdict</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">Solution</span><span class=\"p\">(</span><span class=\"nb\">object</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"nf\">groupAnagrams</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">strs</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">        :type strs: List[str]</span>\n<span class=\"sd\">        :rtype: List[List[str]]</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"n\">primes</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">7</span><span class=\"p\">,</span> <span class=\"mi\">11</span><span class=\"p\">,</span> <span class=\"mi\">13</span><span class=\"p\">,</span> <span class=\"mi\">17</span><span class=\"p\">,</span> <span class=\"mi\">19</span><span class=\"p\">,</span> <span class=\"mi\">23</span><span class=\"p\">,</span> <span class=\"mi\">29</span><span class=\"p\">,</span> <span class=\"mi\">31</span><span class=\"p\">,</span> <span class=\"mi\">37</span><span class=\"p\">,</span> <span class=\"mi\">41</span><span class=\"p\">,</span> <span class=\"mi\">43</span><span class=\"p\">,</span> <span class=\"mi\">47</span><span class=\"p\">,</span> <span class=\"mi\">53</span><span class=\"p\">,</span> <span class=\"mi\">59</span><span class=\"p\">,</span> <span class=\"mi\">61</span><span class=\"p\">,</span> <span class=\"mi\">67</span><span class=\"p\">,</span> <span class=\"mi\">71</span><span class=\"p\">,</span> <span class=\"mi\">73</span><span class=\"p\">,</span> <span class=\"mi\">79</span><span class=\"p\">,</span> <span class=\"mi\">83</span><span class=\"p\">,</span> <span class=\"mi\">89</span><span class=\"p\">,</span> <span class=\"mi\">97</span><span class=\"p\">,</span> <span class=\"mi\">101</span><span class=\"p\">]</span>\n        <span class=\"n\">letters</span> <span class=\"o\">=</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">string</span><span class=\"o\">.</span><span class=\"n\">ascii_lowercase</span><span class=\"p\">)</span>\n\n        <span class=\"n\">char_to_prime</span> <span class=\"o\">=</span> <span class=\"nb\">dict</span><span class=\"p\">(</span><span class=\"nb\">zip</span><span class=\"p\">(</span><span class=\"n\">letters</span><span class=\"p\">,</span> <span class=\"n\">primes</span><span class=\"p\">))</span>\n\n        <span class=\"n\">groups</span> <span class=\"o\">=</span> <span class=\"n\">defaultdict</span><span class=\"p\">(</span><span class=\"nb\">list</span><span class=\"p\">)</span>\n\n        <span class=\"k\">for</span> <span class=\"n\">chars</span> <span class=\"ow\">in</span> <span class=\"n\">strs</span><span class=\"p\">:</span>\n            <span class=\"n\">numbers</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">char_to_prime</span><span class=\"p\">[</span><span class=\"n\">char</span><span class=\"p\">]</span> <span class=\"k\">for</span> <span class=\"n\">char</span> <span class=\"ow\">in</span> <span class=\"n\">chars</span><span class=\"p\">]</span>\n            <span class=\"n\">product</span> <span class=\"o\">=</span> <span class=\"n\">reduce</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">:</span> <span class=\"n\">x</span> <span class=\"o\">*</span> <span class=\"n\">y</span><span class=\"p\">,</span> <span class=\"n\">numbers</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n            <span class=\"n\">groups</span><span class=\"p\">[</span><span class=\"n\">product</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">chars</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">groups</span><span class=\"o\">.</span><span class=\"n\">values</span><span class=\"p\">())</span>\n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "Post-Lunch Prep (PLP)",
            "flags": [
                "read",
                "historical"
            ],
            "id": 135552124,
            "is_me_message": false,
            "last_edit_timestamp": 1539188751,
            "reactions": [],
            "recipient_id": 183179,
            "sender_email": "adampalay@gmail.com",
            "sender_full_name": "Adam Palay (he) (SP2'18)",
            "sender_id": 111960,
            "sender_realm_str": "recurse",
            "stream_id": 144212,
            "subject": "Wednesday, 10 Oct 2018",
            "submessages": [],
            "timestamp": 1539188743,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/6145d0683a46b1516d14fa79f4980dfa1143bdcc?x=x&version=9",
            "client": "website",
            "content": "<p>solved with <span class=\"user-mention\" data-user-id=\"129934\">@Keenan Tsuruichi Komoto (F2'18)</span>  user super-increasing sequences.</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">class</span> <span class=\"nc\">Solution</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"nf\">groupAnagrams</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">strs</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">        :type strs: List[str]</span>\n<span class=\"sd\">        :rtype: List[List[str]]</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"n\">sis</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">super_inc_seq</span><span class=\"p\">(</span><span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">26</span><span class=\"p\">)</span>\n        <span class=\"n\">anagrams</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>\n        <span class=\"k\">for</span> <span class=\"n\">word</span> <span class=\"ow\">in</span> <span class=\"n\">strs</span><span class=\"p\">:</span>\n            <span class=\"n\">val</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">evaluate</span><span class=\"p\">(</span><span class=\"n\">word</span><span class=\"p\">,</span> <span class=\"n\">sis</span><span class=\"p\">)</span>\n            <span class=\"k\">if</span> <span class=\"n\">val</span> <span class=\"ow\">not</span> <span class=\"ow\">in</span> <span class=\"n\">anagrams</span><span class=\"p\">:</span>\n                <span class=\"n\">anagrams</span><span class=\"p\">[</span><span class=\"n\">val</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">word</span><span class=\"p\">]</span>\n            <span class=\"k\">else</span><span class=\"p\">:</span>\n                <span class=\"n\">anagrams</span><span class=\"p\">[</span><span class=\"n\">val</span><span class=\"p\">]</span> <span class=\"o\">+=</span> <span class=\"p\">[</span><span class=\"n\">word</span><span class=\"p\">]</span>\n        <span class=\"k\">return</span> <span class=\"p\">[</span><span class=\"n\">anagrams</span><span class=\"p\">[</span><span class=\"n\">k</span><span class=\"p\">]</span> <span class=\"k\">for</span> <span class=\"n\">k</span> <span class=\"ow\">in</span> <span class=\"n\">anagrams</span><span class=\"p\">]</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">super_inc_seq</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">k</span><span class=\"p\">,</span> <span class=\"n\">n</span><span class=\"p\">):</span>\n        <span class=\"n\">elem</span> <span class=\"o\">=</span> <span class=\"mi\">1</span>\n        <span class=\"n\">seq</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">elem</span><span class=\"p\">]</span>\n        <span class=\"n\">s</span> <span class=\"o\">=</span> <span class=\"n\">elem</span>\n        <span class=\"k\">while</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">seq</span><span class=\"p\">)</span> <span class=\"o\">&lt;</span> <span class=\"n\">n</span><span class=\"p\">:</span>\n            <span class=\"n\">elem</span> <span class=\"o\">=</span> <span class=\"n\">k</span><span class=\"o\">*</span><span class=\"n\">s</span>\n            <span class=\"n\">s</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">s</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"o\">*</span><span class=\"n\">k</span>\n            <span class=\"n\">seq</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">elem</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">seq</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">evaluate</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">word</span><span class=\"p\">,</span> <span class=\"n\">sis</span><span class=\"p\">):</span>\n        <span class=\"n\">alphabet</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;abcdefghijklmnopqrstuvwxyz&#39;</span>\n        <span class=\"n\">alphabet_dict</span> <span class=\"o\">=</span> <span class=\"p\">{</span> <span class=\"n\">alphabet</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]:</span> <span class=\"n\">sis</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">26</span><span class=\"p\">)</span> <span class=\"p\">}</span>\n        <span class=\"k\">return</span> <span class=\"nb\">sum</span><span class=\"p\">([</span><span class=\"n\">alphabet_dict</span><span class=\"p\">[</span><span class=\"n\">ch</span><span class=\"p\">]</span> <span class=\"k\">for</span> <span class=\"n\">ch</span> <span class=\"ow\">in</span> <span class=\"n\">word</span><span class=\"p\">])</span>\n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "Post-Lunch Prep (PLP)",
            "flags": [
                "read",
                "historical"
            ],
            "id": 135559172,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 183179,
            "sender_email": "aaron_wood@protonmail.com",
            "sender_full_name": "Aaron Wood (he) (F1'18)",
            "sender_id": 125145,
            "sender_realm_str": "recurse",
            "stream_id": 144212,
            "subject": "Wednesday, 10 Oct 2018",
            "submessages": [],
            "timestamp": 1539195991,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/7614b2155716cc9e51f8be991671ed44?d=identicon&version=1",
            "client": "ZulipElectron",
            "content": "<p>Solved with <span class=\"user-mention\" data-user-id=\"129929\">@Douglas Gordon (F2'18)</span>   It is faster than 1.5% of solutions.  I am having trouble figuring out the big O.  I think it is m*log(n)</p>\n<div class=\"codehilite\"><pre><span></span>const searchMatrix = (matrix, target) =&gt; {\n\n    if (matrix.length === 0 || matrix[0].length === 0) {\n        return false;\n    }\n\n    const [x, y] = findMiddle(matrix);\n\n    if (matrix[x][y] === target) {\n\n        return true\n\n    } else {\n\n        if (matrix.length === 1) {\n\n            return matrix[0].includes(target);\n        }\n\n        const chunks = generateChunks(matrix, x, y, target);\n\n        return chunks.reduce((acc, chunk) =&gt; {\n\n            return acc || searchMatrix(chunk, target);\n\n        }, false)\n\n    }\n\n};\n\nconst generateChunks = (matrix, x, y, target) =&gt; {\n\n    let chunks = [];\n\n    if (matrix[x][y] &lt; target) {\n\n        chunks.push(matrix.slice(x + 1));\n        chunks.push(matrix.slice(0, x + 1).map(el =&gt; el.slice(y + 1)));\n\n    } else {\n\n        chunks.push(matrix.slice(x).map(el =&gt; el.slice(0, y)));\n        chunks.push(matrix.slice(0, x));\n\n    }\n\n    return chunks;\n\n}\n\n\nconst findMiddle = matrix =&gt; {\n\n    const m = Math.floor(matrix.length / 2);\n    const n = Math.floor(matrix[0].length / 2);\n\n    return [m, n];\n\n}\n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "Post-Lunch Prep (PLP)",
            "flags": [
                "read",
                "historical"
            ],
            "id": 135573169,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 183179,
            "sender_email": "carl.schubert@gmail.com",
            "sender_full_name": "Carl Schubert (he) (F2'18)",
            "sender_id": 130326,
            "sender_realm_str": "recurse",
            "stream_id": 144212,
            "subject": "Wednesday, 10 Oct 2018",
            "submessages": [],
            "timestamp": 1539211817,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/6145d0683a46b1516d14fa79f4980dfa1143bdcc?x=x&version=9",
            "client": "website",
            "content": "<p>@all Welcome to today's PLP!! the problems will be projected in the presentation space around lunchtime. If you're interested in pairing, come to the presentation space at 1:45pm to find a partner. If you're interested in post-PLP discussion (PPLPD), meet back at the presentation space at 2:45pm. See you there!!</p>\n<p>topic:<br>\nNone?</p>\n<p>problems:<br>\n<a href=\"https://leetcode.com/problems/house-robber-iii/description/\" target=\"_blank\" title=\"https://leetcode.com/problems/house-robber-iii/description/\">https://leetcode.com/problems/house-robber-iii/description/</a><br>\n<a href=\"https://leetcode.com/problems/product-of-array-except-self/description/\" target=\"_blank\" title=\"https://leetcode.com/problems/product-of-array-except-self/description/\">https://leetcode.com/problems/product-of-array-except-self/description/</a></p>\n<p>host:<br>\n@Aaron Wood (F1'18) (Contact me if you have any questions, concerns, or feedback regarding today's or other days' PLP.)</p>",
            "content_type": "text/html",
            "display_recipient": "Post-Lunch Prep (PLP)",
            "flags": [
                "read",
                "historical"
            ],
            "id": 135617892,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 183179,
            "sender_email": "aaron_wood@protonmail.com",
            "sender_full_name": "Aaron Wood (he) (F1'18)",
            "sender_id": 125145,
            "sender_realm_str": "recurse",
            "stream_id": 144212,
            "subject": "Thursday, 11 Oct 2018",
            "submessages": [],
            "timestamp": 1539273182,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/ca9f8cb0bcede6fa920c47295ad4e7a972c9f863?x=x&version=2",
            "client": "ZulipElectron",
            "content": "<p>House robber with memoization</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"c1\"># Definition for a binary tree node.</span>\n<span class=\"c1\"># class TreeNode(object):</span>\n<span class=\"c1\">#     def __init__(self, x):</span>\n<span class=\"c1\">#         self.val = x</span>\n<span class=\"c1\">#         self.left = None</span>\n<span class=\"c1\">#         self.right = None</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">Solution</span><span class=\"p\">(</span><span class=\"nb\">object</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">cache</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">rob</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">root</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">        :type root: TreeNode</span>\n<span class=\"sd\">        :rtype: int</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">if</span> <span class=\"n\">root</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"mi\">0</span>\n\n        <span class=\"k\">if</span> <span class=\"n\">root</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">cache</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">cache</span><span class=\"p\">[</span><span class=\"n\">root</span><span class=\"p\">]</span>\n\n        <span class=\"n\">robHouse</span> <span class=\"o\">=</span> <span class=\"n\">root</span><span class=\"o\">.</span><span class=\"n\">val</span> <span class=\"o\">+</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">robChildren</span><span class=\"p\">(</span><span class=\"n\">root</span><span class=\"o\">.</span><span class=\"n\">left</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">robChildren</span><span class=\"p\">(</span><span class=\"n\">root</span><span class=\"o\">.</span><span class=\"n\">right</span><span class=\"p\">)</span>\n        <span class=\"n\">dontRobHouse</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">rob</span><span class=\"p\">(</span><span class=\"n\">root</span><span class=\"o\">.</span><span class=\"n\">left</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">rob</span><span class=\"p\">(</span><span class=\"n\">root</span><span class=\"o\">.</span><span class=\"n\">right</span><span class=\"p\">)</span>\n        <span class=\"n\">ans</span> <span class=\"o\">=</span> <span class=\"nb\">max</span><span class=\"p\">(</span><span class=\"n\">robHouse</span><span class=\"p\">,</span> <span class=\"n\">dontRobHouse</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">cache</span><span class=\"p\">[</span><span class=\"n\">root</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">ans</span>\n        <span class=\"k\">return</span> <span class=\"n\">ans</span>\n\n    <span class=\"c1\"># do NOT rob this house; rob the children</span>\n    <span class=\"k\">def</span> <span class=\"nf\">robChildren</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">root</span><span class=\"p\">):</span>\n        <span class=\"k\">if</span> <span class=\"n\">root</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"mi\">0</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">rob</span><span class=\"p\">(</span><span class=\"n\">root</span><span class=\"o\">.</span><span class=\"n\">left</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">rob</span><span class=\"p\">(</span><span class=\"n\">root</span><span class=\"o\">.</span><span class=\"n\">right</span><span class=\"p\">)</span>\n</pre></div>\n\n\n<p>Product of array</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">class</span> <span class=\"nc\">Solution</span><span class=\"p\">(</span><span class=\"nb\">object</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"nf\">productExceptSelf</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">nums</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">        :type nums: List[int]</span>\n<span class=\"sd\">        :rtype: List[int]</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"n\">output</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span><span class=\"o\">*</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">nums</span><span class=\"p\">)</span> <span class=\"c1\"># output array which apparently doesn&#39;t count as extra space =.=</span>\n        <span class=\"n\">acc</span> <span class=\"o\">=</span> <span class=\"mi\">1</span>\n        <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">nums</span><span class=\"p\">)</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">):</span>\n            <span class=\"n\">acc</span> <span class=\"o\">=</span> <span class=\"n\">acc</span><span class=\"o\">*</span><span class=\"n\">nums</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span>\n            <span class=\"n\">output</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">acc</span>\n        <span class=\"n\">acc</span> <span class=\"o\">=</span> <span class=\"mi\">1</span>\n        <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">nums</span><span class=\"p\">)</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">):</span>\n            <span class=\"n\">output</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">output</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">*</span> <span class=\"n\">acc</span>\n            <span class=\"n\">acc</span> <span class=\"o\">=</span> <span class=\"n\">acc</span> <span class=\"o\">*</span> <span class=\"n\">nums</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span>\n        <span class=\"n\">output</span><span class=\"p\">[</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">nums</span><span class=\"p\">)</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">acc</span>\n        <span class=\"k\">return</span> <span class=\"n\">output</span>\n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "Post-Lunch Prep (PLP)",
            "flags": [
                "read",
                "historical"
            ],
            "id": 135631454,
            "is_me_message": false,
            "last_edit_timestamp": 1539288291,
            "reactions": [],
            "recipient_id": 183179,
            "sender_email": "chunli.developer@gmail.com",
            "sender_full_name": "Chun Li (he) (F2'18)",
            "sender_id": 129956,
            "sender_realm_str": "recurse",
            "stream_id": 144212,
            "subject": "Thursday, 11 Oct 2018",
            "submessages": [],
            "timestamp": 1539287374,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/42eb8364884b6847ba9c7485ae5b47650e0e95fc?x=x&version=2",
            "client": "website",
            "content": "<p>Product of array except self:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">typing</span> <span class=\"k\">import</span> <span class=\"n\">List</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">Solution</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"nf\">productExceptSelf</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">nums</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">])</span> <span class=\"o\">-&gt;</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]:</span>\n        <span class=\"n\">results</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">*</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">nums</span><span class=\"p\">)</span>\n        <span class=\"c1\"># first pass - move left to right, such that results[i] = sum(left of i)</span>\n        <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">nums</span><span class=\"p\">)):</span>\n            <span class=\"n\">results</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">results</span><span class=\"p\">[</span><span class=\"n\">i</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">*</span> <span class=\"n\">nums</span><span class=\"p\">[</span><span class=\"n\">i</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">]</span>\n        <span class=\"c1\"># second pass - move right to left, multiplying each cell by a running total</span>\n        <span class=\"c1\"># of right-to-left sums</span>\n        <span class=\"n\">sum_to_right</span> <span class=\"o\">=</span> <span class=\"n\">nums</span><span class=\"p\">[</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">]</span>\n        <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">nums</span><span class=\"p\">)</span> <span class=\"o\">-</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">):</span>\n            <span class=\"n\">results</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">*=</span> <span class=\"n\">sum_to_right</span>\n            <span class=\"n\">sum_to_right</span> <span class=\"o\">*=</span> <span class=\"n\">nums</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span>\n        <span class=\"k\">return</span> <span class=\"n\">results</span>\n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "Post-Lunch Prep (PLP)",
            "flags": [
                "read",
                "historical"
            ],
            "id": 135631778,
            "is_me_message": false,
            "last_edit_timestamp": 1539293412,
            "reactions": [
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "+1",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "chunli.developer@gmail.com",
                        "full_name": "Chun Li (he) (F2'18)",
                        "id": 129956
                    },
                    "user_id": 129956
                }
            ],
            "recipient_id": 183179,
            "sender_email": "dfriedman58@gmail.com",
            "sender_full_name": "Daniel Friedman (he) (S1'18)",
            "sender_id": 116363,
            "sender_realm_str": "recurse",
            "stream_id": 144212,
            "subject": "Thursday, 11 Oct 2018",
            "submessages": [],
            "timestamp": 1539287761,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/927039f8a9a749e3be410a6969f8e2e8175cedf4?x=x&version=2",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-id=\"116363\">@Daniel Friedman (S1'18)</span> , aren't you still using extra space for the variable sum_to_right?</p>\n<p>I got around that by using the left-most element of the answer array to stash the partial product.</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">class</span> <span class=\"nc\">Solution</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"nf\">productExceptSelf</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">nums</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">        :type nums: List[int]</span>\n<span class=\"sd\">        :rtype: List[int]</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">if</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">nums</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"mi\">2</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"n\">nums</span><span class=\"p\">[::</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">]</span>\n        <span class=\"n\">ans</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">nums</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]]</span>\n        <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">nums</span><span class=\"p\">)):</span>\n            <span class=\"n\">ans</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">ans</span><span class=\"p\">[</span><span class=\"n\">i</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">*</span> <span class=\"n\">nums</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">])</span>\n        <span class=\"n\">ans</span><span class=\"p\">[</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">ans</span><span class=\"p\">[</span><span class=\"o\">-</span><span class=\"mi\">2</span><span class=\"p\">]</span>\n        <span class=\"n\">ans</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mi\">1</span>\n        <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">nums</span><span class=\"p\">)</span> <span class=\"o\">-</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">):</span>\n            <span class=\"n\">ans</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">*=</span> <span class=\"n\">nums</span><span class=\"p\">[</span><span class=\"n\">i</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">]</span>\n            <span class=\"n\">ans</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">ans</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">*</span> <span class=\"n\">ans</span><span class=\"p\">[</span><span class=\"n\">i</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">]</span>\n        <span class=\"n\">ans</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">*=</span> <span class=\"n\">nums</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">]</span>\n        <span class=\"n\">ans</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">ans</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">*</span> <span class=\"n\">nums</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n        <span class=\"n\">ans</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">*=</span> <span class=\"n\">nums</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span>\n        <span class=\"k\">return</span> <span class=\"n\">ans</span>\n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "Post-Lunch Prep (PLP)",
            "flags": [
                "read",
                "historical"
            ],
            "id": 135713696,
            "is_me_message": false,
            "last_edit_timestamp": 1539398135,
            "reactions": [],
            "recipient_id": 183179,
            "sender_email": "gretchen.m.wright@gmail.com",
            "sender_full_name": "Gretchen Wright (she) (F2'18)",
            "sender_id": 130181,
            "sender_realm_str": "recurse",
            "stream_id": 144212,
            "subject": "Thursday, 11 Oct 2018",
            "submessages": [],
            "timestamp": 1539398077,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/42eb8364884b6847ba9c7485ae5b47650e0e95fc?x=x&version=2",
            "client": "ZulipMobile",
            "content": "<p>Hey <span class=\"user-mention\" data-user-id=\"130181\">@Gretchen Wright (F2'18)</span> ! While that int does consume some small amount of memory, it\u2019s space usage does not scale with the input, so we get to think of it as a constant space solution (excluding the output array)</p>",
            "content_type": "text/html",
            "display_recipient": "Post-Lunch Prep (PLP)",
            "flags": [
                "read",
                "historical"
            ],
            "id": 135737606,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 183179,
            "sender_email": "dfriedman58@gmail.com",
            "sender_full_name": "Daniel Friedman (he) (S1'18)",
            "sender_id": 116363,
            "sender_realm_str": "recurse",
            "stream_id": 144212,
            "subject": "Thursday, 11 Oct 2018",
            "submessages": [],
            "timestamp": 1539448258,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/6145d0683a46b1516d14fa79f4980dfa1143bdcc?x=x&version=9",
            "client": "website",
            "content": "<p>@all Welcome to today's PLP!! the problems will be projected in the presentation space around lunchtime. If you're interested in pairing, come to the presentation space at 1:45pm to find a partner. If you're interested in post-PLP discussion (PPLPD), meet back at the presentation space at 2:45pm. See you there!!</p>\n<p>problems:<br>\n<a href=\"https://leetcode.com/problems/permutations/description/\" target=\"_blank\" title=\"https://leetcode.com/problems/permutations/description/\">https://leetcode.com/problems/permutations/description/</a><br>\n<a href=\"https://leetcode.com/problems/4sum-ii/description/\" target=\"_blank\" title=\"https://leetcode.com/problems/4sum-ii/description/\">https://leetcode.com/problems/4sum-ii/description/</a></p>\n<p>host:<br>\n@Aaron Wood (F1'18) (Contact me if you have any questions, concerns, or feedback regarding today's or other days' PLP.)</p>",
            "content_type": "text/html",
            "display_recipient": "Post-Lunch Prep (PLP)",
            "flags": [
                "read",
                "historical"
            ],
            "id": 135837756,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 183179,
            "sender_email": "aaron_wood@protonmail.com",
            "sender_full_name": "Aaron Wood (he) (F1'18)",
            "sender_id": 125145,
            "sender_realm_str": "recurse",
            "stream_id": 144212,
            "subject": "Monday, 15 Oct 2018",
            "submessages": [],
            "timestamp": 1539616269,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/1fdd84a57c15f7ecfdded3d0c32019ad32f8af5d?x=x&version=5",
            "client": "website",
            "content": "<p>permutations</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">class</span> <span class=\"nc\">Solution</span><span class=\"p\">(</span><span class=\"nb\">object</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">table</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">permute</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">nums</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">        :type nums: List[int]</span>\n<span class=\"sd\">        :rtype: List[List[int]]</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">nums</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"p\">[[]]</span>\n        <span class=\"k\">if</span> <span class=\"nb\">tuple</span><span class=\"p\">(</span><span class=\"n\">nums</span><span class=\"p\">)</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">table</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">table</span><span class=\"p\">[</span><span class=\"nb\">tuple</span><span class=\"p\">(</span><span class=\"n\">nums</span><span class=\"p\">)]</span>\n        <span class=\"n\">ret</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n        <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">nums</span><span class=\"p\">)):</span>\n            <span class=\"k\">for</span> <span class=\"n\">p</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">permute</span><span class=\"p\">(</span><span class=\"n\">nums</span><span class=\"p\">[:</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">+</span> <span class=\"n\">nums</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"p\">:]):</span>\n                <span class=\"n\">ret</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">([</span><span class=\"n\">nums</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]]</span> <span class=\"o\">+</span> <span class=\"n\">p</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">table</span><span class=\"p\">[</span><span class=\"nb\">tuple</span><span class=\"p\">(</span><span class=\"n\">nums</span><span class=\"p\">)]</span> <span class=\"o\">=</span> <span class=\"n\">ret</span>\n        <span class=\"k\">return</span> <span class=\"n\">ret</span>\n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "Post-Lunch Prep (PLP)",
            "flags": [
                "read",
                "historical"
            ],
            "id": 135839185,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 183179,
            "sender_email": "arpith@feedreader.co",
            "sender_full_name": "Arpith Siromoney (he) (m6'20)",
            "sender_id": 9503,
            "sender_realm_str": "recurse",
            "stream_id": 144212,
            "subject": "Monday, 15 Oct 2018",
            "submessages": [],
            "timestamp": 1539617552,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/c98cd897d78d976aeb69dbc659093719?d=identicon&version=1",
            "client": "ZulipElectron",
            "content": "<p>4sum</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">collections</span> <span class=\"k\">import</span> <span class=\"n\">Counter</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">Solution</span><span class=\"p\">(</span><span class=\"nb\">object</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"nf\">fourSumCount</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">A</span><span class=\"p\">,</span> <span class=\"n\">B</span><span class=\"p\">,</span> <span class=\"n\">C</span><span class=\"p\">,</span> <span class=\"n\">D</span><span class=\"p\">):</span>\n        <span class=\"n\">N</span> <span class=\"o\">=</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">A</span><span class=\"p\">)</span>\n        <span class=\"n\">ab_pairs</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">A</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">+</span> <span class=\"n\">B</span><span class=\"p\">[</span><span class=\"n\">j</span><span class=\"p\">]</span> <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"n\">N</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">j</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"n\">N</span><span class=\"p\">))</span>\n        <span class=\"n\">cd_pairs</span> <span class=\"o\">=</span> <span class=\"n\">Counter</span><span class=\"p\">(</span><span class=\"n\">C</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">+</span> <span class=\"n\">D</span><span class=\"p\">[</span><span class=\"n\">j</span><span class=\"p\">]</span> <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"n\">N</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">j</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"n\">N</span><span class=\"p\">))</span>\n        <span class=\"k\">return</span> <span class=\"nb\">sum</span><span class=\"p\">(</span><span class=\"n\">cd_pairs</span><span class=\"p\">[</span><span class=\"o\">-</span><span class=\"n\">total</span><span class=\"p\">]</span> <span class=\"k\">for</span> <span class=\"n\">total</span> <span class=\"ow\">in</span> <span class=\"n\">ab_pairs</span><span class=\"p\">)</span>\n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "Post-Lunch Prep (PLP)",
            "flags": [
                "read",
                "historical"
            ],
            "id": 135855406,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 183179,
            "sender_email": "felix.czhu@gmail.com",
            "sender_full_name": "Felix Zhu (F1'18)",
            "sender_id": 125020,
            "sender_realm_str": "recurse",
            "stream_id": 144212,
            "subject": "Monday, 15 Oct 2018",
            "submessages": [],
            "timestamp": 1539634355,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/6145d0683a46b1516d14fa79f4980dfa1143bdcc?x=x&version=9",
            "client": "website",
            "content": "<p>4sum</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"nn\">itertools</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">Solution</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"nf\">fourSumCount</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">A</span><span class=\"p\">,</span> <span class=\"n\">B</span><span class=\"p\">,</span> <span class=\"n\">C</span><span class=\"p\">,</span> <span class=\"n\">D</span><span class=\"p\">):</span>\n\n        <span class=\"n\">a_b_c_d</span> <span class=\"o\">=</span> <span class=\"p\">[</span> <span class=\"p\">{</span> <span class=\"n\">x</span> <span class=\"p\">:</span> <span class=\"n\">L</span><span class=\"o\">.</span><span class=\"n\">count</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">x</span> <span class=\"ow\">in</span> <span class=\"nb\">set</span><span class=\"p\">(</span><span class=\"n\">L</span><span class=\"p\">)</span> <span class=\"p\">}</span> <span class=\"k\">for</span> <span class=\"n\">L</span> <span class=\"ow\">in</span> <span class=\"p\">[</span><span class=\"n\">A</span><span class=\"p\">,</span> <span class=\"n\">B</span><span class=\"p\">,</span> <span class=\"n\">C</span><span class=\"p\">,</span> <span class=\"n\">D</span><span class=\"p\">]</span> <span class=\"p\">]</span>\n        <span class=\"n\">ab_cd</span> <span class=\"o\">=</span> <span class=\"p\">[</span> <span class=\"nb\">dict</span><span class=\"p\">(),</span> <span class=\"nb\">dict</span><span class=\"p\">()</span> <span class=\"p\">]</span>\n\n        <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">):</span>\n            <span class=\"n\">L1</span><span class=\"p\">,</span> <span class=\"n\">L2</span> <span class=\"o\">=</span> <span class=\"n\">a_b_c_d</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"o\">*</span><span class=\"n\">i</span><span class=\"p\">],</span> <span class=\"n\">a_b_c_d</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"o\">*</span><span class=\"n\">i</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"p\">]</span>\n            <span class=\"k\">for</span> <span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">y</span> <span class=\"ow\">in</span> <span class=\"n\">itertools</span><span class=\"o\">.</span><span class=\"n\">product</span><span class=\"p\">(</span><span class=\"n\">L1</span><span class=\"p\">,</span> <span class=\"n\">L2</span><span class=\"p\">):</span>\n                <span class=\"k\">if</span> <span class=\"n\">x</span><span class=\"o\">+</span><span class=\"n\">y</span> <span class=\"ow\">in</span> <span class=\"n\">ab_cd</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]:</span>\n                    <span class=\"n\">ab_cd</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">][</span><span class=\"n\">x</span><span class=\"o\">+</span><span class=\"n\">y</span><span class=\"p\">]</span> <span class=\"o\">+=</span> <span class=\"n\">L1</span><span class=\"p\">[</span><span class=\"n\">x</span><span class=\"p\">]</span> <span class=\"o\">*</span> <span class=\"n\">L2</span><span class=\"p\">[</span><span class=\"n\">y</span><span class=\"p\">]</span>\n                <span class=\"k\">else</span><span class=\"p\">:</span>\n                    <span class=\"n\">ab_cd</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">][</span><span class=\"n\">x</span><span class=\"o\">+</span><span class=\"n\">y</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">L1</span><span class=\"p\">[</span><span class=\"n\">x</span><span class=\"p\">]</span> <span class=\"o\">*</span> <span class=\"n\">L2</span><span class=\"p\">[</span><span class=\"n\">y</span><span class=\"p\">]</span>\n\n        <span class=\"n\">AB</span><span class=\"p\">,</span> <span class=\"n\">CD</span> <span class=\"o\">=</span> <span class=\"n\">ab_cd</span>\n        <span class=\"k\">return</span> <span class=\"nb\">sum</span><span class=\"p\">([</span><span class=\"n\">AB</span><span class=\"p\">[</span><span class=\"n\">m</span><span class=\"p\">]</span> <span class=\"o\">*</span> <span class=\"n\">CD</span><span class=\"p\">[</span><span class=\"o\">-</span><span class=\"n\">m</span><span class=\"p\">]</span> <span class=\"k\">for</span> <span class=\"n\">m</span> <span class=\"ow\">in</span> <span class=\"n\">AB</span> <span class=\"k\">if</span> <span class=\"o\">-</span><span class=\"n\">m</span> <span class=\"ow\">in</span> <span class=\"n\">CD</span><span class=\"p\">])</span>\n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "Post-Lunch Prep (PLP)",
            "flags": [
                "read",
                "historical"
            ],
            "id": 135866219,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 183179,
            "sender_email": "aaron_wood@protonmail.com",
            "sender_full_name": "Aaron Wood (he) (F1'18)",
            "sender_id": 125145,
            "sender_realm_str": "recurse",
            "stream_id": 144212,
            "subject": "Monday, 15 Oct 2018",
            "submessages": [],
            "timestamp": 1539646337,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/ff35ce36c86dfb01da582bed81b61ac4c14d2096?x=x&version=4",
            "client": "ZulipElectron",
            "content": "<p>@all Welcome to today's PLP!! the problems will be projected in the presentation space around lunchtime. If you're interested in pairing, come to the presentation space at 1:45pm to find a partner. If you're interested in post-PLP discussion (PPLPD), meet back at the presentation space at 2:45pm. See you there!!</p>\n<p>problems:<br>\n<a href=\"https://leetcode.com/problems/partition-to-k-equal-sum-subsets/description/\" target=\"_blank\" title=\"https://leetcode.com/problems/partition-to-k-equal-sum-subsets/description/\">https://leetcode.com/problems/partition-to-k-equal-sum-subsets/description/</a> (medium)<br>\n<a href=\"https://leetcode.com/problems/number-of-atoms/description/\" target=\"_blank\" title=\"https://leetcode.com/problems/number-of-atoms/description/\">https://leetcode.com/problems/number-of-atoms/description/</a> (hard)</p>\n<p>host:<br>\n<span class=\"user-mention\" data-user-id=\"125277\">@Sheridan Kates (F1'18)</span>  (Contact me if you have any questions, concerns, or feedback regarding today's or other days' PLP.)</p>",
            "content_type": "text/html",
            "display_recipient": "Post-Lunch Prep (PLP)",
            "flags": [
                "read",
                "historical"
            ],
            "id": 135910151,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 183179,
            "sender_email": "sheridan.kates@gmail.com",
            "sender_full_name": "Sheridan Kates (she) (F1'18)",
            "sender_id": 125277,
            "sender_realm_str": "recurse",
            "stream_id": 144212,
            "subject": "Tuesday, 16 Oct 2018",
            "submessages": [],
            "timestamp": 1539706120,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/ca9f8cb0bcede6fa920c47295ad4e7a972c9f863?x=x&version=2",
            "client": "ZulipElectron",
            "content": "<p>if anyone can think of a greedy solution to p1 i'd love to hear it!</p>",
            "content_type": "text/html",
            "display_recipient": "Post-Lunch Prep (PLP)",
            "flags": [
                "read",
                "historical"
            ],
            "id": 135912836,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 183179,
            "sender_email": "chunli.developer@gmail.com",
            "sender_full_name": "Chun Li (he) (F2'18)",
            "sender_id": 129956,
            "sender_realm_str": "recurse",
            "stream_id": 144212,
            "subject": "Tuesday, 16 Oct 2018",
            "submessages": [],
            "timestamp": 1539708724,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/ff35ce36c86dfb01da582bed81b61ac4c14d2096?x=x&version=4",
            "client": "ZulipMobile",
            "content": "<p>@all starting in a few!</p>",
            "content_type": "text/html",
            "display_recipient": "Post-Lunch Prep (PLP)",
            "flags": [
                "read",
                "historical"
            ],
            "id": 135916195,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 183179,
            "sender_email": "sheridan.kates@gmail.com",
            "sender_full_name": "Sheridan Kates (she) (F1'18)",
            "sender_id": 125277,
            "sender_realm_str": "recurse",
            "stream_id": 144212,
            "subject": "Tuesday, 16 Oct 2018",
            "submessages": [],
            "timestamp": 1539711801,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/a7e34bfec28361a2b2e6c4d5116dd59646029c3a?x=x&version=1",
            "client": "ZulipElectron",
            "content": "<p>@all Welcome to today's PLP!! the problems will be projected in the presentation space around lunchtime. If you're interested in pairing, come to the presentation space at 1:45pm to find a partner. If you're interested in post-PLP discussion (PPLPD), meet back at the presentation space at 2:45pm. See you there!!</p>\n<p>problems:<br>\n<a href=\"https://leetcode.com/problems/lexicographical-numbers/description/\" target=\"_blank\" title=\"https://leetcode.com/problems/lexicographical-numbers/description/\">https://leetcode.com/problems/lexicographical-numbers/description/</a> (medium)<br>\n<a href=\"https://leetcode.com/problems/couples-holding-hands/description/\" target=\"_blank\" title=\"https://leetcode.com/problems/couples-holding-hands/description/\">https://leetcode.com/problems/couples-holding-hands/description/</a> (hard)</p>\n<p>host:<br>\n<span class=\"user-mention\" data-user-id=\"7103\">@Gloria Chou (F1'18)</span>  (F1'18) (Contact me if you have any questions, concerns, or feedback regarding today's or other days' PLP.)</p>",
            "content_type": "text/html",
            "display_recipient": "Post-Lunch Prep (PLP)",
            "flags": [
                "read",
                "historical"
            ],
            "id": 135981974,
            "is_me_message": false,
            "last_edit_timestamp": 1539792163,
            "reactions": [],
            "recipient_id": 183179,
            "sender_email": "gchou8@gmail.com",
            "sender_full_name": "Gloria Chou (F1'18)",
            "sender_id": 7103,
            "sender_realm_str": "recurse",
            "stream_id": 144212,
            "subject": "Wednesday, 17 Oct 2018",
            "submessages": [],
            "timestamp": 1539792152,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/23e1fe70d5308e1361010e0519c5d4ec36b53702?x=x&version=2",
            "client": "website",
            "content": "<p>There are a few good snippets in this Hackernews discussion: <a href=\"https://news.ycombinator.com/item?id=18236396\" target=\"_blank\" title=\"https://news.ycombinator.com/item?id=18236396\">https://news.ycombinator.com/item?id=18236396</a>. I learned a few things from the thread, maybe some of you might as well!</p>",
            "content_type": "text/html",
            "display_recipient": "Post-Lunch Prep (PLP)",
            "flags": [
                "read",
                "historical"
            ],
            "id": 135986731,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 183179,
            "sender_email": "zichongkao@gmail.com",
            "sender_full_name": "Zi Chong Kao (he) (F1'18)",
            "sender_id": 125310,
            "sender_realm_str": "recurse",
            "stream_id": 144212,
            "subject": "Algorithms on HN",
            "submessages": [],
            "timestamp": 1539796648,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/ff35ce36c86dfb01da582bed81b61ac4c14d2096?x=x&version=4",
            "client": "ZulipElectron",
            "content": "<p>that's awesome, thanks - I liked this video on encryption from the thread: <a href=\"https://www.youtube.com/watch?v=YEBfamv-_do\" target=\"_blank\" title=\"https://www.youtube.com/watch?v=YEBfamv-_do\">https://www.youtube.com/watch?v=YEBfamv-_do</a></p>\n<div class=\"youtube-video message_inline_image\"><a data-id=\"YEBfamv-_do\" href=\"https://www.youtube.com/watch?v=YEBfamv-_do\" target=\"_blank\" title=\"https://www.youtube.com/watch?v=YEBfamv-_do\"><img src=\"https://i.ytimg.com/vi/YEBfamv-_do/default.jpg\"></a></div>",
            "content_type": "text/html",
            "display_recipient": "Post-Lunch Prep (PLP)",
            "flags": [
                "read",
                "historical"
            ],
            "id": 135988888,
            "is_me_message": false,
            "last_edit_timestamp": 1539798713,
            "reactions": [],
            "recipient_id": 183179,
            "sender_email": "sheridan.kates@gmail.com",
            "sender_full_name": "Sheridan Kates (she) (F1'18)",
            "sender_id": 125277,
            "sender_realm_str": "recurse",
            "stream_id": 144212,
            "subject": "Algorithms on HN",
            "submessages": [],
            "timestamp": 1539798690,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/6145d0683a46b1516d14fa79f4980dfa1143bdcc?x=x&version=9",
            "client": "website",
            "content": "<p>Couples Holding Hands with <span class=\"user-mention\" data-user-id=\"7103\">@Gloria Chou (F1'18)</span>  our first submission was in the 100th percentile!!  <span class=\"emoji emoji-1f60e\" title=\"sunglasses\">:sunglasses:</span></p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">class</span> <span class=\"nc\">Solution</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"nf\">minSwapsCouples</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">row</span><span class=\"p\">):</span>\n        <span class=\"n\">length</span> <span class=\"o\">=</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">row</span><span class=\"p\">)</span>\n        <span class=\"n\">dictionary</span> <span class=\"o\">=</span> <span class=\"p\">{</span> <span class=\"n\">row</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"p\">:</span> <span class=\"n\">i</span> <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"n\">length</span><span class=\"p\">)</span> <span class=\"p\">}</span>\n        <span class=\"n\">counter</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n\n        <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">length</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">):</span>\n            <span class=\"n\">partner</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">partner</span><span class=\"p\">(</span><span class=\"n\">row</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">])</span>\n            <span class=\"k\">if</span> <span class=\"n\">row</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">!=</span> <span class=\"n\">partner</span><span class=\"p\">:</span>\n                <span class=\"n\">counter</span> <span class=\"o\">+=</span> <span class=\"mi\">1</span>\n                <span class=\"n\">partner_pos</span> <span class=\"o\">=</span> <span class=\"n\">dictionary</span><span class=\"p\">[</span><span class=\"n\">partner</span><span class=\"p\">]</span>\n                <span class=\"n\">dictionary</span><span class=\"p\">[</span><span class=\"n\">partner</span><span class=\"p\">],</span> <span class=\"n\">dictionary</span><span class=\"p\">[</span><span class=\"n\">row</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"n\">i</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">dictionary</span><span class=\"p\">[</span><span class=\"n\">partner</span><span class=\"p\">]</span>\n                <span class=\"n\">row</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"p\">],</span> <span class=\"n\">row</span><span class=\"p\">[</span><span class=\"n\">partner_pos</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">row</span><span class=\"p\">[</span><span class=\"n\">partner_pos</span><span class=\"p\">],</span> <span class=\"n\">row</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"p\">]</span>\n        <span class=\"k\">return</span> <span class=\"n\">counter</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">partner</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">i</span><span class=\"p\">):</span>\n        <span class=\"k\">if</span> <span class=\"n\">i</span> <span class=\"o\">%</span> <span class=\"mi\">2</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"n\">i</span> <span class=\"o\">+</span> <span class=\"mi\">1</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"n\">i</span> <span class=\"o\">-</span> <span class=\"mi\">1</span>\n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "Post-Lunch Prep (PLP)",
            "flags": [
                "read",
                "historical"
            ],
            "id": 135991693,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f4af",
                    "emoji_name": "100",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "zev@averba.ch",
                        "full_name": "Zev Benjamin Averbach (he) (F2'18)",
                        "id": 130018
                    },
                    "user_id": 130018
                },
                {
                    "emoji_code": "1f4af",
                    "emoji_name": "100",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "nekanek@protonmail.com",
                        "full_name": "Marina Inina (she) (F2'18)",
                        "id": 129939
                    },
                    "user_id": 129939
                },
                {
                    "emoji_code": "1f4af",
                    "emoji_name": "100",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "sheridan.kates@gmail.com",
                        "full_name": "Sheridan Kates (she) (F1'18)",
                        "id": 125277
                    },
                    "user_id": 125277
                },
                {
                    "emoji_code": "1f4af",
                    "emoji_name": "100",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "mattg@leema.org",
                        "full_name": "Matthew Graham (he) (F1'18)",
                        "id": 125276
                    },
                    "user_id": 125276
                },
                {
                    "emoji_code": "1f4af",
                    "emoji_name": "100",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "aatigar@gmail.com",
                        "full_name": "Adam Avery Tigar (he) (F2'18)",
                        "id": 130218
                    },
                    "user_id": 130218
                },
                {
                    "emoji_code": "1f4af",
                    "emoji_name": "100",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "felix.czhu@gmail.com",
                        "full_name": "Felix Zhu (F1'18)",
                        "id": 125020
                    },
                    "user_id": 125020
                },
                {
                    "emoji_code": "1f4af",
                    "emoji_name": "100",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "hi@charlietran.com",
                        "full_name": "Charlie Tran (he) (F1'18)",
                        "id": 124995
                    },
                    "user_id": 124995
                }
            ],
            "recipient_id": 183179,
            "sender_email": "aaron_wood@protonmail.com",
            "sender_full_name": "Aaron Wood (he) (F1'18)",
            "sender_id": 125145,
            "sender_realm_str": "recurse",
            "stream_id": 144212,
            "subject": "Wednesday, 17 Oct 2018",
            "submessages": [],
            "timestamp": 1539801039,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/7da8f8ef20569f6876aeb1188d2ebb6d41c6f842?x=x&version=2",
            "client": "ZulipElectron",
            "content": "<p>Solution for Lexicographical Numbers:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">class</span> <span class=\"nc\">Solution</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"nf\">lexicalOrder</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">n</span><span class=\"p\">):</span>\n        <span class=\"n\">nums</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n        <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">):</span>\n            <span class=\"n\">nums</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"nb\">sorted</span><span class=\"p\">(</span><span class=\"n\">nums</span><span class=\"p\">,</span> <span class=\"n\">key</span><span class=\"o\">=</span><span class=\"nb\">str</span><span class=\"p\">)</span>\n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "Post-Lunch Prep (PLP)",
            "flags": [
                "read",
                "historical"
            ],
            "id": 135993301,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f40d",
                    "emoji_name": "snake",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "arpith@feedreader.co",
                        "full_name": "Arpith Siromoney (he) (m6'20)",
                        "id": 9503
                    },
                    "user_id": 9503
                },
                {
                    "emoji_code": "1f40d",
                    "emoji_name": "snake",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "felix.czhu@gmail.com",
                        "full_name": "Felix Zhu (F1'18)",
                        "id": 125020
                    },
                    "user_id": 125020
                }
            ],
            "recipient_id": 183179,
            "sender_email": "KeenanKomoto@gmail.com",
            "sender_full_name": "Keenan Tsuruichi Komoto (he) (F2'18)",
            "sender_id": 129934,
            "sender_realm_str": "recurse",
            "stream_id": 144212,
            "subject": "Wednesday, 17 Oct 2018",
            "submessages": [],
            "timestamp": 1539802604,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/ff35ce36c86dfb01da582bed81b61ac4c14d2096?x=x&version=4",
            "client": "ZulipElectron",
            "content": "<p>@all Welcome to today's PLP!! the problems will be projected in the presentation space around lunchtime. If you're interested in pairing, come to the presentation space at 1:45pm to find a partner. If you're interested in post-PLP discussion (PPLPD), meet back at the presentation space at 2:45pm. See you there!!</p>\n<p>problems<br>\n<a href=\"https://leetcode.com/problems/majority-element/\" target=\"_blank\" title=\"https://leetcode.com/problems/majority-element/\">https://leetcode.com/problems/majority-element/</a> (easy)<br>\n<a href=\"https://leetcode.com/problems/generate-parentheses/\" target=\"_blank\" title=\"https://leetcode.com/problems/generate-parentheses/\">https://leetcode.com/problems/generate-parentheses/</a> (medium)</p>\n<p>host:<br>\n<span class=\"user-mention\" data-user-id=\"125277\">@Sheridan Kates (F1'18)</span>  (Contact me if you have any questions, concerns, or feedback regarding today's or other days' PLP.)</p>",
            "content_type": "text/html",
            "display_recipient": "Post-Lunch Prep (PLP)",
            "flags": [
                "read",
                "historical"
            ],
            "id": 136051063,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 183179,
            "sender_email": "sheridan.kates@gmail.com",
            "sender_full_name": "Sheridan Kates (she) (F1'18)",
            "sender_id": 125277,
            "sender_realm_str": "recurse",
            "stream_id": 144212,
            "subject": "Thursday, 18 Oct 2018",
            "submessages": [],
            "timestamp": 1539876815,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/ff35ce36c86dfb01da582bed81b61ac4c14d2096?x=x&version=4",
            "client": "ZulipElectron",
            "content": "<p>also LeetCode appears to have a fancy new interface</p>",
            "content_type": "text/html",
            "display_recipient": "Post-Lunch Prep (PLP)",
            "flags": [
                "read",
                "historical"
            ],
            "id": 136051078,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 183179,
            "sender_email": "sheridan.kates@gmail.com",
            "sender_full_name": "Sheridan Kates (she) (F1'18)",
            "sender_id": 125277,
            "sender_realm_str": "recurse",
            "stream_id": 144212,
            "subject": "Thursday, 18 Oct 2018",
            "submessages": [],
            "timestamp": 1539876829,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/7da8f8ef20569f6876aeb1188d2ebb6d41c6f842?x=x&version=2",
            "client": "website",
            "content": "<p><em>Solution to majority element</em><br>\nDefinitely not optimal:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">class</span> <span class=\"nc\">Solution</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"nf\">majorityElement</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">nums</span><span class=\"p\">):</span>\n        <span class=\"n\">maj</span> <span class=\"o\">=</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">nums</span><span class=\"p\">)</span><span class=\"o\">/</span><span class=\"mi\">2</span>\n        <span class=\"n\">count</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>\n        <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"n\">nums</span><span class=\"p\">:</span>\n            <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">count</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">):</span>\n                <span class=\"n\">count</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mi\">1</span>\n            <span class=\"k\">elif</span> <span class=\"n\">count</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">):</span>\n                <span class=\"n\">count</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">+=</span> <span class=\"mi\">1</span>\n            <span class=\"k\">if</span> <span class=\"n\">count</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">)</span> <span class=\"o\">&gt;</span> <span class=\"n\">maj</span><span class=\"p\">:</span>\n                <span class=\"k\">return</span> <span class=\"n\">i</span>\n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "Post-Lunch Prep (PLP)",
            "flags": [
                "read",
                "historical"
            ],
            "id": 136052658,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 183179,
            "sender_email": "KeenanKomoto@gmail.com",
            "sender_full_name": "Keenan Tsuruichi Komoto (he) (F2'18)",
            "sender_id": 129934,
            "sender_realm_str": "recurse",
            "stream_id": 144212,
            "subject": "Thursday, 18 Oct 2018",
            "submessages": [],
            "timestamp": 1539878480,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/36716766e555f85a2c18cf8f358d6f63ccc077d9?x=x&version=2",
            "client": "website",
            "content": "<p>generating parentheses? was this PLP question sponsored by the LISP lobby? <span class=\"emoji emoji-1f638\" title=\"smile cat\">:smile_cat:</span></p>",
            "content_type": "text/html",
            "display_recipient": "Post-Lunch Prep (PLP)",
            "flags": [
                "read",
                "historical"
            ],
            "id": 136056505,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f601",
                    "emoji_name": "grinning_face_with_smiling_eyes",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "chunli.developer@gmail.com",
                        "full_name": "Chun Li (he) (F2'18)",
                        "id": 129956
                    },
                    "user_id": 129956
                },
                {
                    "emoji_code": "1f601",
                    "emoji_name": "grinning_face_with_smiling_eyes",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "douglastgordon@gmail.com",
                        "full_name": "Douglas Gordon (he) (F2'18)",
                        "id": 129929
                    },
                    "user_id": 129929
                },
                {
                    "emoji_code": "1f601",
                    "emoji_name": "grinning_face_with_smiling_eyes",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "sheridan.kates@gmail.com",
                        "full_name": "Sheridan Kates (she) (F1'18)",
                        "id": 125277
                    },
                    "user_id": 125277
                },
                {
                    "emoji_code": "1f601",
                    "emoji_name": "grinning_face_with_smiling_eyes",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "felix.czhu@gmail.com",
                        "full_name": "Felix Zhu (F1'18)",
                        "id": 125020
                    },
                    "user_id": 125020
                }
            ],
            "recipient_id": 183179,
            "sender_email": "mattg@leema.org",
            "sender_full_name": "Matthew Graham (he) (F1'18)",
            "sender_id": 125276,
            "sender_realm_str": "recurse",
            "stream_id": 144212,
            "subject": "Thursday, 18 Oct 2018",
            "submessages": [],
            "timestamp": 1539882004,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/ca9f8cb0bcede6fa920c47295ad4e7a972c9f863?x=x&version=2",
            "client": "ZulipElectron",
            "content": "<p>Majority element in O(1) space, O(n) time</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">class</span> <span class=\"nc\">Solution</span><span class=\"p\">(</span><span class=\"nb\">object</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"nf\">majorityElement</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">nums</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">        :type nums: List[int]</span>\n<span class=\"sd\">        :rtype: int</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"n\">el</span> <span class=\"o\">=</span> <span class=\"n\">nums</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n        <span class=\"n\">count</span> <span class=\"o\">=</span> <span class=\"mi\">1</span>\n        <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">nums</span><span class=\"p\">))):</span>\n            <span class=\"k\">if</span> <span class=\"n\">nums</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"n\">el</span><span class=\"p\">:</span>\n                <span class=\"n\">count</span> <span class=\"o\">+=</span> <span class=\"mi\">1</span>\n            <span class=\"k\">else</span><span class=\"p\">:</span>\n                <span class=\"n\">count</span> <span class=\"o\">-=</span> <span class=\"mi\">1</span>\n                <span class=\"k\">if</span> <span class=\"n\">count</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">:</span>\n                    <span class=\"n\">el</span> <span class=\"o\">=</span> <span class=\"n\">nums</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span>\n                    <span class=\"n\">count</span> <span class=\"o\">=</span> <span class=\"mi\">1</span>\n        <span class=\"k\">return</span> <span class=\"n\">el</span>\n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "Post-Lunch Prep (PLP)",
            "flags": [
                "read",
                "historical"
            ],
            "id": 136060977,
            "is_me_message": false,
            "last_edit_timestamp": 1539886049,
            "reactions": [],
            "recipient_id": 183179,
            "sender_email": "chunli.developer@gmail.com",
            "sender_full_name": "Chun Li (he) (F2'18)",
            "sender_id": 129956,
            "sender_realm_str": "recurse",
            "stream_id": 144212,
            "subject": "Thursday, 18 Oct 2018",
            "submessages": [],
            "timestamp": 1539886030,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/ca9f8cb0bcede6fa920c47295ad4e7a972c9f863?x=x&version=2",
            "client": "ZulipElectron",
            "content": "<p>Parens</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">class</span> <span class=\"nc\">Solution</span><span class=\"p\">(</span><span class=\"nb\">object</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"nf\">generateParenthesis</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">n</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">        :type n: int</span>\n<span class=\"sd\">        :rtype: List[str]</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">return</span> <span class=\"n\">generateParens</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"s2\">&quot;&quot;</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># prefix is the string so far</span>\n<span class=\"k\">def</span> <span class=\"nf\">generateParens</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">,</span> <span class=\"n\">numOpen</span><span class=\"p\">,</span> <span class=\"n\">prefix</span><span class=\"p\">):</span>\n    <span class=\"k\">if</span> <span class=\"n\">n</span> <span class=\"o\">==</span> <span class=\"mi\">0</span> <span class=\"ow\">and</span> <span class=\"n\">numOpen</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">:</span>\n        <span class=\"k\">return</span> <span class=\"p\">[</span><span class=\"n\">prefix</span><span class=\"p\">]</span>\n    <span class=\"n\">ans</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n    <span class=\"k\">if</span> <span class=\"n\">n</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span><span class=\"p\">:</span>\n        <span class=\"n\">opened</span> <span class=\"o\">=</span> <span class=\"n\">generateParens</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">numOpen</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">prefix</span> <span class=\"o\">+</span> <span class=\"s2\">&quot;(&quot;</span><span class=\"p\">)</span>\n        <span class=\"n\">ans</span><span class=\"o\">.</span><span class=\"n\">extend</span><span class=\"p\">(</span><span class=\"n\">opened</span><span class=\"p\">)</span>\n    <span class=\"k\">if</span> <span class=\"n\">numOpen</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span><span class=\"p\">:</span>\n        <span class=\"n\">closed</span> <span class=\"o\">=</span> <span class=\"n\">generateParens</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">,</span> <span class=\"n\">numOpen</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">prefix</span> <span class=\"o\">+</span> <span class=\"s2\">&quot;)&quot;</span><span class=\"p\">)</span>\n        <span class=\"n\">ans</span><span class=\"o\">.</span><span class=\"n\">extend</span><span class=\"p\">(</span><span class=\"n\">closed</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"n\">ans</span>\n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "Post-Lunch Prep (PLP)",
            "flags": [
                "read",
                "historical"
            ],
            "id": 136069484,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 183179,
            "sender_email": "chunli.developer@gmail.com",
            "sender_full_name": "Chun Li (he) (F2'18)",
            "sender_id": 129956,
            "sender_realm_str": "recurse",
            "stream_id": 144212,
            "subject": "Thursday, 18 Oct 2018",
            "submessages": [],
            "timestamp": 1539894602,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/1fdd84a57c15f7ecfdded3d0c32019ad32f8af5d?x=x&version=5",
            "client": "website",
            "content": "<p>majority</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">statistics</span> <span class=\"kn\">import</span> <span class=\"n\">median_low</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">Solution</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"nf\">majorityElement</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">nums</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">        :type nums: List[int]</span>\n<span class=\"sd\">        :rtype: int</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">return</span> <span class=\"n\">median_low</span><span class=\"p\">(</span><span class=\"n\">nums</span><span class=\"p\">)</span>\n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "Post-Lunch Prep (PLP)",
            "flags": [
                "read",
                "historical"
            ],
            "id": 136120228,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f600",
                    "emoji_name": "grinning",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "felix.czhu@gmail.com",
                        "full_name": "Felix Zhu (F1'18)",
                        "id": 125020
                    },
                    "user_id": 125020
                }
            ],
            "recipient_id": 183179,
            "sender_email": "arpith@feedreader.co",
            "sender_full_name": "Arpith Siromoney (he) (m6'20)",
            "sender_id": 9503,
            "sender_realm_str": "recurse",
            "stream_id": 144212,
            "subject": "Thursday, 18 Oct 2018",
            "submessages": [],
            "timestamp": 1539964279,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/1fdd84a57c15f7ecfdded3d0c32019ad32f8af5d?x=x&version=5",
            "client": "website",
            "content": "<p>lisp lobby ;)</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">class</span> <span class=\"nc\">Solution</span><span class=\"p\">(</span><span class=\"nb\">object</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"nf\">grow</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">c</span><span class=\"p\">,</span> <span class=\"n\">l_rem</span><span class=\"p\">,</span> <span class=\"n\">r_rem</span><span class=\"p\">):</span>\n        <span class=\"k\">if</span> <span class=\"n\">c</span> <span class=\"o\">==</span> <span class=\"s1\">&#39;(&#39;</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"p\">[</span><span class=\"s1\">&#39;(&#39;</span> <span class=\"o\">+</span> <span class=\"n\">s</span> <span class=\"k\">for</span> <span class=\"n\">s</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">parenthesize</span><span class=\"p\">((</span><span class=\"n\">l_rem</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">r_rem</span><span class=\"p\">))]</span>\n        <span class=\"k\">return</span> <span class=\"p\">[</span><span class=\"s1\">&#39;)&#39;</span> <span class=\"o\">+</span> <span class=\"n\">s</span> <span class=\"k\">for</span> <span class=\"n\">s</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">parenthesize</span><span class=\"p\">((</span><span class=\"n\">l_rem</span><span class=\"p\">,</span> <span class=\"n\">r_rem</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">))]</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">parenthesize</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">rem</span><span class=\"p\">):</span>\n        <span class=\"k\">if</span> <span class=\"n\">rem</span> <span class=\"ow\">not</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">table</span><span class=\"p\">:</span>\n            <span class=\"k\">if</span> <span class=\"n\">rem</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">:</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">table</span><span class=\"p\">[</span><span class=\"n\">rem</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">grow</span><span class=\"p\">(</span><span class=\"s1\">&#39;)&#39;</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">rem</span><span class=\"p\">)</span>\n            <span class=\"k\">elif</span> <span class=\"n\">rem</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">&lt;</span> <span class=\"n\">rem</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]:</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">table</span><span class=\"p\">[</span><span class=\"n\">rem</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">grow</span><span class=\"p\">(</span><span class=\"s1\">&#39;(&#39;</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">rem</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">grow</span><span class=\"p\">(</span><span class=\"s1\">&#39;)&#39;</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">rem</span><span class=\"p\">)</span>\n            <span class=\"k\">else</span><span class=\"p\">:</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">table</span><span class=\"p\">[</span><span class=\"n\">rem</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">grow</span><span class=\"p\">(</span><span class=\"s1\">&#39;(&#39;</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">rem</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">table</span><span class=\"p\">[</span><span class=\"n\">rem</span><span class=\"p\">]</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">generateParenthesis</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">n</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">        :type n: int</span>\n<span class=\"sd\">        :rtype: List[str]</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">table</span> <span class=\"o\">=</span> <span class=\"p\">{(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">):</span> <span class=\"p\">[</span><span class=\"s1\">&#39;&#39;</span><span class=\"p\">]}</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">parenthesize</span><span class=\"p\">((</span><span class=\"n\">n</span><span class=\"p\">,</span> <span class=\"n\">n</span><span class=\"p\">))</span>\n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "Post-Lunch Prep (PLP)",
            "flags": [
                "read",
                "historical"
            ],
            "id": 136120297,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f600",
                    "emoji_name": "grinning",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "felix.czhu@gmail.com",
                        "full_name": "Felix Zhu (F1'18)",
                        "id": 125020
                    },
                    "user_id": 125020
                }
            ],
            "recipient_id": 183179,
            "sender_email": "arpith@feedreader.co",
            "sender_full_name": "Arpith Siromoney (he) (m6'20)",
            "sender_id": 9503,
            "sender_realm_str": "recurse",
            "stream_id": 144212,
            "subject": "Thursday, 18 Oct 2018",
            "submessages": [],
            "timestamp": 1539964328,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/6145d0683a46b1516d14fa79f4980dfa1143bdcc?x=x&version=9",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-id=\"*\">@all</span>  Welcome to today's PLP!! the problems will be projected in the presentation space around lunchtime. If you're interested in pairing, come to the presentation space at 1:45pm to find a partner. If you're interested in post-PLP discussion (PPLPD), meet back at the presentation space at 2:45pm. See you there!!</p>\n<p>problems<br>\n<a href=\"https://leetcode.com/problems/first-unique-character-in-a-string/description/\" target=\"_blank\" title=\"https://leetcode.com/problems/first-unique-character-in-a-string/description/\">https://leetcode.com/problems/first-unique-character-in-a-string/description/</a> (medium)<br>\n<a href=\"https://leetcode.com/problems/find-and-replace-pattern/description/\" target=\"_blank\" title=\"https://leetcode.com/problems/find-and-replace-pattern/description/\">https://leetcode.com/problems/find-and-replace-pattern/description/</a> (medium)</p>\n<p>host:<br>\n<span class=\"user-mention\" data-user-id=\"125145\">@Aaron Wood (F1'18)</span> (Contact me if you have any questions, concerns, or feedback regarding today's or other days' PLP.)</p>",
            "content_type": "text/html",
            "display_recipient": "Post-Lunch Prep (PLP)",
            "flags": [
                "read",
                "historical"
            ],
            "id": 136269138,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 183179,
            "sender_email": "aaron_wood@protonmail.com",
            "sender_full_name": "Aaron Wood (he) (F1'18)",
            "sender_id": 125145,
            "sender_realm_str": "recurse",
            "stream_id": 144212,
            "subject": "Monday, 22 Oct 2018",
            "submessages": [],
            "timestamp": 1540216791,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/6145d0683a46b1516d14fa79f4980dfa1143bdcc?x=x&version=9",
            "client": "website",
            "content": "<p>both problems w/ <span class=\"user-mention\" data-user-id=\"129934\">@Keenan Tsuruichi Komoto (F2'18)</span> and <span class=\"user-mention\" data-user-id=\"130406\">@Heime S Ashkenazie (F2'18)</span> </p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">class</span> <span class=\"nc\">Solution</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"nf\">firstUniqChar</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">s</span><span class=\"p\">):</span>\n        <span class=\"n\">char_dict</span> <span class=\"o\">=</span> <span class=\"nb\">dict</span><span class=\"p\">()</span>\n        <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">)):</span>\n            <span class=\"n\">ch</span> <span class=\"o\">=</span> <span class=\"n\">s</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span>\n            <span class=\"k\">if</span> <span class=\"n\">ch</span> <span class=\"ow\">in</span> <span class=\"n\">char_dict</span><span class=\"p\">:</span>\n                <span class=\"k\">if</span> <span class=\"n\">char_dict</span><span class=\"p\">[</span><span class=\"n\">ch</span><span class=\"p\">]</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n                    <span class=\"n\">char_dict</span><span class=\"p\">[</span><span class=\"n\">ch</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n            <span class=\"k\">else</span><span class=\"p\">:</span>\n                <span class=\"n\">char_dict</span><span class=\"p\">[</span><span class=\"n\">ch</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">i</span>\n        <span class=\"c1\">#return min([i for i in char_dict.values() if i is not None]) or -1</span>\n        <span class=\"n\">indeces</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">i</span> <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"n\">char_dict</span><span class=\"o\">.</span><span class=\"n\">values</span><span class=\"p\">()</span> <span class=\"k\">if</span> <span class=\"n\">i</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"kc\">None</span><span class=\"p\">]</span>\n        <span class=\"k\">if</span> <span class=\"n\">indeces</span> <span class=\"o\">==</span> <span class=\"p\">[]:</span>\n            <span class=\"k\">return</span> <span class=\"o\">-</span><span class=\"mi\">1</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"nb\">min</span><span class=\"p\">(</span><span class=\"n\">indeces</span><span class=\"p\">)</span>\n</pre></div>\n\n\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">class</span> <span class=\"nc\">Solution</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"nf\">findAndReplacePattern</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">words</span><span class=\"p\">,</span> <span class=\"n\">pattern</span><span class=\"p\">):</span>\n        <span class=\"n\">pattern_match</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">pmatch</span><span class=\"p\">(</span><span class=\"n\">pattern</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"p\">[</span><span class=\"n\">w</span> <span class=\"k\">for</span> <span class=\"n\">w</span> <span class=\"ow\">in</span> <span class=\"n\">words</span> <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">pmatch</span><span class=\"p\">(</span><span class=\"n\">w</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"n\">pattern_match</span><span class=\"p\">]</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">pmatch</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">s</span><span class=\"p\">):</span>\n        <span class=\"n\">matched</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"n\">ch</span> <span class=\"p\">:</span> <span class=\"n\">s</span><span class=\"o\">.</span><span class=\"n\">index</span><span class=\"p\">(</span><span class=\"n\">ch</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">ch</span> <span class=\"ow\">in</span> <span class=\"nb\">set</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">)}</span>\n        <span class=\"k\">return</span> <span class=\"p\">[</span><span class=\"n\">matched</span><span class=\"p\">[</span><span class=\"n\">ch</span><span class=\"p\">]</span> <span class=\"k\">for</span> <span class=\"n\">ch</span> <span class=\"ow\">in</span> <span class=\"n\">s</span><span class=\"p\">]</span>\n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "Post-Lunch Prep (PLP)",
            "flags": [
                "read",
                "historical"
            ],
            "id": 136286356,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "+1",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "KeenanKomoto@gmail.com",
                        "full_name": "Keenan Tsuruichi Komoto (he) (F2'18)",
                        "id": 129934
                    },
                    "user_id": 129934
                }
            ],
            "recipient_id": 183179,
            "sender_email": "aaron_wood@protonmail.com",
            "sender_full_name": "Aaron Wood (he) (F1'18)",
            "sender_id": 125145,
            "sender_realm_str": "recurse",
            "stream_id": 144212,
            "subject": "Monday, 22 Oct 2018",
            "submessages": [],
            "timestamp": 1540234014,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/fab048d6c3f7059f681e8e9595f05127?d=identicon&version=1",
            "client": "ZulipElectron",
            "content": "<p><span class=\"user-mention\" data-user-id=\"130084\">@Sonja Lea Heinze (F2'18)</span> and my solution:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">class</span> <span class=\"nc\">Solution</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"nf\">findAndReplacePattern</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">words</span><span class=\"p\">,</span> <span class=\"n\">pattern</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">        :type words: List[str]</span>\n<span class=\"sd\">        :type pattern: str</span>\n<span class=\"sd\">        :rtype: List[str]</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"n\">pattern_dict</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">make_dict</span><span class=\"p\">(</span><span class=\"n\">pattern</span><span class=\"p\">)</span>\n        <span class=\"n\">l</span> <span class=\"o\">=</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">pattern</span><span class=\"p\">)</span>\n\n        <span class=\"k\">return</span> <span class=\"p\">[</span><span class=\"n\">word</span> <span class=\"k\">for</span> <span class=\"n\">word</span> <span class=\"ow\">in</span> <span class=\"n\">words</span>\n                <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">is_match</span><span class=\"p\">(</span><span class=\"n\">word</span><span class=\"p\">,</span> <span class=\"n\">pattern_dict</span><span class=\"p\">,</span> <span class=\"n\">l</span><span class=\"p\">)]</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">is_match</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">word</span><span class=\"p\">,</span> <span class=\"n\">pattern_dict</span><span class=\"p\">,</span> <span class=\"n\">pattern_length</span><span class=\"p\">):</span>\n      <span class=\"k\">if</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">word</span><span class=\"p\">)</span> <span class=\"o\">!=</span> <span class=\"n\">pattern_length</span><span class=\"p\">:</span>\n        <span class=\"k\">return</span> <span class=\"bp\">False</span>\n\n      <span class=\"n\">used_chars</span> <span class=\"o\">=</span> <span class=\"nb\">set</span><span class=\"p\">([])</span>\n      <span class=\"k\">for</span> <span class=\"n\">key</span> <span class=\"ow\">in</span> <span class=\"n\">pattern_dict</span><span class=\"o\">.</span><span class=\"n\">keys</span><span class=\"p\">():</span>\n        <span class=\"n\">current_char</span> <span class=\"o\">=</span> <span class=\"n\">word</span><span class=\"p\">[</span><span class=\"n\">key</span><span class=\"p\">]</span>\n        <span class=\"k\">if</span> <span class=\"n\">current_char</span> <span class=\"ow\">in</span> <span class=\"n\">used_chars</span><span class=\"p\">:</span>\n          <span class=\"k\">return</span> <span class=\"bp\">False</span>\n\n        <span class=\"n\">used_chars</span><span class=\"o\">.</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"n\">current_char</span><span class=\"p\">)</span>\n\n        <span class=\"k\">for</span> <span class=\"n\">ind</span> <span class=\"ow\">in</span> <span class=\"n\">pattern_dict</span><span class=\"p\">[</span><span class=\"n\">key</span><span class=\"p\">]:</span>\n          <span class=\"k\">if</span> <span class=\"n\">word</span><span class=\"p\">[</span><span class=\"n\">ind</span><span class=\"p\">]</span> <span class=\"o\">!=</span> <span class=\"n\">current_char</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"bp\">False</span>\n\n      <span class=\"k\">return</span> <span class=\"bp\">True</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">make_dict</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">L</span><span class=\"p\">):</span>\n        <span class=\"n\">D</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>\n        <span class=\"k\">for</span> <span class=\"n\">ind</span><span class=\"p\">,</span> <span class=\"n\">char</span> <span class=\"ow\">in</span> <span class=\"nb\">enumerate</span><span class=\"p\">(</span><span class=\"n\">L</span><span class=\"p\">):</span>\n          <span class=\"n\">D</span><span class=\"o\">.</span><span class=\"n\">setdefault</span><span class=\"p\">(</span><span class=\"n\">char</span><span class=\"p\">,</span> <span class=\"p\">[])</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">ind</span><span class=\"p\">)</span>\n\n        <span class=\"n\">D2</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>\n        <span class=\"k\">for</span> <span class=\"n\">key</span> <span class=\"ow\">in</span> <span class=\"n\">D</span><span class=\"o\">.</span><span class=\"n\">keys</span><span class=\"p\">():</span>\n          <span class=\"n\">D2</span><span class=\"p\">[</span><span class=\"n\">D</span><span class=\"p\">[</span><span class=\"n\">key</span><span class=\"p\">][</span><span class=\"mi\">0</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"n\">D</span><span class=\"p\">[</span><span class=\"n\">key</span><span class=\"p\">]</span>\n\n        <span class=\"k\">return</span> <span class=\"n\">D2</span>\n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "Post-Lunch Prep (PLP)",
            "flags": [
                "read",
                "historical"
            ],
            "id": 136288449,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f60e",
                    "emoji_name": "sunglasses",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "aaron_wood@protonmail.com",
                        "full_name": "Aaron Wood (he) (F1'18)",
                        "id": 125145
                    },
                    "user_id": 125145
                }
            ],
            "recipient_id": 183179,
            "sender_email": "ethanzanemiller@gmail.com",
            "sender_full_name": "Ethan Zane Miller (he) (F2'18)",
            "sender_id": 130321,
            "sender_realm_str": "recurse",
            "stream_id": 144212,
            "subject": "Monday, 22 Oct 2018",
            "submessages": [],
            "timestamp": 1540236140,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/6145d0683a46b1516d14fa79f4980dfa1143bdcc?x=x&version=9",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-id=\"*\">@all</span>  Welcome to today's PLP!! the problems will be projected in the presentation space around lunchtime. If you're interested in pairing, come to the presentation space at 1:45pm to find a partner. If you're interested in post-PLP discussion (PPLPD), meet back at the presentation space at 2:45pm. See you there!!</p>\n<p>problems<br>\n<a href=\"https://leetcode.com/problems/valid-triangle-number/description/\" target=\"_blank\" title=\"https://leetcode.com/problems/valid-triangle-number/description/\">https://leetcode.com/problems/valid-triangle-number/description/</a> (medium)<br>\n<a href=\"https://leetcode.com/problems/rectangle-area-ii/description/\" target=\"_blank\" title=\"https://leetcode.com/problems/rectangle-area-ii/description/\">https://leetcode.com/problems/rectangle-area-ii/description/</a> (hard)</p>\n<p>host:<br>\n@Aaron Wood (F1'18) (Contact me if you have any questions, concerns, or feedback regarding today's or other days' PLP.)</p>",
            "content_type": "text/html",
            "display_recipient": "Post-Lunch Prep (PLP)",
            "flags": [
                "read",
                "historical"
            ],
            "id": 136345835,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 183179,
            "sender_email": "aaron_wood@protonmail.com",
            "sender_full_name": "Aaron Wood (he) (F1'18)",
            "sender_id": 125145,
            "sender_realm_str": "recurse",
            "stream_id": 144212,
            "subject": "Tuesday, 23 Oct 2018",
            "submessages": [],
            "timestamp": 1540309777,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/a7e34bfec28361a2b2e6c4d5116dd59646029c3a?x=x&version=1",
            "client": "ZulipElectron",
            "content": "<p><span class=\"user-mention\" data-user-id=\"*\">@all</span>  Welcome to today's PLP!! the problems will be projected in the presentation space around lunchtime. If you're interested in pairing, come to the presentation space at 1:45pm to find a partner. If you're interested in post-PLP discussion (PPLPD), meet back at the presentation space at 2:45pm. See you there!!</p>\n<p>problems<br>\n<a href=\"https://leetcode.com/problems/construct-binary-tree-from-preorder-and-inorder-traversal/description/\" target=\"_blank\" title=\"https://leetcode.com/problems/construct-binary-tree-from-preorder-and-inorder-traversal/description/\">https://leetcode.com/problems/construct-binary-tree-from-preorder-and-inorder-traversal/description/</a> (medium)<br>\n<a href=\"https://leetcode.com/problems/edit-distance/description/\" target=\"_blank\" title=\"https://leetcode.com/problems/edit-distance/description/\">https://leetcode.com/problems/edit-distance/description/</a> (hard)</p>\n<p>host:<br>\n<span class=\"user-mention\" data-user-id=\"7103\">@Gloria Chou (F1'18)</span>  (Contact me if you have any questions, concerns, or feedback regarding today's or other days' PLP.)</p>",
            "content_type": "text/html",
            "display_recipient": "Post-Lunch Prep (PLP)",
            "flags": [
                "read",
                "historical"
            ],
            "id": 136418887,
            "is_me_message": false,
            "last_edit_timestamp": 1540396899,
            "reactions": [],
            "recipient_id": 183179,
            "sender_email": "gchou8@gmail.com",
            "sender_full_name": "Gloria Chou (F1'18)",
            "sender_id": 7103,
            "sender_realm_str": "recurse",
            "stream_id": 144212,
            "subject": "Wednesday, 24 Oct 2018",
            "submessages": [],
            "timestamp": 1540396618,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/927039f8a9a749e3be410a6969f8e2e8175cedf4?x=x&version=2",
            "client": "website",
            "content": "<p>Rectangle Area II</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">class</span> <span class=\"nc\">Solution</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"nf\">rectangleArea</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">rectangles</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">        :type rectangles: List[List[int]]</span>\n<span class=\"sd\">        :rtype: int</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"c1\"># Read through all rectangles and catalog the ones with tops and bottoms at each height level</span>\n        <span class=\"n\">bottoms</span> <span class=\"o\">=</span> <span class=\"nb\">dict</span><span class=\"p\">()</span>\n        <span class=\"n\">tops</span> <span class=\"o\">=</span> <span class=\"nb\">dict</span><span class=\"p\">()</span>\n        <span class=\"n\">all_y</span> <span class=\"o\">=</span> <span class=\"nb\">set</span><span class=\"p\">()</span>\n        <span class=\"k\">for</span> <span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"n\">r</span> <span class=\"ow\">in</span> <span class=\"nb\">enumerate</span><span class=\"p\">(</span><span class=\"n\">rectangles</span><span class=\"p\">):</span>\n            <span class=\"n\">x1</span><span class=\"p\">,</span> <span class=\"n\">y1</span><span class=\"p\">,</span> <span class=\"n\">x2</span><span class=\"p\">,</span> <span class=\"n\">y2</span> <span class=\"o\">=</span> <span class=\"n\">r</span>\n            <span class=\"n\">tops</span><span class=\"p\">[</span><span class=\"n\">y2</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">tops</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"n\">y2</span><span class=\"p\">,</span> <span class=\"p\">[])</span> <span class=\"o\">+</span> <span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span>\n            <span class=\"n\">all_y</span><span class=\"o\">.</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"n\">y2</span><span class=\"p\">)</span>\n            <span class=\"n\">bottoms</span><span class=\"p\">[</span><span class=\"n\">y1</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">bottoms</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"n\">y1</span><span class=\"p\">,</span> <span class=\"p\">[])</span> <span class=\"o\">+</span> <span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span>\n            <span class=\"n\">all_y</span><span class=\"o\">.</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"n\">y1</span><span class=\"p\">)</span>\n        <span class=\"n\">all_y</span> <span class=\"o\">=</span> <span class=\"nb\">sorted</span><span class=\"p\">(</span><span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">all_y</span><span class=\"p\">))</span>\n        <span class=\"n\">area</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n        <span class=\"n\">prev_y</span> <span class=\"o\">=</span> <span class=\"n\">all_y</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n        <span class=\"c1\"># at first stage, add rectangles with the lowest y1 to the current set</span>\n        <span class=\"n\">cur_x</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n        <span class=\"k\">for</span> <span class=\"n\">rect</span> <span class=\"ow\">in</span> <span class=\"n\">bottoms</span><span class=\"p\">[</span><span class=\"n\">prev_y</span><span class=\"p\">]:</span>\n            <span class=\"n\">x1</span><span class=\"p\">,</span> <span class=\"n\">y1</span><span class=\"p\">,</span> <span class=\"n\">x2</span><span class=\"p\">,</span> <span class=\"n\">y2</span> <span class=\"o\">=</span> <span class=\"n\">rectangles</span><span class=\"p\">[</span><span class=\"n\">rect</span><span class=\"p\">]</span>\n            <span class=\"n\">cur_x</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">((</span><span class=\"n\">x1</span><span class=\"p\">,</span> <span class=\"s1\">&#39;s&#39;</span><span class=\"p\">))</span>\n            <span class=\"n\">cur_x</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">((</span><span class=\"n\">x2</span><span class=\"p\">,</span> <span class=\"s1\">&#39;e&#39;</span><span class=\"p\">))</span>\n        <span class=\"k\">for</span> <span class=\"n\">j</span><span class=\"p\">,</span> <span class=\"n\">y</span> <span class=\"ow\">in</span> <span class=\"nb\">enumerate</span><span class=\"p\">(</span><span class=\"n\">all_y</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">:]):</span>\n        <span class=\"c1\"># at later stages, add area of current stage to the running sum</span>\n        <span class=\"c1\"># then both add rectangles that are starting and remove ones that are ending</span>\n            <span class=\"n\">cur_x</span><span class=\"o\">.</span><span class=\"n\">sort</span><span class=\"p\">()</span>\n            <span class=\"n\">netCount</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n            <span class=\"n\">totalWidth</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n            <span class=\"k\">for</span> <span class=\"n\">x</span> <span class=\"ow\">in</span> <span class=\"n\">cur_x</span><span class=\"p\">:</span>\n                <span class=\"k\">if</span> <span class=\"n\">netCount</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">:</span>\n                    <span class=\"n\">left_x</span> <span class=\"o\">=</span> <span class=\"n\">x</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n                <span class=\"k\">if</span> <span class=\"n\">x</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"s1\">&#39;s&#39;</span><span class=\"p\">:</span>\n                    <span class=\"n\">netCount</span> <span class=\"o\">+=</span> <span class=\"mi\">1</span>\n                <span class=\"k\">if</span> <span class=\"n\">x</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"s1\">&#39;e&#39;</span><span class=\"p\">:</span>\n                    <span class=\"n\">netCount</span> <span class=\"o\">-=</span> <span class=\"mi\">1</span>\n                <span class=\"k\">if</span> <span class=\"n\">netCount</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">:</span>\n                    <span class=\"n\">totalWidth</span> <span class=\"o\">+=</span> <span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">-</span> <span class=\"n\">left_x</span><span class=\"p\">)</span>\n            <span class=\"n\">height</span> <span class=\"o\">=</span> <span class=\"n\">y</span> <span class=\"o\">-</span> <span class=\"n\">prev_y</span>\n            <span class=\"n\">area</span> <span class=\"o\">+=</span> <span class=\"n\">totalWidth</span> <span class=\"o\">*</span> <span class=\"p\">(</span><span class=\"n\">height</span><span class=\"p\">)</span>\n            <span class=\"k\">if</span> <span class=\"n\">bottoms</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"n\">y</span><span class=\"p\">)</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"bp\">None</span><span class=\"p\">:</span>\n                <span class=\"k\">for</span> <span class=\"n\">rect</span> <span class=\"ow\">in</span> <span class=\"n\">bottoms</span><span class=\"p\">[</span><span class=\"n\">y</span><span class=\"p\">]:</span>\n                    <span class=\"n\">x1</span><span class=\"p\">,</span> <span class=\"n\">y1</span><span class=\"p\">,</span> <span class=\"n\">x2</span><span class=\"p\">,</span> <span class=\"n\">y2</span> <span class=\"o\">=</span> <span class=\"n\">rectangles</span><span class=\"p\">[</span><span class=\"n\">rect</span><span class=\"p\">]</span>\n                    <span class=\"n\">cur_x</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">((</span><span class=\"n\">x1</span><span class=\"p\">,</span> <span class=\"s1\">&#39;s&#39;</span><span class=\"p\">))</span>\n                    <span class=\"n\">cur_x</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">((</span><span class=\"n\">x2</span><span class=\"p\">,</span> <span class=\"s1\">&#39;e&#39;</span><span class=\"p\">))</span>\n            <span class=\"k\">if</span> <span class=\"n\">tops</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"n\">y</span><span class=\"p\">)</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"bp\">None</span><span class=\"p\">:</span>\n                <span class=\"k\">for</span> <span class=\"n\">rect</span> <span class=\"ow\">in</span> <span class=\"n\">tops</span><span class=\"p\">[</span><span class=\"n\">y</span><span class=\"p\">]:</span>\n                    <span class=\"n\">x1</span><span class=\"p\">,</span> <span class=\"n\">y1</span><span class=\"p\">,</span> <span class=\"n\">x2</span><span class=\"p\">,</span> <span class=\"n\">y2</span> <span class=\"o\">=</span> <span class=\"n\">rectangles</span><span class=\"p\">[</span><span class=\"n\">rect</span><span class=\"p\">]</span>\n                    <span class=\"n\">cur_x</span><span class=\"o\">.</span><span class=\"n\">remove</span><span class=\"p\">((</span><span class=\"n\">x1</span><span class=\"p\">,</span> <span class=\"s1\">&#39;s&#39;</span><span class=\"p\">))</span>\n                    <span class=\"n\">cur_x</span><span class=\"o\">.</span><span class=\"n\">remove</span><span class=\"p\">((</span><span class=\"n\">x2</span><span class=\"p\">,</span> <span class=\"s1\">&#39;e&#39;</span><span class=\"p\">))</span>\n            <span class=\"n\">prev_y</span> <span class=\"o\">=</span> <span class=\"n\">y</span>\n        <span class=\"k\">return</span> <span class=\"n\">area</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"o\">**</span><span class=\"mi\">9</span> <span class=\"o\">+</span> <span class=\"mi\">7</span><span class=\"p\">)</span>\n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "Post-Lunch Prep (PLP)",
            "flags": [
                "read",
                "historical"
            ],
            "id": 136419736,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f60e",
                    "emoji_name": "sunglasses",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "aaron_wood@protonmail.com",
                        "full_name": "Aaron Wood (he) (F1'18)",
                        "id": 125145
                    },
                    "user_id": 125145
                }
            ],
            "recipient_id": 183179,
            "sender_email": "gretchen.m.wright@gmail.com",
            "sender_full_name": "Gretchen Wright (she) (F2'18)",
            "sender_id": 130181,
            "sender_realm_str": "recurse",
            "stream_id": 144212,
            "subject": "Tuesday, 23 Oct 2018",
            "submessages": [],
            "timestamp": 1540397445,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/a7e34bfec28361a2b2e6c4d5116dd59646029c3a?x=x&version=1",
            "client": "ZulipElectron",
            "content": "<p>Different traversals reference: <a href=\"https://www.geeksforgeeks.org/tree-traversals-inorder-preorder-and-postorder/\" target=\"_blank\" title=\"https://www.geeksforgeeks.org/tree-traversals-inorder-preorder-and-postorder/\">https://www.geeksforgeeks.org/tree-traversals-inorder-preorder-and-postorder/</a></p>",
            "content_type": "text/html",
            "display_recipient": "Post-Lunch Prep (PLP)",
            "flags": [
                "read",
                "historical"
            ],
            "id": 136425321,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 183179,
            "sender_email": "gchou8@gmail.com",
            "sender_full_name": "Gloria Chou (F1'18)",
            "sender_id": 7103,
            "sender_realm_str": "recurse",
            "stream_id": 144212,
            "subject": "Wednesday, 24 Oct 2018",
            "submessages": [],
            "timestamp": 1540403393,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/fab048d6c3f7059f681e8e9595f05127?d=identicon&version=1",
            "client": "ZulipElectron",
            "content": "<p>A completion of what  <span class=\"user-mention\" data-user-id=\"130440\">@Jack Wilson (F2'18)</span>, <span class=\"user-mention\" data-user-id=\"129934\">@Keenan Tsuruichi Komoto (F2'18)</span> and I started for the inorder/preorder tree problem. It passes but is suuuuuper slow:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">class</span> <span class=\"nc\">Solution</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"nf\">buildTree</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">preorder</span><span class=\"p\">,</span> <span class=\"n\">inorder</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">        :type preorder: List[int]</span>\n<span class=\"sd\">        :type inorder: List[int]</span>\n<span class=\"sd\">        :rtype: TreeNode</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">if</span> <span class=\"n\">inorder</span><span class=\"p\">:</span>\n          <span class=\"n\">root_idx</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n          <span class=\"k\">while</span> <span class=\"n\">preorder</span><span class=\"p\">[</span><span class=\"n\">root_idx</span><span class=\"p\">]</span> <span class=\"ow\">not</span> <span class=\"ow\">in</span> <span class=\"n\">inorder</span><span class=\"p\">:</span>\n            <span class=\"n\">root_idx</span> <span class=\"o\">+=</span> <span class=\"mi\">1</span>\n          <span class=\"n\">root</span> <span class=\"o\">=</span> <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"n\">preorder</span><span class=\"p\">[</span><span class=\"n\">root_idx</span><span class=\"p\">])</span>\n          <span class=\"n\">idx</span> <span class=\"o\">=</span> <span class=\"n\">inorder</span><span class=\"o\">.</span><span class=\"n\">index</span><span class=\"p\">(</span><span class=\"n\">root</span><span class=\"o\">.</span><span class=\"n\">val</span><span class=\"p\">)</span>\n          <span class=\"n\">root</span><span class=\"o\">.</span><span class=\"n\">left</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">buildTree</span><span class=\"p\">(</span><span class=\"n\">preorder</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">:],</span> <span class=\"n\">inorder</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">:</span><span class=\"n\">idx</span><span class=\"p\">])</span>\n          <span class=\"n\">root</span><span class=\"o\">.</span><span class=\"n\">right</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">buildTree</span><span class=\"p\">(</span><span class=\"n\">preorder</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">:],</span> <span class=\"n\">inorder</span><span class=\"p\">[</span><span class=\"n\">idx</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"p\">:])</span>\n          <span class=\"k\">return</span> <span class=\"n\">root</span>\n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "Post-Lunch Prep (PLP)",
            "flags": [
                "read",
                "historical"
            ],
            "id": 136438226,
            "is_me_message": false,
            "last_edit_timestamp": 1540417795,
            "reactions": [
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "+1",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "mattg@leema.org",
                        "full_name": "Matthew Graham (he) (F1'18)",
                        "id": 125276
                    },
                    "user_id": 125276
                }
            ],
            "recipient_id": 183179,
            "sender_email": "ethanzanemiller@gmail.com",
            "sender_full_name": "Ethan Zane Miller (he) (F2'18)",
            "sender_id": 130321,
            "sender_realm_str": "recurse",
            "stream_id": 144212,
            "subject": "Wednesday, 24 Oct 2018",
            "submessages": [],
            "timestamp": 1540417377,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/36716766e555f85a2c18cf8f358d6f63ccc077d9?x=x&version=2",
            "client": "website",
            "content": "<p>thanks for posting. this was an interesting problem</p>",
            "content_type": "text/html",
            "display_recipient": "Post-Lunch Prep (PLP)",
            "flags": [
                "read",
                "historical"
            ],
            "id": 136488195,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 183179,
            "sender_email": "mattg@leema.org",
            "sender_full_name": "Matthew Graham (he) (F1'18)",
            "sender_id": 125276,
            "sender_realm_str": "recurse",
            "stream_id": 144212,
            "subject": "Wednesday, 24 Oct 2018",
            "submessages": [],
            "timestamp": 1540483522,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/ff35ce36c86dfb01da582bed81b61ac4c14d2096?x=x&version=4",
            "client": "ZulipElectron",
            "content": "<p><span class=\"user-mention\" data-user-id=\"*\">@all</span>  Welcome to today's PLP!! the problems will be projected in the presentation space around lunchtime. If you're interested in pairing, come to the presentation space at 1:45pm to find a partner. If you're interested in post-PLP discussion (PPLPD), meet back at the presentation space at 2:45pm. See you there!!</p>\n<p>problems<br>\n<a href=\"https://leetcode.com/problems/target-sum/\" target=\"_blank\" title=\"https://leetcode.com/problems/target-sum/\">https://leetcode.com/problems/target-sum/</a> (medium)<br>\n<a href=\"https://leetcode.com/problems/burst-balloons/\" target=\"_blank\" title=\"https://leetcode.com/problems/burst-balloons/\">https://leetcode.com/problems/burst-balloons/</a> (hard)</p>\n<p>host:<br>\n<span class=\"user-mention\" data-user-id=\"125277\">@Sheridan Kates (F1'18)</span>  (Contact me if you have any questions, concerns, or feedback regarding today's or other days' PLP.)</p>",
            "content_type": "text/html",
            "display_recipient": "Post-Lunch Prep (PLP)",
            "flags": [
                "read",
                "historical"
            ],
            "id": 136489150,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 183179,
            "sender_email": "sheridan.kates@gmail.com",
            "sender_full_name": "Sheridan Kates (she) (F1'18)",
            "sender_id": 125277,
            "sender_realm_str": "recurse",
            "stream_id": 144212,
            "subject": "Thursday, 25 Oct 2018",
            "submessages": [],
            "timestamp": 1540484375,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/ff35ce36c86dfb01da582bed81b61ac4c14d2096?x=x&version=4",
            "client": "ZulipElectron",
            "content": "<p><span class=\"user-mention\" data-user-id=\"*\">@all</span> starting now in the main space!</p>",
            "content_type": "text/html",
            "display_recipient": "Post-Lunch Prep (PLP)",
            "flags": [
                "read",
                "historical"
            ],
            "id": 136494486,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 183179,
            "sender_email": "sheridan.kates@gmail.com",
            "sender_full_name": "Sheridan Kates (she) (F1'18)",
            "sender_id": 125277,
            "sender_realm_str": "recurse",
            "stream_id": 144212,
            "subject": "Thursday, 25 Oct 2018",
            "submessages": [],
            "timestamp": 1540489483,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/6145d0683a46b1516d14fa79f4980dfa1143bdcc?x=x&version=9",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-id=\"*\">@all</span>  Welcome to today's PLP!! the problems will be projected in the presentation space around lunchtime. If you're interested in pairing, come to the presentation space at 1:45pm to find a partner. If you're interested in post-PLP discussion (PPLPD), meet back at the presentation space at 2:45pm. See you there!!</p>\n<p>problems<br>\n<a href=\"https://leetcode.com/problems/binary-search-tree-iterator/description/\" target=\"_blank\" title=\"https://leetcode.com/problems/binary-search-tree-iterator/description/\">https://leetcode.com/problems/binary-search-tree-iterator/description/</a> (medium)<br>\n<a href=\"https://leetcode.com/problems/count-of-smaller-numbers-after-self/description/\" target=\"_blank\" title=\"https://leetcode.com/problems/count-of-smaller-numbers-after-self/description/\">https://leetcode.com/problems/count-of-smaller-numbers-after-self/description/</a> (hard)</p>\n<p>host:<br>\n<span class=\"user-mention\" data-user-id=\"125145\">@Aaron Wood (F1'18)</span>  (Contact me if you have any questions, concerns, or feedback regarding today's or other days' PLP.)</p>",
            "content_type": "text/html",
            "display_recipient": "Post-Lunch Prep (PLP)",
            "flags": [
                "read",
                "historical"
            ],
            "id": 136710036,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 183179,
            "sender_email": "aaron_wood@protonmail.com",
            "sender_full_name": "Aaron Wood (he) (F1'18)",
            "sender_id": 125145,
            "sender_realm_str": "recurse",
            "stream_id": 144212,
            "subject": "Monday, 29 Oct 2018",
            "submessages": [],
            "timestamp": 1540824135,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/6145d0683a46b1516d14fa79f4980dfa1143bdcc?x=x&version=9",
            "client": "website",
            "content": "<p>h/t <span class=\"user-mention\" data-user-id=\"125276\">@Matthew Graham (F1'18)</span> for the first problem ^_^</p>",
            "content_type": "text/html",
            "display_recipient": "Post-Lunch Prep (PLP)",
            "flags": [
                "read",
                "historical"
            ],
            "id": 136710223,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 183179,
            "sender_email": "aaron_wood@protonmail.com",
            "sender_full_name": "Aaron Wood (he) (F1'18)",
            "sender_id": 125145,
            "sender_realm_str": "recurse",
            "stream_id": 144212,
            "subject": "Monday, 29 Oct 2018",
            "submessages": [],
            "timestamp": 1540824355,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/a7e34bfec28361a2b2e6c4d5116dd59646029c3a?x=x&version=1",
            "client": "ZulipElectron",
            "content": "<p><span class=\"user-mention\" data-user-id=\"*\">@all</span>  Welcome to today's PLP!! the problems will be projected in the presentation space around lunchtime. If you're interested in pairing, come to the presentation space at 1:45pm to find a partner. If you're interested in post-PLP discussion (PPLPD), meet back at the presentation space at 2:45pm. See you there!!</p>\n<p>problems<br>\n<a href=\"https://leetcode.com/problems/longest-increasing-subsequence/description/\" target=\"_blank\" title=\"https://leetcode.com/problems/longest-increasing-subsequence/description/\">https://leetcode.com/problems/longest-increasing-subsequence/description/</a> (medium)<br>\n<a href=\"https://leetcode.com/problems/subarray-sum-equals-k/description/\" target=\"_blank\" title=\"https://leetcode.com/problems/subarray-sum-equals-k/description/\">https://leetcode.com/problems/subarray-sum-equals-k/description/</a> (medium)</p>\n<p>host:<br>\n<span class=\"user-mention\" data-user-id=\"7103\">@Gloria Chou (F1'18)</span>  (Contact me if you have any questions, concerns, or feedback regarding today's or other days' PLP.)</p>",
            "content_type": "text/html",
            "display_recipient": "Post-Lunch Prep (PLP)",
            "flags": [
                "read",
                "historical"
            ],
            "id": 136791763,
            "is_me_message": false,
            "last_edit_timestamp": 1540921006,
            "reactions": [
                {
                    "emoji_code": "1f4c8",
                    "emoji_name": "chart",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "mattg@leema.org",
                        "full_name": "Matthew Graham (he) (F1'18)",
                        "id": 125276
                    },
                    "user_id": 125276
                }
            ],
            "recipient_id": 183179,
            "sender_email": "gchou8@gmail.com",
            "sender_full_name": "Gloria Chou (F1'18)",
            "sender_id": 7103,
            "sender_realm_str": "recurse",
            "stream_id": 144212,
            "subject": "Tuesday, 30 Oct 2018",
            "submessages": [],
            "timestamp": 1540919939,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/36716766e555f85a2c18cf8f358d6f63ccc077d9?x=x&version=2",
            "client": "website",
            "content": "<p>did anyone do this today? they both look good but I forgot to come down today until it was too late. I'm still going to try to do them later</p>",
            "content_type": "text/html",
            "display_recipient": "Post-Lunch Prep (PLP)",
            "flags": [
                "read",
                "historical"
            ],
            "id": 136805218,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 183179,
            "sender_email": "mattg@leema.org",
            "sender_full_name": "Matthew Graham (he) (F1'18)",
            "sender_id": 125276,
            "sender_realm_str": "recurse",
            "stream_id": 144212,
            "subject": "Tuesday, 30 Oct 2018",
            "submessages": [],
            "timestamp": 1540931810,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/ff35ce36c86dfb01da582bed81b61ac4c14d2096?x=x&version=4",
            "client": "ZulipElectron",
            "content": "<p>am so close on #1</p>",
            "content_type": "text/html",
            "display_recipient": "Post-Lunch Prep (PLP)",
            "flags": [
                "read",
                "historical"
            ],
            "id": 136805934,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 183179,
            "sender_email": "sheridan.kates@gmail.com",
            "sender_full_name": "Sheridan Kates (she) (F1'18)",
            "sender_id": 125277,
            "sender_realm_str": "recurse",
            "stream_id": 144212,
            "subject": "Tuesday, 30 Oct 2018",
            "submessages": [],
            "timestamp": 1540932572,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/36716766e555f85a2c18cf8f358d6f63ccc077d9?x=x&version=2",
            "client": "website",
            "content": "<p>oh nice. i just started on that one</p>",
            "content_type": "text/html",
            "display_recipient": "Post-Lunch Prep (PLP)",
            "flags": [
                "read",
                "historical"
            ],
            "id": 136806308,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 183179,
            "sender_email": "mattg@leema.org",
            "sender_full_name": "Matthew Graham (he) (F1'18)",
            "sender_id": 125276,
            "sender_realm_str": "recurse",
            "stream_id": 144212,
            "subject": "Tuesday, 30 Oct 2018",
            "submessages": [],
            "timestamp": 1540932899,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/927039f8a9a749e3be410a6969f8e2e8175cedf4?x=x&version=2",
            "client": "website",
            "content": "<p>I did the first one, but only the O(n^2) version, not the O(n log n). LMK if anyone wants to discuss.</p>",
            "content_type": "text/html",
            "display_recipient": "Post-Lunch Prep (PLP)",
            "flags": [
                "read",
                "historical"
            ],
            "id": 136854621,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 183179,
            "sender_email": "gretchen.m.wright@gmail.com",
            "sender_full_name": "Gretchen Wright (she) (F2'18)",
            "sender_id": 130181,
            "sender_realm_str": "recurse",
            "stream_id": 144212,
            "subject": "Tuesday, 30 Oct 2018",
            "submessages": [],
            "timestamp": 1540995417,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/ff35ce36c86dfb01da582bed81b61ac4c14d2096?x=x&version=4",
            "client": "ZulipElectron",
            "content": "<p>yeah I wasn't as close as I thought I was :/ would definitely be down to chat about this later. I have an interview that clashes with today's PLP, but perhaps I could chat to you about it after that <span class=\"user-mention\" data-user-id=\"130181\">@Gretchen Wright (F2'18)</span> ?</p>",
            "content_type": "text/html",
            "display_recipient": "Post-Lunch Prep (PLP)",
            "flags": [
                "read",
                "historical"
            ],
            "id": 136858897,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 183179,
            "sender_email": "sheridan.kates@gmail.com",
            "sender_full_name": "Sheridan Kates (she) (F1'18)",
            "sender_id": 125277,
            "sender_realm_str": "recurse",
            "stream_id": 144212,
            "subject": "Tuesday, 30 Oct 2018",
            "submessages": [],
            "timestamp": 1540999213,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/927039f8a9a749e3be410a6969f8e2e8175cedf4?x=x&version=2",
            "client": "website",
            "content": "<p>Sounds great! Good luck on the interview.</p>",
            "content_type": "text/html",
            "display_recipient": "Post-Lunch Prep (PLP)",
            "flags": [
                "read",
                "historical"
            ],
            "id": 136858945,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 183179,
            "sender_email": "gretchen.m.wright@gmail.com",
            "sender_full_name": "Gretchen Wright (she) (F2'18)",
            "sender_id": 130181,
            "sender_realm_str": "recurse",
            "stream_id": 144212,
            "subject": "Tuesday, 30 Oct 2018",
            "submessages": [],
            "timestamp": 1540999263,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/ff35ce36c86dfb01da582bed81b61ac4c14d2096?x=x&version=4",
            "client": "ZulipElectron",
            "content": "<p>great, and thanks!</p>",
            "content_type": "text/html",
            "display_recipient": "Post-Lunch Prep (PLP)",
            "flags": [
                "read",
                "historical"
            ],
            "id": 136859551,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 183179,
            "sender_email": "sheridan.kates@gmail.com",
            "sender_full_name": "Sheridan Kates (she) (F1'18)",
            "sender_id": 125277,
            "sender_realm_str": "recurse",
            "stream_id": 144212,
            "subject": "Tuesday, 30 Oct 2018",
            "submessages": [],
            "timestamp": 1540999869,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/1fdd84a57c15f7ecfdded3d0c32019ad32f8af5d?x=x&version=5",
            "client": "website",
            "content": "<p>an old solution to longest increasing (I think this was from the cracking the code book + binary  search)</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">class</span> <span class=\"nc\">Solution</span><span class=\"p\">(</span><span class=\"nb\">object</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"nf\">findFirstLargerOrEqual</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">num</span><span class=\"p\">,</span> <span class=\"n\">nums</span><span class=\"p\">):</span>\n        <span class=\"n\">low</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n        <span class=\"n\">high</span> <span class=\"o\">=</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">nums</span><span class=\"p\">)</span>\n        <span class=\"k\">while</span> <span class=\"n\">high</span> <span class=\"o\">&gt;</span> <span class=\"n\">low</span><span class=\"p\">:</span>\n            <span class=\"n\">m</span> <span class=\"o\">=</span> <span class=\"n\">low</span> <span class=\"o\">+</span> <span class=\"p\">(</span><span class=\"n\">high</span> <span class=\"o\">-</span> <span class=\"n\">low</span><span class=\"p\">)</span><span class=\"o\">//</span><span class=\"mi\">2</span>\n            <span class=\"k\">if</span> <span class=\"n\">nums</span><span class=\"p\">[</span><span class=\"n\">m</span><span class=\"p\">]</span> <span class=\"o\">&lt;</span> <span class=\"n\">num</span><span class=\"p\">:</span>\n                <span class=\"n\">low</span> <span class=\"o\">=</span> <span class=\"n\">m</span><span class=\"o\">+</span><span class=\"mi\">1</span>\n            <span class=\"k\">elif</span> <span class=\"n\">low</span> <span class=\"o\">&lt;</span> <span class=\"n\">m</span> <span class=\"ow\">and</span> <span class=\"n\">nums</span><span class=\"p\">[</span><span class=\"n\">m</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">&gt;=</span> <span class=\"n\">num</span><span class=\"p\">:</span>\n                <span class=\"n\">high</span> <span class=\"o\">=</span> <span class=\"n\">m</span>\n            <span class=\"k\">else</span><span class=\"p\">:</span>\n                <span class=\"k\">return</span> <span class=\"n\">m</span>\n        <span class=\"k\">raise</span> <span class=\"ne\">ValueError</span><span class=\"p\">(</span><span class=\"s1\">&#39;Not found&#39;</span><span class=\"p\">)</span>\n\n\n    <span class=\"k\">def</span> <span class=\"nf\">replace</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">j</span><span class=\"p\">):</span>\n        <span class=\"c1\"># Find the array ending with the smallest number larger than num</span>\n        <span class=\"c1\"># Replace that number with num</span>\n        <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">findFirstLargerOrEqual</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">nums</span><span class=\"p\">[</span><span class=\"n\">j</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">nums</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">arrays</span><span class=\"p\">])</span>\n        <span class=\"k\">if</span> <span class=\"n\">i</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span> <span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">parents</span><span class=\"p\">[</span><span class=\"n\">j</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">arrays</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">]</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">arrays</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">j</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">lengthOfLIS</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">nums</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">        :type nums: List[int]</span>\n<span class=\"sd\">        :rtype: int</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">if</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">nums</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"mi\">0</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">nums</span> <span class=\"o\">=</span> <span class=\"n\">nums</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">arrays</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">parents</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>\n        <span class=\"k\">for</span> <span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"n\">num</span> <span class=\"ow\">in</span> <span class=\"nb\">enumerate</span><span class=\"p\">(</span><span class=\"n\">nums</span><span class=\"p\">):</span>\n            <span class=\"k\">if</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">arrays</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">:</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">arrays</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">)</span>\n            <span class=\"k\">if</span> <span class=\"n\">nums</span><span class=\"p\">[</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">arrays</span><span class=\"p\">[</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">]]</span> <span class=\"o\">&lt;</span> <span class=\"n\">num</span><span class=\"p\">:</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">parents</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">arrays</span><span class=\"p\">[</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">]</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">arrays</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">)</span>\n            <span class=\"k\">else</span><span class=\"p\">:</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">replace</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">)</span>\n        <span class=\"n\">ret_i</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">arrays</span><span class=\"p\">[</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">]]</span>\n        <span class=\"k\">while</span> <span class=\"n\">ret_i</span><span class=\"p\">[</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">parents</span><span class=\"p\">:</span>\n            <span class=\"n\">ret_i</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">parents</span><span class=\"p\">[</span><span class=\"n\">ret_i</span><span class=\"p\">[</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">]])</span>\n        <span class=\"n\">ret</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">nums</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"n\">ret_i</span><span class=\"p\">[::</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">]]</span>\n        <span class=\"k\">return</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">ret</span><span class=\"p\">)</span>\n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "Post-Lunch Prep (PLP)",
            "flags": [
                "read",
                "historical"
            ],
            "id": 136861686,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 183179,
            "sender_email": "arpith@feedreader.co",
            "sender_full_name": "Arpith Siromoney (he) (m6'20)",
            "sender_id": 9503,
            "sender_realm_str": "recurse",
            "stream_id": 144212,
            "subject": "Tuesday, 30 Oct 2018",
            "submessages": [],
            "timestamp": 1541001633,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/927039f8a9a749e3be410a6969f8e2e8175cedf4?x=x&version=2",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-id=\"*\">@all</span>  Welcome to today's PLP!! the problems will be projected in the presentation space around lunchtime. If you're interested in pairing, come to the presentation space at 1:45pm to find a partner. If you're interested in post-PLP discussion (PPLPD), meet back at the presentation space at 2:45pm. See you there!!</p>\n<p>problems<br>\n<a href=\"https://leetcode.com/problems/minimum-distance-between-bst-nodes/description/\" target=\"_blank\" title=\"https://leetcode.com/problems/minimum-distance-between-bst-nodes/description/\">https://leetcode.com/problems/minimum-distance-between-bst-nodes/description/</a> (easy)<br>\n<a href=\"https://leetcode.com/problems/find-the-duplicate-number/description/\" target=\"_blank\" title=\"https://leetcode.com/problems/find-the-duplicate-number/description/\">https://leetcode.com/problems/find-the-duplicate-number/description/</a> (medium)</p>\n<p>host:<br>\n<span class=\"user-mention\" data-user-id=\"130181\">@Gretchen Wright (F2'18)</span> ) (Contact me if you have any questions, concerns, or feedback regarding today's or other days' PLP.)</p>",
            "content_type": "text/html",
            "display_recipient": "Post-Lunch Prep (PLP)",
            "flags": [
                "read",
                "historical"
            ],
            "id": 136861830,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 183179,
            "sender_email": "gretchen.m.wright@gmail.com",
            "sender_full_name": "Gretchen Wright (she) (F2'18)",
            "sender_id": 130181,
            "sender_realm_str": "recurse",
            "stream_id": 144212,
            "subject": "Wednesday, 31 Oct 2018",
            "submessages": [],
            "timestamp": 1541001736,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/46fc5295ff53a9173234c8c6bd09c245?d=identicon&version=1",
            "client": "ZulipElectron",
            "content": "<p>@all Welcome to today's PLP!! the problems will be projected in the presentation space around lunchtime. If you're interested in pairing, come to the presentation space at 1:45pm to find a partner. If you're interested in post-PLP discussion (PPLPD), meet back at the presentation space at 2:45pm. See you there!!</p>\n<p>problems<br>\n<a href=\"https://leetcode.com/problems/lemonade-change/description/\" target=\"_blank\" title=\"https://leetcode.com/problems/lemonade-change/description/\">https://leetcode.com/problems/lemonade-change/description/</a> (easy)<br>\n<a href=\"https://leetcode.com/problems/coin-change-2/description/\" target=\"_blank\" title=\"https://leetcode.com/problems/coin-change-2/description/\">https://leetcode.com/problems/coin-change-2/description/</a> (medium)</p>\n<p>host:<br>\n<span class=\"user-mention\" data-user-id=\"129939\">@Marina Inina (F2'18)</span>   (Contact me if you have any questions, concerns, or feedback regarding today's or other days' PLP.)</p>",
            "content_type": "text/html",
            "display_recipient": "Post-Lunch Prep (PLP)",
            "flags": [
                "read",
                "historical"
            ],
            "id": 136931758,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 183179,
            "sender_email": "nekanek@protonmail.com",
            "sender_full_name": "Marina Inina (she) (F2'18)",
            "sender_id": 129939,
            "sender_realm_str": "recurse",
            "stream_id": 144212,
            "subject": "Thursday, 1 Nov 2018",
            "submessages": [],
            "timestamp": 1541088751,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/927039f8a9a749e3be410a6969f8e2e8175cedf4?x=x&version=2",
            "client": "website",
            "content": "<p>Hi everyone,</p>\n<p>Post Lunch Prep will run Monday through Thursday through the end of the batch, starting tomorrow, November 7!</p>\n<p>Description: Join this stream if you'd like to be kept up-to-date on our daily (Mon-Thur) optional interview-style questions. We pair on questions from leetcode, and spend a time-boxed 1h15min on working through and sharing solutions. Feel free to participate remotely too, and post your solutions in here. If you don't want to get the daily announcements, just unsubscribe from this stream.</p>\n<p>The problems will be emailed out each morning, and then projected in the presentation space around lunchtime. if you're interested in pairing, come to the presentation space at 1:45pm to find a partner. if you're interested in post-PLP discussion (PPLPD), meet back at the presentation space at 2:45pm.</p>",
            "content_type": "text/html",
            "display_recipient": "Post-Lunch Prep (PLP)",
            "flags": [
                "read",
                "historical"
            ],
            "id": 146894341,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 183179,
            "sender_email": "gretchen.m.wright@gmail.com",
            "sender_full_name": "Gretchen Wright (she) (F2'18)",
            "sender_id": 130181,
            "sender_realm_str": "recurse",
            "stream_id": 144212,
            "subject": "W1 PLP Sessions",
            "submessages": [],
            "timestamp": 1541538198,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/7da8f8ef20569f6876aeb1188d2ebb6d41c6f842?x=x&version=2",
            "client": "ZulipElectron",
            "content": "<p><span class=\"user-mention\" data-user-id=\"*\">@all</span>  Welcome to the first PLP of the W1 Batch!! Problems will be projected in the presentation space around lunchtime. If you're interested in pairing, come to the presentation space at 1:45pm to find a partner. If you're interested in post-PLP discussion (PPLPD), meet back at the presentation space at 2:45pm. See you there!!</p>\n<p>Problems:<br>\n<a href=\"https://leetcode.com/problems/maximum-length-of-repeated-subarray/description/\" target=\"_blank\" title=\"https://leetcode.com/problems/maximum-length-of-repeated-subarray/description/\">https://leetcode.com/problems/maximum-length-of-repeated-subarray/description/</a><br>\n<a href=\"https://leetcode.com/problems/convert-sorted-list-to-binary-search-tree/description/\" target=\"_blank\" title=\"https://leetcode.com/problems/convert-sorted-list-to-binary-search-tree/description/\">https://leetcode.com/problems/convert-sorted-list-to-binary-search-tree/description/</a></p>\n<p>Host:<br>\n<span class=\"user-mention\" data-user-id=\"129934\">@Keenan Tsuruichi Komoto (F2'18)</span> (Contact me if you have any questions, concerns, or feedback regarding today's or other days' PLP.)</p>",
            "content_type": "text/html",
            "display_recipient": "Post-Lunch Prep (PLP)",
            "flags": [
                "read",
                "historical"
            ],
            "id": 146973637,
            "is_me_message": false,
            "last_edit_timestamp": 1541611190,
            "reactions": [],
            "recipient_id": 183179,
            "sender_email": "KeenanKomoto@gmail.com",
            "sender_full_name": "Keenan Tsuruichi Komoto (he) (F2'18)",
            "sender_id": 129934,
            "sender_realm_str": "recurse",
            "stream_id": 144212,
            "subject": "Wednesday, 7 Nov 2018",
            "submessages": [],
            "timestamp": 1541611174,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/ff35ce36c86dfb01da582bed81b61ac4c14d2096?x=x&version=4",
            "client": "ZulipElectron",
            "content": "<p>Is anyone else getting consistent runtime errors in leetcode today when trying to run JS code? Code that was working fine yesterday is giving me runtime errors today, and I can't work out what's going on.</p>",
            "content_type": "text/html",
            "display_recipient": "Post-Lunch Prep (PLP)",
            "flags": [
                "read",
                "historical"
            ],
            "id": 146975442,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 183179,
            "sender_email": "sheridan.kates@gmail.com",
            "sender_full_name": "Sheridan Kates (she) (F1'18)",
            "sender_id": 125277,
            "sender_realm_str": "recurse",
            "stream_id": 144212,
            "subject": "javascript leetcode issues?",
            "submessages": [],
            "timestamp": 1541612766,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/ff35ce36c86dfb01da582bed81b61ac4c14d2096?x=x&version=4",
            "client": "ZulipElectron",
            "content": "<p>hmm maybe it's just with this problem actually - even the simplest test is giving me a runtime error:<br>\n<a href=\"https://leetcode.com/problems/knight-dialer/\" target=\"_blank\" title=\"https://leetcode.com/problems/knight-dialer/\">https://leetcode.com/problems/knight-dialer/</a></p>",
            "content_type": "text/html",
            "display_recipient": "Post-Lunch Prep (PLP)",
            "flags": [
                "read",
                "historical"
            ],
            "id": 147242561,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 183179,
            "sender_email": "sheridan.kates@gmail.com",
            "sender_full_name": "Sheridan Kates (she) (F1'18)",
            "sender_id": 125277,
            "sender_realm_str": "recurse",
            "stream_id": 144212,
            "subject": "javascript leetcode issues?",
            "submessages": [],
            "timestamp": 1541613283,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/ff35ce36c86dfb01da582bed81b61ac4c14d2096?x=x&version=4",
            "client": "ZulipElectron",
            "content": "<p>like this:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kd\">var</span> <span class=\"nx\">knightDialer</span> <span class=\"o\">=</span> <span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">N</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n  <span class=\"k\">return</span> <span class=\"kc\">null</span>\n<span class=\"p\">};</span>\n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "Post-Lunch Prep (PLP)",
            "flags": [
                "read",
                "historical"
            ],
            "id": 147242629,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 183179,
            "sender_email": "sheridan.kates@gmail.com",
            "sender_full_name": "Sheridan Kates (she) (F1'18)",
            "sender_id": 125277,
            "sender_realm_str": "recurse",
            "stream_id": 144212,
            "subject": "javascript leetcode issues?",
            "submessages": [],
            "timestamp": 1541613340,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/ff35ce36c86dfb01da582bed81b61ac4c14d2096?x=x&version=4",
            "client": "ZulipElectron",
            "content": "<p>Javascript solution to problem 2:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kr\">const</span> <span class=\"nx\">sortedListToBST</span> <span class=\"o\">=</span> <span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">head</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n  <span class=\"c1\">// First walk the LinkedList to get all values into an array</span>\n  <span class=\"kd\">let</span> <span class=\"nx\">treeValues</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n  <span class=\"k\">while</span> <span class=\"p\">(</span><span class=\"nx\">head</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"nx\">treeValues</span><span class=\"p\">.</span><span class=\"nx\">push</span><span class=\"p\">(</span><span class=\"nx\">head</span><span class=\"p\">.</span><span class=\"nx\">val</span><span class=\"p\">)</span>\n    <span class=\"nx\">head</span> <span class=\"o\">=</span> <span class=\"nx\">head</span><span class=\"p\">.</span><span class=\"nx\">next</span>\n  <span class=\"p\">}</span>\n\n  <span class=\"k\">return</span> <span class=\"nx\">buildTree</span><span class=\"p\">(</span><span class=\"nx\">treeValues</span><span class=\"p\">)</span>\n<span class=\"p\">};</span>\n\n<span class=\"kr\">const</span> <span class=\"nx\">buildTree</span> <span class=\"o\">=</span> <span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">nodes</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n  <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">nodes</span><span class=\"p\">.</span><span class=\"nx\">length</span> <span class=\"o\">===</span> <span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"k\">return</span> <span class=\"kc\">null</span>\n  <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">nodes</span><span class=\"p\">.</span><span class=\"nx\">length</span> <span class=\"o\">===</span> <span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"k\">return</span> <span class=\"k\">new</span> <span class=\"nx\">TreeNode</span><span class=\"p\">(</span><span class=\"nx\">nodes</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">])</span>\n  <span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"p\">{</span>\n    <span class=\"kr\">const</span> <span class=\"nx\">middle</span> <span class=\"o\">=</span> <span class=\"nb\">Math</span><span class=\"p\">.</span><span class=\"nx\">floor</span><span class=\"p\">(</span><span class=\"nx\">nodes</span><span class=\"p\">.</span><span class=\"nx\">length</span> <span class=\"o\">/</span> <span class=\"mi\">2</span><span class=\"p\">)</span>\n    <span class=\"kr\">const</span> <span class=\"nx\">newNode</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nx\">TreeNode</span><span class=\"p\">(</span><span class=\"nx\">nodes</span><span class=\"p\">[</span><span class=\"nx\">middle</span><span class=\"p\">])</span>\n    <span class=\"nx\">newNode</span><span class=\"p\">.</span><span class=\"nx\">left</span> <span class=\"o\">=</span> <span class=\"nx\">buildTree</span><span class=\"p\">(</span><span class=\"nx\">nodes</span><span class=\"p\">.</span><span class=\"nx\">slice</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"nx\">middle</span><span class=\"p\">))</span>\n    <span class=\"nx\">newNode</span><span class=\"p\">.</span><span class=\"nx\">right</span> <span class=\"o\">=</span> <span class=\"nx\">buildTree</span><span class=\"p\">(</span><span class=\"nx\">nodes</span><span class=\"p\">.</span><span class=\"nx\">slice</span><span class=\"p\">(</span><span class=\"nx\">middle</span> <span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"p\">))</span>\n    <span class=\"k\">return</span> <span class=\"nx\">newNode</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "Post-Lunch Prep (PLP)",
            "flags": [
                "read",
                "historical"
            ],
            "id": 147245376,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "3030",
                    "emoji_name": "wavy_dash",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "aaron_wood@protonmail.com",
                        "full_name": "Aaron Wood (he) (F1'18)",
                        "id": 125145
                    },
                    "user_id": 125145
                }
            ],
            "recipient_id": 183179,
            "sender_email": "sheridan.kates@gmail.com",
            "sender_full_name": "Sheridan Kates (she) (F1'18)",
            "sender_id": 125277,
            "sender_realm_str": "recurse",
            "stream_id": 144212,
            "subject": "Wednesday, 7 Nov 2018",
            "submessages": [],
            "timestamp": 1541615867,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/7da8f8ef20569f6876aeb1188d2ebb6d41c6f842?x=x&version=2",
            "client": "ZulipElectron",
            "content": "<p>Starting now!</p>",
            "content_type": "text/html",
            "display_recipient": "Post-Lunch Prep (PLP)",
            "flags": [
                "read",
                "historical"
            ],
            "id": 147245888,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 183179,
            "sender_email": "KeenanKomoto@gmail.com",
            "sender_full_name": "Keenan Tsuruichi Komoto (he) (F2'18)",
            "sender_id": 129934,
            "sender_realm_str": "recurse",
            "stream_id": 144212,
            "subject": "Wednesday, 7 Nov 2018",
            "submessages": [],
            "timestamp": 1541616325,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/6afd7cc067ab12f03e00c45036f64035?d=identicon&version=1",
            "client": "website",
            "content": "<p>I get a runtime error for that problem too.</p>",
            "content_type": "text/html",
            "display_recipient": "Post-Lunch Prep (PLP)",
            "flags": [
                "read",
                "historical"
            ],
            "id": 147247324,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 183179,
            "sender_email": "douglastgordon@gmail.com",
            "sender_full_name": "Douglas Gordon (he) (F2'18)",
            "sender_id": 129929,
            "sender_realm_str": "recurse",
            "stream_id": 144212,
            "subject": "javascript leetcode issues?",
            "submessages": [],
            "timestamp": 1541617530,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/ca9f8cb0bcede6fa920c47295ad4e7a972c9f863?x=x&version=2",
            "client": "ZulipElectron",
            "content": "<p>same</p>",
            "content_type": "text/html",
            "display_recipient": "Post-Lunch Prep (PLP)",
            "flags": [
                "read",
                "historical"
            ],
            "id": 147247393,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 183179,
            "sender_email": "chunli.developer@gmail.com",
            "sender_full_name": "Chun Li (he) (F2'18)",
            "sender_id": 129956,
            "sender_realm_str": "recurse",
            "stream_id": 144212,
            "subject": "javascript leetcode issues?",
            "submessages": [],
            "timestamp": 1541617571,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/ff35ce36c86dfb01da582bed81b61ac4c14d2096?x=x&version=4",
            "client": "ZulipElectron",
            "content": "<p>ahh thanks</p>",
            "content_type": "text/html",
            "display_recipient": "Post-Lunch Prep (PLP)",
            "flags": [
                "read",
                "historical"
            ],
            "id": 147247736,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 183179,
            "sender_email": "sheridan.kates@gmail.com",
            "sender_full_name": "Sheridan Kates (she) (F1'18)",
            "sender_id": 125277,
            "sender_realm_str": "recurse",
            "stream_id": 144212,
            "subject": "javascript leetcode issues?",
            "submessages": [],
            "timestamp": 1541617899,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/ff35ce36c86dfb01da582bed81b61ac4c14d2096?x=x&version=4",
            "client": "ZulipElectron",
            "content": "<p>I thought I was going crazy</p>",
            "content_type": "text/html",
            "display_recipient": "Post-Lunch Prep (PLP)",
            "flags": [
                "read",
                "historical"
            ],
            "id": 147247738,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 183179,
            "sender_email": "sheridan.kates@gmail.com",
            "sender_full_name": "Sheridan Kates (she) (F1'18)",
            "sender_id": 125277,
            "sender_realm_str": "recurse",
            "stream_id": 144212,
            "subject": "javascript leetcode issues?",
            "submessages": [],
            "timestamp": 1541617904,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/7da8f8ef20569f6876aeb1188d2ebb6d41c6f842?x=x&version=2",
            "client": "ZulipElectron",
            "content": "<p><span class=\"user-mention\" data-user-id=\"125277\">@Sheridan Kates (F1'18)</span>  Did this pass all the test cases?</p>",
            "content_type": "text/html",
            "display_recipient": "Post-Lunch Prep (PLP)",
            "flags": [
                "read",
                "historical"
            ],
            "id": 147250053,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 183179,
            "sender_email": "KeenanKomoto@gmail.com",
            "sender_full_name": "Keenan Tsuruichi Komoto (he) (F2'18)",
            "sender_id": 129934,
            "sender_realm_str": "recurse",
            "stream_id": 144212,
            "subject": "Wednesday, 7 Nov 2018",
            "submessages": [],
            "timestamp": 1541619874,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/ff35ce36c86dfb01da582bed81b61ac4c14d2096?x=x&version=4",
            "client": "ZulipMobile",
            "content": "<p>Yeah</p>",
            "content_type": "text/html",
            "display_recipient": "Post-Lunch Prep (PLP)",
            "flags": [
                "read",
                "historical"
            ],
            "id": 147250170,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 183179,
            "sender_email": "sheridan.kates@gmail.com",
            "sender_full_name": "Sheridan Kates (she) (F1'18)",
            "sender_id": 125277,
            "sender_realm_str": "recurse",
            "stream_id": 144212,
            "subject": "Wednesday, 7 Nov 2018",
            "submessages": [],
            "timestamp": 1541619965,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/ff35ce36c86dfb01da582bed81b61ac4c14d2096?x=x&version=4",
            "client": "ZulipMobile",
            "content": "<p>Is it not working for you? <span class=\"user-mention\" data-user-id=\"129934\">@Keenan Tsuruichi Komoto (F2'18)</span></p>",
            "content_type": "text/html",
            "display_recipient": "Post-Lunch Prep (PLP)",
            "flags": [
                "read",
                "historical"
            ],
            "id": 147250175,
            "is_me_message": false,
            "last_edit_timestamp": 1541620034,
            "reactions": [],
            "recipient_id": 183179,
            "sender_email": "sheridan.kates@gmail.com",
            "sender_full_name": "Sheridan Kates (she) (F1'18)",
            "sender_id": 125277,
            "sender_realm_str": "recurse",
            "stream_id": 144212,
            "subject": "Wednesday, 7 Nov 2018",
            "submessages": [],
            "timestamp": 1541619974,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/6145d0683a46b1516d14fa79f4980dfa1143bdcc?x=x&version=9",
            "client": "website",
            "content": "<p>mine is similar to Sheridan's, it turns out.  it's like we were pairing via ESP.  <span class=\"emoji emoji-1f52e\" title=\"crystal ball\">:crystal_ball:</span> </p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">class</span> <span class=\"nc\">Solution</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"nf\">sortedListToBST</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">head</span><span class=\"p\">):</span>\n        <span class=\"n\">L</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">extract_vals</span><span class=\"p\">(</span><span class=\"n\">head</span><span class=\"p\">)</span>\n        <span class=\"n\">length</span> <span class=\"o\">=</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">L</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">list_to_BST</span><span class=\"p\">(</span><span class=\"n\">L</span><span class=\"p\">,</span> <span class=\"n\">length</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">extract_vals</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">head</span><span class=\"p\">):</span>\n        <span class=\"k\">if</span> <span class=\"n\">head</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"p\">[]</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"p\">[</span><span class=\"n\">head</span><span class=\"o\">.</span><span class=\"n\">val</span><span class=\"p\">]</span> <span class=\"o\">+</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">extract_vals</span><span class=\"p\">(</span><span class=\"n\">head</span><span class=\"o\">.</span><span class=\"n\">next</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">list_to_BST</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">L</span><span class=\"p\">,</span> <span class=\"n\">length</span><span class=\"p\">):</span>\n        <span class=\"k\">if</span> <span class=\"n\">length</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"kc\">None</span>\n        <span class=\"n\">mid</span> <span class=\"o\">=</span> <span class=\"n\">length</span><span class=\"o\">//</span><span class=\"mi\">2</span>\n        <span class=\"n\">root</span> <span class=\"o\">=</span> <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"n\">L</span><span class=\"p\">[</span><span class=\"n\">mid</span><span class=\"p\">])</span>\n        <span class=\"n\">root</span><span class=\"o\">.</span><span class=\"n\">left</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">list_to_BST</span><span class=\"p\">(</span><span class=\"n\">L</span><span class=\"p\">[:</span><span class=\"n\">mid</span><span class=\"p\">],</span> <span class=\"n\">mid</span><span class=\"p\">)</span>\n        <span class=\"n\">root</span><span class=\"o\">.</span><span class=\"n\">right</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">list_to_BST</span><span class=\"p\">(</span><span class=\"n\">L</span><span class=\"p\">[</span><span class=\"n\">mid</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"p\">:],</span> <span class=\"n\">length</span> <span class=\"o\">-</span> <span class=\"n\">mid</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">root</span>\n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "Post-Lunch Prep (PLP)",
            "flags": [
                "read",
                "historical"
            ],
            "id": 147250409,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "3030",
                    "emoji_name": "wavy_dash",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "sheridan.kates@gmail.com",
                        "full_name": "Sheridan Kates (she) (F1'18)",
                        "id": 125277
                    },
                    "user_id": 125277
                }
            ],
            "recipient_id": 183179,
            "sender_email": "aaron_wood@protonmail.com",
            "sender_full_name": "Aaron Wood (he) (F1'18)",
            "sender_id": 125145,
            "sender_realm_str": "recurse",
            "stream_id": 144212,
            "subject": "Wednesday, 7 Nov 2018",
            "submessages": [],
            "timestamp": 1541620197,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/7da8f8ef20569f6876aeb1188d2ebb6d41c6f842?x=x&version=2",
            "client": "ZulipElectron",
            "content": "<p>Oh no I was just curious cause when thinking about this problem I was worried that reading in the entire linked list would be too inefficient <span class=\"emoji emoji-1f62c\" title=\"grimacing\">:grimacing:</span></p>",
            "content_type": "text/html",
            "display_recipient": "Post-Lunch Prep (PLP)",
            "flags": [
                "read",
                "historical"
            ],
            "id": 147251506,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 183179,
            "sender_email": "KeenanKomoto@gmail.com",
            "sender_full_name": "Keenan Tsuruichi Komoto (he) (F2'18)",
            "sender_id": 129934,
            "sender_realm_str": "recurse",
            "stream_id": 144212,
            "subject": "Wednesday, 7 Nov 2018",
            "submessages": [],
            "timestamp": 1541620946,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/6145d0683a46b1516d14fa79f4980dfa1143bdcc?x=x&version=9",
            "client": "website",
            "content": "<p>i was too, Keenan. but i was having trouble coming up with a slick way to update the tree and finally gave up and read the entire linked list first, lol</p>\n<p>mine wasn't fast, but it let it slide..!</p>",
            "content_type": "text/html",
            "display_recipient": "Post-Lunch Prep (PLP)",
            "flags": [
                "read",
                "historical"
            ],
            "id": 147251673,
            "is_me_message": false,
            "last_edit_timestamp": 1541621118,
            "reactions": [],
            "recipient_id": 183179,
            "sender_email": "aaron_wood@protonmail.com",
            "sender_full_name": "Aaron Wood (he) (F1'18)",
            "sender_id": 125145,
            "sender_realm_str": "recurse",
            "stream_id": 144212,
            "subject": "Wednesday, 7 Nov 2018",
            "submessages": [],
            "timestamp": 1541621095,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/7da8f8ef20569f6876aeb1188d2ebb6d41c6f842?x=x&version=2",
            "client": "ZulipElectron",
            "content": "<p>Should've done that... Glad that it wasn't a ridiculous solution!</p>",
            "content_type": "text/html",
            "display_recipient": "Post-Lunch Prep (PLP)",
            "flags": [
                "read",
                "historical"
            ],
            "id": 147251714,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 183179,
            "sender_email": "KeenanKomoto@gmail.com",
            "sender_full_name": "Keenan Tsuruichi Komoto (he) (F2'18)",
            "sender_id": 129934,
            "sender_realm_str": "recurse",
            "stream_id": 144212,
            "subject": "Wednesday, 7 Nov 2018",
            "submessages": [],
            "timestamp": 1541621133,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/ff35ce36c86dfb01da582bed81b61ac4c14d2096?x=x&version=4",
            "client": "ZulipMobile",
            "content": "<p>Aha :D <span class=\"user-mention\" data-user-id=\"129934\">@Keenan Tsuruichi Komoto (F2'18)</span></p>",
            "content_type": "text/html",
            "display_recipient": "Post-Lunch Prep (PLP)",
            "flags": [
                "read",
                "historical"
            ],
            "id": 147253189,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 183179,
            "sender_email": "sheridan.kates@gmail.com",
            "sender_full_name": "Sheridan Kates (she) (F1'18)",
            "sender_id": 125277,
            "sender_realm_str": "recurse",
            "stream_id": 144212,
            "subject": "Wednesday, 7 Nov 2018",
            "submessages": [],
            "timestamp": 1541622549,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/ff35ce36c86dfb01da582bed81b61ac4c14d2096?x=x&version=4",
            "client": "ZulipMobile",
            "content": "<p>Yeah I don't know of a way to avoid that part, because you need to know what the whole length of the list is before you can know where the root node is. FWIW my answer was faster than 99% of submissions, which I was surprised about.</p>",
            "content_type": "text/html",
            "display_recipient": "Post-Lunch Prep (PLP)",
            "flags": [
                "read",
                "historical"
            ],
            "id": 147253305,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 183179,
            "sender_email": "sheridan.kates@gmail.com",
            "sender_full_name": "Sheridan Kates (she) (F1'18)",
            "sender_id": 125277,
            "sender_realm_str": "recurse",
            "stream_id": 144212,
            "subject": "Wednesday, 7 Nov 2018",
            "submessages": [],
            "timestamp": 1541622650,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/ff35ce36c86dfb01da582bed81b61ac4c14d2096?x=x&version=4",
            "client": "ZulipMobile",
            "content": "<p>Maybe someone else has a way to do it without reading the whole list in though</p>",
            "content_type": "text/html",
            "display_recipient": "Post-Lunch Prep (PLP)",
            "flags": [
                "read",
                "historical"
            ],
            "id": 147253338,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 183179,
            "sender_email": "sheridan.kates@gmail.com",
            "sender_full_name": "Sheridan Kates (she) (F1'18)",
            "sender_id": 125277,
            "sender_realm_str": "recurse",
            "stream_id": 144212,
            "subject": "Wednesday, 7 Nov 2018",
            "submessages": [],
            "timestamp": 1541622698,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/7da8f8ef20569f6876aeb1188d2ebb6d41c6f842?x=x&version=2",
            "client": "ZulipElectron",
            "content": "<p>True, Gretchen and I were trying to make a self-balancing tree (AVL tree) to balance and reassign as we read in the linked list lol</p>",
            "content_type": "text/html",
            "display_recipient": "Post-Lunch Prep (PLP)",
            "flags": [
                "read",
                "historical"
            ],
            "id": 147255018,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "2696",
                    "emoji_name": "balance",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "sheridan.kates@gmail.com",
                        "full_name": "Sheridan Kates (she) (F1'18)",
                        "id": 125277
                    },
                    "user_id": 125277
                }
            ],
            "recipient_id": 183179,
            "sender_email": "KeenanKomoto@gmail.com",
            "sender_full_name": "Keenan Tsuruichi Komoto (he) (F2'18)",
            "sender_id": 129934,
            "sender_realm_str": "recurse",
            "stream_id": 144212,
            "subject": "Wednesday, 7 Nov 2018",
            "submessages": [],
            "timestamp": 1541624214,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/725b72e62dee517d5a85bb050caf09b4a2ee775a?x=x&version=2",
            "client": "website",
            "content": "<p>12:19 PM<br>\n@all Welcome to the second PLP of the W1 Batch!! Problems will be projected in the presentation space around lunchtime. If you're interested in pairing, come to the presentation space at 1:45pm to find a partner. If you're interested in post-PLP discussion (PPLPD), meet back at the presentation space at 2:45pm. See you there!!</p>\n<p><a href=\"https://www.cs.cmu.edu/~adamchik/15-121/lectures/Linked%20Lists/linked%20lists.html\" target=\"_blank\" title=\"https://www.cs.cmu.edu/~adamchik/15-121/lectures/Linked%20Lists/linked%20lists.html\">https://www.cs.cmu.edu/~adamchik/15-121/lectures/Linked%20Lists/linked%20lists.html</a></p>\n<p>Problems:<br>\n<a href=\"https://leetcode.com/problems/linked-list-cycle/description/\" target=\"_blank\" title=\"https://leetcode.com/problems/linked-list-cycle/description/\">https://leetcode.com/problems/linked-list-cycle/description/</a> (easy)<br>\n<a href=\"https://leetcode.com/problems/remove-nth-node-from-end-of-list/description/\" target=\"_blank\" title=\"https://leetcode.com/problems/remove-nth-node-from-end-of-list/description/\">https://leetcode.com/problems/remove-nth-node-from-end-of-list/description/</a> (medium) </p>\n<p>Host:<br>\n<span class=\"user-mention\" data-user-id=\"130406\">@Heime S Ashkenazie (F2'18)</span>  (Contact me if you have any questions, concerns, or feedback regarding today's or other days' PLP.)</p>",
            "content_type": "text/html",
            "display_recipient": "Post-Lunch Prep (PLP)",
            "flags": [
                "read",
                "historical"
            ],
            "id": 147314233,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 183179,
            "sender_email": "heime.a@gmail.com",
            "sender_full_name": "Heime S Ashkenazie (F2'18)",
            "sender_id": 130406,
            "sender_realm_str": "recurse",
            "stream_id": 144212,
            "subject": "Wednesday, 7 Nov 2018",
            "submessages": [],
            "timestamp": 1541697217,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/6145d0683a46b1516d14fa79f4980dfa1143bdcc?x=x&version=9",
            "client": "website",
            "content": "<p>remove nth node from the end (beat 99%!!)</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">class</span> <span class=\"nc\">Solution</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"nf\">removeNthFromEnd</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">head</span><span class=\"p\">,</span> <span class=\"n\">n</span><span class=\"p\">):</span>\n        <span class=\"n\">window</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">head</span><span class=\"p\">]</span>\n        <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">):</span>\n            <span class=\"n\">window</span> <span class=\"o\">=</span> <span class=\"n\">window</span> <span class=\"o\">+</span> <span class=\"p\">[</span><span class=\"n\">window</span><span class=\"p\">[</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">next</span><span class=\"p\">]</span>\n        <span class=\"k\">if</span> <span class=\"n\">window</span><span class=\"p\">[</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"n\">head</span><span class=\"o\">.</span><span class=\"n\">next</span>\n        <span class=\"k\">while</span> <span class=\"n\">window</span><span class=\"p\">[</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">next</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n            <span class=\"n\">window</span> <span class=\"o\">=</span> <span class=\"n\">window</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">:]</span> <span class=\"o\">+</span> <span class=\"p\">[</span><span class=\"n\">window</span><span class=\"p\">[</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">next</span><span class=\"p\">]</span>\n        <span class=\"k\">if</span> <span class=\"n\">n</span> <span class=\"o\">==</span> <span class=\"mi\">1</span><span class=\"p\">:</span>\n            <span class=\"n\">window</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">next</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"n\">window</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">next</span> <span class=\"o\">=</span> <span class=\"n\">window</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">]</span>\n        <span class=\"k\">return</span> <span class=\"n\">head</span>\n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "Post-Lunch Prep (PLP)",
            "flags": [
                "read",
                "historical"
            ],
            "id": 147333460,
            "is_me_message": false,
            "last_edit_timestamp": 1541715038,
            "reactions": [],
            "recipient_id": 183179,
            "sender_email": "aaron_wood@protonmail.com",
            "sender_full_name": "Aaron Wood (he) (F1'18)",
            "sender_id": 125145,
            "sender_realm_str": "recurse",
            "stream_id": 144212,
            "subject": "Wednesday, 7 Nov 2018",
            "submessages": [],
            "timestamp": 1541715021,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/46fc5295ff53a9173234c8c6bd09c245?d=identicon&version=1",
            "client": "ZulipElectron",
            "content": "<p>Hi <span class=\"user-mention\" data-user-id=\"*\">@all</span> </p>\n<p>Welcome to today's PLP. The problems will be projected in the presentation space around lunchtime. If you are interested in pairing, come to the presentation space at 1:45 to find a partner. If you are interested in discussing afterwards, come to the presentation space at 2:45.</p>\n<p>Today's problems:</p>\n<p><a href=\"https://leetcode.com/problems/longest-continuous-increasing-subsequence/description/\" target=\"_blank\" title=\"https://leetcode.com/problems/longest-continuous-increasing-subsequence/description/\">https://leetcode.com/problems/longest-continuous-increasing-subsequence/description/</a> (easy)<br>\n<a href=\"https://leetcode.com/problems/unique-paths-ii/description/\" target=\"_blank\" title=\"https://leetcode.com/problems/unique-paths-ii/description/\">https://leetcode.com/problems/unique-paths-ii/description/</a> (medium)</p>\n<p>Host: <span class=\"user-mention\" data-user-id=\"130181\">@Gretchen Wright (F2'18)</span>  Ping <span class=\"user-mention\" data-user-id=\"130181\">@Gretchen Wright (F2'18)</span>  if you have any questions.</p>",
            "content_type": "text/html",
            "display_recipient": "Post-Lunch Prep (PLP)",
            "flags": [
                "read",
                "historical"
            ],
            "id": 147536739,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 183179,
            "sender_email": "nekanek@protonmail.com",
            "sender_full_name": "Marina Inina (she) (F2'18)",
            "sender_id": 129939,
            "sender_realm_str": "recurse",
            "stream_id": 144212,
            "subject": "Monday, 12 Nov 2018",
            "submessages": [],
            "timestamp": 1542041191,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/6145d0683a46b1516d14fa79f4980dfa1143bdcc?x=x&version=9",
            "client": "website",
            "content": "<p>longest continuous increasing subsequence</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">class</span> <span class=\"nc\">Solution</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"nf\">findLengthOfLCIS</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">nums</span><span class=\"p\">):</span>\n        <span class=\"k\">if</span> <span class=\"n\">nums</span> <span class=\"o\">==</span> <span class=\"p\">[]:</span>\n            <span class=\"k\">return</span> <span class=\"mi\">0</span>\n        <span class=\"n\">max_length</span> <span class=\"o\">=</span> <span class=\"mi\">1</span>\n        <span class=\"n\">length</span> <span class=\"o\">=</span> <span class=\"mi\">1</span>\n        <span class=\"n\">curr</span> <span class=\"o\">=</span> <span class=\"n\">nums</span><span class=\"o\">.</span><span class=\"n\">pop</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n        <span class=\"k\">for</span> <span class=\"n\">num</span> <span class=\"ow\">in</span> <span class=\"n\">nums</span><span class=\"p\">:</span>\n            <span class=\"k\">if</span> <span class=\"n\">num</span> <span class=\"o\">&gt;</span> <span class=\"n\">curr</span><span class=\"p\">:</span>\n                <span class=\"n\">length</span> <span class=\"o\">+=</span> <span class=\"mi\">1</span>\n            <span class=\"k\">else</span><span class=\"p\">:</span>\n                <span class=\"n\">max_length</span> <span class=\"o\">=</span> <span class=\"nb\">max</span><span class=\"p\">(</span><span class=\"n\">max_length</span><span class=\"p\">,</span> <span class=\"n\">length</span><span class=\"p\">)</span>\n                <span class=\"n\">length</span> <span class=\"o\">=</span> <span class=\"mi\">1</span>\n            <span class=\"n\">curr</span> <span class=\"o\">=</span> <span class=\"n\">num</span>\n        <span class=\"k\">return</span> <span class=\"nb\">max</span><span class=\"p\">(</span><span class=\"n\">max_length</span><span class=\"p\">,</span> <span class=\"n\">length</span><span class=\"p\">)</span>\n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "Post-Lunch Prep (PLP)",
            "flags": [
                "read",
                "historical"
            ],
            "id": 147545946,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 183179,
            "sender_email": "aaron_wood@protonmail.com",
            "sender_full_name": "Aaron Wood (he) (F1'18)",
            "sender_id": 125145,
            "sender_realm_str": "recurse",
            "stream_id": 144212,
            "subject": "Monday, 12 Nov 2018",
            "submessages": [],
            "timestamp": 1542050718,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/ca9f8cb0bcede6fa920c47295ad4e7a972c9f863?x=x&version=2",
            "client": "ZulipElectron",
            "content": "<p>Hi <span class=\"user-mention\" data-user-id=\"*\">@all</span> </p>\n<p>Welcome to today's PLP. The problems will be projected in the presentation space around lunchtime. If you are interested in pairing, come to the presentation space at 1:45 to find a partner. If you are interested in discussing afterwards, come to the presentation space at 2:45.</p>\n<p>Today's problems:<br>\n<a href=\"https://leetcode.com/problems/hamming-distance/description/\" target=\"_blank\" title=\"https://leetcode.com/problems/hamming-distance/description/\">https://leetcode.com/problems/hamming-distance/description/</a> (easy)<br>\n<a href=\"https://leetcode.com/problems/counting-bits/description/\" target=\"_blank\" title=\"https://leetcode.com/problems/counting-bits/description/\">https://leetcode.com/problems/counting-bits/description/</a> (medium)</p>\n<p>Today's theme is bit manipulation :) Documentation for JavaScript's bit manipulator operators can be found here: <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Bitwise_Operators\" target=\"_blank\" title=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Bitwise_Operators\">https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Bitwise_Operators</a> and Python's here: <a href=\"https://wiki.python.org/moin/BitwiseOperators\" target=\"_blank\" title=\"https://wiki.python.org/moin/BitwiseOperators\">https://wiki.python.org/moin/BitwiseOperators</a></p>\n<p>If you have no idea what any of that means feel free to ask me questions and I would be happy to pair with you &lt;3</p>\n<p>Host: <span class=\"user-mention\" data-user-id=\"129956\">@Chun Li (F2'18)</span>  please ping if you have any questions</p>",
            "content_type": "text/html",
            "display_recipient": "Post-Lunch Prep (PLP)",
            "flags": [
                "read",
                "historical"
            ],
            "id": 147613745,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 183179,
            "sender_email": "chunli.developer@gmail.com",
            "sender_full_name": "Chun Li (he) (F2'18)",
            "sender_id": 129956,
            "sender_realm_str": "recurse",
            "stream_id": 144212,
            "subject": "Tuesday, 13 Nov 2018",
            "submessages": [],
            "timestamp": 1542132965,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/1d95d8a68ebfd041cd0bb7ec32c8a4ca2ef8c1a9?x=x&version=4",
            "client": "ZulipElectron",
            "content": "<p><span class=\"user-mention\" data-user-id=\"129956\">@Chun Li (F2'18)</span> and my answer beat 100% of javascript Hamming Distance submissions:</p>\n<div class=\"codehilite\"><pre><span></span>var hammingDistance = function(x, y) {\n    let offByBits = 0;\n    while (x &gt; 0 || y &gt; 0) {\n        let modX = x % 2;\n        let modY = y % 2;\n        if (modX !== modY) {\n            offByBits += 1;\n        }\n        x = x &gt;&gt; 1;\n        y = y &gt;&gt; 1;\n    }\n    return offByBits;\n};\n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "Post-Lunch Prep (PLP)",
            "flags": [
                "read",
                "historical"
            ],
            "id": 147617570,
            "is_me_message": false,
            "last_edit_timestamp": 1542138826,
            "reactions": [
                {
                    "emoji_code": "1f600",
                    "emoji_name": "grinning",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "maxd@nnvtn.ca",
                        "full_name": "Max D (he) (F2'18)",
                        "id": 130097
                    },
                    "user_id": 130097
                }
            ],
            "recipient_id": 183179,
            "sender_email": "katkitay@gmail.com",
            "sender_full_name": "Kat Kitay (she) (F2'18)",
            "sender_id": 129926,
            "sender_realm_str": "recurse",
            "stream_id": 144212,
            "subject": "Tuesday, 13 Nov 2018",
            "submessages": [],
            "timestamp": 1542136078,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/f244e3545a6792c557adf5475475c0cc2e6d5d7b?x=x&version=3",
            "client": "ZulipElectron",
            "content": "<p>87% percentile on counting bits in python: <a href=\"https://leetcode.com/submissions/detail/189358365/\" target=\"_blank\" title=\"https://leetcode.com/submissions/detail/189358365/\">https://leetcode.com/submissions/detail/189358365/</a></p>\n<div class=\"codehilite\"><pre><span></span>class Solution:\n    def countBits(self, num):\n        &quot;&quot;&quot;\n        :type num: int\n        :rtype: List[int]\n        &quot;&quot;&quot;\n        res = [0]\n        for i in range(1, num+1):\n            temp = res[i&gt;&gt;1]\n            temp += i&amp;1\n            res.append(temp)\n        return res\n</pre></div>\n\n\n<p>Technically not O(n) but O(k*n) where k is number of bits in num which I feel ok about</p>",
            "content_type": "text/html",
            "display_recipient": "Post-Lunch Prep (PLP)",
            "flags": [
                "read",
                "historical"
            ],
            "id": 147618080,
            "is_me_message": false,
            "last_edit_timestamp": 1542137725,
            "reactions": [
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "+1",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "mattg@leema.org",
                        "full_name": "Matthew Graham (he) (F1'18)",
                        "id": 125276
                    },
                    "user_id": 125276
                }
            ],
            "recipient_id": 183179,
            "sender_email": "aatigar@gmail.com",
            "sender_full_name": "Adam Avery Tigar (he) (F2'18)",
            "sender_id": 130218,
            "sender_realm_str": "recurse",
            "stream_id": 144212,
            "subject": "Tuesday, 13 Nov 2018",
            "submessages": [],
            "timestamp": 1542136553,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/1d95d8a68ebfd041cd0bb7ec32c8a4ca2ef8c1a9?x=x&version=4",
            "client": "ZulipElectron",
            "content": "<p>countbits: </p>\n<div class=\"codehilite\"><pre><span></span>var countBits = function(num) {\n    let countOnes = new Array(num);\n    countOnes[0] = 0;\n    if (num &lt; 1) {\n        return countOnes;\n    }\n    for (let i = 1; i &lt;= num; i++) {\n        let num = i;\n        let ones = 0;\n        if(num % 2 === 1) {\n            ones += 1;\n        }\n        num = num &gt;&gt; 1;\n        ones += countOnes[num]\n\n        countOnes[i] = ones;\n    }\n    return countOnes;\n};\n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "Post-Lunch Prep (PLP)",
            "flags": [
                "read",
                "historical"
            ],
            "id": 147618823,
            "is_me_message": false,
            "last_edit_timestamp": 1542138844,
            "reactions": [],
            "recipient_id": 183179,
            "sender_email": "katkitay@gmail.com",
            "sender_full_name": "Kat Kitay (she) (F2'18)",
            "sender_id": 129926,
            "sender_realm_str": "recurse",
            "stream_id": 144212,
            "subject": "Tuesday, 13 Nov 2018",
            "submessages": [],
            "timestamp": 1542137211,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/f244e3545a6792c557adf5475475c0cc2e6d5d7b?x=x&version=3",
            "client": "ZulipElectron",
            "content": "<p>98% percentile (python) for hamming: <a href=\"https://leetcode.com/submissions/detail/189352079/\" target=\"_blank\" title=\"https://leetcode.com/submissions/detail/189352079/\">https://leetcode.com/submissions/detail/189352079/</a></p>\n<div class=\"codehilite\"><pre><span></span>class Solution:\n    def hammingDistance(self, x, y):\n        &quot;&quot;&quot;\n        :type x: int\n        :type y: int\n        :rtype: int\n        &quot;&quot;&quot;\n        k = x^y\n        count = 0\n        while k &gt; 0:\n            count += k &amp; 1\n            k &gt;&gt;= 1\n        return count\n</pre></div>\n\n\n<p>Shifting bits with the while loop is more time efficient than using python's builtin count() function. Bit shift operations are decently fast in python</p>",
            "content_type": "text/html",
            "display_recipient": "Post-Lunch Prep (PLP)",
            "flags": [
                "read",
                "historical"
            ],
            "id": 147618825,
            "is_me_message": false,
            "last_edit_timestamp": 1542137681,
            "reactions": [],
            "recipient_id": 183179,
            "sender_email": "aatigar@gmail.com",
            "sender_full_name": "Adam Avery Tigar (he) (F2'18)",
            "sender_id": 130218,
            "sender_realm_str": "recurse",
            "stream_id": 144212,
            "subject": "Tuesday, 13 Nov 2018",
            "submessages": [],
            "timestamp": 1542137212,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/f244e3545a6792c557adf5475475c0cc2e6d5d7b?x=x&version=3",
            "client": "ZulipElectron",
            "content": "<p><span class=\"user-mention\" data-user-id=\"129926\">@Kat Kitay (F2'18)</span> can you open my links? I think people might only be able to see solutions in languages they have solved for. I get a 404 anytime I try and see your solutions</p>",
            "content_type": "text/html",
            "display_recipient": "Post-Lunch Prep (PLP)",
            "flags": [
                "read",
                "historical"
            ],
            "id": 147618953,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 183179,
            "sender_email": "aatigar@gmail.com",
            "sender_full_name": "Adam Avery Tigar (he) (F2'18)",
            "sender_id": 130218,
            "sender_realm_str": "recurse",
            "stream_id": 144212,
            "subject": "Tuesday, 13 Nov 2018",
            "submessages": [],
            "timestamp": 1542137340,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/6145d0683a46b1516d14fa79f4980dfa1143bdcc?x=x&version=9",
            "client": "website",
            "content": "<p>working with <span class=\"user-mention\" data-user-id=\"129939\">@Marina Inina (F2'18)</span> (remote pairing!!  we used glitch and it was great!)</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">class</span> <span class=\"nc\">Solution</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"nf\">countBits</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">num</span><span class=\"p\">):</span>\n        <span class=\"n\">bits</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n        <span class=\"n\">power</span> <span class=\"o\">=</span> <span class=\"mi\">1</span>\n        <span class=\"k\">for</span> <span class=\"n\">n</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">num</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"p\">):</span>\n            <span class=\"n\">rem</span> <span class=\"o\">=</span> <span class=\"n\">n</span> <span class=\"o\">%</span> <span class=\"n\">power</span>\n            <span class=\"n\">bits</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"mi\">1</span> <span class=\"o\">+</span> <span class=\"n\">bits</span><span class=\"p\">[</span><span class=\"n\">rem</span><span class=\"p\">])</span>\n            <span class=\"k\">if</span> <span class=\"n\">rem</span> <span class=\"o\">==</span> <span class=\"n\">power</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">:</span>\n                <span class=\"n\">power</span> <span class=\"o\">*=</span> <span class=\"mi\">2</span>\n        <span class=\"k\">return</span> <span class=\"n\">bits</span>\n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "Post-Lunch Prep (PLP)",
            "flags": [
                "read",
                "historical"
            ],
            "id": 147619431,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f419",
                    "emoji_name": "octopus",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "mattg@leema.org",
                        "full_name": "Matthew Graham (he) (F1'18)",
                        "id": 125276
                    },
                    "user_id": 125276
                },
                {
                    "emoji_code": "1f419",
                    "emoji_name": "octopus",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "sheridan.kates@gmail.com",
                        "full_name": "Sheridan Kates (she) (F1'18)",
                        "id": 125277
                    },
                    "user_id": 125277
                },
                {
                    "emoji_code": "1f419",
                    "emoji_name": "octopus",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "nekanek@protonmail.com",
                        "full_name": "Marina Inina (she) (F2'18)",
                        "id": 129939
                    },
                    "user_id": 129939
                }
            ],
            "recipient_id": 183179,
            "sender_email": "aaron_wood@protonmail.com",
            "sender_full_name": "Aaron Wood (he) (F1'18)",
            "sender_id": 125145,
            "sender_realm_str": "recurse",
            "stream_id": 144212,
            "subject": "Tuesday, 13 Nov 2018",
            "submessages": [],
            "timestamp": 1542137780,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/1d95d8a68ebfd041cd0bb7ec32c8a4ca2ef8c1a9?x=x&version=4",
            "client": "ZulipElectron",
            "content": "<p><span class=\"user-mention\" data-user-id=\"130218\">@Adam Tigar (F2'18)</span> oops i guess it doesn't work</p>",
            "content_type": "text/html",
            "display_recipient": "Post-Lunch Prep (PLP)",
            "flags": [
                "read",
                "historical"
            ],
            "id": 147620455,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 183179,
            "sender_email": "katkitay@gmail.com",
            "sender_full_name": "Kat Kitay (she) (F2'18)",
            "sender_id": 129926,
            "sender_realm_str": "recurse",
            "stream_id": 144212,
            "subject": "Tuesday, 13 Nov 2018",
            "submessages": [],
            "timestamp": 1542138810,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/1d95d8a68ebfd041cd0bb7ec32c8a4ca2ef8c1a9?x=x&version=4",
            "client": "ZulipElectron",
            "content": "<p>updated my posts w/ the code</p>",
            "content_type": "text/html",
            "display_recipient": "Post-Lunch Prep (PLP)",
            "flags": [
                "read",
                "historical"
            ],
            "id": 147620531,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 183179,
            "sender_email": "katkitay@gmail.com",
            "sender_full_name": "Kat Kitay (she) (F2'18)",
            "sender_id": 129926,
            "sender_realm_str": "recurse",
            "stream_id": 144212,
            "subject": "Tuesday, 13 Nov 2018",
            "submessages": [],
            "timestamp": 1542138853,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/6145d0683a46b1516d14fa79f4980dfa1143bdcc?x=x&version=9",
            "client": "website",
            "content": "<p>hamming distance...... nothing too fancy and prolly not that fast =/</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">class</span> <span class=\"nc\">Solution</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"nf\">hammingDistance</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">):</span>\n        <span class=\"n\">distance</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n        <span class=\"k\">while</span> <span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">)</span> <span class=\"o\">!=</span> <span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">):</span>\n            <span class=\"n\">distance</span> <span class=\"o\">+=</span> <span class=\"mi\">1</span> <span class=\"o\">*</span> <span class=\"p\">(</span><span class=\"n\">x</span> <span class=\"o\">%</span> <span class=\"mi\">2</span> <span class=\"o\">!=</span> <span class=\"n\">y</span> <span class=\"o\">%</span> <span class=\"mi\">2</span><span class=\"p\">)</span>\n            <span class=\"n\">x</span> <span class=\"o\">&gt;&gt;=</span> <span class=\"mi\">1</span>\n            <span class=\"n\">y</span> <span class=\"o\">&gt;&gt;=</span> <span class=\"mi\">1</span>\n        <span class=\"k\">return</span> <span class=\"n\">distance</span>\n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "Post-Lunch Prep (PLP)",
            "flags": [
                "read",
                "historical"
            ],
            "id": 147621020,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 183179,
            "sender_email": "aaron_wood@protonmail.com",
            "sender_full_name": "Aaron Wood (he) (F1'18)",
            "sender_id": 125145,
            "sender_realm_str": "recurse",
            "stream_id": 144212,
            "subject": "Tuesday, 13 Nov 2018",
            "submessages": [],
            "timestamp": 1542139240,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/6145d0683a46b1516d14fa79f4980dfa1143bdcc?x=x&version=9",
            "client": "website",
            "content": "<p>did anyone make any progress on Unique Paths II from yesterday??  i haven't been able to get past a time-limit exceeded.</p>",
            "content_type": "text/html",
            "display_recipient": "Post-Lunch Prep (PLP)",
            "flags": [
                "read",
                "historical"
            ],
            "id": 147622707,
            "is_me_message": false,
            "last_edit_timestamp": 1542140730,
            "reactions": [],
            "recipient_id": 183179,
            "sender_email": "aaron_wood@protonmail.com",
            "sender_full_name": "Aaron Wood (he) (F1'18)",
            "sender_id": 125145,
            "sender_realm_str": "recurse",
            "stream_id": 144212,
            "subject": "Monday, 12 Nov 2018",
            "submessages": [],
            "timestamp": 1542140712,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/7614b2155716cc9e51f8be991671ed44?d=identicon&version=1",
            "client": "ZulipElectron",
            "content": "<p>Here is a js version of the solution, I forgot to post it.  Let me know if you have any questions about the approach.</p>\n<div class=\"codehilite\"><pre><span></span>const uniquePathsWithObstacles = (grid) =&gt; {\n\n    if (grid[grid.length - 1][grid[0].length - 1] === 1 || grid[0][0] === 1) {\n\n        return 0;\n    };\n\n    if (grid.length === 1) {\n        return grid[0].includes(1) ? 0 : 1;\n    }\n\n    if (grid[0].length === 1) {\n        for(let i = 0; i &lt; grid.length; i++) {\n\n            if (grid[i][0] === 1) {\n                return 0;\n            }\n\n        }\n\n        return 1;\n    }\n\n\n    grid[0][0] = 1;\n\n    for (let i = 0; i &lt; grid.length; i++) {\n\n        for (let k = 0; k &lt; grid[0].length; k++) {\n\n            const leftElem = grid[i][k - 1] || 0;\n\n            const topElem = grid[i - 1] &amp;&amp; grid[i - 1][k] || 0;\n\n            if(i !== 0 || k !== 0)  {\n                if (grid[i][k] === 1) {\n                    grid[i][k] = 0;\n\n                } else {\n                    grid[i][k] = leftElem + topElem;\n\n                }\n            }\n\n        }\n\n    }\n\n    return grid[grid.length - 1][grid[0].length - 1];\n\n}\n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "Post-Lunch Prep (PLP)",
            "flags": [
                "read",
                "historical"
            ],
            "id": 147622970,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 183179,
            "sender_email": "carl.schubert@gmail.com",
            "sender_full_name": "Carl Schubert (he) (F2'18)",
            "sender_id": 130326,
            "sender_realm_str": "recurse",
            "stream_id": 144212,
            "subject": "Monday, 12 Nov 2018",
            "submessages": [],
            "timestamp": 1542140971,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/6145d0683a46b1516d14fa79f4980dfa1143bdcc?x=x&version=9",
            "client": "website",
            "content": "<p>thanks!  i'll have a look.  i thought i had a super-cool solution, but it's sloooooowwwww lol.  maybe a change of scenery will help!</p>",
            "content_type": "text/html",
            "display_recipient": "Post-Lunch Prep (PLP)",
            "flags": [
                "read",
                "historical"
            ],
            "id": 147623117,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 183179,
            "sender_email": "aaron_wood@protonmail.com",
            "sender_full_name": "Aaron Wood (he) (F1'18)",
            "sender_id": 125145,
            "sender_realm_str": "recurse",
            "stream_id": 144212,
            "subject": "Monday, 12 Nov 2018",
            "submessages": [],
            "timestamp": 1542141090,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/6145d0683a46b1516d14fa79f4980dfa1143bdcc?x=x&version=9",
            "client": "website",
            "content": "<p>that's really nice, <span class=\"user-mention\" data-user-id=\"130326\">@Carl Schubert (F2'18)</span> thanks!  i was doing it recursively, but kept timing out and couldn't figure out a speed up.  this was a very different approach to what i was doing, ie, a very good approach =]</p>",
            "content_type": "text/html",
            "display_recipient": "Post-Lunch Prep (PLP)",
            "flags": [
                "read",
                "historical"
            ],
            "id": 147624904,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 183179,
            "sender_email": "aaron_wood@protonmail.com",
            "sender_full_name": "Aaron Wood (he) (F1'18)",
            "sender_id": 125145,
            "sender_realm_str": "recurse",
            "stream_id": 144212,
            "subject": "Monday, 12 Nov 2018",
            "submessages": [],
            "timestamp": 1542142763,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/1d95d8a68ebfd041cd0bb7ec32c8a4ca2ef8c1a9?x=x&version=4",
            "client": "ZulipElectron",
            "content": "<p>it may not be the same issue, but in our algorithms class we found a lot of the hard processing algorithms could not be written recursively in python or javascript without exceeding depth limits</p>",
            "content_type": "text/html",
            "display_recipient": "Post-Lunch Prep (PLP)",
            "flags": [
                "read",
                "historical"
            ],
            "id": 147625005,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 183179,
            "sender_email": "katkitay@gmail.com",
            "sender_full_name": "Kat Kitay (she) (F2'18)",
            "sender_id": 129926,
            "sender_realm_str": "recurse",
            "stream_id": 144212,
            "subject": "Monday, 12 Nov 2018",
            "submessages": [],
            "timestamp": 1542142822,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/1d95d8a68ebfd041cd0bb7ec32c8a4ca2ef8c1a9?x=x&version=4",
            "client": "ZulipElectron",
            "content": "<p>there are ways to increase those depth limits, but if you're running it in leetcode, maybe the only solution would be an iterative one?</p>",
            "content_type": "text/html",
            "display_recipient": "Post-Lunch Prep (PLP)",
            "flags": [
                "read",
                "historical"
            ],
            "id": 147625031,
            "is_me_message": false,
            "last_edit_timestamp": 1542142854,
            "reactions": [],
            "recipient_id": 183179,
            "sender_email": "katkitay@gmail.com",
            "sender_full_name": "Kat Kitay (she) (F2'18)",
            "sender_id": 129926,
            "sender_realm_str": "recurse",
            "stream_id": 144212,
            "subject": "Monday, 12 Nov 2018",
            "submessages": [],
            "timestamp": 1542142843,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/6145d0683a46b1516d14fa79f4980dfa1143bdcc?x=x&version=9",
            "client": "website",
            "content": "<p>that makes sense.  i was super excited about mine until i got the error message =/</p>",
            "content_type": "text/html",
            "display_recipient": "Post-Lunch Prep (PLP)",
            "flags": [
                "read",
                "historical"
            ],
            "id": 147625076,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 183179,
            "sender_email": "aaron_wood@protonmail.com",
            "sender_full_name": "Aaron Wood (he) (F1'18)",
            "sender_id": 125145,
            "sender_realm_str": "recurse",
            "stream_id": 144212,
            "subject": "Monday, 12 Nov 2018",
            "submessages": [],
            "timestamp": 1542142895,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/7614b2155716cc9e51f8be991671ed44?d=identicon&version=1",
            "client": "ZulipMobile",
            "content": "<p>I could not find a search based approach that was not O((m * n)^2).  The way we did it is not search based and should be theta(m * n).  The issue with search is that because we must find all paths the problem doubles at each level.  There might be a way to memoize the results as it is all duplicate work but I could not figure it out</p>",
            "content_type": "text/html",
            "display_recipient": "Post-Lunch Prep (PLP)",
            "flags": [
                "read",
                "historical"
            ],
            "id": 147625249,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 183179,
            "sender_email": "carl.schubert@gmail.com",
            "sender_full_name": "Carl Schubert (he) (F2'18)",
            "sender_id": 130326,
            "sender_realm_str": "recurse",
            "stream_id": 144212,
            "subject": "Monday, 12 Nov 2018",
            "submessages": [],
            "timestamp": 1542143073,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/46fc5295ff53a9173234c8c6bd09c245?d=identicon&version=1",
            "client": "ZulipElectron",
            "content": "<p>Hi <span class=\"user-mention\" data-user-id=\"*\">@all</span> </p>\n<p>Welcome to today's PLP. The problems will be projected in the presentation space around lunchtime. <br>\nIf you are interested in pairing, come to the presentation space at 1:45 to find a partner. <br>\nIf you are interested in discussing afterwards, come to the presentation space at 2:45.</p>\n<p>Today's problems:<br>\n<a href=\"https://leetcode.com/problems/remove-duplicates-from-sorted-list/description/\" target=\"_blank\" title=\"https://leetcode.com/problems/remove-duplicates-from-sorted-list/description/\">https://leetcode.com/problems/remove-duplicates-from-sorted-list/description/</a> (easy) <br>\n<a href=\"https://leetcode.com/problems/split-linked-list-in-parts/description/\" target=\"_blank\" title=\"https://leetcode.com/problems/split-linked-list-in-parts/description/\">https://leetcode.com/problems/split-linked-list-in-parts/description/</a> (medium)</p>\n<p>Today's topic is linked lists. <a href=\"https://www.geeksforgeeks.org/data-structures/linked-list/\" target=\"_blank\" title=\"https://www.geeksforgeeks.org/data-structures/linked-list/\">https://www.geeksforgeeks.org/data-structures/linked-list/</a></p>\n<p>Host: <span class=\"user-mention\" data-user-id=\"129939\">@Marina Inina (F2'18)</span>  (Contact me if you have any questions, concerns, or feedback regarding today's or other days' PLP.)</p>",
            "content_type": "text/html",
            "display_recipient": "Post-Lunch Prep (PLP)",
            "flags": [
                "read",
                "historical"
            ],
            "id": 147686042,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 183179,
            "sender_email": "nekanek@protonmail.com",
            "sender_full_name": "Marina Inina (she) (F2'18)",
            "sender_id": 129939,
            "sender_realm_str": "recurse",
            "stream_id": 144212,
            "subject": "Wednesday, 14 Nov 2018",
            "submessages": [],
            "timestamp": 1542217382,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/f244e3545a6792c557adf5475475c0cc2e6d5d7b?x=x&version=3",
            "client": "ZulipElectron",
            "content": "<p>I've been having issues with variable performance on submissions recently. First time I submit is often ~20% slower than future submissions. Submit around 5 times and see what you get! Your algorithm might be better than you think</p>",
            "content_type": "text/html",
            "display_recipient": "Post-Lunch Prep (PLP)",
            "flags": [
                "read",
                "historical"
            ],
            "id": 147688990,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 183179,
            "sender_email": "aatigar@gmail.com",
            "sender_full_name": "Adam Avery Tigar (he) (F2'18)",
            "sender_id": 130218,
            "sender_realm_str": "recurse",
            "stream_id": 144212,
            "subject": "Wednesday, 14 Nov 2018",
            "submessages": [],
            "timestamp": 1542219974,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/46fc5295ff53a9173234c8c6bd09c245?d=identicon&version=1",
            "client": "ZulipElectron",
            "content": "<p>That's a usual behavior unfortunately. v_v</p>",
            "content_type": "text/html",
            "display_recipient": "Post-Lunch Prep (PLP)",
            "flags": [
                "read",
                "historical"
            ],
            "id": 147689989,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 183179,
            "sender_email": "nekanek@protonmail.com",
            "sender_full_name": "Marina Inina (she) (F2'18)",
            "sender_id": 129939,
            "sender_realm_str": "recurse",
            "stream_id": 144212,
            "subject": "Wednesday, 14 Nov 2018",
            "submessages": [],
            "timestamp": 1542220991,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/f244e3545a6792c557adf5475475c0cc2e6d5d7b?x=x&version=3",
            "client": "ZulipElectron",
            "content": "<p>Split linked list into parts:<br>\nBeats 93%</p>\n<div class=\"codehilite\"><pre><span></span>def get_length(root):\n    length = 0\n    while root:\n        root = root.next\n        length += 1\n    return length\n\nclass Solution:\n    def splitListToParts(self, root, k):\n        &quot;&quot;&quot;\n        :type root: ListNode\n        :type k: int\n        :rtype: List[ListNode]\n        &quot;&quot;&quot;\n        length = get_length(root)\n        if length == 0: return [None]*k\n        spaces = length // k\n        remainder = length % k\n        counter_list = [spaces]*k\n\n        for i in range(remainder):\n            counter_list[i] += 1\n\n        cur = root\n        res = []\n        for i in counter_list:\n            res.append(cur)\n            for j in range(i):\n                seen = cur\n                cur = cur.next\n            seen.next = None\n        return res\n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "Post-Lunch Prep (PLP)",
            "flags": [
                "read",
                "historical"
            ],
            "id": 147693022,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 183179,
            "sender_email": "aatigar@gmail.com",
            "sender_full_name": "Adam Avery Tigar (he) (F2'18)",
            "sender_id": 130218,
            "sender_realm_str": "recurse",
            "stream_id": 144212,
            "subject": "Wednesday, 14 Nov 2018",
            "submessages": [],
            "timestamp": 1542223785,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/1316da00218a425032fe2e4a5a1bf125?d=identicon&version=1",
            "client": "website",
            "content": "<div class=\"codehilite\"><pre><span></span>```\n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "Post-Lunch Prep (PLP)",
            "flags": [
                "read",
                "historical"
            ],
            "id": 147695296,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 183179,
            "sender_email": "billy1kaplan@gmail.com",
            "sender_full_name": "Billy Kaplan (he) (W1'18)",
            "sender_id": 134184,
            "sender_realm_str": "recurse",
            "stream_id": 144212,
            "subject": "Wednesday, 14 Nov 2018",
            "submessages": [],
            "timestamp": 1542225806,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/1316da00218a425032fe2e4a5a1bf125?d=identicon&version=1",
            "client": "website",
            "content": "<p>Another python solution:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"c1\"># Definition for singly-linked list.</span>\n<span class=\"c1\"># class ListNode:</span>\n<span class=\"c1\">#     def __init__(self, x):</span>\n<span class=\"c1\">#         self.val = x</span>\n<span class=\"c1\">#         self.next = None</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">Solution</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"nf\">splitListToParts</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">root</span><span class=\"p\">,</span> <span class=\"n\">k</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">        :type root: ListNode</span>\n<span class=\"sd\">        :type k: int</span>\n<span class=\"sd\">        :rtype: List[ListNode]</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"n\">length</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n        <span class=\"n\">node</span> <span class=\"o\">=</span> <span class=\"n\">root</span>\n        <span class=\"k\">while</span> <span class=\"n\">node</span><span class=\"p\">:</span>\n            <span class=\"n\">length</span> <span class=\"o\">+=</span> <span class=\"mi\">1</span>\n            <span class=\"n\">node</span> <span class=\"o\">=</span> <span class=\"n\">node</span><span class=\"o\">.</span><span class=\"n\">next</span>\n\n        <span class=\"n\">b</span> <span class=\"o\">=</span> <span class=\"n\">length</span><span class=\"o\">//</span><span class=\"n\">k</span>\n        <span class=\"k\">if</span> <span class=\"n\">length</span> <span class=\"o\">&gt;</span> <span class=\"n\">k</span><span class=\"p\">:</span>\n            <span class=\"n\">num_big_buckets</span> <span class=\"o\">=</span> <span class=\"n\">length</span> <span class=\"o\">%</span> <span class=\"n\">k</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"n\">num_big_buckets</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n        <span class=\"n\">L</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n        <span class=\"n\">node</span> <span class=\"o\">=</span> <span class=\"n\">root</span>\n        <span class=\"k\">for</span> <span class=\"n\">_</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"n\">num_big_buckets</span><span class=\"p\">):</span>\n            <span class=\"n\">L</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">node</span><span class=\"p\">)</span>\n            <span class=\"k\">for</span> <span class=\"n\">_</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"n\">b</span><span class=\"p\">):</span>\n                <span class=\"n\">node</span> <span class=\"o\">=</span> <span class=\"n\">node</span><span class=\"o\">.</span><span class=\"n\">next</span>\n            <span class=\"n\">next_head</span> <span class=\"o\">=</span> <span class=\"n\">node</span><span class=\"o\">.</span><span class=\"n\">next</span>\n            <span class=\"n\">node</span><span class=\"o\">.</span><span class=\"n\">next</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n            <span class=\"n\">node</span> <span class=\"o\">=</span> <span class=\"n\">next_head</span>\n        <span class=\"k\">for</span> <span class=\"n\">_</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"n\">k</span> <span class=\"o\">-</span> <span class=\"n\">num_big_buckets</span><span class=\"p\">):</span>\n            <span class=\"n\">L</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">node</span><span class=\"p\">)</span>\n            <span class=\"k\">for</span> <span class=\"n\">_</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"n\">b</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">):</span>\n                <span class=\"n\">node</span> <span class=\"o\">=</span> <span class=\"n\">node</span><span class=\"o\">.</span><span class=\"n\">next</span>\n            <span class=\"k\">if</span> <span class=\"n\">node</span><span class=\"p\">:</span>\n                <span class=\"n\">next_head</span> <span class=\"o\">=</span> <span class=\"n\">node</span><span class=\"o\">.</span><span class=\"n\">next</span>\n                <span class=\"n\">node</span><span class=\"o\">.</span><span class=\"n\">next</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n                <span class=\"n\">node</span> <span class=\"o\">=</span> <span class=\"n\">next_head</span>\n\n\n        <span class=\"k\">return</span> <span class=\"n\">L</span>\n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "Post-Lunch Prep (PLP)",
            "flags": [
                "read",
                "historical"
            ],
            "id": 147695361,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 183179,
            "sender_email": "billy1kaplan@gmail.com",
            "sender_full_name": "Billy Kaplan (he) (W1'18)",
            "sender_id": 134184,
            "sender_realm_str": "recurse",
            "stream_id": 144212,
            "subject": "Wednesday, 14 Nov 2018",
            "submessages": [],
            "timestamp": 1542225858,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/6145d0683a46b1516d14fa79f4980dfa1143bdcc?x=x&version=9",
            "client": "website",
            "content": "<p>split linked list with <span class=\"user-mention\" data-user-id=\"129939\">@Marina Inina (F2'18)</span> over glitch again</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">class</span> <span class=\"nc\">Solution</span><span class=\"p\">:</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">splitListToParts</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">root</span><span class=\"p\">,</span> <span class=\"n\">k</span><span class=\"p\">):</span>\n        <span class=\"k\">if</span> <span class=\"n\">root</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"p\">[</span><span class=\"kc\">None</span><span class=\"p\">]</span> <span class=\"o\">*</span> <span class=\"n\">k</span>\n        <span class=\"n\">length</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">get_length</span><span class=\"p\">(</span><span class=\"n\">root</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n        <span class=\"n\">q</span><span class=\"p\">,</span> <span class=\"n\">r</span> <span class=\"o\">=</span> <span class=\"n\">length</span> <span class=\"o\">//</span> <span class=\"n\">k</span><span class=\"p\">,</span> <span class=\"n\">length</span> <span class=\"o\">%</span> <span class=\"n\">k</span>\n        <span class=\"n\">next_node</span> <span class=\"o\">=</span> <span class=\"n\">root</span>\n        <span class=\"n\">linked_lists</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n        <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"n\">k</span><span class=\"p\">):</span>\n            <span class=\"n\">curr_node</span><span class=\"p\">,</span> <span class=\"n\">next_node</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">split</span><span class=\"p\">(</span><span class=\"n\">next_node</span><span class=\"p\">,</span> <span class=\"n\">q</span> <span class=\"o\">+</span> <span class=\"mi\">1</span> <span class=\"o\">*</span> <span class=\"p\">(</span><span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">r</span><span class=\"p\">))</span>\n            <span class=\"n\">linked_lists</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">curr_node</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">linked_list</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">get_length</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">node</span><span class=\"p\">,</span> <span class=\"n\">acc</span><span class=\"p\">):</span>\n        <span class=\"k\">if</span> <span class=\"n\">node</span><span class=\"o\">.</span><span class=\"n\">next</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"n\">acc</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">get_length</span><span class=\"p\">(</span><span class=\"n\">node</span><span class=\"o\">.</span><span class=\"n\">next</span><span class=\"p\">,</span> <span class=\"n\">acc</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">split</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">node</span><span class=\"p\">,</span> <span class=\"n\">n</span><span class=\"p\">):</span>\n        <span class=\"n\">curr</span> <span class=\"o\">=</span> <span class=\"n\">node</span>\n        <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">):</span>\n            <span class=\"k\">if</span> <span class=\"n\">curr</span><span class=\"o\">.</span><span class=\"n\">next</span><span class=\"p\">:</span>\n                <span class=\"n\">curr</span> <span class=\"o\">=</span> <span class=\"n\">curr</span><span class=\"o\">.</span><span class=\"n\">next</span>\n            <span class=\"k\">else</span><span class=\"p\">:</span>\n                <span class=\"n\">curr</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n        <span class=\"k\">if</span> <span class=\"n\">curr</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"kc\">None</span> <span class=\"ow\">and</span> <span class=\"n\">curr</span><span class=\"o\">.</span><span class=\"n\">next</span><span class=\"p\">:</span>\n            <span class=\"n\">next_node</span> <span class=\"o\">=</span> <span class=\"n\">curr</span><span class=\"o\">.</span><span class=\"n\">next</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"n\">next_node</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n        <span class=\"k\">if</span> <span class=\"n\">curr</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n            <span class=\"n\">curr</span><span class=\"o\">.</span><span class=\"n\">next</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n        <span class=\"k\">return</span> <span class=\"n\">node</span><span class=\"p\">,</span> <span class=\"n\">next_node</span>\n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "Post-Lunch Prep (PLP)",
            "flags": [
                "read",
                "historical"
            ],
            "id": 147701355,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 183179,
            "sender_email": "aaron_wood@protonmail.com",
            "sender_full_name": "Aaron Wood (he) (F1'18)",
            "sender_id": 125145,
            "sender_realm_str": "recurse",
            "stream_id": 144212,
            "subject": "Wednesday, 14 Nov 2018",
            "submessages": [],
            "timestamp": 1542231368,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/ca9f8cb0bcede6fa920c47295ad4e7a972c9f863?x=x&version=2",
            "client": "ZulipElectron",
            "content": "<p>I would say that is as fast as it needs to be :) O(max(lgx, lgy)) 10/10</p>",
            "content_type": "text/html",
            "display_recipient": "Post-Lunch Prep (PLP)",
            "flags": [
                "read",
                "historical"
            ],
            "id": 147710499,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 183179,
            "sender_email": "chunli.developer@gmail.com",
            "sender_full_name": "Chun Li (he) (F2'18)",
            "sender_id": 129956,
            "sender_realm_str": "recurse",
            "stream_id": 144212,
            "subject": "Tuesday, 13 Nov 2018",
            "submessages": [],
            "timestamp": 1542241910,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/e622b23d56ce1dbfd935c38e071636c4a40935e8?x=x&version=2",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-id=\"125145\">@Aaron Wood (F1'18)</span>, though I'm late to the party, perhaps the following solution to the <a href=\"https://leetcode.com/problems/unique-paths-ii/description/\" target=\"_blank\" title=\"https://leetcode.com/problems/unique-paths-ii/description/\">Unique Paths II</a> problem will be of interest. Aside from memoizing, I haven't tried to optimize it for speed. Rather, I've tried to come up with a solution that reflects the <strong>topological</strong> essence of the problem. (Some remarks on that below.)</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">functools</span> <span class=\"k\">import</span> <span class=\"n\">lru_cache</span>\n<span class=\"kn\">from</span> <span class=\"nn\">numpy</span> <span class=\"k\">import</span> <span class=\"n\">array</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">count_paths_around</span><span class=\"p\">(</span><span class=\"n\">holes</span><span class=\"p\">:</span> <span class=\"p\">[[</span><span class=\"nb\">int</span><span class=\"p\">]])</span> <span class=\"o\">-&gt;</span> <span class=\"nb\">int</span><span class=\"p\">:</span>\n    <span class=\"sd\">&quot;&quot;&quot;Count paths around holes (i.e., obstacles).&quot;&quot;&quot;</span>\n    <span class=\"n\">weights</span> <span class=\"o\">=</span> <span class=\"n\">invert</span><span class=\"p\">(</span><span class=\"n\">holes</span><span class=\"p\">)</span>\n    <span class=\"n\">m</span><span class=\"p\">,</span> <span class=\"n\">n</span> <span class=\"o\">=</span> <span class=\"n\">weights</span><span class=\"o\">.</span><span class=\"n\">shape</span>\n    <span class=\"n\">m</span><span class=\"p\">,</span> <span class=\"n\">n</span> <span class=\"o\">=</span> <span class=\"n\">m</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">n</span> <span class=\"o\">-</span> <span class=\"mi\">1</span>\n\n    <span class=\"nd\">@lru_cache</span><span class=\"p\">(</span><span class=\"n\">maxsize</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">)</span>\n    <span class=\"k\">def</span> <span class=\"nf\">count_from</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">:</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"n\">j</span><span class=\"p\">:</span> <span class=\"nb\">int</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"nb\">int</span><span class=\"p\">:</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"n\">j</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"p\">(</span><span class=\"n\">m</span><span class=\"p\">,</span> <span class=\"n\">n</span><span class=\"p\">):</span>\n            <span class=\"k\">return</span> <span class=\"n\">weights</span><span class=\"p\">[</span><span class=\"n\">m</span><span class=\"p\">][</span><span class=\"n\">n</span><span class=\"p\">]</span>\n        <span class=\"k\">if</span> <span class=\"n\">i</span> <span class=\"o\">&gt;</span> <span class=\"n\">m</span> <span class=\"ow\">or</span> <span class=\"n\">j</span> <span class=\"o\">&gt;</span> <span class=\"n\">n</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"mi\">0</span>\n        <span class=\"k\">return</span> <span class=\"n\">weights</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">][</span><span class=\"n\">j</span><span class=\"p\">]</span> <span class=\"o\">*</span> <span class=\"p\">(</span><span class=\"n\">count_from</span><span class=\"p\">(</span><span class=\"n\">i</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">j</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"n\">count_from</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"n\">j</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">))</span>\n\n    <span class=\"k\">return</span> <span class=\"n\">count_from</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n\n<span class=\"n\">invert</span> <span class=\"o\">=</span> <span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"p\">(</span><span class=\"n\">array</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"o\">%</span> <span class=\"mi\">2</span>\n</pre></div>\n\n\n<p>Here are a few remarks on the idea behind the solution, which I hope aren't too pedantic.</p>\n<p>The problem is essentially topologically. The paths on the grid form a directed graph. Since each path in a graph is unique in its homotopy class, you can count such paths by lifting to the universal covering space, which is a tree. The paths in the grid may only step \"right\" or \"down,\" so this is a rooted binary tree, whose root maps to the initial grid point and whose leaves map to the terminal grid point. This is the picture when there are <em>no</em> obstacles. </p>\n<p>When obstacles are introduced, we have to prune the corresponding nodes from the (universal covering) tree, as well. Doing so would be somewhat involved. Luckily, we are only interested in <em>counting</em> paths, rather than collecting them, so we can simulate pruning by weighting the nodes in the tree corresponding to obstacles by 0, and all the others by 1. This enables the counting function to be expressed via recursion over a (non-pruned) binary tree, which is straightforward to implement (<code>count_from()</code>).</p>\n<p>(For convenience, I used <code>numpy.array()</code> to \"invert\" all node weights at once. Alternatively, you could invert the weights, individually, as they are encountered in <code>count_from()</code>.)</p>",
            "content_type": "text/html",
            "display_recipient": "Post-Lunch Prep (PLP)",
            "flags": [
                "read",
                "historical"
            ],
            "id": 147736633,
            "is_me_message": false,
            "last_edit_timestamp": 1542297607,
            "reactions": [
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "+1",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "aaron_wood@protonmail.com",
                        "full_name": "Aaron Wood (he) (F1'18)",
                        "id": 125145
                    },
                    "user_id": 125145
                }
            ],
            "recipient_id": 183179,
            "sender_email": "eha@posteo.de",
            "sender_full_name": "Eugene Ha (he) (S1'18)",
            "sender_id": 116366,
            "sender_realm_str": "recurse",
            "stream_id": 144212,
            "subject": "Monday, 12 Nov 2018",
            "submessages": [],
            "timestamp": 1542282956,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/e622b23d56ce1dbfd935c38e071636c4a40935e8?x=x&version=2",
            "client": "website",
            "content": "<p>Here are a few test:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">holes</span> <span class=\"o\">=</span> <span class=\"p\">[[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">],</span>\n         <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">],</span>\n         <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">]]</span>\n<span class=\"k\">assert</span><span class=\"p\">(</span><span class=\"n\">count_paths_around</span><span class=\"p\">(</span><span class=\"n\">holes</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"mi\">6</span><span class=\"p\">)</span>\n\n<span class=\"n\">holes</span> <span class=\"o\">=</span> <span class=\"p\">[[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">],</span>\n         <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">],</span>\n         <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">]]</span>\n<span class=\"k\">assert</span><span class=\"p\">(</span><span class=\"n\">count_paths_around</span><span class=\"p\">(</span><span class=\"n\">holes</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"mi\">2</span><span class=\"p\">)</span>\n\n<span class=\"n\">holes</span> <span class=\"o\">=</span> <span class=\"p\">[[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">],</span>\n         <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">],</span>\n         <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">]]</span>\n<span class=\"k\">assert</span><span class=\"p\">(</span><span class=\"n\">count_paths_around</span><span class=\"p\">(</span><span class=\"n\">holes</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"mi\">3</span><span class=\"p\">)</span>\n\n<span class=\"n\">holes</span> <span class=\"o\">=</span> <span class=\"p\">[[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">],</span>\n         <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">],</span>\n         <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">]]</span>\n<span class=\"k\">assert</span><span class=\"p\">(</span><span class=\"n\">count_paths_around</span><span class=\"p\">(</span><span class=\"n\">holes</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n\n<span class=\"n\">holes</span> <span class=\"o\">=</span> <span class=\"p\">[[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">],</span>\n         <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">],</span>\n         <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">]]</span>\n<span class=\"k\">assert</span><span class=\"p\">(</span><span class=\"n\">count_paths_around</span><span class=\"p\">(</span><span class=\"n\">holes</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "Post-Lunch Prep (PLP)",
            "flags": [
                "read",
                "historical"
            ],
            "id": 147737242,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 183179,
            "sender_email": "eha@posteo.de",
            "sender_full_name": "Eugene Ha (he) (S1'18)",
            "sender_id": 116366,
            "sender_realm_str": "recurse",
            "stream_id": 144212,
            "subject": "Monday, 12 Nov 2018",
            "submessages": [],
            "timestamp": 1542283803,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/a56e927f8f7f420f54cff1269ba6c92b38c84669?x=x&version=2",
            "client": "website",
            "content": "<p>Hi <span class=\"user-mention\" data-user-id=\"*\">@all</span> </p>\n<p>Welcome to today's PLP. The problems will be projected in the presentation space around lunchtime. If you are interested in pairing, come to the presentation space at 1:45 to find a partner. If you are interested in discussing afterwards, come to the presentation space at 2:45.</p>\n<p>Today's problems:</p>\n<p><a href=\"https://leetcode.com/problems/toeplitz-matrix/description/\" target=\"_blank\" title=\"https://leetcode.com/problems/toeplitz-matrix/description/\">https://leetcode.com/problems/toeplitz-matrix/description/</a> (easy)<br>\n<a href=\"https://leetcode.com/problems/number-of-islands/description/\" target=\"_blank\" title=\"https://leetcode.com/problems/number-of-islands/description/\">https://leetcode.com/problems/number-of-islands/description/</a> (medium)</p>\n<p>Host: <span class=\"user-mention\" data-user-id=\"129927\">@Joshua Rider (F2'18)</span>  (F2'18) Ping <span class=\"user-mention\" data-user-id=\"129927\">@Joshua Rider (F2'18)</span>  if you have any questions.</p>",
            "content_type": "text/html",
            "display_recipient": "Post-Lunch Prep (PLP)",
            "flags": [
                "read",
                "historical"
            ],
            "id": 147756635,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "+1",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "mattg@leema.org",
                        "full_name": "Matthew Graham (he) (F1'18)",
                        "id": 125276
                    },
                    "user_id": 125276
                }
            ],
            "recipient_id": 183179,
            "sender_email": "joshrider@gmail.com",
            "sender_full_name": "Joshua Rider (he) (F2'18)",
            "sender_id": 129927,
            "sender_realm_str": "recurse",
            "stream_id": 144212,
            "subject": "Thursday, 15 Nov 2018",
            "submessages": [],
            "timestamp": 1542301333,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/6145d0683a46b1516d14fa79f4980dfa1143bdcc?x=x&version=9",
            "client": "website",
            "content": "<p>that's a very nice solution, <span class=\"user-mention\" data-user-id=\"116366\">@Eugene Ha (S1'18)</span>   thanks for sharing!!!</p>",
            "content_type": "text/html",
            "display_recipient": "Post-Lunch Prep (PLP)",
            "flags": [
                "read",
                "historical"
            ],
            "id": 147765728,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f60a",
                    "emoji_name": "blush",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "eha@posteo.de",
                        "full_name": "Eugene Ha (he) (S1'18)",
                        "id": 116366
                    },
                    "user_id": 116366
                }
            ],
            "recipient_id": 183179,
            "sender_email": "aaron_wood@protonmail.com",
            "sender_full_name": "Aaron Wood (he) (F1'18)",
            "sender_id": 125145,
            "sender_realm_str": "recurse",
            "stream_id": 144212,
            "subject": "Monday, 12 Nov 2018",
            "submessages": [],
            "timestamp": 1542309537,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/36716766e555f85a2c18cf8f358d6f63ccc077d9?x=x&version=2",
            "client": "website",
            "content": "<p>thanks, I just did the matrix one</p>",
            "content_type": "text/html",
            "display_recipient": "Post-Lunch Prep (PLP)",
            "flags": [
                "read",
                "historical"
            ],
            "id": 147781948,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 183179,
            "sender_email": "mattg@leema.org",
            "sender_full_name": "Matthew Graham (he) (F1'18)",
            "sender_id": 125276,
            "sender_realm_str": "recurse",
            "stream_id": 144212,
            "subject": "Thursday, 15 Nov 2018",
            "submessages": [],
            "timestamp": 1542324217,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/6145d0683a46b1516d14fa79f4980dfa1143bdcc?x=x&version=9",
            "client": "website",
            "content": "<p>number of islands (slow solution..)</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">itertools</span> <span class=\"k\">import</span> <span class=\"n\">product</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">Solution</span><span class=\"p\">:</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">numIslands</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">grid</span><span class=\"p\">):</span>\n        <span class=\"n\">num_islands</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n        <span class=\"k\">if</span> <span class=\"n\">grid</span> <span class=\"o\">==</span> <span class=\"p\">[]:</span>\n            <span class=\"k\">return</span> <span class=\"n\">num_islands</span>\n        <span class=\"n\">r</span><span class=\"p\">,</span> <span class=\"n\">c</span> <span class=\"o\">=</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">grid</span><span class=\"p\">),</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">grid</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">])</span>\n        <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"n\">j</span><span class=\"p\">)</span> <span class=\"ow\">in</span> <span class=\"n\">product</span><span class=\"p\">(</span><span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"n\">r</span><span class=\"p\">),</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"n\">c</span><span class=\"p\">)):</span>\n            <span class=\"k\">if</span> <span class=\"n\">grid</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">][</span><span class=\"n\">j</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"s1\">&#39;1&#39;</span><span class=\"p\">:</span>\n                <span class=\"n\">num_islands</span> <span class=\"o\">+=</span> <span class=\"mi\">1</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">process_island</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"n\">j</span><span class=\"p\">,</span> <span class=\"n\">grid</span><span class=\"p\">,</span> <span class=\"n\">r</span><span class=\"p\">,</span> <span class=\"n\">c</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">num_islands</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">process_island</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"n\">j</span><span class=\"p\">,</span> <span class=\"n\">grid</span><span class=\"p\">,</span> <span class=\"n\">r</span><span class=\"p\">,</span> <span class=\"n\">c</span><span class=\"p\">):</span>\n        <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"n\">ii</span><span class=\"p\">,</span> <span class=\"n\">jj</span><span class=\"p\">)</span> <span class=\"ow\">in</span> <span class=\"nb\">zip</span><span class=\"p\">((</span><span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"n\">i</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">i</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"n\">j</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">j</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">j</span><span class=\"p\">,</span> <span class=\"n\">j</span><span class=\"p\">)):</span>\n            <span class=\"k\">if</span> <span class=\"n\">ii</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"n\">r</span><span class=\"p\">)</span> <span class=\"ow\">and</span> <span class=\"n\">jj</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"n\">c</span><span class=\"p\">)</span> <span class=\"ow\">and</span> <span class=\"n\">grid</span><span class=\"p\">[</span><span class=\"n\">ii</span><span class=\"p\">][</span><span class=\"n\">jj</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"s1\">&#39;1&#39;</span><span class=\"p\">:</span>\n                <span class=\"n\">grid</span><span class=\"p\">[</span><span class=\"n\">ii</span><span class=\"p\">][</span><span class=\"n\">jj</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;0&#39;</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">process_island</span><span class=\"p\">(</span><span class=\"n\">ii</span><span class=\"p\">,</span> <span class=\"n\">jj</span><span class=\"p\">,</span> <span class=\"n\">grid</span><span class=\"p\">,</span> <span class=\"n\">r</span><span class=\"p\">,</span> <span class=\"n\">c</span><span class=\"p\">)</span>\n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "Post-Lunch Prep (PLP)",
            "flags": [
                "read",
                "historical"
            ],
            "id": 147833984,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 183179,
            "sender_email": "aaron_wood@protonmail.com",
            "sender_full_name": "Aaron Wood (he) (F1'18)",
            "sender_id": 125145,
            "sender_realm_str": "recurse",
            "stream_id": 144212,
            "subject": "Thursday, 15 Nov 2018",
            "submessages": [],
            "timestamp": 1542391244,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/6affb49df763896d737ac7e0ed618139?d=identicon&version=1",
            "client": "ZulipElectron",
            "content": "<p>Not my solution, but really clever:</p>",
            "content_type": "text/html",
            "display_recipient": "Post-Lunch Prep (PLP)",
            "flags": [
                "read",
                "historical"
            ],
            "id": 147837503,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 183179,
            "sender_email": "dbgoldberg01@gmail.com",
            "sender_full_name": "David Goldberg (he) (W1'18)",
            "sender_id": 134182,
            "sender_realm_str": "recurse",
            "stream_id": 144212,
            "subject": "Thursday, 15 Nov 2018",
            "submessages": [],
            "timestamp": 1542394565,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/6affb49df763896d737ac7e0ed618139?d=identicon&version=1",
            "client": "ZulipElectron",
            "content": "<p>```class Solution(object):<br>\n    def numIslands(self, grid):<br>\n        \"\"\"<br>\n        :type grid: List[List[str]]<br>\n        :rtype: int<br>\n        \"\"\"</p>\n<div class=\"codehilite\"><pre><span></span>    # Iterate through each point on the grid\n    # If point == 1, use our BFS on it to clear all adjacent 1s\n    # counter++\n    # Repeat for remaining points\n    # Return counter\n\n    def nuke(grid, x, y):\n        if 0 &lt;= x and x &lt; len(grid[0]):\n            if 0 &lt;= y and y &lt; len(grid):\n                if grid[y][x] == &#39;1&#39;:\n                    grid[y][x] = &#39;0&#39;\n                    nuke(grid, x, y+1)\n                    nuke(grid, x, y-1)\n                    nuke(grid, x+1, y)\n                    nuke(grid, x-1, y)\n\n    counter = 0\n    for j in range(len(grid)):\n        for i in range(len(grid[j])):\n            if grid[j][i] == &#39;1&#39;:\n                counter += 1\n                nuke(grid, i, j)\n\n    return counter```\n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "Post-Lunch Prep (PLP)",
            "flags": [
                "read",
                "historical"
            ],
            "id": 147837521,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f60e",
                    "emoji_name": "sunglasses",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "aaron_wood@protonmail.com",
                        "full_name": "Aaron Wood (he) (F1'18)",
                        "id": 125145
                    },
                    "user_id": 125145
                },
                {
                    "emoji_code": "1f389",
                    "emoji_name": "tada",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "aatigar@gmail.com",
                        "full_name": "Adam Avery Tigar (he) (F2'18)",
                        "id": 130218
                    },
                    "user_id": 130218
                }
            ],
            "recipient_id": 183179,
            "sender_email": "dbgoldberg01@gmail.com",
            "sender_full_name": "David Goldberg (he) (W1'18)",
            "sender_id": 134182,
            "sender_realm_str": "recurse",
            "stream_id": 144212,
            "subject": "Thursday, 15 Nov 2018",
            "submessages": [],
            "timestamp": 1542394579,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/6145d0683a46b1516d14fa79f4980dfa1143bdcc?x=x&version=9",
            "client": "website",
            "content": "<p>twins!!</p>",
            "content_type": "text/html",
            "display_recipient": "Post-Lunch Prep (PLP)",
            "flags": [
                "read",
                "historical"
            ],
            "id": 147838972,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 183179,
            "sender_email": "aaron_wood@protonmail.com",
            "sender_full_name": "Aaron Wood (he) (F1'18)",
            "sender_id": 125145,
            "sender_realm_str": "recurse",
            "stream_id": 144212,
            "subject": "Thursday, 15 Nov 2018",
            "submessages": [],
            "timestamp": 1542395824,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/e622b23d56ce1dbfd935c38e071636c4a40935e8?x=x&version=2",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-id=\"134182\">@David Goldberg (W1'18)</span>, interesting. This reminds me of the way grid clearing works in the game <a href=\"https://en.wikipedia.org/wiki/Minesweeper_(video_game)\" target=\"_blank\" title=\"https://en.wikipedia.org/wiki/Minesweeper_(video_game)\">minesweeper</a>.</p>",
            "content_type": "text/html",
            "display_recipient": "Post-Lunch Prep (PLP)",
            "flags": [
                "read",
                "historical"
            ],
            "id": 147839108,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 183179,
            "sender_email": "eha@posteo.de",
            "sender_full_name": "Eugene Ha (he) (S1'18)",
            "sender_id": 116366,
            "sender_realm_str": "recurse",
            "stream_id": 144212,
            "subject": "Thursday, 15 Nov 2018",
            "submessages": [],
            "timestamp": 1542395951,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/ca9f8cb0bcede6fa920c47295ad4e7a972c9f863?x=x&version=2",
            "client": "ZulipElectron",
            "content": "<p>yupp it's called a flood fill algorithm. I believe this is O(m*n) time where m and n are the dimensions of the matrix given since we pass through each index once. Here's my implementation</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">class</span> <span class=\"nc\">Solution</span><span class=\"p\">(</span><span class=\"nb\">object</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"nf\">numIslands</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">grid</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">        :type grid: List[List[str]]</span>\n<span class=\"sd\">        :rtype: int</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"n\">islands</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n        <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">grid</span><span class=\"p\">)):</span>\n            <span class=\"k\">for</span> <span class=\"n\">j</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">grid</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">])):</span>\n                <span class=\"k\">if</span> <span class=\"n\">grid</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">][</span><span class=\"n\">j</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"s2\">&quot;1&quot;</span><span class=\"p\">:</span>\n                    <span class=\"n\">islands</span> <span class=\"o\">+=</span> <span class=\"mi\">1</span>\n                    <span class=\"n\">flood</span><span class=\"p\">(</span><span class=\"n\">grid</span><span class=\"p\">,</span> <span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"n\">j</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">islands</span>\n\n<span class=\"c1\"># flood fill algorithm</span>\n<span class=\"k\">def</span> <span class=\"nf\">flood</span><span class=\"p\">(</span><span class=\"n\">grid</span><span class=\"p\">,</span> <span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"n\">j</span><span class=\"p\">):</span>\n    <span class=\"k\">if</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"mi\">0</span> <span class=\"ow\">or</span> <span class=\"n\">j</span> <span class=\"o\">&lt;</span> <span class=\"mi\">0</span> <span class=\"ow\">or</span> <span class=\"n\">i</span> <span class=\"o\">&gt;=</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">grid</span><span class=\"p\">)</span> <span class=\"ow\">or</span> <span class=\"n\">j</span> <span class=\"o\">&gt;=</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">grid</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]):</span>\n        <span class=\"k\">return</span>\n    <span class=\"k\">if</span> <span class=\"n\">grid</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">][</span><span class=\"n\">j</span><span class=\"p\">]</span> <span class=\"o\">!=</span> <span class=\"s2\">&quot;1&quot;</span><span class=\"p\">:</span>\n        <span class=\"k\">return</span>\n    <span class=\"n\">grid</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">][</span><span class=\"n\">j</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"o\">-</span><span class=\"mi\">1</span>\n    <span class=\"n\">flood</span><span class=\"p\">(</span><span class=\"n\">grid</span><span class=\"p\">,</span> <span class=\"n\">i</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">j</span><span class=\"p\">)</span>\n    <span class=\"n\">flood</span><span class=\"p\">(</span><span class=\"n\">grid</span><span class=\"p\">,</span> <span class=\"n\">i</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">j</span><span class=\"p\">)</span>\n    <span class=\"n\">flood</span><span class=\"p\">(</span><span class=\"n\">grid</span><span class=\"p\">,</span> <span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"n\">j</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n    <span class=\"n\">flood</span><span class=\"p\">(</span><span class=\"n\">grid</span><span class=\"p\">,</span> <span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"n\">j</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n</pre></div>\n\n\n<p>I believe there are slightly better solutions to this problem <a href=\"https://en.wikipedia.org/wiki/Flood_fill\" target=\"_blank\" title=\"https://en.wikipedia.org/wiki/Flood_fill\">https://en.wikipedia.org/wiki/Flood_fill</a> but they are all O(m*n) time i think</p>",
            "content_type": "text/html",
            "display_recipient": "Post-Lunch Prep (PLP)",
            "flags": [
                "read",
                "historical"
            ],
            "id": 147849539,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "+1",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "eha@posteo.de",
                        "full_name": "Eugene Ha (he) (S1'18)",
                        "id": 116366
                    },
                    "user_id": 116366
                }
            ],
            "recipient_id": 183179,
            "sender_email": "chunli.developer@gmail.com",
            "sender_full_name": "Chun Li (he) (F2'18)",
            "sender_id": 129956,
            "sender_realm_str": "recurse",
            "stream_id": 144212,
            "subject": "Thursday, 15 Nov 2018",
            "submessages": [],
            "timestamp": 1542405967,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4d02236bda71051fd87885a63cb27a5b?d=identicon&version=1",
            "client": "ZulipElectron",
            "content": "<p>Hi @all</p>\n<p>Welcome to today's PLP. The problems will be projected in the presentation space around lunchtime. <br>\nIf you are interested in pairing, come to the presentation space at 1:45 to find a partner. <br>\nIf you are interested in discussing afterwards, come to the presentation space at 2:45.</p>\n<p>Today's problems:<br>\n<a href=\"https://leetcode.com/problems/single-number/description/\" target=\"_blank\" title=\"https://leetcode.com/problems/single-number/description/\">https://leetcode.com/problems/single-number/description/</a> (easy) <br>\n<a href=\"https://leetcode.com/problems/maximum-xor-of-two-numbers-in-an-array/description/\" target=\"_blank\" title=\"https://leetcode.com/problems/maximum-xor-of-two-numbers-in-an-array/description/\">https://leetcode.com/problems/maximum-xor-of-two-numbers-in-an-array/description/</a> (medium)</p>\n<p>Today's topic is bit manipulation: <a href=\"https://www.hackerearth.com/practice/notes/bit-manipulation/\" target=\"_blank\" title=\"https://www.hackerearth.com/practice/notes/bit-manipulation/\">https://www.hackerearth.com/practice/notes/bit-manipulation/</a></p>\n<p>Host: <span class=\"user-mention\" data-user-id=\"130084\">@Sonja Lea Heinze (F2'18)</span>  (Contact me if you have any questions, concerns, or feedback.)</p>",
            "content_type": "text/html",
            "display_recipient": "Post-Lunch Prep (PLP)",
            "flags": [
                "read",
                "historical"
            ],
            "id": 147978802,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 183179,
            "sender_email": "sonjaleaheinze@gmail.com",
            "sender_full_name": "Sonja Lea Heinze (she) (F2'18)",
            "sender_id": 130084,
            "sender_realm_str": "recurse",
            "stream_id": 144212,
            "subject": "Wednesday, 14 Nov 2018",
            "submessages": [],
            "timestamp": 1542646541,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4d02236bda71051fd87885a63cb27a5b?d=identicon&version=1",
            "client": "ZulipElectron",
            "content": "<p>sorry...</p>",
            "content_type": "text/html",
            "display_recipient": "Post-Lunch Prep (PLP)",
            "flags": [
                "read",
                "historical"
            ],
            "id": 147978873,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 183179,
            "sender_email": "sonjaleaheinze@gmail.com",
            "sender_full_name": "Sonja Lea Heinze (she) (F2'18)",
            "sender_id": 130084,
            "sender_realm_str": "recurse",
            "stream_id": 144212,
            "subject": "Wednesday, 14 Nov 2018",
            "submessages": [],
            "timestamp": 1542646573,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4d02236bda71051fd87885a63cb27a5b?d=identicon&version=1",
            "client": "ZulipElectron",
            "content": "<p>Hi @all</p>\n<p>Welcome to today's PLP. The problems will be projected in the presentation space around lunchtime. <br>\nIf you are interested in pairing, come to the presentation space at 1:45 to find a partner. <br>\nIf you are interested in discussing afterwards, come to the presentation space at 2:45.</p>\n<p>Today's problems:<br>\n<a href=\"https://leetcode.com/problems/single-number/description/\" target=\"_blank\" title=\"https://leetcode.com/problems/single-number/description/\">https://leetcode.com/problems/single-number/description/</a> (easy) <br>\n<a href=\"https://leetcode.com/problems/maximum-xor-of-two-numbers-in-an-array/description/\" target=\"_blank\" title=\"https://leetcode.com/problems/maximum-xor-of-two-numbers-in-an-array/description/\">https://leetcode.com/problems/maximum-xor-of-two-numbers-in-an-array/description/</a> (medium)</p>\n<p>Today's topic is bit manipulation: <a href=\"https://www.hackerearth.com/practice/notes/bit-manipulation/\" target=\"_blank\" title=\"https://www.hackerearth.com/practice/notes/bit-manipulation/\">https://www.hackerearth.com/practice/notes/bit-manipulation/</a></p>\n<p>Host: @Sonja Lea Heinze (F2'18) (Contact me if you have any questions, concerns, or feedback.)</p>",
            "content_type": "text/html",
            "display_recipient": "Post-Lunch Prep (PLP)",
            "flags": [
                "read",
                "historical"
            ],
            "id": 147978925,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 183179,
            "sender_email": "sonjaleaheinze@gmail.com",
            "sender_full_name": "Sonja Lea Heinze (she) (F2'18)",
            "sender_id": 130084,
            "sender_realm_str": "recurse",
            "stream_id": 144212,
            "subject": "Monday, 19 Nov 2018",
            "submessages": [],
            "timestamp": 1542646602,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/927039f8a9a749e3be410a6969f8e2e8175cedf4?x=x&version=2",
            "client": "website",
            "content": "<p>Hi @all</p>\n<p>Welcome to today's PLP. The problems will be projected in the presentation space after the Non-Technical Talks. <br>\nIf you are interested in pairing, come to the presentation space at 1:45 to find a partner. <br>\nIf you are interested in discussing afterwards, come to the presentation space at 2:45.</p>\n<p>Today's problems:<br>\n<a href=\"https://leetcode.com/problems/find-all-anagrams-in-a-string/description/\" target=\"_blank\" title=\"https://leetcode.com/problems/find-all-anagrams-in-a-string/description/\">https://leetcode.com/problems/find-all-anagrams-in-a-string/description/</a> (easy) <br>\n<a href=\"https://leetcode.com/problems/reorganize-string/description/\" target=\"_blank\" title=\"https://leetcode.com/problems/reorganize-string/description/\">https://leetcode.com/problems/reorganize-string/description/</a> (medium)</p>\n<p>Since this is Thanksgiving week we will not meet tomorrow or Thursday, so the next meeting will be Monday, November 26!</p>\n<p>Host: <span class=\"user-mention\" data-user-id=\"130181\">@Gretchen Wright (F2'18)</span>  (Contact me if you have any questions, concerns, or feedback.)</p>",
            "content_type": "text/html",
            "display_recipient": "Post-Lunch Prep (PLP)",
            "flags": [
                "read",
                "historical"
            ],
            "id": 148051839,
            "is_me_message": false,
            "last_edit_timestamp": 1542732296,
            "reactions": [],
            "recipient_id": 183179,
            "sender_email": "gretchen.m.wright@gmail.com",
            "sender_full_name": "Gretchen Wright (she) (F2'18)",
            "sender_id": 130181,
            "sender_realm_str": "recurse",
            "stream_id": 144212,
            "subject": "Tuesday, 20 Nov 2018",
            "submessages": [],
            "timestamp": 1542732241,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/6145d0683a46b1516d14fa79f4980dfa1143bdcc?x=x&version=9",
            "client": "website",
            "content": "<p>find all anagrams</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">collections</span> <span class=\"k\">import</span> <span class=\"n\">Counter</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">Solution</span><span class=\"p\">:</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">findAnagrams</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">s</span><span class=\"p\">,</span> <span class=\"n\">p</span><span class=\"p\">):</span>\n        <span class=\"n\">lp</span> <span class=\"o\">=</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">p</span><span class=\"p\">)</span>\n        <span class=\"n\">ls</span> <span class=\"o\">=</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">)</span>\n        <span class=\"n\">letters</span> <span class=\"o\">=</span> <span class=\"nb\">set</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">)</span>\n        <span class=\"n\">cp</span><span class=\"p\">,</span> <span class=\"n\">cw</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"n\">x</span> <span class=\"p\">:</span> <span class=\"mi\">0</span> <span class=\"k\">for</span> <span class=\"n\">x</span> <span class=\"ow\">in</span> <span class=\"n\">letters</span><span class=\"p\">},</span> <span class=\"p\">{</span><span class=\"n\">x</span> <span class=\"p\">:</span> <span class=\"mi\">0</span> <span class=\"k\">for</span> <span class=\"n\">x</span> <span class=\"ow\">in</span> <span class=\"n\">letters</span><span class=\"p\">}</span>\n        <span class=\"n\">cp</span><span class=\"o\">.</span><span class=\"n\">update</span><span class=\"p\">(</span><span class=\"n\">Counter</span><span class=\"p\">(</span><span class=\"n\">p</span><span class=\"p\">))</span>\n        <span class=\"n\">cw</span><span class=\"o\">.</span><span class=\"n\">update</span><span class=\"p\">(</span><span class=\"n\">Counter</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">[:</span><span class=\"n\">lp</span><span class=\"p\">]))</span>\n        <span class=\"n\">indeces</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n        <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"n\">ls</span> <span class=\"o\">-</span> <span class=\"n\">lp</span><span class=\"p\">):</span>\n            <span class=\"k\">if</span> <span class=\"n\">cp</span> <span class=\"o\">==</span> <span class=\"n\">cw</span><span class=\"p\">:</span>\n                <span class=\"n\">indeces</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">)</span>\n            <span class=\"k\">if</span> <span class=\"n\">s</span><span class=\"p\">[</span><span class=\"n\">lp</span><span class=\"o\">+</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">!=</span> <span class=\"n\">s</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]:</span>\n                <span class=\"n\">cw</span><span class=\"p\">[</span><span class=\"n\">s</span><span class=\"p\">[</span><span class=\"n\">lp</span><span class=\"o\">+</span><span class=\"n\">i</span><span class=\"p\">]]</span> <span class=\"o\">+=</span> <span class=\"mi\">1</span>\n                <span class=\"n\">cw</span><span class=\"p\">[</span><span class=\"n\">s</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]]</span> <span class=\"o\">-=</span> <span class=\"mi\">1</span>\n        <span class=\"k\">if</span> <span class=\"n\">cp</span> <span class=\"o\">==</span> <span class=\"n\">cw</span><span class=\"p\">:</span>\n            <span class=\"n\">indeces</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">indeces</span>\n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "Post-Lunch Prep (PLP)",
            "flags": [
                "read",
                "historical"
            ],
            "id": 148064078,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 183179,
            "sender_email": "aaron_wood@protonmail.com",
            "sender_full_name": "Aaron Wood (he) (F1'18)",
            "sender_id": 125145,
            "sender_realm_str": "recurse",
            "stream_id": 144212,
            "subject": "Tuesday, 20 Nov 2018",
            "submessages": [],
            "timestamp": 1542744384,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/6145d0683a46b1516d14fa79f4980dfa1143bdcc?x=x&version=9",
            "client": "website",
            "content": "<p>reorganize string  (100th percentile!!)</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">collections</span> <span class=\"k\">import</span> <span class=\"n\">Counter</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">Solution</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"nf\">reorganizeString</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">S</span><span class=\"p\">):</span>\n        <span class=\"n\">c</span> <span class=\"o\">=</span> <span class=\"n\">Counter</span><span class=\"p\">(</span><span class=\"n\">S</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"mi\">2</span> <span class=\"o\">*</span> <span class=\"nb\">max</span><span class=\"p\">(</span><span class=\"n\">c</span><span class=\"o\">.</span><span class=\"n\">values</span><span class=\"p\">())</span> <span class=\"o\">&gt;</span> <span class=\"nb\">sum</span><span class=\"p\">(</span><span class=\"n\">c</span><span class=\"o\">.</span><span class=\"n\">values</span><span class=\"p\">())</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"s1\">&#39;&#39;</span>\n\n        <span class=\"n\">counts</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"n\">v</span> <span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"n\">k</span> <span class=\"k\">for</span> <span class=\"n\">k</span> <span class=\"ow\">in</span> <span class=\"n\">c</span><span class=\"o\">.</span><span class=\"n\">keys</span><span class=\"p\">()</span> <span class=\"k\">if</span> <span class=\"n\">c</span><span class=\"p\">[</span><span class=\"n\">k</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"n\">v</span><span class=\"p\">]</span> <span class=\"k\">for</span> <span class=\"n\">v</span> <span class=\"ow\">in</span> <span class=\"n\">c</span><span class=\"o\">.</span><span class=\"n\">values</span><span class=\"p\">()}</span>\n        <span class=\"n\">good_vals</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">v</span> <span class=\"k\">for</span> <span class=\"n\">v</span><span class=\"p\">,</span> <span class=\"n\">k</span> <span class=\"ow\">in</span> <span class=\"n\">counts</span><span class=\"o\">.</span><span class=\"n\">items</span><span class=\"p\">()</span> <span class=\"k\">if</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">k</span><span class=\"p\">)</span> <span class=\"o\">&gt;</span> <span class=\"mi\">1</span><span class=\"p\">]</span>\n        <span class=\"n\">bad_vals</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">v</span> <span class=\"k\">for</span> <span class=\"n\">v</span> <span class=\"ow\">in</span> <span class=\"n\">counts</span><span class=\"o\">.</span><span class=\"n\">keys</span><span class=\"p\">()</span> <span class=\"k\">if</span> <span class=\"n\">v</span> <span class=\"ow\">not</span> <span class=\"ow\">in</span> <span class=\"n\">good_vals</span><span class=\"p\">]</span>\n\n        <span class=\"n\">string</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;&#39;</span>\n        <span class=\"k\">for</span> <span class=\"n\">v</span> <span class=\"ow\">in</span> <span class=\"nb\">sorted</span><span class=\"p\">(</span><span class=\"n\">good_vals</span><span class=\"p\">):</span>\n            <span class=\"n\">string</span> <span class=\"o\">+=</span> <span class=\"s1\">&#39;&#39;</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">counts</span><span class=\"p\">[</span><span class=\"n\">v</span><span class=\"p\">])</span> <span class=\"o\">*</span> <span class=\"n\">v</span>\n        <span class=\"k\">for</span> <span class=\"n\">v</span> <span class=\"ow\">in</span> <span class=\"nb\">sorted</span><span class=\"p\">(</span><span class=\"n\">bad_vals</span><span class=\"p\">):</span>\n            <span class=\"n\">string</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">merge</span><span class=\"p\">(</span><span class=\"n\">string</span><span class=\"p\">,</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">string</span><span class=\"p\">),</span> <span class=\"n\">counts</span><span class=\"p\">[</span><span class=\"n\">v</span><span class=\"p\">][</span><span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"n\">v</span><span class=\"p\">)</span>\n\n        <span class=\"k\">return</span> <span class=\"n\">string</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">merge</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">string</span><span class=\"p\">,</span> <span class=\"n\">len_str</span><span class=\"p\">,</span> <span class=\"n\">ch</span><span class=\"p\">,</span> <span class=\"n\">num_ch</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"s1\">&#39;&#39;</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">([</span><span class=\"n\">ch</span> <span class=\"o\">+</span> <span class=\"n\">s</span> <span class=\"k\">for</span> <span class=\"n\">s</span> <span class=\"ow\">in</span> <span class=\"n\">string</span><span class=\"p\">[:</span><span class=\"n\">num_ch</span><span class=\"p\">]])</span> \\\n                <span class=\"o\">+</span> <span class=\"p\">(</span><span class=\"n\">ch</span> <span class=\"o\">*</span> <span class=\"p\">(</span><span class=\"n\">num_ch</span> <span class=\"o\">-</span> <span class=\"n\">len_str</span><span class=\"p\">))</span> \\\n                <span class=\"o\">+</span> <span class=\"n\">string</span><span class=\"p\">[</span><span class=\"n\">num_ch</span><span class=\"p\">:]</span>\n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "Post-Lunch Prep (PLP)",
            "flags": [
                "read",
                "historical"
            ],
            "id": 148077170,
            "is_me_message": false,
            "last_edit_timestamp": 1542757710,
            "reactions": [
                {
                    "emoji_code": "1f680",
                    "emoji_name": "rocket",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "arpith@feedreader.co",
                        "full_name": "Arpith Siromoney (he) (m6'20)",
                        "id": 9503
                    },
                    "user_id": 9503
                },
                {
                    "emoji_code": "1f680",
                    "emoji_name": "rocket",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "mattg@leema.org",
                        "full_name": "Matthew Graham (he) (F1'18)",
                        "id": 125276
                    },
                    "user_id": 125276
                }
            ],
            "recipient_id": 183179,
            "sender_email": "aaron_wood@protonmail.com",
            "sender_full_name": "Aaron Wood (he) (F1'18)",
            "sender_id": 125145,
            "sender_realm_str": "recurse",
            "stream_id": 144212,
            "subject": "Tuesday, 20 Nov 2018",
            "submessages": [],
            "timestamp": 1542757348,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/46fc5295ff53a9173234c8c6bd09c245?d=identicon&version=1",
            "client": "ZulipElectron",
            "content": "<p>Hi <span class=\"user-mention\" data-user-id=\"*\">@all</span> </p>\n<p>Welcome to today's PLP. The problems will be projected in the presentation space after lunch time. <br>\nIf you are interested in <strong>pairing</strong>, come to the presentation space at <strong> 1:45</strong> to find a partner. <br>\nIf you are interested in <strong>discussing afterwards</strong>, come to the presentation space at <strong>2:45</strong>.</p>\n<p>Today's problems are from the <a href=\"#narrow/stream/27513-interview-prep/subject/Recent.20Questions/near/148239715\" title=\"#narrow/stream/27513-interview-prep/subject/Recent.20Questions/near/148239715\">list of recently encontered real-world interview problems</a>, started by Eric Perrotta:<br>\n<a href=\"https://leetcode.com/problems/friend-circles/description/\" target=\"_blank\" title=\"https://leetcode.com/problems/friend-circles/description/\">https://leetcode.com/problems/friend-circles/description/</a> (medium) <br>\n<a href=\"https://leetcode.com/problems/maximum-sum-circular-subarray/description/\" target=\"_blank\" title=\"https://leetcode.com/problems/maximum-sum-circular-subarray/description/\">https://leetcode.com/problems/maximum-sum-circular-subarray/description/</a> (medium)</p>\n<p>Host: <span class=\"user-mention\" data-user-id=\"129939\">@Marina Inina (F2'18)</span>  (Contact me if you have any questions, concerns, or feedback.)</p>",
            "content_type": "text/html",
            "display_recipient": "Post-Lunch Prep (PLP)",
            "flags": [
                "read",
                "historical"
            ],
            "id": 148384354,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 183179,
            "sender_email": "nekanek@protonmail.com",
            "sender_full_name": "Marina Inina (she) (F2'18)",
            "sender_id": 129939,
            "sender_realm_str": "recurse",
            "stream_id": 144212,
            "subject": "Monday, 26 Nov 2018",
            "submessages": [],
            "timestamp": 1543254665,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/927039f8a9a749e3be410a6969f8e2e8175cedf4?x=x&version=2",
            "client": "website",
            "content": "<div class=\"codehilite\"><pre><span></span>class Solution:\n    def maxSubarraySumCircular(self, A):\n        &quot;&quot;&quot;\n        :type A: List[int]\n        :rtype: int\n        &quot;&quot;&quot;\n        # preprocess the array\n        B = []\n\n        subsum = 0\n        def get_sign(i):\n            if i &gt; 0:\n                return 1\n            if i &lt; 0:\n                return -1\n            else:\n                return 0\n\n        current_sign = get_sign(A[0])\n        subsum = A[0]\n\n        for i in range(1, len(A)):\n            if A[i] == 0:\n                pass\n            if get_sign(A[i]) == current_sign:\n                subsum += A[i]\n            else:\n                B.append(subsum)\n                current_sign = get_sign(A[i])\n                subsum = A[i]\n        B.append(subsum)\n        # print(B)\n\n        if not len(B):\n            return 0\n\n        if len(B) == 1 and current_sign == -1:\n            return max(A)\n\n        # the pre-processed &quot;condensed&quot; array\n        A = B[:]\n\n        # running sum method\n        n = len(A)\n        # print(n)\n        best = max(A)\n        A = A + A\n        for L in range(1, n + 1):\n            s = sum(A[:L])\n            best = max(best, s)\n            j = 0\n            while j &lt; n:\n                s -= A[j]\n                s += A[j + L]\n                best = max(best, s)\n                j += 1\n        return best\n  ```\n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "Post-Lunch Prep (PLP)",
            "flags": [
                "read",
                "historical"
            ],
            "id": 148393723,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 183179,
            "sender_email": "gretchen.m.wright@gmail.com",
            "sender_full_name": "Gretchen Wright (she) (F2'18)",
            "sender_id": 130181,
            "sender_realm_str": "recurse",
            "stream_id": 144212,
            "subject": "Monday, 26 Nov 2018",
            "submessages": [],
            "timestamp": 1543262272,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/17cc9e2bc66dfd8fa02944eb84c6c1aba10235e0?x=x&version=2",
            "client": "website",
            "content": "<p>On Leetcode there are categories of problems besides the algorithm problems. These include problems related to designing large pieces of software. Rather than code the entire program, you are asked to come up with a high level design. For example, here is one such problem where you are asked to design a Chess Program (asked at an amazon interview): <br>\n<a href=\"https://leetcode.com/discuss/interview-question/124564/Design-a-chess-game/\" target=\"_blank\" title=\"https://leetcode.com/discuss/interview-question/124564/Design-a-chess-game/\">https://leetcode.com/discuss/interview-question/124564/Design-a-chess-game/</a><br>\nWould anyone be interested in working on some of these problems in pairs or a larger group?</p>",
            "content_type": "text/html",
            "display_recipient": "Post-Lunch Prep (PLP)",
            "flags": [
                "read",
                "historical"
            ],
            "id": 148398012,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 183179,
            "sender_email": "doug012310@yahoo.com",
            "sender_full_name": "Douglas Lerner (he) (W1'18)",
            "sender_id": 134181,
            "sender_realm_str": "recurse",
            "stream_id": 144212,
            "subject": "Software design problem prep?",
            "submessages": [],
            "timestamp": 1543266071,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/1fdd84a57c15f7ecfdded3d0c32019ad32f8af5d?x=x&version=5",
            "client": "website",
            "content": "<p>friends</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">class</span> <span class=\"nc\">Solution</span><span class=\"p\">(</span><span class=\"nb\">object</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"nf\">findCircleNum</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">M</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">        :type M: List[List[int]]</span>\n<span class=\"sd\">        :rtype: int</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"n\">visited</span> <span class=\"o\">=</span> <span class=\"nb\">set</span><span class=\"p\">()</span>\n        <span class=\"n\">count</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n        <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">M</span><span class=\"p\">)):</span>\n            <span class=\"k\">if</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"n\">visited</span><span class=\"p\">:</span>\n                <span class=\"k\">continue</span>\n            <span class=\"n\">count</span> <span class=\"o\">+=</span> <span class=\"mi\">1</span>\n            <span class=\"n\">stack</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span>\n            <span class=\"k\">while</span> <span class=\"n\">stack</span><span class=\"p\">:</span>\n                <span class=\"n\">node</span> <span class=\"o\">=</span> <span class=\"n\">stack</span><span class=\"o\">.</span><span class=\"n\">pop</span><span class=\"p\">()</span>\n                <span class=\"n\">visited</span><span class=\"o\">.</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"n\">node</span><span class=\"p\">)</span>\n                <span class=\"n\">stack</span><span class=\"o\">.</span><span class=\"n\">extend</span><span class=\"p\">(</span><span class=\"n\">j</span> <span class=\"k\">for</span> <span class=\"n\">j</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">M</span><span class=\"p\">))</span> <span class=\"k\">if</span> <span class=\"n\">M</span><span class=\"p\">[</span><span class=\"n\">node</span><span class=\"p\">][</span><span class=\"n\">j</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"mi\">1</span> <span class=\"ow\">and</span> <span class=\"n\">j</span> <span class=\"ow\">not</span> <span class=\"ow\">in</span> <span class=\"n\">visited</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">count</span>\n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "Post-Lunch Prep (PLP)",
            "flags": [
                "read",
                "historical"
            ],
            "id": 148398214,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 183179,
            "sender_email": "arpith@feedreader.co",
            "sender_full_name": "Arpith Siromoney (he) (m6'20)",
            "sender_id": 9503,
            "sender_realm_str": "recurse",
            "stream_id": 144212,
            "subject": "Monday, 26 Nov 2018",
            "submessages": [],
            "timestamp": 1543266272,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/8f3e3f13689ac077fe4ae537e33bde345a57cb22?x=x&version=2",
            "client": "website",
            "content": "<p>It looks like these are basically \"essay\" questions?</p>",
            "content_type": "text/html",
            "display_recipient": "Post-Lunch Prep (PLP)",
            "flags": [
                "read",
                "historical"
            ],
            "id": 148399084,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 183179,
            "sender_email": "recurse@ardent.nebcorp.com",
            "sender_full_name": "Joe Ardent (he) (SP1'17)",
            "sender_id": 9097,
            "sender_realm_str": "recurse",
            "stream_id": 144212,
            "subject": "Software design problem prep?",
            "submessages": [],
            "timestamp": 1543267239,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/a56e927f8f7f420f54cff1269ba6c92b38c84669?x=x&version=2",
            "client": "website",
            "content": "<p>Sounds like a fun exercise. I'd be interested in taking part.</p>",
            "content_type": "text/html",
            "display_recipient": "Post-Lunch Prep (PLP)",
            "flags": [
                "read",
                "historical"
            ],
            "id": 148399983,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 183179,
            "sender_email": "joshrider@gmail.com",
            "sender_full_name": "Joshua Rider (he) (F2'18)",
            "sender_id": 129927,
            "sender_realm_str": "recurse",
            "stream_id": 144212,
            "subject": "Software design problem prep?",
            "submessages": [],
            "timestamp": 1543268252,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/17cc9e2bc66dfd8fa02944eb84c6c1aba10235e0?x=x&version=2",
            "client": "website",
            "content": "<p>when is a good time? It seems that most people's schedules are pretty packed. Are you around on Friday?</p>",
            "content_type": "text/html",
            "display_recipient": "Post-Lunch Prep (PLP)",
            "flags": [
                "read",
                "historical"
            ],
            "id": 148412139,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 183179,
            "sender_email": "doug012310@yahoo.com",
            "sender_full_name": "Douglas Lerner (he) (W1'18)",
            "sender_id": 134181,
            "sender_realm_str": "recurse",
            "stream_id": 144212,
            "subject": "Software design problem prep?",
            "submessages": [],
            "timestamp": 1543282319,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4d02236bda71051fd87885a63cb27a5b?d=identicon&version=1",
            "client": "ZulipElectron",
            "content": "<p>Hi @all</p>\n<p>Welcome to today's PLP. The problems will be projected in the presentation space after lunch time. <br>\nIf you are interested in pairing, come to the presentation space at 1:45 to find a partner. <br>\nIf you are interested in discussing afterwards, come to the presentation space at 2:45.</p>\n<p>Today's problems are about dynamic programming:  <a href=\"https://www.topcoder.com/community/competitive-programming/tutorials/dynamic-programming-from-novice-to-advanced/\" target=\"_blank\" title=\"https://www.topcoder.com/community/competitive-programming/tutorials/dynamic-programming-from-novice-to-advanced/\">https://www.topcoder.com/community/competitive-programming/tutorials/dynamic-programming-from-novice-to-advanced/</a></p>\n<p>Problems: <br>\n<a href=\"https://leetcode.com/problems/best-time-to-buy-and-sell-stock/description/\" target=\"_blank\" title=\"https://leetcode.com/problems/best-time-to-buy-and-sell-stock/description/\">https://leetcode.com/problems/best-time-to-buy-and-sell-stock/description/</a> (easy)<br>\n<a href=\"https://leetcode.com/problems/stone-game/description/\" target=\"_blank\" title=\"https://leetcode.com/problems/stone-game/description/\">https://leetcode.com/problems/stone-game/description/</a> (medium)</p>\n<p>Host: <span class=\"user-mention\" data-user-id=\"130084\">@Sonja Lea Heinze (F2'18)</span>  (Contact me if you have any questions, concerns, or feedback.)</p>",
            "content_type": "text/html",
            "display_recipient": "Post-Lunch Prep (PLP)",
            "flags": [
                "read",
                "historical"
            ],
            "id": 148652326,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 183179,
            "sender_email": "sonjaleaheinze@gmail.com",
            "sender_full_name": "Sonja Lea Heinze (she) (F2'18)",
            "sender_id": 130084,
            "sender_realm_str": "recurse",
            "stream_id": 144212,
            "subject": "Tuesday, 27 Nov 2018",
            "submessages": [],
            "timestamp": 1543338623,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/927039f8a9a749e3be410a6969f8e2e8175cedf4?x=x&version=2",
            "client": "website",
            "content": "<p>Hi <span class=\"user-mention\" data-user-id=\"*\">@all</span> </p>\n<p>Welcome to today's PLP. The problems will be projected in the presentation space after lunch time. <br>\nIf you are interested in pairing, come to the presentation space at 1:45 to find a partner. <br>\nIf you are interested in discussing afterwards, come to the presentation space at 2:45.</p>\n<p>Today's problems are both related to path sums. <br>\nReference for the first problem: depth first search: <a href=\"https://www.hackerearth.com/practice/algorithms/graphs/depth-first-search/tutorial/\" target=\"_blank\" title=\"https://www.hackerearth.com/practice/algorithms/graphs/depth-first-search/tutorial/\">https://www.hackerearth.com/practice/algorithms/graphs/depth-first-search/tutorial/</a><br>\nReference for the second problem:  dynamic programming: <a href=\"https://www.topcoder.com/community/competitive-programming/tutorials/dynamic-programming-from-novice-to-advanced/\" target=\"_blank\" title=\"https://www.topcoder.com/community/competitive-programming/tutorials/dynamic-programming-from-novice-to-advanced/\">https://www.topcoder.com/community/competitive-programming/tutorials/dynamic-programming-from-novice-to-advanced/</a></p>\n<p>Problems: <br>\n<a href=\"https://leetcode.com/problems/path-sum/description/\" target=\"_blank\" title=\"https://leetcode.com/problems/path-sum/description/\">https://leetcode.com/problems/path-sum/description/</a> (easy)<br>\n<a href=\"https://leetcode.com/problems/minimum-falling-path-sum/description/\" target=\"_blank\" title=\"https://leetcode.com/problems/minimum-falling-path-sum/description/\">https://leetcode.com/problems/minimum-falling-path-sum/description/</a> (medium)</p>\n<p>Host: <span class=\"user-mention\" data-user-id=\"130181\">@Gretchen Wright (F2'18)</span>  (Contact me if you have any questions, concerns, or feedback.)</p>",
            "content_type": "text/html",
            "display_recipient": "Post-Lunch Prep (PLP)",
            "flags": [
                "read",
                "historical"
            ],
            "id": 148723519,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 183179,
            "sender_email": "gretchen.m.wright@gmail.com",
            "sender_full_name": "Gretchen Wright (she) (F2'18)",
            "sender_id": 130181,
            "sender_realm_str": "recurse",
            "stream_id": 144212,
            "subject": "Wednesday, 28 Nov 2018",
            "submessages": [],
            "timestamp": 1543422043,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/1fdd84a57c15f7ecfdded3d0c32019ad32f8af5d?x=x&version=5",
            "client": "website",
            "content": "<p>path sum</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">class</span> <span class=\"nc\">Solution</span><span class=\"p\">(</span><span class=\"nb\">object</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"nf\">hasPathSum</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">root</span><span class=\"p\">,</span> <span class=\"nb\">sum</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">        :type root: TreeNode</span>\n<span class=\"sd\">        :type sum: int</span>\n<span class=\"sd\">        :rtype: bool</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">root</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"bp\">False</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">root</span><span class=\"o\">.</span><span class=\"n\">left</span> <span class=\"ow\">and</span> <span class=\"ow\">not</span> <span class=\"n\">root</span><span class=\"o\">.</span><span class=\"n\">right</span> <span class=\"ow\">and</span> <span class=\"nb\">sum</span> <span class=\"o\">==</span> <span class=\"n\">root</span><span class=\"o\">.</span><span class=\"n\">val</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"bp\">True</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">hasPathSum</span><span class=\"p\">(</span><span class=\"n\">root</span><span class=\"o\">.</span><span class=\"n\">left</span><span class=\"p\">,</span> <span class=\"nb\">sum</span> <span class=\"o\">-</span> <span class=\"n\">root</span><span class=\"o\">.</span><span class=\"n\">val</span><span class=\"p\">)</span> <span class=\"ow\">or</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">hasPathSum</span><span class=\"p\">(</span><span class=\"n\">root</span><span class=\"o\">.</span><span class=\"n\">right</span><span class=\"p\">,</span> <span class=\"nb\">sum</span> <span class=\"o\">-</span> <span class=\"n\">root</span><span class=\"o\">.</span><span class=\"n\">val</span><span class=\"p\">)</span>\n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "Post-Lunch Prep (PLP)",
            "flags": [
                "read",
                "historical"
            ],
            "id": 148728802,
            "is_me_message": false,
            "last_edit_timestamp": 1543426447,
            "reactions": [
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "+1",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "aaron_wood@protonmail.com",
                        "full_name": "Aaron Wood (he) (F1'18)",
                        "id": 125145
                    },
                    "user_id": 125145
                }
            ],
            "recipient_id": 183179,
            "sender_email": "arpith@feedreader.co",
            "sender_full_name": "Arpith Siromoney (he) (m6'20)",
            "sender_id": 9503,
            "sender_realm_str": "recurse",
            "stream_id": 144212,
            "subject": "Wednesday, 28 Nov 2018",
            "submessages": [],
            "timestamp": 1543426439,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/1fdd84a57c15f7ecfdded3d0c32019ad32f8af5d?x=x&version=5",
            "client": "website",
            "content": "<p>falling path</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">class</span> <span class=\"nc\">Solution</span><span class=\"p\">(</span><span class=\"nb\">object</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"nf\">minSum</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"n\">j</span><span class=\"p\">):</span>\n        <span class=\"k\">if</span> <span class=\"n\">j</span> <span class=\"o\">&lt;</span> <span class=\"mi\">0</span> <span class=\"ow\">or</span> <span class=\"n\">j</span> <span class=\"o\">&gt;=</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">A</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]):</span>\n            <span class=\"k\">return</span> <span class=\"nb\">float</span><span class=\"p\">(</span><span class=\"s1\">&#39;inf&#39;</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"n\">i</span> <span class=\"o\">==</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">A</span><span class=\"p\">)</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">A</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">][</span><span class=\"n\">j</span><span class=\"p\">]</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"n\">j</span><span class=\"p\">)</span> <span class=\"ow\">not</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">table</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">table</span><span class=\"p\">[(</span><span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"n\">j</span><span class=\"p\">)]</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">A</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">][</span><span class=\"n\">j</span><span class=\"p\">]</span> <span class=\"o\">+</span> <span class=\"nb\">min</span><span class=\"p\">(</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">minSum</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"n\">j</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">),</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">minSum</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"n\">j</span><span class=\"p\">),</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">minSum</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"n\">j</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"p\">))</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">table</span><span class=\"p\">[(</span><span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"n\">j</span><span class=\"p\">)]</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">minFallingPathSum</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">A</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">        :type A: List[List[int]]</span>\n<span class=\"sd\">        :rtype: int</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">A</span> <span class=\"o\">=</span> <span class=\"n\">A</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">table</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>\n        <span class=\"k\">return</span> <span class=\"nb\">min</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">minSum</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">j</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">j</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">A</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">])))</span>\n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "Post-Lunch Prep (PLP)",
            "flags": [
                "read",
                "historical"
            ],
            "id": 148729362,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 183179,
            "sender_email": "arpith@feedreader.co",
            "sender_full_name": "Arpith Siromoney (he) (m6'20)",
            "sender_id": 9503,
            "sender_realm_str": "recurse",
            "stream_id": 144212,
            "subject": "Wednesday, 28 Nov 2018",
            "submessages": [],
            "timestamp": 1543427007,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/1fdd84a57c15f7ecfdded3d0c32019ad32f8af5d?x=x&version=5",
            "client": "website",
            "content": "<p>a different approach to falling path</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">class</span> <span class=\"nc\">Solution</span><span class=\"p\">(</span><span class=\"nb\">object</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"nf\">minStep</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">row</span><span class=\"p\">):</span>\n        <span class=\"n\">ext</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"nb\">float</span><span class=\"p\">(</span><span class=\"s1\">&#39;inf&#39;</span><span class=\"p\">)]</span> <span class=\"o\">+</span> <span class=\"n\">row</span> <span class=\"o\">+</span> <span class=\"p\">[</span><span class=\"nb\">float</span><span class=\"p\">(</span><span class=\"s1\">&#39;inf&#39;</span><span class=\"p\">)]</span>\n        <span class=\"k\">return</span> <span class=\"p\">[</span><span class=\"nb\">min</span><span class=\"p\">(</span><span class=\"n\">ext</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">:</span><span class=\"n\">i</span><span class=\"o\">+</span><span class=\"mi\">3</span><span class=\"p\">])</span> <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">ext</span><span class=\"p\">)</span><span class=\"o\">-</span><span class=\"mi\">2</span><span class=\"p\">)]</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">minFallingPathSum</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">A</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">        :type A: List[List[int]]</span>\n<span class=\"sd\">        :rtype: int</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"n\">mins</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n        <span class=\"k\">for</span> <span class=\"n\">row</span> <span class=\"ow\">in</span> <span class=\"n\">A</span><span class=\"p\">[::</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">]:</span>\n            <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">mins</span><span class=\"p\">:</span>\n                <span class=\"n\">mins</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">row</span><span class=\"p\">)</span>\n            <span class=\"k\">else</span><span class=\"p\">:</span>\n                <span class=\"n\">step</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">minStep</span><span class=\"p\">(</span><span class=\"n\">mins</span><span class=\"p\">[</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">])</span>\n                <span class=\"n\">curr</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">j1</span> <span class=\"o\">+</span> <span class=\"n\">j2</span> <span class=\"k\">for</span> <span class=\"n\">j1</span><span class=\"p\">,</span> <span class=\"n\">j2</span> <span class=\"ow\">in</span> <span class=\"nb\">zip</span><span class=\"p\">(</span><span class=\"n\">step</span><span class=\"p\">,</span> <span class=\"n\">row</span><span class=\"p\">)]</span>\n                <span class=\"n\">mins</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">curr</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"nb\">min</span><span class=\"p\">(</span><span class=\"n\">mins</span><span class=\"p\">[</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">])</span>\n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "Post-Lunch Prep (PLP)",
            "flags": [
                "read",
                "historical"
            ],
            "id": 148731904,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 183179,
            "sender_email": "arpith@feedreader.co",
            "sender_full_name": "Arpith Siromoney (he) (m6'20)",
            "sender_id": 9503,
            "sender_realm_str": "recurse",
            "stream_id": 144212,
            "subject": "Wednesday, 28 Nov 2018",
            "submessages": [],
            "timestamp": 1543429461,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/8f3e3f13689ac077fe4ae537e33bde345a57cb22?x=x&version=2",
            "client": "website",
            "content": "<p>iterative pathsum:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">class</span> <span class=\"nc\">Solution</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"nf\">hasPathSum</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">root</span><span class=\"p\">,</span> <span class=\"n\">sum_</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">        :type root: TreeNode</span>\n<span class=\"sd\">        :type sum: int</span>\n<span class=\"sd\">        :rtype: bool</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"n\">todo</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">root</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n            <span class=\"n\">todo</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">((</span><span class=\"n\">root</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">))</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"kc\">False</span>\n        <span class=\"n\">haspath</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>\n        <span class=\"k\">while</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">todo</span><span class=\"p\">)</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span> <span class=\"ow\">and</span> <span class=\"ow\">not</span> <span class=\"n\">haspath</span><span class=\"p\">:</span>\n            <span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">,</span> <span class=\"n\">v</span><span class=\"p\">)</span> <span class=\"o\">=</span> <span class=\"n\">todo</span><span class=\"o\">.</span><span class=\"n\">pop</span><span class=\"p\">()</span>\n            <span class=\"n\">cur_val</span> <span class=\"o\">=</span> <span class=\"n\">v</span> <span class=\"o\">+</span> <span class=\"n\">n</span><span class=\"o\">.</span><span class=\"n\">val</span>\n            <span class=\"n\">hasleft</span> <span class=\"o\">=</span> <span class=\"ow\">not</span> <span class=\"n\">n</span><span class=\"o\">.</span><span class=\"n\">left</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span>\n            <span class=\"n\">hasright</span> <span class=\"o\">=</span> <span class=\"ow\">not</span> <span class=\"n\">n</span><span class=\"o\">.</span><span class=\"n\">right</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span>\n            <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"p\">(</span><span class=\"n\">hasleft</span> <span class=\"ow\">or</span> <span class=\"n\">hasright</span><span class=\"p\">):</span>\n                <span class=\"n\">haspath</span> <span class=\"o\">=</span> <span class=\"n\">cur_val</span> <span class=\"o\">==</span> <span class=\"n\">sum_</span>\n            <span class=\"k\">if</span> <span class=\"n\">hasright</span><span class=\"p\">:</span>\n                <span class=\"n\">todo</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">((</span><span class=\"n\">n</span><span class=\"o\">.</span><span class=\"n\">right</span><span class=\"p\">,</span> <span class=\"n\">cur_val</span><span class=\"p\">))</span>\n            <span class=\"k\">if</span> <span class=\"n\">hasleft</span><span class=\"p\">:</span>\n                <span class=\"n\">todo</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">((</span><span class=\"n\">n</span><span class=\"o\">.</span><span class=\"n\">left</span><span class=\"p\">,</span> <span class=\"n\">cur_val</span><span class=\"p\">))</span>\n        <span class=\"k\">return</span> <span class=\"n\">haspath</span>\n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "Post-Lunch Prep (PLP)",
            "flags": [
                "read",
                "historical"
            ],
            "id": 148740665,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 183179,
            "sender_email": "recurse@ardent.nebcorp.com",
            "sender_full_name": "Joe Ardent (he) (SP1'17)",
            "sender_id": 9097,
            "sender_realm_str": "recurse",
            "stream_id": 144212,
            "subject": "Wednesday, 28 Nov 2018",
            "submessages": [],
            "timestamp": 1543436781,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/63b77375e584014392d0b8ae86b020d1?d=identicon&version=1",
            "client": "website",
            "content": "<p>Problem 112</p>\n<div class=\"codehilite\"><pre><span></span>#lang racket\n\n(struct node (value left right))\n\n(define (hasPath target root)\n\n  (if (null? root)\n    #f\n    (let ([newSum (- target (node-value root))])\n    (if (and (null? (node-left root)) (null? (node-right root)))\n      (eq? newSum 0)\n      (or (hasPath newSum (node-left root)) (hasPath newSum (node-right root)))))))\n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "Post-Lunch Prep (PLP)",
            "flags": [
                "read",
                "historical"
            ],
            "id": 148741722,
            "is_me_message": false,
            "last_edit_timestamp": 1543437873,
            "reactions": [
                {
                    "emoji_code": "1100",
                    "emoji_name": "lambda",
                    "reaction_type": "realm_emoji",
                    "user": {
                        "email": "chunli.developer@gmail.com",
                        "full_name": "Chun Li (he) (F2'18)",
                        "id": 129956
                    },
                    "user_id": 129956
                },
                {
                    "emoji_code": "1100",
                    "emoji_name": "lambda",
                    "reaction_type": "realm_emoji",
                    "user": {
                        "email": "recurse@ardent.nebcorp.com",
                        "full_name": "Joe Ardent (he) (SP1'17)",
                        "id": 9097
                    },
                    "user_id": 9097
                }
            ],
            "recipient_id": 183179,
            "sender_email": "ratan.r.sur@gmail.com",
            "sender_full_name": "Ratan (Rai) Sur (he) (SP1'19)",
            "sender_id": 129931,
            "sender_realm_str": "recurse",
            "stream_id": 144212,
            "subject": "Wednesday, 28 Nov 2018",
            "submessages": [],
            "timestamp": 1543437844,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/1316da00218a425032fe2e4a5a1bf125?d=identicon&version=1",
            "client": "website",
            "content": "<p>Racket solution for Problem 931 (relies on the given constraints in the problem):</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">#lang </span><span class=\"nn\">racket</span>\n\n<span class=\"p\">(</span><span class=\"k\">define</span> <span class=\"p\">(</span><span class=\"n\">min-falling-path</span> <span class=\"n\">paths</span><span class=\"p\">)</span>\n  <span class=\"p\">(</span><span class=\"k\">define</span> <span class=\"p\">(</span><span class=\"n\">minimize</span> <span class=\"n\">prev</span> <span class=\"n\">items</span><span class=\"p\">)</span>\n    <span class=\"p\">(</span><span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nb\">null?</span> <span class=\"p\">(</span><span class=\"nb\">cdr</span> <span class=\"n\">items</span><span class=\"p\">))</span>\n        <span class=\"p\">(</span><span class=\"nb\">list</span> <span class=\"p\">(</span><span class=\"nb\">min</span> <span class=\"n\">prev</span> <span class=\"p\">(</span><span class=\"nb\">car</span> <span class=\"n\">items</span><span class=\"p\">)))</span>\n        <span class=\"p\">(</span><span class=\"nb\">cons</span> <span class=\"p\">(</span><span class=\"nb\">min</span> <span class=\"n\">prev</span> <span class=\"p\">(</span><span class=\"nb\">car</span> <span class=\"n\">items</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"nb\">cadr</span> <span class=\"n\">items</span><span class=\"p\">))</span>\n              <span class=\"p\">(</span><span class=\"n\">minimize</span> <span class=\"p\">(</span><span class=\"nb\">car</span> <span class=\"n\">items</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"nb\">cdr</span> <span class=\"n\">items</span><span class=\"p\">)))))</span>\n  <span class=\"p\">(</span><span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nb\">null?</span> <span class=\"p\">(</span><span class=\"nb\">cdr</span> <span class=\"n\">paths</span><span class=\"p\">))</span>\n      <span class=\"p\">(</span><span class=\"nb\">apply</span> <span class=\"nb\">min</span> <span class=\"p\">(</span><span class=\"nb\">car</span> <span class=\"n\">paths</span><span class=\"p\">))</span>\n      <span class=\"p\">(</span><span class=\"n\">min-falling-path</span> <span class=\"p\">(</span><span class=\"nb\">cons</span> <span class=\"p\">(</span><span class=\"nb\">map</span> <span class=\"nb\">+</span> <span class=\"p\">(</span><span class=\"n\">minimize</span> <span class=\"mi\">101</span> <span class=\"p\">(</span><span class=\"nb\">car</span> <span class=\"n\">paths</span><span class=\"p\">))</span> <span class=\"p\">(</span><span class=\"nb\">cadr</span> <span class=\"n\">paths</span><span class=\"p\">))</span>\n                              <span class=\"p\">(</span><span class=\"nb\">cddr</span> <span class=\"n\">paths</span><span class=\"p\">)))))</span>\n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "Post-Lunch Prep (PLP)",
            "flags": [
                "read",
                "historical"
            ],
            "id": 148742670,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 183179,
            "sender_email": "billy1kaplan@gmail.com",
            "sender_full_name": "Billy Kaplan (he) (W1'18)",
            "sender_id": 134184,
            "sender_realm_str": "recurse",
            "stream_id": 144212,
            "subject": "Wednesday, 28 Nov 2018",
            "submessages": [],
            "timestamp": 1543438550,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/7da8f8ef20569f6876aeb1188d2ebb6d41c6f842?x=x&version=2",
            "client": "ZulipElectron",
            "content": "<p>Hi <span class=\"user-mention\" data-user-id=\"*\">@all</span> </p>\n<p>Welcome to today's PLP. The problems will be projected in the presentation space after lunch time. <br>\nIf you are interested in pairing, come to the presentation space at 1:45 to find a partner. <br>\nIf you are interested in discussing afterwards, come to the presentation space at 2:45.</p>\n<p>Today we are adding in a SQL problem because why not?</p>\n<p>Problems: <br>\nSQL!!!: <a href=\"https://leetcode.com/problems/department-top-three-salaries/description/\" target=\"_blank\" title=\"https://leetcode.com/problems/department-top-three-salaries/description/\">https://leetcode.com/problems/department-top-three-salaries/description/</a><br>\nLeft leaves of Binary Tree: <a href=\"https://leetcode.com/problems/sum-of-left-leaves/description/\" target=\"_blank\" title=\"https://leetcode.com/problems/sum-of-left-leaves/description/\">https://leetcode.com/problems/sum-of-left-leaves/description/</a></p>\n<p>Host: <span class=\"user-mention\" data-user-id=\"129934\">@Keenan Tsuruichi Komoto (F2'18)</span>  (Contact me if you have any questions, concerns, or feedback.)</p>",
            "content_type": "text/html",
            "display_recipient": "Post-Lunch Prep (PLP)",
            "flags": [
                "read",
                "historical"
            ],
            "id": 148798853,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 183179,
            "sender_email": "KeenanKomoto@gmail.com",
            "sender_full_name": "Keenan Tsuruichi Komoto (he) (F2'18)",
            "sender_id": 129934,
            "sender_realm_str": "recurse",
            "stream_id": 144212,
            "subject": "Thursday, 29 Nov 2018",
            "submessages": [],
            "timestamp": 1543509338,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/1fdd84a57c15f7ecfdded3d0c32019ad32f8af5d?x=x&version=5",
            "client": "website",
            "content": "<p>left leaves</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">class</span> <span class=\"nc\">Solution</span><span class=\"p\">(</span><span class=\"nb\">object</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"nf\">sumOfLeftLeaves</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">root</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">        :type root: TreeNode</span>\n<span class=\"sd\">        :rtype: int</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">root</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"mi\">0</span>\n        <span class=\"k\">if</span> <span class=\"n\">root</span><span class=\"o\">.</span><span class=\"n\">left</span> <span class=\"ow\">and</span> <span class=\"ow\">not</span> <span class=\"n\">root</span><span class=\"o\">.</span><span class=\"n\">left</span><span class=\"o\">.</span><span class=\"n\">left</span> <span class=\"ow\">and</span> <span class=\"ow\">not</span> <span class=\"n\">root</span><span class=\"o\">.</span><span class=\"n\">left</span><span class=\"o\">.</span><span class=\"n\">right</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"n\">root</span><span class=\"o\">.</span><span class=\"n\">left</span><span class=\"o\">.</span><span class=\"n\">val</span> <span class=\"o\">+</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">sumOfLeftLeaves</span><span class=\"p\">(</span><span class=\"n\">root</span><span class=\"o\">.</span><span class=\"n\">right</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">sumOfLeftLeaves</span><span class=\"p\">(</span><span class=\"n\">root</span><span class=\"o\">.</span><span class=\"n\">left</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">sumOfLeftLeaves</span><span class=\"p\">(</span><span class=\"n\">root</span><span class=\"o\">.</span><span class=\"n\">right</span><span class=\"p\">)</span>\n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "Post-Lunch Prep (PLP)",
            "flags": [
                "read",
                "historical"
            ],
            "id": 148799604,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 183179,
            "sender_email": "arpith@feedreader.co",
            "sender_full_name": "Arpith Siromoney (he) (m6'20)",
            "sender_id": 9503,
            "sender_realm_str": "recurse",
            "stream_id": 144212,
            "subject": "Thursday, 29 Nov 2018",
            "submessages": [],
            "timestamp": 1543510013,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/571b89a2b2bc0b41aaf28b6a11873fa06ce8f4d7?x=x&version=2",
            "client": "website",
            "content": "<p>Could you not post these spoilers until after PLP? :)</p>",
            "content_type": "text/html",
            "display_recipient": "Post-Lunch Prep (PLP)",
            "flags": [
                "read",
                "historical"
            ],
            "id": 148807714,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 183179,
            "sender_email": "jven@jvenezue.la",
            "sender_full_name": "Justin Venezuela (he) (W1'18)",
            "sender_id": 134311,
            "sender_realm_str": "recurse",
            "stream_id": 144212,
            "subject": "Thursday, 29 Nov 2018",
            "submessages": [],
            "timestamp": 1543516863,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/7da8f8ef20569f6876aeb1188d2ebb6d41c6f842?x=x&version=2",
            "client": "ZulipElectron",
            "content": "<p>Starting up now!</p>",
            "content_type": "text/html",
            "display_recipient": "Post-Lunch Prep (PLP)",
            "flags": [
                "read",
                "historical"
            ],
            "id": 148808191,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 183179,
            "sender_email": "KeenanKomoto@gmail.com",
            "sender_full_name": "Keenan Tsuruichi Komoto (he) (F2'18)",
            "sender_id": 129934,
            "sender_realm_str": "recurse",
            "stream_id": 144212,
            "subject": "Thursday, 29 Nov 2018",
            "submessages": [],
            "timestamp": 1543517237,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/1fdd84a57c15f7ecfdded3d0c32019ad32f8af5d?x=x&version=5",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-id=\"134311\">@Justin Venezuela (W1'18)</span> oops, sorry!</p>",
            "content_type": "text/html",
            "display_recipient": "Post-Lunch Prep (PLP)",
            "flags": [
                "read",
                "historical"
            ],
            "id": 148808323,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 183179,
            "sender_email": "arpith@feedreader.co",
            "sender_full_name": "Arpith Siromoney (he) (m6'20)",
            "sender_id": 9503,
            "sender_realm_str": "recurse",
            "stream_id": 144212,
            "subject": "Thursday, 29 Nov 2018",
            "submessages": [],
            "timestamp": 1543517343,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/1fdd84a57c15f7ecfdded3d0c32019ad32f8af5d?x=x&version=5",
            "client": "website",
            "content": "<p>what time do you finish discussing them?</p>",
            "content_type": "text/html",
            "display_recipient": "Post-Lunch Prep (PLP)",
            "flags": [
                "read",
                "historical"
            ],
            "id": 148808530,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 183179,
            "sender_email": "arpith@feedreader.co",
            "sender_full_name": "Arpith Siromoney (he) (m6'20)",
            "sender_id": 9503,
            "sender_realm_str": "recurse",
            "stream_id": 144212,
            "subject": "Thursday, 29 Nov 2018",
            "submessages": [],
            "timestamp": 1543517485,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/7da8f8ef20569f6876aeb1188d2ebb6d41c6f842?x=x&version=2",
            "client": "ZulipElectron",
            "content": "<p>We start discussing at 2:45pm and end at 3:00pm</p>",
            "content_type": "text/html",
            "display_recipient": "Post-Lunch Prep (PLP)",
            "flags": [
                "read",
                "historical"
            ],
            "id": 148809396,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 183179,
            "sender_email": "KeenanKomoto@gmail.com",
            "sender_full_name": "Keenan Tsuruichi Komoto (he) (F2'18)",
            "sender_id": 129934,
            "sender_realm_str": "recurse",
            "stream_id": 144212,
            "subject": "Thursday, 29 Nov 2018",
            "submessages": [],
            "timestamp": 1543518167,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/1fdd84a57c15f7ecfdded3d0c32019ad32f8af5d?x=x&version=5",
            "client": "website",
            "content": "<p>okay will wait till then :)</p>",
            "content_type": "text/html",
            "display_recipient": "Post-Lunch Prep (PLP)",
            "flags": [
                "read",
                "historical"
            ],
            "id": 148809594,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 183179,
            "sender_email": "arpith@feedreader.co",
            "sender_full_name": "Arpith Siromoney (he) (m6'20)",
            "sender_id": 9503,
            "sender_realm_str": "recurse",
            "stream_id": 144212,
            "subject": "Thursday, 29 Nov 2018",
            "submessages": [],
            "timestamp": 1543518324,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/ed08506a2165a36be3ed28630ff49cc8?d=identicon&version=1",
            "client": "ZulipElectron",
            "content": "<p>FYI the schema needs semicolons to parse</p>",
            "content_type": "text/html",
            "display_recipient": "Post-Lunch Prep (PLP)",
            "flags": [
                "read",
                "historical"
            ],
            "id": 148810236,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 183179,
            "sender_email": "wylieconlon@gmail.com",
            "sender_full_name": "Wylie Conlon (he) (F2'18)",
            "sender_id": 130475,
            "sender_realm_str": "recurse",
            "stream_id": 144212,
            "subject": "Thursday, 29 Nov 2018",
            "submessages": [],
            "timestamp": 1543518791,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/7da8f8ef20569f6876aeb1188d2ebb6d41c6f842?x=x&version=2",
            "client": "ZulipElectron",
            "content": "<p>Partial solution to SQL problem. (Couldn't quite figure out the case for ties):</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">WITH</span> <span class=\"n\">cte</span> <span class=\"k\">AS</span> <span class=\"p\">(</span>\n    <span class=\"k\">SELECT</span> <span class=\"n\">D</span><span class=\"p\">.</span><span class=\"n\">Name</span> <span class=\"k\">AS</span> <span class=\"n\">Department</span><span class=\"p\">,</span> <span class=\"n\">E</span><span class=\"p\">.</span><span class=\"n\">Name</span> <span class=\"k\">AS</span>  <span class=\"n\">Employee</span><span class=\"p\">,</span> <span class=\"n\">E</span><span class=\"p\">.</span><span class=\"n\">Salary</span> <span class=\"k\">AS</span> <span class=\"n\">Salary</span><span class=\"p\">,</span> <span class=\"n\">ROW_NUMBER</span><span class=\"p\">()</span> <span class=\"n\">OVER</span> <span class=\"p\">(</span><span class=\"n\">PARTITION</span> <span class=\"k\">BY</span> <span class=\"n\">D</span><span class=\"p\">.</span><span class=\"n\">Name</span> <span class=\"k\">ORDER</span> <span class=\"k\">BY</span> <span class=\"n\">E</span><span class=\"p\">.</span><span class=\"n\">Salary</span> <span class=\"k\">DESC</span><span class=\"p\">)</span> <span class=\"k\">AS</span> <span class=\"n\">rn</span>\n        <span class=\"k\">FROM</span> <span class=\"n\">Employee</span> <span class=\"k\">AS</span> <span class=\"n\">E</span> <span class=\"k\">INNER</span> <span class=\"k\">JOIN</span> <span class=\"n\">Department</span> <span class=\"k\">AS</span> <span class=\"n\">D</span> <span class=\"k\">ON</span> <span class=\"n\">E</span><span class=\"p\">.</span><span class=\"n\">DepartmentId</span><span class=\"o\">=</span><span class=\"n\">D</span><span class=\"p\">.</span><span class=\"n\">Id</span>\n<span class=\"p\">)</span>\n<span class=\"k\">SELECT</span> <span class=\"n\">Department</span><span class=\"p\">,</span> <span class=\"n\">Employee</span><span class=\"p\">,</span> <span class=\"n\">Salary</span> <span class=\"k\">FROM</span> <span class=\"n\">cte</span> <span class=\"k\">WHERE</span> <span class=\"n\">rn</span> <span class=\"o\">&lt;=</span> <span class=\"mi\">3</span>\n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "Post-Lunch Prep (PLP)",
            "flags": [
                "read",
                "historical"
            ],
            "id": 148813129,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 183179,
            "sender_email": "KeenanKomoto@gmail.com",
            "sender_full_name": "Keenan Tsuruichi Komoto (he) (F2'18)",
            "sender_id": 129934,
            "sender_realm_str": "recurse",
            "stream_id": 144212,
            "subject": "Thursday, 29 Nov 2018",
            "submessages": [],
            "timestamp": 1543520827,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/f0fe2f68b0f71aa5add88f2e250496b9a203ad96?x=x&version=2",
            "client": "ZulipElectron",
            "content": "<p>Here's one for SQL. Used Rank for the ties. (I used MSSQL instead of MySQL so not sure if this would work there).</p>\n<div class=\"codehilite\"><pre><span></span>SELECT  D.Name as Department,\n        E.Name as Employee,\n        E.Salary as Salary\nFROM Employee as E\nJOIN Department as D\nON E.DepartmentId = D.Id\nJOIN (\n    SELECT  Salary,\n            DepartmentId,\n            RANK () OVER (PARTITION BY DepartmentId ORDER BY Salary DESC) as Rank\n    FROM Employee\n    GROUP BY Salary, DepartmentId\n) as R\nON E.Salary = R.Salary AND E.DepartmentId = R.DepartmentId\nWHERE R.Rank &lt;= 3\nORDER BY D.Name, E.Salary DESC\n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "Post-Lunch Prep (PLP)",
            "flags": [
                "read",
                "historical"
            ],
            "id": 148814302,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 183179,
            "sender_email": "djchenoweth@gmail.com",
            "sender_full_name": "Dan Chenoweth (he) (W1'18)",
            "sender_id": 134186,
            "sender_realm_str": "recurse",
            "stream_id": 144212,
            "subject": "Thursday, 29 Nov 2018",
            "submessages": [],
            "timestamp": 1543521711,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/7da8f8ef20569f6876aeb1188d2ebb6d41c6f842?x=x&version=2",
            "client": "ZulipElectron",
            "content": "<p><strong>Correction</strong> Here is the final working SQL query. Thanks <span class=\"user-mention\" data-user-id=\"130475\">@Wylie Conlon (F2'18)</span> and <span class=\"user-mention\" data-user-id=\"134389\">@Emily Ann Balczewski (W1'18)</span> for the <code>dense_rank()</code> tip!</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">WITH</span> <span class=\"n\">cte</span> <span class=\"k\">AS</span> <span class=\"p\">(</span>\n    <span class=\"k\">SELECT</span> <span class=\"n\">D</span><span class=\"p\">.</span><span class=\"n\">Name</span> <span class=\"k\">AS</span> <span class=\"n\">Department</span><span class=\"p\">,</span> <span class=\"n\">E</span><span class=\"p\">.</span><span class=\"n\">Name</span> <span class=\"k\">AS</span>  <span class=\"n\">Employee</span><span class=\"p\">,</span> <span class=\"n\">E</span><span class=\"p\">.</span><span class=\"n\">Salary</span> <span class=\"k\">AS</span> <span class=\"n\">Salary</span><span class=\"p\">,</span> <span class=\"n\">dense_rank</span><span class=\"p\">()</span> <span class=\"n\">OVER</span> <span class=\"p\">(</span><span class=\"n\">PARTITION</span> <span class=\"k\">BY</span> <span class=\"n\">D</span><span class=\"p\">.</span><span class=\"n\">Name</span> <span class=\"k\">ORDER</span> <span class=\"k\">BY</span> <span class=\"n\">E</span><span class=\"p\">.</span><span class=\"n\">Salary</span> <span class=\"k\">DESC</span><span class=\"p\">)</span> <span class=\"k\">AS</span> <span class=\"n\">rn</span>\n        <span class=\"k\">FROM</span> <span class=\"n\">Employee</span> <span class=\"k\">AS</span> <span class=\"n\">E</span> <span class=\"k\">INNER</span> <span class=\"k\">JOIN</span> <span class=\"n\">Department</span> <span class=\"k\">AS</span> <span class=\"n\">D</span> <span class=\"k\">ON</span> <span class=\"n\">E</span><span class=\"p\">.</span><span class=\"n\">DepartmentId</span><span class=\"o\">=</span><span class=\"n\">D</span><span class=\"p\">.</span><span class=\"n\">Id</span>\n<span class=\"p\">)</span>\n<span class=\"k\">SELECT</span> <span class=\"n\">Department</span><span class=\"p\">,</span> <span class=\"n\">Employee</span><span class=\"p\">,</span> <span class=\"n\">Salary</span> <span class=\"k\">FROM</span> <span class=\"n\">cte</span> <span class=\"k\">WHERE</span> <span class=\"n\">rn</span> <span class=\"o\">&lt;=</span> <span class=\"mi\">3</span>\n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "Post-Lunch Prep (PLP)",
            "flags": [
                "read",
                "historical"
            ],
            "id": 148814431,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 183179,
            "sender_email": "KeenanKomoto@gmail.com",
            "sender_full_name": "Keenan Tsuruichi Komoto (he) (F2'18)",
            "sender_id": 129934,
            "sender_realm_str": "recurse",
            "stream_id": 144212,
            "subject": "Thursday, 29 Nov 2018",
            "submessages": [],
            "timestamp": 1543521804,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/14fae98146419eab0d4e5e12ff7cf0eadbc3d36e?x=x&version=2",
            "client": "ZulipElectron",
            "content": "<p>Here's mine for SQL! Used count rather than rank or row numbers</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">SELECT</span> <span class=\"n\">d1</span><span class=\"p\">.</span><span class=\"n\">Name</span> <span class=\"k\">as</span> <span class=\"n\">Department</span><span class=\"p\">,</span>\n<span class=\"n\">e1</span><span class=\"p\">.</span><span class=\"n\">Name</span> <span class=\"k\">as</span> <span class=\"n\">Employee</span><span class=\"p\">,</span>\n<span class=\"n\">e1</span><span class=\"p\">.</span><span class=\"n\">Salary</span> <span class=\"k\">as</span> <span class=\"n\">Salary</span>\n<span class=\"k\">From</span> <span class=\"n\">Employee</span> <span class=\"n\">e1</span>\n<span class=\"k\">JOIN</span> <span class=\"n\">Department</span> <span class=\"n\">d1</span> <span class=\"k\">ON</span> <span class=\"n\">d1</span><span class=\"p\">.</span><span class=\"n\">Id</span> <span class=\"o\">=</span> <span class=\"n\">e1</span><span class=\"p\">.</span><span class=\"n\">DepartmentId</span>\n<span class=\"k\">Where</span> <span class=\"p\">(</span><span class=\"k\">Select</span> <span class=\"k\">count</span><span class=\"p\">(</span><span class=\"k\">distinct</span> <span class=\"n\">e2</span><span class=\"p\">.</span><span class=\"n\">Salary</span><span class=\"p\">)</span>\n    <span class=\"k\">From</span> <span class=\"n\">employee</span> <span class=\"n\">e2</span>\n    <span class=\"k\">Where</span> <span class=\"n\">e2</span><span class=\"p\">.</span><span class=\"n\">salary</span><span class=\"o\">&gt;</span><span class=\"n\">e1</span><span class=\"p\">.</span><span class=\"n\">salary</span>\n      <span class=\"k\">AND</span> <span class=\"n\">e1</span><span class=\"p\">.</span><span class=\"n\">DepartmentId</span> <span class=\"o\">=</span> <span class=\"n\">e2</span><span class=\"p\">.</span><span class=\"n\">DepartmentId</span><span class=\"p\">)</span> <span class=\"o\">&lt;</span> <span class=\"mi\">3</span>\n<span class=\"k\">ORDER</span> <span class=\"k\">BY</span> <span class=\"n\">d1</span><span class=\"p\">.</span><span class=\"n\">Name</span><span class=\"p\">,</span> <span class=\"n\">e1</span><span class=\"p\">.</span><span class=\"n\">Salary</span> <span class=\"k\">DESC</span>\n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "Post-Lunch Prep (PLP)",
            "flags": [
                "read",
                "historical"
            ],
            "id": 148814440,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "+1",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "KeenanKomoto@gmail.com",
                        "full_name": "Keenan Tsuruichi Komoto (he) (F2'18)",
                        "id": 129934
                    },
                    "user_id": 129934
                }
            ],
            "recipient_id": 183179,
            "sender_email": "jacklyn.liu@gmail.com",
            "sender_full_name": "Jackie Liu (she) (W1'18)",
            "sender_id": 134400,
            "sender_realm_str": "recurse",
            "stream_id": 144212,
            "subject": "Thursday, 29 Nov 2018",
            "submessages": [],
            "timestamp": 1543521813,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/6145d0683a46b1516d14fa79f4980dfa1143bdcc?x=x&version=9",
            "client": "website",
            "content": "<p>minimum path falling sum</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">class</span> <span class=\"nc\">Solution</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"nf\">minFallingPathSum</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">A</span><span class=\"p\">):</span>\n        <span class=\"n\">min_sum_thru</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"n\">i</span> <span class=\"p\">:</span> <span class=\"n\">x</span> <span class=\"k\">for</span> <span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"n\">x</span> <span class=\"ow\">in</span> <span class=\"nb\">enumerate</span><span class=\"p\">(</span><span class=\"n\">A</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">])}</span>\n        <span class=\"k\">for</span> <span class=\"n\">row</span> <span class=\"ow\">in</span> <span class=\"n\">A</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">:]:</span>\n            <span class=\"n\">min_sum_thru</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">extend_min_sum</span><span class=\"p\">(</span><span class=\"n\">min_sum_thru</span><span class=\"p\">,</span> <span class=\"n\">row</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"nb\">min</span><span class=\"p\">(</span><span class=\"n\">min_sum_thru</span><span class=\"o\">.</span><span class=\"n\">values</span><span class=\"p\">())</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">extend_min_sum</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">dictionary</span><span class=\"p\">,</span> <span class=\"n\">row</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"p\">{</span><span class=\"n\">i</span> <span class=\"p\">:</span> <span class=\"n\">x</span> <span class=\"o\">+</span> <span class=\"nb\">min</span><span class=\"p\">(</span><span class=\"n\">d</span><span class=\"p\">[</span><span class=\"n\">j</span><span class=\"p\">]</span> <span class=\"k\">for</span> <span class=\"n\">j</span> <span class=\"ow\">in</span> <span class=\"p\">[</span><span class=\"n\">i</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"n\">i</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"k\">if</span> <span class=\"n\">j</span> <span class=\"ow\">in</span> <span class=\"n\">d</span><span class=\"p\">)</span> \\\n                <span class=\"k\">for</span> <span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"n\">x</span> <span class=\"ow\">in</span> <span class=\"nb\">enumerate</span><span class=\"p\">(</span><span class=\"n\">row</span><span class=\"p\">)}</span>\n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "Post-Lunch Prep (PLP)",
            "flags": [
                "read",
                "historical"
            ],
            "id": 150697512,
            "is_me_message": false,
            "last_edit_timestamp": 1543699839,
            "reactions": [],
            "recipient_id": 183179,
            "sender_email": "aaron_wood@protonmail.com",
            "sender_full_name": "Aaron Wood (he) (F1'18)",
            "sender_id": 125145,
            "sender_realm_str": "recurse",
            "stream_id": 144212,
            "subject": "Wednesday, 28 Nov 2018",
            "submessages": [],
            "timestamp": 1543699493,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/6145d0683a46b1516d14fa79f4980dfa1143bdcc?x=x&version=9",
            "client": "website",
            "content": "<p>path sum</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">class</span> <span class=\"nc\">Solution</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"nf\">hasPathSum</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">root</span><span class=\"p\">,</span> <span class=\"n\">target</span><span class=\"p\">):</span>\n        <span class=\"k\">if</span> <span class=\"n\">root</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"kc\">False</span>\n        <span class=\"n\">root</span><span class=\"o\">.</span><span class=\"n\">sum_thru</span> <span class=\"o\">=</span> <span class=\"n\">root</span><span class=\"o\">.</span><span class=\"n\">val</span>\n        <span class=\"n\">curr_nodes</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">root</span><span class=\"p\">]</span>\n        <span class=\"k\">while</span> <span class=\"n\">curr_nodes</span> <span class=\"o\">!=</span> <span class=\"p\">[]:</span>\n            <span class=\"n\">curr_nodes</span><span class=\"p\">,</span> <span class=\"n\">completed</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">process_children</span><span class=\"p\">(</span><span class=\"n\">curr_nodes</span><span class=\"p\">,</span> <span class=\"n\">target</span><span class=\"p\">)</span>\n            <span class=\"k\">if</span> <span class=\"n\">completed</span><span class=\"p\">:</span>\n                <span class=\"k\">return</span> <span class=\"kc\">True</span>\n        <span class=\"k\">return</span> <span class=\"kc\">False</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">process_children</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">nodes</span><span class=\"p\">,</span> <span class=\"n\">target</span><span class=\"p\">):</span>\n        <span class=\"n\">new_nodes</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n        <span class=\"k\">for</span> <span class=\"n\">node</span> <span class=\"ow\">in</span> <span class=\"n\">nodes</span><span class=\"p\">:</span>\n            <span class=\"n\">children</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">c</span> <span class=\"k\">for</span> <span class=\"n\">c</span> <span class=\"ow\">in</span> <span class=\"p\">[</span><span class=\"n\">node</span><span class=\"o\">.</span><span class=\"n\">left</span><span class=\"p\">,</span> <span class=\"n\">node</span><span class=\"o\">.</span><span class=\"n\">right</span><span class=\"p\">]</span> <span class=\"k\">if</span> <span class=\"n\">c</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"kc\">None</span><span class=\"p\">]</span>\n            <span class=\"k\">if</span> <span class=\"n\">children</span> <span class=\"o\">==</span> <span class=\"p\">[]</span> <span class=\"ow\">and</span> <span class=\"n\">node</span><span class=\"o\">.</span><span class=\"n\">sum_thru</span> <span class=\"o\">==</span> <span class=\"n\">target</span><span class=\"p\">:</span>\n                <span class=\"k\">return</span> <span class=\"n\">new_nodes</span><span class=\"p\">,</span> <span class=\"kc\">True</span>\n            <span class=\"k\">for</span> <span class=\"n\">child</span> <span class=\"ow\">in</span> <span class=\"n\">children</span><span class=\"p\">:</span>\n                <span class=\"n\">child</span><span class=\"o\">.</span><span class=\"n\">sum_thru</span> <span class=\"o\">=</span> <span class=\"n\">node</span><span class=\"o\">.</span><span class=\"n\">sum_thru</span> <span class=\"o\">+</span> <span class=\"n\">child</span><span class=\"o\">.</span><span class=\"n\">val</span>\n                <span class=\"n\">new_nodes</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">child</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">new_nodes</span><span class=\"p\">,</span> <span class=\"kc\">False</span>\n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "Post-Lunch Prep (PLP)",
            "flags": [
                "read",
                "historical"
            ],
            "id": 150698324,
            "is_me_message": false,
            "last_edit_timestamp": 1543701491,
            "reactions": [],
            "recipient_id": 183179,
            "sender_email": "aaron_wood@protonmail.com",
            "sender_full_name": "Aaron Wood (he) (F1'18)",
            "sender_id": 125145,
            "sender_realm_str": "recurse",
            "stream_id": 144212,
            "subject": "Wednesday, 28 Nov 2018",
            "submessages": [],
            "timestamp": 1543701290,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/6145d0683a46b1516d14fa79f4980dfa1143bdcc?x=x&version=9",
            "client": "website",
            "content": "<p>best time to buy and sell stock</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">class</span> <span class=\"nc\">Solution</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"nf\">maxProfit</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">prices</span><span class=\"p\">):</span>\n        <span class=\"k\">if</span> <span class=\"n\">prices</span> <span class=\"o\">==</span> <span class=\"p\">[]:</span>\n            <span class=\"k\">return</span> <span class=\"mi\">0</span>\n        <span class=\"n\">minimum</span><span class=\"p\">,</span> <span class=\"n\">maximum</span> <span class=\"o\">=</span> <span class=\"n\">prices</span><span class=\"p\">[:</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">*</span> <span class=\"mi\">2</span>\n        <span class=\"n\">profit</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n        <span class=\"k\">for</span> <span class=\"n\">x</span> <span class=\"ow\">in</span> <span class=\"n\">prices</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">:]:</span>\n            <span class=\"k\">if</span> <span class=\"n\">x</span> <span class=\"o\">&gt;</span> <span class=\"n\">maximum</span><span class=\"p\">:</span>\n                <span class=\"n\">maximum</span> <span class=\"o\">=</span> <span class=\"n\">x</span>\n                <span class=\"n\">profit</span> <span class=\"o\">=</span> <span class=\"nb\">max</span><span class=\"p\">(</span><span class=\"n\">profit</span><span class=\"p\">,</span> <span class=\"n\">maximum</span> <span class=\"o\">-</span> <span class=\"n\">minimum</span><span class=\"p\">)</span>\n            <span class=\"k\">if</span> <span class=\"n\">x</span> <span class=\"o\">&lt;</span> <span class=\"n\">minimum</span><span class=\"p\">:</span>\n                <span class=\"n\">minimum</span><span class=\"p\">,</span> <span class=\"n\">maximum</span> <span class=\"o\">=</span> <span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">x</span>\n        <span class=\"k\">return</span> <span class=\"n\">profit</span>\n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "Post-Lunch Prep (PLP)",
            "flags": [
                "read",
                "historical"
            ],
            "id": 150698868,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 183179,
            "sender_email": "aaron_wood@protonmail.com",
            "sender_full_name": "Aaron Wood (he) (F1'18)",
            "sender_id": 125145,
            "sender_realm_str": "recurse",
            "stream_id": 144212,
            "subject": "Tuesday, 27 Nov 2018",
            "submessages": [],
            "timestamp": 1543702336,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/a56e927f8f7f420f54cff1269ba6c92b38c84669?x=x&version=2",
            "client": "website",
            "content": "<p>Hi <span class=\"user-mention\" data-user-id=\"*\">@all</span> </p>\n<p>Welcome to today's PLP. The problems will be projected in the presentation space after lunch time.<br>\nIf you are interested in pairing, come to the presentation space at 1:45 to find a partner.<br>\nIf you are interested in discussing afterwards, come to the presentation space at 2:45.</p>\n<p>Problems:<br>\nRoman to Integer: <a href=\"https://leetcode.com/problems/roman-to-integer/\" target=\"_blank\" title=\"https://leetcode.com/problems/roman-to-integer/\">https://leetcode.com/problems/roman-to-integer/</a><br>\nCoin Change: <a href=\"https://leetcode.com/problems/coin-change/\" target=\"_blank\" title=\"https://leetcode.com/problems/coin-change/\">https://leetcode.com/problems/coin-change/</a></p>\n<p>Host: <span class=\"user-mention\" data-user-id=\"129927\">@Joshua Rider (F2'18)</span>  (Contact me if you have any questions, concerns, or feedback.)</p>",
            "content_type": "text/html",
            "display_recipient": "Post-Lunch Prep (PLP)",
            "flags": [
                "read",
                "historical"
            ],
            "id": 150786582,
            "is_me_message": false,
            "last_edit_timestamp": 1543859172,
            "reactions": [],
            "recipient_id": 183179,
            "sender_email": "joshrider@gmail.com",
            "sender_full_name": "Joshua Rider (he) (F2'18)",
            "sender_id": 129927,
            "sender_realm_str": "recurse",
            "stream_id": 144212,
            "subject": "Monday, 3 December 2018",
            "submessages": [],
            "timestamp": 1543859080,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/6145d0683a46b1516d14fa79f4980dfa1143bdcc?x=x&version=9",
            "client": "website",
            "content": "<p>timed out a buncha times on coin change and finally looked up a solution that still timed out =]<br>\nhere's my roman numerals one, which was slow.</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">class</span> <span class=\"nc\">Solution</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"nf\">romanToInt</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">s</span><span class=\"p\">):</span>\n        <span class=\"n\">roman_dict</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s1\">&#39;I&#39;</span> <span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"s1\">&#39;V&#39;</span> <span class=\"p\">:</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"s1\">&#39;X&#39;</span> <span class=\"p\">:</span> <span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"s1\">&#39;L&#39;</span> <span class=\"p\">:</span>  <span class=\"mi\">50</span><span class=\"p\">,</span>\n                      <span class=\"s1\">&#39;C&#39;</span> <span class=\"p\">:</span> <span class=\"mi\">100</span><span class=\"p\">,</span> <span class=\"s1\">&#39;D&#39;</span> <span class=\"p\">:</span> <span class=\"mi\">500</span><span class=\"p\">,</span> <span class=\"s1\">&#39;M&#39;</span> <span class=\"p\">:</span> <span class=\"mi\">1000</span><span class=\"p\">}</span>\n        <span class=\"k\">if</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"mi\">0</span>\n        <span class=\"k\">if</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"mi\">1</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"n\">roman_dict</span><span class=\"p\">[</span><span class=\"n\">s</span><span class=\"p\">]</span>\n        <span class=\"n\">first</span><span class=\"p\">,</span> <span class=\"n\">second</span><span class=\"p\">,</span> <span class=\"n\">rest</span> <span class=\"o\">=</span> <span class=\"n\">s</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"n\">s</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">],</span> <span class=\"n\">s</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">:]</span>\n        <span class=\"k\">if</span> <span class=\"n\">roman_dict</span><span class=\"p\">[</span><span class=\"n\">first</span><span class=\"p\">]</span> <span class=\"o\">&lt;</span> <span class=\"n\">roman_dict</span><span class=\"p\">[</span><span class=\"n\">second</span><span class=\"p\">]:</span>\n            <span class=\"k\">return</span> <span class=\"n\">roman_dict</span><span class=\"p\">[</span><span class=\"n\">second</span><span class=\"p\">]</span> <span class=\"o\">-</span> <span class=\"n\">roman_dict</span><span class=\"p\">[</span><span class=\"n\">first</span><span class=\"p\">]</span> <span class=\"o\">+</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">romanToInt</span><span class=\"p\">(</span><span class=\"n\">rest</span><span class=\"p\">)</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"n\">roman_dict</span><span class=\"p\">[</span><span class=\"n\">first</span><span class=\"p\">]</span> <span class=\"o\">+</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">romanToInt</span><span class=\"p\">(</span><span class=\"n\">second</span> <span class=\"o\">+</span> <span class=\"n\">rest</span><span class=\"p\">)</span>\n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "Post-Lunch Prep (PLP)",
            "flags": [
                "read",
                "historical"
            ],
            "id": 150810871,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 183179,
            "sender_email": "aaron_wood@protonmail.com",
            "sender_full_name": "Aaron Wood (he) (F1'18)",
            "sender_id": 125145,
            "sender_realm_str": "recurse",
            "stream_id": 144212,
            "subject": "Monday, 3 December 2018",
            "submessages": [],
            "timestamp": 1543881132,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/7614b2155716cc9e51f8be991671ed44?d=identicon&version=1",
            "client": "ZulipElectron",
            "content": "<p>I came up with this solution to coin change.  It gets accepted but its really sloppy.<br>\nI was planning on cleaning it up but I never got around to it.</p>\n<div class=\"codehilite\"><pre><span></span>const coinChange = (coins, amount) =&gt; {\n\n    if (amount === 0) {\n        return 0;\n    }\n\n    const Q = [[coins, 1]];\n\n    checked = {};\n\n    const ans = [];\n\n    while (Q.length &gt; 0) {\n        const [totals, level] = Q.pop();\n\n        if (Math.min.apply(null, totals) &gt; amount) {\n\n\n        } else if (totals.includes(amount)) {\n\n            ans.push(level)\n\n        } else {\n\n            for (let i = 0; i &lt; totals.length; i++) {\n\n                let num = totals[i];\n\n                const nextLevel = level + 1;\n\n                if (checked[num]) {\n\n                    if (nextLevel &lt; checked[num]) {\n\n                        checked[num] = nextLevel;\n\n                        const new_totals = coins.map(coin =&gt; coin + num);\n\n                        Q.push([new_totals, nextLevel]);\n\n                    }\n\n                } else {\n\n                    checked[num] = nextLevel;\n\n                    const new_totals = coins.map(coin =&gt; coin + num);\n\n                    Q.push([new_totals, nextLevel]);\n\n                }\n\n\n            }\n\n        }\n\n    }\n\n    return ans.length ? Math.min.apply(null, ans) : -1;\n\n};\n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "Post-Lunch Prep (PLP)",
            "flags": [
                "read",
                "historical"
            ],
            "id": 150810934,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 183179,
            "sender_email": "carl.schubert@gmail.com",
            "sender_full_name": "Carl Schubert (he) (F2'18)",
            "sender_id": 130326,
            "sender_realm_str": "recurse",
            "stream_id": 144212,
            "subject": "Monday, 3 December 2018",
            "submessages": [],
            "timestamp": 1543881241,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/bc6286c5c5a6e0deebc5e020b6ed714ab40ecff3?x=x&version=3",
            "client": "website",
            "content": "<p>Just got this to work. It builds the DP array of minimum coins bottom up but I just figured out setting unreachable amounts to Infinity makes things simpler</p>\n<div class=\"codehilite\"><pre><span></span>var coinChange = function(coins, amount) {\n\n    let change = [0]\n\n    for(let i = 1; i &lt;= amount; i++){\n        change[i] = Infinity;\n        coins.forEach(elem =&gt; {\n\n            if(i - elem &gt;= 0){\n                change[i] = Math.min(change[i], change[i - elem] + 1);\n\n            }\n\n        })\n\n    }\n    //console.log(change)\n\n    if(change[amount] == Infinity) return -1\n\n    return change[amount];\n\n\n};\n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "Post-Lunch Prep (PLP)",
            "flags": [
                "read",
                "historical"
            ],
            "id": 150824479,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 183179,
            "sender_email": "atkinson.eli@gmail.com",
            "sender_full_name": "Elisha White Atkinson (he) (F2'18)",
            "sender_id": 130447,
            "sender_realm_str": "recurse",
            "stream_id": 144212,
            "subject": "Monday, 3 December 2018",
            "submessages": [],
            "timestamp": 1543900294,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/725b72e62dee517d5a85bb050caf09b4a2ee775a?x=x&version=2",
            "client": "website",
            "content": "<p>Hi @all</p>\n<p>Welcome to today's PLP. The problems will be projected in the presentation space after lunch time.<br>\nIf you are interested in pairing, come to the presentation space at 1:45 to find a partner.<br>\nIf you are interested in discussing afterwards, come to the presentation space at 2:45.</p>\n<p>Problems:<br>\nAdd two Numbers (Linked Lists) <a href=\"https://leetcode.com/problems/add-two-numbers/\" target=\"_blank\" title=\"https://leetcode.com/problems/add-two-numbers/\">https://leetcode.com/problems/add-two-numbers/</a><br>\nMedian of two sorted arrays: <a href=\"https://leetcode.com/problems/median-of-two-sorted-arrays/\" target=\"_blank\" title=\"https://leetcode.com/problems/median-of-two-sorted-arrays/\">https://leetcode.com/problems/median-of-two-sorted-arrays/</a></p>\n<p>Host: <span class=\"user-mention\" data-user-id=\"130406\">@Heime S Ashkenazie (F2'18)</span>  (Contact me if you have any questions, concerns, or feedback.)</p>",
            "content_type": "text/html",
            "display_recipient": "Post-Lunch Prep (PLP)",
            "flags": [
                "read",
                "historical"
            ],
            "id": 150866450,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 183179,
            "sender_email": "heime.a@gmail.com",
            "sender_full_name": "Heime S Ashkenazie (F2'18)",
            "sender_id": 130406,
            "sender_realm_str": "recurse",
            "stream_id": 144212,
            "subject": "Monday, 3 December 2018",
            "submessages": [],
            "timestamp": 1543947410,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/6145d0683a46b1516d14fa79f4980dfa1143bdcc?x=x&version=9",
            "client": "website",
            "content": "<p>thanks, <span class=\"user-mention\" data-user-id=\"130447\">@Elisha White Atkinson (F2'18)</span>  this was pretty much what i was doing but still timing out (leetcode timeouts are so inconsistent lol).  after reading your take on infinity, i think the hang-up in mine was taking mins all the time.  here's my new version, inspired by you:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">class</span> <span class=\"nc\">Solution</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"nf\">coinChange</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">coins</span><span class=\"p\">,</span> <span class=\"n\">amount</span><span class=\"p\">):</span>\n        <span class=\"n\">min_coins</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"mi\">0</span> <span class=\"p\">:</span> <span class=\"mi\">0</span><span class=\"p\">}</span>\n        <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">amount</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">):</span>\n            <span class=\"k\">for</span> <span class=\"n\">c</span> <span class=\"ow\">in</span> <span class=\"n\">coins</span><span class=\"p\">:</span>\n                <span class=\"k\">if</span> <span class=\"n\">i</span> <span class=\"o\">-</span> <span class=\"n\">c</span> <span class=\"ow\">in</span> <span class=\"n\">min_coins</span> <span class=\"ow\">and</span> \\\n                        <span class=\"p\">(</span><span class=\"n\">i</span> <span class=\"ow\">not</span> <span class=\"ow\">in</span> <span class=\"n\">min_coins</span> \\\n                        <span class=\"ow\">or</span> <span class=\"n\">min_coins</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">&gt;</span> <span class=\"n\">min_coins</span><span class=\"p\">[</span><span class=\"n\">i</span> <span class=\"o\">-</span> <span class=\"n\">c</span><span class=\"p\">]</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">):</span>\n                    <span class=\"n\">min_coins</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">min_coins</span><span class=\"p\">[</span><span class=\"n\">i</span> <span class=\"o\">-</span> <span class=\"n\">c</span><span class=\"p\">]</span> <span class=\"o\">+</span> <span class=\"mi\">1</span>\n        <span class=\"k\">if</span> <span class=\"n\">amount</span> <span class=\"ow\">in</span> <span class=\"n\">min_coins</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"n\">min_coins</span><span class=\"p\">[</span><span class=\"n\">amount</span><span class=\"p\">]</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"o\">-</span><span class=\"mi\">1</span>\n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "Post-Lunch Prep (PLP)",
            "flags": [
                "read",
                "historical"
            ],
            "id": 150867291,
            "is_me_message": false,
            "last_edit_timestamp": 1543948138,
            "reactions": [],
            "recipient_id": 183179,
            "sender_email": "aaron_wood@protonmail.com",
            "sender_full_name": "Aaron Wood (he) (F1'18)",
            "sender_id": 125145,
            "sender_realm_str": "recurse",
            "stream_id": 144212,
            "subject": "Monday, 3 December 2018",
            "submessages": [],
            "timestamp": 1543948117,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/927039f8a9a749e3be410a6969f8e2e8175cedf4?x=x&version=2",
            "client": "website",
            "content": "<p>Hi <span class=\"user-mention\" data-user-id=\"*\">@all</span> </p>\n<p>Welcome to today's PLP. The problems will be projected in the presentation space after lunch time.<br>\nIf you are interested in pairing, come to the presentation space at 1:45 to find a partner.<br>\nIf you are interested in discussing afterwards, come to the presentation space at 2:45.</p>\n<p>Today's problems are from Leetcode's most recent weekly contest which was last Saturday.</p>\n<p>Problems:<br>\n<a href=\"https://leetcode.com/contest/weekly-contest-113/problems/largest-time-for-given-digits/\" target=\"_blank\" title=\"https://leetcode.com/contest/weekly-contest-113/problems/largest-time-for-given-digits/\">https://leetcode.com/contest/weekly-contest-113/problems/largest-time-for-given-digits/</a> (easy)<br>\n<a href=\"https://leetcode.com/contest/weekly-contest-113/problems/reveal-cards-in-increasing-order/\" target=\"_blank\" title=\"https://leetcode.com/contest/weekly-contest-113/problems/reveal-cards-in-increasing-order/\">https://leetcode.com/contest/weekly-contest-113/problems/reveal-cards-in-increasing-order/</a> (medium)</p>\n<p>Host: <span class=\"user-mention\" data-user-id=\"130181\">@Gretchen Wright (F2'18)</span>  (Contact me if you have any questions, concerns, or feedback.)</p>",
            "content_type": "text/html",
            "display_recipient": "Post-Lunch Prep (PLP)",
            "flags": [
                "read",
                "historical"
            ],
            "id": 150941301,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 183179,
            "sender_email": "gretchen.m.wright@gmail.com",
            "sender_full_name": "Gretchen Wright (she) (F2'18)",
            "sender_id": 130181,
            "sender_realm_str": "recurse",
            "stream_id": 144212,
            "subject": "Wednesday, 5 December 2018",
            "submessages": [],
            "timestamp": 1544027555,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/ca9f8cb0bcede6fa920c47295ad4e7a972c9f863?x=x&version=2",
            "client": "ZulipElectron",
            "content": "<p>Hi <span class=\"user-mention\" data-user-id=\"*\">@all</span> </p>\n<p>Welcome to today's PLP. The problems will be projected in the presentation space after lunch time.<br>\nIf you are interested in pairing, come to the presentation space at 1:45 to find a partner.<br>\nIf you are interested in discussing afterwards, come to the presentation space at 2:45.</p>\n<p>Today's problems have a math and logic puzzle theme. Although clever thinking may help you solve these puzzles quickly and with ease, they can also both be done with standard algorithm tools like graph theory and dynamic programming. Feel free to choose your approach! I'm excited to see if anyone comes up with any clever proofs/ideas.</p>\n<p>Problems:<br>\n<a href=\"https://leetcode.com/problems/water-and-jug-problem/\" target=\"_blank\" title=\"https://leetcode.com/problems/water-and-jug-problem/\">https://leetcode.com/problems/water-and-jug-problem/</a> (medium)<br>\n<a href=\"https://leetcode.com/problems/super-egg-drop/\" target=\"_blank\" title=\"https://leetcode.com/problems/super-egg-drop/\">https://leetcode.com/problems/super-egg-drop/</a> (hard)</p>\n<p>I am a little worried that these problems are too challenging, but I still wanted to try them. If you aren't feeling up to the challenge, or maybe you just want an easier win today, feel free to try this problem! <a href=\"https://leetcode.com/problems/x-of-a-kind-in-a-deck-of-cards/\" target=\"_blank\" title=\"https://leetcode.com/problems/x-of-a-kind-in-a-deck-of-cards/\">https://leetcode.com/problems/x-of-a-kind-in-a-deck-of-cards/</a> I won't project this one, and we will cover it last if we have interest.</p>\n<p>These problems might be a little challenging, but I'm confident most people will be able to find solution that takes a little extra time or memory. Feel free to message me with questions. Host: <span class=\"user-mention\" data-user-id=\"129956\">@Chun Li (F2'18)</span></p>",
            "content_type": "text/html",
            "display_recipient": "Post-Lunch Prep (PLP)",
            "flags": [
                "read",
                "historical"
            ],
            "id": 151018334,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 183179,
            "sender_email": "chunli.developer@gmail.com",
            "sender_full_name": "Chun Li (he) (F2'18)",
            "sender_id": 129956,
            "sender_realm_str": "recurse",
            "stream_id": 144212,
            "subject": "Thursday, 6 December 2018",
            "submessages": [],
            "timestamp": 1544112807,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/571b89a2b2bc0b41aaf28b6a11873fa06ce8f4d7?x=x&version=2",
            "client": "website",
            "content": "<p>did anyone do the water and jug problem with a graph search instead of the math solution? just curious, i did it this way and initially got memory exceeded errors, had to do some hacky stuff to get it to pass, curious if there was an optimization</p>",
            "content_type": "text/html",
            "display_recipient": "Post-Lunch Prep (PLP)",
            "flags": [
                "read",
                "historical"
            ],
            "id": 151043472,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 183179,
            "sender_email": "jven@jvenezue.la",
            "sender_full_name": "Justin Venezuela (he) (W1'18)",
            "sender_id": 134311,
            "sender_realm_str": "recurse",
            "stream_id": 144212,
            "subject": "Thursday, 6 December 2018",
            "submessages": [],
            "timestamp": 1544130243,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/ca9f8cb0bcede6fa920c47295ad4e7a972c9f863?x=x&version=2",
            "client": "ZulipElectron",
            "content": "<p>Notice that given an infinite water supply, the question is essentially asking is there a linear combination of x and y that result in z? In other words: are there integers k and j s.t. z = kx + yj? The answer to this is equivalent to the following: is z divisible by the GCD of x and y? Thus we return z%gcd(x, y) == 0 (with a check to make sure z &lt;= x+y</p>\n<p>The way we got this solution was by taking a look at multiple cases: for example we noted the degenerate case where x == y or x was a multiple of y would be that you had to have z as a multiple of the smaller of the two. Also we tried to consider the difference between the answer since it seemed that the answer had something to do with the \"smallest possible jug\" you could make i.e. if you can make some amount x, all amount kx are possible for natural numbers k. We then guessed that the smallest possible jug is gcd(x, y), which intuitively makes sense since it is the smallest possible number you can make from a linear combination of x and y.</p>\n<p>Sorry I know this isn't a perfect explanation but we didn't really prove that our method works. We just kind of ran through test cases and used intuition</p>\n<p>EDIT: also i reread your comment and realized you weren't asking for a math explanation sorry :$ :$ :$</p>",
            "content_type": "text/html",
            "display_recipient": "Post-Lunch Prep (PLP)",
            "flags": [
                "read",
                "historical"
            ],
            "id": 151047422,
            "is_me_message": false,
            "last_edit_timestamp": 1544133882,
            "reactions": [],
            "recipient_id": 183179,
            "sender_email": "chunli.developer@gmail.com",
            "sender_full_name": "Chun Li (he) (F2'18)",
            "sender_id": 129956,
            "sender_realm_str": "recurse",
            "stream_id": 144212,
            "subject": "Thursday, 6 December 2018",
            "submessages": [],
            "timestamp": 1544133809,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/6affb49df763896d737ac7e0ed618139?d=identicon&version=1",
            "client": "ZulipElectron",
            "content": "<p>Looks like nobody posted any plp problems today, so I propose the following:</p>\n<ul>\n<li>easier: <a href=\"https://leetcode.com/problems/assign-cookies/description/\" target=\"_blank\" title=\"https://leetcode.com/problems/assign-cookies/description/\">https://leetcode.com/problems/assign-cookies/description/</a></li>\n<li>harder: <a href=\"https://leetcode.com/problems/cheapest-flights-within-k-stops/description/\" target=\"_blank\" title=\"https://leetcode.com/problems/cheapest-flights-within-k-stops/description/\">https://leetcode.com/problems/cheapest-flights-within-k-stops/description/</a></li>\n</ul>",
            "content_type": "text/html",
            "display_recipient": "Post-Lunch Prep (PLP)",
            "flags": [
                "read",
                "historical"
            ],
            "id": 151294804,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 183179,
            "sender_email": "dbgoldberg01@gmail.com",
            "sender_full_name": "David Goldberg (he) (W1'18)",
            "sender_id": 134182,
            "sender_realm_str": "recurse",
            "stream_id": 144212,
            "subject": "Monday, 10 December 2018",
            "submessages": [],
            "timestamp": 1544467412,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/51eb74b84b6765b1128907e8bfac5454c5e693dd?x=x&version=2",
            "client": "ZulipElectron",
            "content": "<p>For those of us who want to keep PLP going into next year-- should we do a handover? Is there a bot or something that assigns leaders to each day?</p>",
            "content_type": "text/html",
            "display_recipient": "Post-Lunch Prep (PLP)",
            "flags": [
                "read",
                "historical"
            ],
            "id": 151401001,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 183179,
            "sender_email": "michellemmh@gmail.com",
            "sender_full_name": "Michelle Ho (she) (W1'18)",
            "sender_id": 134467,
            "sender_realm_str": "recurse",
            "stream_id": 144212,
            "subject": "Monday, 10 December 2018",
            "submessages": [],
            "timestamp": 1544475646,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/38f320cd24a45f367ed2485034b90adb46a9d738?x=x&version=2",
            "client": "website",
            "content": "<p>cc <span class=\"user-mention\" data-user-id=\"130181\">@Gretchen Wright (F2'18)</span></p>",
            "content_type": "text/html",
            "display_recipient": "Post-Lunch Prep (PLP)",
            "flags": [
                "read",
                "historical"
            ],
            "id": 151401055,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 183179,
            "sender_email": "asinghamgoodwin@gmail.com",
            "sender_full_name": "Alicia Thilani Singham Goodwin (she) (F1'16)",
            "sender_id": 8469,
            "sender_realm_str": "recurse",
            "stream_id": 144212,
            "subject": "Monday, 10 December 2018",
            "submessages": [],
            "timestamp": 1544475707,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/927039f8a9a749e3be410a6969f8e2e8175cedf4?x=x&version=2",
            "client": "website",
            "content": "<p>Thanks for asking, <span class=\"user-mention\" data-user-id=\"134467\">@Michelle Ho (W1'18)</span> ! I met with <span class=\"user-mention\" data-user-id=\"134599\">@Patrick McCarver (W1'18)</span> yesterday and we went over the operation of the Raspberry Pi and considerations for problem selection.<br>\nAs for the bot, I am planning on improving it over the break. I may pair with Patrick and/or <span class=\"user-mention\" data-user-id=\"130406\">@Heime S Ashkenazie (F2'18)</span>  on that depending on schedules. Hopefully I will be able to meet in person with Patrick or someone from the continuing batch in January to go over that, but in any case I'll write some notes and I'll be available over Zulip.<br>\n<span class=\"user-mention\" data-user-id=\"8469\">@Alicia Thilani Singham Goodwin (F1'17)</span> , we didn't talk about the PLP-hosts stream. Is there a way for me to transfer ownership or should the new grouip start a new stream? (The bot sends messages to the stream so if we changes streams that would have to be updated.)</p>",
            "content_type": "text/html",
            "display_recipient": "Post-Lunch Prep (PLP)",
            "flags": [
                "read",
                "historical"
            ],
            "id": 151456003,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 183179,
            "sender_email": "gretchen.m.wright@gmail.com",
            "sender_full_name": "Gretchen Wright (she) (F2'18)",
            "sender_id": 130181,
            "sender_realm_str": "recurse",
            "stream_id": 144212,
            "subject": "Next batch",
            "submessages": [],
            "timestamp": 1544543938,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/46fc5295ff53a9173234c8c6bd09c245?d=identicon&version=1",
            "client": "ZulipElectron",
            "content": "<p>Hi <span class=\"user-mention\" data-user-id=\"*\">@all</span> </p>\n<p>Welcome to today's PLP. </p>\n<p>Today the problems are from Advent of code 2018 - <a href=\"https://adventofcode.com/\" target=\"_blank\" title=\"https://adventofcode.com/\">https://adventofcode.com/</a>.</p>\n<p>Problems:<br>\nToday's problem: <a href=\"https://adventofcode.com/2018/day/11\" target=\"_blank\" title=\"https://adventofcode.com/2018/day/11\">https://adventofcode.com/2018/day/11</a> (more difficult)<br>\nDay 3 problem to start: <a href=\"https://adventofcode.com/2018/day/3\" target=\"_blank\" title=\"https://adventofcode.com/2018/day/3\">https://adventofcode.com/2018/day/3</a> (easier)</p>\n<p>If you are interested in pairing, come to the presentation space at 1:45 to find a partner.<br>\nIf you've solved today's problem already, come to the presentation space at 2:45 to discuss it!</p>\n<p>Feel free to message me with questions. Host:  <span class=\"user-mention\" data-user-id=\"129939\">@Marina Inina (F2'18)</span> </p>\n<p>Also, if you'd like for PLP to continue, now is the right time to ask how. ;)</p>",
            "content_type": "text/html",
            "display_recipient": "Post-Lunch Prep (PLP)",
            "flags": [
                "read",
                "historical"
            ],
            "id": 151465841,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 183179,
            "sender_email": "nekanek@protonmail.com",
            "sender_full_name": "Marina Inina (she) (F2'18)",
            "sender_id": 129939,
            "sender_realm_str": "recurse",
            "stream_id": 144212,
            "subject": "Tuesday, 11 December 2018",
            "submessages": [],
            "timestamp": 1544551162,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/927039f8a9a749e3be410a6969f8e2e8175cedf4?x=x&version=2",
            "client": "website",
            "content": "<p>Hi <span class=\"user-mention\" data-user-id=\"*\">@all</span> </p>\n<p>Welcome to today's PLP.</p>\n<p>Today we are branching out to a different problem source again, namely Project Euler. You'll need to create an account in order to have your responses graded, but it is free and completely non-commercial.</p>\n<p>Problems:<br>\n<a href=\"https://projecteuler.net/problem=28\" target=\"_blank\" title=\"https://projecteuler.net/problem=28\">Spiral diagonal numbers</a> - easier<br>\n<a href=\"https://projecteuler.net/problem=85\" target=\"_blank\" title=\"https://projecteuler.net/problem=85\">Counting rectangles</a> - more difficult</p>\n<p>If you are interested in pairing, come to the presentation space at 1:45 to find a partner.<br>\nIf you've solved today's problem already, come to the presentation space at 2:45 to discuss it!</p>\n<p>Host: <span class=\"user-mention\" data-user-id=\"130181\">@Gretchen Wright (F2'18)</span>  Please reach out to me with any questions or feedback!</p>",
            "content_type": "text/html",
            "display_recipient": "Post-Lunch Prep (PLP)",
            "flags": [
                "read",
                "historical"
            ],
            "id": 151532897,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 183179,
            "sender_email": "gretchen.m.wright@gmail.com",
            "sender_full_name": "Gretchen Wright (she) (F2'18)",
            "sender_id": 130181,
            "sender_realm_str": "recurse",
            "stream_id": 144212,
            "subject": "Wednesday, 12 December 2018",
            "submessages": [],
            "timestamp": 1544629045,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/1fdd84a57c15f7ecfdded3d0c32019ad32f8af5d?x=x&version=5",
            "client": "website",
            "content": "<p>day 11 / chronal charge</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">def</span> <span class=\"nf\">power_level</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">,</span> <span class=\"n\">s_no</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"p\">((((</span><span class=\"n\">x</span> <span class=\"o\">+</span> <span class=\"mi\">10</span><span class=\"p\">)</span> <span class=\"o\">*</span> <span class=\"n\">y</span> <span class=\"o\">+</span> <span class=\"n\">s_no</span><span class=\"p\">)</span> <span class=\"o\">*</span> <span class=\"p\">(</span><span class=\"n\">x</span> <span class=\"o\">+</span> <span class=\"mi\">10</span><span class=\"p\">)</span> <span class=\"o\">/</span> <span class=\"mi\">100</span><span class=\"p\">)</span> <span class=\"o\">%</span> <span class=\"mi\">10</span><span class=\"p\">)</span> <span class=\"o\">-</span> <span class=\"mi\">5</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">power_grid</span><span class=\"p\">(</span><span class=\"n\">s_no</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"p\">[[</span><span class=\"n\">power_level</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">,</span> <span class=\"n\">s_no</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">x</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">300</span><span class=\"p\">)]</span> <span class=\"k\">for</span> <span class=\"n\">y</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">300</span><span class=\"p\">)]</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">prefix_grid</span><span class=\"p\">(</span><span class=\"n\">grid</span><span class=\"p\">):</span>\n    <span class=\"k\">for</span> <span class=\"n\">y</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">grid</span><span class=\"p\">)):</span>\n        <span class=\"k\">for</span> <span class=\"n\">x</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">grid</span><span class=\"p\">[</span><span class=\"n\">y</span><span class=\"p\">])):</span>\n            <span class=\"k\">if</span> <span class=\"n\">y</span> <span class=\"o\">==</span> <span class=\"mi\">0</span> <span class=\"ow\">and</span> <span class=\"n\">x</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">:</span>\n                <span class=\"k\">continue</span>\n            <span class=\"k\">elif</span> <span class=\"n\">y</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">:</span>\n                <span class=\"n\">grid</span><span class=\"p\">[</span><span class=\"n\">y</span><span class=\"p\">][</span><span class=\"n\">x</span><span class=\"p\">]</span> <span class=\"o\">+=</span> <span class=\"n\">grid</span><span class=\"p\">[</span><span class=\"n\">y</span><span class=\"p\">][</span><span class=\"n\">x</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">]</span>\n            <span class=\"k\">elif</span> <span class=\"n\">x</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">:</span>\n                <span class=\"n\">grid</span><span class=\"p\">[</span><span class=\"n\">y</span><span class=\"p\">][</span><span class=\"n\">x</span><span class=\"p\">]</span> <span class=\"o\">+=</span> <span class=\"n\">grid</span><span class=\"p\">[</span><span class=\"n\">y</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">][</span><span class=\"n\">x</span><span class=\"p\">]</span>\n            <span class=\"k\">else</span><span class=\"p\">:</span>\n                <span class=\"n\">grid</span><span class=\"p\">[</span><span class=\"n\">y</span><span class=\"p\">][</span><span class=\"n\">x</span><span class=\"p\">]</span> <span class=\"o\">+=</span> <span class=\"n\">grid</span><span class=\"p\">[</span><span class=\"n\">y</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">][</span><span class=\"n\">x</span><span class=\"p\">]</span> <span class=\"o\">+</span> <span class=\"n\">grid</span><span class=\"p\">[</span><span class=\"n\">y</span><span class=\"p\">][</span><span class=\"n\">x</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">-</span> <span class=\"n\">grid</span><span class=\"p\">[</span><span class=\"n\">y</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">][</span><span class=\"n\">x</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">]</span>\n    <span class=\"k\">return</span> <span class=\"n\">grid</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">max_block</span><span class=\"p\">(</span><span class=\"n\">p_grid</span><span class=\"p\">):</span>\n    <span class=\"n\">mx</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n    <span class=\"n\">grid</span> <span class=\"o\">=</span> <span class=\"p\">[[</span><span class=\"mi\">0</span> <span class=\"k\">for</span> <span class=\"n\">x</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">p_grid</span><span class=\"p\">[</span><span class=\"n\">y</span><span class=\"p\">]))]</span> <span class=\"k\">for</span> <span class=\"n\">y</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">p_grid</span><span class=\"p\">))]</span>\n    <span class=\"k\">for</span> <span class=\"n\">y</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">grid</span><span class=\"p\">)</span><span class=\"o\">-</span><span class=\"mi\">2</span><span class=\"p\">):</span>\n        <span class=\"k\">for</span> <span class=\"n\">x</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">grid</span><span class=\"p\">[</span><span class=\"n\">y</span><span class=\"p\">])</span><span class=\"o\">-</span><span class=\"mi\">2</span><span class=\"p\">):</span>\n            <span class=\"k\">if</span> <span class=\"n\">y</span> <span class=\"o\">==</span> <span class=\"mi\">0</span> <span class=\"ow\">and</span> <span class=\"n\">x</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">:</span>\n                <span class=\"n\">grid</span><span class=\"p\">[</span><span class=\"n\">y</span><span class=\"p\">][</span><span class=\"n\">x</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">p_grid</span><span class=\"p\">[</span><span class=\"n\">y</span><span class=\"o\">+</span><span class=\"mi\">2</span><span class=\"p\">][</span><span class=\"n\">x</span><span class=\"o\">+</span><span class=\"mi\">2</span><span class=\"p\">]</span>\n            <span class=\"k\">elif</span> <span class=\"n\">y</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">:</span>\n                <span class=\"n\">grid</span><span class=\"p\">[</span><span class=\"n\">y</span><span class=\"p\">][</span><span class=\"n\">x</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">p_grid</span><span class=\"p\">[</span><span class=\"n\">y</span><span class=\"o\">+</span><span class=\"mi\">2</span><span class=\"p\">][</span><span class=\"n\">x</span><span class=\"o\">+</span><span class=\"mi\">2</span><span class=\"p\">]</span> <span class=\"o\">-</span> <span class=\"n\">p_grid</span><span class=\"p\">[</span><span class=\"n\">y</span><span class=\"o\">+</span><span class=\"mi\">2</span><span class=\"p\">][</span><span class=\"n\">x</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">]</span>\n            <span class=\"k\">elif</span> <span class=\"n\">x</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">:</span>\n                <span class=\"n\">grid</span><span class=\"p\">[</span><span class=\"n\">y</span><span class=\"p\">][</span><span class=\"n\">x</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">p_grid</span><span class=\"p\">[</span><span class=\"n\">y</span><span class=\"o\">+</span><span class=\"mi\">2</span><span class=\"p\">][</span><span class=\"n\">x</span><span class=\"o\">+</span><span class=\"mi\">2</span><span class=\"p\">]</span> <span class=\"o\">-</span> <span class=\"n\">p_grid</span><span class=\"p\">[</span><span class=\"n\">y</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">][</span><span class=\"n\">x</span><span class=\"o\">+</span><span class=\"mi\">2</span><span class=\"p\">]</span>\n            <span class=\"k\">else</span><span class=\"p\">:</span>\n                <span class=\"n\">grid</span><span class=\"p\">[</span><span class=\"n\">y</span><span class=\"p\">][</span><span class=\"n\">x</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">p_grid</span><span class=\"p\">[</span><span class=\"n\">y</span><span class=\"o\">+</span><span class=\"mi\">2</span><span class=\"p\">][</span><span class=\"n\">x</span><span class=\"o\">+</span><span class=\"mi\">2</span><span class=\"p\">]</span> <span class=\"o\">-</span> <span class=\"n\">p_grid</span><span class=\"p\">[</span><span class=\"n\">y</span><span class=\"o\">+</span><span class=\"mi\">2</span><span class=\"p\">][</span><span class=\"n\">x</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">-</span> <span class=\"n\">p_grid</span><span class=\"p\">[</span><span class=\"n\">y</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">][</span><span class=\"n\">x</span><span class=\"o\">+</span><span class=\"mi\">2</span><span class=\"p\">]</span> <span class=\"o\">+</span> <span class=\"n\">p_grid</span><span class=\"p\">[</span><span class=\"n\">y</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">][</span><span class=\"n\">x</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">]</span>\n            <span class=\"k\">if</span> <span class=\"n\">grid</span><span class=\"p\">[</span><span class=\"n\">y</span><span class=\"p\">][</span><span class=\"n\">x</span><span class=\"p\">]</span> <span class=\"o\">&gt;=</span> <span class=\"n\">grid</span><span class=\"p\">[</span><span class=\"n\">mx</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]][</span><span class=\"n\">mx</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]]:</span>\n                <span class=\"n\">mx</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"n\">mx</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">solve</span><span class=\"p\">(</span><span class=\"n\">s_no</span><span class=\"p\">):</span>\n    <span class=\"n\">grid</span> <span class=\"o\">=</span> <span class=\"n\">power_grid</span><span class=\"p\">(</span><span class=\"n\">s_no</span><span class=\"p\">)</span>\n    <span class=\"n\">p_grid</span> <span class=\"o\">=</span> <span class=\"n\">prefix_grid</span><span class=\"p\">(</span><span class=\"n\">grid</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"n\">max_block</span><span class=\"p\">(</span><span class=\"n\">p_grid</span><span class=\"p\">)</span>\n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "Post-Lunch Prep (PLP)",
            "flags": [
                "read",
                "historical"
            ],
            "id": 151537566,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "+1",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "pekarsky.maxim@gmail.com",
                        "full_name": "Max Pekarsky (he) (W2'19)",
                        "id": 158536
                    },
                    "user_id": 158536
                },
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "+1",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "aaron_wood@protonmail.com",
                        "full_name": "Aaron Wood (he) (F1'18)",
                        "id": 125145
                    },
                    "user_id": 125145
                }
            ],
            "recipient_id": 183179,
            "sender_email": "arpith@feedreader.co",
            "sender_full_name": "Arpith Siromoney (he) (m6'20)",
            "sender_id": 9503,
            "sender_realm_str": "recurse",
            "stream_id": 144212,
            "subject": "Tuesday, 11 December 2018",
            "submessages": [],
            "timestamp": 1544632990,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/787f392240856522f98bd4d40db71ec20edb3d2e?x=x&version=3",
            "client": "ZulipElectron",
            "content": "<p>Hi @all</p>\n<p>Welcome to today's PLP.</p>\n<p>Today we are kicking off PLP for this batch. We are doing problems from Leetcode, you may need to create an account in order to have your responses graded, but it is free and completely non-commercial.</p>\n<p>Problems:<br>\n<a href=\"https://leetcode.com/problems/valid-parentheses/\" target=\"_blank\" title=\"https://leetcode.com/problems/valid-parentheses/\">https://leetcode.com/problems/valid-parentheses/</a><br>\n<a href=\"https://leetcode.com/problems/asteroid-collision/\" target=\"_blank\" title=\"https://leetcode.com/problems/asteroid-collision/\">https://leetcode.com/problems/asteroid-collision/</a></p>\n<p>If you are interested in pairing, come to the presentation space at 1:45 to find a partner.<br>\nIf you've solved today's problem already, come to the presentation space at 2:45 to discuss it!</p>\n<p>Host: <span class=\"user-mention\" data-user-id=\"134599\">@Patrick McCarver (W1'18)</span>  Please reach out to me with any questions or feedback!</p>",
            "content_type": "text/html",
            "display_recipient": "Post-Lunch Prep (PLP)",
            "flags": [
                "read",
                "historical"
            ],
            "id": 154747088,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 183179,
            "sender_email": "pmmhy4@mst.edu",
            "sender_full_name": "Patrick McCarver (they/he) (SP1'19)",
            "sender_id": 134599,
            "sender_realm_str": "recurse",
            "stream_id": 144212,
            "subject": "Wednesday, 12 December 2018",
            "submessages": [],
            "timestamp": 1547059405,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/51eb74b84b6765b1128907e8bfac5454c5e693dd?x=x&version=2",
            "client": "ZulipElectron",
            "content": "<p>Hi @all,</p>\n<p>Welcome to today's PLP. The problems will be projected in the presentation space after lunch time.<br>\nIf you are interested in pairing, come to the presentation space at 1:45 to find a partner.<br>\nIf you are interested in discussing afterwards, come to the presentation space at 2:45.</p>\n<p>Today's problems have a depth-first-search theme.</p>\n<p>Problems:<br>\n<a href=\"https://leetcode.com/problems/symmetric-tree/description/\" target=\"_blank\" title=\"https://leetcode.com/problems/symmetric-tree/description/\">https://leetcode.com/problems/symmetric-tree/description/</a> (easy)<br>\n<a href=\"https://leetcode.com/problems/matchsticks-to-square/\" target=\"_blank\" title=\"https://leetcode.com/problems/matchsticks-to-square/\">https://leetcode.com/problems/matchsticks-to-square/</a> (medium)</p>",
            "content_type": "text/html",
            "display_recipient": "Post-Lunch Prep (PLP)",
            "flags": [
                "read",
                "historical"
            ],
            "id": 154851698,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 183179,
            "sender_email": "michellemmh@gmail.com",
            "sender_full_name": "Michelle Ho (she) (W1'18)",
            "sender_id": 134467,
            "sender_realm_str": "recurse",
            "stream_id": 144212,
            "subject": "Thursday, 10 January 2018",
            "submessages": [],
            "timestamp": 1547137892,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/787f392240856522f98bd4d40db71ec20edb3d2e?x=x&version=3",
            "client": "ZulipElectron",
            "content": "<p>Hi @all,</p>\n<p>Welcome to today's PLP. The problems will be projected in the presentation space after lunch time.<br>\nIf you are interested in pairing, come to the presentation space at 1:45 to find a partner.<br>\nIf you are interested in discussing afterwards, come to the presentation space at 2:45.</p>\n<p>Today's problems have a trie theme.</p>\n<p>Problems:<br>\n<a href=\"https://leetcode.com/problems/longest-word-in-dictionary/\" target=\"_blank\" title=\"https://leetcode.com/problems/longest-word-in-dictionary/\">https://leetcode.com/problems/longest-word-in-dictionary/</a><br>\n<a href=\"https://leetcode.com/problems/implement-trie-prefix-tree/\" target=\"_blank\" title=\"https://leetcode.com/problems/implement-trie-prefix-tree/\">https://leetcode.com/problems/implement-trie-prefix-tree/</a></p>",
            "content_type": "text/html",
            "display_recipient": "Post-Lunch Prep (PLP)",
            "flags": [
                "read",
                "historical"
            ],
            "id": 155104806,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 183179,
            "sender_email": "pmmhy4@mst.edu",
            "sender_full_name": "Patrick McCarver (they/he) (SP1'19)",
            "sender_id": 134599,
            "sender_realm_str": "recurse",
            "stream_id": 144212,
            "subject": "Monday, 14 January 2019",
            "submessages": [],
            "timestamp": 1547490610,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/d159283c62cbe787d5a345355689fb85f176a995?x=x&version=2",
            "client": "website",
            "content": "<p>Patrick's and my solution to problem 720</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">class</span> <span class=\"nc\">Solution</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"nf\">longestWord</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">words</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">        :type words: List[str]</span>\n<span class=\"sd\">        :rtype: str</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"n\">masterNode</span> <span class=\"o\">=</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"s2\">&quot;&quot;</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n\n        <span class=\"n\">words</span><span class=\"o\">.</span><span class=\"n\">sort</span><span class=\"p\">(</span><span class=\"n\">reverse</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n\n        <span class=\"n\">words</span><span class=\"o\">.</span><span class=\"n\">sort</span><span class=\"p\">(</span><span class=\"n\">key</span><span class=\"o\">=</span><span class=\"nb\">len</span><span class=\"p\">)</span>\n\n\n        <span class=\"k\">for</span> <span class=\"n\">word</span> <span class=\"ow\">in</span> <span class=\"n\">words</span><span class=\"p\">:</span>\n            <span class=\"n\">y</span> <span class=\"o\">=</span> <span class=\"n\">masterNode</span><span class=\"o\">.</span><span class=\"n\">addWord</span><span class=\"p\">(</span><span class=\"n\">word</span><span class=\"p\">)</span>\n            <span class=\"k\">if</span> <span class=\"n\">y</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n                <span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"n\">y</span>\n\n        <span class=\"k\">return</span> <span class=\"n\">x</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">Node</span><span class=\"p\">():</span>\n\n        <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">string</span><span class=\"p\">,</span> <span class=\"n\">size</span><span class=\"p\">):</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">string</span> <span class=\"o\">=</span> <span class=\"n\">string</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">size</span> <span class=\"o\">=</span> <span class=\"n\">size</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">children</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>\n\n\n        <span class=\"k\">def</span> <span class=\"nf\">addWord</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">word</span><span class=\"p\">):</span>\n            <span class=\"k\">if</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">word</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">size</span><span class=\"p\">:</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">children</span><span class=\"p\">[</span><span class=\"n\">word</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"n\">word</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">size</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n                <span class=\"k\">return</span> <span class=\"n\">word</span>\n            <span class=\"k\">else</span><span class=\"p\">:</span>\n                <span class=\"n\">substring</span> <span class=\"o\">=</span> <span class=\"n\">word</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">:</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">size</span><span class=\"p\">]</span>\n                <span class=\"k\">if</span> <span class=\"n\">substring</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">children</span><span class=\"p\">:</span>\n                    <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">children</span><span class=\"p\">[</span><span class=\"n\">substring</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">addWord</span><span class=\"p\">(</span><span class=\"n\">word</span><span class=\"p\">)</span>\n        <span class=\"err\">```</span>\n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "Post-Lunch Prep (PLP)",
            "flags": [
                "read",
                "historical"
            ],
            "id": 155113172,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 183179,
            "sender_email": "benhmayer@gmail.com",
            "sender_full_name": "Benjamin Henry Mayer (he) (W2'19)",
            "sender_id": 158662,
            "sender_realm_str": "recurse",
            "stream_id": 144212,
            "subject": "Monday, 14 January 2019",
            "submessages": [],
            "timestamp": 1547497116,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/1316da00218a425032fe2e4a5a1bf125?d=identicon&version=1",
            "client": "website",
            "content": "<p>Hi @all</p>\n<p>Welcome to today's PLP. The problems will be projected in the presentation space after lunch time.<br>\nIf you are interested in pairing, come to the presentation space at 1:45 to find a partner.<br>\nIf you are interested in discussing afterwards, come to the presentation space at 2:45.</p>\n<p>Problems:<br>\n<a href=\"https://leetcode.com/problems/longest-univalue-path/\" target=\"_blank\" title=\"https://leetcode.com/problems/longest-univalue-path/\">https://leetcode.com/problems/longest-univalue-path/</a> (easy)<br>\n<a href=\"https://leetcode.com/problems/number-of-atoms/\" target=\"_blank\" title=\"https://leetcode.com/problems/number-of-atoms/\">https://leetcode.com/problems/number-of-atoms/</a> (hard)</p>\n<p>If you are interested in pairing, come to the presentation space at 1:45 to find a partner.<br>\nIf you've solved today's problem already, come to the presentation space at 2:45 to discuss it!</p>\n<p>Host: <span class=\"user-mention\" data-user-id=\"134184\">@Billy Kaplan (W1'18)</span>  Please reach out to me with any questions or feedback!</p>",
            "content_type": "text/html",
            "display_recipient": "Post-Lunch Prep (PLP)",
            "flags": [
                "read",
                "historical"
            ],
            "id": 155190464,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f419",
                    "emoji_name": "octopus",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "jacklyn.liu@gmail.com",
                        "full_name": "Jackie Liu (she) (W1'18)",
                        "id": 134400
                    },
                    "user_id": 134400
                }
            ],
            "recipient_id": 183179,
            "sender_email": "billy1kaplan@gmail.com",
            "sender_full_name": "Billy Kaplan (he) (W1'18)",
            "sender_id": 134184,
            "sender_realm_str": "recurse",
            "stream_id": 144212,
            "subject": "Tuesday, 15 January 2019",
            "submessages": [],
            "timestamp": 1547575746,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/2f4d5ac39489f0ab54afeb08bddc69474d4f819b?x=x&version=2",
            "client": "ZulipElectron",
            "content": "<p>Hi <span class=\"user-mention\" data-user-id=\"*\">@all</span> </p>\n<p>Welcome to today's PLP. The problems will be projected in the presentation space after lunch time.<br>\nIf you are interested in pairing, come to the presentation space at 1:45 to find a partner.<br>\nIf you are interested in discussing afterwards, come to the presentation space at 2:45.</p>\n<p>Problems:<br>\n<a href=\"https://leetcode.com/problems/climbing-stairs/\" target=\"_blank\" title=\"https://leetcode.com/problems/climbing-stairs/\">https://leetcode.com/problems/climbing-stairs/</a> (easy)<br>\n<a href=\"https://leetcode.com/problems/task-scheduler/\" target=\"_blank\" title=\"https://leetcode.com/problems/task-scheduler/\">https://leetcode.com/problems/task-scheduler/</a> (medium)</p>\n<p>If you are interested in pairing, come to the presentation space at 1:45 to find a partner.<br>\nIf you've solved today's problem already, come to the presentation space at 2:45 to discuss it!</p>\n<p>Host: <span class=\"user-mention\" data-user-id=\"134204\">@Jamal Rogers (W1'18)</span>  Please reach out to me with any questions or feedback!</p>",
            "content_type": "text/html",
            "display_recipient": "Post-Lunch Prep (PLP)",
            "flags": [
                "read",
                "historical"
            ],
            "id": 155270731,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 183179,
            "sender_email": "jamala@gmail.com",
            "sender_full_name": "Jamal Rogers (he) (W1'18)",
            "sender_id": 134204,
            "sender_realm_str": "recurse",
            "stream_id": 144212,
            "subject": "Wednesday, 16 January 2019",
            "submessages": [],
            "timestamp": 1547659153,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/441f603e9781392f41699b27170bae7ce1838dd2?x=x&version=2",
            "client": "ZulipElectron",
            "content": "<p>Missed today's session. Could somebody post today's problems?</p>",
            "content_type": "text/html",
            "display_recipient": "Post-Lunch Prep (PLP)",
            "flags": [
                "read",
                "historical"
            ],
            "id": 156633782,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 183179,
            "sender_email": "amy@amycheng.info",
            "sender_full_name": "Amy Cheng (she) (W2'19)",
            "sender_id": 158545,
            "sender_realm_str": "recurse",
            "stream_id": 144212,
            "subject": "Problems for Tuesday, 22 January 2019?",
            "submessages": [],
            "timestamp": 1548186659,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/787f392240856522f98bd4d40db71ec20edb3d2e?x=x&version=3",
            "client": "ZulipElectron",
            "content": "<p>Hi @all</p>\n<p>Welcome to today's PLP. The problems will be projected in the presentation space after lunch time.<br>\nIf you are interested in pairing, come to the presentation space at 1:45 to find a partner.<br>\nIf you are interested in discussing afterwards, come to the presentation space at 2:45.</p>\n<p>Problems:<br>\n<a href=\"https://leetcode.com/problems/intersection-of-two-arrays-ii/\" target=\"_blank\" title=\"https://leetcode.com/problems/intersection-of-two-arrays-ii/\">https://leetcode.com/problems/intersection-of-two-arrays-ii/</a><br>\n<a href=\"https://leetcode.com/problems/median-of-two-sorted-arrays/\" target=\"_blank\" title=\"https://leetcode.com/problems/median-of-two-sorted-arrays/\">https://leetcode.com/problems/median-of-two-sorted-arrays/</a></p>\n<p>If you are interested in pairing, come to the presentation space at 1:45 to find a partner.<br>\nIf you've solved today's problem already, come to the presentation space at 2:45 to discuss it!</p>\n<p>Host: <span class=\"user-mention\" data-user-id=\"134184\">@Billy Kaplan (W1'18)</span> (W1'18) Please reach out to me with any questions or feedback!</p>",
            "content_type": "text/html",
            "display_recipient": "Post-Lunch Prep (PLP)",
            "flags": [
                "read",
                "historical"
            ],
            "id": 156634226,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 183179,
            "sender_email": "pmmhy4@mst.edu",
            "sender_full_name": "Patrick McCarver (they/he) (SP1'19)",
            "sender_id": 134599,
            "sender_realm_str": "recurse",
            "stream_id": 144212,
            "subject": "Tuesday, January 22 2019",
            "submessages": [],
            "timestamp": 1548187018,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/787f392240856522f98bd4d40db71ec20edb3d2e?x=x&version=3",
            "client": "ZulipElectron",
            "content": "<p>Sorry about that, posted today's problems</p>",
            "content_type": "text/html",
            "display_recipient": "Post-Lunch Prep (PLP)",
            "flags": [
                "read",
                "historical"
            ],
            "id": 156634249,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 183179,
            "sender_email": "pmmhy4@mst.edu",
            "sender_full_name": "Patrick McCarver (they/he) (SP1'19)",
            "sender_id": 134599,
            "sender_realm_str": "recurse",
            "stream_id": 144212,
            "subject": "Problems for Tuesday, 22 January 2019?",
            "submessages": [],
            "timestamp": 1548187048,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/2f4d5ac39489f0ab54afeb08bddc69474d4f819b?x=x&version=2",
            "client": "ZulipElectron",
            "content": "<p>Hi <span class=\"user-mention\" data-user-id=\"*\">@all</span> </p>\n<p>Welcome to today's PLP. The problems will be projected in the presentation space after lunch time.<br>\nIf you are interested in pairing, come to the presentation space at 1:45 to find a partner.<br>\nIf you are interested in discussing afterwards, come to the presentation space at 2:45.</p>\n<p>Problems:<br>\n<a href=\"https://leetcode.com/problems/redundant-connection/description/\" target=\"_blank\" title=\"https://leetcode.com/problems/redundant-connection/description/\">https://leetcode.com/problems/redundant-connection/description/</a><br>\n<a href=\"https://leetcode.com/problems/non-overlapping-intervals/description/\" target=\"_blank\" title=\"https://leetcode.com/problems/non-overlapping-intervals/description/\">https://leetcode.com/problems/non-overlapping-intervals/description/</a></p>\n<p>If you are interested in pairing, come to the presentation space at 1:45 to find a partner.<br>\nIf you've solved today's problem already, come to the presentation space at 2:45 to discuss it!</p>\n<p>Host: <span class=\"user-mention\" data-user-id=\"134204\">@Jamal Rogers (W1'18)</span>  Please reach out to me with any questions or feedback!</p>",
            "content_type": "text/html",
            "display_recipient": "Post-Lunch Prep (PLP)",
            "flags": [
                "read",
                "historical"
            ],
            "id": 156709626,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 183179,
            "sender_email": "jamala@gmail.com",
            "sender_full_name": "Jamal Rogers (he) (W1'18)",
            "sender_id": 134204,
            "sender_realm_str": "recurse",
            "stream_id": 144212,
            "subject": "Wednesday, 23 January 2019",
            "submessages": [],
            "timestamp": 1548266071,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/787f392240856522f98bd4d40db71ec20edb3d2e?x=x&version=3",
            "client": "ZulipElectron",
            "content": "<p>Hi @all</p>\n<p>Welcome to today's PLP. The problems will be projected in the presentation space after lunch time.<br>\nIf you are interested in pairing, come to the presentation space at 1:45 to find a partner.<br>\nIf you are interested in discussing afterwards, come to the presentation space at 2:45.</p>\n<p>Problems:<br>\n<a href=\"https://leetcode.com/problems/walking-robot-simulation/\" target=\"_blank\" title=\"https://leetcode.com/problems/walking-robot-simulation/\">https://leetcode.com/problems/walking-robot-simulation/</a><br>\n<a href=\"https://leetcode.com/problems/minesweeper/\" target=\"_blank\" title=\"https://leetcode.com/problems/minesweeper/\">https://leetcode.com/problems/minesweeper/</a></p>\n<p>If you are interested in pairing, come to the presentation space at 1:45 to find a partner.<br>\nIf you've solved today's problem already, come to the presentation space at 2:45 to discuss it!</p>\n<p>Host: <span class=\"user-mention\" data-user-id=\"134181\">@Douglas Lerner (W1'18)</span>  Please reach out to me with any questions or feedback!</p>",
            "content_type": "text/html",
            "display_recipient": "Post-Lunch Prep (PLP)",
            "flags": [
                "read",
                "historical"
            ],
            "id": 156795526,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 183179,
            "sender_email": "pmmhy4@mst.edu",
            "sender_full_name": "Patrick McCarver (they/he) (SP1'19)",
            "sender_id": 134599,
            "sender_realm_str": "recurse",
            "stream_id": 144212,
            "subject": "Thursday, 24 January 2019",
            "submessages": [],
            "timestamp": 1548355481,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/51eb74b84b6765b1128907e8bfac5454c5e693dd?x=x&version=2",
            "client": "ZulipElectron",
            "content": "<p>Hey @all! Welcome to today's PLP. Today I'm repeating a PLP problem from the fall that I didn't get to complete (the coin change one) so sorry if anyone has already done that one recently! The second one is about planting non-adjacent flowers <span aria-label=\"flower\" class=\"emoji emoji-1f337\" role=\"img\" title=\"flower\">:flower:</span></p>\n<p><a href=\"https://leetcode.com/problems/coin-change\" target=\"_blank\" title=\"https://leetcode.com/problems/coin-change\">https://leetcode.com/problems/coin-change</a> (medium)<br>\n<a href=\"https://leetcode.com/problems/can-place-flowers/\" target=\"_blank\" title=\"https://leetcode.com/problems/can-place-flowers/\">https://leetcode.com/problems/can-place-flowers/</a> (easy)</p>\n<p>If you are interested in pairing, come to the presentation space at 1:45 to find a partner.<br>\nIf you've solved today's problem already, come to the presentation space at 2:45 to discuss it!</p>",
            "content_type": "text/html",
            "display_recipient": "Post-Lunch Prep (PLP)",
            "flags": [
                "read",
                "historical"
            ],
            "id": 157037781,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 183179,
            "sender_email": "michellemmh@gmail.com",
            "sender_full_name": "Michelle Ho (she) (W1'18)",
            "sender_id": 134467,
            "sender_realm_str": "recurse",
            "stream_id": 144212,
            "subject": "Monday, January 28 2019",
            "submessages": [],
            "timestamp": 1548693086,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/51eb74b84b6765b1128907e8bfac5454c5e693dd?x=x&version=2",
            "client": "ZulipElectron",
            "content": "<p>@all PLP is starting now in the presentation space</p>",
            "content_type": "text/html",
            "display_recipient": "Post-Lunch Prep (PLP)",
            "flags": [
                "read",
                "historical"
            ],
            "id": 157047610,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 183179,
            "sender_email": "michellemmh@gmail.com",
            "sender_full_name": "Michelle Ho (she) (W1'18)",
            "sender_id": 134467,
            "sender_realm_str": "recurse",
            "stream_id": 144212,
            "subject": "Monday, January 28 2019",
            "submessages": [],
            "timestamp": 1548701217,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/51eb74b84b6765b1128907e8bfac5454c5e693dd?x=x&version=2",
            "client": "ZulipElectron",
            "content": "<p>Thanks to everyone who came out to PLP today! <span class=\"user-mention\" data-user-id=\"158532\">@Tenor (W2'19)</span> <span class=\"user-mention\" data-user-id=\"198446\">@Mari Galicer (W2'19)</span> <span class=\"user-mention\" data-user-id=\"158580\">@Felix Biggs (W2'19)</span> <span class=\"user-mention\" data-user-id=\"198212\">@Thomas Gardner (W2'19)</span> <span class=\"user-mention\" data-user-id=\"134184\">@Billy Kaplan (W1'18)</span>  This PLP was a small personal victory for me. About 2 months ago, I attempted to do the Coin Change problem and almost had no idea where to start. Now having read up a bit on algorithms, I was able to finish the challenge and do it with dynamic programming! <span aria-label=\"tada\" class=\"emoji emoji-1f389\" role=\"img\" title=\"tada\">:tada:</span> recurse magic!</p>",
            "content_type": "text/html",
            "display_recipient": "Post-Lunch Prep (PLP)",
            "flags": [
                "read",
                "historical"
            ],
            "id": 157059014,
            "is_me_message": false,
            "last_edit_timestamp": 1548710866,
            "reactions": [
                {
                    "emoji_code": "1f33f",
                    "emoji_name": "plant",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "tmg@fastmail.com",
                        "full_name": "Thomas Gardner (W2'19)",
                        "id": 198212
                    },
                    "user_id": 198212
                },
                {
                    "emoji_code": "1f389",
                    "emoji_name": "tada",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "tmg@fastmail.com",
                        "full_name": "Thomas Gardner (W2'19)",
                        "id": 198212
                    },
                    "user_id": 198212
                },
                {
                    "emoji_code": "1f389",
                    "emoji_name": "tada",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "benschac@gmail.com",
                        "full_name": "Benjamin Schachter (he/they) (W1'16)",
                        "id": 100320
                    },
                    "user_id": 100320
                },
                {
                    "emoji_code": "1f389",
                    "emoji_name": "tada",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "alancodes@gmail.com",
                        "full_name": "Alan Chu (he) (SP2'19)",
                        "id": 134387
                    },
                    "user_id": 134387
                },
                {
                    "emoji_code": "1f389",
                    "emoji_name": "tada",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "navrajnarula@gmail.com",
                        "full_name": "Navie Narula (she) (W2'19)",
                        "id": 198448
                    },
                    "user_id": 198448
                },
                {
                    "emoji_code": "1f389",
                    "emoji_name": "tada",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "billy1kaplan@gmail.com",
                        "full_name": "Billy Kaplan (he) (W1'18)",
                        "id": 134184
                    },
                    "user_id": 134184
                },
                {
                    "emoji_code": "1f419",
                    "emoji_name": "octopus",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "katie.aszklar@gmail.com",
                        "full_name": "Katie Aszklar (she) (W2'19)",
                        "id": 198457
                    },
                    "user_id": 198457
                },
                {
                    "emoji_code": "1f389",
                    "emoji_name": "tada",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "katie.aszklar@gmail.com",
                        "full_name": "Katie Aszklar (she) (W2'19)",
                        "id": 198457
                    },
                    "user_id": 198457
                },
                {
                    "emoji_code": "1f389",
                    "emoji_name": "tada",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "daniel.r.burton@gmail.com",
                        "full_name": "Daniel Burton (he) (W2'19)",
                        "id": 158552
                    },
                    "user_id": 158552
                }
            ],
            "recipient_id": 183179,
            "sender_email": "michellemmh@gmail.com",
            "sender_full_name": "Michelle Ho (she) (W1'18)",
            "sender_id": 134467,
            "sender_realm_str": "recurse",
            "stream_id": 144212,
            "subject": "Monday, January 28 2019",
            "submessages": [],
            "timestamp": 1548710787,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/1316da00218a425032fe2e4a5a1bf125?d=identicon&version=1",
            "client": "website",
            "content": "<p>Hey @all! Welcome to today's PLP. Sorry for the late post, here are the problems for today:</p>\n<p><a href=\"https://leetcode.com/problems/x-of-a-kind-in-a-deck-of-cards/description/\" target=\"_blank\" title=\"https://leetcode.com/problems/x-of-a-kind-in-a-deck-of-cards/description/\">https://leetcode.com/problems/x-of-a-kind-in-a-deck-of-cards/description/</a> (easy)<br>\n<a href=\"https://leetcode.com/problems/teemo-attacking/description/\" target=\"_blank\" title=\"https://leetcode.com/problems/teemo-attacking/description/\">https://leetcode.com/problems/teemo-attacking/description/</a> (medium)</p>",
            "content_type": "text/html",
            "display_recipient": "Post-Lunch Prep (PLP)",
            "flags": [
                "read",
                "historical"
            ],
            "id": 157128574,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 183179,
            "sender_email": "billy1kaplan@gmail.com",
            "sender_full_name": "Billy Kaplan (he) (W1'18)",
            "sender_id": 134184,
            "sender_realm_str": "recurse",
            "stream_id": 144212,
            "subject": "Tuesday, January 2019",
            "submessages": [],
            "timestamp": 1548788422,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/2f4d5ac39489f0ab54afeb08bddc69474d4f819b?x=x&version=2",
            "client": "ZulipElectron",
            "content": "<p>Hi <span class=\"user-mention\" data-user-id=\"*\">@all</span> </p>\n<p>Welcome to today's PLP. The problems will be projected in the presentation space after lunch time.<br>\nIf you are interested in pairing, come to the presentation space at 1:45 to find a partner.<br>\nIf you are interested in discussing afterwards, come to the presentation space at 2:45.</p>\n<p>Problems:<br>\n<a href=\"https://leetcode.com/problems/majority-element/\" target=\"_blank\" title=\"https://leetcode.com/problems/majority-element/\">https://leetcode.com/problems/majority-element/</a> (easy)<br>\n<a href=\"https://leetcode.com/problems/longest-valid-parentheses/\" target=\"_blank\" title=\"https://leetcode.com/problems/longest-valid-parentheses/\">https://leetcode.com/problems/longest-valid-parentheses/</a> (hard)</p>\n<p>If you are interested in pairing, come to the presentation space at 1:45 to find a partner.<br>\nIf you've solved today's problem already, come to the presentation space at 2:45 to discuss it!</p>\n<p>Host: <span class=\"user-mention\" data-user-id=\"134204\">@Jamal Rogers (W1'18)</span>  Please reach out to me with any questions or feedback!</p>",
            "content_type": "text/html",
            "display_recipient": "Post-Lunch Prep (PLP)",
            "flags": [
                "read",
                "historical"
            ],
            "id": 157207176,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 183179,
            "sender_email": "jamala@gmail.com",
            "sender_full_name": "Jamal Rogers (he) (W1'18)",
            "sender_id": 134204,
            "sender_realm_str": "recurse",
            "stream_id": 144212,
            "subject": "Wednesday, 30 January 2019",
            "submessages": [],
            "timestamp": 1548871575,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/b2a6b06ba040fd7f7c2acd4d1440e7de?d=identicon&version=1",
            "client": "ZulipMobile",
            "content": "<p>Interesting algorithm (O(1) extra memory!) for the first task, now that the event is mostly over: <a href=\"https://en.m.wikipedia.org/wiki/Boyer%E2%80%93Moore_majority_vote_algorithm\" target=\"_blank\" title=\"https://en.m.wikipedia.org/wiki/Boyer%E2%80%93Moore_majority_vote_algorithm\">https://en.m.wikipedia.org/wiki/Boyer%E2%80%93Moore_majority_vote_algorithm</a></p>",
            "content_type": "text/html",
            "display_recipient": "Post-Lunch Prep (PLP)",
            "flags": [
                "read",
                "historical"
            ],
            "id": 157216372,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f419",
                    "emoji_name": "octopus",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "contact@felixbiggs.com",
                        "full_name": "Felix Biggs (he) (W2'19)",
                        "id": 158580
                    },
                    "user_id": 158580
                }
            ],
            "recipient_id": 183179,
            "sender_email": "mauricio@collares.org",
            "sender_full_name": "Mauricio Collares (he) (W2'19)",
            "sender_id": 158563,
            "sender_realm_str": "recurse",
            "stream_id": 144212,
            "subject": "Wednesday, 30 January 2019",
            "submessages": [],
            "timestamp": 1548877974,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/17cc9e2bc66dfd8fa02944eb84c6c1aba10235e0?x=x&version=2",
            "client": "website",
            "content": "<p>Today's Problems:<br>\n<a href=\"https://leetcode.com/problems/single-number/\" target=\"_blank\" title=\"https://leetcode.com/problems/single-number/\">https://leetcode.com/problems/single-number/</a><br>\n<a href=\"https://leetcode.com/problems/score-after-flipping-matrix/\" target=\"_blank\" title=\"https://leetcode.com/problems/score-after-flipping-matrix/\">https://leetcode.com/problems/score-after-flipping-matrix/</a></p>",
            "content_type": "text/html",
            "display_recipient": "Post-Lunch Prep (PLP)",
            "flags": [
                "read",
                "historical"
            ],
            "id": 157294927,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "+1",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "hola@michelletorres.mx",
                        "full_name": "Michelle Torres (she) (W2'19)",
                        "id": 198461
                    },
                    "user_id": 198461
                }
            ],
            "recipient_id": 183179,
            "sender_email": "doug012310@yahoo.com",
            "sender_full_name": "Douglas Lerner (he) (W1'18)",
            "sender_id": 134181,
            "sender_realm_str": "recurse",
            "stream_id": 144212,
            "subject": "Thursday 1/31 2019",
            "submessages": [],
            "timestamp": 1548960639,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/ab772058030721ef1c85f4d7692609dc?d=identicon&version=1",
            "client": "website",
            "content": "<p>For the XOR solution, I found this article!<br>\n<a href=\"https://hackernoon.com/xor-the-magical-bit-wise-operator-24d3012ed821\" target=\"_blank\" title=\"https://hackernoon.com/xor-the-magical-bit-wise-operator-24d3012ed821\">https://hackernoon.com/xor-the-magical-bit-wise-operator-24d3012ed821</a></p>",
            "content_type": "text/html",
            "display_recipient": "Post-Lunch Prep (PLP)",
            "flags": [
                "read",
                "historical"
            ],
            "id": 157308292,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 183179,
            "sender_email": "hola@michelletorres.mx",
            "sender_full_name": "Michelle Torres (she) (W2'19)",
            "sender_id": 198461,
            "sender_realm_str": "recurse",
            "stream_id": 144212,
            "subject": "Thursday 1/31 2019",
            "submessages": [],
            "timestamp": 1548970281,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/51eb74b84b6765b1128907e8bfac5454c5e693dd?x=x&version=2",
            "client": "ZulipElectron",
            "content": "<p>Hi RC! Today's PLP is here. I'm picking one problem that seems to call for dynamic programming again (the house robber)  <span aria-label=\"money\" class=\"emoji emoji-1f4b0\" role=\"img\" title=\"money\">:money:</span> <span aria-label=\"house\" class=\"emoji emoji-1f3e0\" role=\"img\" title=\"house\">:house:</span> and one problem that involves looking for cycles in a directed graph to solve a course scheduling problem <span aria-label=\"graduate\" class=\"emoji emoji-1f393\" role=\"img\" title=\"graduate\">:graduate:</span> </p>\n<p><a href=\"https://leetcode.com/problems/house-robber/\" target=\"_blank\" title=\"https://leetcode.com/problems/house-robber/\">https://leetcode.com/problems/house-robber/</a> (easy)<br>\n<a href=\"https://leetcode.com/problems/course-schedule/description/\" target=\"_blank\" title=\"https://leetcode.com/problems/course-schedule/description/\">https://leetcode.com/problems/course-schedule/description/</a> (medium)</p>\n<p>If you are interested in pairing, come to the presentation space at 1:45 to find a partner.<br>\nIf you've solved today's problem already, come to the presentation space at 2:45 to discuss it!</p>",
            "content_type": "text/html",
            "display_recipient": "Post-Lunch Prep (PLP)",
            "flags": [
                "read",
                "historical"
            ],
            "id": 157536073,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f389",
                    "emoji_name": "tada",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "learningnerd@gmail.com",
                        "full_name": "Liz Krane (she) (W2'19)",
                        "id": 158774
                    },
                    "user_id": 158774
                },
                {
                    "emoji_code": "1f389",
                    "emoji_name": "tada",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "tenorbiel@gmail.com",
                        "full_name": "Tenor Tenor (they/he) (m4'19)",
                        "id": 158532
                    },
                    "user_id": 158532
                }
            ],
            "recipient_id": 183179,
            "sender_email": "michellemmh@gmail.com",
            "sender_full_name": "Michelle Ho (she) (W1'18)",
            "sender_id": 134467,
            "sender_realm_str": "recurse",
            "stream_id": 144212,
            "subject": "Monday Feb 4 2018",
            "submessages": [],
            "timestamp": 1549298382,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/51eb74b84b6765b1128907e8bfac5454c5e693dd?x=x&version=2",
            "client": "ZulipElectron",
            "content": "<p>Thanks to everyone who came out and worked on the house robber problem <span aria-label=\"detective\" class=\"emoji emoji-1f575\" role=\"img\" title=\"detective\">:detective:</span> <span class=\"user-mention\" data-user-id=\"198446\">@Mari Galicer (W2'19)</span> <span class=\"user-mention\" data-user-id=\"158774\">@Liz Krane (W2'19)</span> <span class=\"user-mention\" data-user-id=\"198461\">@Michelle Torres (W2'19)</span> <span class=\"user-mention\" data-user-id=\"198212\">@Thomas Gardner (W2'19)</span> <span class=\"user-mention\" data-user-id=\"158528\">@Alex Yeh (W2'19)</span> <span class=\"user-mention\" data-user-id=\"158856\">@Terry O'Shea (W2'19)</span> <span class=\"user-mention\" data-user-id=\"134184\">@Billy Kaplan (W1'18)</span> <span class=\"user-mention\" data-user-id=\"134400\">@Jackie Liu (W1'18)</span> I learned even more about dynamic programming this time and how to be more efficient.</p>",
            "content_type": "text/html",
            "display_recipient": "Post-Lunch Prep (PLP)",
            "flags": [
                "read",
                "historical"
            ],
            "id": 157555120,
            "is_me_message": false,
            "last_edit_timestamp": 1549312817,
            "reactions": [],
            "recipient_id": 183179,
            "sender_email": "michellemmh@gmail.com",
            "sender_full_name": "Michelle Ho (she) (W1'18)",
            "sender_id": 134467,
            "sender_realm_str": "recurse",
            "stream_id": 144212,
            "subject": "Monday Feb 4 2018",
            "submessages": [],
            "timestamp": 1549312731,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/aabd3f5b0d85a5cd43367315223e784a0b18b740?x=x&version=2",
            "client": "website",
            "content": "<p>I'm home sick today, so I did a (sort of verbose) OCaml solution:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">open</span><span class=\"o\">!</span> <span class=\"nc\">Core</span>\n\n<span class=\"k\">module</span> <span class=\"nc\">Best_cache</span> <span class=\"o\">:</span> <span class=\"k\">sig</span>\n  <span class=\"k\">type</span> <span class=\"n\">t</span>\n\n  <span class=\"k\">val</span> <span class=\"n\">create</span> <span class=\"o\">:</span> <span class=\"kt\">unit</span> <span class=\"o\">-&gt;</span> <span class=\"n\">t</span>\n  <span class=\"k\">val</span> <span class=\"n\">update</span> <span class=\"o\">:</span> <span class=\"n\">t</span> <span class=\"o\">-&gt;</span> <span class=\"k\">value</span><span class=\"o\">:</span><span class=\"kt\">int</span> <span class=\"o\">-&gt;</span> <span class=\"n\">index</span><span class=\"o\">:</span><span class=\"kt\">int</span> <span class=\"o\">-&gt;</span> <span class=\"kt\">unit</span>\n  <span class=\"k\">val</span> <span class=\"n\">last</span> <span class=\"o\">:</span> <span class=\"n\">t</span> <span class=\"o\">-&gt;</span> <span class=\"kt\">int</span>\n<span class=\"k\">end</span> <span class=\"o\">=</span> <span class=\"k\">struct</span>\n  <span class=\"k\">type</span> <span class=\"n\">t</span> <span class=\"o\">=</span>\n    <span class=\"o\">{</span> <span class=\"n\">table</span> <span class=\"o\">:</span> <span class=\"kt\">int</span> <span class=\"nn\">Int</span><span class=\"p\">.</span><span class=\"nn\">Table</span><span class=\"p\">.</span><span class=\"n\">t</span>\n    <span class=\"o\">;</span> <span class=\"k\">mutable</span> <span class=\"n\">max</span> <span class=\"o\">:</span> <span class=\"kt\">int</span>\n    <span class=\"o\">}</span>\n\n  <span class=\"k\">let</span> <span class=\"n\">create</span> <span class=\"bp\">()</span> <span class=\"o\">=</span>\n    <span class=\"o\">{</span> <span class=\"n\">table</span> <span class=\"o\">=</span> <span class=\"nn\">Int</span><span class=\"p\">.</span><span class=\"nn\">Table</span><span class=\"p\">.</span><span class=\"n\">create</span> <span class=\"bp\">()</span>\n    <span class=\"o\">;</span> <span class=\"n\">max</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n    <span class=\"o\">}</span>\n\n  <span class=\"k\">let</span> <span class=\"n\">get</span> <span class=\"o\">{</span> <span class=\"n\">table</span><span class=\"o\">;</span> <span class=\"o\">_</span> <span class=\"o\">}</span> <span class=\"n\">index</span> <span class=\"o\">=</span>\n    <span class=\"nn\">Hashtbl</span><span class=\"p\">.</span><span class=\"n\">find</span> <span class=\"n\">table</span> <span class=\"n\">index</span>\n    <span class=\"o\">|&gt;</span> <span class=\"nn\">Option</span><span class=\"p\">.</span><span class=\"n\">value</span> <span class=\"o\">~</span><span class=\"n\">default</span><span class=\"o\">:</span><span class=\"mi\">0</span>\n\n  <span class=\"k\">let</span> <span class=\"n\">update</span> <span class=\"n\">t</span> <span class=\"o\">~</span><span class=\"k\">value</span> <span class=\"o\">~</span><span class=\"n\">index</span> <span class=\"o\">=</span>\n    <span class=\"k\">let</span> <span class=\"n\">best_including_previous</span> <span class=\"o\">=</span> <span class=\"n\">get</span> <span class=\"n\">t</span> <span class=\"o\">(</span><span class=\"n\">index</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"k\">in</span>\n    <span class=\"k\">let</span> <span class=\"n\">best_without_previous</span> <span class=\"o\">=</span> <span class=\"k\">value</span> <span class=\"o\">+</span> <span class=\"n\">get</span> <span class=\"n\">t</span> <span class=\"o\">(</span><span class=\"n\">index</span> <span class=\"o\">-</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"k\">in</span>\n    <span class=\"k\">let</span> <span class=\"n\">max</span> <span class=\"o\">=</span> <span class=\"nn\">Int</span><span class=\"p\">.</span><span class=\"n\">max</span> <span class=\"n\">best_including_previous</span> <span class=\"n\">best_without_previous</span> <span class=\"k\">in</span>\n    <span class=\"n\">t</span><span class=\"o\">.</span><span class=\"n\">max</span> <span class=\"o\">&lt;-</span> <span class=\"n\">max</span><span class=\"o\">;</span>\n    <span class=\"nn\">Hashtbl</span><span class=\"p\">.</span><span class=\"n\">set</span> <span class=\"n\">t</span><span class=\"o\">.</span><span class=\"n\">table</span> <span class=\"o\">~</span><span class=\"n\">key</span><span class=\"o\">:</span><span class=\"n\">index</span> <span class=\"o\">~</span><span class=\"n\">data</span><span class=\"o\">:</span><span class=\"n\">max</span>\n\n  <span class=\"k\">let</span> <span class=\"n\">last</span> <span class=\"o\">{</span> <span class=\"n\">max</span><span class=\"o\">;</span> <span class=\"o\">_</span> <span class=\"o\">}</span> <span class=\"o\">=</span>\n    <span class=\"n\">max</span>\n<span class=\"k\">end</span>\n\n<span class=\"k\">let</span> <span class=\"n\">best_value_to_rob</span> <span class=\"n\">houses</span> <span class=\"o\">=</span>\n  <span class=\"k\">let</span> <span class=\"n\">cache</span> <span class=\"o\">=</span> <span class=\"nn\">Best_cache</span><span class=\"p\">.</span><span class=\"n\">create</span> <span class=\"bp\">()</span> <span class=\"k\">in</span>\n  <span class=\"nn\">List</span><span class=\"p\">.</span><span class=\"n\">iteri</span> <span class=\"n\">houses</span> <span class=\"o\">~</span><span class=\"n\">f</span><span class=\"o\">:(</span><span class=\"k\">fun</span> <span class=\"n\">index</span> <span class=\"k\">value</span> <span class=\"o\">-&gt;</span>\n    <span class=\"nn\">Best_cache</span><span class=\"p\">.</span><span class=\"n\">update</span> <span class=\"n\">cache</span> <span class=\"o\">~</span><span class=\"k\">value</span> <span class=\"o\">~</span><span class=\"n\">index</span><span class=\"o\">);</span>\n  <span class=\"nn\">Best_cache</span><span class=\"p\">.</span><span class=\"n\">last</span> <span class=\"n\">cache</span>\n\n<span class=\"k\">let</span><span class=\"o\">%</span><span class=\"n\">expect_test</span> <span class=\"o\">_</span> <span class=\"o\">=</span>\n  <span class=\"n\">printf</span> <span class=\"s2\">&quot;%d</span><span class=\"se\">\\n</span><span class=\"s2\">&quot;</span> <span class=\"o\">(</span><span class=\"n\">best_value_to_rob</span> <span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">;</span> <span class=\"mi\">2</span><span class=\"o\">;</span> <span class=\"mi\">3</span><span class=\"o\">;</span> <span class=\"mi\">1</span><span class=\"o\">]);</span>\n  <span class=\"o\">[%</span><span class=\"n\">expect</span><span class=\"o\">{|</span> <span class=\"mi\">4</span> <span class=\"o\">|}];</span>\n  <span class=\"n\">printf</span> <span class=\"s2\">&quot;%d</span><span class=\"se\">\\n</span><span class=\"s2\">&quot;</span> <span class=\"o\">(</span><span class=\"n\">best_value_to_rob</span> <span class=\"o\">[</span><span class=\"mi\">2</span><span class=\"o\">;</span> <span class=\"mi\">7</span><span class=\"o\">;</span> <span class=\"mi\">9</span><span class=\"o\">;</span> <span class=\"mi\">3</span><span class=\"o\">;</span> <span class=\"mi\">1</span><span class=\"o\">]);</span>\n  <span class=\"o\">[%</span><span class=\"n\">expect</span><span class=\"o\">{|</span> <span class=\"mi\">12</span> <span class=\"o\">|}]</span>\n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "Post-Lunch Prep (PLP)",
            "flags": [
                "read",
                "historical"
            ],
            "id": 157555518,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 183179,
            "sender_email": "levimroth@gmail.com",
            "sender_full_name": "Levi Roth (he) (W2'18)",
            "sender_id": 105051,
            "sender_realm_str": "recurse",
            "stream_id": 144212,
            "subject": "Monday Feb 4 2018",
            "submessages": [],
            "timestamp": 1549313099,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/b2a6b06ba040fd7f7c2acd4d1440e7de?d=identicon&version=1",
            "client": "website",
            "content": "<p>I mentioned to a few people that I think seeing different implementations for dynamic programming problems is helpful, so here's mine so I don't forget about posting it:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">class</span> <span class=\"nc\">Solution</span><span class=\"p\">(</span><span class=\"nb\">object</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"nf\">rob</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">nums</span><span class=\"p\">):</span>\n        <span class=\"n\">n</span> <span class=\"o\">=</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">nums</span><span class=\"p\">)</span>\n        <span class=\"n\">best</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">*</span> <span class=\"p\">(</span><span class=\"n\">n</span><span class=\"o\">+</span><span class=\"mi\">2</span><span class=\"p\">)</span>\n\n        <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">xrange</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">):</span>\n            <span class=\"n\">best</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"nb\">max</span><span class=\"p\">(</span><span class=\"n\">best</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"p\">],</span> <span class=\"n\">nums</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">+</span> <span class=\"n\">best</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"o\">+</span><span class=\"mi\">2</span><span class=\"p\">])</span>\n\n        <span class=\"k\">return</span> <span class=\"n\">best</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "Post-Lunch Prep (PLP)",
            "flags": [
                "read",
                "historical"
            ],
            "id": 157556372,
            "is_me_message": false,
            "last_edit_timestamp": 1549313842,
            "reactions": [
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "+1",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "billy1kaplan@gmail.com",
                        "full_name": "Billy Kaplan (he) (W1'18)",
                        "id": 134184
                    },
                    "user_id": 134184
                },
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "+1",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "sajjad.bashar@gmail.com",
                        "full_name": "Sajjad Bashardanesh (he) (W2'19)",
                        "id": 198447
                    },
                    "user_id": 198447
                },
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "+1",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "karthik.188@gmail.com",
                        "full_name": "Karthik Nayak (he) (W2'19)",
                        "id": 158588
                    },
                    "user_id": 158588
                }
            ],
            "recipient_id": 183179,
            "sender_email": "mauricio@collares.org",
            "sender_full_name": "Mauricio Collares (he) (W2'19)",
            "sender_id": 158563,
            "sender_realm_str": "recurse",
            "stream_id": 144212,
            "subject": "Monday Feb 4 2018",
            "submessages": [],
            "timestamp": 1549313665,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/51eb74b84b6765b1128907e8bfac5454c5e693dd?x=x&version=2",
            "client": "ZulipMobile",
            "content": "<p><a href=\"/user_uploads/13/Gn0Z-qB3BzdsMewQawMz6UOJ/IMG_1709.JPG\" target=\"_blank\" title=\"IMG_1709.JPG\">IMG_1709.JPG</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/13/Gn0Z-qB3BzdsMewQawMz6UOJ/IMG_1709.JPG\" target=\"_blank\" title=\"IMG_1709.JPG\"><img src=\"/user_uploads/13/Gn0Z-qB3BzdsMewQawMz6UOJ/IMG_1709.JPG\"></a></div>",
            "content_type": "text/html",
            "display_recipient": "Post-Lunch Prep (PLP)",
            "flags": [
                "read",
                "historical"
            ],
            "id": 157559297,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 183179,
            "sender_email": "michellemmh@gmail.com",
            "sender_full_name": "Michelle Ho (she) (W1'18)",
            "sender_id": 134467,
            "sender_realm_str": "recurse",
            "stream_id": 144212,
            "subject": "Monday Feb 4 2018",
            "submessages": [],
            "timestamp": 1549316222,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/ab772058030721ef1c85f4d7692609dc?d=identicon&version=1",
            "client": "ZulipMobile",
            "content": "<p>I wanted to thanks all for the patience explaining how dynamic programming works and your solutions!</p>\n<p>It helped me a lot <span aria-label=\"heart eyes\" class=\"emoji emoji-1f60d\" role=\"img\" title=\"heart eyes\">:heart_eyes:</span></p>",
            "content_type": "text/html",
            "display_recipient": "Post-Lunch Prep (PLP)",
            "flags": [
                "read",
                "historical"
            ],
            "id": 157559324,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 183179,
            "sender_email": "hola@michelletorres.mx",
            "sender_full_name": "Michelle Torres (she) (W2'19)",
            "sender_id": 198461,
            "sender_realm_str": "recurse",
            "stream_id": 144212,
            "subject": "Monday Feb 4 2018",
            "submessages": [],
            "timestamp": 1549316247,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/964f1257b95e9bf794104ef709a63173?d=identicon&version=1",
            "client": "ZulipElectron",
            "content": "<p>Here is my python solution with O(1) space complexity:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">class</span> <span class=\"nc\">Solution</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"nf\">rob</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">nums</span><span class=\"p\">):</span>\n        <span class=\"k\">if</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">nums</span><span class=\"p\">)</span> <span class=\"o\">&lt;</span> <span class=\"mi\">2</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"n\">nums</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"k\">if</span> <span class=\"n\">nums</span> <span class=\"k\">else</span> <span class=\"mi\">0</span>\n\n        <span class=\"n\">second_back</span> <span class=\"o\">=</span> <span class=\"n\">nums</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n        <span class=\"n\">first_back</span> <span class=\"o\">=</span> <span class=\"nb\">max</span><span class=\"p\">(</span><span class=\"n\">nums</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"n\">nums</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">])</span>\n\n        <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">nums</span><span class=\"p\">)):</span>\n            <span class=\"n\">second_back</span><span class=\"p\">,</span> <span class=\"n\">first_back</span> <span class=\"o\">=</span> <span class=\"n\">first_back</span><span class=\"p\">,</span> <span class=\"nb\">max</span><span class=\"p\">(</span><span class=\"n\">second_back</span> <span class=\"o\">+</span> <span class=\"n\">nums</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">],</span> <span class=\"n\">first_back</span><span class=\"p\">)</span>\n\n        <span class=\"k\">return</span> <span class=\"n\">first_back</span>\n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "Post-Lunch Prep (PLP)",
            "flags": [
                "read",
                "historical"
            ],
            "id": 157559808,
            "is_me_message": false,
            "last_edit_timestamp": 1549316716,
            "reactions": [
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "+1",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "karthik.188@gmail.com",
                        "full_name": "Karthik Nayak (he) (W2'19)",
                        "id": 158588
                    },
                    "user_id": 158588
                },
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "+1",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "sajjad.bashar@gmail.com",
                        "full_name": "Sajjad Bashardanesh (he) (W2'19)",
                        "id": 198447
                    },
                    "user_id": 198447
                }
            ],
            "recipient_id": 183179,
            "sender_email": "terrykoshea@gmail.com",
            "sender_full_name": "Terry O'Shea (she) (W2'19)",
            "sender_id": 158856,
            "sender_realm_str": "recurse",
            "stream_id": 144212,
            "subject": "Monday Feb 4 2018",
            "submessages": [],
            "timestamp": 1549316679,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/ab772058030721ef1c85f4d7692609dc?d=identicon&version=1",
            "client": "website",
            "content": "<p>This was my solution after your amazing explanation:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kt\">int</span> <span class=\"nf\">max</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">b</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">a</span> <span class=\"o\">&gt;</span> <span class=\"n\">b</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"k\">return</span> <span class=\"n\">a</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"p\">{</span>\n        <span class=\"k\">return</span> <span class=\"n\">b</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n\n<span class=\"cm\">/**</span>\n<span class=\"cm\"> * On dynamic programming the idea is to chunk in small problems, so, the first</span>\n<span class=\"cm\"> * thing was to find the best solution for one house, after for two, after for</span>\n<span class=\"cm\"> * three and so on, on paper, this shows a pattern that we can use it as a formula.</span>\n<span class=\"cm\"> */</span>\n<span class=\"kt\">int</span> <span class=\"nf\">rob</span><span class=\"p\">(</span><span class=\"kt\">int</span><span class=\"o\">*</span> <span class=\"n\">nums</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">numsSize</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"kt\">int</span> <span class=\"n\">D</span><span class=\"p\">[</span><span class=\"mi\">1000000</span><span class=\"p\">];</span>\n\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">numsSize</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"k\">return</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">numsSize</span> <span class=\"o\">==</span> <span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"k\">return</span> <span class=\"n\">nums</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">];</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"n\">D</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">nums</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">];</span>\n    <span class=\"n\">D</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">max</span><span class=\"p\">(</span><span class=\"n\">D</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"n\">nums</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]);</span>\n\n    <span class=\"k\">for</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">2</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">numsSize</span><span class=\"p\">;</span> <span class=\"n\">i</span><span class=\"o\">++</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"n\">D</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">max</span><span class=\"p\">(</span><span class=\"n\">nums</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">+</span> <span class=\"n\">D</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"o\">-</span><span class=\"mi\">2</span><span class=\"p\">],</span> <span class=\"n\">D</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">]);</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"k\">return</span> <span class=\"n\">D</span><span class=\"p\">[</span><span class=\"n\">numsSize</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">];</span>\n<span class=\"p\">}</span>\n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "Post-Lunch Prep (PLP)",
            "flags": [
                "read",
                "historical"
            ],
            "id": 157560581,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f44f",
                    "emoji_name": "clap",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "meredith@paom.com",
                        "full_name": "Meredith Finkelstein (W2'19)",
                        "id": 198453
                    },
                    "user_id": 198453
                },
                {
                    "emoji_code": "1f44f",
                    "emoji_name": "clap",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "navrajnarula@gmail.com",
                        "full_name": "Navie Narula (she) (W2'19)",
                        "id": 198448
                    },
                    "user_id": 198448
                },
                {
                    "emoji_code": "1f44f",
                    "emoji_name": "clap",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "sajjad.bashar@gmail.com",
                        "full_name": "Sajjad Bashardanesh (he) (W2'19)",
                        "id": 198447
                    },
                    "user_id": 198447
                },
                {
                    "emoji_code": "1f44f",
                    "emoji_name": "clap",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "terrykoshea@gmail.com",
                        "full_name": "Terry O'Shea (she) (W2'19)",
                        "id": 158856
                    },
                    "user_id": 158856
                },
                {
                    "emoji_code": "1f44f",
                    "emoji_name": "clap",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "mauricio@collares.org",
                        "full_name": "Mauricio Collares (he) (W2'19)",
                        "id": 158563
                    },
                    "user_id": 158563
                },
                {
                    "emoji_code": "1f44f",
                    "emoji_name": "clap",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "galiciera@gmail.com",
                        "full_name": "Mari Galicer (she) (W2'19)",
                        "id": 198446
                    },
                    "user_id": 198446
                }
            ],
            "recipient_id": 183179,
            "sender_email": "hola@michelletorres.mx",
            "sender_full_name": "Michelle Torres (she) (W2'19)",
            "sender_id": 198461,
            "sender_realm_str": "recurse",
            "stream_id": 144212,
            "subject": "Monday Feb 4 2018",
            "submessages": [],
            "timestamp": 1549317384,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/ff4745e63a646ed40bffd8e1da51144d6fe7a582?x=x&version=2",
            "client": "ZulipMobile",
            "content": "<p>I was very confused by the topic tag for yesterday's PLP problem. I couldn't figure out my my most recent plp was from last year <span aria-label=\"rolling on the floor laughing\" class=\"emoji emoji-1f923\" role=\"img\" title=\"rolling on the floor laughing\">:rolling_on_the_floor_laughing:</span><span aria-label=\"joy\" class=\"emoji emoji-1f602\" role=\"img\" title=\"joy\">:joy:</span></p>",
            "content_type": "text/html",
            "display_recipient": "Post-Lunch Prep (PLP)",
            "flags": [
                "read",
                "historical"
            ],
            "id": 157604143,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 183179,
            "sender_email": "elabraha@umich.edu",
            "sender_full_name": "Eliana Abraham (she) (S2'18)",
            "sender_id": 120095,
            "sender_realm_str": "recurse",
            "stream_id": 144212,
            "subject": "Monday Feb 4 2018",
            "submessages": [],
            "timestamp": 1549371250,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/964f1257b95e9bf794104ef709a63173?d=identicon&version=1",
            "client": "ZulipElectron",
            "content": "<p>Hi <span class=\"user-mention\" data-user-id=\"*\">@all</span> </p>\n<p>Welcome to today's PLP. The problems will be projected in the presentation space after lunch time.<br>\nIf you are interested in pairing, come to the presentation space at 1:45 to find a partner.<br>\nIf you are interested in discussing afterwards, come to the presentation space at 2:45.</p>\n<p>Problems:<br>\n<a href=\"https://leetcode.com/problems/minimum-depth-of-binary-tree/\" target=\"_blank\" title=\"https://leetcode.com/problems/minimum-depth-of-binary-tree/\">https://leetcode.com/problems/minimum-depth-of-binary-tree/</a> (easy)<br>\n<a href=\"https://leetcode.com/problems/number-of-islands/\" target=\"_blank\" title=\"https://leetcode.com/problems/number-of-islands/\">https://leetcode.com/problems/number-of-islands/</a> (medium)</p>\n<p>If you are interested in pairing, come to the presentation space at 1:45 to find a partner.<br>\nIf you've solved today's problem already, come to the presentation space at 2:45 to discuss it!</p>\n<p>Host: <span class=\"user-mention\" data-user-id=\"158856\">@Terry O'Shea (W2'19)</span> Please reach out to me with any questions or feedback!</p>",
            "content_type": "text/html",
            "display_recipient": "Post-Lunch Prep (PLP)",
            "flags": [
                "read",
                "historical"
            ],
            "id": 157624329,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 183179,
            "sender_email": "terrykoshea@gmail.com",
            "sender_full_name": "Terry O'Shea (she) (W2'19)",
            "sender_id": 158856,
            "sender_realm_str": "recurse",
            "stream_id": 144212,
            "subject": "Tuesday, February 5th, 2019",
            "submessages": [],
            "timestamp": 1549388603,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/51eb74b84b6765b1128907e8bfac5454c5e693dd?x=x&version=2",
            "client": "ZulipElectron",
            "content": "<p>going to be late but I'm gonna do this!</p>",
            "content_type": "text/html",
            "display_recipient": "Post-Lunch Prep (PLP)",
            "flags": [
                "read",
                "historical"
            ],
            "id": 157628664,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 183179,
            "sender_email": "michellemmh@gmail.com",
            "sender_full_name": "Michelle Ho (she) (W1'18)",
            "sender_id": 134467,
            "sender_realm_str": "recurse",
            "stream_id": 144212,
            "subject": "Tuesday, February 5th, 2019",
            "submessages": [],
            "timestamp": 1549391770,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/964f1257b95e9bf794104ef709a63173?d=identicon&version=1",
            "client": "ZulipElectron",
            "content": "<p>Python solution to first problem:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">class</span> <span class=\"nc\">Solution</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"nf\">minDepth</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">root</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">        :type root: TreeNode</span>\n<span class=\"sd\">        :rtype: int</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">root</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"mi\">0</span>\n\n        <span class=\"n\">current_row</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">root</span><span class=\"p\">]</span>\n        <span class=\"n\">min_depth</span> <span class=\"o\">=</span> <span class=\"mi\">1</span>\n\n        <span class=\"k\">while</span> <span class=\"n\">current_row</span><span class=\"p\">:</span>\n            <span class=\"n\">new_row</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n            <span class=\"k\">for</span> <span class=\"n\">node</span> <span class=\"ow\">in</span> <span class=\"n\">current_row</span><span class=\"p\">:</span>\n                <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">node</span><span class=\"o\">.</span><span class=\"n\">left</span> <span class=\"ow\">and</span> <span class=\"ow\">not</span> <span class=\"n\">node</span><span class=\"o\">.</span><span class=\"n\">right</span><span class=\"p\">:</span>\n                    <span class=\"k\">return</span> <span class=\"n\">min_depth</span>\n                <span class=\"k\">if</span> <span class=\"n\">node</span><span class=\"o\">.</span><span class=\"n\">left</span><span class=\"p\">:</span>\n                    <span class=\"n\">new_row</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">node</span><span class=\"o\">.</span><span class=\"n\">left</span><span class=\"p\">)</span>\n                <span class=\"k\">if</span> <span class=\"n\">node</span><span class=\"o\">.</span><span class=\"n\">right</span><span class=\"p\">:</span>\n                    <span class=\"n\">new_row</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">node</span><span class=\"o\">.</span><span class=\"n\">right</span><span class=\"p\">)</span>\n            <span class=\"n\">min_depth</span> <span class=\"o\">+=</span> <span class=\"mi\">1</span>\n            <span class=\"n\">current_row</span> <span class=\"o\">=</span> <span class=\"n\">new_row</span>\n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "Post-Lunch Prep (PLP)",
            "flags": [
                "read",
                "historical"
            ],
            "id": 157635816,
            "is_me_message": false,
            "last_edit_timestamp": 1549402031,
            "reactions": [
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "+1",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "learningnerd@gmail.com",
                        "full_name": "Liz Krane (she) (W2'19)",
                        "id": 158774
                    },
                    "user_id": 158774
                },
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "+1",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "sajjad.bashar@gmail.com",
                        "full_name": "Sajjad Bashardanesh (he) (W2'19)",
                        "id": 198447
                    },
                    "user_id": 198447
                }
            ],
            "recipient_id": 183179,
            "sender_email": "terrykoshea@gmail.com",
            "sender_full_name": "Terry O'Shea (she) (W2'19)",
            "sender_id": 158856,
            "sender_realm_str": "recurse",
            "stream_id": 144212,
            "subject": "Tuesday, February 5th, 2019",
            "submessages": [],
            "timestamp": 1549396846,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/2f4d5ac39489f0ab54afeb08bddc69474d4f819b?x=x&version=2",
            "client": "ZulipElectron",
            "content": "<p>Hi <span class=\"user-mention\" data-user-id=\"*\">@all</span> </p>\n<p>Welcome to today's PLP. The problems will be projected in the presentation space after lunch time.<br>\nIf you are interested in pairing, come to the presentation space at 1:45 to find a partner.<br>\nIf you are interested in discussing afterwards, come to the presentation space at 2:45.</p>\n<p>Problems:<br>\n<a href=\"https://leetcode.com/problems/group-anagrams/\" target=\"_blank\" title=\"https://leetcode.com/problems/group-anagrams/\">https://leetcode.com/problems/group-anagrams/</a> (medium)<br>\n<a href=\"https://leetcode.com/problems/letter-combinations-of-a-phone-number/\" target=\"_blank\" title=\"https://leetcode.com/problems/letter-combinations-of-a-phone-number/\">https://leetcode.com/problems/letter-combinations-of-a-phone-number/</a> (medium)</p>\n<p>If you are interested in pairing, come to the presentation space at 1:45 to find a partner.<br>\nIf you've solved today's problem already, come to the presentation space at 2:45 to discuss it!</p>\n<p>Host: <span class=\"user-mention\" data-user-id=\"134204\">@Jamal Rogers (W1'18)</span>  Please reach out to me with any questions or feedback!</p>",
            "content_type": "text/html",
            "display_recipient": "Post-Lunch Prep (PLP)",
            "flags": [
                "read",
                "historical"
            ],
            "id": 157711166,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 183179,
            "sender_email": "jamala@gmail.com",
            "sender_full_name": "Jamal Rogers (he) (W1'18)",
            "sender_id": 134204,
            "sender_realm_str": "recurse",
            "stream_id": 144212,
            "subject": "Wednesday, 6 February 2019",
            "submessages": [],
            "timestamp": 1549476338,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/51eb74b84b6765b1128907e8bfac5454c5e693dd?x=x&version=2",
            "client": "ZulipElectron",
            "content": "<p>after some consternation, we found success on the group-anagrams! many thanks to <span class=\"user-mention\" data-user-id=\"198461\">@Michelle Torres (W2'19)</span> and <span class=\"user-mention\" data-user-id=\"134599\">@Patrick McCarver (W1'18)</span> <span aria-label=\"clap\" class=\"emoji emoji-1f44f\" role=\"img\" title=\"clap\">:clap:</span> <span aria-label=\"clap\" class=\"emoji emoji-1f44f\" role=\"img\" title=\"clap\">:clap:</span> <span aria-label=\"clap\" class=\"emoji emoji-1f44f\" role=\"img\" title=\"clap\">:clap:</span> the code is really not pretty but it works and I found it a good mental exercise.</p>\n<div class=\"codehilite\"><pre><span></span>class Solution:\n    def groupAnagrams(self, strs: &#39;List[str]&#39;) -&gt; &#39;List[List[str]]&#39;:\n\n        dictionary = {}\n        for word in strs:\n            if len(word) in dictionary:\n                dictionary[len(word)].append(word)\n            else:\n                dictionary[len(word)] = [word]\n\n        # print(dictionary)\n\n        results = []\n\n        candidateDictionary = {}\n\n        for key, wordList in dictionary.items():\n            currentLengthDictionaries = []\n\n            #Counting letters\n            for word in wordList:\n                currentWordDictionary = {}\n\n                for letter in word:\n                    if letter in currentWordDictionary:\n                        currentWordDictionary[letter] += 1\n                    else:\n                        currentWordDictionary[letter] = 1\n\n                currentLengthDictionaries.append(currentWordDictionary)\n            print(currentLengthDictionaries)\n            candidates = []\n            sub_results = {}\n            count_unique_dicts = 0\n            for index, wordDictionary in enumerate(currentLengthDictionaries):\n                if len(candidates) == 0:\n                    candidates.append(wordDictionary)\n                    sub_results[0] = [index]\n                    count_unique_dicts += 1\n                    continue\n                found = False\n                for i, candidate in enumerate(candidates):\n                    if wordDictionary == candidate:\n                        sub_results[i].append(index)\n                        found = True\n                        break\n                if not found:\n                    candidates.append(wordDictionary)\n                    sub_results[count_unique_dicts] = [index]\n                    count_unique_dicts += 1\n            # print(&#39;sub_results:&#39;, sub_results)\n\n            for k, indices in sub_results.items():\n                x = []\n                for index in indices:\n                    x.append(dictionary[key][index])\n                results.append(x)\n\n        return results\n</pre></div>\n\n\n<p><a href=\"/user_uploads/13/gAbU3ltPwEs6gwCLkPkDCIw6/pasted_image.png\" target=\"_blank\" title=\"pasted_image.png\">pasted image</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/13/gAbU3ltPwEs6gwCLkPkDCIw6/pasted_image.png\" target=\"_blank\" title=\"pasted image\"><img src=\"/user_uploads/13/gAbU3ltPwEs6gwCLkPkDCIw6/pasted_image.png\"></a></div>",
            "content_type": "text/html",
            "display_recipient": "Post-Lunch Prep (PLP)",
            "flags": [
                "read",
                "historical"
            ],
            "id": 157723007,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f389",
                    "emoji_name": "congratulations",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "pekarsky.maxim@gmail.com",
                        "full_name": "Max Pekarsky (he) (W2'19)",
                        "id": 158536
                    },
                    "user_id": 158536
                }
            ],
            "recipient_id": 183179,
            "sender_email": "michellemmh@gmail.com",
            "sender_full_name": "Michelle Ho (she) (W1'18)",
            "sender_id": 134467,
            "sender_realm_str": "recurse",
            "stream_id": 144212,
            "subject": "Wednesday, 6 February 2019",
            "submessages": [],
            "timestamp": 1549484828,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/8ecc2d529a87b809806e6e83245de2782fcb4394?x=x&version=2",
            "client": "ZulipElectron",
            "content": "<p>Using prime numbers for hash - faster than 98%</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">class</span> <span class=\"nc\">Solution</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"nf\">groupAnagrams</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">strs</span><span class=\"p\">:</span> <span class=\"s1\">&#39;List[str]&#39;</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"s1\">&#39;List[List[str]]&#39;</span><span class=\"p\">:</span>\n        <span class=\"nb\">dict</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>\n        <span class=\"k\">for</span> <span class=\"n\">word</span> <span class=\"ow\">in</span> <span class=\"n\">strs</span><span class=\"p\">:</span>\n            <span class=\"nb\">hash</span> <span class=\"o\">=</span> <span class=\"n\">prod</span><span class=\"p\">(</span><span class=\"n\">word</span><span class=\"p\">)</span>\n            <span class=\"k\">if</span> <span class=\"nb\">hash</span> <span class=\"ow\">not</span> <span class=\"ow\">in</span> <span class=\"nb\">dict</span><span class=\"p\">:</span>\n                <span class=\"nb\">dict</span><span class=\"o\">.</span><span class=\"n\">update</span><span class=\"p\">([(</span><span class=\"nb\">hash</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"n\">word</span><span class=\"p\">])])</span>\n            <span class=\"k\">else</span><span class=\"p\">:</span>\n                <span class=\"nb\">dict</span><span class=\"p\">[</span><span class=\"nb\">hash</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">word</span><span class=\"p\">)</span>\n\n        <span class=\"k\">return</span> <span class=\"nb\">list</span><span class=\"p\">([</span><span class=\"n\">v</span> <span class=\"k\">for</span> <span class=\"n\">k</span><span class=\"p\">,</span><span class=\"n\">v</span> <span class=\"ow\">in</span> <span class=\"nb\">dict</span><span class=\"o\">.</span><span class=\"n\">items</span><span class=\"p\">()])</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">prod</span><span class=\"p\">(</span><span class=\"n\">l</span><span class=\"p\">):</span>\n    <span class=\"n\">n</span> <span class=\"o\">=</span> <span class=\"mi\">1</span>\n    <span class=\"k\">for</span> <span class=\"n\">c</span> <span class=\"ow\">in</span> <span class=\"n\">l</span><span class=\"p\">:</span>\n        <span class=\"n\">n</span> <span class=\"o\">*=</span> <span class=\"n\">HASH</span><span class=\"p\">[</span><span class=\"n\">c</span><span class=\"p\">]</span>\n    <span class=\"k\">return</span> <span class=\"n\">n</span>\n\n\n<span class=\"n\">LETTERS</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;abcdefghijklmnopqrstuvwxyz&#39;</span>\n\n<span class=\"n\">PRIMES</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">7</span><span class=\"p\">,</span> <span class=\"mi\">11</span><span class=\"p\">,</span> <span class=\"mi\">13</span><span class=\"p\">,</span> <span class=\"mi\">17</span><span class=\"p\">,</span> <span class=\"mi\">19</span><span class=\"p\">,</span> <span class=\"mi\">23</span><span class=\"p\">,</span> <span class=\"mi\">29</span><span class=\"p\">,</span> <span class=\"mi\">31</span><span class=\"p\">,</span> <span class=\"mi\">37</span><span class=\"p\">,</span> <span class=\"mi\">41</span><span class=\"p\">,</span> <span class=\"mi\">43</span><span class=\"p\">,</span> <span class=\"mi\">47</span><span class=\"p\">,</span> <span class=\"mi\">53</span><span class=\"p\">,</span> <span class=\"mi\">59</span><span class=\"p\">,</span> <span class=\"mi\">61</span><span class=\"p\">,</span> <span class=\"mi\">67</span><span class=\"p\">,</span> <span class=\"mi\">71</span><span class=\"p\">,</span> <span class=\"mi\">73</span><span class=\"p\">,</span> <span class=\"mi\">79</span><span class=\"p\">,</span> <span class=\"mi\">83</span><span class=\"p\">,</span> <span class=\"mi\">89</span><span class=\"p\">,</span> <span class=\"mi\">97</span><span class=\"p\">,</span> <span class=\"mi\">101</span><span class=\"p\">,</span> <span class=\"mi\">103</span><span class=\"p\">,</span> <span class=\"mi\">107</span><span class=\"p\">,</span> <span class=\"mi\">109</span><span class=\"p\">,</span> <span class=\"mi\">113</span><span class=\"p\">,</span> <span class=\"mi\">127</span><span class=\"p\">,</span> <span class=\"mi\">131</span><span class=\"p\">,</span> <span class=\"mi\">137</span><span class=\"p\">,</span> <span class=\"mi\">139</span><span class=\"p\">,</span> <span class=\"mi\">149</span><span class=\"p\">,</span> <span class=\"mi\">151</span><span class=\"p\">,</span> <span class=\"mi\">157</span><span class=\"p\">,</span> <span class=\"mi\">163</span><span class=\"p\">,</span> <span class=\"mi\">167</span><span class=\"p\">,</span> <span class=\"mi\">173</span><span class=\"p\">,</span> <span class=\"mi\">179</span><span class=\"p\">,</span> <span class=\"mi\">181</span><span class=\"p\">,</span> <span class=\"mi\">191</span><span class=\"p\">,</span> <span class=\"mi\">193</span><span class=\"p\">,</span> <span class=\"mi\">197</span><span class=\"p\">,</span> <span class=\"mi\">199</span><span class=\"p\">,</span> <span class=\"mi\">211</span><span class=\"p\">,</span> <span class=\"mi\">223</span><span class=\"p\">,</span> <span class=\"mi\">227</span><span class=\"p\">,</span> <span class=\"mi\">229</span><span class=\"p\">,</span> <span class=\"mi\">233</span><span class=\"p\">,</span> <span class=\"mi\">239</span><span class=\"p\">,</span> <span class=\"mi\">241</span><span class=\"p\">,</span> <span class=\"mi\">251</span><span class=\"p\">,</span> <span class=\"mi\">257</span><span class=\"p\">,</span> <span class=\"mi\">263</span><span class=\"p\">,</span> <span class=\"mi\">269</span><span class=\"p\">,</span> <span class=\"mi\">271</span><span class=\"p\">,</span> <span class=\"mi\">277</span><span class=\"p\">,</span> <span class=\"mi\">281</span><span class=\"p\">,</span> <span class=\"mi\">283</span><span class=\"p\">,</span> <span class=\"mi\">293</span><span class=\"p\">,</span> <span class=\"mi\">307</span><span class=\"p\">,</span> <span class=\"mi\">311</span><span class=\"p\">,</span> <span class=\"mi\">313</span><span class=\"p\">,</span> <span class=\"mi\">317</span><span class=\"p\">,</span> <span class=\"mi\">331</span><span class=\"p\">,</span> <span class=\"mi\">337</span><span class=\"p\">,</span> <span class=\"mi\">347</span><span class=\"p\">,</span> <span class=\"mi\">349</span><span class=\"p\">,</span> <span class=\"mi\">353</span><span class=\"p\">,</span> <span class=\"mi\">359</span><span class=\"p\">,</span> <span class=\"mi\">367</span><span class=\"p\">]</span>\n\n<span class=\"n\">HASH</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"n\">l</span><span class=\"p\">:</span> <span class=\"n\">p</span> <span class=\"k\">for</span> <span class=\"n\">l</span><span class=\"p\">,</span> <span class=\"n\">p</span> <span class=\"ow\">in</span> <span class=\"nb\">zip</span><span class=\"p\">(</span><span class=\"n\">LETTERS</span><span class=\"p\">,</span> <span class=\"n\">PRIMES</span><span class=\"p\">)}</span>\n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "Post-Lunch Prep (PLP)",
            "flags": [
                "read",
                "historical"
            ],
            "id": 157723714,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f419",
                    "emoji_name": "octopus",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "terrykoshea@gmail.com",
                        "full_name": "Terry O'Shea (she) (W2'19)",
                        "id": 158856
                    },
                    "user_id": 158856
                },
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "+1",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "terrykoshea@gmail.com",
                        "full_name": "Terry O'Shea (she) (W2'19)",
                        "id": 158856
                    },
                    "user_id": 158856
                },
                {
                    "emoji_code": "1f419",
                    "emoji_name": "octopus",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "michellemmh@gmail.com",
                        "full_name": "Michelle Ho (she) (W1'18)",
                        "id": 134467
                    },
                    "user_id": 134467
                },
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "+1",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "sbj6290@gmail.com",
                        "full_name": "Byung Joo Shin (W2'19)",
                        "id": 158535
                    },
                    "user_id": 158535
                }
            ],
            "recipient_id": 183179,
            "sender_email": "contact@felixbiggs.com",
            "sender_full_name": "Felix Biggs (he) (W2'19)",
            "sender_id": 158580,
            "sender_realm_str": "recurse",
            "stream_id": 144212,
            "subject": "Wednesday, 6 February 2019",
            "submessages": [],
            "timestamp": 1549485441,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/2f4d5ac39489f0ab54afeb08bddc69474d4f819b?x=x&version=2",
            "client": "ZulipElectron",
            "content": "<p>Using map-reduce in Swift. Slow-ish, but it works.</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kd\">class</span> <span class=\"nc\">Solution</span> <span class=\"p\">{</span>\n    <span class=\"kd\">func</span> <span class=\"nf\">letterCombinations</span><span class=\"p\">(</span><span class=\"kc\">_</span> <span class=\"n\">digits</span><span class=\"p\">:</span> <span class=\"nb\">String</span><span class=\"p\">)</span> <span class=\"p\">-&gt;</span> <span class=\"p\">[</span><span class=\"nb\">String</span><span class=\"p\">]</span> <span class=\"p\">{</span>\n        <span class=\"k\">guard</span> <span class=\"o\">!</span><span class=\"n\">digits</span><span class=\"p\">.</span><span class=\"bp\">isEmpty</span> <span class=\"k\">else</span> <span class=\"p\">{</span><span class=\"k\">return</span> <span class=\"p\">[]}</span>\n        <span class=\"kd\">let</span> <span class=\"nv\">letters</span><span class=\"p\">:</span> <span class=\"p\">[[</span><span class=\"nb\">String</span><span class=\"p\">]]</span> <span class=\"p\">=</span> <span class=\"n\">digits</span><span class=\"p\">.</span><span class=\"bp\">map</span><span class=\"p\">(</span><span class=\"n\">letterMap</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">letters</span><span class=\"p\">.</span><span class=\"bp\">reduce</span><span class=\"p\">([</span><span class=\"s\">&quot;&quot;</span><span class=\"p\">])</span> <span class=\"p\">{</span>\n                               <span class=\"p\">(</span><span class=\"n\">words</span><span class=\"p\">:[</span><span class=\"nb\">String</span><span class=\"p\">],</span> <span class=\"n\">letters</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"nb\">String</span><span class=\"p\">])</span> <span class=\"p\">-&gt;</span> <span class=\"p\">[</span><span class=\"nb\">String</span><span class=\"p\">]</span> <span class=\"k\">in</span>\n    <span class=\"n\">words</span><span class=\"p\">.</span><span class=\"n\">flatMap</span> <span class=\"p\">{</span> <span class=\"p\">(</span><span class=\"n\">word</span><span class=\"p\">:</span> <span class=\"nb\">String</span><span class=\"p\">)</span> <span class=\"p\">-&gt;</span> <span class=\"p\">[</span><span class=\"nb\">String</span><span class=\"p\">]</span> <span class=\"k\">in</span> <span class=\"n\">letters</span><span class=\"p\">.</span><span class=\"bp\">map</span> <span class=\"p\">{</span> <span class=\"n\">letter</span> <span class=\"p\">-&gt;</span> <span class=\"nb\">String</span>\n        <span class=\"k\">in</span> <span class=\"s\">&quot;</span><span class=\"si\">\\(</span><span class=\"n\">word</span><span class=\"si\">)\\(</span><span class=\"n\">letter</span><span class=\"si\">)</span><span class=\"s\">&quot;</span> <span class=\"p\">}</span> <span class=\"p\">}</span>\n                              <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"kd\">func</span> <span class=\"nf\">letterMap</span><span class=\"p\">(</span><span class=\"kc\">_</span> <span class=\"n\">digit</span><span class=\"p\">:</span> <span class=\"nb\">Character</span><span class=\"p\">)</span> <span class=\"p\">-&gt;</span> <span class=\"p\">[</span><span class=\"nb\">String</span><span class=\"p\">]</span> <span class=\"p\">{</span>\n        <span class=\"kd\">let</span> <span class=\"nv\">dict</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"nb\">Character</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"nb\">String</span><span class=\"p\">]]</span> <span class=\"p\">=</span> <span class=\"p\">[</span>\n            <span class=\"s\">&quot;2&quot;</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s\">&quot;a&quot;</span><span class=\"p\">,</span> <span class=\"s\">&quot;b&quot;</span><span class=\"p\">,</span> <span class=\"s\">&quot;c&quot;</span><span class=\"p\">],</span>\n            <span class=\"s\">&quot;3&quot;</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s\">&quot;d&quot;</span><span class=\"p\">,</span> <span class=\"s\">&quot;e&quot;</span><span class=\"p\">,</span> <span class=\"s\">&quot;f&quot;</span><span class=\"p\">],</span>\n            <span class=\"s\">&quot;4&quot;</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s\">&quot;g&quot;</span><span class=\"p\">,</span> <span class=\"s\">&quot;h&quot;</span><span class=\"p\">,</span> <span class=\"s\">&quot;i&quot;</span><span class=\"p\">],</span>\n            <span class=\"s\">&quot;5&quot;</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s\">&quot;j&quot;</span><span class=\"p\">,</span> <span class=\"s\">&quot;k&quot;</span><span class=\"p\">,</span> <span class=\"s\">&quot;l&quot;</span><span class=\"p\">],</span>\n            <span class=\"s\">&quot;6&quot;</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s\">&quot;m&quot;</span><span class=\"p\">,</span> <span class=\"s\">&quot;n&quot;</span><span class=\"p\">,</span> <span class=\"s\">&quot;o&quot;</span><span class=\"p\">],</span>\n            <span class=\"s\">&quot;7&quot;</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s\">&quot;p&quot;</span><span class=\"p\">,</span> <span class=\"s\">&quot;q&quot;</span><span class=\"p\">,</span> <span class=\"s\">&quot;r&quot;</span><span class=\"p\">,</span> <span class=\"s\">&quot;s&quot;</span><span class=\"p\">],</span>\n            <span class=\"s\">&quot;8&quot;</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s\">&quot;t&quot;</span><span class=\"p\">,</span> <span class=\"s\">&quot;u&quot;</span><span class=\"p\">,</span> <span class=\"s\">&quot;v&quot;</span><span class=\"p\">],</span>\n            <span class=\"s\">&quot;9&quot;</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s\">&quot;w&quot;</span><span class=\"p\">,</span> <span class=\"s\">&quot;x&quot;</span><span class=\"p\">,</span> <span class=\"s\">&quot;y&quot;</span><span class=\"p\">,</span> <span class=\"s\">&quot;z&quot;</span><span class=\"p\">],</span>\n            <span class=\"p\">]</span>\n\n        <span class=\"k\">return</span> <span class=\"n\">dict</span><span class=\"p\">[</span><span class=\"n\">digit</span><span class=\"p\">]</span> <span class=\"p\">??</span> <span class=\"p\">[]</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "Post-Lunch Prep (PLP)",
            "flags": [
                "read",
                "historical"
            ],
            "id": 157736404,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 183179,
            "sender_email": "jamala@gmail.com",
            "sender_full_name": "Jamal Rogers (he) (W1'18)",
            "sender_id": 134204,
            "sender_realm_str": "recurse",
            "stream_id": 144212,
            "subject": "Wednesday, 6 February 2019",
            "submessages": [],
            "timestamp": 1549495158,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4b802c55ae5fe3bdac9dc52be2a04b7f?d=identicon&version=1",
            "client": "website",
            "content": "<p>Here's a soln using generators in python.</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">def</span> <span class=\"nf\">letter_combos</span><span class=\"p\">(</span><span class=\"n\">digits</span><span class=\"p\">):</span>\n    <span class=\"n\">alphabet</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s2\">&quot;abc&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;def&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;ghi&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;jkl&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;mno&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;pqrs&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;tuv&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;wxyz&quot;</span><span class=\"p\">]</span>\n\n    <span class=\"k\">if</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">digits</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">:</span>\n        <span class=\"k\">return</span> <span class=\"p\">[]</span>\n\n    <span class=\"n\">states</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">alphabet</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span> <span class=\"o\">-</span> <span class=\"mi\">2</span><span class=\"p\">]</span> <span class=\"k\">for</span> <span class=\"n\">x</span> <span class=\"ow\">in</span> <span class=\"n\">digits</span> <span class=\"k\">if</span> <span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span> <span class=\"o\">!=</span> <span class=\"mi\">1</span><span class=\"p\">]</span>\n    <span class=\"k\">return</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">build</span><span class=\"p\">(</span><span class=\"s2\">&quot;&quot;</span><span class=\"p\">,</span> <span class=\"n\">states</span><span class=\"p\">))</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">build</span><span class=\"p\">(</span><span class=\"n\">prefix</span><span class=\"p\">,</span> <span class=\"n\">states</span><span class=\"p\">):</span>\n    <span class=\"k\">if</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">states</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"mi\">1</span><span class=\"p\">:</span>\n        <span class=\"k\">yield from</span> <span class=\"p\">[</span><span class=\"n\">prefix</span> <span class=\"o\">+</span> <span class=\"n\">a</span> <span class=\"k\">for</span> <span class=\"n\">a</span> <span class=\"ow\">in</span> <span class=\"n\">states</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]]</span>\n    <span class=\"k\">else</span><span class=\"p\">:</span>\n        <span class=\"k\">for</span> <span class=\"n\">a</span> <span class=\"ow\">in</span> <span class=\"n\">states</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]:</span>\n            <span class=\"k\">yield from</span> <span class=\"n\">build</span><span class=\"p\">(</span><span class=\"n\">prefix</span> <span class=\"o\">+</span> <span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">states</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">:])</span>\n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "Post-Lunch Prep (PLP)",
            "flags": [
                "read",
                "historical"
            ],
            "id": 157742138,
            "is_me_message": false,
            "last_edit_timestamp": 1549551503,
            "reactions": [],
            "recipient_id": 183179,
            "sender_email": "tmg@fastmail.com",
            "sender_full_name": "Thomas Gardner (W2'19)",
            "sender_id": 198212,
            "sender_realm_str": "recurse",
            "stream_id": 144212,
            "subject": "Wednesday, 6 February 2019",
            "submessages": [],
            "timestamp": 1549500881,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/aabd3f5b0d85a5cd43367315223e784a0b18b740?x=x&version=2",
            "client": "website",
            "content": "<p>More OCaml while home sick:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">open</span><span class=\"o\">!</span> <span class=\"nc\">Core</span>\n\n<span class=\"k\">let</span> <span class=\"n\">group_equal</span> <span class=\"o\">(</span><span class=\"k\">type</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"k\">module</span> <span class=\"nc\">M</span> <span class=\"o\">:</span> <span class=\"nn\">Comparable</span><span class=\"p\">.</span><span class=\"nc\">S</span> <span class=\"k\">with</span> <span class=\"k\">type</span> <span class=\"n\">t</span> <span class=\"o\">=</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"kt\">list</span> <span class=\"kt\">list</span> <span class=\"o\">=</span>\n  <span class=\"nn\">List</span><span class=\"p\">.</span><span class=\"n\">fold</span> <span class=\"n\">l</span> <span class=\"o\">~</span><span class=\"n\">init</span><span class=\"o\">:</span><span class=\"nn\">M</span><span class=\"p\">.</span><span class=\"nn\">Map</span><span class=\"p\">.</span><span class=\"n\">empty</span> <span class=\"o\">~</span><span class=\"n\">f</span><span class=\"o\">:(</span><span class=\"k\">fun</span> <span class=\"n\">map</span> <span class=\"n\">word</span> <span class=\"o\">-&gt;</span>\n    <span class=\"nn\">Map</span><span class=\"p\">.</span><span class=\"n\">update</span> <span class=\"n\">map</span> <span class=\"n\">word</span> <span class=\"o\">~</span><span class=\"n\">f</span><span class=\"o\">:(</span><span class=\"k\">function</span>\n      <span class=\"o\">|</span> <span class=\"nc\">None</span> <span class=\"o\">-&gt;</span> <span class=\"o\">[</span> <span class=\"n\">word</span> <span class=\"o\">]</span>\n      <span class=\"o\">|</span> <span class=\"nc\">Some</span> <span class=\"kt\">list</span> <span class=\"o\">-&gt;</span> <span class=\"n\">word</span> <span class=\"o\">::</span> <span class=\"kt\">list</span><span class=\"o\">))</span>\n  <span class=\"o\">|&gt;</span> <span class=\"nn\">Map</span><span class=\"p\">.</span><span class=\"n\">data</span>\n\n<span class=\"k\">module</span> <span class=\"nc\">Order_insensitive_string</span> <span class=\"o\">=</span> <span class=\"k\">struct</span>\n  <span class=\"k\">module</span> <span class=\"nc\">T</span> <span class=\"o\">=</span> <span class=\"k\">struct</span>\n    <span class=\"k\">type</span> <span class=\"n\">t</span> <span class=\"o\">=</span> <span class=\"kt\">string</span> <span class=\"o\">[@@</span><span class=\"n\">deriving</span> <span class=\"n\">sexp</span><span class=\"o\">]</span>\n\n    <span class=\"k\">let</span> <span class=\"n\">sort_string</span> <span class=\"n\">s</span> <span class=\"o\">=</span>\n      <span class=\"nn\">String</span><span class=\"p\">.</span><span class=\"n\">to_list</span> <span class=\"n\">s</span>\n      <span class=\"o\">|&gt;</span> <span class=\"nn\">List</span><span class=\"p\">.</span><span class=\"n\">sort</span> <span class=\"o\">~</span><span class=\"n\">compare</span><span class=\"o\">:</span><span class=\"nn\">Char</span><span class=\"p\">.</span><span class=\"n\">compare</span>\n      <span class=\"o\">|&gt;</span> <span class=\"nn\">String</span><span class=\"p\">.</span><span class=\"n\">of_char_list</span>\n\n    <span class=\"k\">let</span> <span class=\"n\">compare</span> <span class=\"o\">=</span> <span class=\"nn\">Comparable</span><span class=\"p\">.</span><span class=\"n\">lift</span> <span class=\"nn\">String</span><span class=\"p\">.</span><span class=\"n\">compare</span> <span class=\"o\">~</span><span class=\"n\">f</span><span class=\"o\">:</span><span class=\"n\">sort_string</span>\n  <span class=\"k\">end</span>\n\n  <span class=\"k\">include</span> <span class=\"nc\">T</span>\n  <span class=\"k\">include</span> <span class=\"nn\">Comparable</span><span class=\"p\">.</span><span class=\"nc\">Make</span> <span class=\"o\">(</span><span class=\"nc\">T</span><span class=\"o\">)</span>\n<span class=\"k\">end</span>\n\n<span class=\"k\">let</span> <span class=\"n\">group_anagrams</span> <span class=\"o\">=</span> <span class=\"n\">group_equal</span> <span class=\"o\">(</span><span class=\"k\">module</span> <span class=\"nc\">Order_insensitive_string</span><span class=\"o\">)</span>\n\n<span class=\"k\">let</span><span class=\"o\">%</span><span class=\"n\">expect_test</span> <span class=\"o\">_</span> <span class=\"o\">=</span>\n  <span class=\"n\">group_anagrams</span> <span class=\"o\">[</span> <span class=\"s2\">&quot;eat&quot;</span><span class=\"o\">;</span> <span class=\"s2\">&quot;tea&quot;</span><span class=\"o\">;</span> <span class=\"s2\">&quot;tan&quot;</span><span class=\"o\">;</span> <span class=\"s2\">&quot;ate&quot;</span><span class=\"o\">;</span> <span class=\"s2\">&quot;nat&quot;</span><span class=\"o\">;</span> <span class=\"s2\">&quot;bat&quot;</span> <span class=\"o\">]</span>\n  <span class=\"o\">|&gt;</span> <span class=\"n\">printf</span> <span class=\"o\">!</span><span class=\"s2\">&quot;%{sexp:string list list}]</span><span class=\"se\">\\n</span><span class=\"s2\">&quot;</span><span class=\"o\">;</span>\n  <span class=\"o\">[%</span><span class=\"n\">expect</span><span class=\"o\">{|</span> <span class=\"o\">((</span><span class=\"n\">bat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ate</span> <span class=\"n\">tea</span> <span class=\"n\">eat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">nat</span> <span class=\"n\">tan</span><span class=\"o\">))]</span> <span class=\"o\">|}]</span>\n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "Post-Lunch Prep (PLP)",
            "flags": [
                "read",
                "historical"
            ],
            "id": 157748861,
            "is_me_message": false,
            "last_edit_timestamp": 1549510223,
            "reactions": [],
            "recipient_id": 183179,
            "sender_email": "levimroth@gmail.com",
            "sender_full_name": "Levi Roth (he) (W2'18)",
            "sender_id": 105051,
            "sender_realm_str": "recurse",
            "stream_id": 144212,
            "subject": "Wednesday, 6 February 2019",
            "submessages": [],
            "timestamp": 1549509753,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/787f392240856522f98bd4d40db71ec20edb3d2e?x=x&version=3",
            "client": "ZulipElectron",
            "content": "<p>Hi @all</p>\n<p>Welcome to today's PLP. The problems will be projected in the presentation space after lunch time.<br>\nIf you are interested in pairing, come to the presentation space at 1:45 to find a partner.<br>\nIf you are interested in discussing afterwards, come to the presentation space at 2:45.</p>\n<p>Problems:<br>\n<a href=\"https://leetcode.com/problems/new-21-game/\" target=\"_blank\" title=\"https://leetcode.com/problems/new-21-game/\">https://leetcode.com/problems/new-21-game/</a> (Medium)<br>\n<a href=\"https://leetcode.com/problems/zuma-game/\" target=\"_blank\" title=\"https://leetcode.com/problems/zuma-game/\">https://leetcode.com/problems/zuma-game/</a> (Hard)</p>\n<p>If you are interested in pairing, come to the presentation space at 1:45 to find a partner.<br>\nIf you've solved today's problem already, come to the presentation space at 2:45 to discuss it!</p>\n<p>Host: <span class=\"user-mention\" data-user-id=\"134181\">@Douglas Lerner (W1'18)</span>  Please reach out to me with any questions or feedback!</p>",
            "content_type": "text/html",
            "display_recipient": "Post-Lunch Prep (PLP)",
            "flags": [
                "read",
                "historical"
            ],
            "id": 157800675,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 183179,
            "sender_email": "pmmhy4@mst.edu",
            "sender_full_name": "Patrick McCarver (they/he) (SP1'19)",
            "sender_id": 134599,
            "sender_realm_str": "recurse",
            "stream_id": 144212,
            "subject": "Thursday, 7 February 2019",
            "submessages": [],
            "timestamp": 1549564531,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/b2a6b06ba040fd7f7c2acd4d1440e7de?d=identicon&version=1",
            "client": "website",
            "content": "<p>A solution for Letter Combinations in Haskell (caveat: since I think there's one way to decode \"\" and I can't submit this at Leetcode anyway, this doesn't match Leetcode's answer for \"\"):</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kr\">import</span> <span class=\"nn\">Data.Maybe</span>\n<span class=\"kr\">import</span> <span class=\"k\">qualified</span> <span class=\"nn\">Data.Map</span> <span class=\"k\">as</span> <span class=\"n\">DM</span>\n\n<span class=\"nf\">letterCombinations</span> <span class=\"ow\">=</span> <span class=\"n\">sequence</span> <span class=\"o\">.</span> <span class=\"n\">map</span> <span class=\"p\">(</span><span class=\"n\">fromMaybe</span> <span class=\"s\">&quot;&quot;</span> <span class=\"o\">.</span> <span class=\"n\">flip</span> <span class=\"kt\">DM</span><span class=\"o\">.</span><span class=\"n\">lookup</span> <span class=\"n\">m</span><span class=\"p\">)</span>\n  <span class=\"kr\">where</span> <span class=\"n\">m</span> <span class=\"ow\">=</span> <span class=\"kt\">DM</span><span class=\"o\">.</span><span class=\"n\">fromList</span> <span class=\"p\">[</span>                <span class=\"p\">(</span><span class=\"sc\">&#39;2&#39;</span><span class=\"p\">,</span> <span class=\"s\">&quot;abc&quot;</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"sc\">&#39;3&#39;</span><span class=\"p\">,</span> <span class=\"s\">&quot;def&quot;</span><span class=\"p\">)</span>\n                        <span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"sc\">&#39;4&#39;</span><span class=\"p\">,</span> <span class=\"s\">&quot;ghi&quot;</span><span class=\"p\">),</span>  <span class=\"p\">(</span><span class=\"sc\">&#39;5&#39;</span><span class=\"p\">,</span> <span class=\"s\">&quot;jkl&quot;</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"sc\">&#39;6&#39;</span><span class=\"p\">,</span> <span class=\"s\">&quot;mno&quot;</span><span class=\"p\">)</span>\n                        <span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"sc\">&#39;7&#39;</span><span class=\"p\">,</span> <span class=\"s\">&quot;pqrs&quot;</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"sc\">&#39;8&#39;</span><span class=\"p\">,</span> <span class=\"s\">&quot;tuv&quot;</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"sc\">&#39;9&#39;</span><span class=\"p\">,</span> <span class=\"s\">&quot;wxyz&quot;</span><span class=\"p\">)]</span>\n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "Post-Lunch Prep (PLP)",
            "flags": [
                "read",
                "historical"
            ],
            "id": 157899684,
            "is_me_message": false,
            "last_edit_timestamp": 1549666405,
            "reactions": [],
            "recipient_id": 183179,
            "sender_email": "mauricio@collares.org",
            "sender_full_name": "Mauricio Collares (he) (W2'19)",
            "sender_id": 158563,
            "sender_realm_str": "recurse",
            "stream_id": 144212,
            "subject": "Wednesday, 6 February 2019",
            "submessages": [],
            "timestamp": 1549665708,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/1eb103c0e899f372a85eb0a44f0a0f42?d=identicon&version=1",
            "client": "website",
            "content": "<p><span aria-label=\"sun face\" class=\"emoji emoji-1f31e\" role=\"img\" title=\"sun face\">:sun_face:</span> Good morning <span class=\"user-mention\" data-user-id=\"*\">@all</span> ! </p>\n<p><strong>You know what time it is... PLP time!    &nbsp;&nbsp;     (\uff89\u00b4\u30ee\u00b4)\uff89*:\uff65\uff9f\u2727</strong></p>\n<ul>\n<li><strong>1:45pm, Presentation space:</strong> Pair up with someone and get to work!</li>\n<li><strong>2:45pm, Presentation space:</strong> Discuss our attempts / solutions</li>\n</ul>\n<p><strong>Today's problems:   &nbsp;&nbsp;&nbsp;   \u1555( \u141b )\u1557</strong><br>\n<span aria-label=\"one\" class=\"emoji emoji-0031-20e3\" role=\"img\" title=\"one\">:one:</span> <a href=\"https://leetcode.com/problems/rotate-image/\" target=\"_blank\" title=\"https://leetcode.com/problems/rotate-image/\">https://leetcode.com/problems/rotate-image/</a><br>\n\"Given an image represented by an NxN matrix, where each pixel in the image is 4 bytes, write a method to rotate the image by 90 degrees. Can you do this in place?\" -- <em>Cracking the Coding Interview 5th Edition, problem 1.6</em> and also on Leetcode (link above)</p>\n<p><span aria-label=\"two\" class=\"emoji emoji-0032-20e3\" role=\"img\" title=\"two\">:two:</span>  <a href=\"https://dirtysalt.github.io/html/cracking-the-coding-interview.html#org8d927dc\" target=\"_blank\" title=\"https://dirtysalt.github.io/html/cracking-the-coding-interview.html#org8d927dc\">https://dirtysalt.github.io/html/cracking-the-coding-interview.html#org8d927dc</a><br>\n\"Imagine a (literal) stack of plates. If the stack gets too high, it might topple. Therefore, in real life, we would likely start a new stack when the previous stack exceeds some threshold. Implement a data structure SetOfStacks that mimics this. SetOfStacks should be composed of several stacks, and should create a new stack once the previous one exceeds capacity. SetOfStacks.push() and SetOfStacks.pop() should behave identically to a single stack (that is, pop() should return the same values as it would if there were just a single stack).<br>\nFOLLOW UP: Implement a function popAt(int index) which performs a pop operation on a specific sub-stack.\" -- <em>Cracking the Coding Interview 5th Edition, problem 3.3</em></p>\n<p><strong>Host: <span class=\"user-mention\" data-user-id=\"158774\">@Liz Krane (W2'19)</span>    &nbsp;&nbsp;   \u30fd(\u2310\u25a0_\u25a0)\u30ce\u266a\u266c</strong><br>\n<em>Please reach out to me with any questions or feedback, or additional emoji recommendations!</em></p>",
            "content_type": "text/html",
            "display_recipient": "Post-Lunch Prep (PLP)",
            "flags": [
                "read",
                "historical"
            ],
            "id": 158040760,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "3274",
                    "emoji_name": "party",
                    "reaction_type": "realm_emoji",
                    "user": {
                        "email": "learningnerd@gmail.com",
                        "full_name": "Liz Krane (she) (W2'19)",
                        "id": 158774
                    },
                    "user_id": 158774
                },
                {
                    "emoji_code": "3274",
                    "emoji_name": "party",
                    "reaction_type": "realm_emoji",
                    "user": {
                        "email": "billy1kaplan@gmail.com",
                        "full_name": "Billy Kaplan (he) (W1'18)",
                        "id": 134184
                    },
                    "user_id": 134184
                },
                {
                    "emoji_code": "3274",
                    "emoji_name": "party",
                    "reaction_type": "realm_emoji",
                    "user": {
                        "email": "tmg@fastmail.com",
                        "full_name": "Thomas Gardner (W2'19)",
                        "id": 198212
                    },
                    "user_id": 198212
                },
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "+1",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "tmg@fastmail.com",
                        "full_name": "Thomas Gardner (W2'19)",
                        "id": 198212
                    },
                    "user_id": 198212
                },
                {
                    "emoji_code": "3274",
                    "emoji_name": "party",
                    "reaction_type": "realm_emoji",
                    "user": {
                        "email": "pmmhy4@mst.edu",
                        "full_name": "Patrick McCarver (they/he) (SP1'19)",
                        "id": 134599
                    },
                    "user_id": 134599
                },
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "+1",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "alancodes@gmail.com",
                        "full_name": "Alan Chu (he) (SP2'19)",
                        "id": 134387
                    },
                    "user_id": 134387
                },
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "+1",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "terrykoshea@gmail.com",
                        "full_name": "Terry O'Shea (she) (W2'19)",
                        "id": 158856
                    },
                    "user_id": 158856
                },
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "+1",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "navrajnarula@gmail.com",
                        "full_name": "Navie Narula (she) (W2'19)",
                        "id": 198448
                    },
                    "user_id": 198448
                },
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "+1",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "michellemmh@gmail.com",
                        "full_name": "Michelle Ho (she) (W1'18)",
                        "id": 134467
                    },
                    "user_id": 134467
                }
            ],
            "recipient_id": 183179,
            "sender_email": "learningnerd@gmail.com",
            "sender_full_name": "Liz Krane (she) (W2'19)",
            "sender_id": 158774,
            "sender_realm_str": "recurse",
            "stream_id": 144212,
            "subject": "Monday, Feb 11, 2019",
            "submessages": [],
            "timestamp": 1549900626,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/8557ab36caec8aa68a55862031fac58cf70aeef3?x=x&version=2",
            "client": "website",
            "content": "<div class=\"codehilite\"><pre><span></span><span class=\"k\">def</span> <span class=\"nf\">rotate_90</span><span class=\"p\">(</span><span class=\"n\">matrix</span><span class=\"p\">):</span>\n\n    <span class=\"n\">rows</span> <span class=\"o\">=</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">matrix</span><span class=\"p\">)</span>\n\n    <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"n\">rows</span><span class=\"p\">):</span>\n        <span class=\"k\">for</span> <span class=\"n\">j</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"n\">rows</span><span class=\"p\">):</span>\n            <span class=\"c1\"># transpose matrix, switch rows and columns</span>\n            <span class=\"n\">matrix</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">][</span><span class=\"n\">j</span><span class=\"p\">],</span> <span class=\"n\">matrix</span><span class=\"p\">[</span><span class=\"n\">j</span><span class=\"p\">][</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">matrix</span><span class=\"p\">[</span><span class=\"n\">j</span><span class=\"p\">][</span><span class=\"n\">i</span><span class=\"p\">],</span> <span class=\"n\">matrix</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">][</span><span class=\"n\">j</span><span class=\"p\">]</span>\n\n    <span class=\"k\">for</span> <span class=\"n\">lst</span> <span class=\"ow\">in</span> <span class=\"n\">matrix</span><span class=\"p\">:</span>\n        <span class=\"c1\"># reverse each lst in matrix in place</span>\n        <span class=\"n\">lst</span><span class=\"o\">.</span><span class=\"n\">reverse</span><span class=\"p\">()</span>\n\n    <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">matrix</span><span class=\"p\">)</span>\n</pre></div>\n\n\n<p><span class=\"user-mention\" data-user-id=\"158871\">@Sruti Modekurty (W2'19)</span> <span class=\"user-mention\" data-user-id=\"134467\">@Michelle Ho (W1'18)</span>  and I's in-place solution. :)</p>",
            "content_type": "text/html",
            "display_recipient": "Post-Lunch Prep (PLP)",
            "flags": [
                "read",
                "historical"
            ],
            "id": 158060653,
            "is_me_message": false,
            "last_edit_timestamp": 1549916645,
            "reactions": [],
            "recipient_id": 183179,
            "sender_email": "navrajnarula@gmail.com",
            "sender_full_name": "Navie Narula (she) (W2'19)",
            "sender_id": 198448,
            "sender_realm_str": "recurse",
            "stream_id": 144212,
            "subject": "Monday, Feb 11, 2019",
            "submessages": [],
            "timestamp": 1549915748,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/8ecc2d529a87b809806e6e83245de2782fcb4394?x=x&version=2",
            "client": "ZulipElectron",
            "content": "<p>Exactly the same idea in C</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kt\">void</span> <span class=\"nf\">rotate</span><span class=\"p\">(</span><span class=\"kt\">int</span><span class=\"o\">**</span> <span class=\"n\">matrix</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">matrixRowSize</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"o\">*</span><span class=\"n\">matrixColSizes</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"kt\">int</span> <span class=\"n\">tmp</span><span class=\"p\">;</span>\n    <span class=\"kt\">int</span> <span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"n\">j</span><span class=\"p\">;</span>\n\n    <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"n\">i</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">matrixRowSize</span><span class=\"p\">;</span> <span class=\"n\">i</span><span class=\"o\">++</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"n\">j</span><span class=\"o\">=</span><span class=\"n\">i</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"p\">;</span> <span class=\"n\">j</span> <span class=\"o\">&lt;</span> <span class=\"n\">matrixRowSize</span><span class=\"p\">;</span> <span class=\"n\">j</span><span class=\"o\">++</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n            <span class=\"n\">tmp</span> <span class=\"o\">=</span> <span class=\"n\">matrix</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">][</span><span class=\"n\">j</span><span class=\"p\">];</span>\n            <span class=\"n\">matrix</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">][</span><span class=\"n\">j</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">matrix</span><span class=\"p\">[</span><span class=\"n\">j</span><span class=\"p\">][</span><span class=\"n\">i</span><span class=\"p\">];</span>\n            <span class=\"n\">matrix</span><span class=\"p\">[</span><span class=\"n\">j</span><span class=\"p\">][</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">tmp</span><span class=\"p\">;</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"n\">i</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">matrixRowSize</span><span class=\"p\">;</span> <span class=\"n\">i</span><span class=\"o\">++</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"n\">j</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"n\">j</span> <span class=\"o\">&lt;</span> <span class=\"n\">matrixRowSize</span> <span class=\"o\">/</span> <span class=\"mi\">2</span><span class=\"p\">;</span> <span class=\"n\">j</span><span class=\"o\">++</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n            <span class=\"n\">tmp</span> <span class=\"o\">=</span> <span class=\"n\">matrix</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">][</span><span class=\"n\">j</span><span class=\"p\">];</span>\n            <span class=\"n\">matrix</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">][</span><span class=\"n\">j</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">matrix</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">][</span><span class=\"n\">matrixRowSize</span> <span class=\"o\">-</span> <span class=\"n\">j</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">];</span>\n            <span class=\"n\">matrix</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">][</span><span class=\"n\">matrixRowSize</span> <span class=\"o\">-</span> <span class=\"n\">j</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">tmp</span><span class=\"p\">;</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "Post-Lunch Prep (PLP)",
            "flags": [
                "read",
                "historical"
            ],
            "id": 158066673,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 183179,
            "sender_email": "contact@felixbiggs.com",
            "sender_full_name": "Felix Biggs (he) (W2'19)",
            "sender_id": 158580,
            "sender_realm_str": "recurse",
            "stream_id": 144212,
            "subject": "Monday, Feb 11, 2019",
            "submessages": [],
            "timestamp": 1549920247,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/b2a6b06ba040fd7f7c2acd4d1440e7de?d=identicon&version=1",
            "client": "website",
            "content": "<p>(deleted)</p>",
            "content_type": "text/html",
            "display_recipient": "Post-Lunch Prep (PLP)",
            "flags": [
                "read",
                "historical"
            ],
            "id": 158067323,
            "is_me_message": false,
            "last_edit_timestamp": 1549920817,
            "reactions": [],
            "recipient_id": 183179,
            "sender_email": "mauricio@collares.org",
            "sender_full_name": "Mauricio Collares (he) (W2'19)",
            "sender_id": 158563,
            "sender_realm_str": "recurse",
            "stream_id": 144212,
            "subject": "Monday, Feb 11, 2019",
            "submessages": [],
            "timestamp": 1549920803,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/1eb103c0e899f372a85eb0a44f0a0f42?d=identicon&version=1",
            "client": "website",
            "content": "<p>I recommend looking at the official solution :) it's interesting and it is different from the above solutions. I haven't found that particular one posted online though... but it's in the book which I'll leave sitting on the projector stand</p>",
            "content_type": "text/html",
            "display_recipient": "Post-Lunch Prep (PLP)",
            "flags": [
                "read",
                "historical"
            ],
            "id": 158078484,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 183179,
            "sender_email": "learningnerd@gmail.com",
            "sender_full_name": "Liz Krane (she) (W2'19)",
            "sender_id": 158774,
            "sender_realm_str": "recurse",
            "stream_id": 144212,
            "subject": "Monday, Feb 11, 2019",
            "submessages": [],
            "timestamp": 1549930163,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/51eb74b84b6765b1128907e8bfac5454c5e693dd?x=x&version=2",
            "client": "ZulipElectron",
            "content": "<p>Hi RC!</p>\n<p>For today's PLP, I decided to go with a bulb-switching problem and part-two of the  <em>course scheduler</em> problem that I chose last week. I don't think anyone actually did the course-schedule problem (part one) last week, but that's good because this one looks really similar. I'm thinking for bonus points, someone should program the Thunder Tube to implement the bulb-switcher pattern haha.</p>\n<ul>\n<li><a href=\"https://leetcode.com/problems/course-schedule-ii/\" target=\"_blank\" title=\"https://leetcode.com/problems/course-schedule-ii/\">https://leetcode.com/problems/course-schedule-ii/</a> (medium)</li>\n<li><a href=\"https://leetcode.com/problems/bulb-switcher/\" target=\"_blank\" title=\"https://leetcode.com/problems/bulb-switcher/\">https://leetcode.com/problems/bulb-switcher/</a> (medium) <span aria-label=\"light bulb\" class=\"emoji emoji-1f4a1\" role=\"img\" title=\"light bulb\">:light_bulb:</span> <span aria-label=\"light bulb\" class=\"emoji emoji-1f4a1\" role=\"img\" title=\"light bulb\">:light_bulb:</span> <span aria-label=\"light bulb\" class=\"emoji emoji-1f4a1\" role=\"img\" title=\"light bulb\">:light_bulb:</span></li>\n</ul>",
            "content_type": "text/html",
            "display_recipient": "Post-Lunch Prep (PLP)",
            "flags": [
                "read",
                "historical"
            ],
            "id": 158135300,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 183179,
            "sender_email": "michellemmh@gmail.com",
            "sender_full_name": "Michelle Ho (she) (W1'18)",
            "sender_id": 134467,
            "sender_realm_str": "recurse",
            "stream_id": 144212,
            "subject": "Tuesday, February 12",
            "submessages": [],
            "timestamp": 1549992499,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/51eb74b84b6765b1128907e8bfac5454c5e693dd?x=x&version=2",
            "client": "ZulipElectron",
            "content": "<p>PLP will start at 1:50 PM, come to the presentation space then!</p>",
            "content_type": "text/html",
            "display_recipient": "Post-Lunch Prep (PLP)",
            "flags": [
                "read",
                "historical"
            ],
            "id": 158375600,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "+1",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "pekarsky.maxim@gmail.com",
                        "full_name": "Max Pekarsky (he) (W2'19)",
                        "id": 158536
                    },
                    "user_id": 158536
                }
            ],
            "recipient_id": 183179,
            "sender_email": "michellemmh@gmail.com",
            "sender_full_name": "Michelle Ho (she) (W1'18)",
            "sender_id": 134467,
            "sender_realm_str": "recurse",
            "stream_id": 144212,
            "subject": "Tuesday, February 12",
            "submessages": [],
            "timestamp": 1549996418,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/8ec0ac61efa8cf07f7427726bc602b5b?d=identicon&version=1",
            "client": "ZulipElectron",
            "content": "<p>Solving course scheduling with a non-recursive DFS implementation is faster than 100% of Go implementations. The code is rather, uh, abstruse, though:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kd\">type</span> <span class=\"nx\">color</span> <span class=\"kt\">int</span>\n\n<span class=\"kd\">const</span> <span class=\"p\">(</span>\n    <span class=\"nx\">white</span> <span class=\"nx\">color</span> <span class=\"p\">=</span> <span class=\"kc\">iota</span>\n    <span class=\"nx\">grey</span>\n    <span class=\"nx\">black</span>\n<span class=\"p\">)</span>\n\n<span class=\"kd\">type</span> <span class=\"nx\">vertex</span> <span class=\"kd\">struct</span> <span class=\"p\">{</span>\n    <span class=\"nx\">out</span> <span class=\"p\">[]</span><span class=\"kt\">int</span>\n    <span class=\"nx\">seen</span> <span class=\"nx\">color</span>\n<span class=\"p\">}</span>\n\n<span class=\"kd\">func</span> <span class=\"nx\">findOrder</span><span class=\"p\">(</span><span class=\"nx\">numCourses</span> <span class=\"kt\">int</span><span class=\"p\">,</span> <span class=\"nx\">prerequisites</span> <span class=\"p\">[][]</span><span class=\"kt\">int</span><span class=\"p\">)</span> <span class=\"p\">[]</span><span class=\"kt\">int</span> <span class=\"p\">{</span>\n    <span class=\"nx\">g</span> <span class=\"o\">:=</span> <span class=\"nb\">make</span><span class=\"p\">([]</span><span class=\"nx\">vertex</span><span class=\"p\">,</span> <span class=\"nx\">numCourses</span><span class=\"p\">)</span>\n    <span class=\"k\">for</span> <span class=\"nx\">_</span><span class=\"p\">,</span> <span class=\"nx\">prereq</span> <span class=\"o\">:=</span> <span class=\"k\">range</span> <span class=\"nx\">prerequisites</span> <span class=\"p\">{</span>\n        <span class=\"nx\">from</span><span class=\"p\">,</span> <span class=\"nx\">to</span> <span class=\"o\">:=</span> <span class=\"nx\">prereq</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"nx\">prereq</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span>\n        <span class=\"nx\">g</span><span class=\"p\">[</span><span class=\"nx\">from</span><span class=\"p\">].</span><span class=\"nx\">out</span> <span class=\"p\">=</span> <span class=\"nb\">append</span><span class=\"p\">(</span><span class=\"nx\">g</span><span class=\"p\">[</span><span class=\"nx\">from</span><span class=\"p\">].</span><span class=\"nx\">out</span><span class=\"p\">,</span> <span class=\"nx\">to</span><span class=\"p\">)</span>\n    <span class=\"p\">}</span>\n    <span class=\"kd\">var</span> <span class=\"nx\">stk</span> <span class=\"p\">[]</span><span class=\"kt\">int</span>\n    <span class=\"nx\">order</span> <span class=\"o\">:=</span> <span class=\"nb\">make</span><span class=\"p\">([]</span><span class=\"kt\">int</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"nx\">numCourses</span><span class=\"p\">)</span>\n    <span class=\"k\">for</span> <span class=\"nx\">i</span> <span class=\"o\">:=</span> <span class=\"k\">range</span> <span class=\"nx\">g</span> <span class=\"p\">{</span>\n        <span class=\"k\">if</span> <span class=\"nx\">g</span><span class=\"p\">[</span><span class=\"nx\">i</span><span class=\"p\">].</span><span class=\"nx\">seen</span> <span class=\"o\">!=</span> <span class=\"nx\">white</span> <span class=\"p\">{</span>\n            <span class=\"k\">continue</span>\n        <span class=\"p\">}</span>\n        <span class=\"nx\">stk</span> <span class=\"p\">=</span> <span class=\"nb\">append</span><span class=\"p\">(</span><span class=\"nx\">stk</span><span class=\"p\">,</span> <span class=\"nx\">i</span><span class=\"p\">)</span>\n        <span class=\"nx\">g</span><span class=\"p\">[</span><span class=\"nx\">i</span><span class=\"p\">].</span><span class=\"nx\">seen</span> <span class=\"p\">=</span> <span class=\"nx\">grey</span>\n        <span class=\"nx\">outer</span><span class=\"p\">:</span>\n        <span class=\"k\">for</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"nx\">stk</span><span class=\"p\">)</span> <span class=\"p\">&gt;</span> <span class=\"mi\">0</span> <span class=\"p\">{</span>\n            <span class=\"nx\">j</span> <span class=\"o\">:=</span> <span class=\"nx\">stk</span><span class=\"p\">[</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"nx\">stk</span><span class=\"p\">)</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">]</span>\n            <span class=\"k\">for</span> <span class=\"nx\">_</span><span class=\"p\">,</span> <span class=\"nx\">k</span> <span class=\"o\">:=</span> <span class=\"k\">range</span> <span class=\"nx\">g</span><span class=\"p\">[</span><span class=\"nx\">j</span><span class=\"p\">].</span><span class=\"nx\">out</span> <span class=\"p\">{</span>\n                <span class=\"nx\">g</span><span class=\"p\">[</span><span class=\"nx\">j</span><span class=\"p\">].</span><span class=\"nx\">out</span> <span class=\"p\">=</span> <span class=\"nx\">g</span><span class=\"p\">[</span><span class=\"nx\">j</span><span class=\"p\">].</span><span class=\"nx\">out</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">:]</span>\n                <span class=\"k\">switch</span> <span class=\"nx\">g</span><span class=\"p\">[</span><span class=\"nx\">k</span><span class=\"p\">].</span><span class=\"nx\">seen</span> <span class=\"p\">{</span>\n                <span class=\"k\">case</span> <span class=\"nx\">white</span><span class=\"p\">:</span>\n                    <span class=\"nx\">stk</span> <span class=\"p\">=</span> <span class=\"nb\">append</span><span class=\"p\">(</span><span class=\"nx\">stk</span><span class=\"p\">,</span> <span class=\"nx\">k</span><span class=\"p\">)</span>\n                    <span class=\"nx\">g</span><span class=\"p\">[</span><span class=\"nx\">k</span><span class=\"p\">].</span><span class=\"nx\">seen</span> <span class=\"p\">=</span> <span class=\"nx\">grey</span>\n                    <span class=\"k\">continue</span> <span class=\"nx\">outer</span>\n                <span class=\"k\">case</span> <span class=\"nx\">grey</span><span class=\"p\">:</span>\n                    <span class=\"k\">return</span> <span class=\"kc\">nil</span> <span class=\"c1\">// cycle</span>\n                <span class=\"k\">case</span> <span class=\"nx\">black</span><span class=\"p\">:</span>\n                <span class=\"p\">}</span>\n            <span class=\"p\">}</span>\n            <span class=\"nx\">order</span> <span class=\"p\">=</span> <span class=\"nb\">append</span><span class=\"p\">(</span><span class=\"nx\">order</span><span class=\"p\">,</span> <span class=\"nx\">j</span><span class=\"p\">)</span>\n            <span class=\"nx\">g</span><span class=\"p\">[</span><span class=\"nx\">j</span><span class=\"p\">].</span><span class=\"nx\">seen</span> <span class=\"p\">=</span> <span class=\"nx\">black</span>\n            <span class=\"nx\">stk</span> <span class=\"p\">=</span> <span class=\"nx\">stk</span><span class=\"p\">[:</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"nx\">stk</span><span class=\"p\">)</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">]</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n    <span class=\"k\">return</span> <span class=\"nx\">order</span>\n<span class=\"p\">}</span>\n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "Post-Lunch Prep (PLP)",
            "flags": [
                "read",
                "historical"
            ],
            "id": 158389427,
            "is_me_message": false,
            "last_edit_timestamp": 1550007228,
            "reactions": [
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "+1",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "sajjad.bashar@gmail.com",
                        "full_name": "Sajjad Bashardanesh (he) (W2'19)",
                        "id": 198447
                    },
                    "user_id": 198447
                }
            ],
            "recipient_id": 183179,
            "sender_email": "nikhil.benesch@gmail.com",
            "sender_full_name": "Nikhil Benesch (he) (W2'19)",
            "sender_id": 198449,
            "sender_realm_str": "recurse",
            "stream_id": 144212,
            "subject": "Tuesday, February 12",
            "submessages": [],
            "timestamp": 1550007162,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/2f4d5ac39489f0ab54afeb08bddc69474d4f819b?x=x&version=2",
            "client": "ZulipElectron",
            "content": "<p>Happy Wednesday <span class=\"user-mention\" data-user-id=\"*\">@all</span> ! (\u1d54\u1d25\u1d54)</p>\n<p>Here are todays problems. They deal with graphs. <span aria-label=\"chart\" class=\"emoji emoji-1f4c8\" role=\"img\" title=\"chart\">:chart:</span> <br>\n1. <a href=\"https://leetcode.com/problems/network-delay-time/\" target=\"_blank\" title=\"https://leetcode.com/problems/network-delay-time/\">https://leetcode.com/problems/network-delay-time/</a> (easy)<br>\n2. <a href=\"https://leetcode.com/problems/course-schedule/\" target=\"_blank\" title=\"https://leetcode.com/problems/course-schedule/\">https://leetcode.com/problems/course-schedule/</a> (medium)</p>\n<p>As always:<br>\n- The problems will be projected in the presentation space starting around lunchtime.<br>\n- Come to the presentation space at 1:45 if you want to find a partner to work with on the problems.<br>\n- We'll all meet back up at the presentation space at 2:45 to discuss our solutions.</p>\n<p>If you have any questions, let me know: <span class=\"user-mention\" data-user-id=\"134204\">@Jamal Rogers (W1'18)</span></p>",
            "content_type": "text/html",
            "display_recipient": "Post-Lunch Prep (PLP)",
            "flags": [
                "read",
                "historical"
            ],
            "id": 158460711,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 183179,
            "sender_email": "jamala@gmail.com",
            "sender_full_name": "Jamal Rogers (he) (W1'18)",
            "sender_id": 134204,
            "sender_realm_str": "recurse",
            "stream_id": 144212,
            "subject": "Wednesday, 13 February 2019",
            "submessages": [],
            "timestamp": 1550079712,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/2f4d5ac39489f0ab54afeb08bddc69474d4f819b?x=x&version=2",
            "client": "ZulipMobile",
            "content": "<p>Running late, I'll be right there</p>",
            "content_type": "text/html",
            "display_recipient": "Post-Lunch Prep (PLP)",
            "flags": [
                "read",
                "historical"
            ],
            "id": 158466166,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 183179,
            "sender_email": "jamala@gmail.com",
            "sender_full_name": "Jamal Rogers (he) (W1'18)",
            "sender_id": 134204,
            "sender_realm_str": "recurse",
            "stream_id": 144212,
            "subject": "Wednesday, 13 February 2019",
            "submessages": [],
            "timestamp": 1550083615,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/17cc9e2bc66dfd8fa02944eb84c6c1aba10235e0?x=x&version=2",
            "client": "website",
            "content": "<p>Today's problems:<br>\n<a href=\"https://leetcode.com/problems/dota2-senate/\" target=\"_blank\" title=\"https://leetcode.com/problems/dota2-senate/\">https://leetcode.com/problems/dota2-senate/</a><br>\n<a href=\"https://leetcode.com/problems/dungeon-game/\" target=\"_blank\" title=\"https://leetcode.com/problems/dungeon-game/\">https://leetcode.com/problems/dungeon-game/</a></p>",
            "content_type": "text/html",
            "display_recipient": "Post-Lunch Prep (PLP)",
            "flags": [
                "read",
                "historical"
            ],
            "id": 158553340,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 183179,
            "sender_email": "doug012310@yahoo.com",
            "sender_full_name": "Douglas Lerner (he) (W1'18)",
            "sender_id": 134181,
            "sender_realm_str": "recurse",
            "stream_id": 144212,
            "subject": "Thurs, 14 February 2019",
            "submessages": [],
            "timestamp": 1550169955,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/17cc9e2bc66dfd8fa02944eb84c6c1aba10235e0?x=x&version=2",
            "client": "website",
            "content": "<p>Leaving RC, New York, or the US, but want to continue pairing on PLP problems with other Recursers? Now you can! The LeetCode Pairing Chrome extension is live and free to download at the Chrome Extension store: <a href=\"https://chrome.google.com/webstore/detail/leetcode-pairing/jeonpfbokpeagbojffcijgpcpldgebfb?hl=en\" target=\"_blank\" title=\"https://chrome.google.com/webstore/detail/leetcode-pairing/jeonpfbokpeagbojffcijgpcpldgebfb?hl=en\">https://chrome.google.com/webstore/detail/leetcode-pairing/jeonpfbokpeagbojffcijgpcpldgebfb?hl=en</a></p>\n<p>Here are the instructions on how to use it:</p>\n<p>To pair on a Leetcode problem of your choosing: </p>\n<p>1.Navigate to: <a href=\"https://leetcode.com/problems/yourProblem\" target=\"_blank\" title=\"https://leetcode.com/problems/yourProblem\">https://leetcode.com/problems/yourProblem</a></p>\n<p>2. Click the \"Pair on my LeetCode Problem\" button to enter the lobby.</p>\n<p>3. Chat with the other users until you find a partner interested in pairing with you. When you are both ready to begin pairing, they should click the \"Pair With Me\" button next to your user name. </p>\n<p>4. You will automatically be taken back to Leetcode and the pairing session will begin. Make sure to select \"allow access to microphone and camera\" to enable video chat.</p>\n<p>To help someone else with a LeetCode problem of their choosing:</p>\n<p>1. Click on the \"Help Others With Their LeetCode Problem\" button to enter the lobby.</p>\n<p>2. Chat with the other users until you find a partner interested in pairing with you. When you are both ready to begin pairing, click the \"Pair With Me\" button next to their user name. </p>\n<p>3. You will be taken to the pairing code editor and the pairing session will begin. Make sure to select \"allow access to the microphone and camera\" to enable video chat.</p>\n<p>For Recursers: select the \"Login Type: RC\" button to enable login through your Recurse Center account. This will allow others to see your name and photo.</p>\n<p>To log out: simply close the browser tab/window when you are done pairing and you will be automatically logged out.</p>",
            "content_type": "text/html",
            "display_recipient": "Post-Lunch Prep (PLP)",
            "flags": [
                "read",
                "historical"
            ],
            "id": 158646709,
            "is_me_message": false,
            "last_edit_timestamp": 1550263836,
            "reactions": [
                {
                    "emoji_code": "2764",
                    "emoji_name": "heart",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "michellemmh@gmail.com",
                        "full_name": "Michelle Ho (she) (W1'18)",
                        "id": 134467
                    },
                    "user_id": 134467
                },
                {
                    "emoji_code": "1f40a",
                    "emoji_name": "crocodile",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "michellemmh@gmail.com",
                        "full_name": "Michelle Ho (she) (W1'18)",
                        "id": 134467
                    },
                    "user_id": 134467
                },
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "+1",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "michellemmh@gmail.com",
                        "full_name": "Michelle Ho (she) (W1'18)",
                        "id": 134467
                    },
                    "user_id": 134467
                },
                {
                    "emoji_code": "1f419",
                    "emoji_name": "octopus",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "michellemmh@gmail.com",
                        "full_name": "Michelle Ho (she) (W1'18)",
                        "id": 134467
                    },
                    "user_id": 134467
                },
                {
                    "emoji_code": "1f419",
                    "emoji_name": "octopus",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "terrykoshea@gmail.com",
                        "full_name": "Terry O'Shea (she) (W2'19)",
                        "id": 158856
                    },
                    "user_id": 158856
                },
                {
                    "emoji_code": "1f419",
                    "emoji_name": "octopus",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "tenorbiel@gmail.com",
                        "full_name": "Tenor Tenor (they/he) (m4'19)",
                        "id": 158532
                    },
                    "user_id": 158532
                },
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "+1",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "tenorbiel@gmail.com",
                        "full_name": "Tenor Tenor (they/he) (m4'19)",
                        "id": 158532
                    },
                    "user_id": 158532
                },
                {
                    "emoji_code": "1f951",
                    "emoji_name": "avocado",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "karthik.188@gmail.com",
                        "full_name": "Karthik Nayak (he) (W2'19)",
                        "id": 158588
                    },
                    "user_id": 158588
                },
                {
                    "emoji_code": "1126",
                    "emoji_name": "rc-pride",
                    "reaction_type": "realm_emoji",
                    "user": {
                        "email": "karthik.188@gmail.com",
                        "full_name": "Karthik Nayak (he) (W2'19)",
                        "id": 158588
                    },
                    "user_id": 158588
                },
                {
                    "emoji_code": "1f419",
                    "emoji_name": "octopus",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "contact@felixbiggs.com",
                        "full_name": "Felix Biggs (he) (W2'19)",
                        "id": 158580
                    },
                    "user_id": 158580
                },
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "+1",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "learningnerd@gmail.com",
                        "full_name": "Liz Krane (she) (W2'19)",
                        "id": 158774
                    },
                    "user_id": 158774
                },
                {
                    "emoji_code": "1f419",
                    "emoji_name": "octopus",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "learningnerd@gmail.com",
                        "full_name": "Liz Krane (she) (W2'19)",
                        "id": 158774
                    },
                    "user_id": 158774
                },
                {
                    "emoji_code": "1f951",
                    "emoji_name": "avocado",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "learningnerd@gmail.com",
                        "full_name": "Liz Krane (she) (W2'19)",
                        "id": 158774
                    },
                    "user_id": 158774
                },
                {
                    "emoji_code": "1f951",
                    "emoji_name": "avocado",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "billy1kaplan@gmail.com",
                        "full_name": "Billy Kaplan (he) (W1'18)",
                        "id": 134184
                    },
                    "user_id": 134184
                },
                {
                    "emoji_code": "1126",
                    "emoji_name": "rc-pride",
                    "reaction_type": "realm_emoji",
                    "user": {
                        "email": "katie.aszklar@gmail.com",
                        "full_name": "Katie Aszklar (she) (W2'19)",
                        "id": 198457
                    },
                    "user_id": 198457
                },
                {
                    "emoji_code": "1f419",
                    "emoji_name": "octopus",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "katie.aszklar@gmail.com",
                        "full_name": "Katie Aszklar (she) (W2'19)",
                        "id": 198457
                    },
                    "user_id": 198457
                },
                {
                    "emoji_code": "1f419",
                    "emoji_name": "octopus",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "jamala@gmail.com",
                        "full_name": "Jamal Rogers (he) (W1'18)",
                        "id": 134204
                    },
                    "user_id": 134204
                },
                {
                    "emoji_code": "1f57a",
                    "emoji_name": "dancing",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "doug012310@yahoo.com",
                        "full_name": "Douglas Lerner (he) (W1'18)",
                        "id": 134181
                    },
                    "user_id": 134181
                },
                {
                    "emoji_code": "1126",
                    "emoji_name": "rc-pride",
                    "reaction_type": "realm_emoji",
                    "user": {
                        "email": "doug012310@yahoo.com",
                        "full_name": "Douglas Lerner (he) (W1'18)",
                        "id": 134181
                    },
                    "user_id": 134181
                },
                {
                    "emoji_code": "2764",
                    "emoji_name": "heart",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "doug012310@yahoo.com",
                        "full_name": "Douglas Lerner (he) (W1'18)",
                        "id": 134181
                    },
                    "user_id": 134181
                },
                {
                    "emoji_code": "1f419",
                    "emoji_name": "octopus",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "doug012310@yahoo.com",
                        "full_name": "Douglas Lerner (he) (W1'18)",
                        "id": 134181
                    },
                    "user_id": 134181
                },
                {
                    "emoji_code": "1f951",
                    "emoji_name": "avocado",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "pmmhy4@mst.edu",
                        "full_name": "Patrick McCarver (they/he) (SP1'19)",
                        "id": 134599
                    },
                    "user_id": 134599
                },
                {
                    "emoji_code": "1f30b",
                    "emoji_name": "volcano",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "doug012310@yahoo.com",
                        "full_name": "Douglas Lerner (he) (W1'18)",
                        "id": 134181
                    },
                    "user_id": 134181
                },
                {
                    "emoji_code": "1126",
                    "emoji_name": "rc-pride",
                    "reaction_type": "realm_emoji",
                    "user": {
                        "email": "pmmhy4@mst.edu",
                        "full_name": "Patrick McCarver (they/he) (SP1'19)",
                        "id": 134599
                    },
                    "user_id": 134599
                },
                {
                    "emoji_code": "1f479",
                    "emoji_name": "ogre",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "pmmhy4@mst.edu",
                        "full_name": "Patrick McCarver (they/he) (SP1'19)",
                        "id": 134599
                    },
                    "user_id": 134599
                },
                {
                    "emoji_code": "1f40a",
                    "emoji_name": "crocodile",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "pmmhy4@mst.edu",
                        "full_name": "Patrick McCarver (they/he) (SP1'19)",
                        "id": 134599
                    },
                    "user_id": 134599
                },
                {
                    "emoji_code": "1f479",
                    "emoji_name": "ogre",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "doug012310@yahoo.com",
                        "full_name": "Douglas Lerner (he) (W1'18)",
                        "id": 134181
                    },
                    "user_id": 134181
                },
                {
                    "emoji_code": "1f40a",
                    "emoji_name": "crocodile",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "doug012310@yahoo.com",
                        "full_name": "Douglas Lerner (he) (W1'18)",
                        "id": 134181
                    },
                    "user_id": 134181
                },
                {
                    "emoji_code": "2764",
                    "emoji_name": "heart",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "pmmhy4@mst.edu",
                        "full_name": "Patrick McCarver (they/he) (SP1'19)",
                        "id": 134599
                    },
                    "user_id": 134599
                },
                {
                    "emoji_code": "1f419",
                    "emoji_name": "octopus",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "pmmhy4@mst.edu",
                        "full_name": "Patrick McCarver (they/he) (SP1'19)",
                        "id": 134599
                    },
                    "user_id": 134599
                },
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "+1",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "pmmhy4@mst.edu",
                        "full_name": "Patrick McCarver (they/he) (SP1'19)",
                        "id": 134599
                    },
                    "user_id": 134599
                },
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "+1",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "doug012310@yahoo.com",
                        "full_name": "Douglas Lerner (he) (W1'18)",
                        "id": 134181
                    },
                    "user_id": 134181
                },
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "+1",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "hola@michelletorres.mx",
                        "full_name": "Michelle Torres (she) (W2'19)",
                        "id": 198461
                    },
                    "user_id": 198461
                },
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "+1",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "aatigar@gmail.com",
                        "full_name": "Adam Avery Tigar (he) (F2'18)",
                        "id": 130218
                    },
                    "user_id": 130218
                },
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "+1",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "navrajnarula@gmail.com",
                        "full_name": "Navie Narula (she) (W2'19)",
                        "id": 198448
                    },
                    "user_id": 198448
                },
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "+1",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "sajjad.bashar@gmail.com",
                        "full_name": "Sajjad Bashardanesh (he) (W2'19)",
                        "id": 198447
                    },
                    "user_id": 198447
                },
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "+1",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "jeremy.fine.hartman@gmail.com",
                        "full_name": "Jeremy Hartman (he) (W1'18)",
                        "id": 136998
                    },
                    "user_id": 136998
                }
            ],
            "recipient_id": 183179,
            "sender_email": "doug012310@yahoo.com",
            "sender_full_name": "Douglas Lerner (he) (W1'18)",
            "sender_id": 134181,
            "sender_realm_str": "recurse",
            "stream_id": 144212,
            "subject": "PLP Leetcode Pairing Extension",
            "submessages": [],
            "timestamp": 1550262521,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/1eb103c0e899f372a85eb0a44f0a0f42?d=identicon&version=1",
            "client": "website",
            "content": "<p><span aria-label=\"sun face\" class=\"emoji emoji-1f31e\" role=\"img\" title=\"sun face\">:sun_face:</span> Hello <span class=\"user-mention\" data-user-id=\"*\">@all</span> ! </p>\n<p><strong>It's time to resume PLP, officially!</strong> Who's hosting it today? I'm super curious what the problems are! :) Or I can pick a couple if everyone else is busy right now.</p>",
            "content_type": "text/html",
            "display_recipient": "Post-Lunch Prep (PLP)",
            "flags": [
                "read",
                "historical"
            ],
            "id": 158992963,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 183179,
            "sender_email": "learningnerd@gmail.com",
            "sender_full_name": "Liz Krane (she) (W2'19)",
            "sender_id": 158774,
            "sender_realm_str": "recurse",
            "stream_id": 144212,
            "subject": "Join us at 1:45pm, Wed Feb 20th!",
            "submessages": [],
            "timestamp": 1550682051,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/9d3b7cbc4a7f592a0fb7cd31f7a9766c09366d3f?x=x&version=2",
            "client": "ZulipElectron",
            "content": "<p>(I think you should pick a few today, and then we can nominate someone to host tomorrow)</p>",
            "content_type": "text/html",
            "display_recipient": "Post-Lunch Prep (PLP)",
            "flags": [
                "read",
                "historical"
            ],
            "id": 158993138,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 183179,
            "sender_email": "pekarsky.maxim@gmail.com",
            "sender_full_name": "Max Pekarsky (he) (W2'19)",
            "sender_id": 158536,
            "sender_realm_str": "recurse",
            "stream_id": 144212,
            "subject": "Join us at 1:45pm, Wed Feb 20th!",
            "submessages": [],
            "timestamp": 1550682225,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/964f1257b95e9bf794104ef709a63173?d=identicon&version=1",
            "client": "ZulipElectron",
            "content": "<p>Patrick is hosting!</p>",
            "content_type": "text/html",
            "display_recipient": "Post-Lunch Prep (PLP)",
            "flags": [
                "read",
                "historical"
            ],
            "id": 158993706,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f430",
                    "emoji_name": "bunny",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "pmmhy4@mst.edu",
                        "full_name": "Patrick McCarver (they/he) (SP1'19)",
                        "id": 134599
                    },
                    "user_id": 134599
                },
                {
                    "emoji_code": "1f430",
                    "emoji_name": "bunny",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "sbj6290@gmail.com",
                        "full_name": "Byung Joo Shin (W2'19)",
                        "id": 158535
                    },
                    "user_id": 158535
                },
                {
                    "emoji_code": "1f430",
                    "emoji_name": "bunny",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "galiciera@gmail.com",
                        "full_name": "Mari Galicer (she) (W2'19)",
                        "id": 198446
                    },
                    "user_id": 198446
                }
            ],
            "recipient_id": 183179,
            "sender_email": "terrykoshea@gmail.com",
            "sender_full_name": "Terry O'Shea (she) (W2'19)",
            "sender_id": 158856,
            "sender_realm_str": "recurse",
            "stream_id": 144212,
            "subject": "Join us at 1:45pm, Wed Feb 20th!",
            "submessages": [],
            "timestamp": 1550682733,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/1eb103c0e899f372a85eb0a44f0a0f42?d=identicon&version=1",
            "client": "ZulipMobile",
            "content": "<p>Oh ok</p>",
            "content_type": "text/html",
            "display_recipient": "Post-Lunch Prep (PLP)",
            "flags": [
                "read",
                "historical"
            ],
            "id": 158997360,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 183179,
            "sender_email": "learningnerd@gmail.com",
            "sender_full_name": "Liz Krane (she) (W2'19)",
            "sender_id": 158774,
            "sender_realm_str": "recurse",
            "stream_id": 144212,
            "subject": "Join us at 1:45pm, Wed Feb 20th!",
            "submessages": [],
            "timestamp": 1550685458,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/1eb103c0e899f372a85eb0a44f0a0f42?d=identicon&version=1",
            "client": "ZulipMobile",
            "content": "<p>Cool :)</p>",
            "content_type": "text/html",
            "display_recipient": "Post-Lunch Prep (PLP)",
            "flags": [
                "read",
                "historical"
            ],
            "id": 158997363,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 183179,
            "sender_email": "learningnerd@gmail.com",
            "sender_full_name": "Liz Krane (she) (W2'19)",
            "sender_id": 158774,
            "sender_realm_str": "recurse",
            "stream_id": 144212,
            "subject": "Join us at 1:45pm, Wed Feb 20th!",
            "submessages": [],
            "timestamp": 1550685462,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/787f392240856522f98bd4d40db71ec20edb3d2e?x=x&version=3",
            "client": "ZulipElectron",
            "content": "<p>Hi @all</p>\n<p>Today we'll officially kick off Post-Lunch Prep (PLP), a daily pairing opportunity where RCers can pair on Leetcode and other interview style questions. The problems will be projected in the presentation space at 1:45pm, please join me there if you're interested! We'll pair off and work on the problems for an hour before returning to the presentation space to discuss our approaches to the problems.<br>\nIf you are interested in pairing, come to the presentation space at 1:45 to find a partner!<br>\nIf you are interested in discussing afterwards, come to the presentation space at 2:45.</p>\n<p>Problems:<br>\n<a href=\"https://leetcode.com/problems/lemonade-change/\" target=\"_blank\" title=\"https://leetcode.com/problems/lemonade-change/\">https://leetcode.com/problems/lemonade-change/</a> (Easy)<br>\n<a href=\"https://leetcode.com/problems/valid-triangle-number/\" target=\"_blank\" title=\"https://leetcode.com/problems/valid-triangle-number/\">https://leetcode.com/problems/valid-triangle-number/</a> (Medium)</p>\n<p>If you are interested in pairing, come to the presentation space at 1:45 to find a partner.<br>\nIf you've solved today's problem already, come to the presentation space at 2:45 to discuss it!</p>\n<p>Host: <span class=\"user-mention\" data-user-id=\"134599\">@Patrick McCarver (SP1'19)</span>  Please reach out to me with any questions or feedback!</p>",
            "content_type": "text/html",
            "display_recipient": "Post-Lunch Prep (PLP)",
            "flags": [
                "read",
                "historical"
            ],
            "id": 159000608,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 183179,
            "sender_email": "pmmhy4@mst.edu",
            "sender_full_name": "Patrick McCarver (they/he) (SP1'19)",
            "sender_id": 134599,
            "sender_realm_str": "recurse",
            "stream_id": 144212,
            "subject": "Wednesday, 20 February 2019",
            "submessages": [],
            "timestamp": 1550687718,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/964f1257b95e9bf794104ef709a63173?d=identicon&version=1",
            "client": "ZulipElectron",
            "content": "<p><span class=\"user-mention\" data-user-id=\"158774\">@Liz Krane (W2'19)</span>, do you want to host on Monday? I've got tomorrow</p>",
            "content_type": "text/html",
            "display_recipient": "Post-Lunch Prep (PLP)",
            "flags": [
                "read",
                "historical"
            ],
            "id": 159025547,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 183179,
            "sender_email": "terrykoshea@gmail.com",
            "sender_full_name": "Terry O'Shea (she) (W2'19)",
            "sender_id": 158856,
            "sender_realm_str": "recurse",
            "stream_id": 144212,
            "subject": "Join us at 1:45pm, Wed Feb 20th!",
            "submessages": [],
            "timestamp": 1550705837,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/1eb103c0e899f372a85eb0a44f0a0f42?d=identicon&version=1",
            "client": "ZulipMobile",
            "content": "<p>Sure I can do Monday!</p>",
            "content_type": "text/html",
            "display_recipient": "Post-Lunch Prep (PLP)",
            "flags": [
                "read",
                "historical"
            ],
            "id": 159028053,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 183179,
            "sender_email": "learningnerd@gmail.com",
            "sender_full_name": "Liz Krane (she) (W2'19)",
            "sender_id": 158774,
            "sender_realm_str": "recurse",
            "stream_id": 144212,
            "subject": "Join us at 1:45pm, Wed Feb 20th!",
            "submessages": [],
            "timestamp": 1550708530,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/964f1257b95e9bf794104ef709a63173?d=identicon&version=1",
            "client": "ZulipElectron",
            "content": "<p>PLP is starting now!<br>\nProblems:<br>\n<a href=\"https://leetcode.com/problems/flatten-binary-tree-to-linked-list/\" target=\"_blank\" title=\"https://leetcode.com/problems/flatten-binary-tree-to-linked-list/\">https://leetcode.com/problems/flatten-binary-tree-to-linked-list/</a><br>\n<a href=\"https://leetcode.com/problems/maximum-product-subarray/\" target=\"_blank\" title=\"https://leetcode.com/problems/maximum-product-subarray/\">https://leetcode.com/problems/maximum-product-subarray/</a></p>",
            "content_type": "text/html",
            "display_recipient": "Post-Lunch Prep (PLP)",
            "flags": [
                "read",
                "historical"
            ],
            "id": 159093181,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 183179,
            "sender_email": "terrykoshea@gmail.com",
            "sender_full_name": "Terry O'Shea (she) (W2'19)",
            "sender_id": 158856,
            "sender_realm_str": "recurse",
            "stream_id": 144212,
            "subject": "Thursday, Today",
            "submessages": [],
            "timestamp": 1550774921,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/8ecc2d529a87b809806e6e83245de2782fcb4394?x=x&version=2",
            "client": "ZulipElectron",
            "content": "<p>Python solution in O(nlogn) time and O(1) space</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">class</span> <span class=\"nc\">Solution</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"nf\">flatten</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">root</span><span class=\"p\">:</span> <span class=\"s1\">&#39;TreeNode&#39;</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"s1\">&#39;None&#39;</span><span class=\"p\">:</span>\n        <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">        Do not return anything, modify root in-place instead.</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">if</span> <span class=\"n\">root</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span>\n\n        <span class=\"n\">parent</span> <span class=\"o\">=</span> <span class=\"n\">root</span>\n        <span class=\"n\">node</span> <span class=\"o\">=</span> <span class=\"n\">old_node</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n        <span class=\"k\">while</span> <span class=\"n\">node</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"n\">root</span><span class=\"p\">:</span>\n\n            <span class=\"n\">node</span> <span class=\"o\">=</span> <span class=\"n\">root</span>\n            <span class=\"k\">while</span> <span class=\"p\">(</span><span class=\"n\">node</span><span class=\"o\">.</span><span class=\"n\">right</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"kc\">None</span> <span class=\"ow\">or</span> <span class=\"n\">node</span><span class=\"o\">.</span><span class=\"n\">left</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"kc\">None</span><span class=\"p\">):</span>\n                <span class=\"n\">parent</span> <span class=\"o\">=</span> <span class=\"n\">node</span>\n                <span class=\"k\">if</span> <span class=\"n\">node</span><span class=\"o\">.</span><span class=\"n\">right</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n                    <span class=\"n\">node</span> <span class=\"o\">=</span> <span class=\"n\">node</span><span class=\"o\">.</span><span class=\"n\">right</span>\n                <span class=\"k\">else</span><span class=\"p\">:</span>\n                    <span class=\"n\">node</span> <span class=\"o\">=</span> <span class=\"n\">node</span><span class=\"o\">.</span><span class=\"n\">left</span>\n\n            <span class=\"k\">if</span> <span class=\"n\">parent</span><span class=\"o\">.</span><span class=\"n\">right</span> <span class=\"ow\">is</span> <span class=\"n\">node</span><span class=\"p\">:</span>\n                <span class=\"n\">parent</span><span class=\"o\">.</span><span class=\"n\">right</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n            <span class=\"k\">else</span><span class=\"p\">:</span>\n                <span class=\"n\">parent</span><span class=\"o\">.</span><span class=\"n\">left</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n\n            <span class=\"n\">node</span><span class=\"o\">.</span><span class=\"n\">left</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n            <span class=\"n\">node</span><span class=\"o\">.</span><span class=\"n\">right</span> <span class=\"o\">=</span> <span class=\"n\">old_node</span>\n            <span class=\"n\">old_node</span> <span class=\"o\">=</span> <span class=\"n\">node</span>\n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "Post-Lunch Prep (PLP)",
            "flags": [
                "read",
                "historical"
            ],
            "id": 159100848,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "+1",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "terrykoshea@gmail.com",
                        "full_name": "Terry O'Shea (she) (W2'19)",
                        "id": 158856
                    },
                    "user_id": 158856
                },
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "+1",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "carteranthonia@gmail.com",
                        "full_name": "Anthonia Carter (she) (W2'19)",
                        "id": 158645
                    },
                    "user_id": 158645
                }
            ],
            "recipient_id": 183179,
            "sender_email": "contact@felixbiggs.com",
            "sender_full_name": "Felix Biggs (he) (W2'19)",
            "sender_id": 158580,
            "sender_realm_str": "recurse",
            "stream_id": 144212,
            "subject": "Thursday, Today",
            "submessages": [],
            "timestamp": 1550780069,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/964f1257b95e9bf794104ef709a63173?d=identicon&version=1",
            "client": "ZulipElectron",
            "content": "<p>Here is my recursive python solution:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">class</span> <span class=\"nc\">Solution</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"nf\">flatten</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">root</span><span class=\"p\">:</span> <span class=\"s1\">&#39;TreeNode&#39;</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"s1\">&#39;None&#39;</span><span class=\"p\">:</span>\n        <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">        Do not return anything, modify root in-place instead.</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">flattenAndReturnTail</span><span class=\"p\">(</span><span class=\"n\">root</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">flattenAndReturnTail</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">root</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">        If the flattened subtree is [2] -&gt; [3] -&gt; [4], this returns</span>\n<span class=\"sd\">        a pointer to the [4].</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">root</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"kc\">None</span>\n\n        <span class=\"n\">left_tail</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">flattenAndReturnTail</span><span class=\"p\">(</span><span class=\"n\">root</span><span class=\"o\">.</span><span class=\"n\">left</span><span class=\"p\">)</span>\n        <span class=\"n\">right_tail</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">flattenAndReturnTail</span><span class=\"p\">(</span><span class=\"n\">root</span><span class=\"o\">.</span><span class=\"n\">right</span><span class=\"p\">)</span>\n\n        <span class=\"n\">left</span><span class=\"p\">,</span> <span class=\"n\">root</span><span class=\"o\">.</span><span class=\"n\">left</span> <span class=\"o\">=</span> <span class=\"n\">root</span><span class=\"o\">.</span><span class=\"n\">left</span><span class=\"p\">,</span> <span class=\"kc\">None</span>\n        <span class=\"k\">if</span> <span class=\"n\">left</span><span class=\"p\">:</span>\n            <span class=\"n\">root</span><span class=\"o\">.</span><span class=\"n\">right</span><span class=\"p\">,</span> <span class=\"n\">left_tail</span><span class=\"o\">.</span><span class=\"n\">right</span> <span class=\"o\">=</span> <span class=\"n\">left</span><span class=\"p\">,</span> <span class=\"n\">root</span><span class=\"o\">.</span><span class=\"n\">right</span>\n        <span class=\"k\">return</span> <span class=\"n\">right_tail</span> <span class=\"ow\">or</span> <span class=\"n\">left_tail</span> <span class=\"ow\">or</span> <span class=\"n\">root</span>\n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "Post-Lunch Prep (PLP)",
            "flags": [
                "read",
                "historical"
            ],
            "id": 159136909,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 183179,
            "sender_email": "terrykoshea@gmail.com",
            "sender_full_name": "Terry O'Shea (she) (W2'19)",
            "sender_id": 158856,
            "sender_realm_str": "recurse",
            "stream_id": 144212,
            "subject": "Thursday, Today",
            "submessages": [],
            "timestamp": 1550820164,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/1eb103c0e899f372a85eb0a44f0a0f42?d=identicon&version=1",
            "client": "website",
            "content": "<p><strong>Happy Monday, <span class=\"user-mention\" data-user-id=\"*\">@all</span> ! You know what time it is... PLP time!    &nbsp;&nbsp;   \u301c(\uffe3\u25bd\uffe3\u301c)(\u301c\uffe3\u25bd\uffe3)\u301c\u2740\u2764\u266b\u2727</strong></p>\n<ul>\n<li><strong>1:45pm, Presentation space:</strong> Pair up with someone and get to work!</li>\n<li><strong>2:45pm, Presentation space:</strong> Discuss our attempts / solutions</li>\n</ul>\n<p><strong>Today's problems:   &nbsp;&nbsp;&nbsp;   \u1559(\u21c0\u2038\u21bc\u2036)\u1557 &nbsp;&nbsp;  \u0669( \u141b )\u0648</strong></p>\n<p><span aria-label=\"one\" class=\"emoji emoji-0031-20e3\" role=\"img\" title=\"one\">:one:</span> Merge two binary trees: <a href=\"https://leetcode.com/problems/merge-two-binary-trees/\" target=\"_blank\" title=\"https://leetcode.com/problems/merge-two-binary-trees/\">https://leetcode.com/problems/merge-two-binary-trees/</a></p>\n<p><span aria-label=\"two\" class=\"emoji emoji-0032-20e3\" role=\"img\" title=\"two\">:two:</span> Different ways to add parentheses: <a href=\"https://leetcode.com/problems/different-ways-to-add-parentheses/\" target=\"_blank\" title=\"https://leetcode.com/problems/different-ways-to-add-parentheses/\">https://leetcode.com/problems/different-ways-to-add-parentheses/</a></p>\n<p>**Host: <span class=\"user-mention\" data-user-id=\"158774\">@Liz Krane (W2'19)</span>    &nbsp;&nbsp;  \u10da ( \u25d5  \u15dc  \u25d5 ) \u10da<br>\n<em>Please reach out to me with any questions or feedback, or additional emoji recommendations!</em></p>",
            "content_type": "text/html",
            "display_recipient": "Post-Lunch Prep (PLP)",
            "flags": [
                "read",
                "historical"
            ],
            "id": 159355769,
            "is_me_message": false,
            "last_edit_timestamp": 1551116301,
            "reactions": [
                {
                    "emoji_code": "1240",
                    "emoji_name": "parrot",
                    "reaction_type": "realm_emoji",
                    "user": {
                        "email": "rekhviasnino@gmail.com",
                        "full_name": "Nino Rekhviashvili (she/they) (SP1'19)",
                        "id": 203433
                    },
                    "user_id": 203433
                },
                {
                    "emoji_code": "1240",
                    "emoji_name": "parrot",
                    "reaction_type": "realm_emoji",
                    "user": {
                        "email": "galiciera@gmail.com",
                        "full_name": "Mari Galicer (she) (W2'19)",
                        "id": 198446
                    },
                    "user_id": 198446
                },
                {
                    "emoji_code": "1240",
                    "emoji_name": "parrot",
                    "reaction_type": "realm_emoji",
                    "user": {
                        "email": "hola@michelletorres.mx",
                        "full_name": "Michelle Torres (she) (W2'19)",
                        "id": 198461
                    },
                    "user_id": 198461
                },
                {
                    "emoji_code": "1f64c",
                    "emoji_name": "praise",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "terrykoshea@gmail.com",
                        "full_name": "Terry O'Shea (she) (W2'19)",
                        "id": 158856
                    },
                    "user_id": 158856
                }
            ],
            "recipient_id": 183179,
            "sender_email": "learningnerd@gmail.com",
            "sender_full_name": "Liz Krane (she) (W2'19)",
            "sender_id": 158774,
            "sender_realm_str": "recurse",
            "stream_id": 144212,
            "subject": "Problems for Mon Feb 25",
            "submessages": [],
            "timestamp": 1551116282,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/964f1257b95e9bf794104ef709a63173?d=identicon&version=1",
            "client": "ZulipElectron",
            "content": "<p>Here was my recursive solution to \"merge two binary trees\":</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">class</span> <span class=\"nc\">Solution</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"nf\">mergeTrees</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">t1</span><span class=\"p\">,</span> <span class=\"n\">t2</span><span class=\"p\">):</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"p\">(</span><span class=\"n\">t1</span> <span class=\"ow\">and</span> <span class=\"n\">t2</span><span class=\"p\">):</span>\n            <span class=\"k\">return</span> <span class=\"n\">t1</span> <span class=\"ow\">or</span> <span class=\"n\">t2</span>\n\n        <span class=\"n\">combo_root</span> <span class=\"o\">=</span> <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"n\">t1</span><span class=\"o\">.</span><span class=\"n\">val</span> <span class=\"o\">+</span> <span class=\"n\">t2</span><span class=\"o\">.</span><span class=\"n\">val</span><span class=\"p\">)</span>\n        <span class=\"n\">combo_root</span><span class=\"o\">.</span><span class=\"n\">left</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">mergeTrees</span><span class=\"p\">(</span><span class=\"n\">t1</span><span class=\"o\">.</span><span class=\"n\">left</span><span class=\"p\">,</span> <span class=\"n\">t2</span><span class=\"o\">.</span><span class=\"n\">left</span><span class=\"p\">)</span>\n        <span class=\"n\">combo_root</span><span class=\"o\">.</span><span class=\"n\">right</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">mergeTrees</span><span class=\"p\">(</span><span class=\"n\">t1</span><span class=\"o\">.</span><span class=\"n\">right</span><span class=\"p\">,</span> <span class=\"n\">t2</span><span class=\"o\">.</span><span class=\"n\">right</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">combo_root</span>\n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "Post-Lunch Prep (PLP)",
            "flags": [
                "read",
                "historical"
            ],
            "id": 159366698,
            "is_me_message": false,
            "last_edit_timestamp": 1551124587,
            "reactions": [
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "+1",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "karthik.188@gmail.com",
                        "full_name": "Karthik Nayak (he) (W2'19)",
                        "id": 158588
                    },
                    "user_id": 158588
                }
            ],
            "recipient_id": 183179,
            "sender_email": "terrykoshea@gmail.com",
            "sender_full_name": "Terry O'Shea (she) (W2'19)",
            "sender_id": 158856,
            "sender_realm_str": "recurse",
            "stream_id": 144212,
            "subject": "Problems for Mon Feb 25",
            "submessages": [],
            "timestamp": 1551124438,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4b802c55ae5fe3bdac9dc52be2a04b7f?d=identicon&version=1",
            "client": "website",
            "content": "<p>Hello everyone, PLP (/plu:p/) will begin in the presentation space at 1:45p.</p>\n<p>Today's problems are:<br>\n- <a href=\"https://leetcode.com/problems/convert-sorted-array-to-binary-search-tree/\" target=\"_blank\" title=\"https://leetcode.com/problems/convert-sorted-array-to-binary-search-tree/\">108. Convert Sorted Array to Binary Search Tree</a><br>\n- <a href=\"https://leetcode.com/problems/best-time-to-buy-and-sell-stock/\" target=\"_blank\" title=\"https://leetcode.com/problems/best-time-to-buy-and-sell-stock/\">121. Best Time to Buy and Sell Stock</a></p>",
            "content_type": "text/html",
            "display_recipient": "Post-Lunch Prep (PLP)",
            "flags": [
                "read",
                "historical"
            ],
            "id": 159540853,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f389",
                    "emoji_name": "tada",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "terrykoshea@gmail.com",
                        "full_name": "Terry O'Shea (she) (W2'19)",
                        "id": 158856
                    },
                    "user_id": 158856
                },
                {
                    "emoji_code": "1f389",
                    "emoji_name": "tada",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "rekhviasnino@gmail.com",
                        "full_name": "Nino Rekhviashvili (she/they) (SP1'19)",
                        "id": 203433
                    },
                    "user_id": 203433
                }
            ],
            "recipient_id": 183179,
            "sender_email": "tmg@fastmail.com",
            "sender_full_name": "Thomas Gardner (W2'19)",
            "sender_id": 198212,
            "sender_realm_str": "recurse",
            "stream_id": 144212,
            "subject": "Wed 2019-02-27",
            "submessages": [],
            "timestamp": 1551292922,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/6f674730326d1de1f798b147bd91c088f1ca6887?x=x&version=2",
            "client": "website",
            "content": "<p><code>Go</code> code for 108</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kd\">func</span> <span class=\"nx\">sortedArrayToBST</span><span class=\"p\">(</span><span class=\"nx\">nums</span> <span class=\"p\">[]</span><span class=\"kt\">int</span><span class=\"p\">)</span> <span class=\"o\">*</span><span class=\"nx\">TreeNode</span> <span class=\"p\">{</span>\n    <span class=\"k\">if</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"nx\">nums</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"mi\">0</span> <span class=\"p\">{</span>\n        <span class=\"k\">return</span> <span class=\"kc\">nil</span>\n    <span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"nx\">nums</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"mi\">1</span> <span class=\"p\">{</span>\n        <span class=\"k\">return</span> <span class=\"o\">&amp;</span><span class=\"nx\">TreeNode</span><span class=\"p\">{</span><span class=\"nx\">Val</span><span class=\"p\">:</span> <span class=\"nx\">nums</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"nx\">Left</span><span class=\"p\">:</span> <span class=\"kc\">nil</span><span class=\"p\">,</span> <span class=\"nx\">Right</span><span class=\"p\">:</span> <span class=\"kc\">nil</span><span class=\"p\">}</span>\n    <span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"nx\">nums</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"mi\">2</span> <span class=\"p\">{</span>\n        <span class=\"k\">return</span> <span class=\"o\">&amp;</span><span class=\"nx\">TreeNode</span><span class=\"p\">{</span><span class=\"nx\">Val</span><span class=\"p\">:</span> <span class=\"nx\">nums</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">],</span> <span class=\"nx\">Left</span><span class=\"p\">:</span> <span class=\"nx\">sortedArrayToBST</span><span class=\"p\">(</span><span class=\"nx\">nums</span><span class=\"p\">[:</span><span class=\"mi\">1</span><span class=\"p\">]),</span> <span class=\"nx\">Right</span><span class=\"p\">:</span> <span class=\"kc\">nil</span><span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n    <span class=\"nx\">mid</span> <span class=\"o\">:=</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"nx\">nums</span><span class=\"p\">)</span><span class=\"o\">/</span><span class=\"mi\">2</span>\n    <span class=\"nx\">left</span> <span class=\"o\">:=</span> <span class=\"nx\">sortedArrayToBST</span><span class=\"p\">(</span><span class=\"nx\">nums</span><span class=\"p\">[:</span><span class=\"nx\">mid</span><span class=\"p\">])</span>\n    <span class=\"nx\">right</span> <span class=\"o\">:=</span> <span class=\"nx\">sortedArrayToBST</span><span class=\"p\">(</span><span class=\"nx\">nums</span><span class=\"p\">[</span><span class=\"nx\">mid</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"p\">:])</span>\n    <span class=\"k\">return</span> <span class=\"o\">&amp;</span><span class=\"nx\">TreeNode</span><span class=\"p\">{</span><span class=\"nx\">Val</span><span class=\"p\">:</span> <span class=\"nx\">nums</span><span class=\"p\">[</span><span class=\"nx\">mid</span><span class=\"p\">],</span> <span class=\"nx\">Left</span><span class=\"p\">:</span> <span class=\"nx\">left</span><span class=\"p\">,</span> <span class=\"nx\">Right</span><span class=\"p\">:</span><span class=\"nx\">right</span><span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "Post-Lunch Prep (PLP)",
            "flags": [
                "read",
                "historical"
            ],
            "id": 159547665,
            "is_me_message": false,
            "last_edit_timestamp": 1551297832,
            "reactions": [],
            "recipient_id": 183179,
            "sender_email": "karthik.188@gmail.com",
            "sender_full_name": "Karthik Nayak (he) (W2'19)",
            "sender_id": 158588,
            "sender_realm_str": "recurse",
            "stream_id": 144212,
            "subject": "Wed 2019-02-27",
            "submessages": [],
            "timestamp": 1551297825,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/6f674730326d1de1f798b147bd91c088f1ca6887?x=x&version=2",
            "client": "website",
            "content": "<p><code>Go</code> code for 121</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kd\">func</span> <span class=\"nx\">maxProfit</span><span class=\"p\">(</span><span class=\"nx\">prices</span> <span class=\"p\">[]</span><span class=\"kt\">int</span><span class=\"p\">)</span> <span class=\"kt\">int</span> <span class=\"p\">{</span>\n    <span class=\"k\">if</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"nx\">prices</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"mi\">0</span> <span class=\"p\">{</span>\n        <span class=\"k\">return</span> <span class=\"mi\">0</span>\n    <span class=\"p\">}</span>\n    <span class=\"nx\">min</span><span class=\"p\">,</span> <span class=\"nx\">max</span> <span class=\"o\">:=</span> <span class=\"nx\">prices</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"mi\">0</span>\n    <span class=\"nx\">profit</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span>\n\n    <span class=\"k\">for</span> <span class=\"nx\">_</span><span class=\"p\">,</span> <span class=\"nx\">val</span> <span class=\"o\">:=</span> <span class=\"k\">range</span> <span class=\"nx\">prices</span> <span class=\"p\">{</span>\n        <span class=\"k\">if</span> <span class=\"nx\">val</span> <span class=\"p\">&lt;</span> <span class=\"nx\">min</span> <span class=\"p\">{</span>\n            <span class=\"nx\">min</span> <span class=\"p\">=</span> <span class=\"nx\">val</span>\n            <span class=\"nx\">max</span> <span class=\"p\">=</span> <span class=\"mi\">0</span>\n        <span class=\"p\">}</span>\n        <span class=\"k\">if</span> <span class=\"nx\">val</span> <span class=\"p\">&gt;</span> <span class=\"nx\">max</span> <span class=\"p\">{</span>\n            <span class=\"nx\">max</span> <span class=\"p\">=</span> <span class=\"nx\">val</span>\n        <span class=\"p\">}</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">max</span> <span class=\"o\">-</span> <span class=\"nx\">min</span><span class=\"p\">)</span> <span class=\"p\">&gt;</span> <span class=\"nx\">profit</span> <span class=\"p\">{</span>\n            <span class=\"nx\">profit</span> <span class=\"p\">=</span> <span class=\"p\">(</span><span class=\"nx\">max</span> <span class=\"o\">-</span> <span class=\"nx\">min</span><span class=\"p\">)</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n    <span class=\"k\">return</span> <span class=\"nx\">profit</span>\n<span class=\"p\">}</span>\n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "Post-Lunch Prep (PLP)",
            "flags": [
                "read",
                "historical"
            ],
            "id": 159547735,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 183179,
            "sender_email": "karthik.188@gmail.com",
            "sender_full_name": "Karthik Nayak (he) (W2'19)",
            "sender_id": 158588,
            "sender_realm_str": "recurse",
            "stream_id": 144212,
            "subject": "Wed 2019-02-27",
            "submessages": [],
            "timestamp": 1551297877,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/d159283c62cbe787d5a345355689fb85f176a995?x=x&version=2",
            "client": "website",
            "content": "<p>Python solution for 121</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">class</span> <span class=\"nc\">Solution</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"nf\">maxProfit</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">prices</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">])</span> <span class=\"o\">-&gt;</span> <span class=\"nb\">int</span><span class=\"p\">:</span>\n        <span class=\"k\">if</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">prices</span><span class=\"p\">)</span><span class=\"o\">&lt;</span><span class=\"mi\">2</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"mi\">0</span>\n        <span class=\"n\">min_price</span> <span class=\"o\">=</span> <span class=\"nb\">min</span><span class=\"p\">(</span><span class=\"n\">prices</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"n\">prices</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">])</span>\n        <span class=\"n\">max_profit</span> <span class=\"o\">=</span> <span class=\"nb\">max</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"n\">prices</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span><span class=\"o\">-</span><span class=\"n\">prices</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">])</span>\n        <span class=\"n\">index</span> <span class=\"o\">=</span> <span class=\"mi\">2</span>\n        <span class=\"k\">while</span> <span class=\"n\">index</span> <span class=\"o\">&lt;</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">prices</span><span class=\"p\">):</span>\n            <span class=\"n\">max_profit</span> <span class=\"o\">=</span> <span class=\"nb\">max</span><span class=\"p\">(</span><span class=\"n\">max_profit</span><span class=\"p\">,</span><span class=\"n\">prices</span><span class=\"p\">[</span><span class=\"n\">index</span><span class=\"p\">]</span> <span class=\"o\">-</span> <span class=\"n\">min_price</span><span class=\"p\">)</span>\n            <span class=\"n\">min_price</span> <span class=\"o\">=</span> <span class=\"nb\">min</span><span class=\"p\">(</span><span class=\"n\">prices</span><span class=\"p\">[</span><span class=\"n\">index</span><span class=\"p\">],</span> <span class=\"n\">min_price</span><span class=\"p\">)</span>\n            <span class=\"n\">index</span> <span class=\"o\">+=</span> <span class=\"mi\">1</span>\n        <span class=\"k\">return</span> <span class=\"n\">max_profit</span>\n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "Post-Lunch Prep (PLP)",
            "flags": [
                "read",
                "historical"
            ],
            "id": 159549949,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 183179,
            "sender_email": "benhmayer@gmail.com",
            "sender_full_name": "Benjamin Henry Mayer (he) (W2'19)",
            "sender_id": 158662,
            "sender_realm_str": "recurse",
            "stream_id": 144212,
            "subject": "Wed 2019-02-27",
            "submessages": [],
            "timestamp": 1551299575,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/ab772058030721ef1c85f4d7692609dc?d=identicon&version=1",
            "client": "website",
            "content": "<p>I did it in Python but is running in 100ms, I will try to remove the pop to see how it goes.</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">class</span> <span class=\"nc\">Solution</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"nf\">maxProfit</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">prices</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">])</span> <span class=\"o\">-&gt;</span> <span class=\"nb\">int</span><span class=\"p\">:</span>\n        <span class=\"n\">profit</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n\n        <span class=\"k\">if</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">prices</span><span class=\"p\">)</span> <span class=\"o\">&gt;=</span> <span class=\"mi\">1</span><span class=\"p\">:</span>\n            <span class=\"n\">buy</span> <span class=\"o\">=</span> <span class=\"n\">prices</span><span class=\"o\">.</span><span class=\"n\">pop</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n\n            <span class=\"k\">while</span> <span class=\"n\">prices</span><span class=\"p\">:</span>\n                <span class=\"n\">sell</span> <span class=\"o\">=</span> <span class=\"n\">prices</span><span class=\"o\">.</span><span class=\"n\">pop</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n                <span class=\"n\">profit</span> <span class=\"o\">=</span> <span class=\"nb\">max</span><span class=\"p\">(</span><span class=\"n\">sell</span><span class=\"o\">-</span><span class=\"n\">buy</span><span class=\"p\">,</span> <span class=\"n\">profit</span><span class=\"p\">)</span>\n                <span class=\"n\">buy</span> <span class=\"o\">=</span> <span class=\"nb\">min</span><span class=\"p\">(</span><span class=\"n\">sell</span><span class=\"p\">,</span> <span class=\"n\">buy</span><span class=\"p\">)</span>\n\n        <span class=\"k\">return</span> <span class=\"n\">profit</span>\n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "Post-Lunch Prep (PLP)",
            "flags": [
                "read",
                "historical"
            ],
            "id": 159553021,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 183179,
            "sender_email": "hola@michelletorres.mx",
            "sender_full_name": "Michelle Torres (she) (W2'19)",
            "sender_id": 198461,
            "sender_realm_str": "recurse",
            "stream_id": 144212,
            "subject": "Wed 2019-02-27",
            "submessages": [],
            "timestamp": 1551302082,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/ab772058030721ef1c85f4d7692609dc?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-id=\"158662\">@Benjamin Henry Mayer (W2'19)</span> thanks for the advice, after change it to index goes down with 52ms</p>",
            "content_type": "text/html",
            "display_recipient": "Post-Lunch Prep (PLP)",
            "flags": [
                "read",
                "historical"
            ],
            "id": 159553596,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 183179,
            "sender_email": "hola@michelletorres.mx",
            "sender_full_name": "Michelle Torres (she) (W2'19)",
            "sender_id": 198461,
            "sender_realm_str": "recurse",
            "stream_id": 144212,
            "subject": "Wed 2019-02-27",
            "submessages": [],
            "timestamp": 1551302486,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/f94d23aeb129de073ba8edd98e39c8c9d7fa46ad?x=x&version=4",
            "client": "ZulipElectron",
            "content": "<p>Python solution to 108:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">class</span> <span class=\"nc\">Solution</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"nf\">sortedArrayToBST</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">nums</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">])</span> <span class=\"o\">-&gt;</span> <span class=\"n\">TreeNode</span><span class=\"p\">:</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">nums</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"bp\">None</span>\n\n        <span class=\"n\">mid</span> <span class=\"o\">=</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">nums</span><span class=\"p\">)</span> <span class=\"o\">//</span> <span class=\"mi\">2</span>\n        <span class=\"n\">head</span> <span class=\"o\">=</span> <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"n\">nums</span><span class=\"p\">[</span><span class=\"n\">mid</span><span class=\"p\">])</span>\n        <span class=\"n\">head</span><span class=\"o\">.</span><span class=\"n\">left</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">sortedArrayToBST</span><span class=\"p\">(</span><span class=\"n\">nums</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">:</span><span class=\"n\">mid</span><span class=\"p\">])</span>\n        <span class=\"n\">head</span><span class=\"o\">.</span><span class=\"n\">right</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">sortedArrayToBST</span><span class=\"p\">(</span><span class=\"n\">nums</span><span class=\"p\">[</span><span class=\"n\">mid</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"p\">:])</span>\n\n        <span class=\"k\">return</span> <span class=\"n\">head</span>\n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "Post-Lunch Prep (PLP)",
            "flags": [
                "read",
                "historical"
            ],
            "id": 159561488,
            "is_me_message": false,
            "last_edit_timestamp": 1551308392,
            "reactions": [],
            "recipient_id": 183179,
            "sender_email": "zstatmanweil@gmail.com",
            "sender_full_name": "Zoe Larissa Statman-Weil (she) (SP1'19)",
            "sender_id": 203399,
            "sender_realm_str": "recurse",
            "stream_id": 144212,
            "subject": "Wed 2019-02-27",
            "submessages": [],
            "timestamp": 1551308376,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/964f1257b95e9bf794104ef709a63173?d=identicon&version=1",
            "client": "ZulipElectron",
            "content": "<p><strong>PLP</strong> starts in <em>20 minutes</em>! &nbsp; <span aria-label=\"chart\" class=\"emoji emoji-1f4c8\" role=\"img\" title=\"chart\">:chart:</span> &nbsp; <span aria-label=\"dancers\" class=\"emoji emoji-1f46f\" role=\"img\" title=\"dancers\">:dancers:</span> &nbsp; <span aria-label=\"snail\" class=\"emoji emoji-1f40c\" role=\"img\" title=\"snail\">:snail:</span> &nbsp; Here are today's problems:<br>\n- Easy: <a href=\"https://leetcode.com/problems/count-primes/\" target=\"_blank\" title=\"https://leetcode.com/problems/count-primes/\">https://leetcode.com/problems/count-primes/</a><br>\n- Medium: <a href=\"https://leetcode.com/problems/word-search/\" target=\"_blank\" title=\"https://leetcode.com/problems/word-search/\">https://leetcode.com/problems/word-search/</a></p>\n<p>See all you party plpers in the presentation space soon.</p>",
            "content_type": "text/html",
            "display_recipient": "Post-Lunch Prep (PLP)",
            "flags": [
                "read",
                "historical"
            ],
            "id": 159638800,
            "is_me_message": false,
            "last_edit_timestamp": 1551378696,
            "reactions": [],
            "recipient_id": 183179,
            "sender_email": "terrykoshea@gmail.com",
            "sender_full_name": "Terry O'Shea (she) (W2'19)",
            "sender_id": 158856,
            "sender_realm_str": "recurse",
            "stream_id": 144212,
            "subject": "Wed 2019-02-27",
            "submessages": [],
            "timestamp": 1551378653,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/964f1257b95e9bf794104ef709a63173?d=identicon&version=1",
            "client": "ZulipElectron",
            "content": "<p>Just kidding, the easy problem is actually this one: <a href=\"https://leetcode.com/problems/subtree-of-another-tree/\" target=\"_blank\" title=\"https://leetcode.com/problems/subtree-of-another-tree/\">https://leetcode.com/problems/subtree-of-another-tree/</a></p>",
            "content_type": "text/html",
            "display_recipient": "Post-Lunch Prep (PLP)",
            "flags": [
                "read",
                "historical"
            ],
            "id": 159640460,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 183179,
            "sender_email": "terrykoshea@gmail.com",
            "sender_full_name": "Terry O'Shea (she) (W2'19)",
            "sender_id": 158856,
            "sender_realm_str": "recurse",
            "stream_id": 144212,
            "subject": "Wed 2019-02-27",
            "submessages": [],
            "timestamp": 1551379652,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/964f1257b95e9bf794104ef709a63173?d=identicon&version=1",
            "client": "ZulipElectron",
            "content": "<p>Does anyone want to volunteer to host PLP today?</p>",
            "content_type": "text/html",
            "display_recipient": "Post-Lunch Prep (PLP)",
            "flags": [
                "read",
                "historical"
            ],
            "id": 159925764,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 183179,
            "sender_email": "terrykoshea@gmail.com",
            "sender_full_name": "Terry O'Shea (she) (W2'19)",
            "sender_id": 158856,
            "sender_realm_str": "recurse",
            "stream_id": 144212,
            "subject": "Monday, March 4th, 2019",
            "submessages": [],
            "timestamp": 1551715785,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/9d3b7cbc4a7f592a0fb7cd31f7a9766c09366d3f?x=x&version=2",
            "client": "ZulipElectron",
            "content": "<p>I'll host!</p>",
            "content_type": "text/html",
            "display_recipient": "Post-Lunch Prep (PLP)",
            "flags": [
                "read",
                "historical"
            ],
            "id": 159925927,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 183179,
            "sender_email": "pekarsky.maxim@gmail.com",
            "sender_full_name": "Max Pekarsky (he) (W2'19)",
            "sender_id": 158536,
            "sender_realm_str": "recurse",
            "stream_id": 144212,
            "subject": "Monday, March 4th, 2019",
            "submessages": [],
            "timestamp": 1551715895,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/9d3b7cbc4a7f592a0fb7cd31f7a9766c09366d3f?x=x&version=2",
            "client": "ZulipElectron",
            "content": "<p>Is there a list of past questions, to make sure I don't reuse recent ones?</p>",
            "content_type": "text/html",
            "display_recipient": "Post-Lunch Prep (PLP)",
            "flags": [
                "read",
                "historical"
            ],
            "id": 159926028,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 183179,
            "sender_email": "pekarsky.maxim@gmail.com",
            "sender_full_name": "Max Pekarsky (he) (W2'19)",
            "sender_id": 158536,
            "sender_realm_str": "recurse",
            "stream_id": 144212,
            "subject": "Monday, March 4th, 2019",
            "submessages": [],
            "timestamp": 1551715949,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/964f1257b95e9bf794104ef709a63173?d=identicon&version=1",
            "client": "ZulipElectron",
            "content": "<p>No...I think we just rely on institutional memory. Maybe make your picks and then I'll comment saying if they seem too familiar</p>",
            "content_type": "text/html",
            "display_recipient": "Post-Lunch Prep (PLP)",
            "flags": [
                "read",
                "historical"
            ],
            "id": 159926497,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 183179,
            "sender_email": "terrykoshea@gmail.com",
            "sender_full_name": "Terry O'Shea (she) (W2'19)",
            "sender_id": 158856,
            "sender_realm_str": "recurse",
            "stream_id": 144212,
            "subject": "Monday, March 4th, 2019",
            "submessages": [],
            "timestamp": 1551716278,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/9d3b7cbc4a7f592a0fb7cd31f7a9766c09366d3f?x=x&version=2",
            "client": "ZulipElectron",
            "content": "<p>Hello everyone! Pl\u00fcp will start at 1:45 PM today as usual. Our problems are:</p>\n<ul>\n<li><strong>[Easy]</strong> <a href=\"https://leetcode.com/problems/backspace-string-compare/\" target=\"_blank\" title=\"https://leetcode.com/problems/backspace-string-compare/\">https://leetcode.com/problems/backspace-string-compare/</a></li>\n<li><strong>[Medium]</strong> <a href=\"https://leetcode.com/problems/reorganize-string/\" target=\"_blank\" title=\"https://leetcode.com/problems/reorganize-string/\">https://leetcode.com/problems/reorganize-string/</a></li>\n</ul>",
            "content_type": "text/html",
            "display_recipient": "Post-Lunch Prep (PLP)",
            "flags": [
                "read",
                "historical"
            ],
            "id": 159927117,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f31f",
                    "emoji_name": "glowing_star",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "terrykoshea@gmail.com",
                        "full_name": "Terry O'Shea (she) (W2'19)",
                        "id": 158856
                    },
                    "user_id": 158856
                }
            ],
            "recipient_id": 183179,
            "sender_email": "pekarsky.maxim@gmail.com",
            "sender_full_name": "Max Pekarsky (he) (W2'19)",
            "sender_id": 158536,
            "sender_realm_str": "recurse",
            "stream_id": 144212,
            "subject": "Monday, March 4th, 2019",
            "submessages": [],
            "timestamp": 1551716690,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/65d6c64fa1f9d28ab178a7dda4cfb5e3d978dd5e?x=x&version=2",
            "client": "ZulipElectron",
            "content": "<p>For your daily does of algorithm practice, we'll be going over an exercise with linked-lists, and another with matrices. As usual, Pl\u00fcp will begin at 1:45 pm.<br>\nEasy: <a href=\"https://leetcode.com/problems/palindrome-linked-list/\" target=\"_blank\" title=\"https://leetcode.com/problems/palindrome-linked-list/\">https://leetcode.com/problems/palindrome-linked-list/</a><br>\nMedium: <a href=\"https://leetcode.com/problems/search-a-2d-matrix-ii/\" target=\"_blank\" title=\"https://leetcode.com/problems/search-a-2d-matrix-ii/\">https://leetcode.com/problems/search-a-2d-matrix-ii/</a></p>",
            "content_type": "text/html",
            "display_recipient": "Post-Lunch Prep (PLP)",
            "flags": [
                "read",
                "historical"
            ],
            "id": 160021013,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 183179,
            "sender_email": "housker@gmail.com",
            "sender_full_name": "Adelle Housker (she) (W2'19)",
            "sender_id": 158595,
            "sender_realm_str": "recurse",
            "stream_id": 144212,
            "subject": "Tuesday, March 5th, 2019",
            "submessages": [],
            "timestamp": 1551806111,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/65d6c64fa1f9d28ab178a7dda4cfb5e3d978dd5e?x=x&version=2",
            "client": "ZulipElectron",
            "content": "<p>@all Post-Lunch Prep is beginning now on 4th. Come and practice algorithms with linked lists and matrices!</p>",
            "content_type": "text/html",
            "display_recipient": "Post-Lunch Prep (PLP)",
            "flags": [
                "read",
                "historical"
            ],
            "id": 160029026,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 183179,
            "sender_email": "housker@gmail.com",
            "sender_full_name": "Adelle Housker (she) (W2'19)",
            "sender_id": 158595,
            "sender_realm_str": "recurse",
            "stream_id": 144212,
            "subject": "Tuesday, March 5th, 2019",
            "submessages": [],
            "timestamp": 1551811728,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/88e408b7dfc059cb2b8f44099080d7ea854ad6a7?x=x&version=2",
            "client": "ZulipElectron",
            "content": "<p>JS code for the \"Medium\" problem</p>\n<div class=\"codehilite\"><pre><span></span>/**\n * @param {number[][]} matrix\n * @param {number} target\n * @return {boolean}\n */\nvar searchMatrix = function(matrix, target) {\n    if (matrix.length === 0) return false;\n    let pointer = {\n        row: 0,\n        column: 0\n    };\n\n    while (matrix[pointer.row][pointer.column] &lt; target &amp;&amp; pointer.column &lt; matrix[0].length - 1) {\n        pointer.column += 1;\n    }\n\n    while (pointer.row &lt; matrix.length &amp;&amp; pointer.column &gt; -1) {\n        let currVal = matrix[pointer.row][pointer.column];\n        if (currVal === target) return true;\n        if (currVal &gt; target) {\n            pointer.column --;\n        } else {\n            pointer.row ++;\n        }\n    }\n\n    return false;\n};\n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "Post-Lunch Prep (PLP)",
            "flags": [
                "read",
                "historical"
            ],
            "id": 160036014,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "9129",
                    "emoji_name": "animatedoctopus",
                    "reaction_type": "realm_emoji",
                    "user": {
                        "email": "terrykoshea@gmail.com",
                        "full_name": "Terry O'Shea (she) (W2'19)",
                        "id": 158856
                    },
                    "user_id": 158856
                },
                {
                    "emoji_code": "9129",
                    "emoji_name": "animatedoctopus",
                    "reaction_type": "realm_emoji",
                    "user": {
                        "email": "sbj6290@gmail.com",
                        "full_name": "Byung Joo Shin (W2'19)",
                        "id": 158535
                    },
                    "user_id": 158535
                }
            ],
            "recipient_id": 183179,
            "sender_email": "travis@travish.com",
            "sender_full_name": "Travis Horton (he) (SP1'19)",
            "sender_id": 203425,
            "sender_realm_str": "recurse",
            "stream_id": 144212,
            "subject": "Tuesday, March 5th, 2019",
            "submessages": [],
            "timestamp": 1551816693,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/88e408b7dfc059cb2b8f44099080d7ea854ad6a7?x=x&version=2",
            "client": "ZulipElectron",
            "content": "<p>JS code for the \"Easy\" problem:</p>\n<div class=\"codehilite\"><pre><span></span>/**\n * Definition for singly-linked list.\n * function ListNode(val) {\n *     this.val = val;\n *     this.next = null;\n * }\n */\n/**\n * @param {ListNode} head\n * @return {boolean}\n */\nvar isPalindrome = function(head) {\n    let length = 0;\n    let currentNode = head;\n    while (currentNode) {\n        length++;\n        currentNode = currentNode.next;\n    }\n\n    if (length &lt; 2) {\n        return true;\n    }\n\n    let pointer1 = null;\n    let pointer2 = head;\n\n    for (let i = 0; i &lt; Math.floor(length/2); i++) {\n        const tmp = pointer2.next;\n        pointer2.next = pointer1;\n        pointer1 = pointer2;\n        pointer2 = tmp;\n    }\n\n    // if length is odd, move pointer2 to the next one\n    if (length % 2) {\n        pointer2 = pointer2.next;\n    }\n\n    while (pointer1 &amp;&amp; pointer1.val === pointer2.val) {\n        pointer1 = pointer1.next;\n        pointer2 = pointer2.next;\n    }\n\n    return pointer1 === null;\n};\n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "Post-Lunch Prep (PLP)",
            "flags": [
                "read",
                "historical"
            ],
            "id": 160036078,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f389",
                    "emoji_name": "tada",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "terrykoshea@gmail.com",
                        "full_name": "Terry O'Shea (she) (W2'19)",
                        "id": 158856
                    },
                    "user_id": 158856
                }
            ],
            "recipient_id": 183179,
            "sender_email": "travis@travish.com",
            "sender_full_name": "Travis Horton (he) (SP1'19)",
            "sender_id": 203425,
            "sender_realm_str": "recurse",
            "stream_id": 144212,
            "subject": "Tuesday, March 5th, 2019",
            "submessages": [],
            "timestamp": 1551816730,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/9d3b7cbc4a7f592a0fb7cd31f7a9766c09366d3f?x=x&version=2",
            "client": "ZulipElectron",
            "content": "<p>(deleted)</p>",
            "content_type": "text/html",
            "display_recipient": "Post-Lunch Prep (PLP)",
            "flags": [
                "read",
                "historical"
            ],
            "id": 160109726,
            "is_me_message": false,
            "last_edit_timestamp": 1551889014,
            "reactions": [],
            "recipient_id": 183179,
            "sender_email": "pekarsky.maxim@gmail.com",
            "sender_full_name": "Max Pekarsky (he) (W2'19)",
            "sender_id": 158536,
            "sender_realm_str": "recurse",
            "stream_id": 144212,
            "subject": "Monday, March 4th, 2019",
            "submessages": [],
            "timestamp": 1551889001,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/9d3b7cbc4a7f592a0fb7cd31f7a9766c09366d3f?x=x&version=2",
            "client": "ZulipElectron",
            "content": "<p>Hello everyone! We'll be Pl\u00fcp-ing at 1:45 PM today as usual. Our problems are:</p>\n<p>[Easy] <a href=\"https://leetcode.com/problems/move-zeroes/\" target=\"_blank\" title=\"https://leetcode.com/problems/move-zeroes/\">https://leetcode.com/problems/move-zeroes/</a><br>\n[Medium] <a href=\"https://leetcode.com/problems/largest-number/\" target=\"_blank\" title=\"https://leetcode.com/problems/largest-number/\">https://leetcode.com/problems/largest-number/</a></p>",
            "content_type": "text/html",
            "display_recipient": "Post-Lunch Prep (PLP)",
            "flags": [
                "read",
                "historical"
            ],
            "id": 160109774,
            "is_me_message": false,
            "last_edit_timestamp": 1551889036,
            "reactions": [],
            "recipient_id": 183179,
            "sender_email": "pekarsky.maxim@gmail.com",
            "sender_full_name": "Max Pekarsky (he) (W2'19)",
            "sender_id": 158536,
            "sender_realm_str": "recurse",
            "stream_id": 144212,
            "subject": "Wed, Mar 6th, 2019",
            "submessages": [],
            "timestamp": 1551889027,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/61a5effebbad27a89955428726bd527a?d=identicon&version=1",
            "client": "website",
            "content": "<p>Working solution, credit to a convo with <span class=\"user-mention\" data-user-id=\"203861\">@Joseph Morag (SP1'19)</span> and <span class=\"user-mention\" data-user-id=\"198445\">@David Fisher (W2'19)</span> </p>\n<div class=\"codehilite\"><pre><span></span>from functools import cmp_to_key\n\nclass Solution:\n\n    def largestNumber(self, nums):\n        def comparison(x, y):\n            if x == y:\n                return 0\n            if x + y &gt; y + x:\n                return -1\n            return 1\n\n        stringNums = map(str, nums)\n        sortedStrings = sorted(stringNums, key=cmp_to_key(comparison))\n        answerString = &quot;&quot;.join(sortedStrings)\n        return &#39;0&#39; if answerString and answerString[0] == &#39;0&#39; else answerString\n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "Post-Lunch Prep (PLP)",
            "flags": [
                "read",
                "historical"
            ],
            "id": 160133905,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 183179,
            "sender_email": "michaelzaneri@gmail.com",
            "sender_full_name": "Mike Zaneri (SP1'19)",
            "sender_id": 203453,
            "sender_realm_str": "recurse",
            "stream_id": 144212,
            "subject": "Wed, Mar 6th, 2019",
            "submessages": [],
            "timestamp": 1551905923,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4b802c55ae5fe3bdac9dc52be2a04b7f?d=identicon&version=1",
            "client": "website",
            "content": "<p>Some 100% time solutions here; their memory usage is abysmal.</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kd\">type</span> <span class=\"nx\">my_ss</span> <span class=\"p\">[]</span><span class=\"kt\">string</span>\n\n<span class=\"kd\">func</span> <span class=\"p\">(</span><span class=\"nx\">s</span> <span class=\"nx\">my_ss</span><span class=\"p\">)</span> <span class=\"nx\">Less</span><span class=\"p\">(</span><span class=\"nx\">i</span><span class=\"p\">,</span> <span class=\"nx\">j</span> <span class=\"kt\">int</span><span class=\"p\">)</span> <span class=\"kt\">bool</span> <span class=\"p\">{</span>\n    <span class=\"k\">return</span> <span class=\"nx\">s</span><span class=\"p\">[</span><span class=\"nx\">i</span><span class=\"p\">]</span> <span class=\"o\">+</span> <span class=\"nx\">s</span><span class=\"p\">[</span><span class=\"nx\">j</span><span class=\"p\">]</span> <span class=\"p\">&gt;</span> <span class=\"nx\">s</span><span class=\"p\">[</span><span class=\"nx\">j</span><span class=\"p\">]</span> <span class=\"o\">+</span> <span class=\"nx\">s</span><span class=\"p\">[</span><span class=\"nx\">i</span><span class=\"p\">]</span>\n<span class=\"p\">}</span>\n\n<span class=\"kd\">func</span> <span class=\"p\">(</span><span class=\"nx\">m</span> <span class=\"nx\">my_ss</span><span class=\"p\">)</span> <span class=\"nx\">Len</span><span class=\"p\">()</span> <span class=\"kt\">int</span> <span class=\"p\">{</span>\n    <span class=\"k\">return</span> <span class=\"nx\">sort</span><span class=\"p\">.</span><span class=\"nx\">StringSlice</span><span class=\"p\">(</span><span class=\"nx\">m</span><span class=\"p\">).</span><span class=\"nx\">Len</span><span class=\"p\">()</span>\n<span class=\"p\">}</span>\n\n<span class=\"kd\">func</span> <span class=\"p\">(</span><span class=\"nx\">m</span> <span class=\"nx\">my_ss</span><span class=\"p\">)</span> <span class=\"nx\">Swap</span><span class=\"p\">(</span><span class=\"nx\">i</span><span class=\"p\">,</span> <span class=\"nx\">j</span> <span class=\"kt\">int</span><span class=\"p\">)</span>  <span class=\"p\">{</span>\n    <span class=\"nx\">sort</span><span class=\"p\">.</span><span class=\"nx\">StringSlice</span><span class=\"p\">(</span><span class=\"nx\">m</span><span class=\"p\">).</span><span class=\"nx\">Swap</span><span class=\"p\">(</span><span class=\"nx\">i</span><span class=\"p\">,</span><span class=\"nx\">j</span><span class=\"p\">)</span>\n<span class=\"p\">}</span>\n\n<span class=\"kd\">func</span> <span class=\"nx\">largestNumber</span><span class=\"p\">(</span><span class=\"nx\">nums</span> <span class=\"p\">[]</span><span class=\"kt\">int</span><span class=\"p\">)</span> <span class=\"kt\">string</span> <span class=\"p\">{</span>\n    <span class=\"kd\">var</span> <span class=\"nx\">res</span> <span class=\"kt\">string</span>\n    <span class=\"nx\">strs</span> <span class=\"o\">:=</span> <span class=\"nb\">make</span><span class=\"p\">([]</span><span class=\"kt\">string</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n\n    <span class=\"k\">for</span> <span class=\"nx\">_</span><span class=\"p\">,</span> <span class=\"nx\">v</span> <span class=\"o\">:=</span> <span class=\"k\">range</span> <span class=\"nx\">nums</span> <span class=\"p\">{</span>\n        <span class=\"nx\">strs</span> <span class=\"p\">=</span> <span class=\"nb\">append</span><span class=\"p\">(</span><span class=\"nx\">strs</span><span class=\"p\">,</span> <span class=\"nx\">strconv</span><span class=\"p\">.</span><span class=\"nx\">Itoa</span><span class=\"p\">(</span><span class=\"nx\">v</span><span class=\"p\">))</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"nx\">sort</span><span class=\"p\">.</span><span class=\"nx\">Sort</span><span class=\"p\">(</span><span class=\"nx\">my_ss</span><span class=\"p\">(</span><span class=\"nx\">strs</span><span class=\"p\">))</span>\n\n    <span class=\"k\">for</span> <span class=\"nx\">_</span><span class=\"p\">,</span> <span class=\"nx\">v</span> <span class=\"o\">:=</span> <span class=\"k\">range</span> <span class=\"nx\">strs</span> <span class=\"p\">{</span>\n        <span class=\"nx\">res</span> <span class=\"p\">=</span> <span class=\"nx\">res</span> <span class=\"o\">+</span> <span class=\"nx\">v</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"k\">if</span> <span class=\"nx\">res</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"sc\">&#39;0&#39;</span> <span class=\"p\">{</span>\n        <span class=\"k\">return</span> <span class=\"s\">&quot;0&quot;</span>\n    <span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"p\">{</span>\n        <span class=\"k\">return</span> <span class=\"nx\">res</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</pre></div>\n\n\n<div class=\"codehilite\"><pre><span></span><span class=\"kd\">func</span> <span class=\"nx\">moveZeroes</span><span class=\"p\">(</span><span class=\"nx\">nums</span> <span class=\"p\">[]</span><span class=\"kt\">int</span><span class=\"p\">)</span>  <span class=\"p\">{</span>\n    <span class=\"kd\">var</span> <span class=\"nx\">next</span> <span class=\"kt\">int</span>\n\n    <span class=\"k\">for</span> <span class=\"nx\">n</span><span class=\"p\">,</span> <span class=\"nx\">v</span> <span class=\"o\">:=</span> <span class=\"k\">range</span> <span class=\"nx\">nums</span> <span class=\"p\">{</span>\n        <span class=\"k\">if</span> <span class=\"nx\">v</span> <span class=\"o\">!=</span> <span class=\"mi\">0</span> <span class=\"p\">{</span>\n            <span class=\"nx\">nums</span><span class=\"p\">[</span><span class=\"nx\">next</span><span class=\"p\">]</span> <span class=\"p\">=</span> <span class=\"nx\">v</span>\n\n            <span class=\"k\">if</span> <span class=\"nx\">n</span> <span class=\"o\">!=</span> <span class=\"nx\">next</span> <span class=\"p\">{</span>\n                    <span class=\"nx\">nums</span><span class=\"p\">[</span><span class=\"nx\">n</span><span class=\"p\">]</span> <span class=\"p\">=</span> <span class=\"mi\">0</span>\n            <span class=\"p\">}</span>\n\n            <span class=\"nx\">next</span> <span class=\"o\">+=</span> <span class=\"mi\">1</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "Post-Lunch Prep (PLP)",
            "flags": [
                "read",
                "historical"
            ],
            "id": 160137065,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 183179,
            "sender_email": "tmg@fastmail.com",
            "sender_full_name": "Thomas Gardner (W2'19)",
            "sender_id": 198212,
            "sender_realm_str": "recurse",
            "stream_id": 144212,
            "subject": "Wed, Mar 6th, 2019",
            "submessages": [],
            "timestamp": 1551908407,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/10493ac588845cc36eb03ac9c87446dca1ec19d8?x=x&version=4",
            "client": "ZulipElectron",
            "content": "<p>Hey everyone, PLP will be starting in the presentation space at 1:45pm</p>\n<p>Today's problems are:<br>\n- 997. <a href=\"https://leetcode.com/problems/find-the-town-judge/\" target=\"_blank\" title=\"https://leetcode.com/problems/find-the-town-judge/\">Find the Town Judge - Easy</a><br>\n- 310. <a href=\"https://leetcode.com/problems/minimum-height-trees/\" target=\"_blank\" title=\"https://leetcode.com/problems/minimum-height-trees/\">Minimum Height Trees - Medium</a></p>",
            "content_type": "text/html",
            "display_recipient": "Post-Lunch Prep (PLP)",
            "flags": [
                "read",
                "historical"
            ],
            "id": 160224485,
            "is_me_message": false,
            "last_edit_timestamp": 1551984092,
            "reactions": [
                {
                    "emoji_code": "1f642",
                    "emoji_name": "slight_smile",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "terrykoshea@gmail.com",
                        "full_name": "Terry O'Shea (she) (W2'19)",
                        "id": 158856
                    },
                    "user_id": 158856
                }
            ],
            "recipient_id": 183179,
            "sender_email": "mrmarkorodic@googlemail.com",
            "sender_full_name": "Marko Rodic (he) (W2'19)",
            "sender_id": 158840,
            "sender_realm_str": "recurse",
            "stream_id": 144212,
            "subject": "Fri, Mar 7th, 2019",
            "submessages": [],
            "timestamp": 1551983984,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/88e408b7dfc059cb2b8f44099080d7ea854ad6a7?x=x&version=2",
            "client": "ZulipElectron",
            "content": "<p>Hi ya'll! PLP will be starting in the presentation space at 1:45pm</p>\n<p>Today's problems are:<br>\n581. <a href=\"https://leetcode.com/problems/shortest-unsorted-continuous-subarray/\" target=\"_blank\" title=\"https://leetcode.com/problems/shortest-unsorted-continuous-subarray/\">Shortest Unsorted Continuous Subarray</a><br>\n861. <a href=\"https://leetcode.com/problems/score-after-flipping-matrix/\" target=\"_blank\" title=\"https://leetcode.com/problems/score-after-flipping-matrix/\">Score After Flipping Matrix</a></p>\n<p><span aria-label=\"smile\" class=\"emoji emoji-263a\" role=\"img\" title=\"smile\">:smile:</span></p>",
            "content_type": "text/html",
            "display_recipient": "Post-Lunch Prep (PLP)",
            "flags": [
                "read",
                "historical"
            ],
            "id": 160489431,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "+1",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "terrykoshea@gmail.com",
                        "full_name": "Terry O'Shea (she) (W2'19)",
                        "id": 158856
                    },
                    "user_id": 158856
                },
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "+1",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "learningnerd@gmail.com",
                        "full_name": "Liz Krane (she) (W2'19)",
                        "id": 158774
                    },
                    "user_id": 158774
                }
            ],
            "recipient_id": 183179,
            "sender_email": "travis@travish.com",
            "sender_full_name": "Travis Horton (he) (SP1'19)",
            "sender_id": 203425,
            "sender_realm_str": "recurse",
            "stream_id": 144212,
            "subject": "Fri, Mar 7th, 2019",
            "submessages": [],
            "timestamp": 1552318811,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/7530a0eb7a6becf50783ad55094b30af3cd5bd96?x=x&version=2",
            "client": "website",
            "content": "<p>Thanks Travis :) I just want to drop a note to the PLP folks that I think we need to do a better job at scoping the difficulty of the problems in general-  I've attended a few times where 0 or 1 group was able to come up with a solution to the \"easy\" problem, and I don't really get excited about attending because its started to feel a bit dispiriting :x  LeetCode is also notorious for not leveling problems appropriately so I'd recommend folks taking a closer look at problem difficulty before selecting or using Coderbyte which is the best platform I've found for appropriately scoped algos. Just my 2 cents  <span aria-label=\"heart\" class=\"emoji emoji-2764\" role=\"img\" title=\"heart\">:heart:</span> <span aria-label=\"pray\" class=\"emoji emoji-1f64f\" role=\"img\" title=\"pray\">:pray:</span></p>",
            "content_type": "text/html",
            "display_recipient": "Post-Lunch Prep (PLP)",
            "flags": [
                "read",
                "historical"
            ],
            "id": 160490278,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1271",
                    "emoji_name": "coin",
                    "reaction_type": "realm_emoji",
                    "user": {
                        "email": "pekarsky.maxim@gmail.com",
                        "full_name": "Max Pekarsky (he) (W2'19)",
                        "id": 158536
                    },
                    "user_id": 158536
                }
            ],
            "recipient_id": 183179,
            "sender_email": "rekhviasnino@gmail.com",
            "sender_full_name": "Nino Rekhviashvili (she/they) (SP1'19)",
            "sender_id": 203433,
            "sender_realm_str": "recurse",
            "stream_id": 144212,
            "subject": "Fri, Mar 7th, 2019",
            "submessages": [],
            "timestamp": 1552319381,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/1eb103c0e899f372a85eb0a44f0a0f42?d=identicon&version=1",
            "client": "ZulipMobile",
            "content": "<p>I'm cool with trying other platforms and switching things up</p>",
            "content_type": "text/html",
            "display_recipient": "Post-Lunch Prep (PLP)",
            "flags": [
                "read",
                "historical"
            ],
            "id": 160497668,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 183179,
            "sender_email": "learningnerd@gmail.com",
            "sender_full_name": "Liz Krane (she) (W2'19)",
            "sender_id": 158774,
            "sender_realm_str": "recurse",
            "stream_id": 144212,
            "subject": "Fri, Mar 7th, 2019",
            "submessages": [],
            "timestamp": 1552324086,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/964f1257b95e9bf794104ef709a63173?d=identicon&version=1",
            "client": "ZulipElectron",
            "content": "<p>All right, <span class=\"user-mention\" data-user-id=\"198212\">@Thomas Gardner (W2'19)</span> is hosting tomorrow, so he can try picking two Coderbyte problems instead</p>",
            "content_type": "text/html",
            "display_recipient": "Post-Lunch Prep (PLP)",
            "flags": [
                "read",
                "historical"
            ],
            "id": 160499038,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 183179,
            "sender_email": "terrykoshea@gmail.com",
            "sender_full_name": "Terry O'Shea (she) (W2'19)",
            "sender_id": 158856,
            "sender_realm_str": "recurse",
            "stream_id": 144212,
            "subject": "Fri, Mar 7th, 2019",
            "submessages": [],
            "timestamp": 1552325035,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/964f1257b95e9bf794104ef709a63173?d=identicon&version=1",
            "client": "ZulipElectron",
            "content": "<p>Also, <strong>PSA</strong>: if people want to host PLP in the future, you can send a private message to PLP Scheduler (a bot) to arrange that. Just type <code>get schedule</code> and then <code>assign X</code> (X=the ID of the day you want to host)</p>",
            "content_type": "text/html",
            "display_recipient": "Post-Lunch Prep (PLP)",
            "flags": [
                "read",
                "historical"
            ],
            "id": 160499142,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 183179,
            "sender_email": "terrykoshea@gmail.com",
            "sender_full_name": "Terry O'Shea (she) (W2'19)",
            "sender_id": 158856,
            "sender_realm_str": "recurse",
            "stream_id": 144212,
            "subject": "Fri, Mar 7th, 2019",
            "submessages": [],
            "timestamp": 1552325090,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/7530a0eb7a6becf50783ad55094b30af3cd5bd96?x=x&version=2",
            "client": "website",
            "content": "<p>Eek, checking now and it seems like many Coderbyte challenges are behind a paywall so that may not work that great - but I will login on 4th w/ my credentials later today if anyone wants to use the account in-house</p>",
            "content_type": "text/html",
            "display_recipient": "Post-Lunch Prep (PLP)",
            "flags": [
                "read",
                "historical"
            ],
            "id": 160500786,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 183179,
            "sender_email": "rekhviasnino@gmail.com",
            "sender_full_name": "Nino Rekhviashvili (she/they) (SP1'19)",
            "sender_id": 203433,
            "sender_realm_str": "recurse",
            "stream_id": 144212,
            "subject": "Fri, Mar 7th, 2019",
            "submessages": [],
            "timestamp": 1552326300,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/ab772058030721ef1c85f4d7692609dc?d=identicon&version=1",
            "client": "website",
            "content": "<p>on interviewbit the exercises are classified by time, so that can help, and also mentions which companies use them</p>",
            "content_type": "text/html",
            "display_recipient": "Post-Lunch Prep (PLP)",
            "flags": [
                "read",
                "historical"
            ],
            "id": 160500893,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 183179,
            "sender_email": "hola@michelletorres.mx",
            "sender_full_name": "Michelle Torres (she) (W2'19)",
            "sender_id": 198461,
            "sender_realm_str": "recurse",
            "stream_id": 144212,
            "subject": "Fri, Mar 7th, 2019",
            "submessages": [],
            "timestamp": 1552326366,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/7530a0eb7a6becf50783ad55094b30af3cd5bd96?x=x&version=2",
            "client": "website",
            "content": "<p>ooh interesting</p>",
            "content_type": "text/html",
            "display_recipient": "Post-Lunch Prep (PLP)",
            "flags": [
                "read",
                "historical"
            ],
            "id": 160500912,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 183179,
            "sender_email": "rekhviasnino@gmail.com",
            "sender_full_name": "Nino Rekhviashvili (she/they) (SP1'19)",
            "sender_id": 203433,
            "sender_realm_str": "recurse",
            "stream_id": 144212,
            "subject": "Fri, Mar 7th, 2019",
            "submessages": [],
            "timestamp": 1552326388,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4b802c55ae5fe3bdac9dc52be2a04b7f?d=identicon&version=1",
            "client": "website",
            "content": "<p>Hi all, today's PLP (/plu:p/) is scheduled for 1:45p in the presentation space.</p>\n<p>For the first time in forever, PLP has a <em>Tuesday twist</em>: the problems have been selected from unleet resources.</p>\n<ul>\n<li><a href=\"https://www.interviewbit.com/problems/kth-smallest-element-in-tree/\" target=\"_blank\" title=\"https://www.interviewbit.com/problems/kth-smallest-element-in-tree/\">https://www.interviewbit.com/problems/kth-smallest-element-in-tree/</a></li>\n<li><a href=\"https://www.coderbyte.com/editor/guest:Maximal%20Square:Go\" target=\"_blank\" title=\"https://www.coderbyte.com/editor/guest:Maximal%20Square:Go\">https://www.coderbyte.com/editor/guest:Maximal%20Square:Go</a></li>\n</ul>\n<p>Happy PLPing</p>",
            "content_type": "text/html",
            "display_recipient": "Post-Lunch Prep (PLP)",
            "flags": [
                "read",
                "historical"
            ],
            "id": 160590214,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 183179,
            "sender_email": "tmg@fastmail.com",
            "sender_full_name": "Thomas Gardner (W2'19)",
            "sender_id": 198212,
            "sender_realm_str": "recurse",
            "stream_id": 144212,
            "subject": "Tue 2019-03-12",
            "submessages": [],
            "timestamp": 1552411373,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/964f1257b95e9bf794104ef709a63173?d=identicon&version=1",
            "client": "ZulipElectron",
            "content": "<p>Blessed constituents,</p>\n<p>These are your problems for today:<br>\n<a href=\"https://leetcode.com/problems/leaf-similar-trees/\" target=\"_blank\" title=\"https://leetcode.com/problems/leaf-similar-trees/\">https://leetcode.com/problems/leaf-similar-trees/</a> [easy]<br>\n<a href=\"https://leetcode.com/problems/replace-words/\" target=\"_blank\" title=\"https://leetcode.com/problems/replace-words/\">https://leetcode.com/problems/replace-words/</a> [medium]</p>",
            "content_type": "text/html",
            "display_recipient": "Post-Lunch Prep (PLP)",
            "flags": [
                "read",
                "historical"
            ],
            "id": 160702558,
            "is_me_message": false,
            "last_edit_timestamp": 1552498617,
            "reactions": [],
            "recipient_id": 183179,
            "sender_email": "terrykoshea@gmail.com",
            "sender_full_name": "Terry O'Shea (she) (W2'19)",
            "sender_id": 158856,
            "sender_realm_str": "recurse",
            "stream_id": 144212,
            "subject": "Wed nes day, 13 March, [W2 | SP1] '19",
            "submessages": [],
            "timestamp": 1552496045,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/88e408b7dfc059cb2b8f44099080d7ea854ad6a7?x=x&version=2",
            "client": "ZulipElectron",
            "content": "<p>i'm assuming the plp is canceled today because of the internet outage?</p>",
            "content_type": "text/html",
            "display_recipient": "Post-Lunch Prep (PLP)",
            "flags": [
                "read",
                "historical"
            ],
            "id": 160804134,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 183179,
            "sender_email": "travis@travish.com",
            "sender_full_name": "Travis Horton (he) (SP1'19)",
            "sender_id": 203425,
            "sender_realm_str": "recurse",
            "stream_id": 144212,
            "subject": "Wed nes day, 13 March, [W2 | SP1] '19",
            "submessages": [],
            "timestamp": 1552585346,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/65d6c64fa1f9d28ab178a7dda4cfb5e3d978dd5e?x=x&version=2",
            "client": "ZulipElectron",
            "content": "<p>In lieu of internet access, for those who can see this on a mobile device, this is your easy one (apparently Amazon asks this): <br>\nIn your cellar there are three light switches in the OFF position. Each switch controls one of three light bulbs on floor above.<br>\nYou may move any of the switches but you may only go upstairs to inspect the bulbs.<br>\nWhen upstairs, you cannot access the switches. What is the minimum number of times you need to go upstairs to determine the switch for each bulb?<br>\n<a href=\"https://www.interviewbit.com/problems/light-switches-in-the-cellar/\" target=\"_blank\" title=\"https://www.interviewbit.com/problems/light-switches-in-the-cellar/\">https://www.interviewbit.com/problems/light-switches-in-the-cellar/</a></p>",
            "content_type": "text/html",
            "display_recipient": "Post-Lunch Prep (PLP)",
            "flags": [
                "read",
                "historical"
            ],
            "id": 160804692,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 183179,
            "sender_email": "housker@gmail.com",
            "sender_full_name": "Adelle Housker (she) (W2'19)",
            "sender_id": 158595,
            "sender_realm_str": "recurse",
            "stream_id": 144212,
            "subject": "Wed nes day, 13 March, [W2 | SP1] '19",
            "submessages": [],
            "timestamp": 1552585747,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/65d6c64fa1f9d28ab178a7dda4cfb5e3d978dd5e?x=x&version=2",
            "client": "ZulipElectron",
            "content": "<p>And for medium, try white-boarding a method for detecting repeating occurrences of 10-nucleotide DNA sequences:<br>\n<a href=\"https://leetcode.com/problems/repeated-dna-sequences/\" target=\"_blank\" title=\"https://leetcode.com/problems/repeated-dna-sequences/\">https://leetcode.com/problems/repeated-dna-sequences/</a></p>",
            "content_type": "text/html",
            "display_recipient": "Post-Lunch Prep (PLP)",
            "flags": [
                "read",
                "historical"
            ],
            "id": 160804829,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 183179,
            "sender_email": "housker@gmail.com",
            "sender_full_name": "Adelle Housker (she) (W2'19)",
            "sender_id": 158595,
            "sender_realm_str": "recurse",
            "stream_id": 144212,
            "subject": "Wed nes day, 13 March, [W2 | SP1] '19",
            "submessages": [],
            "timestamp": 1552585837,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/65d6c64fa1f9d28ab178a7dda4cfb5e3d978dd5e?x=x&version=2",
            "client": "ZulipElectron",
            "content": "<p>Good luck, best wishes!</p>",
            "content_type": "text/html",
            "display_recipient": "Post-Lunch Prep (PLP)",
            "flags": [
                "read",
                "historical"
            ],
            "id": 160804842,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 183179,
            "sender_email": "housker@gmail.com",
            "sender_full_name": "Adelle Housker (she) (W2'19)",
            "sender_id": 158595,
            "sender_realm_str": "recurse",
            "stream_id": 144212,
            "subject": "Wed nes day, 13 March, [W2 | SP1] '19",
            "submessages": [],
            "timestamp": 1552585850,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/7530a0eb7a6becf50783ad55094b30af3cd5bd96?x=x&version=2",
            "client": "website",
            "content": "<p>Hello! Todays problems are: <br>\nEasy: Reverse String! (If you finish early, work on figuring out a super-time-consuming way to solve this) <br>\n<a href=\"https://www.coderbyte.com/editor/guest:First%20Reverse:JavaScript\" target=\"_blank\" title=\"https://www.coderbyte.com/editor/guest:First%20Reverse:JavaScript\">https://www.coderbyte.com/editor/guest:First%20Reverse:JavaScript</a><br>\nMedium: Rotate a Matrix! <br>\n<a href=\"https://leetcode.com/problems/rotate-image/\" target=\"_blank\" title=\"https://leetcode.com/problems/rotate-image/\">https://leetcode.com/problems/rotate-image/</a></p>",
            "content_type": "text/html",
            "display_recipient": "Post-Lunch Prep (PLP)",
            "flags": [
                "read",
                "historical"
            ],
            "id": 161063782,
            "is_me_message": false,
            "last_edit_timestamp": 1552920690,
            "reactions": [
                {
                    "emoji_code": "1f389",
                    "emoji_name": "tada",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "terrykoshea@gmail.com",
                        "full_name": "Terry O'Shea (she) (W2'19)",
                        "id": 158856
                    },
                    "user_id": 158856
                },
                {
                    "emoji_code": "1f389",
                    "emoji_name": "tada",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "pekarsky.maxim@gmail.com",
                        "full_name": "Max Pekarsky (he) (W2'19)",
                        "id": 158536
                    },
                    "user_id": 158536
                }
            ],
            "recipient_id": 183179,
            "sender_email": "rekhviasnino@gmail.com",
            "sender_full_name": "Nino Rekhviashvili (she/they) (SP1'19)",
            "sender_id": 203433,
            "sender_realm_str": "recurse",
            "stream_id": 144212,
            "subject": "Mon, 3.18.2019",
            "submessages": [],
            "timestamp": 1552920667,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/964f1257b95e9bf794104ef709a63173?d=identicon&version=1",
            "client": "ZulipElectron",
            "content": "<p>Beloved PLPers, here are today's two problems:</p>\n<p><strong>Easy</strong>: <a href=\"https://leetcode.com/problems/lowest-common-ancestor-of-a-binary-search-tree/\" target=\"_blank\" title=\"https://leetcode.com/problems/lowest-common-ancestor-of-a-binary-search-tree/\">Lowest Common Ancestor of a Binary Search Tree</a><br>\n----&gt; Bonus: can you do it <a href=\"https://leetcode.com/problems/lowest-common-ancestor-of-a-binary-tree/\" target=\"_blank\" title=\"https://leetcode.com/problems/lowest-common-ancestor-of-a-binary-tree/\">with a binary tree instead of a binary search tree</a>??<br>\n<strong>Medium</strong>: <a href=\"https://leetcode.com/problems/linked-list-cycle/\" target=\"_blank\" title=\"https://leetcode.com/problems/linked-list-cycle/\">Linked List Cycle Detection</a></p>\n<p>Best of luck and see you at 1:45 in our typical spot.</p>",
            "content_type": "text/html",
            "display_recipient": "Post-Lunch Prep (PLP)",
            "flags": [
                "read",
                "historical"
            ],
            "id": 161166894,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 183179,
            "sender_email": "terrykoshea@gmail.com",
            "sender_full_name": "Terry O'Shea (she) (W2'19)",
            "sender_id": 158856,
            "sender_realm_str": "recurse",
            "stream_id": 144212,
            "subject": "Tuesday, March 19th, 2019",
            "submessages": [],
            "timestamp": 1553013570,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/f94d23aeb129de073ba8edd98e39c8c9d7fa46ad?x=x&version=4",
            "client": "ZulipElectron",
            "content": "<p>PLP Woot! Today's problems:</p>\n<p><em>Easy:</em> <a href=\"https://leetcode.com/problems/maximize-distance-to-closest-person/\" target=\"_blank\" title=\"https://leetcode.com/problems/maximize-distance-to-closest-person/\">https://leetcode.com/problems/maximize-distance-to-closest-person/</a><br>\n<em>Medium:</em> <a href=\"https://leetcode.com/problems/remove-duplicates-from-sorted-list-ii/\" target=\"_blank\" title=\"https://leetcode.com/problems/remove-duplicates-from-sorted-list-ii/\">https://leetcode.com/problems/remove-duplicates-from-sorted-list-ii/</a></p>\n<p>See you all at 1:45!</p>",
            "content_type": "text/html",
            "display_recipient": "Post-Lunch Prep (PLP)",
            "flags": [
                "read",
                "historical"
            ],
            "id": 161252426,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "263a",
                    "emoji_name": "smile",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "terrykoshea@gmail.com",
                        "full_name": "Terry O'Shea (she) (W2'19)",
                        "id": 158856
                    },
                    "user_id": 158856
                }
            ],
            "recipient_id": 183179,
            "sender_email": "zstatmanweil@gmail.com",
            "sender_full_name": "Zoe Larissa Statman-Weil (she) (SP1'19)",
            "sender_id": 203399,
            "sender_realm_str": "recurse",
            "stream_id": 144212,
            "subject": "Wed, Mar 20th, 2019",
            "submessages": [],
            "timestamp": 1553092282,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/88e408b7dfc059cb2b8f44099080d7ea854ad6a7?x=x&version=2",
            "client": "ZulipElectron",
            "content": "<p>I finished my solution to the second problem today and was quite proud of it, so wanted to share it here:</p>\n<div class=\"codehilite\"><pre><span></span>/**\n * Definition for singly-linked list.\n * function ListNode(val) {\n *     this.val = val;\n *     this.next = null;\n * }\n */\n/**\n * @param {ListNode} head\n * @return {ListNode}\n */\nvar deleteDuplicates = function(head) {\n    if (!head || !head.next) return head;\n\n    return deleteNodeFromList(head, head.val === head.next.val ? head.val : null);\n\n    function deleteNodeFromList(node, nodeValToDelete) {\n        if (!node.next) {\n            if (node.val !== nodeValToDelete) {\n                return node;\n            } else {\n                return null;\n            }\n        }\n\n        if (node.val === node.next.val) {\n            nodeValToDelete = node.val;\n        }\n\n        if (node.val === nodeValToDelete) {\n            return deleteNodeFromList(node.next, nodeValToDelete)\n        }\n\n        node.next = deleteNodeFromList(node.next, nodeValToDelete);\n\n        return node;\n    }\n};\n</pre></div>\n\n\n<p>:) it was 85% speed and 100% space JS</p>",
            "content_type": "text/html",
            "display_recipient": "Post-Lunch Prep (PLP)",
            "flags": [
                "read",
                "historical"
            ],
            "id": 161287013,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f419",
                    "emoji_name": "octopus",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "terrykoshea@gmail.com",
                        "full_name": "Terry O'Shea (she) (W2'19)",
                        "id": 158856
                    },
                    "user_id": 158856
                },
                {
                    "emoji_code": "1f419",
                    "emoji_name": "octopus",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "gs051095@gmail.com",
                        "full_name": "Gargi Sharma (she/they) (SP1'19)",
                        "id": 203533
                    },
                    "user_id": 203533
                }
            ],
            "recipient_id": 183179,
            "sender_email": "travis@travish.com",
            "sender_full_name": "Travis Horton (he) (SP1'19)",
            "sender_id": 203425,
            "sender_realm_str": "recurse",
            "stream_id": 144212,
            "subject": "Wed, Mar 20th, 2019",
            "submessages": [],
            "timestamp": 1553112988,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/88e408b7dfc059cb2b8f44099080d7ea854ad6a7?x=x&version=2",
            "client": "ZulipElectron",
            "content": "<p>I have two problems to work on, but I think because the code retreat is happening in the presentation space, we should maybe be more circumspect about our PLP today. Here's the two problems I wanted to work on:<br>\n<a href=\"https://leetcode.com/problems/count-primes/\" target=\"_blank\" title=\"https://leetcode.com/problems/count-primes/\">https://leetcode.com/problems/count-primes/</a><br>\n<a href=\"https://leetcode.com/problems/reverse-integer/\" target=\"_blank\" title=\"https://leetcode.com/problems/reverse-integer/\">https://leetcode.com/problems/reverse-integer/</a></p>\n<p>Both were \"easy\", and they both seemed fun and quick to me... we'll see!</p>",
            "content_type": "text/html",
            "display_recipient": "Post-Lunch Prep (PLP)",
            "flags": [
                "read",
                "historical"
            ],
            "id": 161362922,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 183179,
            "sender_email": "travis@travish.com",
            "sender_full_name": "Travis Horton (he) (SP1'19)",
            "sender_id": 203425,
            "sender_realm_str": "recurse",
            "stream_id": 144212,
            "subject": "Thur, Mar 21st 2019",
            "submessages": [],
            "timestamp": 1553186011,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4b802c55ae5fe3bdac9dc52be2a04b7f?d=identicon&version=1",
            "client": "website",
            "content": "<p>PLPers, the problems for today have been selected.</p>\n<p>Easy: <a href=\"https://leetcode.com/problems/projection-area-of-3d-shapes/\" target=\"_blank\" title=\"https://leetcode.com/problems/projection-area-of-3d-shapes/\">Projection Area of 3D Shapes</a><br>\nMedium: <a href=\"https://leetcode.com/problems/most-profit-assigning-work/\" target=\"_blank\" title=\"https://leetcode.com/problems/most-profit-assigning-work/\">Most Profit Assigning Work</a></p>\n<p>Let's meet in the presentation space at ~1:45p</p>",
            "content_type": "text/html",
            "display_recipient": "Post-Lunch Prep (PLP)",
            "flags": [
                "read",
                "historical"
            ],
            "id": 161664244,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "+1",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "terrykoshea@gmail.com",
                        "full_name": "Terry O'Shea (she) (W2'19)",
                        "id": 158856
                    },
                    "user_id": 158856
                }
            ],
            "recipient_id": 183179,
            "sender_email": "tmg@fastmail.com",
            "sender_full_name": "Thomas Gardner (W2'19)",
            "sender_id": 198212,
            "sender_realm_str": "recurse",
            "stream_id": 144212,
            "subject": "Mon 2019-03-25",
            "submessages": [],
            "timestamp": 1553533434,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/964f1257b95e9bf794104ef709a63173?d=identicon&version=1",
            "client": "ZulipElectron",
            "content": "<p>Peoplple, does anyone want to volunteer to host PLP today?</p>",
            "content_type": "text/html",
            "display_recipient": "Post-Lunch Prep (PLP)",
            "flags": [
                "read",
                "historical"
            ],
            "id": 161770531,
            "is_me_message": false,
            "last_edit_timestamp": 1553612941,
            "reactions": [],
            "recipient_id": 183179,
            "sender_email": "terrykoshea@gmail.com",
            "sender_full_name": "Terry O'Shea (she) (W2'19)",
            "sender_id": 158856,
            "sender_realm_str": "recurse",
            "stream_id": 144212,
            "subject": "Tuesday, March 26th, 2019",
            "submessages": [],
            "timestamp": 1553612854,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/964f1257b95e9bf794104ef709a63173?d=identicon&version=1",
            "client": "ZulipElectron",
            "content": "<p>Travis is hosting today according to PLP Scheduler Bot.</p>",
            "content_type": "text/html",
            "display_recipient": "Post-Lunch Prep (PLP)",
            "flags": [
                "read",
                "historical"
            ],
            "id": 161776307,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 183179,
            "sender_email": "terrykoshea@gmail.com",
            "sender_full_name": "Terry O'Shea (she) (W2'19)",
            "sender_id": 158856,
            "sender_realm_str": "recurse",
            "stream_id": 144212,
            "subject": "Tuesday, March 26th, 2019",
            "submessages": [],
            "timestamp": 1553616099,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/88e408b7dfc059cb2b8f44099080d7ea854ad6a7?x=x&version=2",
            "client": "ZulipElectron",
            "content": "<p>Hi Fellow PL\u00fcPers. Here are the problems we'll be facing today:<br>\n#507 <a href=\"https://leetcode.com/problems/perfect-number/\" target=\"_blank\" title=\"https://leetcode.com/problems/perfect-number/\">https://leetcode.com/problems/perfect-number/</a><br>\n#949 <a href=\"https://leetcode.com/problems/largest-time-for-given-digits/\" target=\"_blank\" title=\"https://leetcode.com/problems/largest-time-for-given-digits/\">https://leetcode.com/problems/largest-time-for-given-digits/</a><br>\nSee you at 13:45. :)<br>\n-travis</p>",
            "content_type": "text/html",
            "display_recipient": "Post-Lunch Prep (PLP)",
            "flags": [
                "read",
                "historical"
            ],
            "id": 161777442,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 183179,
            "sender_email": "travis@travish.com",
            "sender_full_name": "Travis Horton (he) (SP1'19)",
            "sender_id": 203425,
            "sender_realm_str": "recurse",
            "stream_id": 144212,
            "subject": "Tuesday, March 26th, 2019",
            "submessages": [],
            "timestamp": 1553616813,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/964f1257b95e9bf794104ef709a63173?d=identicon&version=1",
            "client": "ZulipElectron",
            "content": "<p>I got ninety-nine problems but here are two of them:</p>\n<p><strong>Easy:</strong> <a href=\"https://leetcode.com/problems/average-of-levels-in-binary-tree/\" target=\"_blank\" title=\"https://leetcode.com/problems/average-of-levels-in-binary-tree/\">Average of Levels in Binary Tree</a><br>\n<strong>Medium:</strong> <a href=\"https://leetcode.com/problems/jump-game/\" target=\"_blank\" title=\"https://leetcode.com/problems/jump-game/\">Jump Game</a></p>\n<p>I think these are a good difficulty! Do plpease join in at 1:45 in the presentation space today.</p>",
            "content_type": "text/html",
            "display_recipient": "Post-Lunch Prep (PLP)",
            "flags": [
                "read",
                "historical"
            ],
            "id": 161872558,
            "is_me_message": false,
            "last_edit_timestamp": 1553701817,
            "reactions": [
                {
                    "emoji_code": "1f419",
                    "emoji_name": "octopus",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "pekarsky.maxim@gmail.com",
                        "full_name": "Max Pekarsky (he) (W2'19)",
                        "id": 158536
                    },
                    "user_id": 158536
                }
            ],
            "recipient_id": 183179,
            "sender_email": "terrykoshea@gmail.com",
            "sender_full_name": "Terry O'Shea (she) (W2'19)",
            "sender_id": 158856,
            "sender_realm_str": "recurse",
            "stream_id": 144212,
            "subject": "Wednesday, March 27th, 2019",
            "submessages": [],
            "timestamp": 1553701689,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/6b5fe2f87b37afbbfe2a6aa4a84b7f97ebd6679f?x=x&version=2",
            "client": "website",
            "content": "<div class=\"codehilite\"><pre><span></span>class Solution:\n    def averageOfLevels(self, root: TreeNode) -&gt; List[float]:\n#         do stuff here later\n\n\n        height = self.get_height(root)\n        levels = []\n        for level in range(height):\n            this_level = []\n            this_level = self.printAllNodes(root, level)\n            print(this_level)\n            ave = sum(this_level)/len(this_level)\n            levels.append(ave)\n        return levels\n\n    def printAllNodes(self, root: TreeNode, level: int):\n        if root is None:\n            return []\n        if level == 0:\n            return [root.val]\n        else:\n            return self.printAllNodes(root.left, level - 1) + self.printAllNodes(root.right, level - 1)\n\n\n\n    def get_height(self, root):\n        height = 0\n        if root is None:\n            return height\n        else:\n            left_height = self.get_height(root.left)\n            right_height = self.get_height(root.right)\n        return max(left_height+1, right_height+1)\n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "Post-Lunch Prep (PLP)",
            "flags": [
                "read",
                "historical"
            ],
            "id": 161889646,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 183179,
            "sender_email": "eileenm@gmail.com",
            "sender_full_name": "Eileen McFarland (she) (SP1'19)",
            "sender_id": 203637,
            "sender_realm_str": "recurse",
            "stream_id": 144212,
            "subject": "recursion ahoy (problem 637)",
            "submessages": [],
            "timestamp": 1553712879,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/964f1257b95e9bf794104ef709a63173?d=identicon&version=1",
            "client": "ZulipElectron",
            "content": "<p>also, if you make your first code backticks like this: <br>\n<code>```python3</code><br>\nthen you will get zulip's pretty code highlighting, <span class=\"user-mention\" data-user-id=\"203637\">@Eileen McFarland (SP1'19)</span></p>",
            "content_type": "text/html",
            "display_recipient": "Post-Lunch Prep (PLP)",
            "flags": [
                "read",
                "historical"
            ],
            "id": 161889850,
            "is_me_message": false,
            "last_edit_timestamp": 1553713082,
            "reactions": [],
            "recipient_id": 183179,
            "sender_email": "terrykoshea@gmail.com",
            "sender_full_name": "Terry O'Shea (she) (W2'19)",
            "sender_id": 158856,
            "sender_realm_str": "recurse",
            "stream_id": 144212,
            "subject": "recursion ahoy (problem 637)",
            "submessages": [],
            "timestamp": 1553713018,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/88e408b7dfc059cb2b8f44099080d7ea854ad6a7?x=x&version=2",
            "client": "ZulipElectron",
            "content": "<div class=\"codehilite\"><pre><span></span><span class=\"cm\">/**</span>\n<span class=\"cm\"> * Definition for a binary tree node.</span>\n<span class=\"cm\"> * function TreeNode(val) {</span>\n<span class=\"cm\"> *     this.val = val;</span>\n<span class=\"cm\"> *     this.left = this.right = null;</span>\n<span class=\"cm\"> * }</span>\n<span class=\"cm\"> */</span>\n<span class=\"cm\">/**</span>\n<span class=\"cm\"> * @param {TreeNode} root</span>\n<span class=\"cm\"> * @return {number[]}</span>\n<span class=\"cm\"> */</span>\n\n<span class=\"kd\">var</span> <span class=\"nx\">averageOfLevels</span> <span class=\"o\">=</span> <span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">root</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"o\">!</span><span class=\"nx\">root</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"k\">return</span> <span class=\"p\">[];</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"kr\">const</span> <span class=\"nx\">averages</span> <span class=\"o\">=</span> <span class=\"p\">[];</span>\n    <span class=\"kd\">let</span> <span class=\"nx\">currentLevel</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"nx\">root</span><span class=\"p\">];</span>\n\n    <span class=\"k\">while</span> <span class=\"p\">(</span><span class=\"nx\">currentLevel</span><span class=\"p\">.</span><span class=\"nx\">length</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"kd\">let</span> <span class=\"nx\">nextLevel</span> <span class=\"o\">=</span> <span class=\"p\">[];</span>\n        <span class=\"kd\">let</span> <span class=\"nx\">sum</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n\n        <span class=\"nx\">currentLevel</span><span class=\"p\">.</span><span class=\"nx\">forEach</span><span class=\"p\">(</span><span class=\"nx\">node</span> <span class=\"p\">=&gt;</span> <span class=\"p\">{</span>\n            <span class=\"nx\">sum</span> <span class=\"o\">+=</span> <span class=\"nx\">node</span><span class=\"p\">.</span><span class=\"nx\">val</span><span class=\"p\">;</span>\n            <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">node</span><span class=\"p\">.</span><span class=\"nx\">left</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n                <span class=\"nx\">nextLevel</span><span class=\"p\">.</span><span class=\"nx\">push</span><span class=\"p\">(</span><span class=\"nx\">node</span><span class=\"p\">.</span><span class=\"nx\">left</span><span class=\"p\">);</span>\n            <span class=\"p\">}</span>\n            <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">node</span><span class=\"p\">.</span><span class=\"nx\">right</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n                <span class=\"nx\">nextLevel</span><span class=\"p\">.</span><span class=\"nx\">push</span><span class=\"p\">(</span><span class=\"nx\">node</span><span class=\"p\">.</span><span class=\"nx\">right</span><span class=\"p\">);</span>\n            <span class=\"p\">}</span>\n        <span class=\"p\">});</span>\n\n        <span class=\"nx\">averages</span><span class=\"p\">.</span><span class=\"nx\">push</span><span class=\"p\">(</span><span class=\"nx\">sum</span><span class=\"o\">/</span><span class=\"nx\">currentLevel</span><span class=\"p\">.</span><span class=\"nx\">length</span><span class=\"p\">);</span>\n        <span class=\"nx\">currentLevel</span> <span class=\"o\">=</span> <span class=\"nx\">nextLevel</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"k\">return</span> <span class=\"nx\">averages</span><span class=\"p\">;</span>\n<span class=\"p\">};</span>\n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "Post-Lunch Prep (PLP)",
            "flags": [
                "read",
                "historical"
            ],
            "id": 161889976,
            "is_me_message": false,
            "last_edit_timestamp": 1553713291,
            "reactions": [],
            "recipient_id": 183179,
            "sender_email": "travis@travish.com",
            "sender_full_name": "Travis Horton (he) (SP1'19)",
            "sender_id": 203425,
            "sender_realm_str": "recurse",
            "stream_id": 144212,
            "subject": "recursion ahoy (problem 637)",
            "submessages": [],
            "timestamp": 1553713090,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/88e408b7dfc059cb2b8f44099080d7ea854ad6a7?x=x&version=2",
            "client": "ZulipElectron",
            "content": "<p>that's our (Terry and Travis') solution to #637. :)</p>",
            "content_type": "text/html",
            "display_recipient": "Post-Lunch Prep (PLP)",
            "flags": [
                "read",
                "historical"
            ],
            "id": 161889994,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f60e",
                    "emoji_name": "sunglasses",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "terrykoshea@gmail.com",
                        "full_name": "Terry O'Shea (she) (W2'19)",
                        "id": 158856
                    },
                    "user_id": 158856
                }
            ],
            "recipient_id": 183179,
            "sender_email": "travis@travish.com",
            "sender_full_name": "Travis Horton (he) (SP1'19)",
            "sender_id": 203425,
            "sender_realm_str": "recurse",
            "stream_id": 144212,
            "subject": "recursion ahoy (problem 637)",
            "submessages": [],
            "timestamp": 1553713108,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/6b5fe2f87b37afbbfe2a6aa4a84b7f97ebd6679f?x=x&version=2",
            "client": "website",
            "content": "<p>ah!  I've done that in documentation on github, but hadn't thought to do it in zulip.  Thanks for sharing, <span class=\"user-mention\" data-user-id=\"158856\">@Terry O'Shea (W2'19)</span>!</p>",
            "content_type": "text/html",
            "display_recipient": "Post-Lunch Prep (PLP)",
            "flags": [
                "read",
                "historical"
            ],
            "id": 161957237,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f4aa",
                    "emoji_name": "muscle",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "terrykoshea@gmail.com",
                        "full_name": "Terry O'Shea (she) (W2'19)",
                        "id": 158856
                    },
                    "user_id": 158856
                }
            ],
            "recipient_id": 183179,
            "sender_email": "eileenm@gmail.com",
            "sender_full_name": "Eileen McFarland (she) (SP1'19)",
            "sender_id": 203637,
            "sender_realm_str": "recurse",
            "stream_id": 144212,
            "subject": "recursion ahoy (problem 637)",
            "submessages": [],
            "timestamp": 1553783130,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/88e408b7dfc059cb2b8f44099080d7ea854ad6a7?x=x&version=2",
            "client": "ZulipElectron",
            "content": "<p>hi pl\u00fcp-ers. i have our two problems for today:<br>\n938: <a href=\"https://leetcode.com/problems/range-sum-of-bst/\" target=\"_blank\" title=\"https://leetcode.com/problems/range-sum-of-bst/\">https://leetcode.com/problems/range-sum-of-bst/</a><br>\n950: <a href=\"https://leetcode.com/problems/reveal-cards-in-increasing-order/\" target=\"_blank\" title=\"https://leetcode.com/problems/reveal-cards-in-increasing-order/\">https://leetcode.com/problems/reveal-cards-in-increasing-order/</a></p>\n<p>see you in a few minutes!</p>",
            "content_type": "text/html",
            "display_recipient": "Post-Lunch Prep (PLP)",
            "flags": [
                "read",
                "historical"
            ],
            "id": 161975211,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "2705",
                    "emoji_name": "approved",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "terrykoshea@gmail.com",
                        "full_name": "Terry O'Shea (she) (W2'19)",
                        "id": 158856
                    },
                    "user_id": 158856
                }
            ],
            "recipient_id": 183179,
            "sender_email": "travis@travish.com",
            "sender_full_name": "Travis Horton (he) (SP1'19)",
            "sender_id": 203425,
            "sender_realm_str": "recurse",
            "stream_id": 144212,
            "subject": "recursion ahoy (problem 637)",
            "submessages": [],
            "timestamp": 1553794680,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/88e408b7dfc059cb2b8f44099080d7ea854ad6a7?x=x&version=2",
            "client": "ZulipElectron",
            "content": "<p>hello rc'ers!<br>\ni suppose i will lead a little plp today if anyone is interested.<br>\ni was thinking these two problems:<br>\n<a href=\"https://leetcode.com/problems/sqrtx/\" target=\"_blank\" title=\"https://leetcode.com/problems/sqrtx/\">https://leetcode.com/problems/sqrtx/</a><br>\n<a href=\"https://leetcode.com/problems/x-of-a-kind-in-a-deck-of-cards/\" target=\"_blank\" title=\"https://leetcode.com/problems/x-of-a-kind-in-a-deck-of-cards/\">https://leetcode.com/problems/x-of-a-kind-in-a-deck-of-cards/</a></p>",
            "content_type": "text/html",
            "display_recipient": "Post-Lunch Prep (PLP)",
            "flags": [
                "read",
                "historical"
            ],
            "id": 162261323,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 183179,
            "sender_email": "travis@travish.com",
            "sender_full_name": "Travis Horton (he) (SP1'19)",
            "sender_id": 203425,
            "sender_realm_str": "recurse",
            "stream_id": 144212,
            "subject": "Mon, 4/1",
            "submessages": [],
            "timestamp": 1554140738,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/88e408b7dfc059cb2b8f44099080d7ea854ad6a7?x=x&version=2",
            "client": "website",
            "content": "<p>Hi Pl\u00fcp-ers! <img alt=\":smiley_hacker:\" class=\"emoji\" src=\"https://zulip-avatars.s3.amazonaws.com/13/emoji/images/2410.jpg\" title=\"smiley hacker\"></p>\n<p>So, I wasn't sure yesterday if we'd actually do the PLP cause of first day and all. So I'll send out a <em>real announcement</em> about it today.</p>\n<p>From the wiki: <br>\n\"Post-Lunch Prep (a.k.a. PLP /plu:p/) is an event held M-Th at 1:45 PM in the RC presentation space. The aim is to lower the barrier to entry for interview prep and make it a more communal, low-pressure, and educational experience.\"</p>\n<p>I definitely think of these as just fun logic puzzles--honestly I didn't know they were interview questions until a few weeks into my batch!</p>\n<p>Also, anyone is welcome to check the schedule/sign up to host. Send a Zulip PM to PLP Scheduler, body \"get schedule\" or \"assign [ID#]\"!</p>\n<p>Today's questions will be:<br>\n58. <a href=\"https://leetcode.com/problems/length-of-last-word/\" target=\"_blank\" title=\"https://leetcode.com/problems/length-of-last-word/\">https://leetcode.com/problems/length-of-last-word/</a><br>\n754. <a href=\"https://leetcode.com/problems/reach-a-number/\" target=\"_blank\" title=\"https://leetcode.com/problems/reach-a-number/\">https://leetcode.com/problems/reach-a-number/</a><br>\nSee you at 1:45!<br>\n-Travis</p>",
            "content_type": "text/html",
            "display_recipient": "Post-Lunch Prep (PLP)",
            "flags": [
                "read",
                "historical"
            ],
            "id": 162346069,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 183179,
            "sender_email": "travis@travish.com",
            "sender_full_name": "Travis Horton (he) (SP1'19)",
            "sender_id": 203425,
            "sender_realm_str": "recurse",
            "stream_id": 144212,
            "subject": "Tue, 4/2",
            "submessages": [],
            "timestamp": 1554219085,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/6b5fe2f87b37afbbfe2a6aa4a84b7f97ebd6679f?x=x&version=2",
            "client": "website",
            "content": "<p>I will be hosting PLP Monday, April 8th, and the topic will be bit manipulation.  Here's a relevant video: <a href=\"https://www.youtube.com/watch?v=NLKQEOgBAnw\" target=\"_blank\" title=\"https://www.youtube.com/watch?v=NLKQEOgBAnw\">https://www.youtube.com/watch?v=NLKQEOgBAnw</a></p>\n<div class=\"youtube-video message_inline_image\"><a data-id=\"NLKQEOgBAnw\" href=\"https://www.youtube.com/watch?v=NLKQEOgBAnw\" target=\"_blank\" title=\"https://www.youtube.com/watch?v=NLKQEOgBAnw\"><img src=\"https://i.ytimg.com/vi/NLKQEOgBAnw/default.jpg\"></a></div>",
            "content_type": "text/html",
            "display_recipient": "Post-Lunch Prep (PLP)",
            "flags": [
                "read",
                "historical"
            ],
            "id": 162350006,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 183179,
            "sender_email": "eileenm@gmail.com",
            "sender_full_name": "Eileen McFarland (she) (SP1'19)",
            "sender_id": 203637,
            "sender_realm_str": "recurse",
            "stream_id": 144212,
            "subject": "Foreshadowing: Monday, April 8th",
            "submessages": [],
            "timestamp": 1554221776,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/6b5fe2f87b37afbbfe2a6aa4a84b7f97ebd6679f?x=x&version=2",
            "client": "website",
            "content": "<p>Here is our (first) accepted solution for the first problem.  We hope to come up with something even better during the group talk!</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">class</span> <span class=\"nc\">Solution</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"nf\">lengthOfLastWord</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"nb\">input</span><span class=\"p\">:</span> <span class=\"nb\">str</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"nb\">int</span><span class=\"p\">:</span>\n        <span class=\"n\">cleaned_input</span> <span class=\"o\">=</span> <span class=\"nb\">input</span><span class=\"o\">.</span><span class=\"n\">strip</span><span class=\"p\">(</span><span class=\"n\">string</span><span class=\"o\">.</span><span class=\"n\">punctuation</span><span class=\"p\">)</span>\n        <span class=\"n\">words</span> <span class=\"o\">=</span> <span class=\"n\">cleaned_input</span><span class=\"o\">.</span><span class=\"n\">split</span><span class=\"p\">()</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">words</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"mi\">0</span>\n        <span class=\"k\">return</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">words</span><span class=\"p\">[</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">])</span>\n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "Post-Lunch Prep (PLP)",
            "flags": [
                "read",
                "historical"
            ],
            "id": 162360210,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 183179,
            "sender_email": "eileenm@gmail.com",
            "sender_full_name": "Eileen McFarland (she) (SP1'19)",
            "sender_id": 203637,
            "sender_realm_str": "recurse",
            "stream_id": 144212,
            "subject": "Tue, 4/2",
            "submessages": [],
            "timestamp": 1554229024,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/787f392240856522f98bd4d40db71ec20edb3d2e?x=x&version=3",
            "client": "website",
            "content": "<p>Hi gang, here are the PLP problems today. Join us in the presentation space at 1:45pm if you'd like to work on them!<br>\n<a href=\"https://leetcode.com/problems/invert-binary-tree/\" target=\"_blank\" title=\"https://leetcode.com/problems/invert-binary-tree/\">https://leetcode.com/problems/invert-binary-tree/</a> (easy)<br>\n<a href=\"https://leetcode.com/problems/top-k-frequent-elements/\" target=\"_blank\" title=\"https://leetcode.com/problems/top-k-frequent-elements/\">https://leetcode.com/problems/top-k-frequent-elements/</a> (medium)</p>",
            "content_type": "text/html",
            "display_recipient": "Post-Lunch Prep (PLP)",
            "flags": [
                "read",
                "historical"
            ],
            "id": 162545347,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 183179,
            "sender_email": "pmmhy4@mst.edu",
            "sender_full_name": "Patrick McCarver (they/he) (SP1'19)",
            "sender_id": 134599,
            "sender_realm_str": "recurse",
            "stream_id": 144212,
            "subject": "PLP Thursday, April 4",
            "submessages": [],
            "timestamp": 1554397078,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/6b5fe2f87b37afbbfe2a6aa4a84b7f97ebd6679f?x=x&version=2",
            "client": "website",
            "content": "<p>Hi all!  I am hosting PLP and haven't yet picked the problems. :/  I'll post them once I get back from my lunch.  Looking forward to seeing everyone today. :)</p>",
            "content_type": "text/html",
            "display_recipient": "Post-Lunch Prep (PLP)",
            "flags": [
                "read",
                "historical"
            ],
            "id": 162831325,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 183179,
            "sender_email": "eileenm@gmail.com",
            "sender_full_name": "Eileen McFarland (she) (SP1'19)",
            "sender_id": 203637,
            "sender_realm_str": "recurse",
            "stream_id": 144212,
            "subject": "PLP Monday, April 8",
            "submessages": [],
            "timestamp": 1554740067,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/6b5fe2f87b37afbbfe2a6aa4a84b7f97ebd6679f?x=x&version=2",
            "client": "website",
            "content": "<p>Hey again.  Today at PLP, we'll be doing bit manipulation.  Here are the problems I selected.<br>\n<a href=\"https://leetcode.com/problems/binary-number-with-alternating-bits/\" target=\"_blank\" title=\"https://leetcode.com/problems/binary-number-with-alternating-bits/\">693. Binary Number with Alternating Bits</a><br>\n<a href=\"https://leetcode.com/problems/bitwise-ors-of-subarrays/\" target=\"_blank\" title=\"https://leetcode.com/problems/bitwise-ors-of-subarrays/\">898. Bitwise ORs of Subarrays</a><br>\nSee everyone at 1:45 P.M.!</p>",
            "content_type": "text/html",
            "display_recipient": "Post-Lunch Prep (PLP)",
            "flags": [
                "read",
                "historical"
            ],
            "id": 162835642,
            "is_me_message": false,
            "last_edit_timestamp": 1554743124,
            "reactions": [],
            "recipient_id": 183179,
            "sender_email": "eileenm@gmail.com",
            "sender_full_name": "Eileen McFarland (she) (SP1'19)",
            "sender_id": 203637,
            "sender_realm_str": "recurse",
            "stream_id": 144212,
            "subject": "PLP Monday, April 8",
            "submessages": [],
            "timestamp": 1554743102,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/6b5fe2f87b37afbbfe2a6aa4a84b7f97ebd6679f?x=x&version=2",
            "client": "website",
            "content": "<p>Here was the solution we go to problem 693.  Thanks for coming today, all!</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">class</span> <span class=\"nc\">Solution</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"nf\">hasAlternatingBits</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">n</span><span class=\"p\">:</span> <span class=\"nb\">int</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"nb\">bool</span><span class=\"p\">:</span>\n        <span class=\"c1\"># last_value = 1</span>\n        <span class=\"n\">last_value</span> <span class=\"o\">=</span> <span class=\"n\">n</span> <span class=\"o\">&amp;</span> <span class=\"mi\">1</span>\n        <span class=\"k\">while</span> <span class=\"n\">n</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"mi\">0</span><span class=\"p\">:</span>\n            <span class=\"n\">n</span> <span class=\"o\">=</span> <span class=\"n\">n</span> <span class=\"o\">&gt;&gt;</span> <span class=\"mi\">1</span>\n            <span class=\"c1\"># n = 1</span>\n            <span class=\"n\">next_value</span> <span class=\"o\">=</span> <span class=\"n\">n</span> <span class=\"o\">&amp;</span> <span class=\"mi\">1</span>\n            <span class=\"c1\"># next_value = 1</span>\n            <span class=\"k\">if</span> <span class=\"n\">last_value</span> <span class=\"o\">==</span> <span class=\"n\">next_value</span><span class=\"p\">:</span>\n                <span class=\"k\">return</span> <span class=\"kc\">False</span>\n            <span class=\"n\">last_value</span> <span class=\"o\">=</span> <span class=\"n\">next_value</span>\n        <span class=\"k\">return</span> <span class=\"kc\">True</span>\n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "Post-Lunch Prep (PLP)",
            "flags": [
                "read",
                "historical"
            ],
            "id": 162845575,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "+1",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "alancodes@gmail.com",
                        "full_name": "Alan Chu (he) (SP2'19)",
                        "id": 134387
                    },
                    "user_id": 134387
                }
            ],
            "recipient_id": 183179,
            "sender_email": "eileenm@gmail.com",
            "sender_full_name": "Eileen McFarland (she) (SP1'19)",
            "sender_id": 203637,
            "sender_realm_str": "recurse",
            "stream_id": 144212,
            "subject": "PLP Monday, April 8",
            "submessages": [],
            "timestamp": 1554750186,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/88e408b7dfc059cb2b8f44099080d7ea854ad6a7?x=x&version=2",
            "client": "ZulipElectron",
            "content": "<p>Hello fellow pl\u00fcp-ers!</p>\n<p>Here are the two problems for the day:<br>\n941. <a href=\"https://leetcode.com/problems/valid-mountain-array/\" target=\"_blank\" title=\"https://leetcode.com/problems/valid-mountain-array/\">https://leetcode.com/problems/valid-mountain-array/</a><br>\n338. <a href=\"https://leetcode.com/problems/counting-bits/\" target=\"_blank\" title=\"https://leetcode.com/problems/counting-bits/\">https://leetcode.com/problems/counting-bits/</a><br>\nSee you all in the presentation space in 45 minutes!<br>\n-Travis</p>",
            "content_type": "text/html",
            "display_recipient": "Post-Lunch Prep (PLP)",
            "flags": [
                "read",
                "historical"
            ],
            "id": 162928590,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 183179,
            "sender_email": "travis@travish.com",
            "sender_full_name": "Travis Horton (he) (SP1'19)",
            "sender_id": 203425,
            "sender_realm_str": "recurse",
            "stream_id": 144212,
            "subject": "PLP Tuesday, April 9",
            "submessages": [],
            "timestamp": 1554829129,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/787f392240856522f98bd4d40db71ec20edb3d2e?x=x&version=3",
            "client": "website",
            "content": "<p>Here was my solution for # 338, I think that it's O(n) ? It is sort of a dynamic programming type of solution using a cache of previous values, it's pretty slow compared to other solutions though</p>\n<div class=\"codehilite\"><pre><span></span>class Solution:\n    def countBits(self, num: int) -&gt; List[int]:\n        cache = dict()\n        solutions = []\n        for num in range(0, num + 1, 1):\n            print(num)\n            if num == 0:\n                cache[0] = 0\n                solutions.append(0)\n                continue\n            if num == 1:\n                cache[1] = 1\n                solutions.append(1)\n                continue\n            if not num % 2 == 0:\n                cache[num] = cache[num - 1] + 1\n                solutions.append(cache[num])\n            if num % 2 == 0:\n                cache[num] = cache[num / 2]\n                solutions.append(cache[num])\n        return solutions\n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "Post-Lunch Prep (PLP)",
            "flags": [
                "read",
                "historical"
            ],
            "id": 162941035,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 183179,
            "sender_email": "pmmhy4@mst.edu",
            "sender_full_name": "Patrick McCarver (they/he) (SP1'19)",
            "sender_id": 134599,
            "sender_realm_str": "recurse",
            "stream_id": 144212,
            "subject": "PLP Tuesday, April 9",
            "submessages": [],
            "timestamp": 1554837082,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/88e408b7dfc059cb2b8f44099080d7ea854ad6a7?x=x&version=2",
            "client": "ZulipElectron",
            "content": "<p>hi ya'll,<br>\nso i implemented in javascript the solution that <span class=\"user-mention\" data-user-id=\"8099\">@Michael Malis (SP2'19)</span> came up with to #338:</p>\n<div class=\"codehilite\"><pre><span></span>var countBits = function(num) {\n    let a = [0];\n    while (a.length &lt;= num) {\n        a.push(...a.map((e) =&gt; e + 1))\n    }\n    return a.splice(0, num + 1)\n};\n</pre></div>\n\n\n<p>:)<br>\n-travis</p>",
            "content_type": "text/html",
            "display_recipient": "Post-Lunch Prep (PLP)",
            "flags": [
                "read",
                "historical"
            ],
            "id": 162943107,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 183179,
            "sender_email": "travis@travish.com",
            "sender_full_name": "Travis Horton (he) (SP1'19)",
            "sender_id": 203425,
            "sender_realm_str": "recurse",
            "stream_id": 144212,
            "subject": "PLP Tuesday, April 9",
            "submessages": [],
            "timestamp": 1554838641,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/88e408b7dfc059cb2b8f44099080d7ea854ad6a7?x=x&version=2",
            "client": "ZulipElectron",
            "content": "<p>and here's the solution that we came up with to 941:</p>\n<div class=\"codehilite\"><pre><span></span>var validMountainArray = function(A) {\n    let i = 0;\n    if (A.length &lt; 3) return false;\n    if (A[0] &gt;= A[1]) return false;\n    for (; i &lt; A.length - 2; i++) {\n        if (A[i] &lt; A[i + 1]) {\n            continue;\n        } else {\n            break;\n        }\n    }\n    for (; i &lt; A.length - 1; i++) {\n        if (A[i] &gt; A[i+1]) {\n            continue;\n        } else {\n            return false;\n        }\n    }\n    return true;\n};\n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "Post-Lunch Prep (PLP)",
            "flags": [
                "read",
                "historical"
            ],
            "id": 162943268,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 183179,
            "sender_email": "travis@travish.com",
            "sender_full_name": "Travis Horton (he) (SP1'19)",
            "sender_id": 203425,
            "sender_realm_str": "recurse",
            "stream_id": 144212,
            "subject": "PLP Tuesday, April 9",
            "submessages": [],
            "timestamp": 1554838794,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/9c4af750426d3bf0c15347009913c0323596658f?x=x&version=2",
            "client": "ZulipElectron",
            "content": "<p>PLP! PLP! PLP!</p>\n<p>Join us in the presentation space at <strong>1:45</strong> for these two problems:<br>\n70. <a href=\"https://leetcode.com/problems/backspace-string-compare/\" target=\"_blank\" title=\"https://leetcode.com/problems/backspace-string-compare/\">https://leetcode.com/problems/backspace-string-compare/</a><br>\n36. <a href=\"https://leetcode.com/problems/valid-sudoku/\" target=\"_blank\" title=\"https://leetcode.com/problems/valid-sudoku/\">https://leetcode.com/problems/valid-sudoku/</a><br>\nSee you soon!</p>",
            "content_type": "text/html",
            "display_recipient": "Post-Lunch Prep (PLP)",
            "flags": [
                "read",
                "historical"
            ],
            "id": 163023584,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 183179,
            "sender_email": "katelaurel@gmail.com",
            "sender_full_name": "Kate-Laurel Agnew (she) (SP2'19)",
            "sender_id": 215254,
            "sender_realm_str": "recurse",
            "stream_id": 144212,
            "subject": "PLP Wednesday, April 10",
            "submessages": [],
            "timestamp": 1554915929,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/6b5fe2f87b37afbbfe2a6aa4a84b7f97ebd6679f?x=x&version=2",
            "client": "website",
            "content": "<p>Is PLP happening today?<br>\nI hope so!</p>",
            "content_type": "text/html",
            "display_recipient": "Post-Lunch Prep (PLP)",
            "flags": [
                "read",
                "historical"
            ],
            "id": 163121107,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 183179,
            "sender_email": "eileenm@gmail.com",
            "sender_full_name": "Eileen McFarland (she) (SP1'19)",
            "sender_id": 203637,
            "sender_realm_str": "recurse",
            "stream_id": 144212,
            "subject": "Thursday PLP?",
            "submessages": [],
            "timestamp": 1555004362,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/88e408b7dfc059cb2b8f44099080d7ea854ad6a7?x=x&version=2",
            "client": "ZulipElectron",
            "content": "<p>YES! :) I am just behind today and only getting myself together now--the problems I'm proposing are:<br>\n193. <a href=\"https://leetcode.com/problems/valid-phone-numbers/\" target=\"_blank\" title=\"https://leetcode.com/problems/valid-phone-numbers/\">https://leetcode.com/problems/valid-phone-numbers/</a><br>\n535. <a href=\"https://leetcode.com/problems/encode-and-decode-tinyurl/\" target=\"_blank\" title=\"https://leetcode.com/problems/encode-and-decode-tinyurl/\">https://leetcode.com/problems/encode-and-decode-tinyurl/</a><br>\nThese are both pretty different problems than some we've done before and therefore am open to vetos. :)</p>",
            "content_type": "text/html",
            "display_recipient": "Post-Lunch Prep (PLP)",
            "flags": [
                "read",
                "historical"
            ],
            "id": 163121302,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 183179,
            "sender_email": "travis@travish.com",
            "sender_full_name": "Travis Horton (he) (SP1'19)",
            "sender_id": 203425,
            "sender_realm_str": "recurse",
            "stream_id": 144212,
            "subject": "Thursday PLP?",
            "submessages": [],
            "timestamp": 1555004482,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/6b5fe2f87b37afbbfe2a6aa4a84b7f97ebd6679f?x=x&version=2",
            "client": "website",
            "content": "<p>awesome!  I am on my way.</p>",
            "content_type": "text/html",
            "display_recipient": "Post-Lunch Prep (PLP)",
            "flags": [
                "read",
                "historical"
            ],
            "id": 163121321,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 183179,
            "sender_email": "eileenm@gmail.com",
            "sender_full_name": "Eileen McFarland (she) (SP1'19)",
            "sender_id": 203637,
            "sender_realm_str": "recurse",
            "stream_id": 144212,
            "subject": "Thursday PLP?",
            "submessages": [],
            "timestamp": 1555004508,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/6b5fe2f87b37afbbfe2a6aa4a84b7f97ebd6679f?x=x&version=2",
            "client": "website",
            "content": "<p>Here is the solution that <span class=\"user-mention\" data-user-id=\"158871\">@Sruti Modekurty (W2'19)</span> and I did for problem 193.</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">while</span> <span class=\"nb\">read</span> -r line<span class=\"p\">;</span> <span class=\"k\">do</span> <span class=\"k\">if</span> <span class=\"o\">[[</span> <span class=\"nv\">$line</span> <span class=\"o\">=</span>~ ^<span class=\"o\">(</span><span class=\"se\">\\(</span><span class=\"o\">[</span><span class=\"m\">0</span>-9<span class=\"o\">]{</span><span class=\"m\">3</span><span class=\"o\">}</span><span class=\"se\">\\)</span> <span class=\"p\">|</span><span class=\"o\">[</span><span class=\"m\">0</span>-9<span class=\"o\">]{</span><span class=\"m\">3</span><span class=\"o\">}</span>-<span class=\"o\">)[</span><span class=\"m\">0</span>-9<span class=\"o\">]{</span><span class=\"m\">3</span><span class=\"o\">}</span>-<span class=\"o\">[</span><span class=\"m\">0</span>-9<span class=\"o\">]{</span><span class=\"m\">4</span><span class=\"o\">}</span>$ <span class=\"o\">]]</span><span class=\"p\">;</span> <span class=\"k\">then</span> <span class=\"nb\">echo</span> <span class=\"nv\">$line</span><span class=\"p\">;</span> <span class=\"k\">fi</span><span class=\"p\">;</span> <span class=\"k\">done</span> &lt; file.txt<span class=\"p\">;</span>\n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "Post-Lunch Prep (PLP)",
            "flags": [
                "read",
                "historical"
            ],
            "id": 163127316,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 183179,
            "sender_email": "eileenm@gmail.com",
            "sender_full_name": "Eileen McFarland (she) (SP1'19)",
            "sender_id": 203637,
            "sender_realm_str": "recurse",
            "stream_id": 144212,
            "subject": "Thursday PLP?",
            "submessages": [],
            "timestamp": 1555008779,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/88e408b7dfc059cb2b8f44099080d7ea854ad6a7?x=x&version=2",
            "client": "ZulipElectron",
            "content": "<p>Hi everyone!<br>\nLet's work on these two today:<br>\n859. <a href=\"https://leetcode.com/problems/buddy-strings/\" target=\"_blank\" title=\"https://leetcode.com/problems/buddy-strings/\">https://leetcode.com/problems/buddy-strings/</a><br>\n1008. <a href=\"https://leetcode.com/problems/construct-binary-search-tree-from-preorder-traversal/\" target=\"_blank\" title=\"https://leetcode.com/problems/construct-binary-search-tree-from-preorder-traversal/\">https://leetcode.com/problems/construct-binary-search-tree-from-preorder-traversal/</a><br>\n:)<br>\nSee you at 1:45,<br>\n-Travis</p>",
            "content_type": "text/html",
            "display_recipient": "Post-Lunch Prep (PLP)",
            "flags": [
                "read",
                "historical"
            ],
            "id": 163396730,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 183179,
            "sender_email": "travis@travish.com",
            "sender_full_name": "Travis Horton (he) (SP1'19)",
            "sender_id": 203425,
            "sender_realm_str": "recurse",
            "stream_id": 144212,
            "subject": "Monday PLP",
            "submessages": [],
            "timestamp": 1555347643,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/8f95e07c22da0d35f4c212cad4a019f097d690e1?x=x&version=1",
            "client": "ZulipElectron",
            "content": "<p>Hello! I've been on PLP from afar as prep for tech interviews, and will continue to do so.  I'm about a day delayed due to time-zone differences. Is anyone else doing the same thing?  If so, maybe we can team up to discuss any difficult ones <span aria-label=\"smile\" class=\"emoji emoji-263a\" role=\"img\" title=\"smile\">:smile:</span></p>",
            "content_type": "text/html",
            "display_recipient": "Post-Lunch Prep (PLP)",
            "flags": [
                "read",
                "historical"
            ],
            "id": 163464915,
            "is_me_message": false,
            "last_edit_timestamp": 1555418352,
            "reactions": [
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "+1",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "carteranthonia@gmail.com",
                        "full_name": "Anthonia Carter (she) (W2'19)",
                        "id": 158645
                    },
                    "user_id": 158645
                }
            ],
            "recipient_id": 183179,
            "sender_email": "isla.carson@hotmail.co.uk",
            "sender_full_name": "Isla Carson (she) (W2'19)",
            "sender_id": 100044,
            "sender_realm_str": "recurse",
            "stream_id": 144212,
            "subject": "Remote PLP",
            "submessages": [],
            "timestamp": 1555418323,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/88e408b7dfc059cb2b8f44099080d7ea854ad6a7?x=x&version=2",
            "client": "ZulipMobile",
            "content": "<p>hey y'all! I'm getting in a little later than expected but will be in time to start plp, just not able to send out the selections! if anyone has suggestions or requests I'm down!</p>",
            "content_type": "text/html",
            "display_recipient": "Post-Lunch Prep (PLP)",
            "flags": [
                "read",
                "historical"
            ],
            "id": 163488885,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 183179,
            "sender_email": "travis@travish.com",
            "sender_full_name": "Travis Horton (he) (SP1'19)",
            "sender_id": 203425,
            "sender_realm_str": "recurse",
            "stream_id": 144212,
            "subject": "Tuesday PLP",
            "submessages": [],
            "timestamp": 1555435572,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/88e408b7dfc059cb2b8f44099080d7ea854ad6a7?x=x&version=2",
            "client": "ZulipElectron",
            "content": "<p>omg it's all my fault that THE DAY YOU SAY you're following along at home i don't post the problem! well, yesterday i was behind and we just picked a problem together, and it was <br>\n979. <a href=\"https://leetcode.com/problems/distribute-coins-in-binary-tree/\" target=\"_blank\" title=\"https://leetcode.com/problems/distribute-coins-in-binary-tree/\">https://leetcode.com/problems/distribute-coins-in-binary-tree/</a><br>\nit ended up being a tricky one, so we just did the one yesterday. i haven't picked the problems for today yet!</p>",
            "content_type": "text/html",
            "display_recipient": "Post-Lunch Prep (PLP)",
            "flags": [
                "read",
                "historical"
            ],
            "id": 163569452,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 183179,
            "sender_email": "travis@travish.com",
            "sender_full_name": "Travis Horton (he) (SP1'19)",
            "sender_id": 203425,
            "sender_realm_str": "recurse",
            "stream_id": 144212,
            "subject": "Remote PLP",
            "submessages": [],
            "timestamp": 1555513736,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/88e408b7dfc059cb2b8f44099080d7ea854ad6a7?x=x&version=2",
            "client": "ZulipElectron",
            "content": "<p>hi y'all! so i thought we'd do two problems that have some similarities to one's we've done before, but should be straight forward enough today... :) (famous last words?) anyway:<br>\n897. <a href=\"https://leetcode.com/problems/increasing-order-search-tree/\" target=\"_blank\" title=\"https://leetcode.com/problems/increasing-order-search-tree/\">https://leetcode.com/problems/increasing-order-search-tree/</a><br>\n867. <a href=\"https://leetcode.com/problems/transpose-matrix/\" target=\"_blank\" title=\"https://leetcode.com/problems/transpose-matrix/\">https://leetcode.com/problems/transpose-matrix/</a></p>",
            "content_type": "text/html",
            "display_recipient": "Post-Lunch Prep (PLP)",
            "flags": [
                "read",
                "historical"
            ],
            "id": 163571617,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 183179,
            "sender_email": "travis@travish.com",
            "sender_full_name": "Travis Horton (he) (SP1'19)",
            "sender_id": 203425,
            "sender_realm_str": "recurse",
            "stream_id": 144212,
            "subject": "Wednesday 190417 PLP",
            "submessages": [],
            "timestamp": 1555515019,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/787f392240856522f98bd4d40db71ec20edb3d2e?x=x&version=3",
            "client": "website",
            "content": "<p>A Python solution for Leetcode 979</p>\n<div class=\"codehilite\"><pre><span></span>class Solution(object):\n    def __init__(self):\n        self.totalMoves = 0\n    def helper(self, root):\n        leftTotal = 0\n        rightTotal = 0\n        if root.left == None and root.right == None:\n            self.totalMoves += abs(root.val - 1)\n            return root.val - 1\n        if root.left != None:\n            leftTotal += self.helper(root.left)\n        if root.right != None:\n            rightTotal += self.helper(root.right)\n        self.totalMoves += abs(leftTotal + rightTotal + root.val - 1)\n        return leftTotal + rightTotal + root.val - 1\n\n    def distributeCoins(self, root):\n        self.totalMoves = 0\n        self.helper(root)\n        return self.totalMoves\n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "Post-Lunch Prep (PLP)",
            "flags": [
                "read",
                "historical"
            ],
            "id": 163572532,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 183179,
            "sender_email": "pmmhy4@mst.edu",
            "sender_full_name": "Patrick McCarver (they/he) (SP1'19)",
            "sender_id": 134599,
            "sender_realm_str": "recurse",
            "stream_id": 144212,
            "subject": "Remote PLP",
            "submessages": [],
            "timestamp": 1555515544,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/88e408b7dfc059cb2b8f44099080d7ea854ad6a7?x=x&version=2",
            "client": "ZulipElectron",
            "content": "<p>hi PLP-ers! i think i'm actually not going to make it in by 1:45 today! :/ is there anyone out there who could put the problems up on the projector and \"host\" today? i'd be eternally grateful. :)</p>",
            "content_type": "text/html",
            "display_recipient": "Post-Lunch Prep (PLP)",
            "flags": [
                "read",
                "historical"
            ],
            "id": 163580382,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 183179,
            "sender_email": "travis@travish.com",
            "sender_full_name": "Travis Horton (he) (SP1'19)",
            "sender_id": 203425,
            "sender_realm_str": "recurse",
            "stream_id": 144212,
            "subject": "Wednesday 190417 PLP",
            "submessages": [],
            "timestamp": 1555520670,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/88e408b7dfc059cb2b8f44099080d7ea854ad6a7?x=x&version=2",
            "client": "ZulipElectron",
            "content": "<p>well, i am definitely going to make it in today! and i understand that we didn't actually have much of a plp yesterday, so i propose we do the same ones from yesterday?<br>\n897. <a href=\"https://leetcode.com/problems/increasing-order-search-tree/\" target=\"_blank\" title=\"https://leetcode.com/problems/increasing-order-search-tree/\">https://leetcode.com/problems/increasing-order-search-tree/</a><br>\n867. <a href=\"https://leetcode.com/problems/transpose-matrix/\" target=\"_blank\" title=\"https://leetcode.com/problems/transpose-matrix/\">https://leetcode.com/problems/transpose-matrix/</a></p>",
            "content_type": "text/html",
            "display_recipient": "Post-Lunch Prep (PLP)",
            "flags": [
                "read",
                "historical"
            ],
            "id": 163663337,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 183179,
            "sender_email": "travis@travish.com",
            "sender_full_name": "Travis Horton (he) (SP1'19)",
            "sender_id": 203425,
            "sender_realm_str": "recurse",
            "stream_id": 144212,
            "subject": "Wednesday 190417 PLP",
            "submessages": [],
            "timestamp": 1555602282,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/88e408b7dfc059cb2b8f44099080d7ea854ad6a7?x=x&version=2",
            "client": "ZulipElectron",
            "content": "<p>Hey y'all!<br>\nHere are the two problems for today (both, I think, very do-able in our hour after lunch!):<br>\n222. <a href=\"https://leetcode.com/problems/count-complete-tree-nodes/\" target=\"_blank\" title=\"https://leetcode.com/problems/count-complete-tree-nodes/\">https://leetcode.com/problems/count-complete-tree-nodes/</a><br>\n876. <a href=\"https://leetcode.com/problems/middle-of-the-linked-list/\" target=\"_blank\" title=\"https://leetcode.com/problems/middle-of-the-linked-list/\">https://leetcode.com/problems/middle-of-the-linked-list/</a><br>\n:) See you soon!<br>\n-Travis</p>",
            "content_type": "text/html",
            "display_recipient": "Post-Lunch Prep (PLP)",
            "flags": [
                "read",
                "historical"
            ],
            "id": 163917003,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 183179,
            "sender_email": "travis@travish.com",
            "sender_full_name": "Travis Horton (he) (SP1'19)",
            "sender_id": 203425,
            "sender_realm_str": "recurse",
            "stream_id": 144212,
            "subject": "Monday 190422 PLP",
            "submessages": [],
            "timestamp": 1555951351,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/88e408b7dfc059cb2b8f44099080d7ea854ad6a7?x=x&version=2",
            "client": "ZulipElectron",
            "content": "<p>Hello fellow PLP-ers,</p>\n<p>I think it's come time for me to pass the baton on PLP. I've found myself more interested in some other projects just now and think I'd like to dedicate my time towards them... If there's anyone that wants to head up the PLP scheduling please let me know!</p>\n<p>-Travis</p>",
            "content_type": "text/html",
            "display_recipient": "Post-Lunch Prep (PLP)",
            "flags": [
                "read",
                "historical"
            ],
            "id": 163944019,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 183179,
            "sender_email": "travis@travish.com",
            "sender_full_name": "Travis Horton (he) (SP1'19)",
            "sender_id": 203425,
            "sender_realm_str": "recurse",
            "stream_id": 144212,
            "subject": "Passing the baton",
            "submessages": [],
            "timestamp": 1555971818,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/6b5fe2f87b37afbbfe2a6aa4a84b7f97ebd6679f?x=x&version=2",
            "client": "website",
            "content": "<p>I'll host and post the problems tomorrow in this zulip stream.</p>",
            "content_type": "text/html",
            "display_recipient": "Post-Lunch Prep (PLP)",
            "flags": [
                "read",
                "historical"
            ],
            "id": 164560111,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 183179,
            "sender_email": "eileenm@gmail.com",
            "sender_full_name": "Eileen McFarland (she) (SP1'19)",
            "sender_id": 203637,
            "sender_realm_str": "recurse",
            "stream_id": 144212,
            "subject": "PLP is on for Wednesday, May 1",
            "submessages": [],
            "timestamp": 1556647033,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/6b5fe2f87b37afbbfe2a6aa4a84b7f97ebd6679f?x=x&version=2",
            "client": "ZulipMobile",
            "content": "<p>Update: plp will be at 2 pm</p>",
            "content_type": "text/html",
            "display_recipient": "Post-Lunch Prep (PLP)",
            "flags": [
                "read",
                "historical"
            ],
            "id": 164641755,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 183179,
            "sender_email": "eileenm@gmail.com",
            "sender_full_name": "Eileen McFarland (she) (SP1'19)",
            "sender_id": 203637,
            "sender_realm_str": "recurse",
            "stream_id": 144212,
            "subject": "PLP is on for Wednesday, May 1",
            "submessages": [],
            "timestamp": 1556732729,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/6b5fe2f87b37afbbfe2a6aa4a84b7f97ebd6679f?x=x&version=2",
            "client": "website",
            "content": "<p>update update: I didn't see anyone who appeared to be there for PLP.  If you were hovering nearby and hoping to PLP, I apologize for missing you!  (Please give a shout.)  Here are the problems for Thursday.<br>\n<a href=\"https://leetcode.com/problems/rectangle-overlap/\" target=\"_blank\" title=\"https://leetcode.com/problems/rectangle-overlap/\">https://leetcode.com/problems/rectangle-overlap/</a><br>\n<a href=\"https://leetcode.com/problems/queue-reconstruction-by-height/\" target=\"_blank\" title=\"https://leetcode.com/problems/queue-reconstruction-by-height/\">https://leetcode.com/problems/queue-reconstruction-by-height/</a></p>",
            "content_type": "text/html",
            "display_recipient": "Post-Lunch Prep (PLP)",
            "flags": [
                "read",
                "historical"
            ],
            "id": 164644098,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 183179,
            "sender_email": "eileenm@gmail.com",
            "sender_full_name": "Eileen McFarland (she) (SP1'19)",
            "sender_id": 203637,
            "sender_realm_str": "recurse",
            "stream_id": 144212,
            "subject": "PLP is on for Wednesday, May 1",
            "submessages": [],
            "timestamp": 1556734473,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/f47a0818d457159648b86840bfa5b6c0?d=identicon&version=1",
            "client": "website",
            "content": "<p>Hey all! Here are the problems we'll do today, join us in the presentation space at 1:45 if you'd like to work on them!<br>\n674: <a href=\"https://leetcode.com/problems/longest-continuous-increasing-subsequence/\" target=\"_blank\" title=\"https://leetcode.com/problems/longest-continuous-increasing-subsequence/\">https://leetcode.com/problems/longest-continuous-increasing-subsequence/</a><br>\n4: <a href=\"https://leetcode.com/problems/median-of-two-sorted-arrays/\" target=\"_blank\" title=\"https://leetcode.com/problems/median-of-two-sorted-arrays/\">https://leetcode.com/problems/median-of-two-sorted-arrays/</a></p>",
            "content_type": "text/html",
            "display_recipient": "Post-Lunch Prep (PLP)",
            "flags": [
                "read",
                "historical"
            ],
            "id": 167312031,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "+1",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "james@jamesa.me",
                        "full_name": "James Anderson (he) (S1'19)",
                        "id": 221821
                    },
                    "user_id": 221821
                }
            ],
            "recipient_id": 183179,
            "sender_email": "elana.l1@gmail.com",
            "sender_full_name": "Elana Liskovich (SP2'19)",
            "sender_id": 215648,
            "sender_realm_str": "recurse",
            "stream_id": 144212,
            "subject": "PLP Tuesday, June 4",
            "submessages": [],
            "timestamp": 1559666009,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/7857f26c1ef2e9bdbfa843f9087710f7?d=identicon&version=1",
            "client": "website",
            "content": "<p>I've volunteered to lead PLP tomorrow! Come back to this topic tomorrow for problems to work on.</p>",
            "content_type": "text/html",
            "display_recipient": "Post-Lunch Prep (PLP)",
            "flags": [
                "read",
                "historical"
            ],
            "id": 167346658,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "+1",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "jaryn.colbert@gmail.com",
                        "full_name": "Jaryn Colbert (she) (S1'19)",
                        "id": 203871
                    },
                    "user_id": 203871
                },
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "+1",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "james@jamesa.me",
                        "full_name": "James Anderson (he) (S1'19)",
                        "id": 221821
                    },
                    "user_id": 221821
                }
            ],
            "recipient_id": 183179,
            "sender_email": "nathan12343@gmail.com",
            "sender_full_name": "Nathan Goldbaum (he) (S1'19)",
            "sender_id": 221814,
            "sender_realm_str": "recurse",
            "stream_id": 144212,
            "subject": "PLP Wednesday, June 5",
            "submessages": [],
            "timestamp": 1559694239,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/7857f26c1ef2e9bdbfa843f9087710f7?d=identicon&version=1",
            "client": "website",
            "content": "<p>I'm going to take after Elana and do one easy problem and one hard problem:</p>",
            "content_type": "text/html",
            "display_recipient": "Post-Lunch Prep (PLP)",
            "flags": [
                "read",
                "historical"
            ],
            "id": 167409580,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 183179,
            "sender_email": "nathan12343@gmail.com",
            "sender_full_name": "Nathan Goldbaum (he) (S1'19)",
            "sender_id": 221814,
            "sender_realm_str": "recurse",
            "stream_id": 144212,
            "subject": "PLP Wednesday, June 5",
            "submessages": [],
            "timestamp": 1559754489,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/7857f26c1ef2e9bdbfa843f9087710f7?d=identicon&version=1",
            "client": "website",
            "content": "<p>104: <a href=\"https://leetcode.com/problems/maximum-depth-of-binary-tree/\" target=\"_blank\" title=\"https://leetcode.com/problems/maximum-depth-of-binary-tree/\">https://leetcode.com/problems/maximum-depth-of-binary-tree/</a><br>\n128: <a href=\"https://leetcode.com/problems/longest-consecutive-sequence/\" target=\"_blank\" title=\"https://leetcode.com/problems/longest-consecutive-sequence/\">https://leetcode.com/problems/longest-consecutive-sequence/</a></p>",
            "content_type": "text/html",
            "display_recipient": "Post-Lunch Prep (PLP)",
            "flags": [
                "read",
                "historical"
            ],
            "id": 167409617,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 183179,
            "sender_email": "nathan12343@gmail.com",
            "sender_full_name": "Nathan Goldbaum (he) (S1'19)",
            "sender_id": 221814,
            "sender_realm_str": "recurse",
            "stream_id": 144212,
            "subject": "PLP Wednesday, June 5",
            "submessages": [],
            "timestamp": 1559754536,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/7857f26c1ef2e9bdbfa843f9087710f7?d=identicon&version=1",
            "client": "website",
            "content": "<p>let's meet on the 4th floor at 1:45</p>",
            "content_type": "text/html",
            "display_recipient": "Post-Lunch Prep (PLP)",
            "flags": [
                "read",
                "historical"
            ],
            "id": 167409637,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "+1",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "jburmac@gmail.com",
                        "full_name": "Jesus Burgos Macia (he) (S1'19)",
                        "id": 221857
                    },
                    "user_id": 221857
                }
            ],
            "recipient_id": 183179,
            "sender_email": "nathan12343@gmail.com",
            "sender_full_name": "Nathan Goldbaum (he) (S1'19)",
            "sender_id": 221814,
            "sender_realm_str": "recurse",
            "stream_id": 144212,
            "subject": "PLP Wednesday, June 5",
            "submessages": [],
            "timestamp": 1559754549,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/52aba2ebf5f98bbae1209cafb7fcae49?d=identicon&version=1",
            "client": "ZulipElectron",
            "content": "<p>are we supposed to read them upfront or are the problems explained during the session?</p>",
            "content_type": "text/html",
            "display_recipient": "Post-Lunch Prep (PLP)",
            "flags": [
                "read",
                "historical"
            ],
            "id": 167409746,
            "is_me_message": false,
            "last_edit_timestamp": 1559754640,
            "reactions": [],
            "recipient_id": 183179,
            "sender_email": "jburmac@gmail.com",
            "sender_full_name": "Jesus Burgos Macia (he) (S1'19)",
            "sender_id": 221857,
            "sender_realm_str": "recurse",
            "stream_id": 144212,
            "subject": "PLP Wednesday, June 5",
            "submessages": [],
            "timestamp": 1559754627,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/7857f26c1ef2e9bdbfa843f9087710f7?d=identicon&version=1",
            "client": "website",
            "content": "<p>you can definitely go in cold, we'll pair up and then look at the problems in pairs</p>",
            "content_type": "text/html",
            "display_recipient": "Post-Lunch Prep (PLP)",
            "flags": [
                "read",
                "historical"
            ],
            "id": 167409884,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 183179,
            "sender_email": "nathan12343@gmail.com",
            "sender_full_name": "Nathan Goldbaum (he) (S1'19)",
            "sender_id": 221814,
            "sender_realm_str": "recurse",
            "stream_id": 144212,
            "subject": "PLP Wednesday, June 5",
            "submessages": [],
            "timestamp": 1559754731,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/258f110fa2993f8183644cb2286ccbd6?d=identicon&version=1",
            "client": "ZulipElectron",
            "content": "<p>Hi everyone! The problems we'll do today:<br>\n198: <a href=\"https://leetcode.com/problems/house-robber/\" target=\"_blank\" title=\"https://leetcode.com/problems/house-robber/\">https://leetcode.com/problems/house-robber/</a><br>\n139: <a href=\"https://leetcode.com/problems/word-break/\" target=\"_blank\" title=\"https://leetcode.com/problems/word-break/\">https://leetcode.com/problems/word-break/</a></p>\n<p>Come join us in the presentation space if you'd like to pair on them! Hope to see you there :)</p>\n<p>cc <span class=\"user-mention\" data-user-id=\"221814\">@Nathan Jonathan Goldbaum (S1'19)</span> <span class=\"user-mention\" data-user-id=\"221857\">@Jesus Burgos Macia (S1'19)</span> <span class=\"user-mention\" data-user-id=\"215648\">@Elana Liskovich (SP2'19)</span> <span class=\"user-mention\" data-user-id=\"221833\">@Julian Gobran Hinsch (S1'19)</span> <span class=\"user-mention\" data-user-id=\"222269\">@Besart Shyti (S1'19)</span></p>",
            "content_type": "text/html",
            "display_recipient": "Post-Lunch Prep (PLP)",
            "flags": [
                "read",
                "historical"
            ],
            "id": 167500160,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 183179,
            "sender_email": "james@jamesa.me",
            "sender_full_name": "James Anderson (he) (S1'19)",
            "sender_id": 221821,
            "sender_realm_str": "recurse",
            "stream_id": 144212,
            "subject": "PLP Thursday, June 6",
            "submessages": [],
            "timestamp": 1559840503,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/f47a0818d457159648b86840bfa5b6c0?d=identicon&version=1",
            "client": "website",
            "content": "<p>I can't make it today because of language exchange, but the problems look interesting!</p>",
            "content_type": "text/html",
            "display_recipient": "Post-Lunch Prep (PLP)",
            "flags": [
                "read",
                "historical"
            ],
            "id": 167500620,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "+1",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "james@jamesa.me",
                        "full_name": "James Anderson (he) (S1'19)",
                        "id": 221821
                    },
                    "user_id": 221821
                }
            ],
            "recipient_id": 183179,
            "sender_email": "elana.l1@gmail.com",
            "sender_full_name": "Elana Liskovich (SP2'19)",
            "sender_id": 215648,
            "sender_realm_str": "recurse",
            "stream_id": 144212,
            "subject": "PLP Thursday, June 6",
            "submessages": [],
            "timestamp": 1559840869,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/7857f26c1ef2e9bdbfa843f9087710f7?d=identicon&version=1",
            "client": "website",
            "content": "<p>I'm pairing and won't be able to make it today, sorry!</p>",
            "content_type": "text/html",
            "display_recipient": "Post-Lunch Prep (PLP)",
            "flags": [
                "read",
                "historical"
            ],
            "id": 167503805,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 183179,
            "sender_email": "nathan12343@gmail.com",
            "sender_full_name": "Nathan Goldbaum (he) (S1'19)",
            "sender_id": 221814,
            "sender_realm_str": "recurse",
            "stream_id": 144212,
            "subject": "PLP Thursday, June 6",
            "submessages": [],
            "timestamp": 1559843092,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/258f110fa2993f8183644cb2286ccbd6?d=identicon&version=1",
            "client": "ZulipElectron",
            "content": "<p>Ok no worries! Let's try again tomorrow.</p>",
            "content_type": "text/html",
            "display_recipient": "Post-Lunch Prep (PLP)",
            "flags": [
                "read",
                "historical"
            ],
            "id": 167503990,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 183179,
            "sender_email": "james@jamesa.me",
            "sender_full_name": "James Anderson (he) (S1'19)",
            "sender_id": 221821,
            "sender_realm_str": "recurse",
            "stream_id": 144212,
            "subject": "PLP Thursday, June 6",
            "submessages": [],
            "timestamp": 1559843201,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/2a99f1637580bd8edc986f54a2059b7366482692?x=x&version=5",
            "client": "ZulipMobile",
            "content": "<p>I\u2019m in! Are you still up for it <span class=\"user-mention\" data-user-id=\"221821\">@James Anderson (S1'19)</span></p>",
            "content_type": "text/html",
            "display_recipient": "Post-Lunch Prep (PLP)",
            "flags": [
                "read",
                "historical"
            ],
            "id": 167504579,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 183179,
            "sender_email": "chesley.brian@gmail.com",
            "sender_full_name": "Brian Chesley (he) (S1'19)",
            "sender_id": 222063,
            "sender_realm_str": "recurse",
            "stream_id": 144212,
            "subject": "PLP Thursday, June 6",
            "submessages": [],
            "timestamp": 1559843540,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/258f110fa2993f8183644cb2286ccbd6?d=identicon&version=1",
            "client": "ZulipElectron",
            "content": "<p>Sure! Be right down.</p>",
            "content_type": "text/html",
            "display_recipient": "Post-Lunch Prep (PLP)",
            "flags": [
                "read",
                "historical"
            ],
            "id": 167504616,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 183179,
            "sender_email": "james@jamesa.me",
            "sender_full_name": "James Anderson (he) (S1'19)",
            "sender_id": 221821,
            "sender_realm_str": "recurse",
            "stream_id": 144212,
            "subject": "PLP Thursday, June 6",
            "submessages": [],
            "timestamp": 1559843572,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/52aba2ebf5f98bbae1209cafb7fcae49?d=identicon&version=1",
            "client": "ZulipElectron",
            "content": "<p>Hi <span class=\"user-mention\" data-user-id=\"221814\">@Nathan Jonathan Goldbaum (S1'19)</span> <span class=\"user-mention\" data-user-id=\"221813\">@Cameron McCallie (S1'19)</span> <span class=\"user-mention\" data-user-id=\"215648\">@Elana Liskovich (SP2'19)</span> <span class=\"user-mention\" data-user-id=\"221833\">@Julian Gobran Hinsch (S1'19)</span> <span class=\"user-mention\" data-user-id=\"222269\">@Besart Shyti (S1'19)</span>, James has created an event for PLP today. Please subscribe if you haven't yet and you want to join :)</p>",
            "content_type": "text/html",
            "display_recipient": "Post-Lunch Prep (PLP)",
            "flags": [
                "read",
                "historical"
            ],
            "id": 167581761,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 183179,
            "sender_email": "jburmac@gmail.com",
            "sender_full_name": "Jesus Burgos Macia (he) (S1'19)",
            "sender_id": 221857,
            "sender_realm_str": "recurse",
            "stream_id": 144212,
            "subject": "PLP Friday, June 7",
            "submessages": [],
            "timestamp": 1559917906,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/258f110fa2993f8183644cb2286ccbd6?d=identicon&version=1",
            "client": "ZulipElectron",
            "content": "<p>This time conflicts with a meeting Jesus has, if you guys have flexibility on when we can do it so we can include Jesus, that would be awesome too. (up for other time suggestions)</p>",
            "content_type": "text/html",
            "display_recipient": "Post-Lunch Prep (PLP)",
            "flags": [
                "read",
                "historical"
            ],
            "id": 167582031,
            "is_me_message": false,
            "last_edit_timestamp": 1559918139,
            "reactions": [],
            "recipient_id": 183179,
            "sender_email": "james@jamesa.me",
            "sender_full_name": "James Anderson (he) (S1'19)",
            "sender_id": 221821,
            "sender_realm_str": "recurse",
            "stream_id": 144212,
            "subject": "PLP Friday, June 7",
            "submessages": [],
            "timestamp": 1559918105,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/7857f26c1ef2e9bdbfa843f9087710f7?d=identicon&version=1",
            "client": "website",
            "content": "<p>Later in the afternoon or something this morning works for me.</p>",
            "content_type": "text/html",
            "display_recipient": "Post-Lunch Prep (PLP)",
            "flags": [
                "read",
                "historical"
            ],
            "id": 167583506,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 183179,
            "sender_email": "nathan12343@gmail.com",
            "sender_full_name": "Nathan Goldbaum (he) (S1'19)",
            "sender_id": 221814,
            "sender_realm_str": "recurse",
            "stream_id": 144212,
            "subject": "PLP Friday, June 7",
            "submessages": [],
            "timestamp": 1559919089,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/52aba2ebf5f98bbae1209cafb7fcae49?d=identicon&version=1",
            "client": "ZulipElectron",
            "content": "<p>Looks like we'll be 4 people today, does 2:30pm suit everyone? <span class=\"user-mention\" data-user-id=\"221814\">@Nathan Jonathan Goldbaum (S1'19)</span> <span class=\"user-mention\" data-user-id=\"221833\">@Julian Gobran Hinsch (S1'19)</span> <span class=\"user-mention\" data-user-id=\"221821\">@James Anderson (S1'19)</span> </p>\n<p>If so, I'll publish the problems I've picked at ~2:00pm</p>",
            "content_type": "text/html",
            "display_recipient": "Post-Lunch Prep (PLP)",
            "flags": [
                "read",
                "historical"
            ],
            "id": 167589889,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "+1",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "nathan12343@gmail.com",
                        "full_name": "Nathan Goldbaum (he) (S1'19)",
                        "id": 221814
                    },
                    "user_id": 221814
                },
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "+1",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "besartshyti@gmail.com",
                        "full_name": "Besart Shyti (S1'19)",
                        "id": 222269
                    },
                    "user_id": 222269
                },
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "+1",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "chesley.brian@gmail.com",
                        "full_name": "Brian Chesley (he) (S1'19)",
                        "id": 222063
                    },
                    "user_id": 222063
                },
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "+1",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "james@jamesa.me",
                        "full_name": "James Anderson (he) (S1'19)",
                        "id": 221821
                    },
                    "user_id": 221821
                }
            ],
            "recipient_id": 183179,
            "sender_email": "jburmac@gmail.com",
            "sender_full_name": "Jesus Burgos Macia (he) (S1'19)",
            "sender_id": 221857,
            "sender_realm_str": "recurse",
            "stream_id": 144212,
            "subject": "PLP Friday, June 7",
            "submessages": [],
            "timestamp": 1559923621,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/f47a0818d457159648b86840bfa5b6c0?d=identicon&version=1",
            "client": "website",
            "content": "<p>I'm not sure yet if I'll make it to RC today, but if I do I'll stop by for PLP :)</p>",
            "content_type": "text/html",
            "display_recipient": "Post-Lunch Prep (PLP)",
            "flags": [
                "read",
                "historical"
            ],
            "id": 167590666,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f389",
                    "emoji_name": "tada",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "jburmac@gmail.com",
                        "full_name": "Jesus Burgos Macia (he) (S1'19)",
                        "id": 221857
                    },
                    "user_id": 221857
                }
            ],
            "recipient_id": 183179,
            "sender_email": "elana.l1@gmail.com",
            "sender_full_name": "Elana Liskovich (SP2'19)",
            "sender_id": 215648,
            "sender_realm_str": "recurse",
            "stream_id": 144212,
            "subject": "PLP Friday, June 7",
            "submessages": [],
            "timestamp": 1559924251,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/52aba2ebf5f98bbae1209cafb7fcae49?d=identicon&version=1",
            "client": "ZulipElectron",
            "content": "<p>publishing the problems earlier than expected as per Bes's request:</p>\n<p>Easy: <a href=\"https://leetcode.com/problems/partition-array-into-three-parts-with-equal-sum/\" target=\"_blank\" title=\"https://leetcode.com/problems/partition-array-into-three-parts-with-equal-sum/\">https://leetcode.com/problems/partition-array-into-three-parts-with-equal-sum/</a><br>\nHard: <a href=\"https://leetcode.com/problems/trapping-rain-water/\" target=\"_blank\" title=\"https://leetcode.com/problems/trapping-rain-water/\">https://leetcode.com/problems/trapping-rain-water/</a></p>",
            "content_type": "text/html",
            "display_recipient": "Post-Lunch Prep (PLP)",
            "flags": [
                "read",
                "historical"
            ],
            "id": 167594421,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f389",
                    "emoji_name": "tada",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "besartshyti@gmail.com",
                        "full_name": "Besart Shyti (S1'19)",
                        "id": 222269
                    },
                    "user_id": 222269
                }
            ],
            "recipient_id": 183179,
            "sender_email": "jburmac@gmail.com",
            "sender_full_name": "Jesus Burgos Macia (he) (S1'19)",
            "sender_id": 221857,
            "sender_realm_str": "recurse",
            "stream_id": 144212,
            "subject": "PLP Friday, June 7",
            "submessages": [],
            "timestamp": 1559927374,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/52aba2ebf5f98bbae1209cafb7fcae49?d=identicon&version=1",
            "client": "ZulipElectron",
            "content": "<p>guys my meeting is running late, haven't even started and it's time for PLP already, so I can't make it. I'm very sorry <span aria-label=\"sweat\" class=\"emoji emoji-1f613\" role=\"img\" title=\"sweat\">:sweat:</span></p>",
            "content_type": "text/html",
            "display_recipient": "Post-Lunch Prep (PLP)",
            "flags": [
                "read",
                "historical"
            ],
            "id": 167601273,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 183179,
            "sender_email": "jburmac@gmail.com",
            "sender_full_name": "Jesus Burgos Macia (he) (S1'19)",
            "sender_id": 221857,
            "sender_realm_str": "recurse",
            "stream_id": 144212,
            "subject": "PLP Friday, June 7",
            "submessages": [],
            "timestamp": 1559932263,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/258f110fa2993f8183644cb2286ccbd6?d=identicon&version=1",
            "client": "ZulipElectron",
            "content": "<p>Good luck! No worries</p>",
            "content_type": "text/html",
            "display_recipient": "Post-Lunch Prep (PLP)",
            "flags": [
                "read",
                "historical"
            ],
            "id": 167601520,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 183179,
            "sender_email": "james@jamesa.me",
            "sender_full_name": "James Anderson (he) (S1'19)",
            "sender_id": 221821,
            "sender_realm_str": "recurse",
            "stream_id": 144212,
            "subject": "PLP Friday, June 7",
            "submessages": [],
            "timestamp": 1559932436,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/f47a0818d457159648b86840bfa5b6c0?d=identicon&version=1",
            "client": "website",
            "content": "<p>Hey Everyone! Problems for today are: </p>\n<p>5: <a href=\"https://leetcode.com/problems/longest-palindromic-substring/\" target=\"_blank\" title=\"https://leetcode.com/problems/longest-palindromic-substring/\">https://leetcode.com/problems/longest-palindromic-substring/</a><br>\n121: <a href=\"https://leetcode.com/problems/best-time-to-buy-and-sell-stock/\" target=\"_blank\" title=\"https://leetcode.com/problems/best-time-to-buy-and-sell-stock/\">https://leetcode.com/problems/best-time-to-buy-and-sell-stock/</a></p>",
            "content_type": "text/html",
            "display_recipient": "Post-Lunch Prep (PLP)",
            "flags": [
                "read",
                "historical"
            ],
            "id": 167868269,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "+1",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "james@jamesa.me",
                        "full_name": "James Anderson (he) (S1'19)",
                        "id": 221821
                    },
                    "user_id": 221821
                }
            ],
            "recipient_id": 183179,
            "sender_email": "elana.l1@gmail.com",
            "sender_full_name": "Elana Liskovich (SP2'19)",
            "sender_id": 215648,
            "sender_realm_str": "recurse",
            "stream_id": 144212,
            "subject": "PLP Tuesday, June 11",
            "submessages": [],
            "timestamp": 1560271832,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/f47a0818d457159648b86840bfa5b6c0?d=identicon&version=1",
            "client": "website",
            "content": "<p>Problems for today are: </p>\n<p>204: <a href=\"https://leetcode.com/problems/count-primes/\" target=\"_blank\" title=\"https://leetcode.com/problems/count-primes/\">https://leetcode.com/problems/count-primes/</a><br>\n99: <a href=\"https://leetcode.com/problems/recover-binary-search-tree/\" target=\"_blank\" title=\"https://leetcode.com/problems/recover-binary-search-tree/\">https://leetcode.com/problems/recover-binary-search-tree/</a></p>\n<p>See you at 1:45! <span aria-label=\"slight smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"slight smile\">:slight_smile:</span></p>",
            "content_type": "text/html",
            "display_recipient": "Post-Lunch Prep (PLP)",
            "flags": [
                "read",
                "historical"
            ],
            "id": 168419931,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 183179,
            "sender_email": "elana.l1@gmail.com",
            "sender_full_name": "Elana Liskovich (SP2'19)",
            "sender_id": 215648,
            "sender_realm_str": "recurse",
            "stream_id": 144212,
            "subject": "PLP Tuesday, June 18",
            "submessages": [],
            "timestamp": 1560876942,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/7857f26c1ef2e9bdbfa843f9087710f7?d=identicon&version=1",
            "client": "website",
            "content": "<p>Coded up my fancy solution to the second problem from yesterday:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">class</span> <span class=\"nc\">Solution</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"nf\">recoverTree</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">root</span><span class=\"p\">:</span> <span class=\"n\">TreeNode</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n        <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">        Do not return anything, modify root in-place instead.</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">if</span> <span class=\"n\">root</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span>\n        <span class=\"n\">maxl</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">maxTree</span><span class=\"p\">(</span><span class=\"n\">root</span><span class=\"o\">.</span><span class=\"n\">left</span><span class=\"p\">)</span>\n        <span class=\"n\">minr</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">minTree</span><span class=\"p\">(</span><span class=\"n\">root</span><span class=\"o\">.</span><span class=\"n\">right</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">maxl</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"kc\">None</span> <span class=\"ow\">and</span> <span class=\"n\">maxl</span> <span class=\"o\">&gt;</span> <span class=\"n\">root</span><span class=\"o\">.</span><span class=\"n\">val</span><span class=\"p\">)</span> <span class=\"ow\">and</span> <span class=\"p\">(</span><span class=\"n\">minr</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"kc\">None</span> <span class=\"ow\">and</span> <span class=\"n\">minr</span> <span class=\"o\">&lt;</span> <span class=\"n\">root</span><span class=\"o\">.</span><span class=\"n\">val</span><span class=\"p\">):</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">insert</span><span class=\"p\">(</span><span class=\"n\">root</span><span class=\"o\">.</span><span class=\"n\">left</span><span class=\"p\">,</span> <span class=\"n\">minr</span><span class=\"p\">,</span> <span class=\"n\">maxl</span><span class=\"p\">)</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">insert</span><span class=\"p\">(</span><span class=\"n\">root</span><span class=\"o\">.</span><span class=\"n\">right</span><span class=\"p\">,</span> <span class=\"n\">maxl</span><span class=\"p\">,</span> <span class=\"n\">minr</span><span class=\"p\">)</span>\n        <span class=\"k\">elif</span> <span class=\"p\">(</span><span class=\"n\">maxl</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"kc\">None</span> <span class=\"ow\">and</span> <span class=\"n\">maxl</span> <span class=\"o\">&gt;</span> <span class=\"n\">root</span><span class=\"o\">.</span><span class=\"n\">val</span><span class=\"p\">):</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">insert</span><span class=\"p\">(</span><span class=\"n\">root</span><span class=\"o\">.</span><span class=\"n\">left</span><span class=\"p\">,</span> <span class=\"n\">root</span><span class=\"o\">.</span><span class=\"n\">val</span><span class=\"p\">,</span> <span class=\"n\">maxl</span><span class=\"p\">)</span>\n            <span class=\"n\">root</span><span class=\"o\">.</span><span class=\"n\">val</span> <span class=\"o\">=</span> <span class=\"n\">maxl</span>\n        <span class=\"k\">elif</span> <span class=\"p\">(</span><span class=\"n\">minr</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"kc\">None</span> <span class=\"ow\">and</span> <span class=\"n\">minr</span> <span class=\"o\">&lt;</span> <span class=\"n\">root</span><span class=\"o\">.</span><span class=\"n\">val</span><span class=\"p\">):</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">insert</span><span class=\"p\">(</span><span class=\"n\">root</span><span class=\"o\">.</span><span class=\"n\">right</span><span class=\"p\">,</span> <span class=\"n\">root</span><span class=\"o\">.</span><span class=\"n\">val</span><span class=\"p\">,</span> <span class=\"n\">minr</span><span class=\"p\">)</span>\n            <span class=\"n\">root</span><span class=\"o\">.</span><span class=\"n\">val</span> <span class=\"o\">=</span> <span class=\"n\">minr</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">recoverTree</span><span class=\"p\">(</span><span class=\"n\">root</span><span class=\"o\">.</span><span class=\"n\">left</span><span class=\"p\">)</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">recoverTree</span><span class=\"p\">(</span><span class=\"n\">root</span><span class=\"o\">.</span><span class=\"n\">right</span><span class=\"p\">)</span>\n\n\n    <span class=\"k\">def</span> <span class=\"nf\">maxTree</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">root</span><span class=\"p\">:</span> <span class=\"n\">TreeNode</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"nb\">int</span><span class=\"p\">:</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">root</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"kc\">None</span>\n        <span class=\"n\">lmax</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">maxTree</span><span class=\"p\">(</span><span class=\"n\">root</span><span class=\"o\">.</span><span class=\"n\">left</span><span class=\"p\">)</span>\n        <span class=\"n\">rmax</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">maxTree</span><span class=\"p\">(</span><span class=\"n\">root</span><span class=\"o\">.</span><span class=\"n\">right</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"nb\">max</span><span class=\"p\">([</span><span class=\"n\">a</span> <span class=\"k\">for</span> <span class=\"n\">a</span> <span class=\"ow\">in</span> <span class=\"p\">(</span><span class=\"n\">lmax</span><span class=\"p\">,</span> <span class=\"n\">rmax</span><span class=\"p\">,</span> <span class=\"n\">root</span><span class=\"o\">.</span><span class=\"n\">val</span><span class=\"p\">)</span> <span class=\"k\">if</span> <span class=\"n\">a</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"kc\">None</span><span class=\"p\">])</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">minTree</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">root</span><span class=\"p\">:</span> <span class=\"n\">TreeNode</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"nb\">int</span><span class=\"p\">:</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">root</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"kc\">None</span>\n        <span class=\"n\">lmin</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">minTree</span><span class=\"p\">(</span><span class=\"n\">root</span><span class=\"o\">.</span><span class=\"n\">left</span><span class=\"p\">)</span>\n        <span class=\"n\">rmin</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">minTree</span><span class=\"p\">(</span><span class=\"n\">root</span><span class=\"o\">.</span><span class=\"n\">right</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"nb\">min</span><span class=\"p\">([</span><span class=\"n\">a</span> <span class=\"k\">for</span> <span class=\"n\">a</span> <span class=\"ow\">in</span> <span class=\"p\">(</span><span class=\"n\">lmin</span><span class=\"p\">,</span> <span class=\"n\">rmin</span><span class=\"p\">,</span> <span class=\"n\">root</span><span class=\"o\">.</span><span class=\"n\">val</span><span class=\"p\">)</span> <span class=\"k\">if</span> <span class=\"n\">a</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"kc\">None</span><span class=\"p\">])</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">insert</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">root</span><span class=\"p\">:</span> <span class=\"n\">TreeNode</span><span class=\"p\">,</span> <span class=\"n\">new_val</span><span class=\"p\">:</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"n\">old_val</span><span class=\"p\">:</span> <span class=\"nb\">int</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"nb\">bool</span><span class=\"p\">:</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">root</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"kc\">False</span>\n        <span class=\"k\">if</span> <span class=\"n\">root</span><span class=\"o\">.</span><span class=\"n\">val</span> <span class=\"o\">==</span> <span class=\"n\">old_val</span><span class=\"p\">:</span>\n            <span class=\"n\">root</span><span class=\"o\">.</span><span class=\"n\">val</span> <span class=\"o\">=</span> <span class=\"n\">new_val</span>\n            <span class=\"k\">return</span> <span class=\"kc\">True</span>\n        <span class=\"n\">retl</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">insert</span><span class=\"p\">(</span><span class=\"n\">root</span><span class=\"o\">.</span><span class=\"n\">left</span><span class=\"p\">,</span> <span class=\"n\">new_val</span><span class=\"p\">,</span> <span class=\"n\">old_val</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">retl</span><span class=\"p\">:</span>\n            <span class=\"n\">retr</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">insert</span><span class=\"p\">(</span><span class=\"n\">root</span><span class=\"o\">.</span><span class=\"n\">right</span><span class=\"p\">,</span> <span class=\"n\">new_val</span><span class=\"p\">,</span> <span class=\"n\">old_val</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">retl</span> <span class=\"ow\">or</span> <span class=\"n\">retr</span>\n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "Post-Lunch Prep (PLP)",
            "flags": [
                "read",
                "historical"
            ],
            "id": 168507524,
            "is_me_message": false,
            "last_edit_timestamp": 1560951874,
            "reactions": [
                {
                    "emoji_code": "1f389",
                    "emoji_name": "tada",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "elana.l1@gmail.com",
                        "full_name": "Elana Liskovich (SP2'19)",
                        "id": 215648
                    },
                    "user_id": 215648
                },
                {
                    "emoji_code": "1f389",
                    "emoji_name": "tada",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "chesley.brian@gmail.com",
                        "full_name": "Brian Chesley (he) (S1'19)",
                        "id": 222063
                    },
                    "user_id": 222063
                },
                {
                    "emoji_code": "1f389",
                    "emoji_name": "tada",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "james@jamesa.me",
                        "full_name": "James Anderson (he) (S1'19)",
                        "id": 221821
                    },
                    "user_id": 221821
                },
                {
                    "emoji_code": "1f389",
                    "emoji_name": "tada",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "jburmac@gmail.com",
                        "full_name": "Jesus Burgos Macia (he) (S1'19)",
                        "id": 221857
                    },
                    "user_id": 221857
                }
            ],
            "recipient_id": 183179,
            "sender_email": "nathan12343@gmail.com",
            "sender_full_name": "Nathan Goldbaum (he) (S1'19)",
            "sender_id": 221814,
            "sender_realm_str": "recurse",
            "stream_id": 144212,
            "subject": "PLP Tuesday, June 18",
            "submessages": [],
            "timestamp": 1560951862,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/f47a0818d457159648b86840bfa5b6c0?d=identicon&version=1",
            "client": "website",
            "content": "<p>Hey all! Today's problems are: </p>\n<p>70: <a href=\"https://leetcode.com/problems/climbing-stairs/\" target=\"_blank\" title=\"https://leetcode.com/problems/climbing-stairs/\">https://leetcode.com/problems/climbing-stairs/</a><br>\n11: <a href=\"https://leetcode.com/problems/container-with-most-water/\" target=\"_blank\" title=\"https://leetcode.com/problems/container-with-most-water/\">https://leetcode.com/problems/container-with-most-water/</a></p>",
            "content_type": "text/html",
            "display_recipient": "Post-Lunch Prep (PLP)",
            "flags": [
                "read",
                "historical"
            ],
            "id": 168953795,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 183179,
            "sender_email": "elana.l1@gmail.com",
            "sender_full_name": "Elana Liskovich (SP2'19)",
            "sender_id": 215648,
            "sender_realm_str": "recurse",
            "stream_id": 144212,
            "subject": "PLP Tuesday, June 25",
            "submessages": [],
            "timestamp": 1561480509,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/258f110fa2993f8183644cb2286ccbd6?d=identicon&version=1",
            "client": "ZulipElectron",
            "content": "<p>We've attempted #11 before but I'm always up to try it again :)</p>",
            "content_type": "text/html",
            "display_recipient": "Post-Lunch Prep (PLP)",
            "flags": [
                "read",
                "historical"
            ],
            "id": 168955149,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 183179,
            "sender_email": "james@jamesa.me",
            "sender_full_name": "James Anderson (he) (S1'19)",
            "sender_id": 221821,
            "sender_realm_str": "recurse",
            "stream_id": 144212,
            "subject": "PLP Tuesday, June 25",
            "submessages": [],
            "timestamp": 1561481446,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/f47a0818d457159648b86840bfa5b6c0?d=identicon&version=1",
            "client": "website",
            "content": "<p>oh ok, we can do another one then!</p>",
            "content_type": "text/html",
            "display_recipient": "Post-Lunch Prep (PLP)",
            "flags": [
                "read",
                "historical"
            ],
            "id": 168956562,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 183179,
            "sender_email": "elana.l1@gmail.com",
            "sender_full_name": "Elana Liskovich (SP2'19)",
            "sender_id": 215648,
            "sender_realm_str": "recurse",
            "stream_id": 144212,
            "subject": "PLP Tuesday, June 25",
            "submessages": [],
            "timestamp": 1561482440,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/f47a0818d457159648b86840bfa5b6c0?d=identicon&version=1",
            "client": "website",
            "content": "<p>how about this? <a href=\"https://leetcode.com/problems/daily-temperatures/\" target=\"_blank\" title=\"https://leetcode.com/problems/daily-temperatures/\">https://leetcode.com/problems/daily-temperatures/</a></p>",
            "content_type": "text/html",
            "display_recipient": "Post-Lunch Prep (PLP)",
            "flags": [
                "read",
                "historical"
            ],
            "id": 168956744,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 183179,
            "sender_email": "elana.l1@gmail.com",
            "sender_full_name": "Elana Liskovich (SP2'19)",
            "sender_id": 215648,
            "sender_realm_str": "recurse",
            "stream_id": 144212,
            "subject": "PLP Tuesday, June 25",
            "submessages": [],
            "timestamp": 1561482567,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/258f110fa2993f8183644cb2286ccbd6?d=identicon&version=1",
            "client": "ZulipElectron",
            "content": "<p>looks good to me! I just didn't want to cheat on #11 lol having already seen the different approaches</p>",
            "content_type": "text/html",
            "display_recipient": "Post-Lunch Prep (PLP)",
            "flags": [
                "read",
                "historical"
            ],
            "id": 168956852,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 183179,
            "sender_email": "james@jamesa.me",
            "sender_full_name": "James Anderson (he) (S1'19)",
            "sender_id": 221821,
            "sender_realm_str": "recurse",
            "stream_id": 144212,
            "subject": "PLP Tuesday, June 25",
            "submessages": [],
            "timestamp": 1561482629,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/258f110fa2993f8183644cb2286ccbd6?d=identicon&version=1",
            "client": "ZulipElectron",
            "content": "<p>I've been mistaken #11 actually isn't the problem we did before lol oops. We had done <a href=\"https://leetcode.com/problems/trapping-rain-water/\" target=\"_blank\" title=\"https://leetcode.com/problems/trapping-rain-water/\">https://leetcode.com/problems/trapping-rain-water/</a> :)</p>",
            "content_type": "text/html",
            "display_recipient": "Post-Lunch Prep (PLP)",
            "flags": [
                "read",
                "historical"
            ],
            "id": 168959948,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 183179,
            "sender_email": "james@jamesa.me",
            "sender_full_name": "James Anderson (he) (S1'19)",
            "sender_id": 221821,
            "sender_realm_str": "recurse",
            "stream_id": 144212,
            "subject": "PLP Tuesday, June 25",
            "submessages": [],
            "timestamp": 1561484652,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/f47a0818d457159648b86840bfa5b6c0?d=identicon&version=1",
            "client": "website",
            "content": "<p>PLP moved to Sammet</p>",
            "content_type": "text/html",
            "display_recipient": "Post-Lunch Prep (PLP)",
            "flags": [
                "read",
                "historical"
            ],
            "id": 168960222,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 183179,
            "sender_email": "elana.l1@gmail.com",
            "sender_full_name": "Elana Liskovich (SP2'19)",
            "sender_id": 215648,
            "sender_realm_str": "recurse",
            "stream_id": 144212,
            "subject": "PLP Tuesday, June 25",
            "submessages": [],
            "timestamp": 1561484845,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/69facd2622806b8c2f74c7ae4a26f83d60a2545c?x=x&version=2",
            "client": "website",
            "content": "<p>Hi Everyone! I've added a Post-Lunch Prep (PLP) to the calendar for Tuesday the 9th. PLP is a chance for recursers to practice their skills and prepare for interviews. Please join us if you're interested and are looking to meet some of your new peers. We plan on starting off by alternating between algorithm questions and behavioral type interviews. For the 9th let's start with algorithms. Please use this thread to propose some subjects or questions you're interested in trying out. </p>\n<p><span class=\"user-mention\" data-user-id=\"221821\">@James Anderson (he) (S1'19)</span> Has suggested that we still pick two problems, but for each problem we have a primary problem solver. This way each person gets a chance to work through a problem while the other provides support.</p>",
            "content_type": "text/html",
            "display_recipient": "Post-Lunch Prep (PLP)",
            "flags": [
                "read",
                "historical"
            ],
            "id": 169410361,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "+1",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "michael@fekadu.com",
                        "full_name": "Michael Fekadu (he) (S2'19)",
                        "id": 228092
                    },
                    "user_id": 228092
                },
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "+1",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "shae.erisson@gmail.com",
                        "full_name": "Shae Matijs Erisson (he) (F1'19)",
                        "id": 221819
                    },
                    "user_id": 221819
                },
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "+1",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "berniesnell@gmail.com",
                        "full_name": "Bernie Snell (she) (S1'19)",
                        "id": 222090
                    },
                    "user_id": 222090
                },
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "+1",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "james@jamesa.me",
                        "full_name": "James Anderson (he) (S1'19)",
                        "id": 221821
                    },
                    "user_id": 221821
                },
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "+1",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "zach@zachkrall.com",
                        "full_name": "Zach Krall (he) (S1'19)",
                        "id": 221810
                    },
                    "user_id": 221810
                }
            ],
            "recipient_id": 183179,
            "sender_email": "hujimoe@gmail.com",
            "sender_full_name": "Josh Erickson (he) (S1'19)",
            "sender_id": 221847,
            "sender_realm_str": "recurse",
            "stream_id": 144212,
            "subject": "PLP Tuesday, July 9",
            "submessages": [],
            "timestamp": 1561999177,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/787f392240856522f98bd4d40db71ec20edb3d2e?x=x&version=3",
            "client": "website",
            "content": "<p>Practicing a lil memoization</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kd\">let</span> <span class=\"nx\">climbStairs</span> <span class=\"o\">=</span> <span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">n</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"kd\">let</span> <span class=\"nx\">cache</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"mi\">0</span><span class=\"o\">:</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"o\">:</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"o\">:</span> <span class=\"mi\">2</span><span class=\"p\">}</span>\n    <span class=\"k\">return</span> <span class=\"nx\">recursiveClimbStairs</span><span class=\"p\">(</span><span class=\"nx\">n</span><span class=\"p\">,</span> <span class=\"nx\">cache</span><span class=\"p\">)</span>\n<span class=\"p\">};</span>\n\n<span class=\"kd\">let</span> <span class=\"nx\">recursiveClimbStairs</span> <span class=\"o\">=</span> <span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">n</span><span class=\"p\">,</span> <span class=\"nx\">cache</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">cache</span><span class=\"p\">[</span><span class=\"nx\">n</span><span class=\"p\">]</span> <span class=\"o\">!==</span> <span class=\"kc\">undefined</span><span class=\"p\">)</span> <span class=\"k\">return</span> <span class=\"nx\">cache</span><span class=\"p\">[</span><span class=\"nx\">n</span><span class=\"p\">]</span>\n    <span class=\"k\">else</span> <span class=\"p\">{</span>\n        <span class=\"nx\">cache</span><span class=\"p\">[</span><span class=\"nx\">n</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"nx\">recursiveClimbStairs</span><span class=\"p\">(</span><span class=\"nx\">n</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"nx\">cache</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"nx\">recursiveClimbStairs</span><span class=\"p\">(</span><span class=\"nx\">n</span> <span class=\"o\">-</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"nx\">cache</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"nx\">cache</span><span class=\"p\">[</span><span class=\"nx\">n</span><span class=\"p\">]</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "Post-Lunch Prep (PLP)",
            "flags": [
                "read",
                "historical"
            ],
            "id": 169531891,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "+1",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "mepstein68@gmail.com",
                        "full_name": "Max Epstein (he) (S1'19)",
                        "id": 222514
                    },
                    "user_id": 222514
                },
                {
                    "emoji_code": "1f64c",
                    "emoji_name": "praise",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "katelaurel@gmail.com",
                        "full_name": "Kate-Laurel Agnew (she) (SP2'19)",
                        "id": 215254
                    },
                    "user_id": 215254
                },
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "+1",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "elana.l1@gmail.com",
                        "full_name": "Elana Liskovich (SP2'19)",
                        "id": 215648
                    },
                    "user_id": 215648
                }
            ],
            "recipient_id": 183179,
            "sender_email": "pmmhy4@mst.edu",
            "sender_full_name": "Patrick McCarver (they/he) (SP1'19)",
            "sender_id": 134599,
            "sender_realm_str": "recurse",
            "stream_id": 144212,
            "subject": "PLP Tuesday, June 25",
            "submessages": [],
            "timestamp": 1562115902,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/258f110fa2993f8183644cb2286ccbd6?d=identicon&version=1",
            "client": "ZulipElectron",
            "content": "<p>Hi all! Just a reminder that this is at 1:45 in Sammet! We'll meet up there before breaking off into pairs to practice. See you there!</p>\n<p>When you're paired off, you can choose to work on the problems together or alternate as interviewer/interviewee. You can work on the problems on your computer or use one of the many whiteboards in the space. This is a great chance to practice whiteboarding if a company you're interested in interviews like that!</p>\n<p>If you're practicing as interviewer/interviewee, this doesn't mean that the \"interviewer\" can't help or offer suggestions, just that one person is the primary problem solver. This is so the person solving the problem has a more realistic experience and can work through a problem just like they would have to do in an interview.</p>\n<p>I've picked two easier and two harder problems for today, so you can choose which one you want to work on during the time. Please take a look and see which ones you want to try, but don't solve them until you get to PLP!</p>\n<p>Easier:<br>\n<a href=\"https://leetcode.com/problems/merge-two-sorted-lists/\" target=\"_blank\" title=\"https://leetcode.com/problems/merge-two-sorted-lists/\">https://leetcode.com/problems/merge-two-sorted-lists/</a><br>\n<a href=\"https://leetcode.com/problems/two-sum/\" target=\"_blank\" title=\"https://leetcode.com/problems/two-sum/\">https://leetcode.com/problems/two-sum/</a></p>\n<p>Harder:<br>\n<a href=\"https://leetcode.com/problems/partition-list/\" target=\"_blank\" title=\"https://leetcode.com/problems/partition-list/\">https://leetcode.com/problems/partition-list/</a><br>\n<a href=\"https://leetcode.com/problems/longest-substring-without-repeating-characters/\" target=\"_blank\" title=\"https://leetcode.com/problems/longest-substring-without-repeating-characters/\">https://leetcode.com/problems/longest-substring-without-repeating-characters/</a></p>\n<p>CC RSVP's: <span class=\"user-mention\" data-user-id=\"221847\">@Josh Erickson (he) (S1'19)</span> <span class=\"user-mention\" data-user-id=\"222090\">@Bernie Snell (she) (S1'19)</span> <span class=\"user-mention\" data-user-id=\"221810\">@Zach Krall (he) (S1'19)</span> <span class=\"user-mention\" data-user-id=\"226496\">@Amiel Monasterial (he) (S2'19)</span> <span class=\"user-mention\" data-user-id=\"228113\">@Kathleen McGuire (she/they) (S2'19)</span> <span class=\"user-mention\" data-user-id=\"228101\">@John Vincent Tan (he) (S2'19)</span> <span class=\"user-mention\" data-user-id=\"221857\">@Jesus Burgos Macia (S1'19)</span> <span class=\"user-mention\" data-user-id=\"222063\">@Brian Chesley (he) (S1'19)</span></p>",
            "content_type": "text/html",
            "display_recipient": "Post-Lunch Prep (PLP)",
            "flags": [
                "read",
                "historical"
            ],
            "id": 170472350,
            "is_me_message": false,
            "last_edit_timestamp": 1562694369,
            "reactions": [
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "+1",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "chesley.brian@gmail.com",
                        "full_name": "Brian Chesley (he) (S1'19)",
                        "id": 222063
                    },
                    "user_id": 222063
                },
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "+1",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "zach@zachkrall.com",
                        "full_name": "Zach Krall (he) (S1'19)",
                        "id": 221810
                    },
                    "user_id": 221810
                }
            ],
            "recipient_id": 183179,
            "sender_email": "james@jamesa.me",
            "sender_full_name": "James Anderson (he) (S1'19)",
            "sender_id": 221821,
            "sender_realm_str": "recurse",
            "stream_id": 144212,
            "subject": "PLP Tuesday, July 9",
            "submessages": [],
            "timestamp": 1562692909,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/258f110fa2993f8183644cb2286ccbd6?d=identicon&version=1",
            "client": "ZulipElectron",
            "content": "<p>This is happening now in Sammet!</p>",
            "content_type": "text/html",
            "display_recipient": "Post-Lunch Prep (PLP)",
            "flags": [
                "read",
                "historical"
            ],
            "id": 170474627,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 183179,
            "sender_email": "james@jamesa.me",
            "sender_full_name": "James Anderson (he) (S1'19)",
            "sender_id": 221821,
            "sender_realm_str": "recurse",
            "stream_id": 144212,
            "subject": "PLP Tuesday, July 9",
            "submessages": [],
            "timestamp": 1562694385,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/69facd2622806b8c2f74c7ae4a26f83d60a2545c?x=x&version=2",
            "client": "website",
            "content": "<p>Ohai! Thursday PLP is happening at 1:45 in Sammet! </p>\n<p>Same format as last time. Please see the PLP Tuesday, July 9 thread for info. </p>\n<p>Here are two easy and two harder questions that relate to trees and recursion.  Please take a look and see which ones you want to try, but don't solve them until you get to PLP!</p>\n<p>Easier:<br>\n<a href=\"https://leetcode.com/problems/maximum-depth-of-binary-tree/\" target=\"_blank\" title=\"https://leetcode.com/problems/maximum-depth-of-binary-tree/\">https://leetcode.com/problems/maximum-depth-of-binary-tree/</a><br>\n<a href=\"https://leetcode.com/problems/symmetric-tree/\" target=\"_blank\" title=\"https://leetcode.com/problems/symmetric-tree/\">https://leetcode.com/problems/symmetric-tree/</a></p>\n<p>Harder:<br>\n<a href=\"https://leetcode.com/problems/binary-tree-zigzag-level-order-traversal/\" target=\"_blank\" title=\"https://leetcode.com/problems/binary-tree-zigzag-level-order-traversal/\">https://leetcode.com/problems/binary-tree-zigzag-level-order-traversal/</a><br>\n<a href=\"https://leetcode.com/problems/populating-next-right-pointers-in-each-node/\" target=\"_blank\" title=\"https://leetcode.com/problems/populating-next-right-pointers-in-each-node/\">https://leetcode.com/problems/populating-next-right-pointers-in-each-node/</a></p>\n<p>CC: <span class=\"user-mention\" data-user-id=\"221821\">@James Anderson (he) (S1'19)</span>  <span class=\"user-mention\" data-user-id=\"222090\">@Bernie Snell (she) (S1'19)</span>  <span class=\"user-mention\" data-user-id=\"226496\">@Amiel Monasterial (he) (S2'19)</span>  <span class=\"user-mention\" data-user-id=\"228113\">@Kathleen McGuire (she/they) (S2'19)</span>  <span class=\"user-mention\" data-user-id=\"228101\">@John Vincent Tan (he) (S2'19)</span>  <span class=\"user-mention\" data-user-id=\"203871\">@Jaryn Colbert (she) (S1'19)</span>  <span class=\"user-mention\" data-user-id=\"222063\">@Brian Chesley (he) (S1'19)</span></p>",
            "content_type": "text/html",
            "display_recipient": "Post-Lunch Prep (PLP)",
            "flags": [
                "read",
                "historical"
            ],
            "id": 170640153,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 183179,
            "sender_email": "hujimoe@gmail.com",
            "sender_full_name": "Josh Erickson (he) (S1'19)",
            "sender_id": 221847,
            "sender_realm_str": "recurse",
            "stream_id": 144212,
            "subject": "PLP Thursday, July 11th",
            "submessages": [],
            "timestamp": 1562856538,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/258f110fa2993f8183644cb2286ccbd6?d=identicon&version=1",
            "client": "ZulipElectron",
            "content": "<p>Julian's problem: <a href=\"https://leetcode.com/problems/trapping-rain-water/\" target=\"_blank\" title=\"https://leetcode.com/problems/trapping-rain-water/\">https://leetcode.com/problems/trapping-rain-water/</a> (I think)</p>",
            "content_type": "text/html",
            "display_recipient": "Post-Lunch Prep (PLP)",
            "flags": [
                "read",
                "historical"
            ],
            "id": 170656073,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 183179,
            "sender_email": "james@jamesa.me",
            "sender_full_name": "James Anderson (he) (S1'19)",
            "sender_id": 221821,
            "sender_realm_str": "recurse",
            "stream_id": 144212,
            "subject": "PLP Thursday, July 11th",
            "submessages": [],
            "timestamp": 1562867575,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/258f110fa2993f8183644cb2286ccbd6?d=identicon&version=1",
            "client": "ZulipElectron",
            "content": "<p>We need a volunteer to pick Tuesday's problems!</p>",
            "content_type": "text/html",
            "display_recipient": "Post-Lunch Prep (PLP)",
            "flags": [
                "read",
                "historical"
            ],
            "id": 170663194,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 183179,
            "sender_email": "james@jamesa.me",
            "sender_full_name": "James Anderson (he) (S1'19)",
            "sender_id": 221821,
            "sender_realm_str": "recurse",
            "stream_id": 144212,
            "subject": "PLP Thursday, July 11th",
            "submessages": [],
            "timestamp": 1562872486,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/52aba2ebf5f98bbae1209cafb7fcae49?d=identicon&version=1",
            "client": "ZulipElectron",
            "content": "<p>picking is easier than solving, I can do that!</p>",
            "content_type": "text/html",
            "display_recipient": "Post-Lunch Prep (PLP)",
            "flags": [
                "read",
                "historical"
            ],
            "id": 170663314,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f389",
                    "emoji_name": "tada",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "james@jamesa.me",
                        "full_name": "James Anderson (he) (S1'19)",
                        "id": 221821
                    },
                    "user_id": 221821
                }
            ],
            "recipient_id": 183179,
            "sender_email": "jburmac@gmail.com",
            "sender_full_name": "Jesus Burgos Macia (he) (S1'19)",
            "sender_id": 221857,
            "sender_realm_str": "recurse",
            "stream_id": 144212,
            "subject": "PLP Thursday, July 11th",
            "submessages": [],
            "timestamp": 1562872604,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/52aba2ebf5f98bbae1209cafb7fcae49?d=identicon&version=1",
            "client": "ZulipElectron",
            "content": "<p>so I implemented problem 101 in Ruby and this is how it looks like: <a href=\"https://gist.github.com/Jesus/ccf389504cf5e56d24cd9f4151f0654a\" target=\"_blank\" title=\"https://gist.github.com/Jesus/ccf389504cf5e56d24cd9f4151f0654a\">https://gist.github.com/Jesus/ccf389504cf5e56d24cd9f4151f0654a</a></p>",
            "content_type": "text/html",
            "display_recipient": "Post-Lunch Prep (PLP)",
            "flags": [
                "read",
                "historical"
            ],
            "id": 170664634,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 183179,
            "sender_email": "jburmac@gmail.com",
            "sender_full_name": "Jesus Burgos Macia (he) (S1'19)",
            "sender_id": 221857,
            "sender_realm_str": "recurse",
            "stream_id": 144212,
            "subject": "PLP Thursday, July 11th",
            "submessages": [],
            "timestamp": 1562873551,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/52aba2ebf5f98bbae1209cafb7fcae49?d=identicon&version=1",
            "client": "ZulipElectron",
            "content": "<p>it doesn't work out of the box for some trees, for example:<br>\n<a href=\"/user_uploads/13/HA9NUHhhkk5yM7JRrS6Opo4W/Captura-de-pantalla-2019-07-11-a-las-15.32.48.png\" target=\"_blank\" title=\"Captura-de-pantalla-2019-07-11-a-las-15.32.48.png\">Captura-de-pantalla-2019-07-11-a-las-15.32.48.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/13/HA9NUHhhkk5yM7JRrS6Opo4W/Captura-de-pantalla-2019-07-11-a-las-15.32.48.png\" target=\"_blank\" title=\"Captura-de-pantalla-2019-07-11-a-las-15.32.48.png\"><img src=\"/user_uploads/13/HA9NUHhhkk5yM7JRrS6Opo4W/Captura-de-pantalla-2019-07-11-a-las-15.32.48.png\"></a></div>",
            "content_type": "text/html",
            "display_recipient": "Post-Lunch Prep (PLP)",
            "flags": [
                "read",
                "historical"
            ],
            "id": 170664655,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 183179,
            "sender_email": "jburmac@gmail.com",
            "sender_full_name": "Jesus Burgos Macia (he) (S1'19)",
            "sender_id": 221857,
            "sender_realm_str": "recurse",
            "stream_id": 144212,
            "subject": "PLP Thursday, July 11th",
            "submessages": [],
            "timestamp": 1562873581,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/69facd2622806b8c2f74c7ae4a26f83d60a2545c?x=x&version=2",
            "client": "website",
            "content": "<p>Interesting find on a corner case for that approach.</p>",
            "content_type": "text/html",
            "display_recipient": "Post-Lunch Prep (PLP)",
            "flags": [
                "read",
                "historical"
            ],
            "id": 170728649,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 183179,
            "sender_email": "hujimoe@gmail.com",
            "sender_full_name": "Josh Erickson (he) (S1'19)",
            "sender_id": 221847,
            "sender_realm_str": "recurse",
            "stream_id": 144212,
            "subject": "PLP Thursday, July 11th",
            "submessages": [],
            "timestamp": 1562943634,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/69facd2622806b8c2f74c7ae4a26f83d60a2545c?x=x&version=2",
            "client": "website",
            "content": "<p>I can't think of a way to salvage that algorithm... Maybe someone else can.</p>",
            "content_type": "text/html",
            "display_recipient": "Post-Lunch Prep (PLP)",
            "flags": [
                "read",
                "historical"
            ],
            "id": 170728695,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 183179,
            "sender_email": "hujimoe@gmail.com",
            "sender_full_name": "Josh Erickson (he) (S1'19)",
            "sender_id": 221847,
            "sender_realm_str": "recurse",
            "stream_id": 144212,
            "subject": "PLP Thursday, July 11th",
            "submessages": [],
            "timestamp": 1562943671,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/52aba2ebf5f98bbae1209cafb7fcae49?d=identicon&version=1",
            "client": "ZulipElectron",
            "content": "<p>I thought of a couple workarounds:</p>",
            "content_type": "text/html",
            "display_recipient": "Post-Lunch Prep (PLP)",
            "flags": [
                "read",
                "historical"
            ],
            "id": 170730238,
            "is_me_message": false,
            "last_edit_timestamp": 1562944808,
            "reactions": [],
            "recipient_id": 183179,
            "sender_email": "jburmac@gmail.com",
            "sender_full_name": "Jesus Burgos Macia (he) (S1'19)",
            "sender_id": 221857,
            "sender_realm_str": "recurse",
            "stream_id": 144212,
            "subject": "PLP Thursday, July 11th",
            "submessages": [],
            "timestamp": 1562944660,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/52aba2ebf5f98bbae1209cafb7fcae49?d=identicon&version=1",
            "client": "ZulipElectron",
            "content": "<p>1. when doing the cast from tree to array, add a nil element for each missing child so the tree would be [2,2,nil,1,2,2,nil]. That solved the problem for that tree but then it'd fail for other trees, like this: <a href=\"/user_uploads/13/6MhIGz1tik2jrvlFm7Ab8uLZ/Captura-de-pantalla-2019-07-12-a-las-11.17.44.png\" target=\"_blank\" title=\"Captura-de-pantalla-2019-07-12-a-las-11.17.44.png\">Captura-de-pantalla-2019-07-12-a-las-11.17.44.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/13/6MhIGz1tik2jrvlFm7Ab8uLZ/Captura-de-pantalla-2019-07-12-a-las-11.17.44.png\" target=\"_blank\" title=\"Captura-de-pantalla-2019-07-12-a-las-11.17.44.png\"><img src=\"/user_uploads/13/6MhIGz1tik2jrvlFm7Ab8uLZ/Captura-de-pantalla-2019-07-12-a-las-11.17.44.png\"></a></div>",
            "content_type": "text/html",
            "display_recipient": "Post-Lunch Prep (PLP)",
            "flags": [
                "read",
                "historical"
            ],
            "id": 170730379,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 183179,
            "sender_email": "jburmac@gmail.com",
            "sender_full_name": "Jesus Burgos Macia (he) (S1'19)",
            "sender_id": 221857,
            "sender_realm_str": "recurse",
            "stream_id": 144212,
            "subject": "PLP Thursday, July 11th",
            "submessages": [],
            "timestamp": 1562944756,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/52aba2ebf5f98bbae1209cafb7fcae49?d=identicon&version=1",
            "client": "ZulipElectron",
            "content": "<p>2. store info on whether the node is a left child or a right child when you create the array, this way you also check that when traversing the array to compare mirror differences. But at this stage I don't think the algorithm is elegant anymore. I didn't bother to implement it.</p>",
            "content_type": "text/html",
            "display_recipient": "Post-Lunch Prep (PLP)",
            "flags": [
                "read",
                "historical"
            ],
            "id": 170730677,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 183179,
            "sender_email": "jburmac@gmail.com",
            "sender_full_name": "Jesus Burgos Macia (he) (S1'19)",
            "sender_id": 221857,
            "sender_realm_str": "recurse",
            "stream_id": 144212,
            "subject": "PLP Thursday, July 11th",
            "submessages": [],
            "timestamp": 1562944950,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/973e5363d617a705d4ec13541831691e8d846390?x=x&version=4",
            "client": "website",
            "content": "<p>I don't have the code, but <span class=\"user-mention\" data-user-id=\"228092\">@Michael Fekadu (he) (S2'19)</span>  and I's approach was to perform BFS so that each row was turned into its own array and check that array for symmetry</p>",
            "content_type": "text/html",
            "display_recipient": "Post-Lunch Prep (PLP)",
            "flags": [
                "read",
                "historical"
            ],
            "id": 170730977,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f6e0",
                    "emoji_name": "working_on_it",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "hujimoe@gmail.com",
                        "full_name": "Josh Erickson (he) (S1'19)",
                        "id": 221847
                    },
                    "user_id": 221847
                },
                {
                    "emoji_code": "1f6e0",
                    "emoji_name": "working_on_it",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "michael@fekadu.com",
                        "full_name": "Michael Fekadu (he) (S2'19)",
                        "id": 228092
                    },
                    "user_id": 228092
                }
            ],
            "recipient_id": 183179,
            "sender_email": "kathleen.macg@gmail.com",
            "sender_full_name": "Kathleen McGuire (she/they) (F2'19)",
            "sender_id": 228113,
            "sender_realm_str": "recurse",
            "stream_id": 144212,
            "subject": "PLP Thursday, July 11th",
            "submessages": [],
            "timestamp": 1562945154,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/69facd2622806b8c2f74c7ae4a26f83d60a2545c?x=x&version=2",
            "client": "website",
            "content": "<p>It seems like turning a graph into an array or a list of arrays is a common strategy and something to consider when being given a graph problem.</p>",
            "content_type": "text/html",
            "display_recipient": "Post-Lunch Prep (PLP)",
            "flags": [
                "read",
                "historical"
            ],
            "id": 170731705,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f939",
                    "emoji_name": "juggling",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "jburmac@gmail.com",
                        "full_name": "Jesus Burgos Macia (he) (S1'19)",
                        "id": 221857
                    },
                    "user_id": 221857
                }
            ],
            "recipient_id": 183179,
            "sender_email": "hujimoe@gmail.com",
            "sender_full_name": "Josh Erickson (he) (S1'19)",
            "sender_id": 221847,
            "sender_realm_str": "recurse",
            "stream_id": 144212,
            "subject": "PLP Thursday, July 11th",
            "submessages": [],
            "timestamp": 1562945696,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/52aba2ebf5f98bbae1209cafb7fcae49?d=identicon&version=1",
            "client": "ZulipElectron",
            "content": "<p>Hi! I've picked 4 problems for today, from easier to harder (according to my personal ranking after a quick read at them):</p>\n<p>A: <a href=\"https://gist.github.com/Jesus/8962c081a2654f1671276a7de5ba1789\" target=\"_blank\" title=\"https://gist.github.com/Jesus/8962c081a2654f1671276a7de5ba1789\">https://gist.github.com/Jesus/8962c081a2654f1671276a7de5ba1789</a><br>\nB: <a href=\"https://leetcode.com/problems/island-perimeter/\" target=\"_blank\" title=\"https://leetcode.com/problems/island-perimeter/\">https://leetcode.com/problems/island-perimeter/</a><br>\nC: <a href=\"https://leetcode.com/problems/shuffle-an-array/\" target=\"_blank\" title=\"https://leetcode.com/problems/shuffle-an-array/\">https://leetcode.com/problems/shuffle-an-array/</a><br>\nD: <a href=\"https://leetcode.com/problems/number-of-music-playlists/\" target=\"_blank\" title=\"https://leetcode.com/problems/number-of-music-playlists/\">https://leetcode.com/problems/number-of-music-playlists/</a></p>",
            "content_type": "text/html",
            "display_recipient": "Post-Lunch Prep (PLP)",
            "flags": [
                "read",
                "historical"
            ],
            "id": 171001160,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 183179,
            "sender_email": "jburmac@gmail.com",
            "sender_full_name": "Jesus Burgos Macia (he) (S1'19)",
            "sender_id": 221857,
            "sender_realm_str": "recurse",
            "stream_id": 144212,
            "subject": "PLP Tuesday, Jul 16",
            "submessages": [],
            "timestamp": 1563293291,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/258f110fa2993f8183644cb2286ccbd6?d=identicon&version=1",
            "client": "ZulipElectron",
            "content": "<p>Was that first one from your interview?</p>",
            "content_type": "text/html",
            "display_recipient": "Post-Lunch Prep (PLP)",
            "flags": [
                "read",
                "historical"
            ],
            "id": 171001871,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 183179,
            "sender_email": "james@jamesa.me",
            "sender_full_name": "James Anderson (he) (S1'19)",
            "sender_id": 221821,
            "sender_realm_str": "recurse",
            "stream_id": 144212,
            "subject": "PLP Tuesday, Jul 16",
            "submessages": [],
            "timestamp": 1563293731,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/52aba2ebf5f98bbae1209cafb7fcae49?d=identicon&version=1",
            "client": "ZulipElectron",
            "content": "<p>yes!</p>",
            "content_type": "text/html",
            "display_recipient": "Post-Lunch Prep (PLP)",
            "flags": [
                "read",
                "historical"
            ],
            "id": 171007147,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 183179,
            "sender_email": "jburmac@gmail.com",
            "sender_full_name": "Jesus Burgos Macia (he) (S1'19)",
            "sender_id": 221857,
            "sender_realm_str": "recurse",
            "stream_id": 144212,
            "subject": "PLP Tuesday, Jul 16",
            "submessages": [],
            "timestamp": 1563297473,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/258f110fa2993f8183644cb2286ccbd6?d=identicon&version=1",
            "client": "ZulipElectron",
            "content": "<p>PLP Meeting  up now in Hopper <span class=\"user-mention\" data-user-id=\"221810\">@Zach Krall (he) (S1'19)</span> <span class=\"user-mention\" data-user-id=\"226496\">@Amiel Monasterial (he) (S2'19)</span> <span class=\"user-mention\" data-user-id=\"228108\">@Maryum Styles (she) (S2'19)</span> <span class=\"user-mention\" data-user-id=\"222090\">@Bernie Snell (she) (S1'19)</span>  if you are still interested!</p>",
            "content_type": "text/html",
            "display_recipient": "Post-Lunch Prep (PLP)",
            "flags": [
                "read",
                "historical"
            ],
            "id": 171009604,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 183179,
            "sender_email": "james@jamesa.me",
            "sender_full_name": "James Anderson (he) (S1'19)",
            "sender_id": 221821,
            "sender_realm_str": "recurse",
            "stream_id": 144212,
            "subject": "PLP Tuesday, Jul 16",
            "submessages": [],
            "timestamp": 1563299300,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/258f110fa2993f8183644cb2286ccbd6?d=identicon&version=1",
            "client": "ZulipElectron",
            "content": "<p>Here's the leetcode equivalent of the first problem if you want to test your solution against some tests: <a href=\"https://leetcode.com/problems/find-pivot-index/\" target=\"_blank\" title=\"https://leetcode.com/problems/find-pivot-index/\">https://leetcode.com/problems/find-pivot-index/</a></p>",
            "content_type": "text/html",
            "display_recipient": "Post-Lunch Prep (PLP)",
            "flags": [
                "read",
                "historical"
            ],
            "id": 171016178,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "+1",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "jburmac@gmail.com",
                        "full_name": "Jesus Burgos Macia (he) (S1'19)",
                        "id": 221857
                    },
                    "user_id": 221857
                }
            ],
            "recipient_id": 183179,
            "sender_email": "james@jamesa.me",
            "sender_full_name": "James Anderson (he) (S1'19)",
            "sender_id": 221821,
            "sender_realm_str": "recurse",
            "stream_id": 144212,
            "subject": "PLP Tuesday, Jul 16",
            "submessages": [],
            "timestamp": 1563303274,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/2a99f1637580bd8edc986f54a2059b7366482692?x=x&version=5",
            "client": "website",
            "content": "<p>Hello! I've picked two problems for PLP this Thursday:</p>\n<p>1. Invert a binary tree. <a href=\"https://leetcode.com/problems/invert-binary-tree/\" target=\"_blank\" title=\"https://leetcode.com/problems/invert-binary-tree/\">https://leetcode.com/problems/invert-binary-tree/</a><br>\n2. Perfect Squares <a href=\"https://leetcode.com/problems/perfect-squares/\" target=\"_blank\" title=\"https://leetcode.com/problems/perfect-squares/\">https://leetcode.com/problems/perfect-squares/</a></p>",
            "content_type": "text/html",
            "display_recipient": "Post-Lunch Prep (PLP)",
            "flags": [
                "read",
                "historical"
            ],
            "id": 171040707,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "+1",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "jburmac@gmail.com",
                        "full_name": "Jesus Burgos Macia (he) (S1'19)",
                        "id": 221857
                    },
                    "user_id": 221857
                },
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "+1",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "hujimoe@gmail.com",
                        "full_name": "Josh Erickson (he) (S1'19)",
                        "id": 221847
                    },
                    "user_id": 221847
                }
            ],
            "recipient_id": 183179,
            "sender_email": "chesley.brian@gmail.com",
            "sender_full_name": "Brian Chesley (he) (S1'19)",
            "sender_id": 222063,
            "sender_realm_str": "recurse",
            "stream_id": 144212,
            "subject": "PLP Thursday July 18th",
            "submessages": [],
            "timestamp": 1563325601,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/69facd2622806b8c2f74c7ae4a26f83d60a2545c?x=x&version=2",
            "client": "website",
            "content": "<p>Here is my refactored code for the Breadth First Search solution to the Perfect Squares problem. I'm happy to walk folks through it if interested. </p>\n<p>C++</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">class</span> <span class=\"nc\">Solution</span> <span class=\"p\">{</span>\n<span class=\"k\">public</span><span class=\"o\">:</span>\n    <span class=\"c1\">// This function returns the count of perfect squares that add to n.</span>\n    <span class=\"c1\">// Use a queue to perform BFS and use a vector&lt;bool&gt; to check for repeated digits.</span>\n    <span class=\"kt\">int</span> <span class=\"n\">numSquares</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">n</span><span class=\"p\">)</span>\n    <span class=\"p\">{</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">n</span> <span class=\"o\">&lt;=</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n        <span class=\"p\">{</span>\n            <span class=\"k\">return</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n        <span class=\"p\">}</span>\n\n        <span class=\"c1\">// All perfect square numbers who are smaller than or equal to n.</span>\n        <span class=\"n\">vector</span><span class=\"o\">&lt;</span><span class=\"kt\">int</span><span class=\"o\">&gt;</span> <span class=\"n\">perfectSquares</span><span class=\"p\">;</span>\n\n        <span class=\"c1\">// True if we have seen value. This allows us to skip duplicate entries in the queue.</span>\n        <span class=\"n\">vector</span><span class=\"o\">&lt;</span><span class=\"kt\">bool</span><span class=\"o\">&gt;</span> <span class=\"n\">valueSeen</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"p\">);</span>\n\n        <span class=\"c1\">// Get all the perfect square numbers which are smaller than or equal to n.</span>\n        <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span> <span class=\"n\">i</span><span class=\"o\">*</span><span class=\"n\">i</span> <span class=\"o\">&lt;=</span> <span class=\"n\">n</span><span class=\"p\">;</span> <span class=\"n\">i</span><span class=\"o\">++</span><span class=\"p\">)</span>\n        <span class=\"p\">{</span>\n            <span class=\"n\">perfectSquares</span><span class=\"p\">.</span><span class=\"n\">push_back</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"o\">*</span><span class=\"n\">i</span><span class=\"p\">);</span>\n            <span class=\"n\">valueSeen</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"o\">*</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"nb\">true</span><span class=\"p\">;</span>\n        <span class=\"p\">}</span>\n\n        <span class=\"c1\">// If n is a perfect square number, return 1 immediately.</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">perfectSquares</span><span class=\"p\">.</span><span class=\"n\">back</span><span class=\"p\">()</span> <span class=\"o\">==</span> <span class=\"n\">n</span><span class=\"p\">)</span>\n        <span class=\"p\">{</span>\n            <span class=\"k\">return</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n        <span class=\"p\">}</span>\n\n        <span class=\"c1\">// Consider a graph which consists of number 0, 1,...,n as</span>\n        <span class=\"c1\">// its nodes. Node j is connected to node i via an edge if</span>\n        <span class=\"c1\">// and only if either j = i + (a perfect square number) or</span>\n        <span class=\"c1\">// i = j + (a perfect square number). Starting from node 0,</span>\n        <span class=\"c1\">// do the breadth-first search. If we reach node n at step</span>\n        <span class=\"c1\">// m, then the least number of perfect square numbers which</span>\n        <span class=\"c1\">// sum to n is m.</span>\n        <span class=\"n\">queue</span><span class=\"o\">&lt;</span><span class=\"kt\">int</span><span class=\"o\">&gt;</span> <span class=\"n\">searchQ</span><span class=\"p\">;</span>\n        <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"k\">auto</span><span class=\"o\">&amp;</span> <span class=\"nl\">i</span> <span class=\"p\">:</span> <span class=\"n\">perfectSquares</span><span class=\"p\">)</span>\n        <span class=\"p\">{</span>\n            <span class=\"n\">searchQ</span><span class=\"p\">.</span><span class=\"n\">push</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">);</span>\n        <span class=\"p\">}</span>\n\n        <span class=\"c1\">// Search at level one complete.</span>\n        <span class=\"kt\">int</span> <span class=\"n\">currCnt</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n        <span class=\"k\">while</span> <span class=\"p\">(</span><span class=\"o\">!</span><span class=\"n\">searchQ</span><span class=\"p\">.</span><span class=\"n\">empty</span><span class=\"p\">())</span>\n        <span class=\"p\">{</span>\n            <span class=\"n\">currCnt</span><span class=\"o\">++</span><span class=\"p\">;</span>\n\n            <span class=\"c1\">// Save current queue size, as queue size will change in loop.</span>\n            <span class=\"kt\">int</span> <span class=\"n\">currQSize</span> <span class=\"o\">=</span> <span class=\"n\">searchQ</span><span class=\"p\">.</span><span class=\"n\">size</span><span class=\"p\">();</span>\n            <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">currQSize</span><span class=\"p\">;</span> <span class=\"o\">++</span><span class=\"n\">i</span><span class=\"p\">)</span>\n            <span class=\"p\">{</span>\n                <span class=\"c1\">// Save front for 30% speed optimization.</span>\n                <span class=\"kt\">int</span> <span class=\"n\">front</span> <span class=\"o\">=</span> <span class=\"n\">searchQ</span><span class=\"p\">.</span><span class=\"n\">front</span><span class=\"p\">();</span>\n\n                <span class=\"c1\">// Check the neighbors of node front which are the sum</span>\n                <span class=\"c1\">// of front and a perfect square number.</span>\n                <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"k\">auto</span><span class=\"o\">&amp;</span> <span class=\"nl\">square</span> <span class=\"p\">:</span> <span class=\"n\">perfectSquares</span><span class=\"p\">)</span>\n                <span class=\"p\">{</span>\n                    <span class=\"kt\">int</span> <span class=\"n\">currValue</span> <span class=\"o\">=</span> <span class=\"n\">searchQ</span><span class=\"p\">.</span><span class=\"n\">front</span><span class=\"p\">()</span> <span class=\"o\">+</span> <span class=\"n\">square</span><span class=\"p\">;</span>\n                    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">currValue</span> <span class=\"o\">==</span> <span class=\"n\">n</span><span class=\"p\">)</span>\n                    <span class=\"p\">{</span>\n                        <span class=\"c1\">// We have reached node n.</span>\n                        <span class=\"k\">return</span> <span class=\"n\">currCnt</span><span class=\"p\">;</span>\n                    <span class=\"p\">}</span>\n                    <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"p\">((</span><span class=\"n\">currValue</span> <span class=\"o\">&lt;</span> <span class=\"n\">n</span><span class=\"p\">)</span> <span class=\"o\">&amp;&amp;</span> <span class=\"o\">!</span><span class=\"n\">valueSeen</span><span class=\"p\">[</span><span class=\"n\">currValue</span><span class=\"p\">])</span>\n                    <span class=\"p\">{</span>\n                        <span class=\"c1\">// If valueSeen, skip node.</span>\n                        <span class=\"n\">valueSeen</span><span class=\"p\">[</span><span class=\"n\">currValue</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"nb\">true</span><span class=\"p\">;</span>\n                        <span class=\"n\">searchQ</span><span class=\"p\">.</span><span class=\"n\">push</span><span class=\"p\">(</span><span class=\"n\">currValue</span><span class=\"p\">);</span>\n                    <span class=\"p\">}</span>\n                    <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">currValue</span> <span class=\"o\">&gt;</span> <span class=\"n\">n</span><span class=\"p\">)</span>\n                    <span class=\"p\">{</span>\n                        <span class=\"c1\">// Don&#39;t consider nodes greater than n.</span>\n                        <span class=\"k\">break</span><span class=\"p\">;</span>\n                    <span class=\"p\">}</span>\n                <span class=\"p\">}</span>\n\n                <span class=\"n\">searchQ</span><span class=\"p\">.</span><span class=\"n\">pop</span><span class=\"p\">();</span>\n            <span class=\"p\">}</span>\n        <span class=\"p\">}</span>\n\n        <span class=\"k\">return</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">};</span>\n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "Post-Lunch Prep (PLP)",
            "flags": [
                "read",
                "historical"
            ],
            "id": 171302841,
            "is_me_message": false,
            "last_edit_timestamp": 1563584023,
            "reactions": [],
            "recipient_id": 183179,
            "sender_email": "hujimoe@gmail.com",
            "sender_full_name": "Josh Erickson (he) (S1'19)",
            "sender_id": 221847,
            "sender_realm_str": "recurse",
            "stream_id": 144212,
            "subject": "PLP Thursday July 18th",
            "submessages": [],
            "timestamp": 1563581988,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/258f110fa2993f8183644cb2286ccbd6?d=identicon&version=1",
            "client": "ZulipElectron",
            "content": "<p>Link doesn't seem to be working for me but yeah would love to see this.</p>",
            "content_type": "text/html",
            "display_recipient": "Post-Lunch Prep (PLP)",
            "flags": [
                "read",
                "historical"
            ],
            "id": 171303088,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 183179,
            "sender_email": "james@jamesa.me",
            "sender_full_name": "James Anderson (he) (S1'19)",
            "sender_id": 221821,
            "sender_realm_str": "recurse",
            "stream_id": 144212,
            "subject": "PLP Thursday July 18th",
            "submessages": [],
            "timestamp": 1563582415,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/258f110fa2993f8183644cb2286ccbd6?d=identicon&version=1",
            "client": "ZulipElectron",
            "content": "<p>I generally don't understand BFS besides working with binary trees so if anyone can teach me that I would appreciate it too</p>",
            "content_type": "text/html",
            "display_recipient": "Post-Lunch Prep (PLP)",
            "flags": [
                "read",
                "historical"
            ],
            "id": 171303099,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 183179,
            "sender_email": "james@jamesa.me",
            "sender_full_name": "James Anderson (he) (S1'19)",
            "sender_id": 221821,
            "sender_realm_str": "recurse",
            "stream_id": 144212,
            "subject": "PLP Thursday July 18th",
            "submessages": [],
            "timestamp": 1563582446,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/69facd2622806b8c2f74c7ae4a26f83d60a2545c?x=x&version=2",
            "client": "website",
            "content": "<p>Hmmm looks like the link is tied to my account. I have edited my message to include the code.</p>",
            "content_type": "text/html",
            "display_recipient": "Post-Lunch Prep (PLP)",
            "flags": [
                "read",
                "historical"
            ],
            "id": 171304047,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 183179,
            "sender_email": "hujimoe@gmail.com",
            "sender_full_name": "Josh Erickson (he) (S1'19)",
            "sender_id": 221847,
            "sender_realm_str": "recurse",
            "stream_id": 144212,
            "subject": "PLP Thursday July 18th",
            "submessages": [],
            "timestamp": 1563584048,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/69facd2622806b8c2f74c7ae4a26f83d60a2545c?x=x&version=2",
            "client": "website",
            "content": "<p>And here is the static dynamic programming solution.</p>\n<p>C++</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">class</span> <span class=\"nc\">Solution</span> <span class=\"p\">{</span>\n<span class=\"k\">public</span><span class=\"o\">:</span>\n    <span class=\"kt\">int</span> <span class=\"n\">numSquares</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">n</span><span class=\"p\">)</span>\n    <span class=\"p\">{</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">n</span> <span class=\"o\">&lt;=</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n        <span class=\"p\">{</span>\n            <span class=\"k\">return</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n        <span class=\"p\">}</span>\n\n        <span class=\"c1\">// squaresCnt[i] = the least number of perfect square numbers</span>\n        <span class=\"c1\">// which sum to i. Since squaresCnt is a static vector, if</span>\n        <span class=\"c1\">// squaresCnt.size() &gt; n, we have already calculated the result</span>\n        <span class=\"c1\">// during previous function calls and we can just return the result now.</span>\n        <span class=\"k\">static</span> <span class=\"n\">vector</span><span class=\"o\">&lt;</span><span class=\"kt\">int</span><span class=\"o\">&gt;</span> <span class=\"n\">squaresCnt</span><span class=\"p\">({</span><span class=\"mi\">0</span><span class=\"p\">});</span>\n\n        <span class=\"c1\">// While squaresCnt.size() &lt;= n, we need to incrementally</span>\n        <span class=\"c1\">// calculate the next result until we get the result for n.</span>\n        <span class=\"kt\">int</span> <span class=\"n\">current_n</span> <span class=\"o\">=</span> <span class=\"n\">squaresCnt</span><span class=\"p\">.</span><span class=\"n\">size</span><span class=\"p\">();</span>\n        <span class=\"k\">while</span> <span class=\"p\">(</span><span class=\"n\">current_n</span> <span class=\"o\">&lt;=</span> <span class=\"n\">n</span><span class=\"p\">)</span>\n        <span class=\"p\">{</span>\n            <span class=\"kt\">int</span> <span class=\"n\">currSquaresCnt</span> <span class=\"o\">=</span> <span class=\"n\">INT_MAX</span><span class=\"p\">;</span>\n            <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span> <span class=\"n\">i</span><span class=\"o\">*</span><span class=\"n\">i</span> <span class=\"o\">&lt;=</span> <span class=\"n\">current_n</span><span class=\"p\">;</span> <span class=\"n\">i</span><span class=\"o\">++</span><span class=\"p\">)</span>\n            <span class=\"p\">{</span>\n                <span class=\"c1\">// Check each square minus currentN.</span>\n                <span class=\"c1\">// If result is less than any other, save the count (+1).</span>\n                <span class=\"n\">currSquaresCnt</span> <span class=\"o\">=</span> <span class=\"n\">min</span><span class=\"p\">(</span><span class=\"n\">currSquaresCnt</span><span class=\"p\">,</span> <span class=\"n\">squaresCnt</span><span class=\"p\">[</span><span class=\"n\">current_n</span> <span class=\"o\">-</span> <span class=\"n\">i</span><span class=\"o\">*</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">);</span>\n            <span class=\"p\">}</span>\n\n            <span class=\"n\">squaresCnt</span><span class=\"p\">.</span><span class=\"n\">push_back</span><span class=\"p\">(</span><span class=\"n\">currSquaresCnt</span><span class=\"p\">);</span>\n            <span class=\"n\">current_n</span><span class=\"o\">++</span><span class=\"p\">;</span>\n        <span class=\"p\">}</span>\n\n        <span class=\"k\">return</span> <span class=\"n\">squaresCnt</span><span class=\"p\">[</span><span class=\"n\">n</span><span class=\"p\">];</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">};</span>\n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "Post-Lunch Prep (PLP)",
            "flags": [
                "read",
                "historical"
            ],
            "id": 171304069,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 183179,
            "sender_email": "hujimoe@gmail.com",
            "sender_full_name": "Josh Erickson (he) (S1'19)",
            "sender_id": 221847,
            "sender_realm_str": "recurse",
            "stream_id": 144212,
            "subject": "PLP Thursday July 18th",
            "submessages": [],
            "timestamp": 1563584128,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/69facd2622806b8c2f74c7ae4a26f83d60a2545c?x=x&version=2",
            "client": "website",
            "content": "<p>Hi All! I am planning on being in Sammet at 1:30 today to go over the Perfect Squares question from last week. Our regular programming is still scheduled for 1:45. If you are new to this stream please look at the \"PLP Tuesday, July 9\" topic for general info. All are welcome and encouraged to join us today.</p>\n<p>The first <em>set</em> of problems follow a general them, see if you can figure it out ;)</p>\n<p>One of the harder problems this week is similar to the Perfect Squares problem, and can be used to reinforce/practice those concepts. The other harder problem is another island question, similar to the one from a couple of weeks ago, but with a twist. </p>\n<p>Here are today's problems:<br>\nEasier:<br>\n<a href=\"https://leetcode.com/problems/jewels-and-stones/\" target=\"_blank\" title=\"https://leetcode.com/problems/jewels-and-stones/\">https://leetcode.com/problems/jewels-and-stones/</a><br>\n<a href=\"https://leetcode.com/problems/unique-email-addresses/\" target=\"_blank\" title=\"https://leetcode.com/problems/unique-email-addresses/\">https://leetcode.com/problems/unique-email-addresses/</a><br>\n<a href=\"https://leetcode.com/problems/most-common-word/\" target=\"_blank\" title=\"https://leetcode.com/problems/most-common-word/\">https://leetcode.com/problems/most-common-word/</a></p>\n<p>Harder:<br>\n<a href=\"https://leetcode.com/problems/coin-change/\" target=\"_blank\" title=\"https://leetcode.com/problems/coin-change/\">https://leetcode.com/problems/coin-change/</a> <br>\n<a href=\"https://leetcode.com/problems/number-of-islands/\" target=\"_blank\" title=\"https://leetcode.com/problems/number-of-islands/\">https://leetcode.com/problems/number-of-islands/</a></p>",
            "content_type": "text/html",
            "display_recipient": "Post-Lunch Prep (PLP)",
            "flags": [
                "read",
                "historical"
            ],
            "id": 171530455,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 183179,
            "sender_email": "hujimoe@gmail.com",
            "sender_full_name": "Josh Erickson (he) (S1'19)",
            "sender_id": 221847,
            "sender_realm_str": "recurse",
            "stream_id": 144212,
            "subject": "PLP Tuesday, July 23",
            "submessages": [],
            "timestamp": 1563896493,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/69facd2622806b8c2f74c7ae4a26f83d60a2545c?x=x&version=2",
            "client": "website",
            "content": "<p>Here is another harder problem, if you feel like doing something a littler different. </p>\n<p><a href=\"https://leetcode.com/problems/lru-cache/\" target=\"_blank\" title=\"https://leetcode.com/problems/lru-cache/\">https://leetcode.com/problems/lru-cache/</a></p>",
            "content_type": "text/html",
            "display_recipient": "Post-Lunch Prep (PLP)",
            "flags": [
                "read",
                "historical"
            ],
            "id": 171531122,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 183179,
            "sender_email": "hujimoe@gmail.com",
            "sender_full_name": "Josh Erickson (he) (S1'19)",
            "sender_id": 221847,
            "sender_realm_str": "recurse",
            "stream_id": 144212,
            "subject": "PLP Tuesday, July 23",
            "submessages": [],
            "timestamp": 1563896851,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/aca02f8101aec631ddba6bdb6ca33e79b8ea223f?x=x&version=2",
            "client": "ZulipElectron",
            "content": "<p>I think I am behind on certain vocabulary words that tend to be used to describe these problems. Does anyone have suggestions on reference material that goes over things like \"Big O Notation\"</p>",
            "content_type": "text/html",
            "display_recipient": "Post-Lunch Prep (PLP)",
            "flags": [
                "read",
                "historical"
            ],
            "id": 171550627,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 183179,
            "sender_email": "zach@zachkrall.com",
            "sender_full_name": "Zach Krall (he) (S1'19)",
            "sender_id": 221810,
            "sender_realm_str": "recurse",
            "stream_id": 144212,
            "subject": "PLP Tuesday, July 23",
            "submessages": [],
            "timestamp": 1563910463,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/68c07aa24ae39681409794daff1a921b08e5e324?x=x&version=2",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-id=\"221810\">@Zach Krall (he) (S1'19)</span> I believe there's an explanation in Cracking the Coding Interview that's pretty accessible.</p>",
            "content_type": "text/html",
            "display_recipient": "Post-Lunch Prep (PLP)",
            "flags": [
                "read",
                "historical"
            ],
            "id": 171552667,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "+1",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "hujimoe@gmail.com",
                        "full_name": "Josh Erickson (he) (S1'19)",
                        "id": 221847
                    },
                    "user_id": 221847
                },
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "+1",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "zach@zachkrall.com",
                        "full_name": "Zach Krall (he) (S1'19)",
                        "id": 221810
                    },
                    "user_id": 221810
                }
            ],
            "recipient_id": 183179,
            "sender_email": "james@recurse.com",
            "sender_full_name": "James J. Porter (he) (S'13)",
            "sender_id": 2113,
            "sender_realm_str": "recurse",
            "stream_id": 144212,
            "subject": "PLP Tuesday, July 23",
            "submessages": [],
            "timestamp": 1563911998,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/aca02f8101aec631ddba6bdb6ca33e79b8ea223f?x=x&version=2",
            "client": "ZulipElectron",
            "content": "<p>Thank You!</p>",
            "content_type": "text/html",
            "display_recipient": "Post-Lunch Prep (PLP)",
            "flags": [
                "read",
                "historical"
            ],
            "id": 171552750,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 183179,
            "sender_email": "zach@zachkrall.com",
            "sender_full_name": "Zach Krall (he) (S1'19)",
            "sender_id": 221810,
            "sender_realm_str": "recurse",
            "stream_id": 144212,
            "subject": "PLP Tuesday, July 23",
            "submessages": [],
            "timestamp": 1563912027,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/69facd2622806b8c2f74c7ae4a26f83d60a2545c?x=x&version=2",
            "client": "website",
            "content": "<p>Hi All, I will not be able to make PLP tomorrow due to a phone call with a potential employer. Can we get a volunteer to pick some questions?</p>",
            "content_type": "text/html",
            "display_recipient": "Post-Lunch Prep (PLP)",
            "flags": [
                "read",
                "historical"
            ],
            "id": 171642995,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 183179,
            "sender_email": "hujimoe@gmail.com",
            "sender_full_name": "Josh Erickson (he) (S1'19)",
            "sender_id": 221847,
            "sender_realm_str": "recurse",
            "stream_id": 144212,
            "subject": "PLP Thursday, July 25",
            "submessages": [],
            "timestamp": 1564002083,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/782b79b72389dc4aafa515fb272f78d0?d=identicon&version=1",
            "client": "website",
            "content": "<p>I'll pick questions for today!</p>",
            "content_type": "text/html",
            "display_recipient": "Post-Lunch Prep (PLP)",
            "flags": [
                "read",
                "historical"
            ],
            "id": 171699851,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "+1",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "james@jamesa.me",
                        "full_name": "James Anderson (he) (S1'19)",
                        "id": 221821
                    },
                    "user_id": 221821
                },
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "+1",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "chesley.brian@gmail.com",
                        "full_name": "Brian Chesley (he) (S1'19)",
                        "id": 222063
                    },
                    "user_id": 222063
                }
            ],
            "recipient_id": 183179,
            "sender_email": "john.v.tan@gmail.com",
            "sender_full_name": "John Vincent Tan (he) (S2'19)",
            "sender_id": 228101,
            "sender_realm_str": "recurse",
            "stream_id": 144212,
            "subject": "PLP Thursday, July 25",
            "submessages": [],
            "timestamp": 1564067434,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/782b79b72389dc4aafa515fb272f78d0?d=identicon&version=1",
            "client": "website",
            "content": "<p>easier:<br>\n<a href=\"https://leetcode.com/problems/best-time-to-buy-and-sell-stock/\" target=\"_blank\" title=\"https://leetcode.com/problems/best-time-to-buy-and-sell-stock/\">https://leetcode.com/problems/best-time-to-buy-and-sell-stock/</a><br>\n<a href=\"https://leetcode.com/problems/lemonade-change/\" target=\"_blank\" title=\"https://leetcode.com/problems/lemonade-change/\">https://leetcode.com/problems/lemonade-change/</a></p>\n<p>harder:<br>\n<a href=\"https://leetcode.com/problems/unique-binary-search-trees/\" target=\"_blank\" title=\"https://leetcode.com/problems/unique-binary-search-trees/\">https://leetcode.com/problems/unique-binary-search-trees/</a><br>\n<a href=\"https://leetcode.com/problems/longest-palindromic-substring/\" target=\"_blank\" title=\"https://leetcode.com/problems/longest-palindromic-substring/\">https://leetcode.com/problems/longest-palindromic-substring/</a></p>",
            "content_type": "text/html",
            "display_recipient": "Post-Lunch Prep (PLP)",
            "flags": [
                "read",
                "historical"
            ],
            "id": 171700854,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 183179,
            "sender_email": "john.v.tan@gmail.com",
            "sender_full_name": "John Vincent Tan (he) (S2'19)",
            "sender_id": 228101,
            "sender_realm_str": "recurse",
            "stream_id": 144212,
            "subject": "PLP Thursday, July 25",
            "submessages": [],
            "timestamp": 1564068191,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/69facd2622806b8c2f74c7ae4a26f83d60a2545c?x=x&version=2",
            "client": "website",
            "content": "<p>Let's do some bitwise operations!</p>\n<p>Easier:<br>\n<a href=\"https://leetcode.com/problems/hamming-distance/\" target=\"_blank\" title=\"https://leetcode.com/problems/hamming-distance/\">https://leetcode.com/problems/hamming-distance/</a><br>\n<a href=\"https://leetcode.com/problems/number-of-1-bits/\" target=\"_blank\" title=\"https://leetcode.com/problems/number-of-1-bits/\">https://leetcode.com/problems/number-of-1-bits/</a></p>\n<p>Harder:<br>\n<a href=\"https://leetcode.com/problems/sum-of-two-integers/\" target=\"_blank\" title=\"https://leetcode.com/problems/sum-of-two-integers/\">https://leetcode.com/problems/sum-of-two-integers/</a><br>\n<a href=\"https://leetcode.com/problems/single-number/\" target=\"_blank\" title=\"https://leetcode.com/problems/single-number/\">https://leetcode.com/problems/single-number/</a> (do in linear time and constant space)</p>",
            "content_type": "text/html",
            "display_recipient": "Post-Lunch Prep (PLP)",
            "flags": [
                "read",
                "historical"
            ],
            "id": 172057033,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 183179,
            "sender_email": "hujimoe@gmail.com",
            "sender_full_name": "Josh Erickson (he) (S1'19)",
            "sender_id": 221847,
            "sender_realm_str": "recurse",
            "stream_id": 144212,
            "subject": "PLP Tuesday, July 30",
            "submessages": [],
            "timestamp": 1564506855,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/69facd2622806b8c2f74c7ae4a26f83d60a2545c?x=x&version=2",
            "client": "ZulipMobile",
            "content": "<p>I'm going to be a few minutes late.</p>",
            "content_type": "text/html",
            "display_recipient": "Post-Lunch Prep (PLP)",
            "flags": [
                "read",
                "historical"
            ],
            "id": 172059991,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 183179,
            "sender_email": "hujimoe@gmail.com",
            "sender_full_name": "Josh Erickson (he) (S1'19)",
            "sender_id": 221847,
            "sender_realm_str": "recurse",
            "stream_id": 144212,
            "subject": "PLP Tuesday, July 30",
            "submessages": [],
            "timestamp": 1564508818,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/69facd2622806b8c2f74c7ae4a26f83d60a2545c?x=x&version=2",
            "client": "ZulipMobile",
            "content": "<p>I'm going to be a few minutes late.</p>",
            "content_type": "text/html",
            "display_recipient": "Post-Lunch Prep (PLP)",
            "flags": [
                "read",
                "historical"
            ],
            "id": 172231930,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 183179,
            "sender_email": "hujimoe@gmail.com",
            "sender_full_name": "Josh Erickson (he) (S1'19)",
            "sender_id": 221847,
            "sender_realm_str": "recurse",
            "stream_id": 144212,
            "subject": "PLP Tuesday, July 30",
            "submessages": [],
            "timestamp": 1564674066,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/dfbad1a849d193205a6dd2b71754c440?d=identicon&version=1",
            "client": "ZulipElectron",
            "content": "<p>Anyone have questions?</p>",
            "content_type": "text/html",
            "display_recipient": "Post-Lunch Prep (PLP)",
            "flags": [
                "read",
                "historical"
            ],
            "id": 172611585,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 183179,
            "sender_email": "jhinsch799@gmail.com",
            "sender_full_name": "Julian Gobran Hinsch (S1'19)",
            "sender_id": 221833,
            "sender_realm_str": "recurse",
            "stream_id": 144212,
            "subject": "PLP Tuesday, August 6",
            "submessages": [],
            "timestamp": 1565113533,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/dfbad1a849d193205a6dd2b71754c440?d=identicon&version=1",
            "client": "ZulipElectron",
            "content": "<p>Is this even happening?</p>",
            "content_type": "text/html",
            "display_recipient": "Post-Lunch Prep (PLP)",
            "flags": [
                "read",
                "historical"
            ],
            "id": 172611691,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 183179,
            "sender_email": "jhinsch799@gmail.com",
            "sender_full_name": "Julian Gobran Hinsch (S1'19)",
            "sender_id": 221833,
            "sender_realm_str": "recurse",
            "stream_id": 144212,
            "subject": "PLP Tuesday, August 6",
            "submessages": [],
            "timestamp": 1565113579,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/2a99f1637580bd8edc986f54a2059b7366482692?x=x&version=5",
            "client": "website",
            "content": "<p>brt</p>",
            "content_type": "text/html",
            "display_recipient": "Post-Lunch Prep (PLP)",
            "flags": [
                "read",
                "historical"
            ],
            "id": 172611880,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 183179,
            "sender_email": "chesley.brian@gmail.com",
            "sender_full_name": "Brian Chesley (he) (S1'19)",
            "sender_id": 222063,
            "sender_realm_str": "recurse",
            "stream_id": 144212,
            "subject": "PLP Tuesday, August 6",
            "submessages": [],
            "timestamp": 1565113683,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/69facd2622806b8c2f74c7ae4a26f83d60a2545c?x=x&version=2",
            "client": "website",
            "content": "<p>Hi All! I hope everyone is feeling ready for their coding interviews! It's never graduate week, and that means I won't be around to help organize PLP's in the future. If anyone wants to take it on I think it would be a nice tradition to continue. It's up to you what it looks like moving forward, but I imagine a lot of people will find it useful over the next 6 weeks.</p>",
            "content_type": "text/html",
            "display_recipient": "Post-Lunch Prep (PLP)",
            "flags": [
                "read",
                "historical"
            ],
            "id": 172626350,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 183179,
            "sender_email": "hujimoe@gmail.com",
            "sender_full_name": "Josh Erickson (he) (S1'19)",
            "sender_id": 221847,
            "sender_realm_str": "recurse",
            "stream_id": 144212,
            "subject": "Never Graduate and Beyond!",
            "submessages": [],
            "timestamp": 1565123953,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/f47a0818d457159648b86840bfa5b6c0?d=identicon&version=1",
            "client": "website",
            "content": "<p>Is PLP still happening today?</p>",
            "content_type": "text/html",
            "display_recipient": "Post-Lunch Prep (PLP)",
            "flags": [
                "read",
                "historical"
            ],
            "id": 172787981,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 183179,
            "sender_email": "elana.l1@gmail.com",
            "sender_full_name": "Elana Liskovich (SP2'19)",
            "sender_id": 215648,
            "sender_realm_str": "recurse",
            "stream_id": 144212,
            "subject": "Never Graduate and Beyond!",
            "submessages": [],
            "timestamp": 1565287282,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/2a99f1637580bd8edc986f54a2059b7366482692?x=x&version=5",
            "client": "website",
            "content": "<p>I'm in!</p>",
            "content_type": "text/html",
            "display_recipient": "Post-Lunch Prep (PLP)",
            "flags": [
                "read",
                "historical"
            ],
            "id": 172788114,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 183179,
            "sender_email": "chesley.brian@gmail.com",
            "sender_full_name": "Brian Chesley (he) (S1'19)",
            "sender_id": 222063,
            "sender_realm_str": "recurse",
            "stream_id": 144212,
            "subject": "Never Graduate and Beyond!",
            "submessages": [],
            "timestamp": 1565287354,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/782b79b72389dc4aafa515fb272f78d0?d=identicon&version=1",
            "client": "website",
            "content": "<p>easier:<br>\n<a href=\"https://leetcode.com/problems/rotting-oranges/\" target=\"_blank\" title=\"https://leetcode.com/problems/rotting-oranges/\">https://leetcode.com/problems/rotting-oranges/</a><br>\n<a href=\"https://leetcode.com/problems/symmetric-tree/\" target=\"_blank\" title=\"https://leetcode.com/problems/symmetric-tree/\">https://leetcode.com/problems/symmetric-tree/</a></p>\n<p>harder:<br>\n<a href=\"https://leetcode.com/problems/course-schedule/\" target=\"_blank\" title=\"https://leetcode.com/problems/course-schedule/\">https://leetcode.com/problems/course-schedule/</a><br>\n<a href=\"https://leetcode.com/problems/flatten-binary-tree-to-linked-list/\" target=\"_blank\" title=\"https://leetcode.com/problems/flatten-binary-tree-to-linked-list/\">https://leetcode.com/problems/flatten-binary-tree-to-linked-list/</a></p>",
            "content_type": "text/html",
            "display_recipient": "Post-Lunch Prep (PLP)",
            "flags": [
                "read",
                "historical"
            ],
            "id": 173564234,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 183179,
            "sender_email": "john.v.tan@gmail.com",
            "sender_full_name": "John Vincent Tan (he) (S2'19)",
            "sender_id": 228101,
            "sender_realm_str": "recurse",
            "stream_id": 144212,
            "subject": "PLP Monday Aug 19",
            "submessages": [],
            "timestamp": 1566237202,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/82feeacd5dd8ed59a4aaa1137553c5e4ac3f5242?x=x&version=2",
            "client": "ZulipElectron",
            "content": "<p><a href=\"https://www.hackerrank.com/challenges/richie-rich/problem\" target=\"_blank\" title=\"https://www.hackerrank.com/challenges/richie-rich/problem\">https://www.hackerrank.com/challenges/richie-rich/problem</a></p>",
            "content_type": "text/html",
            "display_recipient": "Post-Lunch Prep (PLP)",
            "flags": [
                "read",
                "historical"
            ],
            "id": 173564869,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 183179,
            "sender_email": "nolivo1@gmail.com",
            "sender_full_name": "Natalie K Olivo (she) (F1'19)",
            "sender_id": 233941,
            "sender_realm_str": "recurse",
            "stream_id": 144212,
            "subject": "PLP Monday Aug 19",
            "submessages": [],
            "timestamp": 1566237698,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/189ab48671e3d9cd22b1a02487892411da469a9a?x=x&version=2",
            "client": "ZulipElectron",
            "content": "<p>PYTHON3 SOLUTION FOR FLATTENING</p>\n<div class=\"codehilite\"><pre><span></span># Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\n\ndef isLeaf(n: TreeNode) -&gt; bool:\n    return n.left is None and n.right is None\n\ndef rightmostChild(n: TreeNode) -&gt; TreeNode:\n    t = n\n    while t.right is not None:\n        t = t.right\n    return t\n\nclass Solution:\n    def flatten(self, root: TreeNode) -&gt; None:\n        &quot;&quot;&quot;\n        Do not return anything, modify root in-place instead.\n        &quot;&quot;&quot;\n        if root is None: return None\n        iterNode = root\n        while not isLeaf(iterNode):\n            if iterNode.right is None:\n                iterNode.right = iterNode.left\n            elif iterNode.left is not None:\n                rightmostChild(iterNode.left).right = iterNode.right\n                iterNode.right = iterNode.left\n            iterNode.left = None\n            iterNode = iterNode.right\n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "Post-Lunch Prep (PLP)",
            "flags": [
                "read",
                "historical"
            ],
            "id": 173570663,
            "is_me_message": false,
            "last_edit_timestamp": 1566242182,
            "reactions": [
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "+1",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "nolivo1@gmail.com",
                        "full_name": "Natalie K Olivo (she) (F1'19)",
                        "id": 233941
                    },
                    "user_id": 233941
                },
                {
                    "emoji_code": "1f389",
                    "emoji_name": "tada",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "john.v.tan@gmail.com",
                        "full_name": "John Vincent Tan (he) (S2'19)",
                        "id": 228101
                    },
                    "user_id": 228101
                }
            ],
            "recipient_id": 183179,
            "sender_email": "doron.rasis@nyu.edu",
            "sender_full_name": "Doron Rasis (he) (F1'19)",
            "sender_id": 234876,
            "sender_realm_str": "recurse",
            "stream_id": 144212,
            "subject": "PLP Monday Aug 19",
            "submessages": [],
            "timestamp": 1566242125,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/782b79b72389dc4aafa515fb272f78d0?d=identicon&version=1",
            "client": "website",
            "content": "<p>today's problems:</p>",
            "content_type": "text/html",
            "display_recipient": "Post-Lunch Prep (PLP)",
            "flags": [
                "read",
                "historical"
            ],
            "id": 173894271,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 183179,
            "sender_email": "john.v.tan@gmail.com",
            "sender_full_name": "John Vincent Tan (he) (S2'19)",
            "sender_id": 228101,
            "sender_realm_str": "recurse",
            "stream_id": 144212,
            "subject": "PLP Thursday Aug 22",
            "submessages": [],
            "timestamp": 1566488844,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/782b79b72389dc4aafa515fb272f78d0?d=identicon&version=1",
            "client": "website",
            "content": "<p>easier:<br>\n<a href=\"https://leetcode.com/problems/backspace-string-compare/\" target=\"_blank\" title=\"https://leetcode.com/problems/backspace-string-compare/\">https://leetcode.com/problems/backspace-string-compare/</a><br>\n<a href=\"https://leetcode.com/problems/min-stack/\" target=\"_blank\" title=\"https://leetcode.com/problems/min-stack/\">https://leetcode.com/problems/min-stack/</a></p>\n<p>harder:<br>\n<a href=\"https://leetcode.com/problems/task-scheduler/\" target=\"_blank\" title=\"https://leetcode.com/problems/task-scheduler/\">https://leetcode.com/problems/task-scheduler/</a><br>\n<a href=\"https://leetcode.com/problems/remove-duplicate-letters/\" target=\"_blank\" title=\"https://leetcode.com/problems/remove-duplicate-letters/\">https://leetcode.com/problems/remove-duplicate-letters/</a></p>",
            "content_type": "text/html",
            "display_recipient": "Post-Lunch Prep (PLP)",
            "flags": [
                "read",
                "historical"
            ],
            "id": 173894290,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 183179,
            "sender_email": "john.v.tan@gmail.com",
            "sender_full_name": "John Vincent Tan (he) (S2'19)",
            "sender_id": 228101,
            "sender_realm_str": "recurse",
            "stream_id": 144212,
            "subject": "PLP Thursday Aug 22",
            "submessages": [],
            "timestamp": 1566488857,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/782b79b72389dc4aafa515fb272f78d0?d=identicon&version=1",
            "client": "website",
            "content": "<p>Also, I messed up scheduling today - a couple people had told me that 2 would be a better start time (and I thought 1:45 was a weird start time anyway) but I realized today Feelings Check-in is scheduled for 3 pm in Sammet so we only have the room for an hour. Can you react with a <span aria-label=\"cat\" class=\"emoji emoji-1f408\" role=\"img\" title=\"cat\">:cat:</span> if you'd prefer 1:45-3:00, and a <span aria-label=\"dog\" class=\"emoji emoji-1f415\" role=\"img\" title=\"dog\">:dog:</span> if you'd prefer to go from 2:00-3:00?</p>",
            "content_type": "text/html",
            "display_recipient": "Post-Lunch Prep (PLP)",
            "flags": [
                "read",
                "historical"
            ],
            "id": 173894822,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f408",
                    "emoji_name": "cat",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "kathleen.macg@gmail.com",
                        "full_name": "Kathleen McGuire (she/they) (F2'19)",
                        "id": 228113
                    },
                    "user_id": 228113
                }
            ],
            "recipient_id": 183179,
            "sender_email": "john.v.tan@gmail.com",
            "sender_full_name": "John Vincent Tan (he) (S2'19)",
            "sender_id": 228101,
            "sender_realm_str": "recurse",
            "stream_id": 144212,
            "subject": "PLP Thursday Aug 22",
            "submessages": [],
            "timestamp": 1566489216,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/82feeacd5dd8ed59a4aaa1137553c5e4ac3f5242?x=x&version=2",
            "client": "ZulipElectron",
            "content": "<p>Anyone meeting today?</p>",
            "content_type": "text/html",
            "display_recipient": "Post-Lunch Prep (PLP)",
            "flags": [
                "read",
                "historical"
            ],
            "id": 175836226,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 183179,
            "sender_email": "nolivo1@gmail.com",
            "sender_full_name": "Natalie K Olivo (she) (F1'19)",
            "sender_id": 233941,
            "sender_realm_str": "recurse",
            "stream_id": 144212,
            "subject": "PLP Thursday Aug 22",
            "submessages": [],
            "timestamp": 1568656830,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/189ab48671e3d9cd22b1a02487892411da469a9a?x=x&version=2",
            "client": "ZulipElectron",
            "content": "<p>i scheduled it for the next three thursdays at 1pm! <a href=\"https://www.recurse.com/calendar/7758\" target=\"_blank\" title=\"https://www.recurse.com/calendar/7758\">rsvp here</a> if you'd like. someone can take over when my batch ends</p>",
            "content_type": "text/html",
            "display_recipient": "Post-Lunch Prep (PLP)",
            "flags": [
                "read",
                "historical"
            ],
            "id": 178132063,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 183179,
            "sender_email": "doron.rasis@nyu.edu",
            "sender_full_name": "Doron Rasis (he) (F1'19)",
            "sender_id": 234876,
            "sender_realm_str": "recurse",
            "stream_id": 144212,
            "subject": "reviving plp",
            "submessages": [],
            "timestamp": 1571081902,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/189ab48671e3d9cd22b1a02487892411da469a9a?x=x&version=2",
            "client": "ZulipElectron",
            "content": "<p>there will b post lunch prep @ 1 today :)</p>",
            "content_type": "text/html",
            "display_recipient": "Post-Lunch Prep (PLP)",
            "flags": [
                "read",
                "historical"
            ],
            "id": 178386334,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 183179,
            "sender_email": "doron.rasis@nyu.edu",
            "sender_full_name": "Doron Rasis (he) (F1'19)",
            "sender_id": 234876,
            "sender_realm_str": "recurse",
            "stream_id": 144212,
            "subject": "reviving plp",
            "submessages": [],
            "timestamp": 1571322527,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/189ab48671e3d9cd22b1a02487892411da469a9a?x=x&version=2",
            "client": "website",
            "content": "<p>hey evan and i r in the main 4th floor area doing a whiteboarding problem cause didn't realize i double booked it in sammett with the ML group</p>",
            "content_type": "text/html",
            "display_recipient": "Post-Lunch Prep (PLP)",
            "flags": [
                "read",
                "historical"
            ],
            "id": 178400869,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 183179,
            "sender_email": "doron.rasis@nyu.edu",
            "sender_full_name": "Doron Rasis (he) (F1'19)",
            "sender_id": 234876,
            "sender_realm_str": "recurse",
            "stream_id": 144212,
            "subject": "reviving plp",
            "submessages": [],
            "timestamp": 1571331858,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/189ab48671e3d9cd22b1a02487892411da469a9a?x=x&version=2",
            "client": "website",
            "content": "<p>come say hi if you were planning on coming!</p>",
            "content_type": "text/html",
            "display_recipient": "Post-Lunch Prep (PLP)",
            "flags": [
                "read",
                "historical"
            ],
            "id": 178400879,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 183179,
            "sender_email": "doron.rasis@nyu.edu",
            "sender_full_name": "Doron Rasis (he) (F1'19)",
            "sender_id": 234876,
            "sender_realm_str": "recurse",
            "stream_id": 144212,
            "subject": "reviving plp",
            "submessages": [],
            "timestamp": 1571331868,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/189ab48671e3d9cd22b1a02487892411da469a9a?x=x&version=2",
            "client": "ZulipElectron",
            "content": "<p>react if u plan on coming tomorrow!</p>",
            "content_type": "text/html",
            "display_recipient": "Post-Lunch Prep (PLP)",
            "flags": [
                "read",
                "historical"
            ],
            "id": 178855940,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "13790",
                    "emoji_name": "doron",
                    "reaction_type": "realm_emoji",
                    "user": {
                        "email": "studio@robertdelanghe.com",
                        "full_name": "Bobby DeLanghe (he) (F2'19)",
                        "id": 240584
                    },
                    "user_id": 240584
                },
                {
                    "emoji_code": "13790",
                    "emoji_name": "doron",
                    "reaction_type": "realm_emoji",
                    "user": {
                        "email": "evanercolano@gmail.com",
                        "full_name": "Evan Ercolano (he) (F1'19)",
                        "id": 234255
                    },
                    "user_id": 234255
                },
                {
                    "emoji_code": "13790",
                    "emoji_name": "doron",
                    "reaction_type": "realm_emoji",
                    "user": {
                        "email": "hh.durrant@gmail.com",
                        "full_name": "Helen Durrant (she) (F2'19)",
                        "id": 240575
                    },
                    "user_id": 240575
                }
            ],
            "recipient_id": 183179,
            "sender_email": "doron.rasis@nyu.edu",
            "sender_full_name": "Doron Rasis (he) (F1'19)",
            "sender_id": 234876,
            "sender_realm_str": "recurse",
            "stream_id": 144212,
            "subject": "reviving plp",
            "submessages": [],
            "timestamp": 1571839092,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/189ab48671e3d9cd22b1a02487892411da469a9a?x=x&version=2",
            "client": "ZulipMobile",
            "content": "<p><a href=\"/user_uploads/13/XFiiJPTWbb8C_1M4cW53kF6p/IMG_1641.jpeg\" target=\"_blank\" title=\"IMG_1641.jpeg\">IMG_1641.jpeg</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/13/XFiiJPTWbb8C_1M4cW53kF6p/IMG_1641.jpeg\" target=\"_blank\" title=\"IMG_1641.jpeg\"><img src=\"/user_uploads/13/XFiiJPTWbb8C_1M4cW53kF6p/IMG_1641.jpeg\"></a></div>",
            "content_type": "text/html",
            "display_recipient": "Post-Lunch Prep (PLP)",
            "flags": [
                "read",
                "historical"
            ],
            "id": 178903901,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 183179,
            "sender_email": "doron.rasis@nyu.edu",
            "sender_full_name": "Doron Rasis (he) (F1'19)",
            "sender_id": 234876,
            "sender_realm_str": "recurse",
            "stream_id": 144212,
            "subject": "Y is there a plp raspberry pi?",
            "submessages": [],
            "timestamp": 1571870682,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/189ab48671e3d9cd22b1a02487892411da469a9a?x=x&version=2",
            "client": "ZulipMobile",
            "content": "<p>What was this ever used for?</p>",
            "content_type": "text/html",
            "display_recipient": "Post-Lunch Prep (PLP)",
            "flags": [
                "read",
                "historical"
            ],
            "id": 178903907,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 183179,
            "sender_email": "doron.rasis@nyu.edu",
            "sender_full_name": "Doron Rasis (he) (F1'19)",
            "sender_id": 234876,
            "sender_realm_str": "recurse",
            "stream_id": 144212,
            "subject": "Y is there a plp raspberry pi?",
            "submessages": [],
            "timestamp": 1571870693,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/51c7e3813e992d0a4e45cda57334d8a29aed680c?x=x&version=2",
            "client": "ZulipMobile",
            "content": "<p>Did you SSH into it?</p>",
            "content_type": "text/html",
            "display_recipient": "Post-Lunch Prep (PLP)",
            "flags": [
                "read",
                "historical"
            ],
            "id": 179019963,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 183179,
            "sender_email": "studio@robertdelanghe.com",
            "sender_full_name": "Bobby DeLanghe (he) (F2'19)",
            "sender_id": 240584,
            "sender_realm_str": "recurse",
            "stream_id": 144212,
            "subject": "Y is there a plp raspberry pi?",
            "submessages": [],
            "timestamp": 1571976002,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/82feeacd5dd8ed59a4aaa1137553c5e4ac3f5242?x=x&version=2",
            "client": "ZulipElectron",
            "content": "<p>Interesting <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>",
            "content_type": "text/html",
            "display_recipient": "Post-Lunch Prep (PLP)",
            "flags": [
                "read",
                "historical"
            ],
            "id": 179661567,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 183179,
            "sender_email": "nolivo1@gmail.com",
            "sender_full_name": "Natalie K Olivo (she) (F1'19)",
            "sender_id": 233941,
            "sender_realm_str": "recurse",
            "stream_id": 144212,
            "subject": "Y is there a plp raspberry pi?",
            "submessages": [],
            "timestamp": 1572639580,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/4fbbc0bb24d69c5ebe871da870fcdd90bedbeebc?x=x&version=2",
            "client": "website",
            "content": "<p>Reviving this for anyone who is interested :) <a href=\"https://www.recurse.com/calendar/8059\" target=\"_blank\" title=\"https://www.recurse.com/calendar/8059\">https://www.recurse.com/calendar/8059</a></p>",
            "content_type": "text/html",
            "display_recipient": "Post-Lunch Prep (PLP)",
            "flags": [
                "read",
                "historical"
            ],
            "id": 180092457,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1240",
                    "emoji_name": "parrot",
                    "reaction_type": "realm_emoji",
                    "user": {
                        "email": "studio@robertdelanghe.com",
                        "full_name": "Bobby DeLanghe (he) (F2'19)",
                        "id": 240584
                    },
                    "user_id": 240584
                }
            ],
            "recipient_id": 183179,
            "sender_email": "eclairemoy@gmail.com",
            "sender_full_name": "Liz Moy (she/they) (F2'19)",
            "sender_id": 240582,
            "sender_realm_str": "recurse",
            "stream_id": 144212,
            "subject": "PLP Monday November 11",
            "submessages": [],
            "timestamp": 1573088029,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/51c7e3813e992d0a4e45cda57334d8a29aed680c?x=x&version=2",
            "client": "ZulipMobile",
            "content": "<p>This is awesome <span aria-label=\"raised hands\" class=\"emoji emoji-1f64c\" role=\"img\" title=\"raised hands\">:raised_hands:</span></p>\n<p>The wiki is crazy: <a href=\"https://github.com/recursecenter/wiki/wiki/Post-Lunch-Prep\" target=\"_blank\" title=\"https://github.com/recursecenter/wiki/wiki/Post-Lunch-Prep\">https://github.com/recursecenter/wiki/wiki/Post-Lunch-Prep</a></p>\n<p>I think I might try to get both the bot <span class=\"user-mention\" data-user-id=\"137375\">@PLP Scheduler</span>  and the pi set up again.</p>",
            "content_type": "text/html",
            "display_recipient": "Post-Lunch Prep (PLP)",
            "flags": [
                "read",
                "historical"
            ],
            "id": 180153550,
            "is_me_message": false,
            "last_edit_timestamp": 1573147097,
            "reactions": [],
            "recipient_id": 183179,
            "sender_email": "studio@robertdelanghe.com",
            "sender_full_name": "Bobby DeLanghe (he) (F2'19)",
            "sender_id": 240584,
            "sender_realm_str": "recurse",
            "stream_id": 144212,
            "subject": "PLP Monday November 11",
            "submessages": [],
            "timestamp": 1573147069,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/51c7e3813e992d0a4e45cda57334d8a29aed680c?x=x&version=2",
            "client": "ZulipMobile",
            "content": "<p><span class=\"user-mention\" data-user-id=\"240582\">@Liz Moy (she/they) (F2'19)</span> I found the api endpoint for all of the problems. It could be fun to build a quick random question picker:</p>\n<p><a href=\"https://leetcode.com/api/problems/all/\" target=\"_blank\" title=\"https://leetcode.com/api/problems/all/\">https://leetcode.com/api/problems/all/</a></p>",
            "content_type": "text/html",
            "display_recipient": "Post-Lunch Prep (PLP)",
            "flags": [
                "read",
                "historical"
            ],
            "id": 180155140,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "2764",
                    "emoji_name": "heart",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "eclairemoy@gmail.com",
                        "full_name": "Liz Moy (she/they) (F2'19)",
                        "id": 240582
                    },
                    "user_id": 240582
                }
            ],
            "recipient_id": 183179,
            "sender_email": "studio@robertdelanghe.com",
            "sender_full_name": "Bobby DeLanghe (he) (F2'19)",
            "sender_id": 240584,
            "sender_realm_str": "recurse",
            "stream_id": 144212,
            "subject": "PLP Monday November 11",
            "submessages": [],
            "timestamp": 1573148213,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/51c7e3813e992d0a4e45cda57334d8a29aed680c?x=x&version=2",
            "client": "ZulipMobile",
            "content": "<p><a href=\"/user_uploads/13/0dCrWgjiVC5sXKSAksYXc_Y_/IMG_1266.JPG\" target=\"_blank\" title=\"IMG_1266.JPG\">IMG_1266.JPG</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/13/0dCrWgjiVC5sXKSAksYXc_Y_/IMG_1266.JPG\" target=\"_blank\" title=\"IMG_1266.JPG\"><img src=\"/user_uploads/13/0dCrWgjiVC5sXKSAksYXc_Y_/IMG_1266.JPG\"></a></div>",
            "content_type": "text/html",
            "display_recipient": "Post-Lunch Prep (PLP)",
            "flags": [
                "read",
                "historical"
            ],
            "id": 180441931,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 183179,
            "sender_email": "studio@robertdelanghe.com",
            "sender_full_name": "Bobby DeLanghe (he) (F2'19)",
            "sender_id": 240584,
            "sender_realm_str": "recurse",
            "stream_id": 144212,
            "subject": "PLP Monday November 11",
            "submessages": [],
            "timestamp": 1573492747,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/51c7e3813e992d0a4e45cda57334d8a29aed680c?x=x&version=2",
            "client": "ZulipMobile",
            "content": "<p>Won\u2019t be able to make it today. Taking my sister\u2019s doggo to the vet:</p>",
            "content_type": "text/html",
            "display_recipient": "Post-Lunch Prep (PLP)",
            "flags": [
                "read",
                "historical"
            ],
            "id": 180441934,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "2639",
                    "emoji_name": "sad",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "eclairemoy@gmail.com",
                        "full_name": "Liz Moy (she/they) (F2'19)",
                        "id": 240582
                    },
                    "user_id": 240582
                },
                {
                    "emoji_code": "2639",
                    "emoji_name": "sad",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "anna.leuchtenberger@gmail.com",
                        "full_name": "Anna Dunne Leuchtenberger (she/they) (F2'19)",
                        "id": 226663
                    },
                    "user_id": 226663
                }
            ],
            "recipient_id": 183179,
            "sender_email": "studio@robertdelanghe.com",
            "sender_full_name": "Bobby DeLanghe (he) (F2'19)",
            "sender_id": 240584,
            "sender_realm_str": "recurse",
            "stream_id": 144212,
            "subject": "PLP Monday November 11",
            "submessages": [],
            "timestamp": 1573492750,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/4fbbc0bb24d69c5ebe871da870fcdd90bedbeebc?x=x&version=2",
            "client": "website",
            "content": "<p>awww i am so sorry but i am gonna have to miss today. had to head home bc i got hit with a gnarly headache. i hope to be there next week! if it goes well and you guys want me to make the next event let me know and i'll put it on the RC calendar. <span class=\"user-mention\" data-user-id=\"248081\">@waj . (W1'19)</span> <span class=\"user-mention\" data-user-id=\"248068\">@Charles Henry Bell (he) (W1'19)</span> <span class=\"user-mention\" data-user-id=\"240588\">@Shon Feder (he) (F2'19)</span></p>",
            "content_type": "text/html",
            "display_recipient": "Post-Lunch Prep (PLP)",
            "flags": [
                "read",
                "historical"
            ],
            "id": 180443327,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "2764",
                    "emoji_name": "heart",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "studio@robertdelanghe.com",
                        "full_name": "Bobby DeLanghe (he) (F2'19)",
                        "id": 240584
                    },
                    "user_id": 240584
                },
                {
                    "emoji_code": "2764",
                    "emoji_name": "heart",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "anna.leuchtenberger@gmail.com",
                        "full_name": "Anna Dunne Leuchtenberger (she/they) (F2'19)",
                        "id": 226663
                    },
                    "user_id": 226663
                }
            ],
            "recipient_id": 183179,
            "sender_email": "eclairemoy@gmail.com",
            "sender_full_name": "Liz Moy (she/they) (F2'19)",
            "sender_id": 240582,
            "sender_realm_str": "recurse",
            "stream_id": 144212,
            "subject": "PLP Monday November 11",
            "submessages": [],
            "timestamp": 1573493787,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/27f18c8e071b5fb513029f36abf4d92d?d=identicon&version=1",
            "client": "website",
            "content": "<p>Hello! Is this still a thing?</p>",
            "content_type": "text/html",
            "display_recipient": "Post-Lunch Prep (PLP)",
            "flags": [
                "read",
                "historical"
            ],
            "id": 197203433,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 183179,
            "sender_email": "benschac@gmail.com",
            "sender_full_name": "Benjamin Schachter (he/they) (W1'16)",
            "sender_id": 100320,
            "sender_realm_str": "recurse",
            "stream_id": 144212,
            "subject": "PLP Monday November 11",
            "submessages": [],
            "timestamp": 1589230455,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/4fbbc0bb24d69c5ebe871da870fcdd90bedbeebc?x=x&version=2",
            "client": "website",
            "content": "<p>revive itttt</p>",
            "content_type": "text/html",
            "display_recipient": "Post-Lunch Prep (PLP)",
            "flags": [
                "read",
                "historical"
            ],
            "id": 199258042,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 183179,
            "sender_email": "eclairemoy@gmail.com",
            "sender_full_name": "Liz Moy (she/they) (F2'19)",
            "sender_id": 240582,
            "sender_realm_str": "recurse",
            "stream_id": 144212,
            "subject": "PLP Monday November 11",
            "submessages": [],
            "timestamp": 1590846980,
            "topic_links": [],
            "type": "stream"
        }
    ],
    "msg": "",
    "result": "success"
}
