{
    "anchor": 0,
    "found_anchor": false,
    "found_newest": true,
    "found_oldest": true,
    "history_limited": false,
    "messages": [
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/1000/9fd9de59f964f6e3af477006ddd0116211347010?x=x&version=2",
            "client": "Internal",
            "content": "<p>Stream created by <span class=\"user-mention silent\" data-user-id=\"9335\">Adrien Lamarque (they) (S1'16)</span>.</p>",
            "content_type": "text/html",
            "display_recipient": "computer-architecture",
            "flags": [
                "read",
                "historical"
            ],
            "id": 188988330,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 420424,
            "sender_email": "notification-bot@zulip.com",
            "sender_full_name": "Notification Bot",
            "sender_id": 100006,
            "sender_realm_str": "zulipcore",
            "stream_id": 224433,
            "subject": "stream events",
            "submessages": [],
            "timestamp": 1582601035,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/da27a2081fcf44c802c1806cdb5bb881310dfe7c?x=x&version=5",
            "client": "website",
            "content": "<p>I've created this stream as a place to discuss computer architecture and microarchitecture. Whether it be instruction sets, security vulnerabilities, the minute details of cache hierarchies, etc...</p>",
            "content_type": "text/html",
            "display_recipient": "computer-architecture",
            "flags": [
                "read",
                "historical"
            ],
            "id": 188988585,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 420424,
            "sender_email": "ad@lamarque.fr",
            "sender_full_name": "Adrien Lamarque (they/he) (S1'16)",
            "sender_id": 9335,
            "sender_realm_str": "recurse",
            "stream_id": 224433,
            "subject": "Meta",
            "submessages": [],
            "timestamp": 1582601324,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/da27a2081fcf44c802c1806cdb5bb881310dfe7c?x=x&version=5",
            "client": "website",
            "content": "<p>Happy to try and answer any questions people may have, too!</p>",
            "content_type": "text/html",
            "display_recipient": "computer-architecture",
            "flags": [
                "read",
                "historical"
            ],
            "id": 188988671,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 420424,
            "sender_email": "ad@lamarque.fr",
            "sender_full_name": "Adrien Lamarque (they/he) (S1'16)",
            "sender_id": 9335,
            "sender_realm_str": "recurse",
            "stream_id": 224433,
            "subject": "Meta",
            "submessages": [],
            "timestamp": 1582601518,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/da27a2081fcf44c802c1806cdb5bb881310dfe7c?x=x&version=5",
            "client": "website",
            "content": "<p>Computer architecture and microarchitectures are huge topics -- about which, full disclosure, I can't claim to remotely be an expert in -- but there are some pretty good resources to learn about them.<br>\nIt seems that people find that <a href=\"https://www.nand2tetris.org/\" target=\"_blank\" title=\"https://www.nand2tetris.org/\">https://www.nand2tetris.org/</a> is a popular choice for complete beginners, and probably a fine one too. I have not gone through it myself, and I have heard criticism that, while it does a good job of giving people an idea on how to build a computer from scratch (actually a whole computing stack!), the architecture you build throughout is very simplistic and does not relate really well to how computers behave today.<br>\nFor the motivated learner who wants to learn all the way from the bottom, some background knowledge on electronics is useful. It's a vast subject in itself, but for computers really the most useful thing to learn is what a transistor -- the basic block of every computer out there -- does, and how you can build both combinatorial and sequential logic from them, in other words, NAND gates and memories. With these building blocks, you can build small computers. You can synthesize such a computer on an FPGA, or like Ben Eater, build it out of discrete components on a breadboard: <a href=\"https://www.youtube.com/playlist?list=PLowKtXNTBypFbtuVMUVXNR0z1mu7dp7eH\" target=\"_blank\" title=\"https://www.youtube.com/playlist?list=PLowKtXNTBypFbtuVMUVXNR0z1mu7dp7eH\">https://www.youtube.com/playlist?list=PLowKtXNTBypFbtuVMUVXNR0z1mu7dp7eH</a> . For electronics,  allaboutcircuits has decent free textbooks online on the subject: <a href=\"https://www.allaboutcircuits.com/textbook/\" target=\"_blank\" title=\"https://www.allaboutcircuits.com/textbook/\">https://www.allaboutcircuits.com/textbook/</a>. You'd want to read Vol IV, and back track to the stuff you don't understand from there.</p>\n<p>The standard introductory textbook for proper computer architecture is Hennessy &amp; Patterson's Computer Organization and Design. There are several editions: MIPS, ARM and RISC-V, which use different instruction set architectures. For the purpose of translating the knowledge to the real-world, I would highly recommend either the ARM one or the RISC-V one. (There are a lot more ARM chips out there currently, but arguably RISC-V is going to be pretty big in the near future.) It's worth reading in full, maybe skimming over chapter 1 and 2 if you are already familiar with the material. Chapters 3, 4 and 5 are the core chapters will give you a solid basis for understanding modern architectures. As a potential alternative I've heard good things about Onur Mutlu's lectures: <a href=\"https://www.youtube.com/channel/UCIwQ8uOeRFgOEvBLYc3kc3g/playlists\" target=\"_blank\" title=\"https://www.youtube.com/channel/UCIwQ8uOeRFgOEvBLYc3kc3g/playlists\">https://www.youtube.com/channel/UCIwQ8uOeRFgOEvBLYc3kc3g/playlists</a> . Any one of the Digital Design &amp; Comp. Arch or Comp. Arch look good.</p>\n<p>From there, there are many possible directions to go. A natural one is Hennessy &amp; Patterson's follow up book, Computer Architecture: A Quantitative Approach which dives into the many things that make recent architecture so powerful. In particular it goes into the various tricks to implement Data Level Parallelism, Task Level Parallelism and Instruction Level Parallelism, all of which fascinating subject. It's a book whose chapters you can read mostly independently, too. (And exactly what I am still doing to this day, I have yet to read this one cover to cover!)</p>\n<p>Agner Fog has a series of PDFs related to software optimization that are very popular (and rightfully so). The one on microarchitecture is invaluable: <a href=\"https://www.agner.org/optimize/microarchitecture.pdf\" target=\"_blank\" title=\"https://www.agner.org/optimize/microarchitecture.pdf\">https://www.agner.org/optimize/microarchitecture.pdf</a><br>\nIt explains in detail (some of which was reverse engineered) the micro architecture of the whole family of x86 CPUs from Intel, AMD and VIA, dating back from the Pentium. It's fairly readable with some prerequisites, and most CPU families can roughly be read as independent chapter. </p>\n<p>Fabian Giesen has a bunch of impromptu lectures on microarchitecture that really helped me understand some points: <a href=\"https://www.youtube.com/channel/UCcRaa0AcYX32c0m8wJJHNWg/videos\" target=\"_blank\" title=\"https://www.youtube.com/channel/UCcRaa0AcYX32c0m8wJJHNWg/videos\">https://www.youtube.com/channel/UCcRaa0AcYX32c0m8wJJHNWg/videos</a><br>\nI would absolutely recommend watching each and every one of them.</p>\n<p>From there, the world is your oyster. There are a lot of interesting papers on computer architecture and microarchitecture touching on the subject from different approaches. They're usually not that intimidating, and the following universal rule applies: the best introduction on a subject is often found in the related works section of a paper (and/or in the introductory chapter of a related thesis). </p>\n<p>Happy learning!</p>",
            "content_type": "text/html",
            "display_recipient": "computer-architecture",
            "flags": [
                "read",
                "historical"
            ],
            "id": 189751078,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 420424,
            "sender_email": "ad@lamarque.fr",
            "sender_full_name": "Adrien Lamarque (they/he) (S1'16)",
            "sender_id": 9335,
            "sender_realm_str": "recurse",
            "stream_id": 224433,
            "subject": "How to learn about computer architecture?",
            "submessages": [],
            "timestamp": 1583368963,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/81c6c8040fc0263607edd05c09dacf6b?d=identicon&version=1",
            "client": "ZulipElectron",
            "content": "<p><a href=\"https://www.edx.org/course/computer-system-design-advanced-concepts-of-modern\" target=\"_blank\" title=\"https://www.edx.org/course/computer-system-design-advanced-concepts-of-modern\">Computer Systems Design</a> on edx is a reasonable overview of a bunch of concepts in computer architecture; someone who prefers that format who is looking to get an idea of how things like out-of-order execution and branch prediction work might find it the right thing.</p>",
            "content_type": "text/html",
            "display_recipient": "computer-architecture",
            "flags": [
                "read",
                "historical"
            ],
            "id": 190123096,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 420424,
            "sender_email": "julian@cipht.net",
            "sender_full_name": "Julian Squires (he) (F2'17)",
            "sender_id": 101992,
            "sender_realm_str": "recurse",
            "stream_id": 224433,
            "subject": "How to learn about computer architecture?",
            "submessages": [],
            "timestamp": 1583791707,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/8f3e3f13689ac077fe4ae537e33bde345a57cb22?x=x&version=2",
            "client": "website",
            "content": "<p>There's a fabless chip design company that's privately funded without VC, quietly developing this new architecture of CPU called \"Mill Computing\", where instead of static registers, there's a monotonically increasing counter called a \"belt\", and you address to it by specifying a previous timestamp (I'm likely fucking up the details, but the point is that it's completely different from the standard microarchitecture as embodied by CPUs like x86 or ARM). There are many comprehensive videos on it, which also function to introduce you to standard architectures so that the new chip can be understood and contrasted with something more familiar.</p>\n<p><a href=\"https://www.youtube.com/playlist?list=PLFls3Q5bBInj_FfNLrV7gGdVtikeGoUc9\" title=\"https://www.youtube.com/playlist?list=PLFls3Q5bBInj_FfNLrV7gGdVtikeGoUc9\">https://www.youtube.com/playlist?list=PLFls3Q5bBInj_FfNLrV7gGdVtikeGoUc9</a></p>",
            "content_type": "text/html",
            "display_recipient": "computer-architecture",
            "flags": [
                "read",
                "historical"
            ],
            "id": 192612423,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 420424,
            "sender_email": "recurse@ardent.nebcorp.com",
            "sender_full_name": "Joe Ardent (he) (SP1'17)",
            "sender_id": 9097,
            "sender_realm_str": "recurse",
            "stream_id": 224433,
            "subject": "Mill Computing",
            "submessages": [],
            "timestamp": 1585791564,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/7d2ab014ebf55e99afffba1a3d92be8155754f0f?x=x&version=1",
            "client": "website",
            "content": "<p>I've watch a couple of these in the past, but have absolutely no useful background with which to form an opinion.</p>",
            "content_type": "text/html",
            "display_recipient": "computer-architecture",
            "flags": [
                "read",
                "historical"
            ],
            "id": 192761037,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 420424,
            "sender_email": "kamal@marhubi.com",
            "sender_full_name": "Kamal Marhubi (he) (m2'18)",
            "sender_id": 8090,
            "sender_realm_str": "recurse",
            "stream_id": 224433,
            "subject": "Mill Computing",
            "submessages": [],
            "timestamp": 1585893484,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/8f3e3f13689ac077fe4ae537e33bde345a57cb22?x=x&version=2",
            "client": "website",
            "content": "<p>Yeah, I'm mostly in the same boat, and \"sounds really great\" camp.</p>",
            "content_type": "text/html",
            "display_recipient": "computer-architecture",
            "flags": [
                "read",
                "historical"
            ],
            "id": 192821511,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 420424,
            "sender_email": "recurse@ardent.nebcorp.com",
            "sender_full_name": "Joe Ardent (he) (SP1'17)",
            "sender_id": 9097,
            "sender_realm_str": "recurse",
            "stream_id": 224433,
            "subject": "Mill Computing",
            "submessages": [],
            "timestamp": 1585927791,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/6b283009bf4375b73d9628bb245367165da5c360?x=x&version=2",
            "client": "ZulipElectron",
            "content": "<p>Computer Architecture from Princeton <a href=\"https://www.coursera.org/learn/comparch\">https://www.coursera.org/learn/comparch</a>? also seems to be a good resource to learn microarchitecture. It is an advanced course and requires a good understanding of the internals of pipelined in-order processors at least. Speaking of  pipelined in-order processors, some resources i've found helpful for learning them include:</p>\n<ul>\n<li>6.004 Computational Structures (MIT) <a href=\"https://www.youtube.com/channel/UC1DcxXg6GkAcp2zk2w7U6qQ/videos\">https://www.youtube.com/channel/UC1DcxXg6GkAcp2zk2w7U6qQ/videos</a></li>\n<li>Digital Design and Computer Architecture by David and Sarah Harris</li>\n</ul>\n<p>+1 for Onur Mutlu's lectures.</p>\n<div class=\"youtube-video message_inline_image\"><a data-id=\"channel\" href=\"https://www.youtube.com/channel/UC1DcxXg6GkAcp2zk2w7U6qQ/videos\"><img src=\"https://i.ytimg.com/vi/channel/default.jpg\"></a></div>",
            "content_type": "text/html",
            "display_recipient": "computer-architecture",
            "flags": [
                "read",
                "historical"
            ],
            "id": 199027412,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 420424,
            "sender_email": "anthonyabeo@gmail.com",
            "sender_full_name": "Anthony Anabila Abeo (he) (SP2'20)",
            "sender_id": 276302,
            "sender_realm_str": "recurse",
            "stream_id": 224433,
            "subject": "How to learn about computer architecture?",
            "submessages": [],
            "timestamp": 1590675170,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/440414e0085768284bd44c33c4d184cfd8cf1456?x=x&version=2",
            "client": "website",
            "content": "<p>I've been reading <a href=\"https://www.amazon.co.uk/Inside-Machine-Introduction-Microprocessors-Architecture/dp/1593276680\">Inside the Machine</a>. The author does a fantastic job explaining the inner workings of processors in a really engaging way with really colourful illustrations which complement the text. I have a much deeper appreciation of the inner workings of CPUs and their complexities. </p>\n<p>Strongly recommend picking up this book, the paper copy is gorgeous in color (the eBook is great too on an iPad) and the illustrations are top notch.</p>",
            "content_type": "text/html",
            "display_recipient": "computer-architecture",
            "flags": [
                "read",
                "historical"
            ],
            "id": 202545898,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 420424,
            "sender_email": "me@suhailpatel.com",
            "sender_full_name": "Suhail Patel (he) (m5'20)",
            "sender_id": 314648,
            "sender_realm_str": "recurse",
            "stream_id": 224433,
            "subject": "Inside the Machine",
            "submessages": [],
            "timestamp": 1593594280,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/6b283009bf4375b73d9628bb245367165da5c360?x=x&version=2",
            "client": "ZulipElectron",
            "content": "<p>I enjoyed reading through it briefly a while back. I should probably take another look at it soon.</p>",
            "content_type": "text/html",
            "display_recipient": "computer-architecture",
            "flags": [
                "read",
                "historical"
            ],
            "id": 202608344,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 420424,
            "sender_email": "anthonyabeo@gmail.com",
            "sender_full_name": "Anthony Anabila Abeo (he) (SP2'20)",
            "sender_id": 276302,
            "sender_realm_str": "recurse",
            "stream_id": 224433,
            "subject": "Inside the Machine",
            "submessages": [],
            "timestamp": 1593629286,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/2c519a6780d234da6797a581ec6b569a25fa5cac?x=x&version=2",
            "client": "website",
            "content": "<p>hi friends &amp; unindicted co-conspirators!</p>\n<p>An old friend (also a friend of Mindy Preston and Dan Luu!) is doing a side project to build an out-of-order RV32i core optimized for an FPGA substrate. has been fascinating to talk to him about it weekly - there's a lot of microarchitecture that's interesting that's in the gaps between blocks in schematics :)</p>\n<p>(a couple of years ago I tried to solve the same problem, but I never wrote any RTL for it and approached the problem differently than Joel)</p>\n<p>Some fascinating bits so far --</p>\n<ul>\n<li>\n<p>mechanisms to repair return address stacks after misspeculation are not often described; so talking through how Core 2 did it w/ Joel was pretty interesting - Core 2 maintained both a conventional RAS and a non-reclaiming one structured as a list. The latter was used for RETs as long as it had not overflowed, then the core fell back to the former. (the latter just required restoring a list pointer on misspeculation to recover RAS state)</p>\n</li>\n<li>\n<p>schedulers! out-of-order schedulers map particularly poorly to fpga substrates; Joel and I talked through one of my favorite comp.arch papers, Michaud's data flow prescheduler. its effectively a \"force multiplier' for a small conventional scheduler that doesn't depend on associative lookups or broadcasts. </p>\n</li>\n<li>\n<p>Joel has settled on a one-wide design point w/ a trace cache atm, and plans to bank a lot on instruction refinement/microfusion/macrofusion. I'd love to see how it goes - the trace cache breaks the ram-&gt;ram frequency limiting cycle. he's using a mips r10k (PRF)-style renamer w/ the PRF entries structured as tiny FIFOs for snapshotting.</p>\n</li>\n<li>\n<p>Instruction refinement! He thinks there's room for optimizing Hammocks (short conditional branches) by turning them into internally-predicated operations. POWER9 does this; a mutual friend published the technique in ~1997 / 1998 at CU Boulder. :)</p>\n</li>\n<li>\n<p>Multiple branches/cycle - turns out this is so hard. So, so hard; so much so Joel is planning his design to be 1-wide and lean into micro-/macrofusion. Apparently RV32I code is reasonably amenable to that?</p>\n</li>\n<li>Branch ID! turns out to be a pretty interesting problem itself, particularly &gt;1 / cycle.</li>\n</ul>",
            "content_type": "text/html",
            "display_recipient": "computer-architecture",
            "flags": [
                "read",
                "historical"
            ],
            "id": 203669089,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 420424,
            "sender_email": "vsrinivas@ops101.org",
            "sender_full_name": "Venkatesh Srinivas (he) (S2'18)",
            "sender_id": 120560,
            "sender_realm_str": "recurse",
            "stream_id": 224433,
            "subject": "mapping an OOO core to an fpga!",
            "submessages": [],
            "timestamp": 1594601427,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/2c519a6780d234da6797a581ec6b569a25fa5cac?x=x&version=2",
            "client": "website",
            "content": "<p>--<br>\nI think its a pretty neat problem space; some things are unique to the FPGA fabric (relative cost of logic vs RAM, esp.); but others are problems that traditional fabrics will run into at larger sizes.</p>\n<p>Schedulers esp.; I think many of the problems faced here are similar to ones that folks building kilo-instruction windows are going to face; at some point scheduler hierarchies and side structures are inevitable? (maybe?); what should they be? ; this is a way to take a swing at that problem at a different size point.</p>\n<p>(Good papers Imho about past approaches, the data-flow prescheduler above, and 'long term parking'; do folks have any other favorites here?)</p>",
            "content_type": "text/html",
            "display_recipient": "computer-architecture",
            "flags": [
                "read",
                "historical"
            ],
            "id": 203669163,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 420424,
            "sender_email": "vsrinivas@ops101.org",
            "sender_full_name": "Venkatesh Srinivas (he) (S2'18)",
            "sender_id": 120560,
            "sender_realm_str": "recurse",
            "stream_id": 224433,
            "subject": "mapping an OOO core to an fpga!",
            "submessages": [],
            "timestamp": 1594601618,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/6b283009bf4375b73d9628bb245367165da5c360?x=x&version=2",
            "client": "ZulipElectron",
            "content": "<p><span class=\"user-mention\" data-user-id=\"120560\">@Venkatesh Srinivas (he) (S2'18)</span> Sounds interesting. Is there RTL code for this somewhere?</p>",
            "content_type": "text/html",
            "display_recipient": "computer-architecture",
            "flags": [
                "read",
                "historical"
            ],
            "id": 203738493,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 420424,
            "sender_email": "anthonyabeo@gmail.com",
            "sender_full_name": "Anthony Anabila Abeo (he) (SP2'20)",
            "sender_id": 276302,
            "sender_realm_str": "recurse",
            "stream_id": 224433,
            "subject": "mapping an OOO core to an fpga!",
            "submessages": [],
            "timestamp": 1594658536,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/2c519a6780d234da6797a581ec6b569a25fa5cac?x=x&version=2",
            "client": "website",
            "content": "<p>No, sadly;</p>",
            "content_type": "text/html",
            "display_recipient": "computer-architecture",
            "flags": [
                "read",
                "historical"
            ],
            "id": 203743483,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 420424,
            "sender_email": "vsrinivas@ops101.org",
            "sender_full_name": "Venkatesh Srinivas (he) (S2'18)",
            "sender_id": 120560,
            "sender_realm_str": "recurse",
            "stream_id": 224433,
            "subject": "mapping an OOO core to an fpga!",
            "submessages": [],
            "timestamp": 1594661024,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/2c519a6780d234da6797a581ec6b569a25fa5cac?x=x&version=2",
            "client": "website",
            "content": "<p>hi architorture friends!</p>\n<p>I couldn't sleep last night so I experimented w/ some historic conditional branch predictor ideas in the CBP-2016 framework, on a handful of the traces (short-mobile-<em>, short-server-</em>).started w/ the standard gshare (in the source distribution), added a BTB + filtering (chang 1996), tried the agree predictor (sprangle); a tournament predictor (bimodal. + gshare);; plus I tried the intel p54c and p6 predictors (p6 = local predictor 4 bits of history tied to a btb). and then tried fiddling w/ some dials (mpki as a function of predictor size, what if I tag even direct mapped structures, what if I take some ideas from newer predictors, esp. long history vectors &amp; fold them)?</p>\n<p>some implementation things I noticed ---<br>\n. Chang 1996 style filtering and an agree predictor where the bias is set from \"first time a branch is seen\" seem to help a little on modern server-* traces when the main predictor arrays are small, but hurt when they're large. <br>\n. ensuring that $PC + $GHRs are well-distributed through a conventionally indexed BTB is hard!!<br>\n. update policies matter a lot - my tournament predictor implementation never performed as well as an iso-size straight gshare implementation , but I never figured out a great way to decide which predictor(s) to update...<br>\n. long history vectors + folding is really effective even for classical predictors like gshare<br>\n. the original P6 predictor ... I can see why it was implemented the way it was, but on modern traces it seemed to be Not Very Good. inter-branch outcome correlation seems to be so important<br>\n. Chang 1996-style filtering seems to capture some of the same wins as a loop predictor<br>\n. some modern predictors mash lots of things into a history vector; but I'm having not much luck even mashing two bits of the from add in.<br>\n. not including unconditional branches in a gshare history vector == win<br>\n. there are so many knobs!</p>",
            "content_type": "text/html",
            "display_recipient": "computer-architecture",
            "flags": [
                "read",
                "historical"
            ],
            "id": 205075939,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 420424,
            "sender_email": "vsrinivas@ops101.org",
            "sender_full_name": "Venkatesh Srinivas (he) (S2'18)",
            "sender_id": 120560,
            "sender_realm_str": "recurse",
            "stream_id": 224433,
            "subject": "experiments w/ historical conditional branch predictor resea",
            "submessages": [],
            "timestamp": 1595814201,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/2c519a6780d234da6797a581ec6b569a25fa5cac?x=x&version=2",
            "client": "website",
            "content": "<p>oh, and <br>\n. the real CBP-2016 submissions are really, really good.</p>",
            "content_type": "text/html",
            "display_recipient": "computer-architecture",
            "flags": [
                "read",
                "historical"
            ],
            "id": 205075949,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 420424,
            "sender_email": "vsrinivas@ops101.org",
            "sender_full_name": "Venkatesh Srinivas (he) (S2'18)",
            "sender_id": 120560,
            "sender_realm_str": "recurse",
            "stream_id": 224433,
            "subject": "experiments w/ historical conditional branch predictor resea",
            "submessages": [],
            "timestamp": 1595814228,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/6b283009bf4375b73d9628bb245367165da5c360?x=x&version=2",
            "client": "ZulipElectron",
            "content": "<p>hey <span class=\"user-mention\" data-user-id=\"120560\">@Venkatesh Srinivas (he) (S2'18)</span> ,  thanks for sharing. Never heard of the CBP until today. BTW, how are these algorithms implemented? at the RTL level? in a high-level programming language?</p>",
            "content_type": "text/html",
            "display_recipient": "computer-architecture",
            "flags": [
                "read",
                "historical"
            ],
            "id": 205271419,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 420424,
            "sender_email": "anthonyabeo@gmail.com",
            "sender_full_name": "Anthony Anabila Abeo (he) (SP2'20)",
            "sender_id": 276302,
            "sender_realm_str": "recurse",
            "stream_id": 224433,
            "subject": "experiments w/ historical conditional branch predictor resea",
            "submessages": [],
            "timestamp": 1595960349,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/2c519a6780d234da6797a581ec6b569a25fa5cac?x=x&version=2",
            "client": "website",
            "content": "<ol>\n<li>\n<p>When implemented for-real, in whatever hardware descriptor language is used for the processor in question. <br>\n(BTW, these are just very small components of \"the\" \"branch predictor\" - the questions such logic needs to answer are much broader and tied into how instruction fetch is driven - given $IP, what's the next $IP?)</p>\n</li>\n<li>\n<p>in the championship branch predictor competition +framework, just plain old c++ :P</p>\n</li>\n</ol>",
            "content_type": "text/html",
            "display_recipient": "computer-architecture",
            "flags": [
                "read",
                "historical"
            ],
            "id": 205277710,
            "is_me_message": false,
            "last_edit_timestamp": 1595963767,
            "reactions": [],
            "recipient_id": 420424,
            "sender_email": "vsrinivas@ops101.org",
            "sender_full_name": "Venkatesh Srinivas (he) (S2'18)",
            "sender_id": 120560,
            "sender_realm_str": "recurse",
            "stream_id": 224433,
            "subject": "experiments w/ historical conditional branch predictor resea",
            "submessages": [],
            "timestamp": 1595963412,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/2c519a6780d234da6797a581ec6b569a25fa5cac?x=x&version=2",
            "client": "website",
            "content": "<p>(the framework turns traces of branches and directions + resolutions into calls into your submissions/tests)</p>\n<p><a href=\"https://gist.github.com/vsrinivas/ca39a422f583231c79d6fcce8db0b74a\">https://gist.github.com/vsrinivas/ca39a422f583231c79d6fcce8db0b74a</a> is where I left the early-early-am experiments off two days ago for example :p</p>",
            "content_type": "text/html",
            "display_recipient": "computer-architecture",
            "flags": [
                "read",
                "historical"
            ],
            "id": 205277942,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 420424,
            "sender_email": "vsrinivas@ops101.org",
            "sender_full_name": "Venkatesh Srinivas (he) (S2'18)",
            "sender_id": 120560,
            "sender_realm_str": "recurse",
            "stream_id": 224433,
            "subject": "experiments w/ historical conditional branch predictor resea",
            "submessages": [],
            "timestamp": 1595963547,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/2c519a6780d234da6797a581ec6b569a25fa5cac?x=x&version=2",
            "client": "website",
            "content": "<p>the gist is tagless gshare + chang(1996) branch filtering + a folded history vector for indexing.</p>",
            "content_type": "text/html",
            "display_recipient": "computer-architecture",
            "flags": [
                "read",
                "historical"
            ],
            "id": 205278150,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 420424,
            "sender_email": "vsrinivas@ops101.org",
            "sender_full_name": "Venkatesh Srinivas (he) (S2'18)",
            "sender_id": 120560,
            "sender_realm_str": "recurse",
            "stream_id": 224433,
            "subject": "experiments w/ historical conditional branch predictor resea",
            "submessages": [],
            "timestamp": 1595963653,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/2c519a6780d234da6797a581ec6b569a25fa5cac?x=x&version=2",
            "client": "website",
            "content": "<p>btb replacement is random, because i was too sleepy to implement LRU :P ; its totally a hack, don't use it as an example of good style etc...</p>\n<p>but entry points are GetPrediction() / UpdatePredictor() / TrackOtherInst()</p>",
            "content_type": "text/html",
            "display_recipient": "computer-architecture",
            "flags": [
                "read",
                "historical"
            ],
            "id": 205278240,
            "is_me_message": false,
            "last_edit_timestamp": 1595963729,
            "reactions": [],
            "recipient_id": 420424,
            "sender_email": "vsrinivas@ops101.org",
            "sender_full_name": "Venkatesh Srinivas (he) (S2'18)",
            "sender_id": 120560,
            "sender_realm_str": "recurse",
            "stream_id": 224433,
            "subject": "experiments w/ historical conditional branch predictor resea",
            "submessages": [],
            "timestamp": 1595963709,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/6b283009bf4375b73d9628bb245367165da5c360?x=x&version=2",
            "client": "ZulipElectron",
            "content": "<p>interesting. i should take a look at it</p>",
            "content_type": "text/html",
            "display_recipient": "computer-architecture",
            "flags": [
                "read",
                "historical"
            ],
            "id": 205379756,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 420424,
            "sender_email": "anthonyabeo@gmail.com",
            "sender_full_name": "Anthony Anabila Abeo (he) (SP2'20)",
            "sender_id": 276302,
            "sender_realm_str": "recurse",
            "stream_id": 224433,
            "subject": "experiments w/ historical conditional branch predictor resea",
            "submessages": [],
            "timestamp": 1596039974,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/2c519a6780d234da6797a581ec6b569a25fa5cac?x=x&version=2",
            "client": "website",
            "content": "<p>All my experiments are at <a href=\"https://github.com/vsrinivas/cbp2016.eval\">https://github.com/vsrinivas/cbp2016.eval</a> ;</p>",
            "content_type": "text/html",
            "display_recipient": "computer-architecture",
            "flags": [
                "read",
                "historical"
            ],
            "id": 205710757,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 420424,
            "sender_email": "vsrinivas@ops101.org",
            "sender_full_name": "Venkatesh Srinivas (he) (S2'18)",
            "sender_id": 120560,
            "sender_realm_str": "recurse",
            "stream_id": 224433,
            "subject": "experiments w/ historical conditional branch predictor resea",
            "submessages": [],
            "timestamp": 1596341729,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/2c519a6780d234da6797a581ec6b569a25fa5cac?x=x&version=2",
            "client": "website",
            "content": "<p>Joel is continuing this; he ran into a complexity-whoa moment when attempting to build this w/ full registered I$ (registered addresses on input to the block rams and registered outputs); plus the mux in instruction fetch that selects next $IP was so hard to get to meet timing. asynchronous outputs on the I$ BRAMs might make this more viable.</p>\n<p>((that mux selects between IP+4 and a predicted IP, selected based on the prediction structures. (there are multiple);))</p>",
            "content_type": "text/html",
            "display_recipient": "computer-architecture",
            "flags": [
                "read",
                "historical"
            ],
            "id": 205711143,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 420424,
            "sender_email": "vsrinivas@ops101.org",
            "sender_full_name": "Venkatesh Srinivas (he) (S2'18)",
            "sender_id": 120560,
            "sender_realm_str": "recurse",
            "stream_id": 224433,
            "subject": "mapping an OOO core to an fpga!",
            "submessages": [],
            "timestamp": 1596342480,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/2c519a6780d234da6797a581ec6b569a25fa5cac?x=x&version=2",
            "client": "website",
            "content": "<p>One new experiment that worked particularly well! <a href=\"https://github.com/vsrinivas/cbp2016.eval/blob/master/tour2/predictor.h\">https://github.com/vsrinivas/cbp2016.eval/blob/master/tour2/predictor.h</a></p>\n<p>A tournament predictor w/ a meta-predictor indexed (either by $PC or $PC and a GHR mashed together) of two gshare components; the two gshare components use the same underlying tagless storage. the only difference between the two components is that one uses the (short) history vector directly and one folds a longer history vector down via XOR.</p>\n<p>the idea is not unlike the thing that 2bc-gskew / TAGE observed, that different history lengths would be good for diff branches... just that i never saw anyone try it w/ plain old gshare. in my experiments so far, this seems like a particularly good {complexity,storage} to performance tradeoff -- this outperforms all my prior experiments even though those have more 'complex' pieces like btb filtering / agree prediction available.</p>",
            "content_type": "text/html",
            "display_recipient": "computer-architecture",
            "flags": [
                "read",
                "historical"
            ],
            "id": 205965587,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 420424,
            "sender_email": "vsrinivas@ops101.org",
            "sender_full_name": "Venkatesh Srinivas (he) (S2'18)",
            "sender_id": 120560,
            "sender_realm_str": "recurse",
            "stream_id": 224433,
            "subject": "experiments w/ historical conditional branch predictor resea",
            "submessages": [],
            "timestamp": 1596577993,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/6b283009bf4375b73d9628bb245367165da5c360?x=x&version=2",
            "client": "ZulipElectron",
            "content": "<p>Computer Architecture with RISC-V webinar.</p>\n<p><a href=\"https://event.on24.com/eventRegistration/EventLobbyServlet?target=reg20.jsp&amp;referrer=https%3A%2F%2Funiversity.imgtec.com%2Fteaching-download%2F&amp;eventid=2607666&amp;sessionid=1&amp;key=EFAA007E11691CC380DC15E08EFBDDF0&amp;regTag=&amp;sourcepage=register\">https://event.on24.com/eventRegistration/EventLobbyServlet?target=reg20.jsp&amp;referrer=https%3A%2F%2Funiversity.imgtec.com%2Fteaching-download%2F&amp;eventid=2607666&amp;sessionid=1&amp;key=EFAA007E11691CC380DC15E08EFBDDF0&amp;regTag=&amp;sourcepage=register</a></p>",
            "content_type": "text/html",
            "display_recipient": "computer-architecture",
            "flags": [
                "read",
                "historical"
            ],
            "id": 211987919,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 420424,
            "sender_email": "anthonyabeo@gmail.com",
            "sender_full_name": "Anthony Anabila Abeo (he) (SP2'20)",
            "sender_id": 276302,
            "sender_realm_str": "recurse",
            "stream_id": 224433,
            "subject": "RVfpga Course",
            "submessages": [],
            "timestamp": 1601594348,
            "topic_links": [],
            "type": "stream"
        }
    ],
    "msg": "",
    "result": "success"
}
