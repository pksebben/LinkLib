{
    "anchor": 101187312,
    "found_anchor": true,
    "found_newest": true,
    "found_oldest": false,
    "history_limited": false,
    "messages": [
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4d074af6cc341ef51b25bb2f738cdb11?d=identicon&version=1",
            "client": "website",
            "content": "<p>Thanks for taking the time to think about this <span class=\"user-mention\" data-user-email=\"alan@hackerschool.com\">@Alan O'Donnell</span>, I really really appreciate it.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 101187200,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "vaibhavsagar@gmail.com",
            "sender_full_name": "Vaibhav Sagar (he) (F1'16)",
            "sender_id": 100041,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Help with pipes",
            "submessages": [],
            "timestamp": 1474053153,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4d074af6cc341ef51b25bb2f738cdb11?d=identicon&version=1",
            "client": "website",
            "content": "<p>or I could just use <code>unsafePerformIO</code> <img alt=\":winking_face:\" class=\"emoji\" src=\"/static/third/gemoji/images/emoji/winking_face.png\" title=\":winking_face:\"> </p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 101187312,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "vaibhavsagar@gmail.com",
            "sender_full_name": "Vaibhav Sagar (he) (F1'16)",
            "sender_id": 100041,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Help with pipes",
            "submessages": [],
            "timestamp": 1474053408,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p>Yeah :)</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 101187319,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Help with pipes",
            "submessages": [],
            "timestamp": 1474053443,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4d074af6cc341ef51b25bb2f738cdb11?d=identicon&version=1",
            "client": "website",
            "content": "<p>The advantage of <code>pipes</code> (as you recognised) is that <code>pipes-attoparsec</code> makes reusing my parsing logic a lot easier.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 101187360,
            "is_me_message": false,
            "last_edit_timestamp": 1474053584,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "vaibhavsagar@gmail.com",
            "sender_full_name": "Vaibhav Sagar (he) (F1'16)",
            "sender_id": 100041,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Help with pipes",
            "submessages": [],
            "timestamp": 1474053526,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4d074af6cc341ef51b25bb2f738cdb11?d=identicon&version=1",
            "client": "website",
            "content": "<p>and <code>pipes-zlib</code> seems pretty rock solid when decompressing</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 101187366,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "vaibhavsagar@gmail.com",
            "sender_full_name": "Vaibhav Sagar (he) (F1'16)",
            "sender_id": 100041,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Help with pipes",
            "submessages": [],
            "timestamp": 1474053564,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"vaibhavsagar@gmail.com\">@Vaibhav Sagar (F1'16)</span> here's a start for what I'm thinking of: <a href=\"https://gist.github.com/cqfd/c64acb1e99ec8cf0ae8f4d38afaea389\" target=\"_blank\" title=\"https://gist.github.com/cqfd/c64acb1e99ec8cf0ae8f4d38afaea389\">https://gist.github.com/cqfd/c64acb1e99ec8cf0ae8f4d38afaea389</a></p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 101189952,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Help with pipes",
            "submessages": [],
            "timestamp": 1474058829,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p>I'll post some more example code in a sec--I've almost (I think?) got it parsing pack files, I'm just trying to figure out if I understand how pack entries are supposed to be formatted.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 101189966,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Help with pipes",
            "submessages": [],
            "timestamp": 1474058880,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p>But the main fun combinator is <code>uncompressed</code>, which, given an attoparsec parser <code>p</code>, gives you a <code>Prsr</code> that will use <code>p</code> after uncompressing with zlib.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 101190068,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Help with pipes",
            "submessages": [],
            "timestamp": 1474059005,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p>I'm using this document for the parsing formats: <a href=\"http://git.rsbx.net/Documents/Git_Data_Formats.txt\" target=\"_blank\" title=\"http://git.rsbx.net/Documents/Git_Data_Formats.txt\">http://git.rsbx.net/Documents/Git_Data_Formats.txt</a>. Is that what you used?</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 101190077,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Help with pipes",
            "submessages": [],
            "timestamp": 1474059033,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p>But at any rate, at the end of the day you can use this approach to write all of your parsers in monadic/attoparsec style, but they can also do decompression (actually, anything in IO, but you could restrict that if you wanted to).</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 101190089,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Help with pipes",
            "submessages": [],
            "timestamp": 1474059088,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4d074af6cc341ef51b25bb2f738cdb11?d=identicon&version=1",
            "client": "website",
            "content": "<p>Thanks so much! I will have to study this closely and get back to you. I used <a href=\"https://github.com/git/git/blob/master/Documentation/technical/pack-format.txt\" target=\"_blank\" title=\"https://github.com/git/git/blob/master/Documentation/technical/pack-format.txt\">https://github.com/git/git/blob/master/Documentation/technical/pack-format.txt</a></p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 101190092,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "vaibhavsagar@gmail.com",
            "sender_full_name": "Vaibhav Sagar (he) (F1'16)",
            "sender_id": 100041,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Help with pipes",
            "submessages": [],
            "timestamp": 1474059120,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p>Oh interesting, I looked at that too and figured it didn't have enough info for me to figure out what to do :)</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 101190132,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Help with pipes",
            "submessages": [],
            "timestamp": 1474059161,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p>E.g. how did you know the format to expect once you've decompressed things in the packfile?</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 101190136,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Help with pipes",
            "submessages": [],
            "timestamp": 1474059196,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4d074af6cc341ef51b25bb2f738cdb11?d=identicon&version=1",
            "client": "website",
            "content": "<p>Your source looks quite good, I used a combination of the spec, <a href=\"http://stefan.saasen.me/articles/git-clone-in-haskell-from-the-bottom-up/#pack_file_format\" target=\"_blank\" title=\"http://stefan.saasen.me/articles/git-clone-in-haskell-from-the-bottom-up/#pack_file_format\">http://stefan.saasen.me/articles/git-clone-in-haskell-from-the-bottom-up/#pack_file_format</a>, and <span class=\"user-mention\" data-user-email=\"aditya@adityamukerjee.net\">@Aditya Mukerjee (SP1'15)</span>'s <a href=\"https://codewords.recurse.com/issues/three/unpacking-git-packfiles\" target=\"_blank\" title=\"https://codewords.recurse.com/issues/three/unpacking-git-packfiles\">https://codewords.recurse.com/issues/three/unpacking-git-packfiles</a></p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 101190176,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "vaibhavsagar@gmail.com",
            "sender_full_name": "Vaibhav Sagar (he) (F1'16)",
            "sender_id": 100041,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Help with pipes",
            "submessages": [],
            "timestamp": 1474059250,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p>I've been messing around by just parsing whatever happened to be compressed, and then looking at the output, e.g. \"tree abcdefg...\"</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 101190179,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Help with pipes",
            "submessages": [],
            "timestamp": 1474059262,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p>Ah, cool.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 101190180,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Help with pipes",
            "submessages": [],
            "timestamp": 1474059265,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p>Ok, I'll post a full repo later today with what I've got, so you can see my attoparsec parsers too.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 101190196,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Help with pipes",
            "submessages": [],
            "timestamp": 1474059311,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4d074af6cc341ef51b25bb2f738cdb11?d=identicon&version=1",
            "client": "website",
            "content": "<p>also I think I have unwittingly nerd-sniped you</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 101190198,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "vaibhavsagar@gmail.com",
            "sender_full_name": "Vaibhav Sagar (he) (F1'16)",
            "sender_id": 100041,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Help with pipes",
            "submessages": [],
            "timestamp": 1474059315,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p>Ah, yeah ;)</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 101190202,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Help with pipes",
            "submessages": [],
            "timestamp": 1474059324,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4d074af6cc341ef51b25bb2f738cdb11?d=identicon&version=1",
            "client": "website",
            "content": "<p>I wasn't expecting to get someone else to implement git object parsers</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 101190205,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "vaibhavsagar@gmail.com",
            "sender_full_name": "Vaibhav Sagar (he) (F1'16)",
            "sender_id": 100041,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Help with pipes",
            "submessages": [],
            "timestamp": 1474059339,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p>I'm learning a lot--I had a rough idea for the monad transformer approach I wanted, but I had never really implemented that approach myself. (The <code>type Prsr a = ExceptT String (StateT ByteString IO) a</code> bit.)</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 101190254,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Help with pipes",
            "submessages": [],
            "timestamp": 1474059394,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4d074af6cc341ef51b25bb2f738cdb11?d=identicon&version=1",
            "client": "website",
            "content": "<p>the one thing I haven't mentioned yet is that <code>git clone</code> transfers a packfile, so streaming might be important in that scenario</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 101190262,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "vaibhavsagar@gmail.com",
            "sender_full_name": "Vaibhav Sagar (he) (F1'16)",
            "sender_id": 100041,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Help with pipes",
            "submessages": [],
            "timestamp": 1474059430,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p>How come?</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 101190263,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Help with pipes",
            "submessages": [],
            "timestamp": 1474059446,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4d074af6cc341ef51b25bb2f738cdb11?d=identicon&version=1",
            "client": "website",
            "content": "<p>so I can do <code>duffer clone</code> and have it actually work :)</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 101190267,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "vaibhavsagar@gmail.com",
            "sender_full_name": "Vaibhav Sagar (he) (F1'16)",
            "sender_id": 100041,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Help with pipes",
            "submessages": [],
            "timestamp": 1474059480,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p>But why do you have to stream anything though?</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 101190304,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Help with pipes",
            "submessages": [],
            "timestamp": 1474059496,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p>Just because it's a lot of data?</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 101190308,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Help with pipes",
            "submessages": [],
            "timestamp": 1474059508,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4d074af6cc341ef51b25bb2f738cdb11?d=identicon&version=1",
            "client": "website",
            "content": "<p>hmm, I guess I don't</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 101190309,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "vaibhavsagar@gmail.com",
            "sender_full_name": "Vaibhav Sagar (he) (F1'16)",
            "sender_id": 100041,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Help with pipes",
            "submessages": [],
            "timestamp": 1474059511,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4d074af6cc341ef51b25bb2f738cdb11?d=identicon&version=1",
            "client": "website",
            "content": "<p>it's not necessarily that much data</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 101190312,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "vaibhavsagar@gmail.com",
            "sender_full_name": "Vaibhav Sagar (he) (F1'16)",
            "sender_id": 100041,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Help with pipes",
            "submessages": [],
            "timestamp": 1474059527,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p>Yeah, I don't mean to say streaming is bad--I should think more about if this approach is friendly to streaming, probably not :/</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 101190320,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Help with pipes",
            "submessages": [],
            "timestamp": 1474059563,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4d074af6cc341ef51b25bb2f738cdb11?d=identicon&version=1",
            "client": "website",
            "content": "<p>even <code>git</code>'s git repo is &lt;70MB</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 101190322,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "vaibhavsagar@gmail.com",
            "sender_full_name": "Vaibhav Sagar (he) (F1'16)",
            "sender_id": 100041,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Help with pipes",
            "submessages": [],
            "timestamp": 1474059587,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4d074af6cc341ef51b25bb2f738cdb11?d=identicon&version=1",
            "client": "website",
            "content": "<p>in multiple packfiles</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 101190361,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "vaibhavsagar@gmail.com",
            "sender_full_name": "Vaibhav Sagar (he) (F1'16)",
            "sender_id": 100041,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Help with pipes",
            "submessages": [],
            "timestamp": 1474059603,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p>It's cool that attoparsec does support streaming in a nice way, since you can feed partial input, etc. Hmm.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 101190365,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Help with pipes",
            "submessages": [],
            "timestamp": 1474059615,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p>Quick sanity check though: is the format of packed objects different from their unpacked version? E.g. I uncompressed part of the packfile and got:</p>\n<div class=\"codehilite\"><pre>tree 496d6428b9cf92981dc9495211e6e1120fb6f2ba\\nauthor Alan O&#39;Donnell &lt;alan.m.odonnell@gmail.com&gt; 1473869913 -0400\\ncommitter Alan O&#39;Donnell &lt;alan.m.odonnell@gmail.com&gt; 1473869913 -0400\\n\\nAdd file a.\\n\n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 101190381,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Help with pipes",
            "submessages": [],
            "timestamp": 1474059673,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4d074af6cc341ef51b25bb2f738cdb11?d=identicon&version=1",
            "client": "website",
            "content": "<p>yes, the header is missing</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 101190383,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "vaibhavsagar@gmail.com",
            "sender_full_name": "Vaibhav Sagar (he) (F1'16)",
            "sender_id": 100041,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Help with pipes",
            "submessages": [],
            "timestamp": 1474059687,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4d074af6cc341ef51b25bb2f738cdb11?d=identicon&version=1",
            "client": "website",
            "content": "<p>the unpacked version would have \"tree &lt;length&gt;\\0\" at the beginning</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 101190386,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "vaibhavsagar@gmail.com",
            "sender_full_name": "Vaibhav Sagar (he) (F1'16)",
            "sender_id": 100041,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Help with pipes",
            "submessages": [],
            "timestamp": 1474059716,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p>Great, I was confused there.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 101190425,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Help with pipes",
            "submessages": [],
            "timestamp": 1474059730,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4d074af6cc341ef51b25bb2f738cdb11?d=identicon&version=1",
            "client": "website",
            "content": "<p>it sounds like your code will be better than some of my code</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 101190430,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "vaibhavsagar@gmail.com",
            "sender_full_name": "Vaibhav Sagar (he) (F1'16)",
            "sender_id": 100041,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Help with pipes",
            "submessages": [],
            "timestamp": 1474059764,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p>For me the main goal is that there ought to be a way to express these parsers in the usual monadic style; they shouldn't depend on whether you need to stream anything.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 101190435,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Help with pipes",
            "submessages": [],
            "timestamp": 1474059808,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4d074af6cc341ef51b25bb2f738cdb11?d=identicon&version=1",
            "client": "website",
            "content": "<p>you should make a pull request :), I would love to have &gt;1 contributor</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 101190436,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "vaibhavsagar@gmail.com",
            "sender_full_name": "Vaibhav Sagar (he) (F1'16)",
            "sender_id": 100041,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Help with pipes",
            "submessages": [],
            "timestamp": 1474059818,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4d074af6cc341ef51b25bb2f738cdb11?d=identicon&version=1",
            "client": "website",
            "content": "<p>this sounds like a philosophical objection to zlib's habit of eating uncompressed data that follows decompressed data</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 101190479,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "vaibhavsagar@gmail.com",
            "sender_full_name": "Vaibhav Sagar (he) (F1'16)",
            "sender_id": 100041,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Help with pipes",
            "submessages": [],
            "timestamp": 1474059882,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p>The <code>Data.Streaming.Zlib</code> module doesn't though--they give you a function <code>Z. getUnusedInflate</code> that gives you the leftover, not-compressed stuff.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 101190490,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Help with pipes",
            "submessages": [],
            "timestamp": 1474059954,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4d074af6cc341ef51b25bb2f738cdb11?d=identicon&version=1",
            "client": "website",
            "content": "<p>you're right, but the interface to that is terrible, hence pipes-zlib</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 101190529,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "vaibhavsagar@gmail.com",
            "sender_full_name": "Vaibhav Sagar (he) (F1'16)",
            "sender_id": 100041,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Help with pipes",
            "submessages": [],
            "timestamp": 1474059982,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p>Well, my <code>inflateWithRemainder</code> function isn't so bad ;)</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 101190530,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Help with pipes",
            "submessages": [],
            "timestamp": 1474060001,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p>That's simpler imo that using pipes, right?</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 101190533,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Help with pipes",
            "submessages": [],
            "timestamp": 1474060015,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4d074af6cc341ef51b25bb2f738cdb11?d=identicon&version=1",
            "client": "website",
            "content": "<p>I just really want a function in the Zlib library that doesn't require <code>MonadIO</code> that does <code>getUnusedInflate</code></p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 101190534,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "vaibhavsagar@gmail.com",
            "sender_full_name": "Vaibhav Sagar (he) (F1'16)",
            "sender_id": 100041,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Help with pipes",
            "submessages": [],
            "timestamp": 1474060021,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4d074af6cc341ef51b25bb2f738cdb11?d=identicon&version=1",
            "client": "website",
            "content": "<p>your function is definitely an improvement</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 101190540,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "vaibhavsagar@gmail.com",
            "sender_full_name": "Vaibhav Sagar (he) (F1'16)",
            "sender_id": 100041,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Help with pipes",
            "submessages": [],
            "timestamp": 1474060034,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p>I think we're stuck with the MonadIO part, at least as long as Haskell is calling out to C. I think.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 101190545,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Help with pipes",
            "submessages": [],
            "timestamp": 1474060067,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4d074af6cc341ef51b25bb2f738cdb11?d=identicon&version=1",
            "client": "website",
            "content": "<p>I didn't realise the two went together</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 101190585,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "vaibhavsagar@gmail.com",
            "sender_full_name": "Vaibhav Sagar (he) (F1'16)",
            "sender_id": 100041,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Help with pipes",
            "submessages": [],
            "timestamp": 1474060096,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p>I think that's the only reason why the IO is in there; otherwise this could be a pure function.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 101190587,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Help with pipes",
            "submessages": [],
            "timestamp": 1474060117,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4d074af6cc341ef51b25bb2f738cdb11?d=identicon&version=1",
            "client": "website",
            "content": "<p>Haskell must have some way of calling C code without incurring an <code>IO</code> constraint</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 101190588,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "vaibhavsagar@gmail.com",
            "sender_full_name": "Vaibhav Sagar (he) (F1'16)",
            "sender_id": 100041,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Help with pipes",
            "submessages": [],
            "timestamp": 1474060127,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p>Hmm, googling around, looks like you can't :(</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 101190593,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Help with pipes",
            "submessages": [],
            "timestamp": 1474060169,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p>But yeah, maybe this is a situation for <code>unsafePerformIO</code>.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 101190595,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Help with pipes",
            "submessages": [],
            "timestamp": 1474060191,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4d074af6cc341ef51b25bb2f738cdb11?d=identicon&version=1",
            "client": "website",
            "content": "<p>I feel that this is a situation where <code>unsafePerformIO</code> is appropriate</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 101190635,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "vaibhavsagar@gmail.com",
            "sender_full_name": "Vaibhav Sagar (he) (F1'16)",
            "sender_id": 100041,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Help with pipes",
            "submessages": [],
            "timestamp": 1474060211,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4d074af6cc341ef51b25bb2f738cdb11?d=identicon&version=1",
            "client": "website",
            "content": "<p>Fascinating. According to this, allocating memory for C code is a side effect so even referentially transparent C code needs to be in <code>IO</code>: <a href=\"http://book.realworldhaskell.org/read/interfacing-with-c-the-ffi.html#x_eO1\" target=\"_blank\" title=\"http://book.realworldhaskell.org/read/interfacing-with-c-the-ffi.html#x_eO1\">http://book.realworldhaskell.org/read/interfacing-with-c-the-ffi.html#x_eO1</a></p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 101190733,
            "is_me_message": false,
            "last_edit_timestamp": 1474060851,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "vaibhavsagar@gmail.com",
            "sender_full_name": "Vaibhav Sagar (he) (F1'16)",
            "sender_id": 100041,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Help with pipes",
            "submessages": [],
            "timestamp": 1474060451,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4d074af6cc341ef51b25bb2f738cdb11?d=identicon&version=1",
            "client": "website",
            "content": "<p>I'm assuming the post on r/haskell was from you? An added complication is that one type of entry is an offset delta, where the offset is the number of bytes you have to scan backwards in the current packfile to find the start of the base object to resolve against. This means you have to keep track of the number of bytes read so far, and using <code>match</code> will break if you decompress the input before <code>attoparsec</code> gets to it.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 101219235,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "vaibhavsagar@gmail.com",
            "sender_full_name": "Vaibhav Sagar (he) (F1'16)",
            "sender_id": 100041,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Help with pipes",
            "submessages": [],
            "timestamp": 1474134643,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4d074af6cc341ef51b25bb2f738cdb11?d=identicon&version=1",
            "client": "website",
            "content": "<p>It's a pretty hairy problem which would be a lot easier if the compressed length were included in the pack entry header.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 101219241,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "vaibhavsagar@gmail.com",
            "sender_full_name": "Vaibhav Sagar (he) (F1'16)",
            "sender_id": 100041,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Help with pipes",
            "submessages": [],
            "timestamp": 1474134686,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"vaibhavsagar@gmail.com\">@Vaibhav Sagar (F1'16)</span> yeah, that's me--first post on r/haskell, haha :)</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 101225922,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Help with pipes",
            "submessages": [],
            "timestamp": 1474153106,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p>Ah, interesting, I haven't gotten that far yet. Hmm.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 101225927,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Help with pipes",
            "submessages": [],
            "timestamp": 1474153190,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4d074af6cc341ef51b25bb2f738cdb11?d=identicon&version=1",
            "client": "website",
            "content": "<p>As someone who flirted briefly with point-free style and wrote some incomprehensible functions, I definitely learned a lot from this: <a href=\"https://www.youtube.com/watch?v=seVSlKazsNk\" target=\"_blank\" title=\"https://www.youtube.com/watch?v=seVSlKazsNk\">https://www.youtube.com/watch?v=seVSlKazsNk</a></p>\n<div class=\"message_inline_image\"><a href=\"https://www.youtube.com/watch?v=seVSlKazsNk\" target=\"_blank\" title=\"https://www.youtube.com/watch?v=seVSlKazsNk\"><img src=\"https://i.ytimg.com/vi/seVSlKazsNk/default.jpg\"></a></div>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 101226349,
            "is_me_message": false,
            "last_edit_timestamp": 1474154343,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "vaibhavsagar@gmail.com",
            "sender_full_name": "Vaibhav Sagar (he) (F1'16)",
            "sender_id": 100041,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "\"Point-Free or Die: Tacit Programming in Haskell and Beyond\"",
            "submessages": [],
            "timestamp": 1474154335,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4d074af6cc341ef51b25bb2f738cdb11?d=identicon&version=1",
            "client": "website",
            "content": "<p>Only just started watching this but it looks like he's using Comic Sans unironically: <a href=\"https://www.youtube.com/watch?v=uR_VzYxvbxg\" target=\"_blank\" title=\"https://www.youtube.com/watch?v=uR_VzYxvbxg\">https://www.youtube.com/watch?v=uR_VzYxvbxg</a></p>\n<div class=\"message_inline_image\"><a href=\"https://www.youtube.com/watch?v=uR_VzYxvbxg\" target=\"_blank\" title=\"https://www.youtube.com/watch?v=uR_VzYxvbxg\"><img src=\"https://i.ytimg.com/vi/uR_VzYxvbxg/default.jpg\"></a></div>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 101244061,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "vaibhavsagar@gmail.com",
            "sender_full_name": "Vaibhav Sagar (he) (F1'16)",
            "sender_id": 100041,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Squeezing Haskell into Nine Constructors by SPJ",
            "submessages": [],
            "timestamp": 1474203777,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p>Yeah, SPJ always uses comic sans :)</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 101245418,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Squeezing Haskell into Nine Constructors by SPJ",
            "submessages": [],
            "timestamp": 1474207681,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p>By the way, SPJ and Joe Armstrong did an amazingly adorable interview together several years ago, well worth watching: <a href=\"https://www.infoq.com/interviews/armstrong-peyton-jones-erlang-haskell\" target=\"_blank\" title=\"https://www.infoq.com/interviews/armstrong-peyton-jones-erlang-haskell\">https://www.infoq.com/interviews/armstrong-peyton-jones-erlang-haskell</a></p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 101245456,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Squeezing Haskell into Nine Constructors by SPJ",
            "submessages": [],
            "timestamp": 1474207734,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4d074af6cc341ef51b25bb2f738cdb11?d=identicon&version=1",
            "client": "website",
            "content": "<p>Will check this out, thank you :)</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 101246134,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "vaibhavsagar@gmail.com",
            "sender_full_name": "Vaibhav Sagar (he) (F1'16)",
            "sender_id": 100041,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Squeezing Haskell into Nine Constructors by SPJ",
            "submessages": [],
            "timestamp": 1474209670,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/5741d3f5ad703c633e2c62e564b1ef0e?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"alan@hackerschool.com\">@Alan O'Donnell</span> that was really enjoyable</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 101256596,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "connor@cdosborn.com",
            "sender_full_name": "Connor Osborn (F1'14)",
            "sender_id": 6427,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Squeezing Haskell into Nine Constructors by SPJ",
            "submessages": [],
            "timestamp": 1474238855,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p>Random update on this saga, I've been digging into attoparsec's internals. I'm trying to use <a href=\"https://hackage.haskell.org/package/zlib-0.6.1.1/docs/Codec-Compression-Zlib.html\" target=\"_blank\" title=\"https://hackage.haskell.org/package/zlib-0.6.1.1/docs/Codec-Compression-Zlib.html\">https://hackage.haskell.org/package/zlib-0.6.1.1/docs/Codec-Compression-Zlib.html</a>, which does in fact have a pure, incremental zlib api.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 101327482,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Help with pipes",
            "submessages": [],
            "timestamp": 1474401376,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p>I want to implement a <code>compressed :: Attoparsec.Parser a -&gt; Attoparsec.Parser a</code> combinator, where <code>compressed someParser</code> is a parser that matches whatever <code>someParser</code> matches, but after inflating with zlib. I think there ought to be an easy way to do this, using attoparsec's internal parser representation, but I'm struggling with it.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 101327541,
            "is_me_message": false,
            "last_edit_timestamp": 1474401516,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Help with pipes",
            "submessages": [],
            "timestamp": 1474401499,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p>I can't really figure out though if what I want to do is possible given that attoparsec hides some of its internals.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 101328455,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Help with pipes",
            "submessages": [],
            "timestamp": 1474403336,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4d074af6cc341ef51b25bb2f738cdb11?d=identicon&version=1",
            "client": "website",
            "content": "<p>I don't want this to take over your free time like it has taken over my life <img alt=\":smiley:\" class=\"emoji\" src=\"/static/third/gemoji/images/emoji/smiley.png\" title=\":smiley:\"></p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 101330425,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "vaibhavsagar@gmail.com",
            "sender_full_name": "Vaibhav Sagar (he) (F1'16)",
            "sender_id": 100041,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Help with pipes",
            "submessages": [],
            "timestamp": 1474407136,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4d074af6cc341ef51b25bb2f738cdb11?d=identicon&version=1",
            "client": "website",
            "content": "<p>I'm talking about my library at NYHUG next week! <a href=\"http://www.meetup.com/NY-Haskell/events/234305073/\" target=\"_blank\" title=\"http://www.meetup.com/NY-Haskell/events/234305073/\">http://www.meetup.com/NY-Haskell/events/234305073/</a></p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 101370519,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "vaibhavsagar@gmail.com",
            "sender_full_name": "Vaibhav Sagar (he) (F1'16)",
            "sender_id": 100041,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Duffer at NYHUG!",
            "submessages": [],
            "timestamp": 1474497149,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/efe57f0998df065470ff42c938f781cf?d=identicon&version=1",
            "client": "website",
            "content": "<p>Awesome!!!</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 101375218,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "libby@daydrea.me",
            "sender_full_name": "Libby Horacek (she) (SP1'15)",
            "sender_id": 7081,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Duffer at NYHUG!",
            "submessages": [],
            "timestamp": 1474508762,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/c7ecfe9f2764516cd0769548de80a3edb20d81cd?x=x&version=2",
            "client": "website",
            "content": "<p>I find this extraordinarily useful: <code>stack build --test --file-watch</code></p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 101395584,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "paul.biggar@gmail.com",
            "sender_full_name": "Paul Biggar (he) (F1'16)",
            "sender_id": 100048,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "continuous building",
            "submessages": [],
            "timestamp": 1474558693,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/76eabfebc63c7549301ce6e9508ac82f?d=identicon&version=1",
            "client": "website",
            "content": "<p>ooh that's very nice</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 101396066,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "harold@x.st",
            "sender_full_name": "Harold Cooper (he) (F2'16)",
            "sender_id": 9490,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "continuous building",
            "submessages": [],
            "timestamp": 1474559456,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/612c7c2a108d7850c62d1d2293a481aa42855408?x=x&version=2",
            "client": "website",
            "content": "<p>also, by using <code>stack.yaml</code> to reference dependencies on other package directories on your system, a single <code>stack build --file-watch</code> will track files across multiple packages and rebuild when any of them changes.. it's really powerful</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 101397314,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "PLRedmond@gmail.com",
            "sender_full_name": "Patrick Redmond (W'14)",
            "sender_id": 5014,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "continuous building",
            "submessages": [],
            "timestamp": 1474561726,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/612c7c2a108d7850c62d1d2293a481aa42855408?x=x&version=2",
            "client": "website",
            "content": "<p>that way you can make changes to your project, and some upstream dependencies, and have it rebuild everything transparently</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 101397320,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "PLRedmond@gmail.com",
            "sender_full_name": "Patrick Redmond (W'14)",
            "sender_id": 5014,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "continuous building",
            "submessages": [],
            "timestamp": 1474561760,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/c7ecfe9f2764516cd0769548de80a3edb20d81cd?x=x&version=2",
            "client": "website",
            "content": "<p>Oooooh!</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 101399091,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "paul.biggar@gmail.com",
            "sender_full_name": "Paul Biggar (he) (F1'16)",
            "sender_id": 100048,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "continuous building",
            "submessages": [],
            "timestamp": 1474565033,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/efe57f0998df065470ff42c938f781cf?d=identicon&version=1",
            "client": "website",
            "content": "<p>Wow, I usually just use <code>stack ghci</code> and <code>:r</code>, this looks nice!</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 101400042,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "libby@daydrea.me",
            "sender_full_name": "Libby Horacek (she) (SP1'15)",
            "sender_id": 7081,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "continuous building",
            "submessages": [],
            "timestamp": 1474566496,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/a6ac867cbcefd0b2623d3fd1b31c907ce7e83606?x=x&version=2",
            "client": "website",
            "content": "<p>ill be there!</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 101409495,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "imjuansoto@gmail.com",
            "sender_full_name": "Juan Soto (F1'16)",
            "sender_id": 100019,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Duffer at NYHUG!",
            "submessages": [],
            "timestamp": 1474585335,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/c7ecfe9f2764516cd0769548de80a3edb20d81cd?x=x&version=2",
            "client": "website",
            "content": "<p>My test suite is giving me non-deterministic errors. Anyone know how to debug this?</p>\n<p>Specifically, the problem is that if you run <a href=\"https://github.com/pbiggar/rash/blob/master/test/Spec.hs#L40\" target=\"_blank\" title=\"https://github.com/pbiggar/rash/blob/master/test/Spec.hs#L40\">https://github.com/pbiggar/rash/blob/master/test/Spec.hs#L40</a>, the test suite's output ends up in the captured output.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 101445742,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "paul.biggar@gmail.com",
            "sender_full_name": "Paul Biggar (he) (F1'16)",
            "sender_id": 100048,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "non-determinism",
            "submessages": [],
            "timestamp": 1474667245,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4d074af6cc341ef51b25bb2f738cdb11?d=identicon&version=1",
            "client": "website",
            "content": "<p>Just booked an Airbnb. This is happening!</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 101465434,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "vaibhavsagar@gmail.com",
            "sender_full_name": "Vaibhav Sagar (he) (F1'16)",
            "sender_id": 100041,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Hac Phi",
            "submessages": [],
            "timestamp": 1474721384,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/c55d5b0f6b48fe10eae3bd82fdc9ec479c66f7b7?x=x&version=1",
            "client": "website",
            "content": "<p>Hm, I'm very tempted.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 101467203,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "msteigerwalt@gmail.com",
            "sender_full_name": "Michelle Steigerwalt (she/her) (W2'17)",
            "sender_id": 7655,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Hac Phi",
            "submessages": [],
            "timestamp": 1474726201,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/f050b80594d5d59676e0620842eb0316?d=identicon&version=1",
            "client": "website",
            "content": "<p>Hello Haskell Group!<br>\nI was directed to the CIS 194 course as a good starting resource for learning haskell (<a href=\"http://www.seas.upenn.edu/~cis194/spring13/lectures.html\" target=\"_blank\" title=\"http://www.seas.upenn.edu/~cis194/spring13/lectures.html\">http://www.seas.upenn.edu/~cis194/spring13/lectures.html</a>).</p>\n<p>All the lectures are available as HTML pages, but I don't enjoy reading in my browser very much so I built it into a book. Here it is in case anyone wants to read it on a kindle/ereader/mobile device while commuting. <a href=\"/user_uploads/13/kQlhdQEwgKJGS46t7XU83oqo/CISC-194-Haskell.epub\" target=\"_blank\" title=\"CISC-194-Haskell.epub\">CISC-194-Haskell.epub</a> </p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 101551517,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "haroldtreen@gmail.com",
            "sender_full_name": "Harold Willis Treen (F2'16)",
            "sender_id": 100193,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "CIS 194 as a Book",
            "submessages": [],
            "timestamp": 1474934570,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/ff22292433214ccd87cf6ff9ae34e54ac477eab8?x=x&version=1",
            "client": "website",
            "content": "<p>Given a tree encoded as a set of nested lists (e.g.,<code>(+ 2 (+ 2 1) (+ 1 3 2)))</code>, is there a known functional algorithm that stochastically traverses the tree, applying a parametrically supplied function at a single node, with equal probability of 'landing' at any node? Note: the walk terminates after a single node is transformed.</p>\n<p>I expect the algorithm to behave as follows:<br>\n<code>(def tree '(1 (1 (1 1 1) 1) 1))</code><br>\n<code>(stochastic-tree-f-app inc tree) =&gt; (1 (1 (1 2 1) 1) 1)</code><br>\n<code>(stochastic-tree-f-app inc tree) =&gt; (1 (1 (1 1 2) 1) 1)</code><br>\n<code>(stochastic-tree-f-app inc tree) =&gt; (2 (1 (1 1 1) 1) 1)</code><br>\n<code>(stochastic-tree-f-app inc tree) =&gt; (1 (1 (1 1 1) 1) 2)</code><br>\n<code>(stochastic-tree-f-app dec tree) =&gt; (1 (1 (1 1 1) 0) 1)</code></p>\n<p>Note: a Haskell solution to this problem is fine. Anything consistent with FP principles will do.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 101607577,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "ds2643@columbia.edu",
            "sender_full_name": "David Shaked (W2'16)",
            "sender_id": 8995,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "stochastic tree traversal (cross posted from Clojure)",
            "submessages": [],
            "timestamp": 1475050562,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/07a5ba69595cc839c85aabdb8ffeabee6ad0b83e?x=x&version=1",
            "client": "website",
            "content": "<p>Two kind of not-great options:</p>\n<p>First option -- random walk on the tree. At each iteration, take a step or apply function and terminate. Pretty sure this doesn't end up with equal probability for each node (will be proportional to path length from starting point to node?). Plus issues with getting stuck in subtrees and having to figure out what you do at terminal nodes (which might make the non-uniform probability thing worse?).</p>\n<p>Second option -- skip the actual tree traversal and instead flatten the tree, generate random index in appropriate range, apply function to index, unflatten (you can probably get around the actual flattening but you at least need to know the number of elements in the tree)</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 101620213,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "sean.martin@nyu.edu",
            "sender_full_name": "Sean Martin (they) (S2'16)",
            "sender_id": 9495,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "stochastic tree traversal (cross posted from Clojure)",
            "submessages": [],
            "timestamp": 1475077554,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/ff22292433214ccd87cf6ff9ae34e54ac477eab8?x=x&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"sean.martin@nyu.edu\">@Sean Martin (S2'16)</span> second option, in my opinion, is a really good idea. It didn't occur to me that you can easily exploit the fact that structure doesn't matter in flattening if you're just trying to count nodes/elements.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 101629436,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "ds2643@columbia.edu",
            "sender_full_name": "David Shaked (W2'16)",
            "sender_id": 8995,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "stochastic tree traversal (cross posted from Clojure)",
            "submessages": [],
            "timestamp": 1475094028,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/ff22292433214ccd87cf6ff9ae34e54ac477eab8?x=x&version=1",
            "client": "website",
            "content": "<p>forgive the clojure here, but he's the solution i was looking for:<br>\n(require '[clojure.zip :as z])</p>\n<p><code>(defn stochastic-tree-f-app [f tree]</code><br>\n<code>(let [zp    (z/zipper list? seq (fn [_ c] c) tree)</code><br>\n<code>nodes (-&gt;&gt; (iterate z/next zp)</code><br>\n<code>(take-while (complement z/end?))</code><br>\n<code>(filter (comp integer? z/node))</code><br>\n<code>(into []))]</code><br>\n<code>(-&gt; (rand-nth nodes)</code><br>\n<code>(z/edit f)</code><br>\n<code>z/root)))</code></p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 101629507,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "ds2643@columbia.edu",
            "sender_full_name": "David Shaked (W2'16)",
            "sender_id": 8995,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "stochastic tree traversal (cross posted from Clojure)",
            "submessages": [],
            "timestamp": 1475094156,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/48e493d515af67a1512d977689cd051b?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"ds2643@columbia.edu\">@David Shaked (W2'16)</span>  if  you enclose your code in three backticks, it's much easier to preserve formatting, and you can even specify the language (e.g. backtick backtick backtick clojure) like so:</p>\n<div class=\"codehilite\"><pre><span class=\"p\">(</span><span class=\"nf\">require</span> <span class=\"o\">&#39;</span><span class=\"p\">[</span><span class=\"nv\">clojure.zip</span> <span class=\"ss\">:as</span> <span class=\"nv\">z</span><span class=\"p\">])</span>\n<span class=\"p\">(</span><span class=\"kd\">defn </span><span class=\"nv\">stochastic-tree-f-app</span> <span class=\"p\">[</span><span class=\"nv\">f</span> <span class=\"nv\">tree</span><span class=\"p\">]</span>\n  <span class=\"p\">(</span><span class=\"k\">let </span><span class=\"p\">[</span><span class=\"nv\">zp</span>    <span class=\"p\">(</span><span class=\"nf\">z/zipper</span> <span class=\"nv\">list?</span> <span class=\"nb\">seq </span><span class=\"p\">(</span><span class=\"k\">fn </span><span class=\"p\">[</span><span class=\"nv\">_</span> <span class=\"nv\">c</span><span class=\"p\">]</span> <span class=\"nv\">c</span><span class=\"p\">)</span> <span class=\"nv\">tree</span><span class=\"p\">)</span>\n        <span class=\"nv\">nodes</span> <span class=\"p\">(</span><span class=\"nf\">-&gt;&gt;</span> <span class=\"p\">(</span><span class=\"nb\">iterate </span><span class=\"nv\">z/next</span> <span class=\"nv\">zp</span><span class=\"p\">)</span>\n                   <span class=\"p\">(</span><span class=\"nb\">take-while </span><span class=\"p\">(</span><span class=\"nb\">complement </span><span class=\"nv\">z/end?</span><span class=\"p\">))</span>\n                   <span class=\"p\">(</span><span class=\"nb\">filter </span><span class=\"p\">(</span><span class=\"nb\">comp </span><span class=\"nv\">integer?</span> <span class=\"nv\">z/node</span><span class=\"p\">))</span>\n                   <span class=\"p\">(</span><span class=\"nb\">into </span><span class=\"p\">[]))]</span>\n    <span class=\"p\">(</span><span class=\"nb\">-&gt; </span><span class=\"p\">(</span><span class=\"nf\">rand-nth</span> <span class=\"nv\">nodes</span><span class=\"p\">)</span>\n        <span class=\"p\">(</span><span class=\"nf\">z/edit</span> <span class=\"nv\">f</span><span class=\"p\">)</span>\n        <span class=\"nv\">z/root</span><span class=\"p\">)))</span>\n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 101629879,
            "is_me_message": false,
            "last_edit_timestamp": 1475094824,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "outofthemadness@gmail.com",
            "sender_full_name": "James A. Keene (he) (m2'18)",
            "sender_id": 887,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "stochastic tree traversal (cross posted from Clojure)",
            "submessages": [],
            "timestamp": 1475094777,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/5e4aa5311affe020e4b36536287f3ec1?d=identicon&version=2",
            "client": "website",
            "content": "<p>I am studying a <a href=\"https://www.futurelearn.com/courses/functional-programming-haskell\" target=\"_blank\" title=\"https://www.futurelearn.com/courses/functional-programming-haskell\">Haskell MOOC</a>. The books recommended on the course are as follows:-</p>\n<p>(1) Real World Haskell by Bryan O'Sullivan, Don Stewart, and John Goerzen <br>\n(2) Learn You a Haskell by Miran Lipovaca<br>\n(3) Programming in Haskell by Graham Hutton<br>\n(4) Haskell: the Craft of Functional Programming by Simon Thompson.</p>\n<p>I am new to Haskell but have been exploring functional programming using Clojure and JavaScript (ES2015) for the past year or so. I want to level-up my FP skills!</p>\n<p>I am looking for recommendations of other introduction to Haskell books.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 101631099,
            "is_me_message": false,
            "last_edit_timestamp": 1475096808,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "kal_ali@hotmail.com",
            "sender_full_name": "Khalid Omar Ali (F2'15)",
            "sender_id": 8713,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Introduction to Haskell Books",
            "submessages": [],
            "timestamp": 1475096614,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/a6ac867cbcefd0b2623d3fd1b31c907ce7e83606?x=x&version=2",
            "client": "website",
            "content": "<p><a href=\"http://haskellbook.com/\" target=\"_blank\" title=\"http://haskellbook.com/\">http://haskellbook.com/</a></p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 101631388,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "imjuansoto@gmail.com",
            "sender_full_name": "Juan Soto (F1'16)",
            "sender_id": 100019,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Introduction to Haskell Books",
            "submessages": [],
            "timestamp": 1475097057,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/c7ecfe9f2764516cd0769548de80a3edb20d81cd?x=x&version=2",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"vaibhavsagar@gmail.com\">@Vaibhav Sagar (F1'16)</span> What's the blog post you had reviewing these?</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 101631651,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "paul.biggar@gmail.com",
            "sender_full_name": "Paul Biggar (he) (F1'16)",
            "sender_id": 100048,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Introduction to Haskell Books",
            "submessages": [],
            "timestamp": 1475097541,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4d074af6cc341ef51b25bb2f738cdb11?d=identicon&version=1",
            "client": "website",
            "content": "<p><a href=\"http://bitemyapp.com/posts/2014-12-31-functional-education.html\" target=\"_blank\" title=\"http://bitemyapp.com/posts/2014-12-31-functional-education.html\">http://bitemyapp.com/posts/2014-12-31-functional-education.html</a></p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 101632370,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "vaibhavsagar@gmail.com",
            "sender_full_name": "Vaibhav Sagar (he) (F1'16)",
            "sender_id": 100041,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Introduction to Haskell Books",
            "submessages": [],
            "timestamp": 1475098740,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4d074af6cc341ef51b25bb2f738cdb11?d=identicon&version=1",
            "client": "website",
            "content": "<p>Also a new edition of \"Programming in Haskell\" was released just this month! <a href=\"http://www.cs.nott.ac.uk/~pszgmh/pih.html\" target=\"_blank\" title=\"http://www.cs.nott.ac.uk/~pszgmh/pih.html\">http://www.cs.nott.ac.uk/~pszgmh/pih.html</a></p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 101632522,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "vaibhavsagar@gmail.com",
            "sender_full_name": "Vaibhav Sagar (he) (F1'16)",
            "sender_id": 100041,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Introduction to Haskell Books",
            "submessages": [],
            "timestamp": 1475098995,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/07a5ba69595cc839c85aabdb8ffeabee6ad0b83e?x=x&version=1",
            "client": "website",
            "content": "<p>The part where it takes however long your rng takes to generate one number, rather than being some function of the parameters of your random walk function is also a plus. Pretty fuzzy on Clojure, but will try to work through that one.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 101634494,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "sean.martin@nyu.edu",
            "sender_full_name": "Sean Martin (they) (S2'16)",
            "sender_id": 9495,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "stochastic tree traversal (cross posted from Clojure)",
            "submessages": [],
            "timestamp": 1475102724,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/07a5ba69595cc839c85aabdb8ffeabee6ad0b83e?x=x&version=1",
            "client": "website",
            "content": "<p>Of these, I'd say my favorite is <a href=\"http://haskellbook.com/\" target=\"_blank\" title=\"http://haskellbook.com/\">http://haskellbook.com/</a></p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 101634559,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "sean.martin@nyu.edu",
            "sender_full_name": "Sean Martin (they) (S2'16)",
            "sender_id": 9495,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Introduction to Haskell Books",
            "submessages": [],
            "timestamp": 1475102870,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/ff22292433214ccd87cf6ff9ae34e54ac477eab8?x=x&version=1",
            "client": "website",
            "content": "<p>thanks, james. I'm a bit zulip-illiterate.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 101634923,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "ds2643@columbia.edu",
            "sender_full_name": "David Shaked (W2'16)",
            "sender_id": 8995,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "stochastic tree traversal (cross posted from Clojure)",
            "submessages": [],
            "timestamp": 1475103671,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/5e4aa5311affe020e4b36536287f3ec1?d=identicon&version=2",
            "client": "website",
            "content": "<p>Thanks y'all, I have decided to start with <a href=\"http://haskellbook.com/\" target=\"_blank\" title=\"http://haskellbook.com/\">http://haskellbook.com/</a> followed by Learn You Haskell.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 101635823,
            "is_me_message": false,
            "last_edit_timestamp": 1475105658,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "kal_ali@hotmail.com",
            "sender_full_name": "Khalid Omar Ali (F2'15)",
            "sender_id": 8713,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Introduction to Haskell Books",
            "submessages": [],
            "timestamp": 1475105646,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/4b6aae6cae274fb83b0d155f0255298c2d3b22b7?x=x&version=2",
            "client": "website",
            "content": "<p>This was a refreshing read<br>\n<a href=\"https://gist.github.com/quchen/5280339\" target=\"_blank\" title=\"https://gist.github.com/quchen/5280339\">https://gist.github.com/quchen/5280339</a></p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 101735721,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "fundirap@gmail.com",
            "sender_full_name": "Panashe Machinda Fundira (he) (S1'16)",
            "sender_id": 9339,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Attempting to troll #haskell",
            "submessages": [],
            "timestamp": 1475328169,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/c55d5b0f6b48fe10eae3bd82fdc9ec479c66f7b7?x=x&version=1",
            "client": "website",
            "content": "<p>Wow, that's a nice community.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 101736100,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "msteigerwalt@gmail.com",
            "sender_full_name": "Michelle Steigerwalt (she/her) (W2'17)",
            "sender_id": 7655,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Attempting to troll #haskell",
            "submessages": [],
            "timestamp": 1475329261,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/76eabfebc63c7549301ce6e9508ac82f?d=identicon&version=1",
            "client": "website",
            "content": "<p>(nevermind)</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 101741696,
            "is_me_message": false,
            "last_edit_timestamp": 1475501136,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "harold@x.st",
            "sender_full_name": "Harold Cooper (he) (F2'16)",
            "sender_id": 9490,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Attempting to troll #haskell",
            "submessages": [],
            "timestamp": 1475344221,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/efe57f0998df065470ff42c938f781cf?d=identicon&version=1",
            "client": "website",
            "content": "<p>(nevermind)</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 101775384,
            "is_me_message": false,
            "last_edit_timestamp": 1475437863,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "libby@daydrea.me",
            "sender_full_name": "Libby Horacek (she) (SP1'15)",
            "sender_id": 7081,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Attempting to troll #haskell",
            "submessages": [],
            "timestamp": 1475437203,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/efe57f0998df065470ff42c938f781cf?d=identicon&version=1",
            "client": "website",
            "content": "<p>(nevermind)</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 101775390,
            "is_me_message": false,
            "last_edit_timestamp": 1475437856,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "libby@daydrea.me",
            "sender_full_name": "Libby Horacek (she) (SP1'15)",
            "sender_id": 7081,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Attempting to troll #haskell",
            "submessages": [],
            "timestamp": 1475437257,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4d074af6cc341ef51b25bb2f738cdb11?d=identicon&version=1",
            "client": "website",
            "content": "<p>I think <a href=\"https://github.com/gibiansky/IHaskell\" target=\"_blank\" title=\"https://github.com/gibiansky/IHaskell\">IHaskell</a> is a game changer for learning, developing, and debugging Haskell. Unfortunately, it can be a bit fiddly to set up. If anyone wants to try it and would like support setting it up don't hesitate to get in touch <img alt=\":smiley:\" class=\"emoji\" src=\"/static/third/gemoji/images/emoji/smiley.png\" title=\":smiley:\"></p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 101809716,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "vaibhavsagar@gmail.com",
            "sender_full_name": "Vaibhav Sagar (he) (F1'16)",
            "sender_id": 100041,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "IHaskell",
            "submessages": [],
            "timestamp": 1475519887,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/76eabfebc63c7549301ce6e9508ac82f?d=identicon&version=1",
            "client": "website",
            "content": "<p>oohnice, I have been loving jupyter recently, didn't realize you could do haskell in it, thanks for the hot tip! <img alt=\":fire:\" class=\"emoji\" src=\"/static/third/gemoji/images/emoji/fire.png\" title=\":fire:\"> </p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 101809863,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "harold@x.st",
            "sender_full_name": "Harold Cooper (he) (F2'16)",
            "sender_id": 9490,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "IHaskell",
            "submessages": [],
            "timestamp": 1475520213,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4d074af6cc341ef51b25bb2f738cdb11?d=identicon&version=1",
            "client": "website",
            "content": "<p>Should definitely have made this post at least a month ago.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 101809908,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "vaibhavsagar@gmail.com",
            "sender_full_name": "Vaibhav Sagar (he) (F1'16)",
            "sender_id": 100041,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "IHaskell",
            "submessages": [],
            "timestamp": 1475520250,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/efe57f0998df065470ff42c938f781cf?d=identicon&version=1",
            "client": "website",
            "content": "<p>oh, is it working again?? It was broken the last time I checked</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 101812070,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "libby@daydrea.me",
            "sender_full_name": "Libby Horacek (she) (SP1'15)",
            "sender_id": 7081,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "IHaskell",
            "submessages": [],
            "timestamp": 1475524166,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/efe57f0998df065470ff42c938f781cf?d=identicon&version=1",
            "client": "website",
            "content": "<p>oh I was thinking of <a href=\"http://try.jupyter.org\" target=\"_blank\" title=\"http://try.jupyter.org\">try.jupyter.org</a>, which is indeed broken</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 101812074,
            "is_me_message": false,
            "last_edit_timestamp": 1475524842,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "libby@daydrea.me",
            "sender_full_name": "Libby Horacek (she) (SP1'15)",
            "sender_id": 7081,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "IHaskell",
            "submessages": [],
            "timestamp": 1475524181,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/efe57f0998df065470ff42c938f781cf?d=identicon&version=1",
            "client": "website",
            "content": "<p>I really really want a Haskell playground to refer newbies to, like School of Haskell used to have</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 101812533,
            "is_me_message": false,
            "last_edit_timestamp": 1475525140,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "libby@daydrea.me",
            "sender_full_name": "Libby Horacek (she) (SP1'15)",
            "sender_id": 7081,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "IHaskell",
            "submessages": [],
            "timestamp": 1475524905,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4d074af6cc341ef51b25bb2f738cdb11?d=identicon&version=1",
            "client": "website",
            "content": "<p>Funny you should mention that <span class=\"user-mention\" data-user-email=\"libby@daydrea.me\">@Libby Horacek (W2'15)</span>, as a direct result of my talk on Wednesday I'm currently helping to get IHaskell on Sage Math Cloud, which would make me and a lot of other people very happy. Currently stuck on this bug though: <a href=\"https://github.com/gibiansky/IHaskell/issues/694\" target=\"_blank\" title=\"https://github.com/gibiansky/IHaskell/issues/694\">https://github.com/gibiansky/IHaskell/issues/694</a>. Hopefully soon I will have good news for you <img alt=\":smiley:\" class=\"emoji\" src=\"/static/third/gemoji/images/emoji/smiley.png\" title=\":smiley:\"></p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 101812787,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "vaibhavsagar@gmail.com",
            "sender_full_name": "Vaibhav Sagar (he) (F1'16)",
            "sender_id": 100041,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "IHaskell",
            "submessages": [],
            "timestamp": 1475525381,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/efe57f0998df065470ff42c938f781cf?d=identicon&version=1",
            "client": "website",
            "content": "<p>Oh awesome!! Well, I'd love to help in any way</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 101813106,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "libby@daydrea.me",
            "sender_full_name": "Libby Horacek (she) (SP1'15)",
            "sender_id": 7081,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "IHaskell",
            "submessages": [],
            "timestamp": 1475525898,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/efe57f0998df065470ff42c938f781cf?d=identicon&version=1",
            "client": "website",
            "content": "<p>I'll take a look at the bug and see if I have any ideas</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 101813109,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "libby@daydrea.me",
            "sender_full_name": "Libby Horacek (she) (SP1'15)",
            "sender_id": 7081,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "IHaskell",
            "submessages": [],
            "timestamp": 1475525921,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/5e4aa5311affe020e4b36536287f3ec1?d=identicon&version=2",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"vaibhavsagar@gmail.com\">@Vaibhav Sagar (F1'16)</span> Thank you for sharing. I been experimenting with Haskell for two weeks and so far so good.  i would like to try iHaskell. Super interested in any blog posts, write-ups, videos, or remote-pairing on setting up iHaskell.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 101815067,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "kal_ali@hotmail.com",
            "sender_full_name": "Khalid Omar Ali (F2'15)",
            "sender_id": 8713,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "IHaskell",
            "submessages": [],
            "timestamp": 1475529610,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/c52df4d54166ed7db0141bdb21c7935e502d6ddc?x=x&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"libby@daydrea.me\">@Libby Horacek (W2'15)</span> it'd be especially neat to have a playground like that supporting collaborative editing. A friend got that running as a Haskell Summer of Code project some years ago, but it bitrotted almost immediately.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 101816537,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "darius@wry.me",
            "sender_full_name": "Darius Bacon (W1'16)",
            "sender_id": 902,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "IHaskell",
            "submessages": [],
            "timestamp": 1475532654,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/efe57f0998df065470ff42c938f781cf?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"darius@wry.me\">@Darius Bacon (F2'15)</span> yeah that would be really cool</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 101817011,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "libby@daydrea.me",
            "sender_full_name": "Libby Horacek (she) (SP1'15)",
            "sender_id": 7081,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "IHaskell",
            "submessages": [],
            "timestamp": 1475533745,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/efe57f0998df065470ff42c938f781cf?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"vaibhavsagar@gmail.com\">@Vaibhav Sagar (F1'16)</span> I tried adding a request type that seemed to be missing <a href=\"https://github.com/emhoracek/IHaskell/tree/addCommInfoRequestandReply\" target=\"_blank\" title=\"https://github.com/emhoracek/IHaskell/tree/addCommInfoRequestandReply\">https://github.com/emhoracek/IHaskell/tree/addCommInfoRequestandReply</a> but I'm not sure how to test it :/</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 101818868,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "libby@daydrea.me",
            "sender_full_name": "Libby Horacek (she) (SP1'15)",
            "sender_id": 7081,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "IHaskell",
            "submessages": [],
            "timestamp": 1475537939,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4d074af6cc341ef51b25bb2f738cdb11?d=identicon&version=1",
            "client": "website",
            "content": "<p>I'll get it on the SMC account I'm using for testing. Thanks so much <span class=\"user-mention\" data-user-email=\"libby@daydrea.me\">@Libby Horacek (W2'15)</span>!</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 101820830,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "vaibhavsagar@gmail.com",
            "sender_full_name": "Vaibhav Sagar (he) (F1'16)",
            "sender_id": 100041,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "IHaskell",
            "submessages": [],
            "timestamp": 1475541921,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/efe57f0998df065470ff42c938f781cf?d=identicon&version=1",
            "client": "website",
            "content": "<p>No problem. FYI, right now my branch doesn't return a real response for CommInfoRequest -- it just always returns an empty object. I'll put some more work in it tomorrow though. :)</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 101822112,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "libby@daydrea.me",
            "sender_full_name": "Libby Horacek (she) (SP1'15)",
            "sender_id": 7081,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "IHaskell",
            "submessages": [],
            "timestamp": 1475544558,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/efe57f0998df065470ff42c938f781cf?d=identicon&version=1",
            "client": "website",
            "content": "<p>My pull request was approved! <img alt=\":party_popper:\" class=\"emoji\" src=\"/static/third/gemoji/images/emoji/party_popper.png\" title=\":party_popper:\"> </p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 101883008,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "libby@daydrea.me",
            "sender_full_name": "Libby Horacek (she) (SP1'15)",
            "sender_id": 7081,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "IHaskell",
            "submessages": [],
            "timestamp": 1475681013,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/efe57f0998df065470ff42c938f781cf?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"vaibhavsagar@gmail.com\">@Vaibhav Sagar (F1'16)</span> I would be interested in exploring how to set this up on it's own server, I want to have an <a href=\"http://ihaskell.daydrea.me\" target=\"_blank\" title=\"http://ihaskell.daydrea.me\">ihaskell.daydrea.me</a> or something</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 101883057,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "libby@daydrea.me",
            "sender_full_name": "Libby Horacek (she) (SP1'15)",
            "sender_id": 7081,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "IHaskell",
            "submessages": [],
            "timestamp": 1475681076,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/f727856d13b61ec63a08b140a5aad13a?d=identicon&version=1",
            "client": "website",
            "content": "<p>o/</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 101884083,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "rose@superluser.com",
            "sender_full_name": "Rose Ames (W2'16)",
            "sender_id": 5011,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "IHaskell",
            "submessages": [],
            "timestamp": 1475682497,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4d074af6cc341ef51b25bb2f738cdb11?d=identicon&version=1",
            "client": "website",
            "content": "<p>You can configure the Jupyter notebook server to broadcast on any IP/port of your choosing, not just localhost:888. I think it also supports username/password login <img alt=\":smile:\" class=\"emoji\" src=\"/static/third/gemoji/images/emoji/smile.png\" title=\":smile:\"></p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 101884687,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "vaibhavsagar@gmail.com",
            "sender_full_name": "Vaibhav Sagar (he) (F1'16)",
            "sender_id": 100041,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "IHaskell",
            "submessages": [],
            "timestamp": 1475683356,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4d074af6cc341ef51b25bb2f738cdb11?d=identicon&version=1",
            "client": "website",
            "content": "<p>so if you were to set it up on a server and configure your routes appropriately, this is within reach</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 101884697,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "vaibhavsagar@gmail.com",
            "sender_full_name": "Vaibhav Sagar (he) (F1'16)",
            "sender_id": 100041,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "IHaskell",
            "submessages": [],
            "timestamp": 1475683390,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4d074af6cc341ef51b25bb2f738cdb11?d=identicon&version=1",
            "client": "website",
            "content": "<p>I know this because I tried setting something like this up the day before my batch started :)</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 101884718,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "vaibhavsagar@gmail.com",
            "sender_full_name": "Vaibhav Sagar (he) (F1'16)",
            "sender_id": 100041,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "IHaskell",
            "submessages": [],
            "timestamp": 1475683424,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/07a5ba69595cc839c85aabdb8ffeabee6ad0b83e?x=x&version=1",
            "client": "website",
            "content": "<p>Previous versions at least definitely did. I used them for interactive homework assignments for a class a couple years ago.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 101884720,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "sean.martin@nyu.edu",
            "sender_full_name": "Sean Martin (they) (S2'16)",
            "sender_id": 9495,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "IHaskell",
            "submessages": [],
            "timestamp": 1475683426,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4d074af6cc341ef51b25bb2f738cdb11?d=identicon&version=1",
            "client": "website",
            "content": "<p>I think this + <a href=\"https://www.zerotier.com/\" target=\"_blank\" title=\"https://www.zerotier.com/\">ZeroTier</a> would be a fun way to always have IHaskell</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 101884781,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "vaibhavsagar@gmail.com",
            "sender_full_name": "Vaibhav Sagar (he) (F1'16)",
            "sender_id": 100041,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "IHaskell",
            "submessages": [],
            "timestamp": 1475683486,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4d074af6cc341ef51b25bb2f738cdb11?d=identicon&version=1",
            "client": "website",
            "content": "<p>You could even use <code>docker</code> + <code>ngrok</code> (or similar): <a href=\"https://github.com/gibiansky/IHaskell#docker-installation\" target=\"_blank\" title=\"https://github.com/gibiansky/IHaskell#docker-installation\">https://github.com/gibiansky/IHaskell#docker-installation</a></p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 101889115,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "vaibhavsagar@gmail.com",
            "sender_full_name": "Vaibhav Sagar (he) (F1'16)",
            "sender_id": 100041,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "IHaskell",
            "submessages": [],
            "timestamp": 1475690907,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/2b3883a91e0e0a59f3998bcc07ca66d2e9e760a6?x=x&version=1",
            "client": "website",
            "content": "<p>I'm working through WYASII48H[0] and am having problems using <code>IORef</code> to manage scopes to allow the repl'd scheme to define variables. Wondering if someone could take a look over my shoulder and see if I've just transcribed the code incorrectly, or if perhaps the tutorial is wrong?</p>\n<p>[0]: <a href=\"https://en.m.wikibooks.org/wiki/Write_Yourself_a_Scheme_in_48_Hours\" target=\"_blank\" title=\"https://en.m.wikibooks.org/wiki/Write_Yourself_a_Scheme_in_48_Hours\">https://en.m.wikibooks.org/wiki/Write_Yourself_a_Scheme_in_48_Hours</a></p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 101894362,
            "is_me_message": false,
            "last_edit_timestamp": 1475700383,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "platt.nicholas@gmail.com",
            "sender_full_name": "Nick Platt (F1'16)",
            "sender_id": 100031,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "scheme interpreter",
            "submessages": [],
            "timestamp": 1475700368,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/2b3883a91e0e0a59f3998bcc07ca66d2e9e760a6?x=x&version=1",
            "client": "website",
            "content": "<p>Nevermind, found it. I was parsing for <code>define!</code> to create variables, when it should be <code>define</code>.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 101894386,
            "is_me_message": false,
            "last_edit_timestamp": 1475700540,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "platt.nicholas@gmail.com",
            "sender_full_name": "Nick Platt (F1'16)",
            "sender_id": 100031,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "scheme interpreter",
            "submessages": [],
            "timestamp": 1475700476,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/2b3883a91e0e0a59f3998bcc07ca66d2e9e760a6?x=x&version=1",
            "client": "website",
            "content": "<p><img alt=\":face_with_cold_sweat:\" class=\"emoji\" src=\"/static/third/gemoji/images/emoji/face_with_cold_sweat.png\" title=\":face_with_cold_sweat:\">  <img alt=\":palm_tree:\" class=\"emoji\" src=\"/static/third/gemoji/images/emoji/palm_tree.png\" title=\":palm_tree:\"></p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 101894430,
            "is_me_message": false,
            "last_edit_timestamp": 1475700510,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "platt.nicholas@gmail.com",
            "sender_full_name": "Nick Platt (F1'16)",
            "sender_id": 100031,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "scheme interpreter",
            "submessages": [],
            "timestamp": 1475700492,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/dc74c778740e37ca0a7ac79ccea98f56?d=identicon&version=1",
            "client": "website",
            "content": "<p>Nice you're making headway. I couldn't do it</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 101898609,
            "is_me_message": false,
            "last_edit_timestamp": 1475708501,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "jjinking@gmail.com",
            "sender_full_name": "Joseph Kim (F1'16)",
            "sender_id": 100018,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "scheme interpreter",
            "submessages": [],
            "timestamp": 1475708489,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/efe57f0998df065470ff42c938f781cf?d=identicon&version=1",
            "client": "website",
            "content": "<p>I'm already most familiar with docker, so that's probably what I'll end up using. Never tried using ngrok though. Sounds like fun :D</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 101899279,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "libby@daydrea.me",
            "sender_full_name": "Libby Horacek (she) (SP1'15)",
            "sender_id": 7081,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "IHaskell",
            "submessages": [],
            "timestamp": 1475709880,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/a6ac867cbcefd0b2623d3fd1b31c907ce7e83606?x=x&version=2",
            "client": "website",
            "content": "<p>Saw this project and it might be interested to read the code/try it out: <a href=\"https://github.com/jaspervdj/patat\" target=\"_blank\" title=\"https://github.com/jaspervdj/patat\">https://github.com/jaspervdj/patat</a></p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 101916703,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "imjuansoto@gmail.com",
            "sender_full_name": "Juan Soto (F1'16)",
            "sender_id": 100019,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Terminal based presentations library",
            "submessages": [],
            "timestamp": 1475753376,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4d074af6cc341ef51b25bb2f738cdb11?d=identicon&version=1",
            "client": "website",
            "content": "<p>If it lets me give a presentation like <span class=\"user-mention\" data-user-email=\"juan.hernandez.babon@gmail.com\">@Juan Hern\u00e1ndez (F1'16)</span> then it'll be worth it <img alt=\":smiley:\" class=\"emoji\" src=\"/static/third/gemoji/images/emoji/smiley.png\" title=\":smiley:\"></p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 101919722,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "vaibhavsagar@gmail.com",
            "sender_full_name": "Vaibhav Sagar (he) (F1'16)",
            "sender_id": 100041,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Terminal based presentations library",
            "submessages": [],
            "timestamp": 1475760371,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/efe57f0998df065470ff42c938f781cf?d=identicon&version=1",
            "client": "website",
            "content": "<p>Have you seen Howerpoint (<a href=\"https://github.com/fokot/howerpoint\" target=\"_blank\" title=\"https://github.com/fokot/howerpoint\">https://github.com/fokot/howerpoint</a>) by RC's own <span class=\"user-mention\" data-user-email=\"frantisek.kocun@gmail.com\">@Frantisek Kocun (W1'15)</span> ?</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 101919837,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "libby@daydrea.me",
            "sender_full_name": "Libby Horacek (she) (SP1'15)",
            "sender_id": 7081,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Terminal based presentations library",
            "submessages": [],
            "timestamp": 1475760693,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4d074af6cc341ef51b25bb2f738cdb11?d=identicon&version=1",
            "client": "website",
            "content": "<p>I hadn't, thanks <span class=\"user-mention\" data-user-email=\"libby@daydrea.me\">@Libby Horacek (W2'15)</span>!</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 101919896,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "vaibhavsagar@gmail.com",
            "sender_full_name": "Vaibhav Sagar (he) (F1'16)",
            "sender_id": 100041,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Terminal based presentations library",
            "submessages": [],
            "timestamp": 1475760799,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/c7ecfe9f2764516cd0769548de80a3edb20d81cd?x=x&version=2",
            "client": "website",
            "content": "<p>OMG stack traces are super easy in Stack (and hard to google for). If you build your app with <code>stack build --trace</code> you'll get stack traces! Then replace <code>error</code>with <code>GHC.Stack.errorWithStackTrace</code> (in ghc 7.10; in ghc 8 you can keep using error), and voila - stack traces!</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 101924801,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "paul.biggar@gmail.com",
            "sender_full_name": "Paul Biggar (he) (F1'16)",
            "sender_id": 100048,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "stack stacktraces",
            "submessages": [],
            "timestamp": 1475769682,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/efe57f0998df065470ff42c938f781cf?d=identicon&version=1",
            "client": "website",
            "content": "<p>whoa :o</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 101928137,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "libby@daydrea.me",
            "sender_full_name": "Libby Horacek (she) (SP1'15)",
            "sender_id": 7081,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "stack stacktraces",
            "submessages": [],
            "timestamp": 1475775373,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/c7ecfe9f2764516cd0769548de80a3edb20d81cd?x=x&version=2",
            "client": "website",
            "content": "<p>Beware, this doubles your build time!</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 101939066,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "paul.biggar@gmail.com",
            "sender_full_name": "Paul Biggar (he) (F1'16)",
            "sender_id": 100048,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "stack stacktraces",
            "submessages": [],
            "timestamp": 1475794910,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/efe57f0998df065470ff42c938f781cf?d=identicon&version=1",
            "client": "website",
            "content": "<p>oh, ouch</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 101939106,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "libby@daydrea.me",
            "sender_full_name": "Libby Horacek (she) (SP1'15)",
            "sender_id": 7081,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "stack stacktraces",
            "submessages": [],
            "timestamp": 1475794931,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/c7ecfe9f2764516cd0769548de80a3edb20d81cd?x=x&version=2",
            "client": "website",
            "content": "<p>My build time was getting annoying, so I worked on fixing it. Some results.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 101939109,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "paul.biggar@gmail.com",
            "sender_full_name": "Paul Biggar (he) (F1'16)",
            "sender_id": 100048,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "10x-ing your build speed",
            "submessages": [],
            "timestamp": 1475794942,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/efe57f0998df065470ff42c938f781cf?d=identicon&version=1",
            "client": "website",
            "content": "<p>stack giveth and stack taketh away</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 101939112,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "libby@daydrea.me",
            "sender_full_name": "Libby Horacek (she) (SP1'15)",
            "sender_id": 7081,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "stack stacktraces",
            "submessages": [],
            "timestamp": 1475794957,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/c7ecfe9f2764516cd0769548de80a3edb20d81cd?x=x&version=2",
            "client": "website",
            "content": "<p>Using <code>stack build --trace</code> or <code>--profile</code> doubled build speed.<br>\nUsing <code>stack build --fast</code> doubled build speed.<br>\n<code>stack build -j 4</code>doesn't appear to work<br>\nFastest I found: <code>stack build --fast  --ghc-options=\"-j3 +RTS -A128m -n2m -RTS -dynamic\"</code><br>\n<code>-A</code> changed the heap size, <code>-n</code> changed another GC thing. I found these worked better than <code>-H512m</code> which was also good.<br>\n<code>-dynamic</code> reduces linking time by only building dynamic libraries.<br>\nAnother big change was my cabal file: I moved everything into the executable, instead of having a library and executable. This really reduced build time.<br>\nOverall, with --trace and nothing else my build took 37s<br>\nWith the cabal file change, and <code>stack build --fast  --ghc-options=\"-j3 +RTS -A128m -n2m -RTS -dynamic\"</code>, it took 3.5s<br>\nYMMV</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 101939223,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "paul.biggar@gmail.com",
            "sender_full_name": "Paul Biggar (he) (F1'16)",
            "sender_id": 100048,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "10x-ing your build speed",
            "submessages": [],
            "timestamp": 1475795164,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/c7ecfe9f2764516cd0769548de80a3edb20d81cd?x=x&version=2",
            "client": "website",
            "content": "<p>I dunno how testing will interact with that - it might not :-/</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 101939228,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "paul.biggar@gmail.com",
            "sender_full_name": "Paul Biggar (he) (F1'16)",
            "sender_id": 100048,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "10x-ing your build speed",
            "submessages": [],
            "timestamp": 1475795202,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/efe57f0998df065470ff42c938f781cf?d=identicon&version=1",
            "client": "website",
            "content": "<p>this is cool!</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 101939640,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "libby@daydrea.me",
            "sender_full_name": "Libby Horacek (she) (SP1'15)",
            "sender_id": 7081,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "10x-ing your build speed",
            "submessages": [],
            "timestamp": 1475796171,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/efe57f0998df065470ff42c938f781cf?d=identicon&version=1",
            "client": "website",
            "content": "<p>what do you mean about testing?</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 101939642,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "libby@daydrea.me",
            "sender_full_name": "Libby Horacek (she) (SP1'15)",
            "sender_id": 7081,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "10x-ing your build speed",
            "submessages": [],
            "timestamp": 1475796178,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/a6a0ff0a4a9a86ae7bc4524453d439bd?d=identicon&version=1",
            "client": "website",
            "content": "<p>This is really interesting! On the subject of choosing compiler flags, I read <a href=\"http://ieeexplore.ieee.org/document/4145114/?part=1\" target=\"_blank\" title=\"http://ieeexplore.ieee.org/document/4145114/?part=1\">a paper</a> last week that used performance counters- which are a registers built into your processor that can collect statistics like cache hits/misses, branch mispredictions, stalls due to dependencies, etc- as features for a machine learning algorithm to predict which subset of available flags will lead to the \"best performance\" (though they were trying to get the best run time, not decrease compile time).</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 101942774,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "annie.cherk@gmail.com",
            "sender_full_name": "Annie Cherkaev (she/they) (m4'18)",
            "sender_id": 9502,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "10x-ing your build speed",
            "submessages": [],
            "timestamp": 1475803178,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/c7ecfe9f2764516cd0769548de80a3edb20d81cd?x=x&version=2",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"annie.cherk@gmail.com\">@Annie Cherkaev (S2'16)</span> I read that - cool paper. I know the author too! (Or did, when I was in that end of academia)</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 101943132,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "paul.biggar@gmail.com",
            "sender_full_name": "Paul Biggar (he) (F1'16)",
            "sender_id": 100048,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "10x-ing your build speed",
            "submessages": [],
            "timestamp": 1475804003,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/c7ecfe9f2764516cd0769548de80a3edb20d81cd?x=x&version=2",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"libby@daydrea.me\">@Libby Horacek (W2'15)</span> I put all the files in a single \"module\" (the executable) in my cabal file. Previously, I had a testing, executable, and library section, and testing depended on the library. Now that all the files are in the executable, I don't know how to make the tests run (obvious answer, fiddle with things so tests run in the same executable)</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 101943186,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "paul.biggar@gmail.com",
            "sender_full_name": "Paul Biggar (he) (F1'16)",
            "sender_id": 100048,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "10x-ing your build speed",
            "submessages": [],
            "timestamp": 1475804116,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4d074af6cc341ef51b25bb2f738cdb11?d=identicon&version=1",
            "client": "website",
            "content": "<p>I just found this:<a href=\"https://jupyterhub.readthedocs.io/en/latest/\" target=\"_blank\" title=\"https://jupyterhub.readthedocs.io/en/latest/\">https://jupyterhub.readthedocs.io/en/latest/</a> which sounds more like what you're looking for</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 101958608,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "vaibhavsagar@gmail.com",
            "sender_full_name": "Vaibhav Sagar (he) (F1'16)",
            "sender_id": 100041,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "IHaskell",
            "submessages": [],
            "timestamp": 1475843543,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/efe57f0998df065470ff42c938f781cf?d=identicon&version=1",
            "client": "website",
            "content": "<p>oooh, I dunno, I like my <code>stack test</code>. Don't think I could give that up :)</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 101967748,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "libby@daydrea.me",
            "sender_full_name": "Libby Horacek (she) (SP1'15)",
            "sender_id": 7081,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "10x-ing your build speed",
            "submessages": [],
            "timestamp": 1475861828,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/efe57f0998df065470ff42c938f781cf?d=identicon&version=1",
            "client": "website",
            "content": "<p>I've got my hostel room and amtrak tickets <img alt=\":smiling_face_with_sunglasses:\" class=\"emoji\" src=\"/static/third/gemoji/images/emoji/smiling_face_with_sunglasses.png\" title=\":smiling_face_with_sunglasses:\"> </p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 101968572,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "libby@daydrea.me",
            "sender_full_name": "Libby Horacek (she) (SP1'15)",
            "sender_id": 7081,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Hac Phi",
            "submessages": [],
            "timestamp": 1475863327,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4d074af6cc341ef51b25bb2f738cdb11?d=identicon&version=1",
            "client": "website",
            "content": "<p>me too!</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 101969921,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "vaibhavsagar@gmail.com",
            "sender_full_name": "Vaibhav Sagar (he) (F1'16)",
            "sender_id": 100041,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Hac Phi",
            "submessages": [],
            "timestamp": 1475865519,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/c7ecfe9f2764516cd0769548de80a3edb20d81cd?x=x&version=2",
            "client": "website",
            "content": "<p>Yeah, unclear how to deal with it. I currently use `stack build --test --file-watch --exec \"myexe <a href=\"http://myfile.sh\" target=\"_blank\" title=\"http://myfile.sh\">myfile.sh</a>\", which runs tests and the example I'm currently working on, every time a file changes. It's pretty awesome!</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 101975457,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "paul.biggar@gmail.com",
            "sender_full_name": "Paul Biggar (he) (F1'16)",
            "sender_id": 100048,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "10x-ing your build speed",
            "submessages": [],
            "timestamp": 1475875942,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/5e4aa5311affe020e4b36536287f3ec1?d=identicon&version=2",
            "client": "website",
            "content": "<p>Philly - The city of Haskell-y love :) </p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 101979954,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "kal_ali@hotmail.com",
            "sender_full_name": "Khalid Omar Ali (F2'15)",
            "sender_id": 8713,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Hac Phi",
            "submessages": [],
            "timestamp": 1475885718,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4d074af6cc341ef51b25bb2f738cdb11?d=identicon&version=1",
            "client": "website",
            "content": "<p><a href=\"http://www.datahaskell.org/\" target=\"_blank\" title=\"http://www.datahaskell.org/\">http://www.datahaskell.org/</a></p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 102027477,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "vaibhavsagar@gmail.com",
            "sender_full_name": "Vaibhav Sagar (he) (F1'16)",
            "sender_id": 100041,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "dataHaskell",
            "submessages": [],
            "timestamp": 1476014770,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4d074af6cc341ef51b25bb2f738cdb11?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"sean.martin@nyu.edu\">@Sean Martin (S2'16)</span> would probably enjoy this.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 102027480,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "vaibhavsagar@gmail.com",
            "sender_full_name": "Vaibhav Sagar (he) (F1'16)",
            "sender_id": 100041,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "dataHaskell",
            "submessages": [],
            "timestamp": 1476014794,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/07a5ba69595cc839c85aabdb8ffeabee6ad0b83e?x=x&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"vaibhavsagar@gmail.com\">@Vaibhav Sagar (F1'16)</span> This is an accurate guess.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 102032718,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "sean.martin@nyu.edu",
            "sender_full_name": "Sean Martin (they) (S2'16)",
            "sender_id": 9495,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "dataHaskell",
            "submessages": [],
            "timestamp": 1476029298,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4d074af6cc341ef51b25bb2f738cdb11?d=identicon&version=1",
            "client": "website",
            "content": "<p>I'm attempting to implement the Raft consensus algorithm, and I'd heard of <a href=\"http://haskell-distributed.github.io/\" target=\"_blank\" title=\"http://haskell-distributed.github.io/\">Cloud Haskell</a> which is supposed to provide Erlang-style message passing and actors. Looking at existing Haskell implementations though, I think this might be overkill? I know Haskell has an <a href=\"https://hackage.haskell.org/package/stm\" target=\"_blank\" title=\"https://hackage.haskell.org/package/stm\">STM</a> library but I'm not sure if I could use it for this. I also found <a href=\"https://hackage.haskell.org/package/pipes-concurrency-2.0.6\" target=\"_blank\" title=\"https://hackage.haskell.org/package/pipes-concurrency-2.0.6\">pipes-concurrency</a> which confuses me even more than other <code>pipes</code> things. Can anyone point me to the right libraries to use? More generally, would I be better off trying to implement Raft in another language (i.e. Go with the test suite that MIT provides) and then translating that implementation to Haskell? Would love to hear your thoughts.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 102333045,
            "is_me_message": false,
            "last_edit_timestamp": 1476718170,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "vaibhavsagar@gmail.com",
            "sender_full_name": "Vaibhav Sagar (he) (F1'16)",
            "sender_id": 100041,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "concurrency primitives?",
            "submessages": [],
            "timestamp": 1476718146,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/a6a0ff0a4a9a86ae7bc4524453d439bd?d=identicon&version=1",
            "client": "website",
            "content": "<p>Not sure if this quite answers your question, but I've used Cloud Haskell before, for spawning processes on different machines on the same local net. I'm not too familiar with Raft, but it seems to me that you *could* use C.H. for this, I'm not sure if it's overkill. C.H. was pretty straight-forward, but I don't know if you need some finer granularity of control for Raft- C.H. just felt a little rough around the edges when I used it, and I also didn't need to push it very hard for my project. I was very briefly in a distributed systems class, and they were planning on using Go to implement Raft so that might be more idomatic... It might be nice to have that test suite, but on the other hand it might also be nice (educational? illuminating?) to have to write your own tests.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 102350177,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "annie.cherk@gmail.com",
            "sender_full_name": "Annie Cherkaev (she/they) (m4'18)",
            "sender_id": 9502,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "concurrency primitives?",
            "submessages": [],
            "timestamp": 1476751235,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4d074af6cc341ef51b25bb2f738cdb11?d=identicon&version=1",
            "client": "website",
            "content": "<p>I'm currently leaning towards implementing in Go with the MIT test suite and then porting my solution over. I have no doubt that Haskell is capable, but I found Cloud Haskell super difficult to wrap my head around and I don't know if new library + new problem space is a good combination.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 102352353,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "vaibhavsagar@gmail.com",
            "sender_full_name": "Vaibhav Sagar (he) (F1'16)",
            "sender_id": 100041,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "concurrency primitives?",
            "submessages": [],
            "timestamp": 1476756467,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p>Are you trying to run stuff on multiple machines/processes?</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 102352824,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "concurrency primitives?",
            "submessages": [],
            "timestamp": 1476757473,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p>Haskell definitely has all kinds of support for concurrency, <a href=\"http://chimera.labs.oreilly.com/books/1230000000929\" target=\"_blank\" title=\"http://chimera.labs.oreilly.com/books/1230000000929\">http://chimera.labs.oreilly.com/books/1230000000929</a> is a fun resource.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 102352831,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "concurrency primitives?",
            "submessages": [],
            "timestamp": 1476757516,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p>I've never used Cloud Haskell, but if it's Erlang-y, I imagine it would help abstract over the trickiness of running nodes on multiple machines, e.g. how do you actually communicate between them, what's the protocol, etc. So if all you care about is getting the general idea of Raft, it might be overkill.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 102352889,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "concurrency primitives?",
            "submessages": [],
            "timestamp": 1476757633,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/a6a0ff0a4a9a86ae7bc4524453d439bd?d=identicon&version=1",
            "client": "website",
            "content": "<p>^ yeah abstracting all that trickiness is exactly what Cloud Haskell does. In case it happens to be helpful, <a href=\"https://bitbucket.org/anniecherk/annie-the-ripper/src\" target=\"_blank\" title=\"https://bitbucket.org/anniecherk/annie-the-ripper/src\">here's a link</a> to an embarrassingly unenthusiastic password cracker I wrote which is a very minimal example of how to run the master/slave model on the localnet (it's 3 little files, and 2 lines at the commandline to run)... though looking at a tutorial is probably a better bet than my code. <br>\nI think an advantage of starting in Go &amp; then porting over is you also get to see how the two languages handle distributed stuff differently which is kind of nice.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 102356177,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "annie.cherk@gmail.com",
            "sender_full_name": "Annie Cherkaev (she/they) (m4'18)",
            "sender_id": 9502,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "concurrency primitives?",
            "submessages": [],
            "timestamp": 1476765527,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/a6a0ff0a4a9a86ae7bc4524453d439bd?d=identicon&version=1",
            "client": "website",
            "content": "<p>^ and by \"I wrote\" I mean \"I mostly copied from a tutorial\"</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 102356183,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "annie.cherk@gmail.com",
            "sender_full_name": "Annie Cherkaev (she/they) (m4'18)",
            "sender_id": 9502,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "concurrency primitives?",
            "submessages": [],
            "timestamp": 1476765581,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4d074af6cc341ef51b25bb2f738cdb11?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"alan@hackerschool.com\">@Alan O'Donnell</span> that book is so fascinating that I briefly considered dropping Raft altogether and just working through it instead. Then I remembered I have an abysmal track record with following a book without having a practical application to test my understanding on.  Follow-on question: what simpler concurrency abstractions would you recommend instead? I think Raft nodes map really well to actors that receive messages and act on them, which is why I thought Cloud Haskell would be a good fit. Is there a simpler actor/message passing library that doesn't try to handle multiple machines? <span class=\"user-mention\" data-user-email=\"annie.cherk@gmail.com\">@Annie Cherkaev (S2'16)</span> It sounds like doing the Go thing might be a good idea, I will go with that for now.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 102365641,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "vaibhavsagar@gmail.com",
            "sender_full_name": "Vaibhav Sagar (he) (F1'16)",
            "sender_id": 100041,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "concurrency primitives?",
            "submessages": [],
            "timestamp": 1476789848,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4d074af6cc341ef51b25bb2f738cdb11?d=identicon&version=1",
            "client": "website",
            "content": "<p>This has already been really helpful, thank you both <img alt=\":smiley:\" class=\"emoji\" src=\"/static/third/gemoji/images/emoji/smiley.png\" title=\":smiley:\"></p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 102365644,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "vaibhavsagar@gmail.com",
            "sender_full_name": "Vaibhav Sagar (he) (F1'16)",
            "sender_id": 100041,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "concurrency primitives?",
            "submessages": [],
            "timestamp": 1476789903,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/db101b45d0414192274336d5352530a7?d=identicon&version=1",
            "client": "desktop app Mac 0.5.2",
            "content": "<p><span class=\"user-mention\" data-user-email=\"jjinking@gmail.com\">@Joseph Kim (F1'16)</span> and I were working on the <a href=\"https://leetcode.com/problems/unique-binary-search-trees/\" target=\"_blank\" title=\"https://leetcode.com/problems/unique-binary-search-trees/\">count unique binary search trees problem</a> and were wondering why the runtimes of the below two functions were so different! the only thing that changed is that we left out the parameter in the second line in the second snippet</p>\n<div class=\"codehilite\"><pre>memoized_countUniqueBSTs :: Int -&gt; Integer\nmemoized_countUniqueBSTs n = (map countUniqueBSTs [0..]) !! n\n    where   countUniqueBSTs 0 = 1\n            countUniqueBSTs 1 = 1\n            countUniqueBSTs n = sum $ zipWith (*) (computedBSTs n) (reverse $ computedBSTs n)\n            computedBSTs n = map memoized_countUniqueBSTs [0..(n-1)]\n</pre></div>\n\n\n<div class=\"codehilite\"><pre>memoized_countUniqueBSTs :: Int -&gt; Integer\nmemoized_countUniqueBSTs = (map countUniqueBSTs [0..] !!)\n    where   countUniqueBSTs 0 = 1\n            countUniqueBSTs 1 = 1\n            countUniqueBSTs n = sum $ zipWith (*) (computedBSTs n) (reverse $ computedBSTs n)\n            computedBSTs n = map memoized_countUniqueBSTs [0..(n-1)]\n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 102380808,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "juliayu@princeton.edu",
            "sender_full_name": "Julia Yu (F2'16)",
            "sender_id": 100200,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "runtime question",
            "submessages": [],
            "timestamp": 1476817643,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/dc74c778740e37ca0a7ac79ccea98f56?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"juliayu@princeton.edu\">@Julia Yu (F2'16)</span> I just re-read <a href=\"http://stackoverflow.com/questions/11466284/how-is-this-fibonacci-function-memoized\" target=\"_blank\" title=\"http://stackoverflow.com/questions/11466284/how-is-this-fibonacci-function-memoized\">this</a> and it actually makes sense to me now. In short, \"it's a compiler thing\" <img alt=\":laughing:\" class=\"emoji\" src=\"/static/third/gemoji/images/emoji/laughing.png\" title=\":laughing:\"> </p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 102381936,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "jjinking@gmail.com",
            "sender_full_name": "Joseph Kim (F1'16)",
            "sender_id": 100018,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "runtime question",
            "submessages": [],
            "timestamp": 1476819520,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/efe57f0998df065470ff42c938f781cf?d=identicon&version=1",
            "client": "website",
            "content": "<p>There is currently a discussion on the Haskell reddit about this very thing!</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 102382234,
            "is_me_message": false,
            "last_edit_timestamp": 1476820085,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "libby@daydrea.me",
            "sender_full_name": "Libby Horacek (she) (SP1'15)",
            "sender_id": 7081,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "runtime question",
            "submessages": [],
            "timestamp": 1476820031,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/efe57f0998df065470ff42c938f781cf?d=identicon&version=1",
            "client": "website",
            "content": "<p><a href=\"https://www.reddit.com/r/haskell/comments/57napf/pointfree_fear_and_loathing/\" target=\"_blank\" title=\"https://www.reddit.com/r/haskell/comments/57napf/pointfree_fear_and_loathing/\">https://www.reddit.com/r/haskell/comments/57napf/pointfree_fear_and_loathing/</a></p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 102382250,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "libby@daydrea.me",
            "sender_full_name": "Libby Horacek (she) (SP1'15)",
            "sender_id": 7081,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "runtime question",
            "submessages": [],
            "timestamp": 1476820072,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/57ad6b289d2b066f6497c2c7a542f246?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"vaibhavsagar@gmail.com\">@Vaibhav Sagar (F1'16)</span> Chapter 4 of the book that <span class=\"user-mention\" data-user-email=\"alan@hackerschool.com\">@Alan O'Donnell</span> linked to is about the Par monad, which gives you the IVar abstraction for single-machine dataflow-style parallelism, aka futures, aka promises.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 102389027,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "lindsey@composition.al",
            "sender_full_name": "Lindsey Kuper (she)",
            "sender_id": 2170,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "concurrency primitives?",
            "submessages": [],
            "timestamp": 1476832327,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/57ad6b289d2b066f6497c2c7a542f246?d=identicon&version=1",
            "client": "website",
            "content": "<p>That will take away the complexity of dealing with multiple machines.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 102389075,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "lindsey@composition.al",
            "sender_full_name": "Lindsey Kuper (she)",
            "sender_id": 2170,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "concurrency primitives?",
            "submessages": [],
            "timestamp": 1476832467,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/57ad6b289d2b066f6497c2c7a542f246?d=identicon&version=1",
            "client": "website",
            "content": "<p>You could also consider using MVars, from chapter 7, which might be a closer fit to what you had in mind.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 102389132,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "lindsey@composition.al",
            "sender_full_name": "Lindsey Kuper (she)",
            "sender_id": 2170,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "concurrency primitives?",
            "submessages": [],
            "timestamp": 1476832584,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/57ad6b289d2b066f6497c2c7a542f246?d=identicon&version=1",
            "client": "website",
            "content": "<p>the IVars that the Par monad offers are actually implemented using MVars under the hood, but you get an additional determinism guarantee when using IVars</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 102389187,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "lindsey@composition.al",
            "sender_full_name": "Lindsey Kuper (she)",
            "sender_id": 2170,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "concurrency primitives?",
            "submessages": [],
            "timestamp": 1476832706,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/57ad6b289d2b066f6497c2c7a542f246?d=identicon&version=1",
            "client": "website",
            "content": "<p>(which is enforced using the type system)</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 102389192,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "lindsey@composition.al",
            "sender_full_name": "Lindsey Kuper (she)",
            "sender_id": 2170,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "concurrency primitives?",
            "submessages": [],
            "timestamp": 1476832747,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/aba1e26cd3f268ad4224f3522011f17b?d=identicon&version=1",
            "client": "website",
            "content": "<p>I am looking for the correct Emacs mode that would get Haskell indentation to work \"properly\". Right now, <code>then</code> statements stay right under the <code>if</code> even if I hit &lt;TAB&gt;. I have tried <code>haskell-indent</code> and <code>haskell-indentation</code>.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 102501189,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "baccou@normalesup.org",
            "sender_full_name": "Pierre-Yves Baccou (F'13)",
            "sender_id": 2865,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Basic indent question",
            "submessages": [],
            "timestamp": 1477067716,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/c4e6637707ff62601f3dd21ec7626095?d=identicon&version=1",
            "client": "website",
            "content": "<p>Hm, can you give an example of how you'd like it to be indented? \"Standard\" haskell indentation for if-then-else is</p>\n<div class=\"codehilite\"><pre><span class=\"nf\">foo</span> <span class=\"ow\">=</span> <span class=\"kr\">if</span> <span class=\"n\">some</span> <span class=\"n\">condition</span>\n      <span class=\"kr\">then</span> <span class=\"n\">something</span>\n      <span class=\"kr\">else</span> <span class=\"n\">something</span>\n</pre></div>\n\n\n<p>Is it not doing that, or is that not what you want?</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 102509201,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "daekharel@gmail.com",
            "sender_full_name": "Michael 'rntz' Arntzenius (he) (S2'20)",
            "sender_id": 5866,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Basic indent question",
            "submessages": [],
            "timestamp": 1477081395,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/aba1e26cd3f268ad4224f3522011f17b?d=identicon&version=1",
            "client": "desktop app Linux 0.5.1",
            "content": "<p>I want the <code>then</code> and <code>else</code> lines indented further</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 102509264,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "baccou@normalesup.org",
            "sender_full_name": "Pierre-Yves Baccou (F'13)",
            "sender_id": 2865,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Basic indent question",
            "submessages": [],
            "timestamp": 1477081461,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/aba1e26cd3f268ad4224f3522011f17b?d=identicon&version=1",
            "client": "desktop app Linux 0.5.1",
            "content": "<p>Not only would I like it more, but it's also quite common in tutorials, and examples of indentation!</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 102509295,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "baccou@normalesup.org",
            "sender_full_name": "Pierre-Yves Baccou (F'13)",
            "sender_id": 2865,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Basic indent question",
            "submessages": [],
            "timestamp": 1477081514,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/aba1e26cd3f268ad4224f3522011f17b?d=identicon&version=1",
            "client": "desktop app Linux 0.5.1",
            "content": "<p>Which makes me think there is a bug in my indenter.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 102509306,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "baccou@normalesup.org",
            "sender_full_name": "Pierre-Yves Baccou (F'13)",
            "sender_id": 2865,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Basic indent question",
            "submessages": [],
            "timestamp": 1477081551,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4d074af6cc341ef51b25bb2f738cdb11?d=identicon&version=1",
            "client": "website",
            "content": "<p>It's not just you: <a href=\"https://github.com/haskell/haskell-mode/wiki/Why-TAB-cycle-indentation-for-Haskell-is-a-hard-problem\" target=\"_blank\" title=\"https://github.com/haskell/haskell-mode/wiki/Why-TAB-cycle-indentation-for-Haskell-is-a-hard-problem\">https://github.com/haskell/haskell-mode/wiki/Why-TAB-cycle-indentation-for-Haskell-is-a-hard-problem</a></p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 102512141,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "vaibhavsagar@gmail.com",
            "sender_full_name": "Vaibhav Sagar (he) (F1'16)",
            "sender_id": 100041,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Basic indent question",
            "submessages": [],
            "timestamp": 1477086441,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/aba1e26cd3f268ad4224f3522011f17b?d=identicon&version=1",
            "client": "desktop app Linux 0.5.1",
            "content": "<p>God help me, I am going to ask the question on IRC <img alt=\":volcano:\" class=\"emoji\" src=\"/static/third/gemoji/images/emoji/volcano.png\" title=\":volcano:\"></p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 102512384,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "baccou@normalesup.org",
            "sender_full_name": "Pierre-Yves Baccou (F'13)",
            "sender_id": 2865,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Basic indent question",
            "submessages": [],
            "timestamp": 1477086870,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4d074af6cc341ef51b25bb2f738cdb11?d=identicon&version=1",
            "client": "website",
            "content": "<p><code>#haskell</code> is probably my favourite IRC channel :)</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 102512472,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "vaibhavsagar@gmail.com",
            "sender_full_name": "Vaibhav Sagar (he) (F1'16)",
            "sender_id": 100041,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Basic indent question",
            "submessages": [],
            "timestamp": 1477087014,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4d074af6cc341ef51b25bb2f738cdb11?d=identicon&version=1",
            "client": "website",
            "content": "<p><code>#haskell-beginners</code> is a close second</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 102512481,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "vaibhavsagar@gmail.com",
            "sender_full_name": "Vaibhav Sagar (he) (F1'16)",
            "sender_id": 100041,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Basic indent question",
            "submessages": [],
            "timestamp": 1477087039,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4d074af6cc341ef51b25bb2f738cdb11?d=identicon&version=1",
            "client": "website",
            "content": "<p>you will be fine</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 102512482,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "vaibhavsagar@gmail.com",
            "sender_full_name": "Vaibhav Sagar (he) (F1'16)",
            "sender_id": 100041,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Basic indent question",
            "submessages": [],
            "timestamp": 1477087043,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/df1a8a2c03bdbc563a438dbd7fe71b66?d=identicon&version=1",
            "client": "website",
            "content": "<p>i prefer</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"nf\">foo</span> <span class=\"ow\">=</span> <span class=\"kr\">if</span> <span class=\"kt\">True</span>\n  <span class=\"kr\">then</span> <span class=\"mi\">1</span>\n  <span class=\"kr\">else</span> <span class=\"mi\">2</span>\n</pre></div>\n\n\n<p>For simple functions it might seem visually nicer to have the <code>if</code> and <code>then</code> block aligned, or even have <code>then</code> block be indented further, but when you have complicated functions, horizontal real estate becomes precious! I tend to try to minimize my indentation.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 102715006,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "freshdried@gmail.com",
            "sender_full_name": "Sean Lee (he) (SP2'16)",
            "sender_id": 8985,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Basic indent question",
            "submessages": [],
            "timestamp": 1477542211,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/675466cb255ba68bf2b4e714d9371d9a0dab1e39?x=x&version=1",
            "client": "website",
            "content": "<p>As I move from reading to playing with actual code, I have been finding that entering type definitions in GHCi always produces an error:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kt\">Prelude</span><span class=\"o\">&gt;</span> <span class=\"n\">prod</span> <span class=\"ow\">::</span> <span class=\"kt\">Num</span> <span class=\"n\">a</span> <span class=\"ow\">=&gt;</span> <span class=\"p\">[</span><span class=\"n\">a</span><span class=\"p\">]</span> <span class=\"ow\">-&gt;</span> <span class=\"n\">a</span>\n\n<span class=\"o\">&lt;</span><span class=\"n\">interactive</span><span class=\"o\">&gt;:</span><span class=\"mi\">1</span><span class=\"kt\">:</span><span class=\"mi\">1</span><span class=\"kt\">:</span> <span class=\"ne\">error</span><span class=\"kt\">:</span>\n    <span class=\"err\">\u2022</span> <span class=\"kt\">Variable</span> <span class=\"n\">not</span> <span class=\"kr\">in</span> <span class=\"n\">scope</span><span class=\"kt\">:</span> <span class=\"n\">prod</span> <span class=\"ow\">::</span> <span class=\"p\">[</span><span class=\"n\">a1</span><span class=\"p\">]</span> <span class=\"ow\">-&gt;</span> <span class=\"n\">a1</span>\n    <span class=\"err\">\u2022</span> <span class=\"kt\">Perhaps</span> <span class=\"n\">you</span> <span class=\"n\">meant</span> <span class=\"err\">\u2018</span><span class=\"n\">pred</span><span class=\"err\">\u2019</span> <span class=\"p\">(</span><span class=\"n\">imported</span> <span class=\"n\">from</span> <span class=\"kt\">Prelude</span><span class=\"p\">)</span>\n</pre></div>\n\n\n<p>It turns out that type definitions in GHCi require the <code>let</code> keyword and also that all bindings be on the same input line:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kt\">Prelude</span><span class=\"o\">&gt;</span> <span class=\"kr\">let</span> <span class=\"n\">prod</span> <span class=\"ow\">::</span> <span class=\"kt\">Num</span> <span class=\"n\">a</span> <span class=\"ow\">=&gt;</span> <span class=\"p\">[</span><span class=\"n\">a</span><span class=\"p\">]</span> <span class=\"ow\">-&gt;</span> <span class=\"n\">a</span> <span class=\"p\">;</span> <span class=\"n\">prod</span> <span class=\"kt\">[]</span> <span class=\"ow\">=</span> <span class=\"mi\">1</span> <span class=\"p\">;</span> <span class=\"n\">prod</span> <span class=\"p\">(</span><span class=\"n\">n</span><span class=\"kt\">:</span><span class=\"n\">ns</span><span class=\"p\">)</span> <span class=\"ow\">=</span> <span class=\"n\">n</span> <span class=\"o\">*</span> <span class=\"n\">prod</span> <span class=\"n\">ns</span> \n<span class=\"kt\">Prelude</span><span class=\"o\">&gt;</span> <span class=\"n\">prod</span> <span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">]</span>\n<span class=\"mi\">30</span>\n</pre></div>\n\n\n<p><span class=\"user-mention\" data-user-email=\"vaibhavsagar@gmail.com\">@Vaibhav Sagar (F1'16)</span></p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 102737465,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "dpb@brannerchinese.com",
            "sender_full_name": "David P Branner (SP2'17)",
            "sender_id": 850,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Type definitions in GHCi",
            "submessages": [],
            "timestamp": 1477590023,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/57ad6b289d2b066f6497c2c7a542f246?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"dpb@brannerchinese.com\">@David Branner (W'14)</span> There is a multiline-input mode in GHCi that you can enable with <code>:set +m</code>.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 102738990,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "lindsey@composition.al",
            "sender_full_name": "Lindsey Kuper (she)",
            "sender_id": 2170,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Type definitions in GHCi",
            "submessages": [],
            "timestamp": 1477592193,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/57ad6b289d2b066f6497c2c7a542f246?d=identicon&version=1",
            "client": "website",
            "content": "<div class=\"codehilite\"><pre><span></span>Prelude&gt; :set +m\nPrelude&gt; let prod :: Num a =&gt; [a] -&gt; a\nPrelude|     prod [] = 1\nPrelude|     prod (n:ns) = n * prod ns\nPrelude| \nPrelude&gt; \n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 102739014,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "lindsey@composition.al",
            "sender_full_name": "Lindsey Kuper (she)",
            "sender_id": 2170,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Type definitions in GHCi",
            "submessages": [],
            "timestamp": 1477592262,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/a6ac867cbcefd0b2623d3fd1b31c907ce7e83606?x=x&version=2",
            "client": "website",
            "content": "<p>You can also just type <code>:{</code> to start a multi line and <code>:}</code> to end one!</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 102739081,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "imjuansoto@gmail.com",
            "sender_full_name": "Juan Soto (F1'16)",
            "sender_id": 100019,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Type definitions in GHCi",
            "submessages": [],
            "timestamp": 1477592320,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/675466cb255ba68bf2b4e714d9371d9a0dab1e39?x=x&version=1",
            "client": "website",
            "content": "<p>Ah, @V and I tried <code>:{</code> a moment ago, but it seems the indentation is required.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 102739243,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "dpb@brannerchinese.com",
            "sender_full_name": "David P Branner (SP2'17)",
            "sender_id": 850,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Type definitions in GHCi",
            "submessages": [],
            "timestamp": 1477592534,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/675466cb255ba68bf2b4e714d9371d9a0dab1e39?x=x&version=1",
            "client": "website",
            "content": "<p>Thanks, \u60a8\u5169\u4f4d.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 102739254,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "dpb@brannerchinese.com",
            "sender_full_name": "David P Branner (SP2'17)",
            "sender_id": 850,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Type definitions in GHCi",
            "submessages": [],
            "timestamp": 1477592577,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/57ad6b289d2b066f6497c2c7a542f246?d=identicon&version=1",
            "client": "website",
            "content": "<p>Yep, the indentation is required, but that's always the case anyway, whether you're in GHCi or not.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 102739826,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "lindsey@composition.al",
            "sender_full_name": "Lindsey Kuper (she)",
            "sender_id": 2170,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Type definitions in GHCi",
            "submessages": [],
            "timestamp": 1477593405,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/675466cb255ba68bf2b4e714d9371d9a0dab1e39?x=x&version=1",
            "client": "website",
            "content": "<p>Indentation doesn't seem to be required in JuPyter with Haskell bindings. But it feels like good practice.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 102739854,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "dpb@brannerchinese.com",
            "sender_full_name": "David P Branner (SP2'17)",
            "sender_id": 850,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Type definitions in GHCi",
            "submessages": [],
            "timestamp": 1477593468,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/57ad6b289d2b066f6497c2c7a542f246?d=identicon&version=1",
            "client": "website",
            "content": "<p>Oh, huh.  I don't know about Jupyter.  I just mean that it's significant in Haskell.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 102739902,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "lindsey@composition.al",
            "sender_full_name": "Lindsey Kuper (she)",
            "sender_id": 2170,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Type definitions in GHCi",
            "submessages": [],
            "timestamp": 1477593506,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/57ad6b289d2b066f6497c2c7a542f246?d=identicon&version=1",
            "client": "website",
            "content": "<p>That seems odd to me that Jupyter doesn't require it, though.  Without indentation information, wouldn't parsing Haskell be ambiguous?</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 102739919,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "lindsey@composition.al",
            "sender_full_name": "Lindsey Kuper (she)",
            "sender_id": 2170,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Type definitions in GHCi",
            "submessages": [],
            "timestamp": 1477593564,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/a6ac867cbcefd0b2623d3fd1b31c907ce7e83606?x=x&version=2",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"vaibhavsagar@gmail.com\">@Vaibhav Sagar (F1'16)</span>  is the Jupyter expert.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 102739922,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "imjuansoto@gmail.com",
            "sender_full_name": "Juan Soto (F1'16)",
            "sender_id": 100019,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Type definitions in GHCi",
            "submessages": [],
            "timestamp": 1477593572,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4d074af6cc341ef51b25bb2f738cdb11?d=identicon&version=1",
            "client": "website",
            "content": "<p>Jupyter still requires indentation <img alt=\":smile:\" class=\"emoji\" src=\"/static/third/gemoji/images/emoji/smile.png\" title=\":smile:\">, but it doesn't require you to prefix your definitions with <code>let</code> like GHCi does.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 102740069,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "vaibhavsagar@gmail.com",
            "sender_full_name": "Vaibhav Sagar (he) (F1'16)",
            "sender_id": 100041,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Type definitions in GHCi",
            "submessages": [],
            "timestamp": 1477593735,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4d074af6cc341ef51b25bb2f738cdb11?d=identicon&version=1",
            "client": "website",
            "content": "<p>which means that in cases like this no indentation is required</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 102740084,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "vaibhavsagar@gmail.com",
            "sender_full_name": "Vaibhav Sagar (he) (F1'16)",
            "sender_id": 100041,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Type definitions in GHCi",
            "submessages": [],
            "timestamp": 1477593760,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/57ad6b289d2b066f6497c2c7a542f246?d=identicon&version=1",
            "client": "website",
            "content": "<p>Ohhh!  That makes sense.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 102741011,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "lindsey@composition.al",
            "sender_full_name": "Lindsey Kuper (she)",
            "sender_id": 2170,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Type definitions in GHCi",
            "submessages": [],
            "timestamp": 1477594927,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/675466cb255ba68bf2b4e714d9371d9a0dab1e39?x=x&version=1",
            "client": "website",
            "content": "<p>I guess my question is: does _Haskell_, apart from particular implementations like GHCi and JuPyter, require definitions to be prefixed with <code>let</code>? </p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 102749909,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "dpb@brannerchinese.com",
            "sender_full_name": "David P Branner (SP2'17)",
            "sender_id": 850,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Type definitions in GHCi",
            "submessages": [],
            "timestamp": 1477610258,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/57ad6b289d2b066f6497c2c7a542f246?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"dpb@brannerchinese.com\">@David Branner (W'14)</span> The short answer is no.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 102750135,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "lindsey@composition.al",
            "sender_full_name": "Lindsey Kuper (she)",
            "sender_id": 2170,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Type definitions in GHCi",
            "submessages": [],
            "timestamp": 1477610715,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/57ad6b289d2b066f6497c2c7a542f246?d=identicon&version=1",
            "client": "website",
            "content": "<p>The longer answer:</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 102750136,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "lindsey@composition.al",
            "sender_full_name": "Lindsey Kuper (she)",
            "sender_id": 2170,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Type definitions in GHCi",
            "submessages": [],
            "timestamp": 1477610718,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/675466cb255ba68bf2b4e714d9371d9a0dab1e39?x=x&version=1",
            "client": "website",
            "content": "<p>Aye, the books don't show it.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 102750144,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "dpb@brannerchinese.com",
            "sender_full_name": "David P Branner (SP2'17)",
            "sender_id": 850,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Type definitions in GHCi",
            "submessages": [],
            "timestamp": 1477610754,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/57ad6b289d2b066f6497c2c7a542f246?d=identicon&version=1",
            "client": "website",
            "content": "<p>The GHCi prompt is weird because it accepts not only expressions at the prompt, but also statements.  When you write <code>let thing = stuff</code> at the GHCi prompt, that isn't an expression, it's a statement.</p>\n<p>(This is confusing because <code>let thing = stuff in more stuff</code> is an expression.  So we speak of <code>let</code>-statements and <code>let...in</code>-expressions, but people abuse this terminology all the time.)</p>\n<p>You cannot define a function at the GHCi prompt in the usual way.  Instead you have to write your functions in a file and then <code>:load</code> that file.  But using a <code>let</code>-statement to define your function is kind of a hack to allow you to skip that \"create a file and load the file\" step in GHCi.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 102750299,
            "is_me_message": false,
            "last_edit_timestamp": 1477611030,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "lindsey@composition.al",
            "sender_full_name": "Lindsey Kuper (she)",
            "sender_id": 2170,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Type definitions in GHCi",
            "submessages": [],
            "timestamp": 1477611015,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/57ad6b289d2b066f6497c2c7a542f246?d=identicon&version=1",
            "client": "website",
            "content": "<p>E.g., <a href=\"http://www-users.cselabs.umn.edu/classes/Fall-2016/csci5106/5106-software/using-haskell.html\" target=\"_blank\" title=\"http://www-users.cselabs.umn.edu/classes/Fall-2016/csci5106/5106-software/using-haskell.html\">here's a web page</a> that literally says, \"In GHCi, however, you cannot define new functions or values in the interpreter. You must define them in a file and load that file into GHCi.\"  Which is *basically* true, except for the <code>let</code> hack.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 102750307,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "lindsey@composition.al",
            "sender_full_name": "Lindsey Kuper (she)",
            "sender_id": 2170,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Type definitions in GHCi",
            "submessages": [],
            "timestamp": 1477611095,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/57ad6b289d2b066f6497c2c7a542f246?d=identicon&version=1",
            "client": "website",
            "content": "<p><a href=\"https://downloads.haskell.org/~ghc/latest/docs/html/users_guide/ghci.html#using-do-notation-at-the-prompt\" target=\"_blank\" title=\"https://downloads.haskell.org/~ghc/latest/docs/html/users_guide/ghci.html#using-do-notation-at-the-prompt\">Here</a> is the section of the docs that talks about how you can put statements at the prompt with <code>let</code>.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 102750359,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "lindsey@composition.al",
            "sender_full_name": "Lindsey Kuper (she)",
            "sender_id": 2170,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Type definitions in GHCi",
            "submessages": [],
            "timestamp": 1477611213,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/57ad6b289d2b066f6497c2c7a542f246?d=identicon&version=1",
            "client": "website",
            "content": "<p>Although, now that I look at it, I'm confused by this part of the docs:</p>\n<blockquote>\n<p>You can also define functions at the prompt:</p>\n<p>Prelude&gt; add a b = a + b<br>\nPrelude&gt; add 1 2<br>\n3<br>\nPrelude&gt;</p>\n</blockquote>\n<p>That doesn't work in my GHCi (which is admittedly kind of old, but).</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 102750542,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "lindsey@composition.al",
            "sender_full_name": "Lindsey Kuper (she)",
            "sender_id": 2170,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Type definitions in GHCi",
            "submessages": [],
            "timestamp": 1477611596,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/57ad6b289d2b066f6497c2c7a542f246?d=identicon&version=1",
            "client": "website",
            "content": "<p>Hmm.  Very interesting.  The above-linked docs are for GHC 8.0.1, which just came out in May.  If I look at the <a href=\"https://downloads.haskell.org/~ghc/7.8.2/docs/html/users_guide/interactive-evaluation.html\" target=\"_blank\" title=\"https://downloads.haskell.org/~ghc/7.8.2/docs/html/users_guide/interactive-evaluation.html\">slightly older version</a>, 7.8.2, it has this:</p>\n<blockquote>\n<p>Hint: you can also use let-statements to define functions at the prompt:<br>\nPrelude&gt; let add a b = a + b<br>\nPrelude&gt; add 1 2<br>\n3<br>\nPrelude&gt;</p>\n</blockquote>\n<p>which is the behavior I'm familiar with.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 102750694,
            "is_me_message": false,
            "last_edit_timestamp": 1477611971,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "lindsey@composition.al",
            "sender_full_name": "Lindsey Kuper (she)",
            "sender_id": 2170,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Type definitions in GHCi",
            "submessages": [],
            "timestamp": 1477611953,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/57ad6b289d2b066f6497c2c7a542f246?d=identicon&version=1",
            "client": "website",
            "content": "<p>Did this change between 7.8 and 8.0?</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 102750759,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "lindsey@composition.al",
            "sender_full_name": "Lindsey Kuper (she)",
            "sender_id": 2170,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Type definitions in GHCi",
            "submessages": [],
            "timestamp": 1477612049,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/57ad6b289d2b066f6497c2c7a542f246?d=identicon&version=1",
            "client": "website",
            "content": "<p>*requisite link to the classic article on the fundamental question of the web: <a href=\"http://www.ftrain.com/wwic.html\" target=\"_blank\" title=\"http://www.ftrain.com/wwic.html\">\"Why wasn't I consulted?\"</a>*</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 102750805,
            "is_me_message": false,
            "last_edit_timestamp": 1477612092,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "lindsey@composition.al",
            "sender_full_name": "Lindsey Kuper (she)",
            "sender_id": 2170,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Type definitions in GHCi",
            "submessages": [],
            "timestamp": 1477612086,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4d074af6cc341ef51b25bb2f738cdb11?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"lindsey@composition.al\">@Lindsey Kuper</span> I believe the <code>let</code>less behaviour is new in GHC 8.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 102772539,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "vaibhavsagar@gmail.com",
            "sender_full_name": "Vaibhav Sagar (he) (F1'16)",
            "sender_id": 100041,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Type definitions in GHCi",
            "submessages": [],
            "timestamp": 1477664851,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/a6a0ff0a4a9a86ae7bc4524453d439bd?d=identicon&version=1",
            "client": "website",
            "content": "<p>^ Yeah it definitely is new as of GHC 8</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 102773791,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "annie.cherk@gmail.com",
            "sender_full_name": "Annie Cherkaev (she/they) (m4'18)",
            "sender_id": 9502,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Type definitions in GHCi",
            "submessages": [],
            "timestamp": 1477667111,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/57ad6b289d2b066f6497c2c7a542f246?d=identicon&version=1",
            "client": "website",
            "content": "<p>Wow, I had no idea.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 102779012,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "lindsey@composition.al",
            "sender_full_name": "Lindsey Kuper (she)",
            "sender_id": 2170,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Type definitions in GHCi",
            "submessages": [],
            "timestamp": 1477676165,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/57ad6b289d2b066f6497c2c7a542f246?d=identicon&version=1",
            "client": "website",
            "content": "<p>I feel like it would be nice if they mentioned in the manual that this is a new GHC 8 behavior.  I feel very slightly gaslit.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 102779080,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "lindsey@composition.al",
            "sender_full_name": "Lindsey Kuper (she)",
            "sender_id": 2170,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Type definitions in GHCi",
            "submessages": [],
            "timestamp": 1477676303,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/76eabfebc63c7549301ce6e9508ac82f?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"lindsey@composition.al\">@Lindsey Kuper</span> <img alt=\":computer:\" class=\"emoji\" src=\"/static/third/gemoji/images/emoji/computer.png\" title=\":computer:\"> <img alt=\":scream:\" class=\"emoji\" src=\"/static/third/gemoji/images/emoji/scream.png\" title=\":scream:\"> <img alt=\":computer:\" class=\"emoji\" src=\"/static/third/gemoji/images/emoji/computer.png\" title=\":computer:\"> I could've sworn I saw the change mentioned somewhere, but I can't easily find it, so maybe not\u2026</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 102779161,
            "is_me_message": false,
            "last_edit_timestamp": 1477676483,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "harold@x.st",
            "sender_full_name": "Harold Cooper (he) (F2'16)",
            "sender_id": 9490,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Type definitions in GHCi",
            "submessages": [],
            "timestamp": 1477676461,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/57ad6b289d2b066f6497c2c7a542f246?d=identicon&version=1",
            "client": "website",
            "content": "<p>I just looked at <a href=\"https://downloads.haskell.org/~ghc/8.0.1/docs/html/users_guide/8.0.1-notes.html\" target=\"_blank\" title=\"https://downloads.haskell.org/~ghc/8.0.1/docs/html/users_guide/8.0.1-notes.html\">the 8.0.1 release notes</a> and couldn't find it...</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 102779212,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "lindsey@composition.al",
            "sender_full_name": "Lindsey Kuper (she)",
            "sender_id": 2170,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Type definitions in GHCi",
            "submessages": [],
            "timestamp": 1477676589,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/57ad6b289d2b066f6497c2c7a542f246?d=identicon&version=1",
            "client": "website",
            "content": "<p>It's not the most important thing in the world, but now I'm irritated at myself for telling <span class=\"user-mention\" data-user-email=\"dpb@brannerchinese.com\">@David Branner (W'14)</span> something that's now wrong.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 102779307,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "lindsey@composition.al",
            "sender_full_name": "Lindsey Kuper (she)",
            "sender_id": 2170,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Type definitions in GHCi",
            "submessages": [],
            "timestamp": 1477676767,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/07a5ba69595cc839c85aabdb8ffeabee6ad0b83e?x=x&version=1",
            "client": "website",
            "content": "<p>Some friends and I looked into this after being very confused and I think there's a Github issue which is the extent of the documentation for this change.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 102781843,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "sean.martin@nyu.edu",
            "sender_full_name": "Sean Martin (they) (S2'16)",
            "sender_id": 9495,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Type definitions in GHCi",
            "submessages": [],
            "timestamp": 1477680575,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/07a5ba69595cc839c85aabdb8ffeabee6ad0b83e?x=x&version=1",
            "client": "website",
            "content": "<p>But I can't track it down.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 102782059,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "sean.martin@nyu.edu",
            "sender_full_name": "Sean Martin (they) (S2'16)",
            "sender_id": 9495,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Type definitions in GHCi",
            "submessages": [],
            "timestamp": 1477680888,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/675466cb255ba68bf2b4e714d9371d9a0dab1e39?x=x&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"lindsey@composition.al\">@Lindsey Kuper</span>:</p>\n<blockquote>\n<p>It's not the most important thing in the world, but now I'm irritated at myself for telling @<strong>David Branner</strong> something that's now wrong.</p>\n</blockquote>\n<p>I think of it as correct locally, but now out of scope.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 102795390,
            "is_me_message": false,
            "last_edit_timestamp": 1477707969,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "dpb@brannerchinese.com",
            "sender_full_name": "David P Branner (SP2'17)",
            "sender_id": 850,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Type definitions in GHCi",
            "submessages": [],
            "timestamp": 1477707941,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4d074af6cc341ef51b25bb2f738cdb11?d=identicon&version=1",
            "client": "website",
            "content": "<p>This seems cool! <a href=\"https://twitter.com/1HaskellADay\" target=\"_blank\" title=\"https://twitter.com/1HaskellADay\">https://twitter.com/1HaskellADay</a></p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 103528335,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "vaibhavsagar@gmail.com",
            "sender_full_name": "Vaibhav Sagar (he) (F1'16)",
            "sender_id": 100041,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "1HaskellADay",
            "submessages": [],
            "timestamp": 1479325353,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4d074af6cc341ef51b25bb2f738cdb11?d=identicon&version=1",
            "client": "website",
            "content": "<p>repo: <a href=\"https://github.com/geophf/1HaskellADay\" target=\"_blank\" title=\"https://github.com/geophf/1HaskellADay\">https://github.com/geophf/1HaskellADay</a></p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 103528347,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "vaibhavsagar@gmail.com",
            "sender_full_name": "Vaibhav Sagar (he) (F1'16)",
            "sender_id": 100041,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "1HaskellADay",
            "submessages": [],
            "timestamp": 1479325399,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4d074af6cc341ef51b25bb2f738cdb11?d=identicon&version=1",
            "client": "website",
            "content": "<p>Migrated from <a href=\"https://recurse.zulipchat.com/#narrow/stream/RSVPs/subject/future.20of.20programming.20discussion.20group\" target=\"_blank\" title=\"https://recurse.zulipchat.com/#narrow/stream/RSVPs/subject/future.20of.20programming.20discussion.20group\">https://recurse.zulipchat.com/#narrow/stream/RSVPs/subject/future.20of.20programming.20discussion.20group</a></p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 103569819,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "vaibhavsagar@gmail.com",
            "sender_full_name": "Vaibhav Sagar (he) (F1'16)",
            "sender_id": 100041,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Is the future of progamming Haskell?",
            "submessages": [],
            "timestamp": 1479408312,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4d074af6cc341ef51b25bb2f738cdb11?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"rodguze@gmail.com\">@Rodrigo Guzman (F2'16)</span> </p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 103569822,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "vaibhavsagar@gmail.com",
            "sender_full_name": "Vaibhav Sagar (he) (F1'16)",
            "sender_id": 100041,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Is the future of progamming Haskell?",
            "submessages": [],
            "timestamp": 1479408323,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/c62db72438b13a2504cd3834b3c5e364?d=identicon&version=1",
            "client": "desktop app Mac 0.5.2",
            "content": "<p>what do you think would help with the learning curve?</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 103569881,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "rodguze@gmail.com",
            "sender_full_name": "Rodrigo Guzman (F2'16)",
            "sender_id": 100181,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Is the future of progamming Haskell?",
            "submessages": [],
            "timestamp": 1479408389,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4d074af6cc341ef51b25bb2f738cdb11?d=identicon&version=1",
            "client": "website",
            "content": "<p>[deleted]</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 103569886,
            "is_me_message": false,
            "last_edit_timestamp": 1479408448,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "vaibhavsagar@gmail.com",
            "sender_full_name": "Vaibhav Sagar (he) (F1'16)",
            "sender_id": 100041,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Is the future of programming Haskell?",
            "submessages": [],
            "timestamp": 1479408404,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/c62db72438b13a2504cd3834b3c5e364?d=identicon&version=1",
            "client": "desktop app Mac 0.5.2",
            "content": "<p>i currently suspect there is some irreducible amount of difficulty because recursion and pattern matching</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 103569893,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "rodguze@gmail.com",
            "sender_full_name": "Rodrigo Guzman (F2'16)",
            "sender_id": 100181,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Is the future of progamming Haskell?",
            "submessages": [],
            "timestamp": 1479408422,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4d074af6cc341ef51b25bb2f738cdb11?d=identicon&version=1",
            "client": "website",
            "content": "<p>vastly vastly better documentation</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 103569901,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "vaibhavsagar@gmail.com",
            "sender_full_name": "Vaibhav Sagar (he) (F1'16)",
            "sender_id": 100041,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Is the future of progamming Haskell?",
            "submessages": [],
            "timestamp": 1479408461,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/c62db72438b13a2504cd3834b3c5e364?d=identicon&version=1",
            "client": "desktop app Mac 0.5.2",
            "content": "<p>i submit that as a symptom of issues with the community</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 103569943,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "rodguze@gmail.com",
            "sender_full_name": "Rodrigo Guzman (F2'16)",
            "sender_id": 100181,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Is the future of progamming Haskell?",
            "submessages": [],
            "timestamp": 1479408496,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/c62db72438b13a2504cd3834b3c5e364?d=identicon&version=1",
            "client": "desktop app Mac 0.5.2",
            "content": "<p>everyone i know who writes haskell feels the same way (sample size ~10)</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 103569948,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "rodguze@gmail.com",
            "sender_full_name": "Rodrigo Guzman (F2'16)",
            "sender_id": 100181,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Is the future of progamming Haskell?",
            "submessages": [],
            "timestamp": 1479408513,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4d074af6cc341ef51b25bb2f738cdb11?d=identicon&version=1",
            "client": "website",
            "content": "<p>have you ever spent time on <code>#haskell</code> and <code>#haskell-beginners</code>?</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 103569952,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "vaibhavsagar@gmail.com",
            "sender_full_name": "Vaibhav Sagar (he) (F1'16)",
            "sender_id": 100041,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Is the future of progamming Haskell?",
            "submessages": [],
            "timestamp": 1479408525,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/c62db72438b13a2504cd3834b3c5e364?d=identicon&version=1",
            "client": "desktop app Mac 0.5.2",
            "content": "<p>not recently, but probably #haskell at some point </p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 103569958,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "rodguze@gmail.com",
            "sender_full_name": "Rodrigo Guzman (F2'16)",
            "sender_id": 100181,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Is the future of progamming Haskell?",
            "submessages": [],
            "timestamp": 1479408546,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4d074af6cc341ef51b25bb2f738cdb11?d=identicon&version=1",
            "client": "website",
            "content": "<p>I don't think the community is perfect but it's a lot better than you make it sound</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 103569966,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "vaibhavsagar@gmail.com",
            "sender_full_name": "Vaibhav Sagar (he) (F1'16)",
            "sender_id": 100041,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Is the future of progamming Haskell?",
            "submessages": [],
            "timestamp": 1479408567,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/c62db72438b13a2504cd3834b3c5e364?d=identicon&version=1",
            "client": "desktop app Mac 0.5.2",
            "content": "<p>fair enough</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 103569968,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "rodguze@gmail.com",
            "sender_full_name": "Rodrigo Guzman (F2'16)",
            "sender_id": 100181,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Is the future of progamming Haskell?",
            "submessages": [],
            "timestamp": 1479408580,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/c62db72438b13a2504cd3834b3c5e364?d=identicon&version=1",
            "client": "desktop app Mac 0.5.2",
            "content": "<p>i definitely have very limited experience here</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 103569973,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "rodguze@gmail.com",
            "sender_full_name": "Rodrigo Guzman (F2'16)",
            "sender_id": 100181,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Is the future of progamming Haskell?",
            "submessages": [],
            "timestamp": 1479408595,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4d074af6cc341ef51b25bb2f738cdb11?d=identicon&version=1",
            "client": "website",
            "content": "<p>I do feel there can be some elitism, but that may be me reading into the terrible documentation for a lot of things</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 103570029,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "vaibhavsagar@gmail.com",
            "sender_full_name": "Vaibhav Sagar (he) (F1'16)",
            "sender_id": 100041,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Is the future of progamming Haskell?",
            "submessages": [],
            "timestamp": 1479408616,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4d074af6cc341ef51b25bb2f738cdb11?d=identicon&version=1",
            "client": "website",
            "content": "<p>haskell's unofficial motto is 'avoid success at all costs'</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 103570040,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "vaibhavsagar@gmail.com",
            "sender_full_name": "Vaibhav Sagar (he) (F1'16)",
            "sender_id": 100041,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Is the future of progamming Haskell?",
            "submessages": [],
            "timestamp": 1479408639,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4d074af6cc341ef51b25bb2f738cdb11?d=identicon&version=1",
            "client": "website",
            "content": "<p>some people take that to mean 'avoid success, <strong>at all costs</strong>'</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 103570046,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "vaibhavsagar@gmail.com",
            "sender_full_name": "Vaibhav Sagar (he) (F1'16)",
            "sender_id": 100041,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Is the future of progamming Haskell?",
            "submessages": [],
            "timestamp": 1479408669,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4d074af6cc341ef51b25bb2f738cdb11?d=identicon&version=1",
            "client": "website",
            "content": "<p>but it really means 'avoid <strong>success at all costs</strong>'</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 103570052,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "vaibhavsagar@gmail.com",
            "sender_full_name": "Vaibhav Sagar (he) (F1'16)",
            "sender_id": 100041,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Is the future of progamming Haskell?",
            "submessages": [],
            "timestamp": 1479408686,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4d074af6cc341ef51b25bb2f738cdb11?d=identicon&version=1",
            "client": "website",
            "content": "<p>which I think means purity is more important than practicality</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 103570068,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "vaibhavsagar@gmail.com",
            "sender_full_name": "Vaibhav Sagar (he) (F1'16)",
            "sender_id": 100041,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Is the future of progamming Haskell?",
            "submessages": [],
            "timestamp": 1479408715,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4d074af6cc341ef51b25bb2f738cdb11?d=identicon&version=1",
            "client": "website",
            "content": "<p>and Haskell is first and foremost a research language, maybe it always will be</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 103570114,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "vaibhavsagar@gmail.com",
            "sender_full_name": "Vaibhav Sagar (he) (F1'16)",
            "sender_id": 100041,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Is the future of progamming Haskell?",
            "submessages": [],
            "timestamp": 1479408741,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4d074af6cc341ef51b25bb2f738cdb11?d=identicon&version=1",
            "client": "website",
            "content": "<p>but it does have a large and fairly featureful standard library</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 103570129,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "vaibhavsagar@gmail.com",
            "sender_full_name": "Vaibhav Sagar (he) (F1'16)",
            "sender_id": 100041,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Is the future of progamming Haskell?",
            "submessages": [],
            "timestamp": 1479408770,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4d074af6cc341ef51b25bb2f738cdb11?d=identicon&version=1",
            "client": "website",
            "content": "<p>and a pretty friendly community</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 103570163,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "vaibhavsagar@gmail.com",
            "sender_full_name": "Vaibhav Sagar (he) (F1'16)",
            "sender_id": 100041,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Is the future of progamming Haskell?",
            "submessages": [],
            "timestamp": 1479408841,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4d074af6cc341ef51b25bb2f738cdb11?d=identicon&version=1",
            "client": "website",
            "content": "<p>so I don't think there is a fundamental reason that Haskell can't be the future</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 103570210,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "vaibhavsagar@gmail.com",
            "sender_full_name": "Vaibhav Sagar (he) (F1'16)",
            "sender_id": 100041,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Is the future of progamming Haskell?",
            "submessages": [],
            "timestamp": 1479408870,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/a6ac867cbcefd0b2623d3fd1b31c907ce7e83606?x=x&version=2",
            "client": "website",
            "content": "<p><a href=\"http://haskellbook.com/\" target=\"_blank\" title=\"http://haskellbook.com/\">http://haskellbook.com/</a> has been awesome for learning, I'm actually getting this stuff<br>\n<a href=\"https://www.youtube.com/watch?v=Bg9ccYzMbxc\" target=\"_blank\" title=\"https://www.youtube.com/watch?v=Bg9ccYzMbxc\">https://www.youtube.com/watch?v=Bg9ccYzMbxc</a> talk by the author, who's a cool dude and hangs out on IRC </p>\n<div class=\"youtube-video message_inline_image\"><a data-id=\"Bg9ccYzMbxc\" href=\"https://www.youtube.com/watch?v=Bg9ccYzMbxc\" target=\"_blank\" title=\"https://www.youtube.com/watch?v=Bg9ccYzMbxc\"><img src=\"https://i.ytimg.com/vi/Bg9ccYzMbxc/default.jpg\"></a></div>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 103570224,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "imjuansoto@gmail.com",
            "sender_full_name": "Juan Soto (F1'16)",
            "sender_id": 100019,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Is the future of progamming Haskell?",
            "submessages": [],
            "timestamp": 1479408923,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4d074af6cc341ef51b25bb2f738cdb11?d=identicon&version=1",
            "client": "website",
            "content": "<p>I definitely think better teaching materials/tutorials/documentation are the answer, hence my love and respect for people like <a href=\"http://www.haskellforall.com/\" target=\"_blank\" title=\"http://www.haskellforall.com/\">http://www.haskellforall.com/</a></p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 103570298,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "vaibhavsagar@gmail.com",
            "sender_full_name": "Vaibhav Sagar (he) (F1'16)",
            "sender_id": 100041,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Is the future of progamming Haskell?",
            "submessages": [],
            "timestamp": 1479409060,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4d074af6cc341ef51b25bb2f738cdb11?d=identicon&version=1",
            "client": "website",
            "content": "<p>and also <a href=\"http://bitemyapp.com/\" target=\"_blank\" title=\"http://bitemyapp.com/\">http://bitemyapp.com/</a> who is behind the Haskell book.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 103570366,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "vaibhavsagar@gmail.com",
            "sender_full_name": "Vaibhav Sagar (he) (F1'16)",
            "sender_id": 100041,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Is the future of progamming Haskell?",
            "submessages": [],
            "timestamp": 1479409182,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4d074af6cc341ef51b25bb2f738cdb11?d=identicon&version=1",
            "client": "website",
            "content": "<p>Also <span class=\"user-mention\" data-user-email=\"rodguze@gmail.com\">@Rodrigo Guzman (F2'16)</span> Python has both (limited) pattern matching and (limited) recursion, so I don't think those are the problems with Haskell's adoption.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 103570574,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "vaibhavsagar@gmail.com",
            "sender_full_name": "Vaibhav Sagar (he) (F1'16)",
            "sender_id": 100041,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Is the future of progamming Haskell?",
            "submessages": [],
            "timestamp": 1479409451,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/c62db72438b13a2504cd3834b3c5e364?d=identicon&version=1",
            "client": "desktop app Mac 0.5.2",
            "content": "<p>heh, the code dojo 25 problem is a good example here: in python, getting started: 30s, figuring out how to do it iteratively: ~5 mins,  getting  details right and bouncing between a couple of approaches: ~45 mins. now, in haskell... i still don't know how to start (though i didn't try for more than 5 mins). that python has limited pattern matching and recursion did not help me</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 103570707,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "rodguze@gmail.com",
            "sender_full_name": "Rodrigo Guzman (F2'16)",
            "sender_id": 100181,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Is the future of progamming Haskell?",
            "submessages": [],
            "timestamp": 1479409639,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4d074af6cc341ef51b25bb2f738cdb11?d=identicon&version=1",
            "client": "website",
            "content": "<p>Haskell will force you to get the details right and figure out your approach up front, and that might take 45 minutes</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 103570772,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "vaibhavsagar@gmail.com",
            "sender_full_name": "Vaibhav Sagar (he) (F1'16)",
            "sender_id": 100041,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Is the future of progamming Haskell?",
            "submessages": [],
            "timestamp": 1479409724,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4d074af6cc341ef51b25bb2f738cdb11?d=identicon&version=1",
            "client": "website",
            "content": "<p>but then there's a lot less time spent catching typos etc.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 103570782,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "vaibhavsagar@gmail.com",
            "sender_full_name": "Vaibhav Sagar (he) (F1'16)",
            "sender_id": 100041,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Is the future of progamming Haskell?",
            "submessages": [],
            "timestamp": 1479409748,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/c62db72438b13a2504cd3834b3c5e364?d=identicon&version=1",
            "client": "desktop app Mac 0.5.2",
            "content": "<p>the issue, i think, is that some problems are way more intuitive if you think abotu them imperatively/procedurally, and some others are way more intuitive recursively</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 103570783,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "rodguze@gmail.com",
            "sender_full_name": "Rodrigo Guzman (F2'16)",
            "sender_id": 100181,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Is the future of progamming Haskell?",
            "submessages": [],
            "timestamp": 1479409748,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/c62db72438b13a2504cd3834b3c5e364?d=identicon&version=1",
            "client": "desktop app Mac 0.5.2",
            "content": "<p>implementing quicksort in haskell: how to get started 30s, figuring out the approach: 5 mins, implementing 5 mins</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 103570794,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "rodguze@gmail.com",
            "sender_full_name": "Rodrigo Guzman (F2'16)",
            "sender_id": 100181,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Is the future of progamming Haskell?",
            "submessages": [],
            "timestamp": 1479409774,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4d074af6cc341ef51b25bb2f738cdb11?d=identicon&version=1",
            "client": "website",
            "content": "<p>I agree. But then any loop can be written recursively</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 103570795,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "vaibhavsagar@gmail.com",
            "sender_full_name": "Vaibhav Sagar (he) (F1'16)",
            "sender_id": 100041,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Is the future of progamming Haskell?",
            "submessages": [],
            "timestamp": 1479409780,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/c62db72438b13a2504cd3834b3c5e364?d=identicon&version=1",
            "client": "desktop app Mac 0.5.2",
            "content": "<p>okay fine, maybe more like 20 mins implementing</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 103570796,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "rodguze@gmail.com",
            "sender_full_name": "Rodrigo Guzman (F2'16)",
            "sender_id": 100181,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Is the future of progamming Haskell?",
            "submessages": [],
            "timestamp": 1479409783,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/c62db72438b13a2504cd3834b3c5e364?d=identicon&version=1",
            "client": "desktop app Mac 0.5.2",
            "content": "<p>my point is that, if you have to know the approach and details ahead of time, you have to hold the whole problem in your head at once</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 103570807,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "rodguze@gmail.com",
            "sender_full_name": "Rodrigo Guzman (F2'16)",
            "sender_id": 100181,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Is the future of progamming Haskell?",
            "submessages": [],
            "timestamp": 1479409801,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4d074af6cc341ef51b25bb2f738cdb11?d=identicon&version=1",
            "client": "website",
            "content": "<p>so it's more a matter of getting good at translating loops to recursion</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 103570826,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "vaibhavsagar@gmail.com",
            "sender_full_name": "Vaibhav Sagar (he) (F1'16)",
            "sender_id": 100041,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Is the future of progamming Haskell?",
            "submessages": [],
            "timestamp": 1479409803,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/c62db72438b13a2504cd3834b3c5e364?d=identicon&version=1",
            "client": "desktop app Mac 0.5.2",
            "content": "<p>you cant' start by exploring, saving details for later -- well you _can_ it's just a lot harder</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 103570855,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "rodguze@gmail.com",
            "sender_full_name": "Rodrigo Guzman (F2'16)",
            "sender_id": 100181,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Is the future of progamming Haskell?",
            "submessages": [],
            "timestamp": 1479409814,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4d074af6cc341ef51b25bb2f738cdb11?d=identicon&version=1",
            "client": "website",
            "content": "<p>I disagree, because you break down the problem into subproblems</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 103570861,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "vaibhavsagar@gmail.com",
            "sender_full_name": "Vaibhav Sagar (he) (F1'16)",
            "sender_id": 100041,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Is the future of progamming Haskell?",
            "submessages": [],
            "timestamp": 1479409829,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4d074af6cc341ef51b25bb2f738cdb11?d=identicon&version=1",
            "client": "website",
            "content": "<p>that's why I like <code>IHaskell</code>, because it allows me to explore while still getting all the benefits of Haskell</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 103570872,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "vaibhavsagar@gmail.com",
            "sender_full_name": "Vaibhav Sagar (he) (F1'16)",
            "sender_id": 100041,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Is the future of progamming Haskell?",
            "submessages": [],
            "timestamp": 1479409854,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/c62db72438b13a2504cd3834b3c5e364?d=identicon&version=1",
            "client": "desktop app Mac 0.5.2",
            "content": "<p>again, i have very limited experience</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 103570881,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "rodguze@gmail.com",
            "sender_full_name": "Rodrigo Guzman (F2'16)",
            "sender_id": 100181,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Is the future of progamming Haskell?",
            "submessages": [],
            "timestamp": 1479409872,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4d074af6cc341ef51b25bb2f738cdb11?d=identicon&version=1",
            "client": "website",
            "content": "<p>really wish I were able to talk about this yesterday <img alt=\":smiley:\" class=\"emoji\" src=\"/static/third/gemoji/images/emoji/smiley.png\" title=\":smiley:\"> </p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 103570883,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "vaibhavsagar@gmail.com",
            "sender_full_name": "Vaibhav Sagar (he) (F1'16)",
            "sender_id": 100041,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Is the future of progamming Haskell?",
            "submessages": [],
            "timestamp": 1479409880,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/c62db72438b13a2504cd3834b3c5e364?d=identicon&version=1",
            "client": "desktop app Mac 0.5.2",
            "content": "<p>yeah</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 103570887,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "rodguze@gmail.com",
            "sender_full_name": "Rodrigo Guzman (F2'16)",
            "sender_id": 100181,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Is the future of progamming Haskell?",
            "submessages": [],
            "timestamp": 1479409884,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4d074af6cc341ef51b25bb2f738cdb11?d=identicon&version=1",
            "client": "website",
            "content": "<p>Imagine an IPython notebook, which is basically the best Python REPL I know of, but for Haskell</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 103570891,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "vaibhavsagar@gmail.com",
            "sender_full_name": "Vaibhav Sagar (he) (F1'16)",
            "sender_id": 100041,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Is the future of progamming Haskell?",
            "submessages": [],
            "timestamp": 1479409903,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/c62db72438b13a2504cd3834b3c5e364?d=identicon&version=1",
            "client": "desktop app Mac 0.5.2",
            "content": "<p>fwiw, i was one of the raised hands on static typing being the future and i do think that haskell has been a step forward comparable to lisp</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 103570894,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "rodguze@gmail.com",
            "sender_full_name": "Rodrigo Guzman (F2'16)",
            "sender_id": 100181,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Is the future of progamming Haskell?",
            "submessages": [],
            "timestamp": 1479409906,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4d074af6cc341ef51b25bb2f738cdb11?d=identicon&version=1",
            "client": "website",
            "content": "<p>maybe if I'd proselytised a bit more I could have gotten you to install it :)</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 103570946,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "vaibhavsagar@gmail.com",
            "sender_full_name": "Vaibhav Sagar (he) (F1'16)",
            "sender_id": 100041,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Is the future of progamming Haskell?",
            "submessages": [],
            "timestamp": 1479409935,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/c62db72438b13a2504cd3834b3c5e364?d=identicon&version=1",
            "client": "desktop app Mac 0.5.2",
            "content": "<p>one of the arguments raised to support that static typing is good is: let the machine check stuff for you</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 103570951,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "rodguze@gmail.com",
            "sender_full_name": "Rodrigo Guzman (F2'16)",
            "sender_id": 100181,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Is the future of progamming Haskell?",
            "submessages": [],
            "timestamp": 1479409952,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4d074af6cc341ef51b25bb2f738cdb11?d=identicon&version=1",
            "client": "website",
            "content": "<p>it's interesting, I'm visiting my uncle right now and he has a PhD in AI</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 103570953,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "vaibhavsagar@gmail.com",
            "sender_full_name": "Vaibhav Sagar (he) (F1'16)",
            "sender_id": 100041,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Is the future of progamming Haskell?",
            "submessages": [],
            "timestamp": 1479409958,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4d074af6cc341ef51b25bb2f738cdb11?d=identicon&version=1",
            "client": "website",
            "content": "<p>he used lisp back in the day</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 103570957,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "vaibhavsagar@gmail.com",
            "sender_full_name": "Vaibhav Sagar (he) (F1'16)",
            "sender_id": 100041,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Is the future of progamming Haskell?",
            "submessages": [],
            "timestamp": 1479409971,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/c62db72438b13a2504cd3834b3c5e364?d=identicon&version=1",
            "client": "desktop app Mac 0.5.2",
            "content": "<p>saying \"any loop can be converted into recursion\" sounds like going in the opposite direction</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 103570959,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "rodguze@gmail.com",
            "sender_full_name": "Rodrigo Guzman (F2'16)",
            "sender_id": 100181,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Is the future of progamming Haskell?",
            "submessages": [],
            "timestamp": 1479409975,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/8651a8565e010cd3aebcd360badf2a92?d=identicon&version=1",
            "client": "website",
            "content": "<p>I'm confused about why people think static type checks are \"the future\" when they are definitely here now. I raised my hand because I thought we were looking for examples of past improvements to programming tooling that worked.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 103570960,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "e.alexander.segura@gmail.com",
            "sender_full_name": "Alex Segura (SP1'19)",
            "sender_id": 2899,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Is the future of progamming Haskell?",
            "submessages": [],
            "timestamp": 1479409975,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/c62db72438b13a2504cd3834b3c5e364?d=identicon&version=1",
            "client": "desktop app Mac 0.5.2",
            "content": "<p>while type inference + static typing is here now, the vastly-adopted languages don't have them</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 103570971,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "rodguze@gmail.com",
            "sender_full_name": "Rodrigo Guzman (F2'16)",
            "sender_id": 100181,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Is the future of progamming Haskell?",
            "submessages": [],
            "timestamp": 1479410004,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/c62db72438b13a2504cd3834b3c5e364?d=identicon&version=1",
            "client": "desktop app Mac 0.5.2",
            "content": "<p>and it is controversial whether they should</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 103570975,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "rodguze@gmail.com",
            "sender_full_name": "Rodrigo Guzman (F2'16)",
            "sender_id": 100181,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Is the future of progamming Haskell?",
            "submessages": [],
            "timestamp": 1479410012,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/c62db72438b13a2504cd3834b3c5e364?d=identicon&version=1",
            "client": "desktop app Mac 0.5.2",
            "content": "<p>oh haskell is installed, V, and every now and again i even try to do stuff in it</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 103571021,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "rodguze@gmail.com",
            "sender_full_name": "Rodrigo Guzman (F2'16)",
            "sender_id": 100181,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Is the future of progamming Haskell?",
            "submessages": [],
            "timestamp": 1479410051,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4d074af6cc341ef51b25bb2f738cdb11?d=identicon&version=1",
            "client": "website",
            "content": "<p>You're right <span class=\"user-mention\" data-user-email=\"e.alexander.segura@gmail.com\">@Alex Segura (F2'16)</span>, but I think more powerful type systems are the future</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 103571022,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "vaibhavsagar@gmail.com",
            "sender_full_name": "Vaibhav Sagar (he) (F1'16)",
            "sender_id": 100041,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Is the future of progamming Haskell?",
            "submessages": [],
            "timestamp": 1479410052,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/c62db72438b13a2504cd3834b3c5e364?d=identicon&version=1",
            "client": "desktop app Mac 0.5.2",
            "content": "<p>:)</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 103571023,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "rodguze@gmail.com",
            "sender_full_name": "Rodrigo Guzman (F2'16)",
            "sender_id": 100181,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Is the future of progamming Haskell?",
            "submessages": [],
            "timestamp": 1479410053,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4d074af6cc341ef51b25bb2f738cdb11?d=identicon&version=1",
            "client": "website",
            "content": "<p>but do you have IHaskell?</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 103571025,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "vaibhavsagar@gmail.com",
            "sender_full_name": "Vaibhav Sagar (he) (F1'16)",
            "sender_id": 100041,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Is the future of progamming Haskell?",
            "submessages": [],
            "timestamp": 1479410064,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/8651a8565e010cd3aebcd360badf2a92?d=identicon&version=1",
            "client": "website",
            "content": "<p>Can you give an example of a \"more powerful\" type system?</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 103571028,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "e.alexander.segura@gmail.com",
            "sender_full_name": "Alex Segura (SP1'19)",
            "sender_id": 2899,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Is the future of progamming Haskell?",
            "submessages": [],
            "timestamp": 1479410080,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/c62db72438b13a2504cd3834b3c5e364?d=identicon&version=1",
            "client": "desktop app Mac 0.5.2",
            "content": "<p>ahh...right, that i don't </p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 103571030,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "rodguze@gmail.com",
            "sender_full_name": "Rodrigo Guzman (F2'16)",
            "sender_id": 100181,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Is the future of progamming Haskell?",
            "submessages": [],
            "timestamp": 1479410082,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4d074af6cc341ef51b25bb2f738cdb11?d=identicon&version=1",
            "client": "website",
            "content": "<div class=\"codehilite\"><pre><span></span>stack install ihaskell\nihaskell install --stack\n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 103571031,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "vaibhavsagar@gmail.com",
            "sender_full_name": "Vaibhav Sagar (he) (F1'16)",
            "sender_id": 100041,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Is the future of progamming Haskell?",
            "submessages": [],
            "timestamp": 1479410084,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4d074af6cc341ef51b25bb2f738cdb11?d=identicon&version=1",
            "client": "website",
            "content": "<p>but that presumes a <code>stack</code> setup</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 103571036,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "vaibhavsagar@gmail.com",
            "sender_full_name": "Vaibhav Sagar (he) (F1'16)",
            "sender_id": 100041,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Is the future of progamming Haskell?",
            "submessages": [],
            "timestamp": 1479410100,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/c62db72438b13a2504cd3834b3c5e364?d=identicon&version=1",
            "client": "desktop app Mac 0.5.2",
            "content": "<p>i promise you i won't write another line of haskell without installing ihaskell, V</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 103571045,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "rodguze@gmail.com",
            "sender_full_name": "Rodrigo Guzman (F2'16)",
            "sender_id": 100181,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Is the future of progamming Haskell?",
            "submessages": [],
            "timestamp": 1479410124,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4d074af6cc341ef51b25bb2f738cdb11?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"e.alexander.segura@gmail.com\">@Alex Segura (F2'16)</span> the current hype is dependent types</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 103571047,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "vaibhavsagar@gmail.com",
            "sender_full_name": "Vaibhav Sagar (he) (F1'16)",
            "sender_id": 100041,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Is the future of progamming Haskell?",
            "submessages": [],
            "timestamp": 1479410127,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/c62db72438b13a2504cd3834b3c5e364?d=identicon&version=1",
            "client": "desktop app Mac 0.5.2",
            "content": "<p>as for more advanced type systems, Alex: dependent types</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 103571048,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "rodguze@gmail.com",
            "sender_full_name": "Rodrigo Guzman (F2'16)",
            "sender_id": 100181,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Is the future of progamming Haskell?",
            "submessages": [],
            "timestamp": 1479410135,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/c62db72438b13a2504cd3834b3c5e364?d=identicon&version=1",
            "client": "desktop app Mac 0.5.2",
            "content": "<p>haha</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 103571050,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "rodguze@gmail.com",
            "sender_full_name": "Rodrigo Guzman (F2'16)",
            "sender_id": 100181,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Is the future of progamming Haskell?",
            "submessages": [],
            "timestamp": 1479410139,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4d074af6cc341ef51b25bb2f738cdb11?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"rodguze@gmail.com\">@Rodrigo Guzman (F2'16)</span> if you're having issues, see if <span class=\"user-mention\" data-user-email=\"juliayu@princeton.edu\">@Julia Yu (F2'16)</span> can demo it to you</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 103571100,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "vaibhavsagar@gmail.com",
            "sender_full_name": "Vaibhav Sagar (he) (F1'16)",
            "sender_id": 100041,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Is the future of progamming Haskell?",
            "submessages": [],
            "timestamp": 1479410202,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/8651a8565e010cd3aebcd360badf2a92?d=identicon&version=1",
            "client": "website",
            "content": "<p>Do you think that a dependently typed language will ever see wide adoption?</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 103571102,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "e.alexander.segura@gmail.com",
            "sender_full_name": "Alex Segura (SP1'19)",
            "sender_id": 2899,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Is the future of progamming Haskell?",
            "submessages": [],
            "timestamp": 1479410211,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/c62db72438b13a2504cd3834b3c5e364?d=identicon&version=1",
            "client": "desktop app Mac 0.5.2",
            "content": "<p>i'm optimistic about that, but i don't think we have the language, yet</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 103571108,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "rodguze@gmail.com",
            "sender_full_name": "Rodrigo Guzman (F2'16)",
            "sender_id": 100181,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Is the future of progamming Haskell?",
            "submessages": [],
            "timestamp": 1479410232,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4d074af6cc341ef51b25bb2f738cdb11?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"e.alexander.segura@gmail.com\">@Alex Segura (F2'16)</span> I think a future version of Haskell will have dependent types</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 103571110,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "vaibhavsagar@gmail.com",
            "sender_full_name": "Vaibhav Sagar (he) (F1'16)",
            "sender_id": 100041,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Is the future of progamming Haskell?",
            "submessages": [],
            "timestamp": 1479410238,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4d074af6cc341ef51b25bb2f738cdb11?d=identicon&version=1",
            "client": "website",
            "content": "<p>there's work happening on this right now</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 103571117,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "vaibhavsagar@gmail.com",
            "sender_full_name": "Vaibhav Sagar (he) (F1'16)",
            "sender_id": 100041,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Is the future of progamming Haskell?",
            "submessages": [],
            "timestamp": 1479410254,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4d074af6cc341ef51b25bb2f738cdb11?d=identicon&version=1",
            "client": "website",
            "content": "<p>I'm getting ahead of myself: there's a research proposal for getting this into GHC: <a href=\"https://ghc.haskell.org/trac/ghc/wiki/DependentHaskell\" target=\"_blank\" title=\"https://ghc.haskell.org/trac/ghc/wiki/DependentHaskell\">https://ghc.haskell.org/trac/ghc/wiki/DependentHaskell</a></p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 103571170,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "vaibhavsagar@gmail.com",
            "sender_full_name": "Vaibhav Sagar (he) (F1'16)",
            "sender_id": 100041,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Is the future of progamming Haskell?",
            "submessages": [],
            "timestamp": 1479410305,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/c62db72438b13a2504cd3834b3c5e364?d=identicon&version=1",
            "client": "desktop app Mac 0.5.2",
            "content": "<p>y'know, from python 1.0, which was ~6 years into its history, until we had \"can make a website in python\", 10 years ellapsed</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 103571171,
            "is_me_message": false,
            "last_edit_timestamp": 1479410326,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "rodguze@gmail.com",
            "sender_full_name": "Rodrigo Guzman (F2'16)",
            "sender_id": 100181,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Is the future of progamming Haskell?",
            "submessages": [],
            "timestamp": 1479410308,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/8651a8565e010cd3aebcd360badf2a92?d=identicon&version=1",
            "client": "website",
            "content": "<p>Oh, I don't doubt it. I'm mostly just wondering aloud as to whether they'll gain traction</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 103571177,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "e.alexander.segura@gmail.com",
            "sender_full_name": "Alex Segura (SP1'19)",
            "sender_id": 2899,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Is the future of progamming Haskell?",
            "submessages": [],
            "timestamp": 1479410317,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4d074af6cc341ef51b25bb2f738cdb11?d=identicon&version=1",
            "client": "website",
            "content": "<p>Haskell has been around for that long</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 103571183,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "vaibhavsagar@gmail.com",
            "sender_full_name": "Vaibhav Sagar (he) (F1'16)",
            "sender_id": 100041,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Is the future of progamming Haskell?",
            "submessages": [],
            "timestamp": 1479410332,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/8651a8565e010cd3aebcd360badf2a92?d=identicon&version=1",
            "client": "website",
            "content": "<p>I also never believe the hype ;)</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 103571192,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "e.alexander.segura@gmail.com",
            "sender_full_name": "Alex Segura (SP1'19)",
            "sender_id": 2899,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Is the future of progamming Haskell?",
            "submessages": [],
            "timestamp": 1479410356,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/c62db72438b13a2504cd3834b3c5e364?d=identicon&version=1",
            "client": "desktop app Mac 0.5.2",
            "content": "<p>my guess is that the widely-adopted language right now is in the same stage as python was in ~1989</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 103571196,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "rodguze@gmail.com",
            "sender_full_name": "Rodrigo Guzman (F2'16)",
            "sender_id": 100181,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Is the future of progamming Haskell?",
            "submessages": [],
            "timestamp": 1479410363,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4d074af6cc341ef51b25bb2f738cdb11?d=identicon&version=1",
            "client": "website",
            "content": "<p>so, rust?</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 103571199,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "vaibhavsagar@gmail.com",
            "sender_full_name": "Vaibhav Sagar (he) (F1'16)",
            "sender_id": 100041,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Is the future of progamming Haskell?",
            "submessages": [],
            "timestamp": 1479410372,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/c62db72438b13a2504cd3834b3c5e364?d=identicon&version=1",
            "client": "desktop app Mac 0.5.2",
            "content": "<p>yeah, that's possible</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 103571256,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "rodguze@gmail.com",
            "sender_full_name": "Rodrigo Guzman (F2'16)",
            "sender_id": 100181,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Is the future of progamming Haskell?",
            "submessages": [],
            "timestamp": 1479410421,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/c62db72438b13a2504cd3834b3c5e364?d=identicon&version=1",
            "client": "desktop app Mac 0.5.2",
            "content": "<p>haskell may turn out to be it, too</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 103571258,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "rodguze@gmail.com",
            "sender_full_name": "Rodrigo Guzman (F2'16)",
            "sender_id": 100181,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Is the future of progamming Haskell?",
            "submessages": [],
            "timestamp": 1479410425,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/8651a8565e010cd3aebcd360badf2a92?d=identicon&version=1",
            "client": "website",
            "content": "<p>Have either of you written substantial code in  a dependently typed language?</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 103571267,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "e.alexander.segura@gmail.com",
            "sender_full_name": "Alex Segura (SP1'19)",
            "sender_id": 2899,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Is the future of progamming Haskell?",
            "submessages": [],
            "timestamp": 1479410443,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/db101b45d0414192274336d5352530a7?d=identicon&version=1",
            "client": "desktop app Mac 0.5.2",
            "content": "<p>i'd be happy to demo ihaskell to people!</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 103571269,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "juliayu@princeton.edu",
            "sender_full_name": "Julia Yu (F2'16)",
            "sender_id": 100200,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Is the future of progamming Haskell?",
            "submessages": [],
            "timestamp": 1479410453,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/c62db72438b13a2504cd3834b3c5e364?d=identicon&version=1",
            "client": "desktop app Mac 0.5.2",
            "content": "<p>but design-by-comitee makes me unoptimistic about that (even though haskell is not so much design by committee anymore)</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 103571273,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "rodguze@gmail.com",
            "sender_full_name": "Rodrigo Guzman (F2'16)",
            "sender_id": 100181,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Is the future of progamming Haskell?",
            "submessages": [],
            "timestamp": 1479410455,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/c62db72438b13a2504cd3834b3c5e364?d=identicon&version=1",
            "client": "desktop app Mac 0.5.2",
            "content": "<p>not me, not even in haskell</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 103571279,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "rodguze@gmail.com",
            "sender_full_name": "Rodrigo Guzman (F2'16)",
            "sender_id": 100181,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Is the future of progamming Haskell?",
            "submessages": [],
            "timestamp": 1479410469,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4d074af6cc341ef51b25bb2f738cdb11?d=identicon&version=1",
            "client": "website",
            "content": "<p>no, in fact I've only been writing haskell for ~9 months</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 103571282,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "vaibhavsagar@gmail.com",
            "sender_full_name": "Vaibhav Sagar (he) (F1'16)",
            "sender_id": 100041,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Is the future of progamming Haskell?",
            "submessages": [],
            "timestamp": 1479410470,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4d074af6cc341ef51b25bb2f738cdb11?d=identicon&version=1",
            "client": "website",
            "content": "<p>maybe I should have made that clear at the outset</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 103571291,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "vaibhavsagar@gmail.com",
            "sender_full_name": "Vaibhav Sagar (he) (F1'16)",
            "sender_id": 100041,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Is the future of progamming Haskell?",
            "submessages": [],
            "timestamp": 1479410481,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/8651a8565e010cd3aebcd360badf2a92?d=identicon&version=1",
            "client": "website",
            "content": "<p>Nah, that's cool. I think 9 months of haskell is enough to get your head around it and start feeling the benefits GHC provides</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 103571354,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "e.alexander.segura@gmail.com",
            "sender_full_name": "Alex Segura (SP1'19)",
            "sender_id": 2899,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Is the future of progamming Haskell?",
            "submessages": [],
            "timestamp": 1479410541,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/c62db72438b13a2504cd3834b3c5e364?d=identicon&version=1",
            "client": "desktop app Mac 0.5.2",
            "content": "<p>but one of my best friends, with whom i exchange lots of technical ideas, works at Galois and my impression is that, more or less, Galois couldn't really do a lot of the projects it does without working in haskell and they have very large/complicated codebases</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 103571359,
            "is_me_message": false,
            "last_edit_timestamp": 1479410575,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "rodguze@gmail.com",
            "sender_full_name": "Rodrigo Guzman (F2'16)",
            "sender_id": 100181,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Is the future of progamming Haskell?",
            "submessages": [],
            "timestamp": 1479410551,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4d074af6cc341ef51b25bb2f738cdb11?d=identicon&version=1",
            "client": "website",
            "content": "<p>Galois are at the bleeding edge of Haskell</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 103571373,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "vaibhavsagar@gmail.com",
            "sender_full_name": "Vaibhav Sagar (he) (F1'16)",
            "sender_id": 100041,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Is the future of progamming Haskell?",
            "submessages": [],
            "timestamp": 1479410585,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4d074af6cc341ef51b25bb2f738cdb11?d=identicon&version=1",
            "client": "website",
            "content": "<p>I was telling a friend he should come join me in the US, and his words were, \"maybe if I can get Galois to offer me a job\"</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 103571383,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "vaibhavsagar@gmail.com",
            "sender_full_name": "Vaibhav Sagar (he) (F1'16)",
            "sender_id": 100041,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Is the future of progamming Haskell?",
            "submessages": [],
            "timestamp": 1479410629,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4d074af6cc341ef51b25bb2f738cdb11?d=identicon&version=1",
            "client": "website",
            "content": "<p>he's one of the absolute best Haskellers I know</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 103571424,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "vaibhavsagar@gmail.com",
            "sender_full_name": "Vaibhav Sagar (he) (F1'16)",
            "sender_id": 100041,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Is the future of progamming Haskell?",
            "submessages": [],
            "timestamp": 1479410649,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/c62db72438b13a2504cd3834b3c5e364?d=identicon&version=1",
            "client": "desktop app Mac 0.5.2",
            "content": "<p>i'd be happy to make intros if that'd help, V</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 103571425,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "rodguze@gmail.com",
            "sender_full_name": "Rodrigo Guzman (F2'16)",
            "sender_id": 100181,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Is the future of progamming Haskell?",
            "submessages": [],
            "timestamp": 1479410659,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4d074af6cc341ef51b25bb2f738cdb11?d=identicon&version=1",
            "client": "website",
            "content": "<p>Thank you :)</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 103571573,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "vaibhavsagar@gmail.com",
            "sender_full_name": "Vaibhav Sagar (he) (F1'16)",
            "sender_id": 100041,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Is the future of progamming Haskell?",
            "submessages": [],
            "timestamp": 1479410903,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4d074af6cc341ef51b25bb2f738cdb11?d=identicon&version=1",
            "client": "website",
            "content": "<p>There are also linear types: <a href=\"http://axman6.com/posts/2016-07-10-Linear-resources-in-haskell.html\" target=\"_blank\" title=\"http://axman6.com/posts/2016-07-10-Linear-resources-in-haskell.html\">http://axman6.com/posts/2016-07-10-Linear-resources-in-haskell.html</a></p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 103571582,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "vaibhavsagar@gmail.com",
            "sender_full_name": "Vaibhav Sagar (he) (F1'16)",
            "sender_id": 100041,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Is the future of progamming Haskell?",
            "submessages": [],
            "timestamp": 1479410917,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4d074af6cc341ef51b25bb2f738cdb11?d=identicon&version=1",
            "client": "website",
            "content": "<p>which I think means a way of managing garbage collection within the type system?</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 103571591,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "vaibhavsagar@gmail.com",
            "sender_full_name": "Vaibhav Sagar (he) (F1'16)",
            "sender_id": 100041,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Is the future of progamming Haskell?",
            "submessages": [],
            "timestamp": 1479410939,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/8651a8565e010cd3aebcd360badf2a92?d=identicon&version=1",
            "client": "website",
            "content": "<p>Not just garbage collection but resource usage in general</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 103571601,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "e.alexander.segura@gmail.com",
            "sender_full_name": "Alex Segura (SP1'19)",
            "sender_id": 2899,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Is the future of progamming Haskell?",
            "submessages": [],
            "timestamp": 1479410958,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/8651a8565e010cd3aebcd360badf2a92?d=identicon&version=1",
            "client": "website",
            "content": "<p>What projects from GaloisInc do you find most impressive?</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 103571649,
            "is_me_message": false,
            "last_edit_timestamp": 1479411014,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "e.alexander.segura@gmail.com",
            "sender_full_name": "Alex Segura (SP1'19)",
            "sender_id": 2899,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Is the future of progamming Haskell?",
            "submessages": [],
            "timestamp": 1479411004,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4d074af6cc341ef51b25bb2f738cdb11?d=identicon&version=1",
            "client": "website",
            "content": "<p>I'd have to say <a href=\"https://github.com/GaloisInc/HaLVM\" target=\"_blank\" title=\"https://github.com/GaloisInc/HaLVM\">HaLVM</a></p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 103571665,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "vaibhavsagar@gmail.com",
            "sender_full_name": "Vaibhav Sagar (he) (F1'16)",
            "sender_id": 100041,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Is the future of progamming Haskell?",
            "submessages": [],
            "timestamp": 1479411039,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/8651a8565e010cd3aebcd360badf2a92?d=identicon&version=1",
            "client": "website",
            "content": "<p>Nice. I had heard of that before. More code for the reading list :D</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 103571754,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "e.alexander.segura@gmail.com",
            "sender_full_name": "Alex Segura (SP1'19)",
            "sender_id": 2899,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Is the future of progamming Haskell?",
            "submessages": [],
            "timestamp": 1479411173,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4d074af6cc341ef51b25bb2f738cdb11?d=identicon&version=1",
            "client": "website",
            "content": "<p><a href=\"https://github.com/GaloisInc/cryptol\" target=\"_blank\" title=\"https://github.com/GaloisInc/cryptol\">Cryptol</a> also sounds cool</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 103571762,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "vaibhavsagar@gmail.com",
            "sender_full_name": "Vaibhav Sagar (he) (F1'16)",
            "sender_id": 100041,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Is the future of progamming Haskell?",
            "submessages": [],
            "timestamp": 1479411188,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/8651a8565e010cd3aebcd360badf2a92?d=identicon&version=1",
            "client": "website",
            "content": "<p>Yeah I think I saw some of that during compose conf?</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 103571819,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "e.alexander.segura@gmail.com",
            "sender_full_name": "Alex Segura (SP1'19)",
            "sender_id": 2899,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Is the future of progamming Haskell?",
            "submessages": [],
            "timestamp": 1479411270,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4d074af6cc341ef51b25bb2f738cdb11?d=identicon&version=1",
            "client": "website",
            "content": "<p>I really need to get around these functional programming conferences</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 103571889,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "vaibhavsagar@gmail.com",
            "sender_full_name": "Vaibhav Sagar (he) (F1'16)",
            "sender_id": 100041,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Is the future of progamming Haskell?",
            "submessages": [],
            "timestamp": 1479411390,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/8651a8565e010cd3aebcd360badf2a92?d=identicon&version=1",
            "client": "website",
            "content": "<p>So a lot of the benefits I feel from using langs with static type checks come when it's time to refactor or change the program. While the initial program might take a little longer to get to a running state, you make it back later. I wonder if the benefits are still there for the dependent typed languages, as they would take a fair bit longer still to get running and then, when you make a change, there's the potential necessity to go back and re-prove things.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 103571947,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "e.alexander.segura@gmail.com",
            "sender_full_name": "Alex Segura (SP1'19)",
            "sender_id": 2899,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Is the future of progamming Haskell?",
            "submessages": [],
            "timestamp": 1479411513,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/8651a8565e010cd3aebcd360badf2a92?d=identicon&version=1",
            "client": "website",
            "content": "<p>Might not be so bad if the computer is writing the proofs for you behind the scenes, but...</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 103571960,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "e.alexander.segura@gmail.com",
            "sender_full_name": "Alex Segura (SP1'19)",
            "sender_id": 2899,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Is the future of progamming Haskell?",
            "submessages": [],
            "timestamp": 1479411568,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4d074af6cc341ef51b25bb2f738cdb11?d=identicon&version=1",
            "client": "website",
            "content": "<p>I'm hoping that a dependently typed language won't be all or nothing</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 103572032,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "vaibhavsagar@gmail.com",
            "sender_full_name": "Vaibhav Sagar (he) (F1'16)",
            "sender_id": 100041,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Is the future of progamming Haskell?",
            "submessages": [],
            "timestamp": 1479411668,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/8651a8565e010cd3aebcd360badf2a92?d=identicon&version=1",
            "client": "website",
            "content": "<p>While the formal guarantees you can potentially get in the those systems are fantastic, is there a point at which it's no longer worth the effort when compared to just using  a System F lang some property testing and unit testing?</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 103572042,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "e.alexander.segura@gmail.com",
            "sender_full_name": "Alex Segura (SP1'19)",
            "sender_id": 2899,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Is the future of progamming Haskell?",
            "submessages": [],
            "timestamp": 1479411683,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/8651a8565e010cd3aebcd360badf2a92?d=identicon&version=1",
            "client": "website",
            "content": "<p>What do you mean?</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 103572048,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "e.alexander.segura@gmail.com",
            "sender_full_name": "Alex Segura (SP1'19)",
            "sender_id": 2899,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Is the future of progamming Haskell?",
            "submessages": [],
            "timestamp": 1479411702,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4d074af6cc341ef51b25bb2f738cdb11?d=identicon&version=1",
            "client": "website",
            "content": "<p>in the same way that Haskell will infer types when they're not explicitly stated</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 103572088,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "vaibhavsagar@gmail.com",
            "sender_full_name": "Vaibhav Sagar (he) (F1'16)",
            "sender_id": 100041,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Is the future of progamming Haskell?",
            "submessages": [],
            "timestamp": 1479411726,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4d074af6cc341ef51b25bb2f738cdb11?d=identicon&version=1",
            "client": "website",
            "content": "<p>sometimes I want a bytestring of exactly 40 characters and sometimes an arbitrary length is okay</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 103572101,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "vaibhavsagar@gmail.com",
            "sender_full_name": "Vaibhav Sagar (he) (F1'16)",
            "sender_id": 100041,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Is the future of progamming Haskell?",
            "submessages": [],
            "timestamp": 1479411758,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4d074af6cc341ef51b25bb2f738cdb11?d=identicon&version=1",
            "client": "website",
            "content": "<p>the former is something I would like in my git library, because that's how long the hex representation of a SHA1 hash is</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 103572109,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "vaibhavsagar@gmail.com",
            "sender_full_name": "Vaibhav Sagar (he) (F1'16)",
            "sender_id": 100041,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Is the future of progamming Haskell?",
            "submessages": [],
            "timestamp": 1479411790,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/8651a8565e010cd3aebcd360badf2a92?d=identicon&version=1",
            "client": "website",
            "content": "<p>Ok, but how does the compiler know you don't violate invariant?</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 103572114,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "e.alexander.segura@gmail.com",
            "sender_full_name": "Alex Segura (SP1'19)",
            "sender_id": 2899,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Is the future of progamming Haskell?",
            "submessages": [],
            "timestamp": 1479411807,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/8651a8565e010cd3aebcd360badf2a92?d=identicon&version=1",
            "client": "website",
            "content": "<p>I'm not an expert in this area</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 103572118,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "e.alexander.segura@gmail.com",
            "sender_full_name": "Alex Segura (SP1'19)",
            "sender_id": 2899,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Is the future of progamming Haskell?",
            "submessages": [],
            "timestamp": 1479411830,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4d074af6cc341ef51b25bb2f738cdb11?d=identicon&version=1",
            "client": "website",
            "content": "<p>yeah, I'm an amateur</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 103572121,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "vaibhavsagar@gmail.com",
            "sender_full_name": "Vaibhav Sagar (he) (F1'16)",
            "sender_id": 100041,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Is the future of progamming Haskell?",
            "submessages": [],
            "timestamp": 1479411839,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4d074af6cc341ef51b25bb2f738cdb11?d=identicon&version=1",
            "client": "website",
            "content": "<p>I mean for different types</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 103572159,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "vaibhavsagar@gmail.com",
            "sender_full_name": "Vaibhav Sagar (he) (F1'16)",
            "sender_id": 100041,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Is the future of progamming Haskell?",
            "submessages": [],
            "timestamp": 1479411847,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/8651a8565e010cd3aebcd360badf2a92?d=identicon&version=1",
            "client": "website",
            "content": "<p>But I think with the dependently typed calculi are expressive enough to encode computation at the type level</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 103572163,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "e.alexander.segura@gmail.com",
            "sender_full_name": "Alex Segura (SP1'19)",
            "sender_id": 2899,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Is the future of progamming Haskell?",
            "submessages": [],
            "timestamp": 1479411863,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/8651a8565e010cd3aebcd360badf2a92?d=identicon&version=1",
            "client": "website",
            "content": "<p>So type inferencing is not always possible</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 103572169,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "e.alexander.segura@gmail.com",
            "sender_full_name": "Alex Segura (SP1'19)",
            "sender_id": 2899,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Is the future of progamming Haskell?",
            "submessages": [],
            "timestamp": 1479411898,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/8651a8565e010cd3aebcd360badf2a92?d=identicon&version=1",
            "client": "website",
            "content": "<p>And you have to write a formal proof</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 103572176,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "e.alexander.segura@gmail.com",
            "sender_full_name": "Alex Segura (SP1'19)",
            "sender_id": 2899,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Is the future of progamming Haskell?",
            "submessages": [],
            "timestamp": 1479411914,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4d074af6cc341ef51b25bb2f738cdb11?d=identicon&version=1",
            "client": "website",
            "content": "<p>right, that makes sens</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 103572180,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "vaibhavsagar@gmail.com",
            "sender_full_name": "Vaibhav Sagar (he) (F1'16)",
            "sender_id": 100041,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Is the future of progamming Haskell?",
            "submessages": [],
            "timestamp": 1479411930,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/8651a8565e010cd3aebcd360badf2a92?d=identicon&version=1",
            "client": "website",
            "content": "<p>(maybe someone who knows more can chime in)</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 103572181,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "e.alexander.segura@gmail.com",
            "sender_full_name": "Alex Segura (SP1'19)",
            "sender_id": 2899,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Is the future of progamming Haskell?",
            "submessages": [],
            "timestamp": 1479411931,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/8651a8565e010cd3aebcd360badf2a92?d=identicon&version=1",
            "client": "website",
            "content": "<p>So now you have a bunch of proofs in your codebase that you have to keep valid otherwise your system won't compile.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 103572233,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "e.alexander.segura@gmail.com",
            "sender_full_name": "Alex Segura (SP1'19)",
            "sender_id": 2899,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Is the future of progamming Haskell?",
            "submessages": [],
            "timestamp": 1479411989,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/8651a8565e010cd3aebcd360badf2a92?d=identicon&version=1",
            "client": "website",
            "content": "<p>If it takes longer to prove something than it does to update a property test</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 103572236,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "e.alexander.segura@gmail.com",
            "sender_full_name": "Alex Segura (SP1'19)",
            "sender_id": 2899,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Is the future of progamming Haskell?",
            "submessages": [],
            "timestamp": 1479412004,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/8651a8565e010cd3aebcd360badf2a92?d=identicon&version=1",
            "client": "website",
            "content": "<p>Then there might not be enough of a payoff to make the extra effort worthwhile</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 103572244,
            "is_me_message": false,
            "last_edit_timestamp": 1479412052,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "e.alexander.segura@gmail.com",
            "sender_full_name": "Alex Segura (SP1'19)",
            "sender_id": 2899,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Is the future of progamming Haskell?",
            "submessages": [],
            "timestamp": 1479412047,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4d074af6cc341ef51b25bb2f738cdb11?d=identicon&version=1",
            "client": "website",
            "content": "<p>sure, but the property test is separate from the definition</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 103572245,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "vaibhavsagar@gmail.com",
            "sender_full_name": "Vaibhav Sagar (he) (F1'16)",
            "sender_id": 100041,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Is the future of progamming Haskell?",
            "submessages": [],
            "timestamp": 1479412056,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/8651a8565e010cd3aebcd360badf2a92?d=identicon&version=1",
            "client": "website",
            "content": "<p>At least for your every day hacking, like maybe for super critical stuff you would want this kind of formality</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 103572250,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "e.alexander.segura@gmail.com",
            "sender_full_name": "Alex Segura (SP1'19)",
            "sender_id": 2899,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Is the future of progamming Haskell?",
            "submessages": [],
            "timestamp": 1479412079,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/8651a8565e010cd3aebcd360badf2a92?d=identicon&version=1",
            "client": "website",
            "content": "<p>What do you mean \"separate from the definition?\"</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 103572289,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "e.alexander.segura@gmail.com",
            "sender_full_name": "Alex Segura (SP1'19)",
            "sender_id": 2899,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Is the future of progamming Haskell?",
            "submessages": [],
            "timestamp": 1479412102,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4d074af6cc341ef51b25bb2f738cdb11?d=identicon&version=1",
            "client": "website",
            "content": "<p>as in your code is in one place and your tests are in another</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 103572294,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "vaibhavsagar@gmail.com",
            "sender_full_name": "Vaibhav Sagar (he) (F1'16)",
            "sender_id": 100041,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Is the future of progamming Haskell?",
            "submessages": [],
            "timestamp": 1479412141,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4d074af6cc341ef51b25bb2f738cdb11?d=identicon&version=1",
            "client": "website",
            "content": "<p>whereas your proofs, like a type definition, are tied/close to the function definition</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 103572305,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "vaibhavsagar@gmail.com",
            "sender_full_name": "Vaibhav Sagar (he) (F1'16)",
            "sender_id": 100041,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Is the future of progamming Haskell?",
            "submessages": [],
            "timestamp": 1479412182,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/8651a8565e010cd3aebcd360badf2a92?d=identicon&version=1",
            "client": "website",
            "content": "<p>I think they could live next to each other. There's an ocaml lib ppx_expect and ppx_inline_test that let's you have inline tests.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 103572352,
            "is_me_message": false,
            "last_edit_timestamp": 1479412542,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "e.alexander.segura@gmail.com",
            "sender_full_name": "Alex Segura (SP1'19)",
            "sender_id": 2899,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Is the future of progamming Haskell?",
            "submessages": [],
            "timestamp": 1479412219,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/8651a8565e010cd3aebcd360badf2a92?d=identicon&version=1",
            "client": "website",
            "content": "<p>Maybe we don't usually do that, but it could be nifty</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 103572355,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "e.alexander.segura@gmail.com",
            "sender_full_name": "Alex Segura (SP1'19)",
            "sender_id": 2899,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Is the future of progamming Haskell?",
            "submessages": [],
            "timestamp": 1479412236,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4d074af6cc341ef51b25bb2f738cdb11?d=identicon&version=1",
            "client": "website",
            "content": "<p>I guess in that case the value proposition is different</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 103572356,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "vaibhavsagar@gmail.com",
            "sender_full_name": "Vaibhav Sagar (he) (F1'16)",
            "sender_id": 100041,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Is the future of progamming Haskell?",
            "submessages": [],
            "timestamp": 1479412246,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/8651a8565e010cd3aebcd360badf2a92?d=identicon&version=1",
            "client": "website",
            "content": "<p>Yeah I'm not sure where the line is</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 103572364,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "e.alexander.segura@gmail.com",
            "sender_full_name": "Alex Segura (SP1'19)",
            "sender_id": 2899,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Is the future of progamming Haskell?",
            "submessages": [],
            "timestamp": 1479412277,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/8651a8565e010cd3aebcd360badf2a92?d=identicon&version=1",
            "client": "website",
            "content": "<p>Anyway programming in Coq using proofgeneral is really fun, you should give it a whirl if you're interested</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 103572369,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "e.alexander.segura@gmail.com",
            "sender_full_name": "Alex Segura (SP1'19)",
            "sender_id": 2899,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Is the future of progamming Haskell?",
            "submessages": [],
            "timestamp": 1479412306,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/8651a8565e010cd3aebcd360badf2a92?d=identicon&version=1",
            "client": "website",
            "content": "<p>Agda mode is also pretty rockin'</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 103572372,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "e.alexander.segura@gmail.com",
            "sender_full_name": "Alex Segura (SP1'19)",
            "sender_id": 2899,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Is the future of progamming Haskell?",
            "submessages": [],
            "timestamp": 1479412312,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/8651a8565e010cd3aebcd360badf2a92?d=identicon&version=1",
            "client": "website",
            "content": "<p>I haven't used idris much but it is very haskell-like syntactically</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 103572416,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "e.alexander.segura@gmail.com",
            "sender_full_name": "Alex Segura (SP1'19)",
            "sender_id": 2899,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Is the future of progamming Haskell?",
            "submessages": [],
            "timestamp": 1479412353,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4d074af6cc341ef51b25bb2f738cdb11?d=identicon&version=1",
            "client": "website",
            "content": "<p>trying all these is definitely on my gigantic list of things to do</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 103572492,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "vaibhavsagar@gmail.com",
            "sender_full_name": "Vaibhav Sagar (he) (F1'16)",
            "sender_id": 100041,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Is the future of progamming Haskell?",
            "submessages": [],
            "timestamp": 1479412525,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/8651a8565e010cd3aebcd360badf2a92?d=identicon&version=1",
            "client": "website",
            "content": "<p>Yes the never-ending list</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 103572502,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "e.alexander.segura@gmail.com",
            "sender_full_name": "Alex Segura (SP1'19)",
            "sender_id": 2899,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Is the future of progamming Haskell?",
            "submessages": [],
            "timestamp": 1479412560,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/8651a8565e010cd3aebcd360badf2a92?d=identicon&version=1",
            "client": "website",
            "content": "<p>If you try Coq first <a href=\"https://www.cis.upenn.edu/~bcpierce/sf/current/index.html\" target=\"_blank\" title=\"https://www.cis.upenn.edu/~bcpierce/sf/current/index.html\">https://www.cis.upenn.edu/~bcpierce/sf/current/index.html</a> was super fun</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 103572546,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "e.alexander.segura@gmail.com",
            "sender_full_name": "Alex Segura (SP1'19)",
            "sender_id": 2899,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Is the future of progamming Haskell?",
            "submessages": [],
            "timestamp": 1479412589,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/8651a8565e010cd3aebcd360badf2a92?d=identicon&version=1",
            "client": "website",
            "content": "<p>I think a few RC people were doing that a year or so ago</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 103572552,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "e.alexander.segura@gmail.com",
            "sender_full_name": "Alex Segura (SP1'19)",
            "sender_id": 2899,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Is the future of progamming Haskell?",
            "submessages": [],
            "timestamp": 1479412612,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/8651a8565e010cd3aebcd360badf2a92?d=identicon&version=1",
            "client": "website",
            "content": "<p>And this one is also great <a href=\"https://www.amazon.com/Certified-Programming-Dependent-Types-Introduction/dp/0262026651/ref=sr_1_1?ie=UTF8&amp;qid=1479412634&amp;sr=8-1&amp;keywords=adam+chlipala\" target=\"_blank\" title=\"https://www.amazon.com/Certified-Programming-Dependent-Types-Introduction/dp/0262026651/ref=sr_1_1?ie=UTF8&amp;qid=1479412634&amp;sr=8-1&amp;keywords=adam+chlipala\">https://www.amazon.com/Certified-Programming-Dependent-Types-Introduction/dp/0262026651/ref=sr_1_1?ie=UTF8&amp;qid=1479412634&amp;sr=8-1&amp;keywords=adam+chlipala</a></p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 103572562,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "e.alexander.segura@gmail.com",
            "sender_full_name": "Alex Segura (SP1'19)",
            "sender_id": 2899,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Is the future of progamming Haskell?",
            "submessages": [],
            "timestamp": 1479412651,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/8651a8565e010cd3aebcd360badf2a92?d=identicon&version=1",
            "client": "website",
            "content": "<p>The first one focuses on, well, foundations , but second one struck me as much more pragmatic, and wasn't afraid to use sweet auto-proving tactics.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 103572615,
            "is_me_message": false,
            "last_edit_timestamp": 1479412771,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "e.alexander.segura@gmail.com",
            "sender_full_name": "Alex Segura (SP1'19)",
            "sender_id": 2899,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Is the future of progamming Haskell?",
            "submessages": [],
            "timestamp": 1479412751,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4d074af6cc341ef51b25bb2f738cdb11?d=identicon&version=1",
            "client": "website",
            "content": "<p>I love how passionate you are about the things you like</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 103572637,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "vaibhavsagar@gmail.com",
            "sender_full_name": "Vaibhav Sagar (he) (F1'16)",
            "sender_id": 100041,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Is the future of progamming Haskell?",
            "submessages": [],
            "timestamp": 1479412802,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4d074af6cc341ef51b25bb2f738cdb11?d=identicon&version=1",
            "client": "website",
            "content": "<p>I think we have this in common <img alt=\":smile:\" class=\"emoji\" src=\"/static/third/gemoji/images/emoji/smile.png\" title=\":smile:\"> </p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 103572668,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "vaibhavsagar@gmail.com",
            "sender_full_name": "Vaibhav Sagar (he) (F1'16)",
            "sender_id": 100041,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Is the future of progamming Haskell?",
            "submessages": [],
            "timestamp": 1479412811,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/57ad6b289d2b066f6497c2c7a542f246?d=identicon&version=1",
            "client": "website",
            "content": "<p>My take is that Software Foundations is a more gentle introduction than Chlipala's book.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 103581536,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "lindsey@composition.al",
            "sender_full_name": "Lindsey Kuper (she)",
            "sender_id": 2170,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Is the future of progamming Haskell?",
            "submessages": [],
            "timestamp": 1479427409,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/57ad6b289d2b066f6497c2c7a542f246?d=identicon&version=1",
            "client": "website",
            "content": "<p>I'm happy to make introductions to Galwegians, too.  My good friend Adam works on Cryptol.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 103581643,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "lindsey@composition.al",
            "sender_full_name": "Lindsey Kuper (she)",
            "sender_id": 2170,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Is the future of progamming Haskell?",
            "submessages": [],
            "timestamp": 1479427610,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4d074af6cc341ef51b25bb2f738cdb11?d=identicon&version=1",
            "client": "website",
            "content": "<p>That's very generous, thanks <span class=\"user-mention\" data-user-email=\"lindsey@composition.al\">@Lindsey Kuper</span>! My master plan to have Australians take over the US is working <em>steeples fingers and laughs maniacally</em></p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 103582460,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "vaibhavsagar@gmail.com",
            "sender_full_name": "Vaibhav Sagar (he) (F1'16)",
            "sender_id": 100041,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Is the future of progamming Haskell?",
            "submessages": [],
            "timestamp": 1479429294,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/57ad6b289d2b066f6497c2c7a542f246?d=identicon&version=1",
            "client": "website",
            "content": "<p>Just say \"mate\" a lot.  We'll think it's charming and fall right into your evil trap.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 103582513,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "lindsey@composition.al",
            "sender_full_name": "Lindsey Kuper (she)",
            "sender_id": 2170,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Is the future of progamming Haskell?",
            "submessages": [],
            "timestamp": 1479429385,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4d074af6cc341ef51b25bb2f738cdb11?d=identicon&version=1",
            "client": "website",
            "content": "<p>Now all that remains is to corner the market on Tim Tams.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 103582567,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "vaibhavsagar@gmail.com",
            "sender_full_name": "Vaibhav Sagar (he) (F1'16)",
            "sender_id": 100041,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Is the future of progamming Haskell?",
            "submessages": [],
            "timestamp": 1479429508,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/675466cb255ba68bf2b4e714d9371d9a0dab1e39?x=x&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"vaibhavsagar@gmail.com\">@Vaibhav Sagar (F1'16)</span>:</p>\n<blockquote>\n<p>have you ever spent time on <code>#haskell</code> and <code>#haskell-beginners</code>?</p>\n</blockquote>\n<p>Are these IRC channels?</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 103605499,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "dpb@brannerchinese.com",
            "sender_full_name": "David P Branner (SP2'17)",
            "sender_id": 850,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Is the future of progamming Haskell?",
            "submessages": [],
            "timestamp": 1479484002,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4d074af6cc341ef51b25bb2f738cdb11?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"dpb@brannerchinese.com\">@David Branner (W'13)</span> yes they are :), I remember you telling me it was my civic duty to get them on Zulip.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 103605723,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "vaibhavsagar@gmail.com",
            "sender_full_name": "Vaibhav Sagar (he) (F1'16)",
            "sender_id": 100041,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Is the future of progamming Haskell?",
            "submessages": [],
            "timestamp": 1479484372,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/675466cb255ba68bf2b4e714d9371d9a0dab1e39?x=x&version=1",
            "client": "website",
            "content": "<p>I see that <a href=\"http://ircbrowse.net/haskell-beginners\" target=\"_blank\" title=\"http://ircbrowse.net/haskell-beginners\">they are</a>. I see now that these are the channels <span class=\"user-mention\" data-user-email=\"vaibhavsagar@gmail.com\">@Vaibhav Sagar (F1'16)</span> mentioned earlier. My position on IRC remains flexibly intransigent.<br>\n<br>\nI use IRC for conversing and sharing text with my dictionary-collaborator when we're working at the same table. We have our own channel and we're the only two people who are ever on it. (By all means come and visit us there, hacker-friends!) It's ideally suited to one-on-one working conversations like that.<br>\n<br>\nHow many people are on <code>#haskell-beginners</code>? Hmm...:<br>\n</p>\n<blockquote>\n<p>During this 31-day reporting period, a total of 182 different nicks spoke.</p>\n</blockquote>\n<p>I put it to you all that an IRC channel with even forty regular users and twelve conversations going on at once is likely to dishearten and exclude beginners. Even an old-style BBS would be more effective for following threaded conversations. </p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 103606170,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "dpb@brannerchinese.com",
            "sender_full_name": "David P Branner (SP2'17)",
            "sender_id": 850,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Is the future of progamming Haskell?",
            "submessages": [],
            "timestamp": 1479485133,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/a6ac867cbcefd0b2623d3fd1b31c907ce7e83606?x=x&version=2",
            "client": "website",
            "content": "<p><code>#haskell-beginners</code> has for years been lauded as the best IRC for learning purposes. It's fairly quiet and not confusing. Chris Allen is on it a lot and he's probably the best person to help you out with learning Haskell, but there are plenty of others who willingly give their time to help. Most conversations are short. I haven't really seen any of the usual IRC problems in it.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 103608218,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "imjuansoto@gmail.com",
            "sender_full_name": "Juan Soto (F1'16)",
            "sender_id": 100019,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Is the future of progamming Haskell?",
            "submessages": [],
            "timestamp": 1479488976,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/a6ac867cbcefd0b2623d3fd1b31c907ce7e83606?x=x&version=2",
            "client": "website",
            "content": "<p>Also, they used RC's social rules for their CoC! <a href=\"https://github.com/bitemyapp/learnhaskell/blob/master/coc.md\" target=\"_blank\" title=\"https://github.com/bitemyapp/learnhaskell/blob/master/coc.md\">https://github.com/bitemyapp/learnhaskell/blob/master/coc.md</a></p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 103608467,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "imjuansoto@gmail.com",
            "sender_full_name": "Juan Soto (F1'16)",
            "sender_id": 100019,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Is the future of progamming Haskell?",
            "submessages": [],
            "timestamp": 1479489436,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/57ad6b289d2b066f6497c2c7a542f246?d=identicon&version=1",
            "client": "website",
            "content": "<p>Since Chris Allen has been mentioned twice in this thread in a positive light, I just thought I'd mention that my experiences with him have been very negative.   I had to block him on Twitter after he started being an asshole to some of my friends.  Once people started talking about that, it became clear that a lot of others had blocked him too.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 103612820,
            "is_me_message": false,
            "last_edit_timestamp": 1479497607,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "lindsey@composition.al",
            "sender_full_name": "Lindsey Kuper (she)",
            "sender_id": 2170,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Is the future of progamming Haskell?",
            "submessages": [],
            "timestamp": 1479497570,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/57ad6b289d2b066f6497c2c7a542f246?d=identicon&version=1",
            "client": "website",
            "content": "<p>I'm a programming languages researcher who uses a variety of tools including Haskell, and who works with other researchers who use a variety of tools including Haskell.  Chris has seen fit to pick on my co-authors for not using Haskell <em>exclusively</em>.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 103612889,
            "is_me_message": false,
            "last_edit_timestamp": 1479498519,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "lindsey@composition.al",
            "sender_full_name": "Lindsey Kuper (she)",
            "sender_id": 2170,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Is the future of progamming Haskell?",
            "submessages": [],
            "timestamp": 1479497702,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4d074af6cc341ef51b25bb2f738cdb11?d=identicon&version=1",
            "client": "website",
            "content": "<p>A fellow RCer said he interviewed him once and his verdict was that Chris Allen was an asshole. I put it down to a bad interview/abrasive personality but I guess there's more to it than that</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 103612894,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "vaibhavsagar@gmail.com",
            "sender_full_name": "Vaibhav Sagar (he) (F1'16)",
            "sender_id": 100041,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Is the future of progamming Haskell?",
            "submessages": [],
            "timestamp": 1479497708,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/a6ac867cbcefd0b2623d3fd1b31c907ce7e83606?x=x&version=2",
            "client": "website",
            "content": "<p>That's a shame\u2014I've only had positive experiences with him :/ But yes he can be a bit uh, obsessed with Haskell being the best tool for all jobs.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 103612906,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "imjuansoto@gmail.com",
            "sender_full_name": "Juan Soto (F1'16)",
            "sender_id": 100019,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Is the future of progamming Haskell?",
            "submessages": [],
            "timestamp": 1479497739,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4d074af6cc341ef51b25bb2f738cdb11?d=identicon&version=1",
            "client": "website",
            "content": "<p>I hear he used to be a big proponent of Clojure</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 103612947,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "vaibhavsagar@gmail.com",
            "sender_full_name": "Vaibhav Sagar (he) (F1'16)",
            "sender_id": 100041,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Is the future of progamming Haskell?",
            "submessages": [],
            "timestamp": 1479497766,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/57ad6b289d2b066f6497c2c7a542f246?d=identicon&version=1",
            "client": "website",
            "content": "<p>He might be better now than he used to be.  I don't know.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 103613094,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "lindsey@composition.al",
            "sender_full_name": "Lindsey Kuper (she)",
            "sender_id": 2170,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Is the future of progamming Haskell?",
            "submessages": [],
            "timestamp": 1479498049,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/57ad6b289d2b066f6497c2c7a542f246?d=identicon&version=1",
            "client": "website",
            "content": "<p>I will say that I've been really frustrated by the (positive) reaction of parts of the Haskell community to my work.  They miss the point of what the work is actually about because they think that the important thing about it is that it's in Haskell.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 103613156,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "lindsey@composition.al",
            "sender_full_name": "Lindsey Kuper (she)",
            "sender_id": 2170,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Is the future of progamming Haskell?",
            "submessages": [],
            "timestamp": 1479498193,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/57ad6b289d2b066f6497c2c7a542f246?d=identicon&version=1",
            "client": "website",
            "content": "<p>That's all died down in the last couple years since I stopped working on that project so much (because I graduated).  It was pretty frustrating, though.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 103613218,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "lindsey@composition.al",
            "sender_full_name": "Lindsey Kuper (she)",
            "sender_id": 2170,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Is the future of progamming Haskell?",
            "submessages": [],
            "timestamp": 1479498300,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4d074af6cc341ef51b25bb2f738cdb11?d=identicon&version=1",
            "client": "website",
            "content": "<p>I'm sorry to hear this Lindsey <img alt=\":hugs:\" class=\"emoji\" src=\"https://uploads.zulipusercontent.net/2f87db5582472cd13f8fb92153d15130de7d2339/687474703a2f2f66696c65732e6c6672616e6368692e636f6d2f6875675f656d6f6a692e706e67\" title=\":hugs:\"></p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 103613231,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "vaibhavsagar@gmail.com",
            "sender_full_name": "Vaibhav Sagar (he) (F1'16)",
            "sender_id": 100041,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Is the future of progamming Haskell?",
            "submessages": [],
            "timestamp": 1479498327,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4d074af6cc341ef51b25bb2f738cdb11?d=identicon&version=1",
            "client": "website",
            "content": "<p>Was this your work on LVars?</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 103613239,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "vaibhavsagar@gmail.com",
            "sender_full_name": "Vaibhav Sagar (he) (F1'16)",
            "sender_id": 100041,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Is the future of progamming Haskell?",
            "submessages": [],
            "timestamp": 1479498355,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/57ad6b289d2b066f6497c2c7a542f246?d=identicon&version=1",
            "client": "website",
            "content": "<p>Yep.  For instance, one person gave a talk about various people's research including my LVars work, and the last slide said: \"Conclusion: learn Haskell for great good!\"  No, that's not the point of LVars.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 103613279,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "lindsey@composition.al",
            "sender_full_name": "Lindsey Kuper (she)",
            "sender_id": 2170,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Is the future of progamming Haskell?",
            "submessages": [],
            "timestamp": 1479498379,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/57ad6b289d2b066f6497c2c7a542f246?d=identicon&version=1",
            "client": "website",
            "content": "<p>It's a bit of a jerky thing to complain about, because it's like \"People are paying attention to my work IN THE WRONG WAY!\" when I'm lucky they pay attention at all.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 103613287,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "lindsey@composition.al",
            "sender_full_name": "Lindsey Kuper (she)",
            "sender_id": 2170,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Is the future of progamming Haskell?",
            "submessages": [],
            "timestamp": 1479498427,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/57ad6b289d2b066f6497c2c7a542f246?d=identicon&version=1",
            "client": "website",
            "content": "<p>Someone else wrote, \"LVish is in Haskell for a reason.\"  When I asked them what they thought the alleged reason was, they backpedaled really fast.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 103613350,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "lindsey@composition.al",
            "sender_full_name": "Lindsey Kuper (she)",
            "sender_id": 2170,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Is the future of progamming Haskell?",
            "submessages": [],
            "timestamp": 1479498565,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/57ad6b289d2b066f6497c2c7a542f246?d=identicon&version=1",
            "client": "website",
            "content": "<p>Apparently they wanted me to say, \"Yes, the reason is that Haskell is the greatest language of all time.\"</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 103613404,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "lindsey@composition.al",
            "sender_full_name": "Lindsey Kuper (she)",
            "sender_id": 2170,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Is the future of progamming Haskell?",
            "submessages": [],
            "timestamp": 1479498608,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4d074af6cc341ef51b25bb2f738cdb11?d=identicon&version=1",
            "client": "website",
            "content": "<p>I don't think it's jerky to complain about it.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 103613409,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "vaibhavsagar@gmail.com",
            "sender_full_name": "Vaibhav Sagar (he) (F1'16)",
            "sender_id": 100041,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Is the future of progamming Haskell?",
            "submessages": [],
            "timestamp": 1479498623,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4d074af6cc341ef51b25bb2f738cdb11?d=identicon&version=1",
            "client": "website",
            "content": "<p>I mean, Haskell doesn't even specify concurrent behaviour AFAIK, that's all GHC.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 103613423,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "vaibhavsagar@gmail.com",
            "sender_full_name": "Vaibhav Sagar (he) (F1'16)",
            "sender_id": 100041,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Is the future of progamming Haskell?",
            "submessages": [],
            "timestamp": 1479498665,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/57ad6b289d2b066f6497c2c7a542f246?d=identicon&version=1",
            "client": "website",
            "content": "<p>Well, I know a lot of people who have trouble getting anyone interested in their work at all, and I've had a lot of good opportunities come up because people are interested in my work, even if they're not interested for the reasons I want them to be.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 103613427,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "lindsey@composition.al",
            "sender_full_name": "Lindsey Kuper (she)",
            "sender_id": 2170,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Is the future of progamming Haskell?",
            "submessages": [],
            "timestamp": 1479498685,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/57ad6b289d2b066f6497c2c7a542f246?d=identicon&version=1",
            "client": "website",
            "content": "<p>So I do benefit from all the attention I've gotten from the Haskell community.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 103613433,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "lindsey@composition.al",
            "sender_full_name": "Lindsey Kuper (she)",
            "sender_id": 2170,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Is the future of progamming Haskell?",
            "submessages": [],
            "timestamp": 1479498704,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/57ad6b289d2b066f6497c2c7a542f246?d=identicon&version=1",
            "client": "website",
            "content": "<p>To get back to this thread's topic, I think \"the Haskell community\" is pretty big and fractured and has a lot of factions, and the faction that I have been closest to (a particular slice of academia) would be, I think, pretty skeptical of any claim that Haskell is \"the future of programming\"</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 103613970,
            "is_me_message": false,
            "last_edit_timestamp": 1479499581,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "lindsey@composition.al",
            "sender_full_name": "Lindsey Kuper (she)",
            "sender_id": 2170,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Is the future of progamming Haskell?",
            "submessages": [],
            "timestamp": 1479499553,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4d074af6cc341ef51b25bb2f738cdb11?d=identicon&version=1",
            "client": "website",
            "content": "<p>Is that because Haskell no longer reflects (if it ever did) the state of the art in progamming language research? Or is it because of shortcomings in the language?</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 103615970,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "vaibhavsagar@gmail.com",
            "sender_full_name": "Vaibhav Sagar (he) (F1'16)",
            "sender_id": 100041,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Is the future of progamming Haskell?",
            "submessages": [],
            "timestamp": 1479502902,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/8651a8565e010cd3aebcd360badf2a92?d=identicon&version=1",
            "client": "website",
            "content": "<p>I can't speak for Lindsey, but my perspective (on why haskell is not \"the future of programming\") is that the very phrase \"future of programming\" implies a ordering on the history of language development: that it is something that <em>progresses</em>, indeed, that it is something that progress can be made in, and in which a \"state of the art\" can be reached and pushed. Haskell, and typed functional languages in general, are but one approach to language design. One might prefer this style programming to others, but there is no rational, scientific, or objective measure of the progress made in nor the superiority of any of these forms of expression.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 103617176,
            "is_me_message": false,
            "last_edit_timestamp": 1479505557,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "e.alexander.segura@gmail.com",
            "sender_full_name": "Alex Segura (SP1'19)",
            "sender_id": 2899,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Is the future of progamming Haskell?",
            "submessages": [],
            "timestamp": 1479505030,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/8651a8565e010cd3aebcd360badf2a92?d=identicon&version=1",
            "client": "website",
            "content": "<p>Which is, of course, why language \"debates\" have more of the flavor of religious or tribal warfare than they do science or mathematics.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 103617179,
            "is_me_message": false,
            "last_edit_timestamp": 1479505404,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "e.alexander.segura@gmail.com",
            "sender_full_name": "Alex Segura (SP1'19)",
            "sender_id": 2899,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Is the future of progamming Haskell?",
            "submessages": [],
            "timestamp": 1479505054,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/8651a8565e010cd3aebcd360badf2a92?d=identicon&version=1",
            "client": "website",
            "content": "<p>To restrict ourselves to discussing languages (or even tooling in general) when we discuss the \"future of programming\" is also a very narrow interpretation of \"programming\" and the task of writing code/getting computers to do things.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 103617227,
            "is_me_message": false,
            "last_edit_timestamp": 1479505472,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "e.alexander.segura@gmail.com",
            "sender_full_name": "Alex Segura (SP1'19)",
            "sender_id": 2899,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Is the future of progamming Haskell?",
            "submessages": [],
            "timestamp": 1479505118,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4d074af6cc341ef51b25bb2f738cdb11?d=identicon&version=1",
            "client": "website",
            "content": "<p>That was very well put, but I'm not ready to let go of the idea of <em>progress</em> in language development. You're right that there is no total ordering, but I do think progress can and is made over time, e.g. Python 3 is a better language than Python 2 and better reflects today's programming environment (or if that's controversial, Python 2.7 is a better language than Python 2.0).</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 103617871,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "vaibhavsagar@gmail.com",
            "sender_full_name": "Vaibhav Sagar (he) (F1'16)",
            "sender_id": 100041,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Is the future of progamming Haskell?",
            "submessages": [],
            "timestamp": 1479506317,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4d074af6cc341ef51b25bb2f738cdb11?d=identicon&version=1",
            "client": "website",
            "content": "<p>You're right that the future of programming isn't just about languages and tooling.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 103617878,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "vaibhavsagar@gmail.com",
            "sender_full_name": "Vaibhav Sagar (he) (F1'16)",
            "sender_id": 100041,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Is the future of progamming Haskell?",
            "submessages": [],
            "timestamp": 1479506368,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/8651a8565e010cd3aebcd360badf2a92?d=identicon&version=1",
            "client": "website",
            "content": "<p>Thanks for engaging with me <span class=\"user-mention\" data-user-email=\"vaibhavsagar@gmail.com\">@Vaibhav Sagar (F1'16)</span> . How do you know python 3 is <em>better</em> than python 2? You can tell me some reasons why you might like it more, but, if I prefer 2, am I wrong?</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 103618014,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "e.alexander.segura@gmail.com",
            "sender_full_name": "Alex Segura (SP1'19)",
            "sender_id": 2899,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Is the future of progamming Haskell?",
            "submessages": [],
            "timestamp": 1479506574,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/8651a8565e010cd3aebcd360badf2a92?d=identicon&version=1",
            "client": "website",
            "content": "<p>Am I wrong for liking ocaml more than haskell (Or just admitting that in the Haskell stream :))? </p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 103618027,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "e.alexander.segura@gmail.com",
            "sender_full_name": "Alex Segura (SP1'19)",
            "sender_id": 2899,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Is the future of progamming Haskell?",
            "submessages": [],
            "timestamp": 1479506615,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/8651a8565e010cd3aebcd360badf2a92?d=identicon&version=1",
            "client": "website",
            "content": "<p>I think it is OK if we keep the notion of progress... but only if we can define it clearly!</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 103618075,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "e.alexander.segura@gmail.com",
            "sender_full_name": "Alex Segura (SP1'19)",
            "sender_id": 2899,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Is the future of progamming Haskell?",
            "submessages": [],
            "timestamp": 1479506683,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/8651a8565e010cd3aebcd360badf2a92?d=identicon&version=1",
            "client": "website",
            "content": "<p>Of course, even <em>if</em> we could agree upon one, that will just be <em>our</em> little notion of \"progress...\" The problem of having an ambiguous notion of \"progress\" is eliminated, but our problems in communication just get pushed one level up into the question of: \"what is the best decision procedure for electing a definition for progress?\"</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 103618083,
            "is_me_message": false,
            "last_edit_timestamp": 1479507052,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "e.alexander.segura@gmail.com",
            "sender_full_name": "Alex Segura (SP1'19)",
            "sender_id": 2899,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Is the future of progamming Haskell?",
            "submessages": [],
            "timestamp": 1479506711,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/8651a8565e010cd3aebcd360badf2a92?d=identicon&version=1",
            "client": "website",
            "content": "<p>We can still talk about it though :)</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 103618212,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "e.alexander.segura@gmail.com",
            "sender_full_name": "Alex Segura (SP1'19)",
            "sender_id": 2899,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Is the future of progamming Haskell?",
            "submessages": [],
            "timestamp": 1479506925,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4d074af6cc341ef51b25bb2f738cdb11?d=identicon&version=1",
            "client": "website",
            "content": "<p>Those are good questions! With Python 3, I would say it's <em>better</em> because it recognises a unicode/bytes distinction that is absent in Python 2. If you prefer Python 2, you're not <em>wrong</em>, but you're opening up yourself to classes of errors and incorrect behaviour that you wouldn't get otherwise.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 103618290,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "vaibhavsagar@gmail.com",
            "sender_full_name": "Vaibhav Sagar (he) (F1'16)",
            "sender_id": 100041,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Is the future of progamming Haskell?",
            "submessages": [],
            "timestamp": 1479507058,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4d074af6cc341ef51b25bb2f738cdb11?d=identicon&version=1",
            "client": "website",
            "content": "<p>I'd say it's a bit like a lattice, especially after taking another look at Lindsey's LVars <img alt=\":smile:\" class=\"emoji\" src=\"/static/third/gemoji/images/emoji/smile.png\" title=\":smile:\"></p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 103618302,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "vaibhavsagar@gmail.com",
            "sender_full_name": "Vaibhav Sagar (he) (F1'16)",
            "sender_id": 100041,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Is the future of progamming Haskell?",
            "submessages": [],
            "timestamp": 1479507094,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4d074af6cc341ef51b25bb2f738cdb11?d=identicon&version=1",
            "client": "website",
            "content": "<p>OCaml and Haskell are very closely related, and I really don't know which is better or if either is.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 103618355,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "vaibhavsagar@gmail.com",
            "sender_full_name": "Vaibhav Sagar (he) (F1'16)",
            "sender_id": 100041,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Is the future of progamming Haskell?",
            "submessages": [],
            "timestamp": 1479507177,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/8651a8565e010cd3aebcd360badf2a92?d=identicon&version=1",
            "client": "website",
            "content": "<p>Well if it's a lattice you should be able to find the least upper bound ;)</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 103618361,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "e.alexander.segura@gmail.com",
            "sender_full_name": "Alex Segura (SP1'19)",
            "sender_id": 2899,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Is the future of progamming Haskell?",
            "submessages": [],
            "timestamp": 1479507212,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4d074af6cc341ef51b25bb2f738cdb11?d=identicon&version=1",
            "client": "website",
            "content": "<p>and it's Lisp</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 103618364,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "vaibhavsagar@gmail.com",
            "sender_full_name": "Vaibhav Sagar (he) (F1'16)",
            "sender_id": 100041,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Is the future of progamming Haskell?",
            "submessages": [],
            "timestamp": 1479507231,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4d074af6cc341ef51b25bb2f738cdb11?d=identicon&version=1",
            "client": "website",
            "content": "<p>I jest</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 103618365,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "vaibhavsagar@gmail.com",
            "sender_full_name": "Vaibhav Sagar (he) (F1'16)",
            "sender_id": 100041,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Is the future of progamming Haskell?",
            "submessages": [],
            "timestamp": 1479507237,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/3f4785d95e43ecfb2f20d49e6ec824dc?d=identicon&version=1",
            "client": "website",
            "content": "<p>I think progress gets easier to define when you constrain the domain a bit. For example, I think it's relatively uncontroversial to say that Ruby + Rails is better for writing web apps than assembly, though to <span class=\"user-mention\" data-user-email=\"e.alexander.segura@gmail.com\">@Alex Segura (F2'16)</span>'s point, that is due to more than just the language.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 103618412,
            "is_me_message": false,
            "last_edit_timestamp": 1479509375,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "nick@recurse.com",
            "sender_full_name": "Nick Bergson-Shilcock (he)",
            "sender_id": 811,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Is the future of progamming Haskell?",
            "submessages": [],
            "timestamp": 1479507310,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4d074af6cc341ef51b25bb2f738cdb11?d=identicon&version=1",
            "client": "website",
            "content": "<p>I agree that that programming languages/ecosystems involve tradeoffs</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 103618459,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "vaibhavsagar@gmail.com",
            "sender_full_name": "Vaibhav Sagar (he) (F1'16)",
            "sender_id": 100041,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Is the future of progamming Haskell?",
            "submessages": [],
            "timestamp": 1479507369,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/a6ac867cbcefd0b2623d3fd1b31c907ce7e83606?x=x&version=2",
            "client": "website",
            "content": "<p>If Python 3 is better how come everyone still sticks to 2? <img alt=\"\ud83d\ude0e\" class=\"emoji\" src=\"/static/third/gemoji/images/emoji/unicode/1f60e.png\" title=\"\ud83d\ude0e\"></p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 103618521,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "imjuansoto@gmail.com",
            "sender_full_name": "Juan Soto (F1'16)",
            "sender_id": 100019,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Is the future of progamming Haskell?",
            "submessages": [],
            "timestamp": 1479507513,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4d074af6cc341ef51b25bb2f738cdb11?d=identicon&version=1",
            "client": "website",
            "content": "<p>inertia</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 103618526,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "vaibhavsagar@gmail.com",
            "sender_full_name": "Vaibhav Sagar (he) (F1'16)",
            "sender_id": 100041,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Is the future of progamming Haskell?",
            "submessages": [],
            "timestamp": 1479507550,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4d074af6cc341ef51b25bb2f738cdb11?d=identicon&version=1",
            "client": "website",
            "content": "<p>well played <span class=\"user-mention\" data-user-email=\"imjuansoto@gmail.com\">@Juan Soto (F1'16)</span> <img alt=\":smile:\" class=\"emoji\" src=\"/static/third/gemoji/images/emoji/smile.png\" title=\":smile:\"></p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 103618542,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "vaibhavsagar@gmail.com",
            "sender_full_name": "Vaibhav Sagar (he) (F1'16)",
            "sender_id": 100041,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Is the future of progamming Haskell?",
            "submessages": [],
            "timestamp": 1479507575,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/a6ac867cbcefd0b2623d3fd1b31c907ce7e83606?x=x&version=2",
            "client": "website",
            "content": "<p>We still use 2 at work (Django API)</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 103618602,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "imjuansoto@gmail.com",
            "sender_full_name": "Juan Soto (F1'16)",
            "sender_id": 100019,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Is the future of progamming Haskell?",
            "submessages": [],
            "timestamp": 1479507658,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4d074af6cc341ef51b25bb2f738cdb11?d=identicon&version=1",
            "client": "website",
            "content": "<p>This specific question is much better suited to the <a href=\"https://recurse.zulipchat.com/#narrow/stream/python\" target=\"_blank\" title=\"https://recurse.zulipchat.com/#narrow/stream/python\"><code>python</code></a> stream, but in summary I would say it is because a lot of effort needs to go into making code Python 3 compatible or Python 2+3 compatible because of the string/bytes distinction, and for most codebases the business case isn't there. Some libraries are still Python 2 only, and that doesn't help either. Eventually Python 2 will be EOLed and everyone will either move to Python 3 or do a rewrite in another language, such as Go.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 103618721,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "vaibhavsagar@gmail.com",
            "sender_full_name": "Vaibhav Sagar (he) (F1'16)",
            "sender_id": 100041,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Is the future of progamming Haskell?",
            "submessages": [],
            "timestamp": 1479507931,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4d074af6cc341ef51b25bb2f738cdb11?d=identicon&version=1",
            "client": "website",
            "content": "<p>It's telling, though, none of these reasons have anything to do with the relative merits of Python 2 and 3 as languages.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 103618771,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "vaibhavsagar@gmail.com",
            "sender_full_name": "Vaibhav Sagar (he) (F1'16)",
            "sender_id": 100041,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Is the future of progamming Haskell?",
            "submessages": [],
            "timestamp": 1479507993,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/c62db72438b13a2504cd3834b3c5e364?d=identicon&version=1",
            "client": "desktop app Mac 0.5.2",
            "content": "<p>i think it is important not to confuse the notion of \"progress\" for the notion of \"easily measurable progress\". by \"progress\" i mean overall gains in programmer productivity, all inclusive (including learning curves and other \"fixed costs\"). that kind of a thing is notoriously hard to measure, but as nick said above, RoR &gt; fortran &gt; assembly by that notion at least for web-applications. it'd be fair to say that ruby &gt; fortran &gt; assembly also, i think, but the measurement is harder.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 103624545,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "rodguze@gmail.com",
            "sender_full_name": "Rodrigo Guzman (F2'16)",
            "sender_id": 100181,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Is the future of progamming Haskell?",
            "submessages": [],
            "timestamp": 1479520882,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/c62db72438b13a2504cd3834b3c5e364?d=identicon&version=1",
            "client": "desktop app Mac 0.5.2",
            "content": "<p><span class=\"user-mention\" data-user-email=\"e.alexander.segura@gmail.com\">@Alex Segura (F2'16)</span> </p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 103624546,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "rodguze@gmail.com",
            "sender_full_name": "Rodrigo Guzman (F2'16)",
            "sender_id": 100181,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Is the future of progamming Haskell?",
            "submessages": [],
            "timestamp": 1479520893,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/57ad6b289d2b066f6497c2c7a542f246?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"vaibhavsagar@gmail.com\">@Vaibhav Sagar (F1'16)</span> </p>\n<blockquote>\n<p>Is that because Haskell no longer reflects (if it ever did) the state of the art in progamming language research? Or is it because of shortcomings in the language?</p>\n</blockquote>\n<p>No, it's not either of those reasons.   The reason I say people in my community would be reluctant to say that Haskell is the future of programming is that \"the future of programming\" will be defined by trends that are much bigger than any one language or tool, and although, sure, Haskell may be part of some of those trends or even at the forefront of some of those trends, that doesn't mean that Haskell is the medium in which they will end up gaining widespread acceptance.</p>\n<p><span class=\"user-mention\" data-user-email=\"e.alexander.segura@gmail.com\">@Alex Segura (F2'16)</span> </p>\n<blockquote>\n<p>I can't speak for Lindsey, but my perspective (on why haskell is not \"the future of programming\") is that the very phrase \"future of programming\" implies a ordering on the history of language development: that it is something that progresses, indeed, that it is something that progress can be made in</p>\n</blockquote>\n<p>Nah, I don't buy that programming isn't something that progress can be made in.  But regardless of whether you think that the future will be better than the past, there will definitely be <em>a</em> future. :)</p>\n<p>In 2015 I was on a panel with a bunch of people from academia and industry, including fellow RCer <span class=\"user-mention\" data-user-email=\"crista@tagide.com\">@Crista Lopes</span>, to talk about <a href=\"http://dl.acm.org/citation.cfm?id=2818719\" target=\"_blank\" title=\"http://dl.acm.org/citation.cfm?id=2818719\">\"The Future of Programming Languages and Programmers.\"</a>  We were each asked to submit a short writeup before the panel.  I've attached the resulting collection of writeups <a href=\"/user_uploads/13/RZDZ_f6f8ErzIQhx0xDca-li/p63-fraser.pdf\" target=\"_blank\" title=\"p63-fraser.pdf\">here</a>, for those who don't have access to the ACM DL.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 103624592,
            "is_me_message": false,
            "last_edit_timestamp": 1479521196,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "lindsey@composition.al",
            "sender_full_name": "Lindsey Kuper (she)",
            "sender_id": 2170,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Is the future of progamming Haskell?",
            "submessages": [],
            "timestamp": 1479521022,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/57ad6b289d2b066f6497c2c7a542f246?d=identicon&version=1",
            "client": "website",
            "content": "<p>I would suggest that you not read too much into it, though.  I can't predict the future and neither can any of those other people.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 103624684,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "lindsey@composition.al",
            "sender_full_name": "Lindsey Kuper (she)",
            "sender_id": 2170,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Is the future of progamming Haskell?",
            "submessages": [],
            "timestamp": 1479521220,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/df1a8a2c03bdbc563a438dbd7fe71b66?d=identicon&version=1",
            "client": "website",
            "content": "<p>I'd consider not <em>the future</em> but <em>many</em> futures of programming, since programming in different domains require very different tools/ways of thinking as eluded by <span class=\"user-mention\" data-user-email=\"nick@hackerschool.com\">@Nick Bergson-Shilcock</span> . </p>\n<p>One future that I see being quite interesting is dependently-typed metaprogramming; i.e. write a typesafe program that, given some data (lets say some json), generates a typed program (lets say a API)</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 103632685,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "freshdried@gmail.com",
            "sender_full_name": "Sean Lee (he) (SP2'16)",
            "sender_id": 8985,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Is the future of progamming Haskell?",
            "submessages": [],
            "timestamp": 1479542406,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/df1a8a2c03bdbc563a438dbd7fe71b66?d=identicon&version=1",
            "client": "website",
            "content": "<p><a href=\"https://www.itu.dk/people/drc/pubs/dependent-type-providers.pdf\" target=\"_blank\" title=\"https://www.itu.dk/people/drc/pubs/dependent-type-providers.pdf\">https://www.itu.dk/people/drc/pubs/dependent-type-providers.pdf</a></p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 103632817,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "freshdried@gmail.com",
            "sender_full_name": "Sean Lee (he) (SP2'16)",
            "sender_id": 8985,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Is the future of progamming Haskell?",
            "submessages": [],
            "timestamp": 1479542808,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/f727856d13b61ec63a08b140a5aad13a?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"webyrd@gmail.com\">@Will Byrd</span> is doing some really interesting work in this area</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 103674835,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "rose@superluser.com",
            "sender_full_name": "Rose Ames (W2'16)",
            "sender_id": 5011,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Is the future of progamming Haskell?",
            "submessages": [],
            "timestamp": 1479657541,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4d074af6cc341ef51b25bb2f738cdb11?d=identicon&version=1",
            "client": "website",
            "content": "<p>This feels like it was written for me: <a href=\"http://comonad.com/reader/2014/letter-to-a-young-haskell-enthusiast/\" target=\"_blank\" title=\"http://comonad.com/reader/2014/letter-to-a-young-haskell-enthusiast/\">http://comonad.com/reader/2014/letter-to-a-young-haskell-enthusiast/</a></p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 103678273,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "vaibhavsagar@gmail.com",
            "sender_full_name": "Vaibhav Sagar (he) (F1'16)",
            "sender_id": 100041,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Letter to a Young Haskell Enthusiast",
            "submessages": [],
            "timestamp": 1479666292,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4140d5654a0f8d10811c31ea9a659a6d?d=identicon&version=1",
            "client": "website",
            "content": "<p>Thanks Rose!</p>\n<p><em>I'll be in Manhattan this weekend.  Will RC be open?  Anyone interested in hacking or hanging out?  :)</em></p>\n<p>I've been working, along with many other fantastic people, on a programming paradigm that we call \"relational programming.\"  In contrast to functional programming, in which you write programs as mathematical functions, in relational programming you write programs as mathematical relations.</p>\n<p>This sounds nebulous, but the resulting approach is essentially a version of (constraint) logic programming without the \"logical side-effects\" that are typically used in Prolog programs.  The resulting programs are very high-level and declarative:  you specify <em>what</em> the program should do, and a built-in search and constraint solving engine tries to figure out <em>how</em> to make that happen.</p>\n<p>The current language we are using to explore relational programming is called \"miniKanren.\"  However the important thing is the paradigm, not the language.  You can also do this style of programming in Prolog, for example, although it can be a bit awkward.</p>\n<p>One advantage of relational programming is its flexibility.  For example, if you write an interpreter for Scheme as a miniKanren relation, that interpreter is capable not just of interpreting Scheme programs, but also of <em>synthesizing</em> simple recursive Scheme functions from example uses.  I'm working with Greg Rosenblatt on a  prototype tool to demonstrate a few of these capabilities:</p>\n<p><a href=\"https://github.com/webyrd/Barliman\" target=\"_blank\" title=\"https://github.com/webyrd/Barliman\">https://github.com/webyrd/Barliman</a></p>\n<p>The screen shots on the main page are out of date--Greg has sped up many program synthesis queries by a factor of a million (!) since the screen shots were taken.  Here are a few more recent screenshots (our system has become faster since these):</p>\n<p><a href=\"https://github.com/webyrd/Barliman/blob/master/interesting_examples/append-synthesis/Screen%20Shot%202016-10-09%20at%2011.53.35%20PM.png\" target=\"_blank\" title=\"https://github.com/webyrd/Barliman/blob/master/interesting_examples/append-synthesis/Screen%20Shot%202016-10-09%20at%2011.53.35%20PM.png\">https://github.com/webyrd/Barliman/blob/master/interesting_examples/append-synthesis/Screen%20Shot%202016-10-09%20at%2011.53.35%20PM.png</a></p>\n<p><a href=\"https://github.com/webyrd/Barliman/blob/master/interesting_examples/append-equals/Screen%20Shot%202016-10-11%20at%203.43.31%20AM.png\" target=\"_blank\" title=\"https://github.com/webyrd/Barliman/blob/master/interesting_examples/append-equals/Screen%20Shot%202016-10-11%20at%203.43.31%20AM.png\">https://github.com/webyrd/Barliman/blob/master/interesting_examples/append-equals/Screen%20Shot%202016-10-11%20at%203.43.31%20AM.png</a></p>\n<p>Barliman is also capable of an interesting form of test-driven development (TDD): it can run tests on code that has \"holes\" representing missing expressions.  That is, it can run your tests on a partially-undefined program, and even prove that no matter how you finish writing your code, that test will fail.  For example:</p>\n<p><a href=\"https://github.com/webyrd/Barliman/blob/master/interesting_examples/refuatation_incorrect_partial_rhs_remove_foo_shallow/Screen%20Shot%202016-10-09%20at%2010.10.32%20PM.png\" target=\"_blank\" title=\"https://github.com/webyrd/Barliman/blob/master/interesting_examples/refuatation_incorrect_partial_rhs_remove_foo_shallow/Screen%20Shot%202016-10-09%20at%2010.10.32%20PM.png\">https://github.com/webyrd/Barliman/blob/master/interesting_examples/refuatation_incorrect_partial_rhs_remove_foo_shallow/Screen%20Shot%202016-10-09%20at%2010.10.32%20PM.png</a></p>\n<p>If this sounds interesting, you might watch this talk I gave at PolyConf in 2015:</p>\n<p><a href=\"https://www.youtube.com/watch?v=eQL48qYDwp4\" target=\"_blank\" title=\"https://www.youtube.com/watch?v=eQL48qYDwp4\">https://www.youtube.com/watch?v=eQL48qYDwp4</a></p>\n<p>Since that talk we've radically sped up some forms of program synthesis.</p>\n<p>For general information on miniKanren, you might check out:</p>\n<p><a href=\"http://minikanren.org/\" target=\"_blank\" title=\"http://minikanren.org/\">http://minikanren.org/</a></p>\n<p>I'm also happy to do a hangout with anyone interested.  Or talk with them this coming weekend at RC!</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 103680191,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "webyrd@gmail.com",
            "sender_full_name": "Will Byrd",
            "sender_id": 2419,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Is the future of progamming Haskell?",
            "submessages": [],
            "timestamp": 1479671077,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/675466cb255ba68bf2b4e714d9371d9a0dab1e39?x=x&version=1",
            "client": "website",
            "content": "<blockquote>\n<p><code>#haskell-beginners</code> has for years been lauded as the best IRC for learning purposes. </p>\n</blockquote>\n<p>I'm sure the content and back-end support are wonderful.<br>\n<br>\nThe delivery vehicle, however, is IRC, and IRC clients are generally lousy.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 103688440,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "dpb@brannerchinese.com",
            "sender_full_name": "David P Branner (SP2'17)",
            "sender_id": 850,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Is the future of progamming Haskell?",
            "submessages": [],
            "timestamp": 1479691907,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/df1a8a2c03bdbc563a438dbd7fe71b66?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"webyrd@gmail.com\">@Will Byrd</span> just watched the talk, very cool! you meant the weekend i.e. the few days right after thanksgiving, and not the weekend that just passed? I'd love to chat about relational programming; I'm interested in program synthesis and bidirectional programming, and it seems like this relational stuff can be used for both :)</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 103689482,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "freshdried@gmail.com",
            "sender_full_name": "Sean Lee (he) (SP2'16)",
            "sender_id": 8985,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Is the future of progamming Haskell?",
            "submessages": [],
            "timestamp": 1479694570,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4140d5654a0f8d10811c31ea9a659a6d?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"freshdried@gmail.com\">@Sean Lee (SP2'16)</span>   Yes, the Saturday evening and all of Sunday immediately after Thanksgiving!</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 103694730,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "webyrd@gmail.com",
            "sender_full_name": "Will Byrd",
            "sender_id": 2419,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Is the future of progamming Haskell?",
            "submessages": [],
            "timestamp": 1479707694,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/dd016afc5e2d346a0eee00bb0268c2b33da824d5?x=x&version=1",
            "client": "website",
            "content": "<p>Happily, there seems to be some healing these days: <a href=\"https://mail.haskell.org/pipermail/haskell/2016-September/024995.html\" target=\"_blank\" title=\"https://mail.haskell.org/pipermail/haskell/2016-September/024995.html\">https://mail.haskell.org/pipermail/haskell/2016-September/024995.html</a> <a href=\"http://www.snoyman.com/blog/2016/09/respect\" target=\"_blank\" title=\"http://www.snoyman.com/blog/2016/09/respect\">http://www.snoyman.com/blog/2016/09/respect</a></p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 104003582,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "amindfv@gmail.com",
            "sender_full_name": "Tom Murphy (F2'15)",
            "sender_id": 8693,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "cabal new-build is a package manager",
            "submessages": [],
            "timestamp": 1480386484,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/dd016afc5e2d346a0eee00bb0268c2b33da824d5?x=x&version=1",
            "client": "website",
            "content": "<p>dang, this is a cool new feature, would have never noticed it if it hadn't been pointed out...</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 104003841,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "amindfv@gmail.com",
            "sender_full_name": "Tom Murphy (F2'15)",
            "sender_id": 8693,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Type definitions in GHCi",
            "submessages": [],
            "timestamp": 1480387094,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4d074af6cc341ef51b25bb2f738cdb11?d=identicon&version=1",
            "client": "website",
            "content": "<p>have you been following the stuff on r/haskell recently? Lots of shade being thrown Snoyman's way</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 104004921,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "vaibhavsagar@gmail.com",
            "sender_full_name": "Vaibhav Sagar (he) (F1'16)",
            "sender_id": 100041,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "cabal new-build is a package manager",
            "submessages": [],
            "timestamp": 1480389624,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4d074af6cc341ef51b25bb2f738cdb11?d=identicon&version=1",
            "client": "website",
            "content": "<p><a href=\"https://www.reddit.com/r/haskell/comments/5eac5i/spreading_the_gospel_of_haskell/\" target=\"_blank\" title=\"https://www.reddit.com/r/haskell/comments/5eac5i/spreading_the_gospel_of_haskell/\">https://www.reddit.com/r/haskell/comments/5eac5i/spreading_the_gospel_of_haskell/</a> is an example</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 104004932,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "vaibhavsagar@gmail.com",
            "sender_full_name": "Vaibhav Sagar (he) (F1'16)",
            "sender_id": 100041,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "cabal new-build is a package manager",
            "submessages": [],
            "timestamp": 1480389685,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/dd016afc5e2d346a0eee00bb0268c2b33da824d5?x=x&version=1",
            "client": "website",
            "content": "<p>I don't go on the haskell reddit much but I did see that post. (Trying to say this part carefully:) I think some people there are still not being tactful, but things are better and there are legitimate concerns they're bringing up</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 104005121,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "amindfv@gmail.com",
            "sender_full_name": "Tom Murphy (F2'15)",
            "sender_id": 8693,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "cabal new-build is a package manager",
            "submessages": [],
            "timestamp": 1480390178,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/dd016afc5e2d346a0eee00bb0268c2b33da824d5?x=x&version=1",
            "client": "website",
            "content": "<p>I would rather not bring any of the discussion into zulip though, so I'd be happy to either PM or remove my comment if people would prefer</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 104005217,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "amindfv@gmail.com",
            "sender_full_name": "Tom Murphy (F2'15)",
            "sender_id": 8693,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "cabal new-build is a package manager",
            "submessages": [],
            "timestamp": 1480390356,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/dd016afc5e2d346a0eee00bb0268c2b33da824d5?x=x&version=1",
            "client": "website",
            "content": "<p>Overall I was feeling disheartened about the community for the past ~6 months but since SPJ's email I think people have been doing much better</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 104005222,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "amindfv@gmail.com",
            "sender_full_name": "Tom Murphy (F2'15)",
            "sender_id": 8693,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "cabal new-build is a package manager",
            "submessages": [],
            "timestamp": 1480390417,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/dd016afc5e2d346a0eee00bb0268c2b33da824d5?x=x&version=1",
            "client": "website",
            "content": "<p>When I started Haskell was the most welcoming programming community I knew (this is before I knew about RC <img alt=\":smile_cat:\" class=\"emoji\" src=\"/static/third/gemoji/images/emoji/smile_cat.png\" title=\":smile_cat:\"> ), and so the bar for me is high!</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 104005265,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "amindfv@gmail.com",
            "sender_full_name": "Tom Murphy (F2'15)",
            "sender_id": 8693,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "cabal new-build is a package manager",
            "submessages": [],
            "timestamp": 1480390498,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/dd016afc5e2d346a0eee00bb0268c2b33da824d5?x=x&version=1",
            "client": "website",
            "content": "<p>The strongly-hyped haskell interpreter: <a href=\"https://github.com/HeinrichApfelmus/hyper-haskell\" target=\"_blank\" title=\"https://github.com/HeinrichApfelmus/hyper-haskell\">https://github.com/HeinrichApfelmus/hyper-haskell</a></p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 104005323,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "amindfv@gmail.com",
            "sender_full_name": "Tom Murphy (F2'15)",
            "sender_id": 8693,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "HyperHaskell",
            "submessages": [],
            "timestamp": 1480390664,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/f727856d13b61ec63a08b140a5aad13a?d=identicon&version=1",
            "client": "website",
            "content": "<p>strongly hyped <img alt=\":heart:\" class=\"emoji\" src=\"/static/third/gemoji/images/emoji/heart.png\" title=\":heart:\"> </p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 104023912,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "rose@superluser.com",
            "sender_full_name": "Rose Ames (W2'16)",
            "sender_id": 5011,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "HyperHaskell",
            "submessages": [],
            "timestamp": 1480435884,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/f050b80594d5d59676e0620842eb0316?d=identicon&version=1",
            "client": "website",
            "content": "<p>One of the things I've wanted to do while at RC was create a Javascript generator...something to generate completely random but runnable javascript programs.</p>\n<p>I went through the CIS194 course and I'm hoping to be able to implement this now. Would love thoughts/opinions/suggestions on my plan though!</p>\n<p><strong>Plan:</strong></p>\n<ul>\n<li>Start by generating programs with only function declarations nested at different levels.  </li>\n<li>Use an AST explorer to figure out the data types (<a href=\"https://astexplorer.net/\" target=\"_blank\" title=\"https://astexplorer.net/\">https://astexplorer.net/</a>)  </li>\n<li>Have a bunch of Datatypes to represent every part of the AST I need.  </li>\n<li>Start with a Program and branch down through the possible children.  </li>\n<li>Use monads to track the state as I build down.  </li>\n</ul>\n<p><strong>Questions:</strong></p>\n<ul>\n<li>I've heard that it's bad to mix monadic code with the pure function code. It seems like if every branch is random, then every function will work with monads...or is there a way to structure this to avoid that?  </li>\n<li>Does haskell have a way to generate a list of possible values for a datatype? Maybe that's a type checking type of thing? Basically if I have  </li>\n</ul>\n<div class=\"codehilite\"><pre><span></span><span class=\"kr\">newtype</span> <span class=\"kt\">Program</span> <span class=\"ow\">=</span> <span class=\"kt\">FunctionDeclaration</span> <span class=\"o\">|</span> <span class=\"kt\">VariableDeclaration</span>\n</pre></div>\n\n\n<p>Is there a function that I can use, let's say <code>possibleValues</code> such that</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"nf\">possibleValues</span> <span class=\"kt\">Program</span> <span class=\"ow\">-&gt;</span> <span class=\"p\">[</span><span class=\"kt\">FunctionDeclaration</span><span class=\"p\">,</span> <span class=\"kt\">VariableDeclaration</span><span class=\"p\">]</span>\n</pre></div>\n\n\n<ul>\n<li>Could I represent this \"Tree of possible javascript programs\" as an infinite data structure?</li>\n<li>Should I have just built this in javascript (which I'm less new at)?</li>\n</ul>\n<p>... no ... Haskell is the future. We're going to make me a haskell.</p>\n<p><img alt=\":heart:\" class=\"emoji\" src=\"/static/third/gemoji/images/emoji/heart.png\" title=\":heart:\">-skells for all!</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 104025192,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "haroldtreen@gmail.com",
            "sender_full_name": "Harold Willis Treen (F2'16)",
            "sender_id": 100193,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Learn Me A Javascript Generator",
            "submessages": [],
            "timestamp": 1480438166,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/f050b80594d5d59676e0620842eb0316?d=identicon&version=1",
            "client": "website",
            "content": "<p>BTW, the place I saw the monadic vs. non-nomadic seperation advice was from this quickcheck tutorial (<a href=\"https://wiki.haskell.org/Introduction_to_QuickCheck2\" target=\"_blank\" title=\"https://wiki.haskell.org/Introduction_to_QuickCheck2\">https://wiki.haskell.org/Introduction_to_QuickCheck2</a>)</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 104026350,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "haroldtreen@gmail.com",
            "sender_full_name": "Harold Willis Treen (F2'16)",
            "sender_id": 100193,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Learn Me A Javascript Generator",
            "submessages": [],
            "timestamp": 1480440052,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/e64653c7d72d11a7ab80ad5944456f2f?d=identicon&version=1",
            "client": "website",
            "content": "<p>Do not use monads to track state.  You will need to use the Random monad and the IO monad already -- and that is more than enough.  Use arguments to track state.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 104034450,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "r0ml@mac.com",
            "sender_full_name": "Robert Lefkowitz",
            "sender_id": 4749,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Learn Me A Javascript Generator",
            "submessages": [],
            "timestamp": 1480452542,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/f050b80594d5d59676e0620842eb0316?d=identicon&version=1",
            "client": "website",
            "content": "<p>Ah, this is true. Knowing the next state will only depend on the current state and not the past state. Phew, less monads! </p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 104035436,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "haroldtreen@gmail.com",
            "sender_full_name": "Harold Willis Treen (F2'16)",
            "sender_id": 100193,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Learn Me A Javascript Generator",
            "submessages": [],
            "timestamp": 1480454065,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/cc979dfc088d7ca86c02fbfdb5f0fd93?d=identicon&version=1",
            "client": "website",
            "content": "<p>maybe somebody suggested this already but have you heard about quickcheck? they have a type definition called <a href=\"https://hackage.haskell.org/package/QuickCheck-2.9.2/docs/Test-QuickCheck-Gen.html\" target=\"_blank\" title=\"https://hackage.haskell.org/package/QuickCheck-2.9.2/docs/Test-QuickCheck-Gen.html\">Gen</a> which represents a generator of values of whatever type you want. They provide multiple constructors and <code>Gen</code> implements some typeclasses like monad which allow you to combine different values</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 104066070,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "miguelvilag@gmail.com",
            "sender_full_name": "Miguel Vil\u00e1 (F1'16)",
            "sender_id": 100037,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Learn Me A Javascript Generator",
            "submessages": [],
            "timestamp": 1480522110,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/cc979dfc088d7ca86c02fbfdb5f0fd93?d=identicon&version=1",
            "client": "website",
            "content": "<p>for instance <code>genProgram = Gen.oneOf [FunctionDeclaration, VariableDeclaration] :: Gen Program</code></p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 104066087,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "miguelvilag@gmail.com",
            "sender_full_name": "Miguel Vil\u00e1 (F1'16)",
            "sender_id": 100037,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Learn Me A Javascript Generator",
            "submessages": [],
            "timestamp": 1480522179,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/cc979dfc088d7ca86c02fbfdb5f0fd93?d=identicon&version=1",
            "client": "website",
            "content": "<p>when you are done building a <code>Gen Program</code> you can ask it to produce values by calling <code>generate</code> </p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 104066157,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "miguelvilag@gmail.com",
            "sender_full_name": "Miguel Vil\u00e1 (F1'16)",
            "sender_id": 100037,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Learn Me A Javascript Generator",
            "submessages": [],
            "timestamp": 1480522258,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/f050b80594d5d59676e0620842eb0316?d=identicon&version=1",
            "client": "website",
            "content": "<p>Oooo. That's neat! <br>\nI'll look more into it :). Thanks Miguel!</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 104073622,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "haroldtreen@gmail.com",
            "sender_full_name": "Harold Willis Treen (F2'16)",
            "sender_id": 100193,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Learn Me A Javascript Generator",
            "submessages": [],
            "timestamp": 1480532545,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/3ca604eb0c0cfa22b4a10fc739c056c8?d=identicon&version=1",
            "client": "website",
            "content": "<p>Using quickcheck is basically always a good idea when it's an option. :)</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 104228569,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "lukeadba@gmail.com",
            "sender_full_name": "Luke Barone-Adesi (he) (F'13)",
            "sender_id": 2903,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Learn Me A Javascript Generator",
            "submessages": [],
            "timestamp": 1480878253,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4d074af6cc341ef51b25bb2f738cdb11?d=identicon&version=1",
            "client": "website",
            "content": "<p>Haskell language features and standard libraries in pure Python: <a href=\"https://github.com/billpmurphy/hask\" target=\"_blank\" title=\"https://github.com/billpmurphy/hask\">https://github.com/billpmurphy/hask</a></p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 104419966,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "vaibhavsagar@gmail.com",
            "sender_full_name": "Vaibhav Sagar (he) (F1'16)",
            "sender_id": 100041,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Hask",
            "submessages": [],
            "timestamp": 1481273392,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4d074af6cc341ef51b25bb2f738cdb11?d=identicon&version=1",
            "client": "website",
            "content": "<p><a href=\"https://github.com/quchen/articles/blob/8c42682fbe71452c25af1b729d5b5391f702d936/algebraic-blindness.md\" target=\"_blank\" title=\"https://github.com/quchen/articles/blob/8c42682fbe71452c25af1b729d5b5391f702d936/algebraic-blindness.md\">https://github.com/quchen/articles/blob/8c42682fbe71452c25af1b729d5b5391f702d936/algebraic-blindness.md</a></p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 104725831,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "vaibhavsagar@gmail.com",
            "sender_full_name": "Vaibhav Sagar (he) (F1'16)",
            "sender_id": 100041,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Algebraic Blindness",
            "submessages": [],
            "timestamp": 1481954436,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4d074af6cc341ef51b25bb2f738cdb11?d=identicon&version=1",
            "client": "website",
            "content": "<p>This gives me a great idea for a project that converts any <code>Enum</code> to a combination of <code>Either</code>, <code>Maybe</code>, and <code>Bool</code></p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 104725840,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "vaibhavsagar@gmail.com",
            "sender_full_name": "Vaibhav Sagar (he) (F1'16)",
            "sender_id": 100041,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Algebraic Blindness",
            "submessages": [],
            "timestamp": 1481954506,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/eae7b6f5f87e4790fd57b07015299eef?d=identicon&version=1",
            "client": "website",
            "content": "<p>Here's an interesting attempt at an interactive learning environment for Haskell (modelled after the Swift Playground apparently): <a href=\"http://haskellformac.com/\" target=\"_blank\" title=\"http://haskellformac.com/\">http://haskellformac.com/</a>. I like \"making programming easier through better interfaces\" projects, so I enjoyed playing around with it a little. A fun thing to do was checking out <a href=\"https://github.com/mchakravarty/lazy-lambda\" target=\"_blank\" title=\"https://github.com/mchakravarty/lazy-lambda\">this example game</a>, and while I couldn't build a standalone executable from it, I could play it inside the IDE (and tweak the physics of it to make it easier to play ;)).</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 104997291,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "irina.gossmann@gmail.com",
            "sender_full_name": "Irina Gossmann (she) (S1'16)",
            "sender_id": 9331,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Flappy Bird in Haskell",
            "submessages": [],
            "timestamp": 1482589052,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/5e4aa5311affe020e4b36536287f3ec1?d=identicon&version=2",
            "client": "website",
            "content": "<blockquote>\n<p>I like \"making programming easier through better interfaces\" projects, so I enjoyed playing around with it a little. </p>\n</blockquote>\n<p>+1. Playful learning :) </p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 104997456,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "kal_ali@hotmail.com",
            "sender_full_name": "Khalid Omar Ali (F2'15)",
            "sender_id": 8713,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Flappy Bird in Haskell",
            "submessages": [],
            "timestamp": 1482589501,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/5e4aa5311affe020e4b36536287f3ec1?d=identicon&version=2",
            "client": "website",
            "content": "<p>I'm going back to reading <a href=\"http://haskellbook.com/\" target=\"_blank\" title=\"http://haskellbook.com/\">this</a> and then possibly try to make a small game once I finish my current side project.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 104997501,
            "is_me_message": false,
            "last_edit_timestamp": 1482589704,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "kal_ali@hotmail.com",
            "sender_full_name": "Khalid Omar Ali (F2'15)",
            "sender_id": 8713,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Flappy Bird in Haskell",
            "submessages": [],
            "timestamp": 1482589623,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/612c7c2a108d7850c62d1d2293a481aa42855408?x=x&version=2",
            "client": "website",
            "content": "<p>I'm still inspired in my personal projects, but..</p>\n<p>I set out to build a barnes-hut gravity sim four years ago as a personal project. To do that I had to learn some opengl first (baking the pie from scratch!). I didn't want to learn opengl's 250+ verbs and X nouns, just the really cool applications of linear algebra (<a href=\"http://alfonse.bitbucket.org/oldtut/\" target=\"_blank\" title=\"http://alfonse.bitbucket.org/oldtut/\">this web-book is good!</a>). I decided to use <a href=\"https://hackage.haskell.org/package/GPipe-1.4.1\" target=\"_blank\" title=\"https://hackage.haskell.org/package/GPipe-1.4.1\">a haskell graphics library (v1.4)</a> which models the graphics pipeline as functions without effects. So then I had to start learning haskell. YAMT. After awhile I got some basic programs working. <a href=\"http://plredmond.github.io/posts/resources/gpipe.gif\" target=\"_blank\" title=\"http://plredmond.github.io/posts/resources/gpipe.gif\">I made a gif!</a>. I even <a href=\"https://github.com/plredmond-archive/gltut_haskell-gpipe\" target=\"_blank\" title=\"https://github.com/plredmond-archive/gltut_haskell-gpipe\">translated some of the book's tutorials</a>. The author of the haskell library and i became friends, and we <a href=\"https://hackage.haskell.org/package/GPipe-2.1.5\" target=\"_blank\" title=\"https://hackage.haskell.org/package/GPipe-2.1.5\">reworked the library interface (v2)</a> to focus more on efficiency. I wrote <a href=\"https://hackage.haskell.org/package/GPipe-GLFW\" target=\"_blank\" title=\"https://hackage.haskell.org/package/GPipe-GLFW\">an aux library</a>. Since my aux library barely works, I've spent the last year of my free time trying to improve it. In particular, i want to model the <a href=\"http://www.glfw.org/docs/latest/intro_guide.html#reentrancy\" target=\"_blank\" title=\"http://www.glfw.org/docs/latest/intro_guide.html#reentrancy\">reentrancy, context currency, resource, and thread safety concerns</a> in haskell's type system. Monad transformers don't handle multiple kinds of interacting effects well, so now I'm learning about <a href=\"http://okmij.org/ftp/Haskell/extensible/\" target=\"_blank\" title=\"http://okmij.org/ftp/Haskell/extensible/\">extensible effects</a> so that I can model the different constraints of GLFW at compile time, while still servicing them automatically at runtime. Will I ever get around to making that barnes' hut simulation?</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 105590139,
            "is_me_message": false,
            "last_edit_timestamp": 1483988507,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "PLRedmond@gmail.com",
            "sender_full_name": "Patrick Redmond (W'14)",
            "sender_id": 5014,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "yak shaving",
            "submessages": [],
            "timestamp": 1483988114,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4d074af6cc341ef51b25bb2f738cdb11?d=identicon&version=1",
            "client": "website",
            "content": "<p>I wish I shaved yaks like you, all the side effects of your quest to build your gravity sim are generally useful <img alt=\":smile:\" class=\"emoji\" src=\"/static/generated/emoji/images/emoji/smile.png\" title=\":smile:\"></p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 105605346,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "vaibhavsagar@gmail.com",
            "sender_full_name": "Vaibhav Sagar (he) (F1'16)",
            "sender_id": 100041,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "yak shaving",
            "submessages": [],
            "timestamp": 1484012910,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/612c7c2a108d7850c62d1d2293a481aa42855408?x=x&version=2",
            "client": "website",
            "content": "<p>lol! useful? you're the first to say that! thank you.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 105605697,
            "is_me_message": false,
            "last_edit_timestamp": 1484071543,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "PLRedmond@gmail.com",
            "sender_full_name": "Patrick Redmond (W'14)",
            "sender_id": 5014,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "yak shaving",
            "submessages": [],
            "timestamp": 1484013612,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4d074af6cc341ef51b25bb2f738cdb11?d=identicon&version=1",
            "client": "website",
            "content": "<p>This is the coolest library I've seen in a while: <a href=\"https://github.com/lyokha/nginx-haskell-module\" target=\"_blank\" title=\"https://github.com/lyokha/nginx-haskell-module\">https://github.com/lyokha/nginx-haskell-module</a></p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 106047972,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "vaibhavsagar@gmail.com",
            "sender_full_name": "Vaibhav Sagar (he) (F1'16)",
            "sender_id": 100041,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "nginx-haskell-module",
            "submessages": [],
            "timestamp": 1484889287,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4d074af6cc341ef51b25bb2f738cdb11?d=identicon&version=1",
            "client": "website",
            "content": "<p>I find myself looking forward to Kwang Yul Seo's daily Haskell posts: <a href=\"http://kseo.github.io/\" target=\"_blank\" title=\"http://kseo.github.io/\">http://kseo.github.io/</a></p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 106109224,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "vaibhavsagar@gmail.com",
            "sender_full_name": "Vaibhav Sagar (he) (F1'16)",
            "sender_id": 100041,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Kwang's Haskell Blog",
            "submessages": [],
            "timestamp": 1485024120,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4d074af6cc341ef51b25bb2f738cdb11?d=identicon&version=1",
            "client": "website",
            "content": "<p>Gabriel Gonzalez made this very easy to follow: <a href=\"https://www.youtube.com/watch?v=6a5Ti0r8Q2s\" target=\"_blank\" title=\"https://www.youtube.com/watch?v=6a5Ti0r8Q2s\">MuniHac 2016: Beautiful folds are practical, too</a></p>\n<div class=\"youtube-video message_inline_image\"><a data-id=\"6a5Ti0r8Q2s\" href=\"https://www.youtube.com/watch?v=6a5Ti0r8Q2s\" target=\"_blank\" title=\"https://www.youtube.com/watch?v=6a5Ti0r8Q2s\"><img src=\"https://i.ytimg.com/vi/6a5Ti0r8Q2s/default.jpg\"></a></div>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 106225914,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "vaibhavsagar@gmail.com",
            "sender_full_name": "Vaibhav Sagar (he) (F1'16)",
            "sender_id": 100041,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Beautiful folds are practical, too",
            "submessages": [],
            "timestamp": 1485272531,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/a6a0ff0a4a9a86ae7bc4524453d439bd?d=identicon&version=1",
            "client": "website",
            "content": "<p>Hi crew!</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 107235205,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "annie.cherk@gmail.com",
            "sender_full_name": "Annie Cherkaev (she/they) (m4'18)",
            "sender_id": 9502,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "SAT library?",
            "submessages": [],
            "timestamp": 1487279191,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/a6a0ff0a4a9a86ae7bc4524453d439bd?d=identicon&version=1",
            "client": "website",
            "content": "<p>I'm looking for a haskell library that will let me translate a boolean equation (like a ^ b) into the DIMACS cnf format that lots of SAT solvers take. Does anyone have experience with such libraries and have recommendations?</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 107235208,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "annie.cherk@gmail.com",
            "sender_full_name": "Annie Cherkaev (she/they) (m4'18)",
            "sender_id": 9502,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "SAT library?",
            "submessages": [],
            "timestamp": 1487279197,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/a6a0ff0a4a9a86ae7bc4524453d439bd?d=identicon&version=1",
            "client": "website",
            "content": "<p>The most promising one I found is called <a href=\"https://hackage.haskell.org/package/ersatz\" target=\"_blank\" title=\"https://hackage.haskell.org/package/ersatz\">Ersatz</a> and it's by Edward Kmett. Someone merged a PR 10 days ago so it's probably not in a state of total disrepair, and has some examples which is nice. Other options are <a href=\"https://hackage.haskell.org/package/satchmo\" target=\"_blank\" title=\"https://hackage.haskell.org/package/satchmo\">Satchmo</a> by Pepe Iborra, Johannes Waldmann, Alexander Bau, though their current build on github is failing. Alternatively it might not be that hard to roll my own, possibly based on <a href=\"https://github.com/elben/sat\" target=\"_blank\" title=\"https://github.com/elben/sat\">this example</a> by Elber Shira. I'm not sure whether I think it will be less effort to make my own / whether I think my own version would have more or fewer bugs than someone else's library...</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 107235226,
            "is_me_message": false,
            "last_edit_timestamp": 1487279331,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "annie.cherk@gmail.com",
            "sender_full_name": "Annie Cherkaev (she/they) (m4'18)",
            "sender_id": 9502,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "SAT library?",
            "submessages": [],
            "timestamp": 1487279250,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/a6a0ff0a4a9a86ae7bc4524453d439bd?d=identicon&version=1",
            "client": "website",
            "content": "<p>Any thoughts?</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 107235228,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "annie.cherk@gmail.com",
            "sender_full_name": "Annie Cherkaev (she/they) (m4'18)",
            "sender_id": 9502,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "SAT library?",
            "submessages": [],
            "timestamp": 1487279258,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p>All I can say is that Edward Kmett's stuff tends to be really good, but sounds like you already know that :)</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 107240031,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "SAT library?",
            "submessages": [],
            "timestamp": 1487287634,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/a6a0ff0a4a9a86ae7bc4524453d439bd?d=identicon&version=1",
            "client": "website",
            "content": "<p>I haven't seen any of his stuff before actually, but Ersatz looked pretty good! There is even a handful of documentation!</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 107241722,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "annie.cherk@gmail.com",
            "sender_full_name": "Annie Cherkaev (she/they) (m4'18)",
            "sender_id": 9502,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "SAT library?",
            "submessages": [],
            "timestamp": 1487291116,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/c52df4d54166ed7db0141bdb21c7935e502d6ddc?x=x&version=1",
            "client": "website",
            "content": "<p>I'll add that I've written something like this for Python and it didn't take a lot of code.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 107265630,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "darius@wry.me",
            "sender_full_name": "Darius Bacon (W1'16)",
            "sender_id": 902,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "SAT library?",
            "submessages": [],
            "timestamp": 1487346562,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/a6a0ff0a4a9a86ae7bc4524453d439bd?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"darius@wry.me\" data-user-id=\"902\">@Darius Bacon (F2'15)</span> cool, good to hear! Do you mind if I take a look at your code? Is it on github?</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 107274358,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "annie.cherk@gmail.com",
            "sender_full_name": "Annie Cherkaev (she/they) (m4'18)",
            "sender_id": 9502,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "SAT library?",
            "submessages": [],
            "timestamp": 1487361593,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/c52df4d54166ed7db0141bdb21c7935e502d6ddc?x=x&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"annie.cherk@gmail.com\" data-user-id=\"9502\">@Annie Cherkaev (S2'16)</span> the saving/loading is in <a href=\"https://github.com/darius/sketchbook/blob/master/sat/dimacs.py\" target=\"_blank\" title=\"https://github.com/darius/sketchbook/blob/master/sat/dimacs.py\">https://github.com/darius/sketchbook/blob/master/sat/dimacs.py</a> for a data structure in <a href=\"https://github.com/darius/sketchbook/blob/master/sat/sat.py\" target=\"_blank\" title=\"https://github.com/darius/sketchbook/blob/master/sat/sat.py\">https://github.com/darius/sketchbook/blob/master/sat/sat.py</a><br>\nI didn't write a general-purpose expression-to-CNF reducer, since it turned out to be easy to code example problems without it (as nqueens and sudoku in the same dir).<br>\nMost of the code in the directory is a bunch of terrible SAT solvers. I want to write a fairly good one sometime.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 107280221,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "darius@wry.me",
            "sender_full_name": "Darius Bacon (W1'16)",
            "sender_id": 902,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "SAT library?",
            "submessages": [],
            "timestamp": 1487371422,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/a6a0ff0a4a9a86ae7bc4524453d439bd?d=identicon&version=1",
            "client": "website",
            "content": "<p>Thanks very much for the links <span class=\"user-mention\" data-user-email=\"darius@wry.me\" data-user-id=\"902\">@Darius Bacon (F2'15)</span> !</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 107342040,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "annie.cherk@gmail.com",
            "sender_full_name": "Annie Cherkaev (she/they) (m4'18)",
            "sender_id": 9502,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "SAT library?",
            "submessages": [],
            "timestamp": 1487521403,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/dd016afc5e2d346a0eee00bb0268c2b33da824d5?x=x&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"annie.cherk@gmail.com\" data-user-id=\"9502\">@Annie Cherkaev (S2'16)</span> there is SBV, and bindings directly to z3</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 107402432,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "amindfv@gmail.com",
            "sender_full_name": "Tom Murphy (F2'15)",
            "sender_id": 8693,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "SAT library?",
            "submessages": [],
            "timestamp": 1487652350,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/dd016afc5e2d346a0eee00bb0268c2b33da824d5?x=x&version=1",
            "client": "website",
            "content": "<p>I know SBV is used for \"real\" things</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 107402515,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "amindfv@gmail.com",
            "sender_full_name": "Tom Murphy (F2'15)",
            "sender_id": 8693,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "SAT library?",
            "submessages": [],
            "timestamp": 1487652516,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/a6a0ff0a4a9a86ae7bc4524453d439bd?d=identicon&version=1",
            "client": "website",
            "content": "<p>thanks <span class=\"user-mention\" data-user-email=\"amindfv@gmail.com\" data-user-id=\"8693\">@Tom Murphy (F2'15)</span> , will check out SBV!</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 107429501,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "annie.cherk@gmail.com",
            "sender_full_name": "Annie Cherkaev (she/they) (m4'18)",
            "sender_id": 9502,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "SAT library?",
            "submessages": [],
            "timestamp": 1487707107,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/0e5310d577f719e57009db6273218242?d=identicon&version=1",
            "client": "website",
            "content": "<p>Hey folks, I just started learning Haskell, and am trying to think of a good project to cut my teeth on. This has probably been asked a bunch (and I've searched the Haskell mailing list and found some plausible open source projects), but I thought I'd throw it out here to see if anyone has any suggestions I haven't considered. I'm generally interested in data manipulating/analysis projects; recently curious about stochastic modelling and other forms of probabilistic analysis, and generally interested in cool ways to model and interpret datasets. assume I know nothing and all suggestions are welcome. </p>\n<p>I've worked in scala before so some of the fp concepts are pretty comfortable for me; I've gone through LYAH and am most of the way through Real World Haskell, and now I'm itching to actually make a thing.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 107446188,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "xianny@gmail.com",
            "sender_full_name": "Xianny Ng (SP1'17)",
            "sender_id": 100527,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "good beginner projects?",
            "submessages": [],
            "timestamp": 1487737890,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/07a5ba69595cc839c85aabdb8ffeabee6ad0b83e?x=x&version=1",
            "client": "website",
            "content": "<p>I think the library has the Haskell Data Analysis Cookbook, if you want a set of things that would be useful tools for data analysis projects (some of it is a bit out of date).</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 107447272,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "sean.martin@nyu.edu",
            "sender_full_name": "Sean Martin (they) (S2'16)",
            "sender_id": 9495,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "good beginner projects?",
            "submessages": [],
            "timestamp": 1487740310,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/7f89b22589ca6f3490f8a75591a699adc0e02fcc?x=x&version=1",
            "client": "website",
            "content": "<p>One project I had been thinking about was trying to contribute to the Frames library (the closest thing Haskell has to dataframes/pandas). There are some basic things that haven't been implemented yet (like joins), but one tricky part is that they use some pretty complicated GHC extensions (GADTs, DataKinds). Would be interested in talking about it or pairing if you decide to look into that.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 107461672,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "ark.email@gmail.com",
            "sender_full_name": "Adam Bratschi-Kaye (he) (SP1'17)",
            "sender_id": 100532,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "good beginner projects?",
            "submessages": [],
            "timestamp": 1487771975,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/a6a0ff0a4a9a86ae7bc4524453d439bd?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"xianny@gmail.com\" data-user-id=\"100527\">@Xianny Ng (SP1'17)</span> I just found <a href=\"https://openai.com/requests-for-research/\" target=\"_blank\" title=\"https://openai.com/requests-for-research/\">OpenAI's list of interesting projects</a>- they look like they might be fun if you're interested in the machine learning side of data analysis</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 107482768,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "+1",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "stanley@zheng.nyc",
                        "full_name": "Stanley Zheng (they) (W1'19)",
                        "id": 100315
                    },
                    "user_id": 100315
                }
            ],
            "recipient_id": 22667,
            "sender_email": "annie.cherk@gmail.com",
            "sender_full_name": "Annie Cherkaev (she/they) (m4'18)",
            "sender_id": 9502,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "good beginner projects?",
            "submessages": [],
            "timestamp": 1487805083,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4d074af6cc341ef51b25bb2f738cdb11?d=identicon&version=1",
            "client": "website",
            "content": "<p>I'm trying to finish Week 6 of the Coursera Algorithms 1 course, and I have a program that should work but is consuming frankly ridiculous amounts of memory and failing to run to completion for that reason. I'm reasonably certain this is a space leak, can anyone take a look and tell me if there's something simple/obvious I'm missing? I tried to fix it with <code>BangPatterns</code> but that didn't help at all. Input file is attached: <a href=\"/user_uploads/13/hIUbsQjQOBEpvPZvQZkbM_M-/2sum.txt\" target=\"_blank\" title=\"2sum.txt\">2sum.txt</a>.</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"cm\">{-# LANGUAGE BangPatterns #-}</span>\n\n<span class=\"kr\">module</span> <span class=\"nn\">Main</span> <span class=\"kr\">where</span>\n\n<span class=\"kr\">import</span> <span class=\"k\">qualified</span> <span class=\"nn\">Data.HashSet</span>          <span class=\"k\">as</span> <span class=\"n\">S</span>\n<span class=\"kr\">import</span> <span class=\"k\">qualified</span> <span class=\"nn\">Data.HashMap.Strict</span>   <span class=\"k\">as</span> <span class=\"n\">H</span>\n<span class=\"kr\">import</span> <span class=\"k\">qualified</span> <span class=\"nn\">Data.ByteString</span>       <span class=\"k\">as</span> <span class=\"n\">B</span>\n<span class=\"kr\">import</span> <span class=\"k\">qualified</span> <span class=\"nn\">Data.ByteString.Char8</span> <span class=\"k\">as</span> <span class=\"n\">BC</span>\n<span class=\"kr\">import</span> <span class=\"nn\">Debug.Trace</span>\n\n<span class=\"kr\">import</span> <span class=\"nn\">Data.Maybe</span> <span class=\"p\">(</span><span class=\"nf\">fromJust</span><span class=\"p\">)</span>\n\n\n<span class=\"nf\">range</span> <span class=\"ow\">=</span> <span class=\"p\">[</span><span class=\"o\">-</span><span class=\"mi\">10000</span><span class=\"o\">..</span><span class=\"mi\">10000</span><span class=\"p\">]</span>\n\n<span class=\"nf\">diff</span> <span class=\"ow\">::</span> <span class=\"kt\">Int</span> <span class=\"ow\">-&gt;</span> <span class=\"p\">[</span><span class=\"kt\">Int</span><span class=\"p\">]</span> <span class=\"ow\">-&gt;</span> <span class=\"kt\">S</span><span class=\"o\">.</span><span class=\"kt\">HashSet</span> <span class=\"kt\">Int</span>\n<span class=\"nf\">diff</span> <span class=\"n\">x</span> <span class=\"n\">r</span> <span class=\"ow\">=</span> <span class=\"kr\">let</span>\n    <span class=\"n\">ys</span> <span class=\"ow\">=</span> <span class=\"kt\">S</span><span class=\"o\">.</span><span class=\"n\">fromList</span> <span class=\"o\">$</span> <span class=\"n\">map</span> <span class=\"p\">(</span><span class=\"n\">subtract</span> <span class=\"n\">x</span><span class=\"p\">)</span> <span class=\"n\">r</span>\n    <span class=\"kr\">in</span> <span class=\"kt\">S</span><span class=\"o\">.</span><span class=\"n\">delete</span> <span class=\"n\">x</span> <span class=\"n\">ys</span>\n\n<span class=\"nf\">intersect</span> <span class=\"o\">!</span><span class=\"n\">values</span> <span class=\"o\">!</span><span class=\"n\">v</span> <span class=\"ow\">=</span> <span class=\"kr\">let</span>\n    <span class=\"o\">!</span><span class=\"n\">int</span> <span class=\"ow\">=</span> <span class=\"kt\">S</span><span class=\"o\">.</span><span class=\"n\">intersection</span> <span class=\"n\">v</span> <span class=\"n\">values</span>\n    <span class=\"o\">!</span><span class=\"n\">sz</span>  <span class=\"ow\">=</span> <span class=\"kt\">S</span><span class=\"o\">.</span><span class=\"n\">size</span> <span class=\"n\">int</span>\n    <span class=\"kr\">in</span> <span class=\"n\">sz</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span>\n\n<span class=\"nf\">main</span> <span class=\"ow\">=</span> <span class=\"kr\">do</span>\n    <span class=\"n\">content</span> <span class=\"ow\">&lt;-</span> <span class=\"n\">map</span> <span class=\"p\">(</span><span class=\"n\">fst</span><span class=\"o\">.</span> <span class=\"n\">fromJust</span> <span class=\"o\">.</span> <span class=\"kt\">BC</span><span class=\"o\">.</span><span class=\"n\">readInt</span><span class=\"p\">)</span> <span class=\"o\">.</span> <span class=\"kt\">BC</span><span class=\"o\">.</span><span class=\"n\">lines</span> <span class=\"o\">&lt;$&gt;</span> <span class=\"kt\">B</span><span class=\"o\">.</span><span class=\"n\">readFile</span> <span class=\"s\">&quot;2sum.txt&quot;</span>\n    <span class=\"kr\">let</span> <span class=\"n\">values</span> <span class=\"ow\">=</span> <span class=\"n\">foldr</span> <span class=\"kt\">S</span><span class=\"o\">.</span><span class=\"n\">insert</span> <span class=\"kt\">S</span><span class=\"o\">.</span><span class=\"n\">empty</span> <span class=\"n\">content</span>\n    <span class=\"kr\">let</span> <span class=\"n\">table</span> <span class=\"ow\">=</span> <span class=\"kt\">H</span><span class=\"o\">.</span><span class=\"n\">mapWithKey</span> <span class=\"p\">(</span><span class=\"nf\">\\</span><span class=\"n\">x</span> <span class=\"kr\">_</span> <span class=\"ow\">-&gt;</span> <span class=\"n\">diff</span> <span class=\"n\">x</span> <span class=\"n\">range</span><span class=\"p\">)</span> <span class=\"o\">$</span> <span class=\"kt\">S</span><span class=\"o\">.</span><span class=\"n\">toMap</span> <span class=\"n\">values</span>\n    <span class=\"kr\">let</span> <span class=\"n\">result</span> <span class=\"ow\">=</span> <span class=\"kt\">H</span><span class=\"o\">.</span><span class=\"n\">filter</span> <span class=\"p\">(</span><span class=\"n\">intersect</span> <span class=\"n\">values</span><span class=\"p\">)</span> <span class=\"n\">table</span>\n    <span class=\"n\">print</span> <span class=\"o\">$</span> <span class=\"kt\">H</span><span class=\"o\">.</span><span class=\"n\">size</span> <span class=\"n\">result</span>\n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 107842468,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "vaibhavsagar@gmail.com",
            "sender_full_name": "Vaibhav Sagar (he) (F1'16)",
            "sender_id": 100041,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "fixing a space leak",
            "submessages": [],
            "timestamp": 1488552538,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4d074af6cc341ef51b25bb2f738cdb11?d=identicon&version=1",
            "client": "website",
            "content": "<p>Looking at this more, it seems that <code>Data.HashSet</code> <a href=\"https://hackage.haskell.org/package/unordered-containers-0.2.7.2/docs/src/Data-HashSet.html\" target=\"_blank\" title=\"https://hackage.haskell.org/package/unordered-containers-0.2.7.2/docs/src/Data-HashSet.html\">is implemented in terms of <code>Data.HashMap.Lazy</code></a> which might be the source of my issue.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 107842986,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "vaibhavsagar@gmail.com",
            "sender_full_name": "Vaibhav Sagar (he) (F1'16)",
            "sender_id": 100041,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "fixing a space leak",
            "submessages": [],
            "timestamp": 1488553650,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4d074af6cc341ef51b25bb2f738cdb11?d=identicon&version=1",
            "client": "website",
            "content": "<p>Nope, turns out that 20 billion elements take up a ton of memory and that was a silly way to approach this problem.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 107843550,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "vaibhavsagar@gmail.com",
            "sender_full_name": "Vaibhav Sagar (he) (F1'16)",
            "sender_id": 100041,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "fixing a space leak",
            "submessages": [],
            "timestamp": 1488554758,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4c2865418c880526dd518b2bd65adc37?d=identicon&version=1",
            "client": "website",
            "content": "<p>I changed <code>let values = foldr S.insert S.empty content</code> to <code>let values = S.fromList (concat [[x] | x &lt;- content])</code> and got a slight decrease in time. something something tail recursion/choosing the right fold?</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 107844722,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "janaipakos@gmail.com",
            "sender_full_name": "James Anaipakos (SP1'17)",
            "sender_id": 100534,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "fixing a space leak",
            "submessages": [],
            "timestamp": 1488556607,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4d074af6cc341ef51b25bb2f738cdb11?d=identicon&version=1",
            "client": "website",
            "content": "<p>This is my non-space-leaking code:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kr\">module</span> <span class=\"nn\">Main</span> <span class=\"kr\">where</span>\n\n<span class=\"kr\">import</span> <span class=\"k\">qualified</span> <span class=\"nn\">Data.HashSet</span>          <span class=\"k\">as</span> <span class=\"n\">S</span>\n<span class=\"kr\">import</span> <span class=\"k\">qualified</span> <span class=\"nn\">Data.HashMap.Strict</span>   <span class=\"k\">as</span> <span class=\"n\">H</span>\n<span class=\"kr\">import</span> <span class=\"k\">qualified</span> <span class=\"nn\">Data.ByteString</span>       <span class=\"k\">as</span> <span class=\"n\">B</span>\n<span class=\"kr\">import</span> <span class=\"k\">qualified</span> <span class=\"nn\">Data.ByteString.Char8</span> <span class=\"k\">as</span> <span class=\"n\">BC</span>\n<span class=\"kr\">import</span> <span class=\"nn\">Debug.Trace</span>\n\n<span class=\"kr\">import</span> <span class=\"nn\">Data.Maybe</span> <span class=\"p\">(</span><span class=\"nf\">fromJust</span><span class=\"p\">)</span>\n\n\n<span class=\"nf\">range</span> <span class=\"ow\">=</span> <span class=\"p\">[</span><span class=\"o\">-</span><span class=\"mi\">10000</span><span class=\"o\">..</span><span class=\"mi\">10000</span><span class=\"p\">]</span>\n\n<span class=\"nf\">diff</span> <span class=\"ow\">::</span> <span class=\"kt\">Int</span> <span class=\"ow\">-&gt;</span> <span class=\"p\">[</span><span class=\"kt\">Int</span><span class=\"p\">]</span> <span class=\"ow\">-&gt;</span> <span class=\"kt\">S</span><span class=\"o\">.</span><span class=\"kt\">HashSet</span> <span class=\"kt\">Int</span>\n<span class=\"nf\">diff</span> <span class=\"n\">x</span> <span class=\"n\">r</span> <span class=\"ow\">=</span> <span class=\"kr\">let</span>\n    <span class=\"n\">ys</span> <span class=\"ow\">=</span> <span class=\"kt\">S</span><span class=\"o\">.</span><span class=\"n\">fromList</span> <span class=\"o\">$</span> <span class=\"n\">map</span> <span class=\"p\">(</span><span class=\"n\">subtract</span> <span class=\"n\">x</span><span class=\"p\">)</span> <span class=\"n\">r</span>\n    <span class=\"kr\">in</span> <span class=\"kt\">S</span><span class=\"o\">.</span><span class=\"n\">delete</span> <span class=\"n\">x</span> <span class=\"n\">ys</span>\n\n<span class=\"nf\">main</span> <span class=\"ow\">=</span> <span class=\"kr\">do</span>\n    <span class=\"n\">content</span> <span class=\"ow\">&lt;-</span> <span class=\"n\">map</span> <span class=\"p\">(</span><span class=\"n\">fst</span><span class=\"o\">.</span> <span class=\"n\">fromJust</span> <span class=\"o\">.</span> <span class=\"kt\">BC</span><span class=\"o\">.</span><span class=\"n\">readInt</span><span class=\"p\">)</span> <span class=\"o\">.</span> <span class=\"kt\">BC</span><span class=\"o\">.</span><span class=\"n\">lines</span> <span class=\"o\">&lt;$&gt;</span> <span class=\"kt\">B</span><span class=\"o\">.</span><span class=\"n\">readFile</span> <span class=\"s\">&quot;2sum.txt&quot;</span>\n    <span class=\"kr\">let</span> <span class=\"n\">values</span> <span class=\"ow\">=</span> <span class=\"n\">foldr</span> <span class=\"kt\">S</span><span class=\"o\">.</span><span class=\"n\">insert</span> <span class=\"kt\">S</span><span class=\"o\">.</span><span class=\"n\">empty</span> <span class=\"n\">content</span>\n    <span class=\"kr\">let</span> <span class=\"n\">table</span> <span class=\"ow\">=</span> <span class=\"kt\">H</span><span class=\"o\">.</span><span class=\"n\">mapWithKey</span> <span class=\"p\">(</span><span class=\"nf\">\\</span><span class=\"n\">x</span> <span class=\"kr\">_</span> <span class=\"ow\">-&gt;</span> <span class=\"kt\">S</span><span class=\"o\">.</span><span class=\"n\">size</span> <span class=\"p\">(</span><span class=\"n\">diff</span> <span class=\"n\">x</span> <span class=\"n\">range</span> <span class=\"p\">`</span><span class=\"kt\">S</span><span class=\"o\">.</span><span class=\"n\">intersection</span><span class=\"p\">`</span> <span class=\"n\">values</span><span class=\"p\">)</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"o\">$</span> <span class=\"kt\">S</span><span class=\"o\">.</span><span class=\"n\">toMap</span> <span class=\"n\">values</span>\n    <span class=\"kr\">let</span> <span class=\"n\">result</span> <span class=\"ow\">=</span> <span class=\"kt\">H</span><span class=\"o\">.</span><span class=\"n\">filter</span> <span class=\"n\">id</span> <span class=\"n\">table</span>\n    <span class=\"n\">print</span> <span class=\"o\">$</span> <span class=\"kt\">H</span><span class=\"o\">.</span><span class=\"n\">size</span> <span class=\"n\">result</span>\n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 107845526,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "vaibhavsagar@gmail.com",
            "sender_full_name": "Vaibhav Sagar (he) (F1'16)",
            "sender_id": 100041,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "fixing a space leak",
            "submessages": [],
            "timestamp": 1488558119,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4d074af6cc341ef51b25bb2f738cdb11?d=identicon&version=1",
            "client": "website",
            "content": "<p>So it turns out my approach was all wrong. Here is code that works:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kr\">module</span> <span class=\"nn\">Main</span> <span class=\"kr\">where</span>\n\n<span class=\"kr\">import</span> <span class=\"k\">qualified</span> <span class=\"nn\">Data.IntSet</span>           <span class=\"k\">as</span> <span class=\"n\">S</span>\n<span class=\"kr\">import</span> <span class=\"k\">qualified</span> <span class=\"nn\">Data.ByteString</span>       <span class=\"k\">as</span> <span class=\"n\">B</span>\n<span class=\"kr\">import</span> <span class=\"k\">qualified</span> <span class=\"nn\">Data.ByteString.Char8</span> <span class=\"k\">as</span> <span class=\"n\">BC</span>\n\n<span class=\"kr\">import</span> <span class=\"nn\">Data.Maybe</span> <span class=\"p\">(</span><span class=\"nf\">fromJust</span><span class=\"p\">)</span>\n\n<span class=\"nf\">main</span> <span class=\"ow\">=</span> <span class=\"kr\">do</span>\n    <span class=\"n\">content</span> <span class=\"ow\">&lt;-</span> <span class=\"n\">map</span> <span class=\"p\">(</span><span class=\"n\">fst</span><span class=\"o\">.</span> <span class=\"n\">fromJust</span> <span class=\"o\">.</span> <span class=\"kt\">BC</span><span class=\"o\">.</span><span class=\"n\">readInt</span><span class=\"p\">)</span> <span class=\"o\">.</span> <span class=\"kt\">BC</span><span class=\"o\">.</span><span class=\"n\">lines</span> <span class=\"o\">&lt;$&gt;</span> <span class=\"kt\">B</span><span class=\"o\">.</span><span class=\"n\">readFile</span> <span class=\"s\">&quot;2sum.txt&quot;</span>\n    <span class=\"kr\">let</span> <span class=\"n\">values</span> <span class=\"ow\">=</span> <span class=\"n\">foldr</span> <span class=\"kt\">S</span><span class=\"o\">.</span><span class=\"n\">insert</span> <span class=\"kt\">S</span><span class=\"o\">.</span><span class=\"n\">empty</span> <span class=\"n\">content</span>\n    <span class=\"kr\">let</span> <span class=\"n\">matches</span> <span class=\"ow\">=</span> <span class=\"kt\">S</span><span class=\"o\">.</span><span class=\"n\">foldr&#39;</span> <span class=\"p\">(</span><span class=\"nf\">\\</span><span class=\"n\">x</span> <span class=\"n\">s</span> <span class=\"ow\">-&gt;</span> <span class=\"kr\">let</span>\n            <span class=\"n\">potential</span>  <span class=\"ow\">=</span> <span class=\"kt\">S</span><span class=\"o\">.</span><span class=\"n\">map</span> <span class=\"p\">(</span><span class=\"o\">+</span><span class=\"n\">x</span><span class=\"p\">)</span> <span class=\"o\">$</span> <span class=\"n\">between</span> <span class=\"n\">values</span> <span class=\"p\">(</span><span class=\"o\">-</span><span class=\"mi\">10000</span><span class=\"o\">-</span><span class=\"n\">x</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"mi\">10000</span><span class=\"o\">-</span><span class=\"n\">x</span><span class=\"p\">)</span>\n            <span class=\"n\">potential&#39;</span> <span class=\"ow\">=</span> <span class=\"kt\">S</span><span class=\"o\">.</span><span class=\"n\">delete</span> <span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"o\">*</span><span class=\"n\">x</span><span class=\"p\">)</span> <span class=\"n\">potential</span>\n            <span class=\"kr\">in</span> <span class=\"kt\">S</span><span class=\"o\">.</span><span class=\"n\">union</span> <span class=\"n\">potential&#39;</span> <span class=\"n\">s</span><span class=\"p\">)</span> <span class=\"kt\">S</span><span class=\"o\">.</span><span class=\"n\">empty</span> <span class=\"n\">values</span>\n    <span class=\"n\">print</span> <span class=\"o\">$</span> <span class=\"kt\">S</span><span class=\"o\">.</span><span class=\"n\">size</span> <span class=\"n\">matches</span>\n\n<span class=\"nf\">between</span> <span class=\"n\">set</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"ow\">=</span> <span class=\"kr\">let</span>\n    <span class=\"p\">(</span><span class=\"kr\">_</span><span class=\"p\">,</span> <span class=\"n\">gt</span><span class=\"p\">)</span> <span class=\"ow\">=</span> <span class=\"kt\">S</span><span class=\"o\">.</span><span class=\"n\">split</span> <span class=\"n\">x</span> <span class=\"n\">set</span>\n    <span class=\"p\">(</span><span class=\"n\">lt</span><span class=\"p\">,</span> <span class=\"kr\">_</span><span class=\"p\">)</span> <span class=\"ow\">=</span> <span class=\"kt\">S</span><span class=\"o\">.</span><span class=\"n\">split</span> <span class=\"n\">y</span> <span class=\"n\">gt</span>\n    <span class=\"kr\">in</span> <span class=\"n\">lt</span>\n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 107881753,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "vaibhavsagar@gmail.com",
            "sender_full_name": "Vaibhav Sagar (he) (F1'16)",
            "sender_id": 100041,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "fixing a space leak",
            "submessages": [],
            "timestamp": 1488636777,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4d074af6cc341ef51b25bb2f738cdb11?d=identicon&version=1",
            "client": "website",
            "content": "<p>This is something I have wanted for <strong>months</strong>: <a href=\"https://github.com/abarbu/IHaskell\" target=\"_blank\" title=\"https://github.com/abarbu/IHaskell\">https://github.com/abarbu/IHaskell</a>. I think <span class=\"user-mention\" data-user-email=\"libby@daydrea.me\" data-user-id=\"7081\">@Libby Horacek (W2'15)</span> might also appreciate this.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 108220668,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "vaibhavsagar@gmail.com",
            "sender_full_name": "Vaibhav Sagar (he) (F1'16)",
            "sender_id": 100041,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "GHC 8 IHaskell notebooks!",
            "submessages": [],
            "timestamp": 1489365320,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4d074af6cc341ef51b25bb2f738cdb11?d=identicon&version=1",
            "client": "website",
            "content": "<p>New commits happening as we speak <img alt=\":smile:\" class=\"emoji\" src=\"/static/generated/emoji/images/emoji/unicode/1f604.png\" title=\":smile:\"></p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 108220671,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "vaibhavsagar@gmail.com",
            "sender_full_name": "Vaibhav Sagar (he) (F1'16)",
            "sender_id": 100041,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "GHC 8 IHaskell notebooks!",
            "submessages": [],
            "timestamp": 1489365347,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/efe57f0998df065470ff42c938f781cf?d=identicon&version=1",
            "client": "website",
            "content": "<p>Exciting!!</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 108246901,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "libby@daydrea.me",
            "sender_full_name": "Libby Horacek (she) (SP1'15)",
            "sender_id": 7081,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "GHC 8 IHaskell notebooks!",
            "submessages": [],
            "timestamp": 1489423869,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4c2865418c880526dd518b2bd65adc37?d=identicon&version=1",
            "client": "website",
            "content": "<p>has anyone attempted their own '24 days of x' while at RC? </p>\n<p><a href=\"http://conscientiousprogrammer.com/blog/2015/11/30/haskell-tidbits-24-days-of-hackage-2015-day-1-introduction-and-stack/\" target=\"_blank\" title=\"http://conscientiousprogrammer.com/blog/2015/11/30/haskell-tidbits-24-days-of-hackage-2015-day-1-introduction-and-stack/\">http://conscientiousprogrammer.com/blog/2015/11/30/haskell-tidbits-24-days-of-hackage-2015-day-1-introduction-and-stack/</a><br>\n<a href=\"https://ocharles.org.uk/blog/pages/2014-12-01-24-days-of-ghc-extensions.html\" target=\"_blank\" title=\"https://ocharles.org.uk/blog/pages/2014-12-01-24-days-of-ghc-extensions.html\">https://ocharles.org.uk/blog/pages/2014-12-01-24-days-of-ghc-extensions.html</a></p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 108254679,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "janaipakos@gmail.com",
            "sender_full_name": "James Anaipakos (SP1'17)",
            "sender_id": 100534,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "24 days of x",
            "submessages": [],
            "timestamp": 1489436120,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/8756446588cfc2014859f5f1fa68c850?d=identicon&version=1",
            "client": "website",
            "content": "<p>Has anyone in batch worked on <a href=\"http://mightybyte.github.io/monad-challenges/\" target=\"_blank\" title=\"http://mightybyte.github.io/monad-challenges/\">http://mightybyte.github.io/monad-challenges/</a> and want to compare answers?</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 108333679,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "jason.a.owen@gmail.com",
            "sender_full_name": "Jason Owen (SP2'19)",
            "sender_id": 100450,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "\"the monad challenges\"",
            "submessages": [],
            "timestamp": 1489592835,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/3510573a5aa248c6a2f1fcd58b043af7?d=identicon&version=1",
            "client": "website",
            "content": "<p>I did, way back at the beginning of the batch!  let's do it</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 108334916,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "ajay.tungare@gmail.com",
            "sender_full_name": "Ajay Tungare (W2'17)",
            "sender_id": 100464,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "\"the monad challenges\"",
            "submessages": [],
            "timestamp": 1489594814,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/9d9ab8d7802ad731390b5cf5983882fd?d=identicon&version=1",
            "client": "website",
            "content": "<p>Hey all, I'm reposting this from #programming: </p>\n<p>\"In Haskell, when I call forkIO and run a function in the new thread, is it necessary to or useful to, after the function completes, kill the forked thread, or even possibly kill the thread from within the function after you've done all the work you need to?\"</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 108526405,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "jackie.meggesto@gmail.com",
            "sender_full_name": "Jacqueline Elizabeth Meggesto (SP1'17)",
            "sender_id": 100325,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Killing Threads in Haskell?",
            "submessages": [],
            "timestamp": 1489956022,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p>I've actually never really thought about that\u2013I'd have to assume the thread will just get GC'd once its <code>IO ()</code> has finished running.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 108529289,
            "is_me_message": false,
            "last_edit_timestamp": 1489962904,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Killing Threads in Haskell?",
            "submessages": [],
            "timestamp": 1489962853,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/9d9ab8d7802ad731390b5cf5983882fd?d=identicon&version=1",
            "client": "website",
            "content": "<p>I'd certainly hope the GC was smart enough for that to happen, but I don't want to fall into the trap of making assumptions</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 108529390,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "jackie.meggesto@gmail.com",
            "sender_full_name": "Jacqueline Elizabeth Meggesto (SP1'17)",
            "sender_id": 100325,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Killing Threads in Haskell?",
            "submessages": [],
            "timestamp": 1489963157,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/d495685876a5a195b6ef5fb9a269b6d0dcd5c5fe?x=x&version=1",
            "client": "website",
            "content": "<p>What does killing a thread in Haskell actually do?  The <code>Control.Concurrent</code> docs say that it's equivalent to throwing the thread a <code>ThreadKilled</code>but does that in some way correspond to <code>pthread_kill()</code> being called?</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 108529534,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "pnf@podsnap.com",
            "sender_full_name": "Peter Fraenkel (he) (S'13)",
            "sender_id": 2142,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Killing Threads in Haskell?",
            "submessages": [],
            "timestamp": 1489963534,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/9d9ab8d7802ad731390b5cf5983882fd?d=identicon&version=1",
            "client": "website",
            "content": "<p>given the way Haskell threads work, I'm not sure</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 108529619,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "jackie.meggesto@gmail.com",
            "sender_full_name": "Jacqueline Elizabeth Meggesto (SP1'17)",
            "sender_id": 100325,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Killing Threads in Haskell?",
            "submessages": [],
            "timestamp": 1489963740,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/9d9ab8d7802ad731390b5cf5983882fd?d=identicon&version=1",
            "client": "website",
            "content": "<p>given that they're 'green' threads</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 108529625,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "jackie.meggesto@gmail.com",
            "sender_full_name": "Jacqueline Elizabeth Meggesto (SP1'17)",
            "sender_id": 100325,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Killing Threads in Haskell?",
            "submessages": [],
            "timestamp": 1489963770,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/7f89b22589ca6f3490f8a75591a699adc0e02fcc?x=x&version=1",
            "client": "website",
            "content": "<p>Anyone else going to the Haskell meetup tonight? <a href=\"https://www.meetup.com/NY-Haskell/events/238272709/\" target=\"_blank\" title=\"https://www.meetup.com/NY-Haskell/events/238272709/\">https://www.meetup.com/NY-Haskell/events/238272709/</a></p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 108552652,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "ark.email@gmail.com",
            "sender_full_name": "Adam Bratschi-Kaye (he) (SP1'17)",
            "sender_id": 100532,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Meetup tonight",
            "submessages": [],
            "timestamp": 1490017513,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/dc0740096986096748221be2e7b3a8d3?d=identicon&version=1",
            "client": "website",
            "content": "<p>Oh wow I'd never heard of this. I'm working through it now and really enjoying it!<br>\nI haven't touched Haskell for awhile, and even then I was only at <em>Learn You</em> level. But in spite of that -- or maybe because of that?? -- I'm finding myself getting a lot out of doing this.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 108744895,
            "is_me_message": false,
            "last_edit_timestamp": 1490381563,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "mail@greghendershott.com",
            "sender_full_name": "Greg Hendershott (he) (F2'14)",
            "sender_id": 6678,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "\"the monad challenges\"",
            "submessages": [],
            "timestamp": 1490381547,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/6f786e793877c2efaf249bc5ffb429ae?d=identicon&version=1",
            "client": "website",
            "content": "<p>Does anyone here have experience with haskell-src-exts? I just started using it to parse bits of Haskell code and could use some help figuring out how to work with the datatypes it uses for the AST.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 108861821,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "sophiagoldnyc@gmail.com",
            "sender_full_name": "Sophia Gold (SP2'17)",
            "sender_id": 100779,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "haskell-src-exts",
            "submessages": [],
            "timestamp": 1490648040,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/6485c74622306264ff53449c6f0ca540?d=identicon&version=1",
            "client": "ZulipAndroid",
            "content": "<p><span class=\"user-mention\" data-user-email=\"sophiagoldnyc@gmail.com\" data-user-id=\"100779\">@Sophia Gold (SP2'17)</span> I'm no expert, but i have poked at Haskell's ASTs a bit in the past and would be happy to talk through things</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 108861939,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "iain@mccoy.id.au",
            "sender_full_name": "Iain McCoy (he) (SP2'17)",
            "sender_id": 100806,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "haskell-src-exts",
            "submessages": [],
            "timestamp": 1490648235,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/36e38f07213a4459a526a3334d690aa09a75b04d?x=x&version=3",
            "client": "website",
            "content": "<p>I'm new to haskell, coming from largely-functional toy-Scala and in order to start learning I want to build some simple 80s retro-like games in the browser, akin to <a href=\"http://lihaoyi.github.io/scala-js-games/\" target=\"_blank\" title=\"http://lihaoyi.github.io/scala-js-games/\">http://lihaoyi.github.io/scala-js-games/</a>   . Does anyone have experience with the front-end to-javascript-compilers  or have a recommendation - <br>\n3.1 UHC<br>\n3.2 Fay<br>\n3.3 GHCJS<br>\n3.4 Haste<br>\n3.5 JMacro<br>\n3.6 Others ? (eg <span class=\"user-mention\" data-user-email=\"haroldtreen@gmail.com\" data-user-id=\"100193\">@Harold Willis Treen (F2'16)</span> made one?)</p>\n<p>I'd first like to get started quickly (i can readily readily interpret hs so far) , but would like to next dig into the transcompiler in order to understand what a browser does/needs (terms like dom etc) and a cursory understanding of javascript <br>\nThanks!</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 108976967,
            "is_me_message": false,
            "last_edit_timestamp": 1490880315,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "dclau04@gmail.com",
            "sender_full_name": "Daniel Lau (he) (SP2'17)",
            "sender_id": 100522,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "more javascript generators",
            "submessages": [],
            "timestamp": 1490880136,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4d074af6cc341ef51b25bb2f738cdb11?d=identicon&version=1",
            "client": "website",
            "content": "<p>There's <a href=\"http://www.purescript.org/\" target=\"_blank\" title=\"http://www.purescript.org/\">PureScript</a>, which is heavily Haskell-influenced but not the same language</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 108977025,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "vaibhavsagar@gmail.com",
            "sender_full_name": "Vaibhav Sagar (he) (F1'16)",
            "sender_id": 100041,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "more javascript generators",
            "submessages": [],
            "timestamp": 1490880272,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4d074af6cc341ef51b25bb2f738cdb11?d=identicon&version=1",
            "client": "website",
            "content": "<p>also <a href=\"http://elm-lang.org/\" target=\"_blank\" title=\"http://elm-lang.org/\">Elm</a></p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 108977039,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "vaibhavsagar@gmail.com",
            "sender_full_name": "Vaibhav Sagar (he) (F1'16)",
            "sender_id": 100041,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "more javascript generators",
            "submessages": [],
            "timestamp": 1490880316,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4d074af6cc341ef51b25bb2f738cdb11?d=identicon&version=1",
            "client": "website",
            "content": "<p>IIUC, you might get a lot out of <a href=\"https://github.com/purescript/purescript/\" target=\"_blank\" title=\"https://github.com/purescript/purescript/\">the PureScript implementation</a> because it is supposed to map cleanly to JavaScript. Haskell transpilers have to deal with Haskell's lazy evaluation which means they have to add a lot of complexity to the implementation to get the right semantics, whereas PureScript sidesteps this issue by being strictly evaluated <img alt=\":smiley:\" class=\"emoji\" src=\"/static/generated/emoji/images/emoji/unicode/1f603.png\" title=\":smiley:\"></p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 108977219,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "vaibhavsagar@gmail.com",
            "sender_full_name": "Vaibhav Sagar (he) (F1'16)",
            "sender_id": 100041,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "more javascript generators",
            "submessages": [],
            "timestamp": 1490880631,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/36e38f07213a4459a526a3334d690aa09a75b04d?x=x&version=3",
            "client": "website",
            "content": "<p>oh <a href=\"https://github.com/purescript/purescript/wiki/Differences-from-Haskell\" target=\"_blank\" title=\"https://github.com/purescript/purescript/wiki/Differences-from-Haskell\">https://github.com/purescript/purescript/wiki/Differences-from-Haskell</a> - super helpful. as u say... PureScript looks like what i want thanks!</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 108977227,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "dclau04@gmail.com",
            "sender_full_name": "Daniel Lau (he) (SP2'17)",
            "sender_id": 100522,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "more javascript generators",
            "submessages": [],
            "timestamp": 1490880699,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4d074af6cc341ef51b25bb2f738cdb11?d=identicon&version=1",
            "client": "website",
            "content": "<p>I believe <span class=\"user-mention\" data-user-email=\"cfactora93@gmail.com\" data-user-id=\"100519\">@Carl Joshua Factora (SP1'17)</span> and <span class=\"user-mention\" data-user-email=\"montecristoh@gmail.com\" data-user-id=\"100509\">@Alberto Zaccagni (SP1'17)</span> do a fair bit of PureScript if you'd like help</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 108977326,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "vaibhavsagar@gmail.com",
            "sender_full_name": "Vaibhav Sagar (he) (F1'16)",
            "sender_id": 100041,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "more javascript generators",
            "submessages": [],
            "timestamp": 1490880918,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/57ee4628e40dfdc98e509d3cb7d823c7dfaf5eae?x=x&version=4",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"danlaudk@yahoo.dk\" data-user-id=\"100522\">@Daniel Lau (SP2'17)</span> This is true. If you want to work on something, I'd be happy to pair!</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 108978250,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "cfactora93@gmail.com",
            "sender_full_name": "Carl Joshua Factora (SP1'17)",
            "sender_id": 100519,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "more javascript generators",
            "submessages": [],
            "timestamp": 1490882672,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/6f786e793877c2efaf249bc5ffb429ae?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"danlaudk@yahoo.dk\" data-user-id=\"100522\">@Daniel Lau (SP2'17)</span> I'd recommend taking a look at this: <a href=\"https://github.com/ryantrinkle/memoise\" target=\"_blank\" title=\"https://github.com/ryantrinkle/memoise\">https://github.com/ryantrinkle/memoise</a>. It's a tutorial on building web apps with GHCJS.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 108979981,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "sophiagoldnyc@gmail.com",
            "sender_full_name": "Sophia Gold (SP2'17)",
            "sender_id": 100779,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "more javascript generators",
            "submessages": [],
            "timestamp": 1490885898,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/f050b80594d5d59676e0620842eb0316?d=identicon&version=1",
            "client": "website",
            "content": "<p>I never got to it, but I wanted to build something in Haskell to generate random (but valid) javascript :).</p>\n<p>But getting some Haskell running in the browser sounds super fun!</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 108983602,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "haroldtreen@gmail.com",
            "sender_full_name": "Harold Willis Treen (F2'16)",
            "sender_id": 100193,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "more javascript generators",
            "submessages": [],
            "timestamp": 1490892159,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/4b6aae6cae274fb83b0d155f0255298c2d3b22b7?x=x&version=2",
            "client": "website",
            "content": "<p>May not be the best option yet, but are there Haskell projects that compile to wasm?</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 109007133,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "fundirap@gmail.com",
            "sender_full_name": "Panashe Machinda Fundira (he) (S1'16)",
            "sender_id": 9339,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "more javascript generators",
            "submessages": [],
            "timestamp": 1490930018,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4d074af6cc341ef51b25bb2f738cdb11?d=identicon&version=1",
            "client": "website",
            "content": "<p>This is the only one I'm aware of: <a href=\"https://github.com/haskell-wasm/wasm\" target=\"_blank\" title=\"https://github.com/haskell-wasm/wasm\">https://github.com/haskell-wasm/wasm</a></p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 109009709,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "vaibhavsagar@gmail.com",
            "sender_full_name": "Vaibhav Sagar (he) (F1'16)",
            "sender_id": 100041,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "more javascript generators",
            "submessages": [],
            "timestamp": 1490935775,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/919b4af386b43c5ca84d8e664790a7d906336c0d?x=x&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"cfactora93@gmail.com\" data-user-id=\"100519\">@Carl Joshua Factora (SP1'17)</span> <span class=\"user-mention\" data-user-email=\"montecristoh@gmail.com\" data-user-id=\"100509\">@Alberto Zaccagni (SP1'17)</span> this might be of interest for <a href=\"http://project-lamp.org\" target=\"_blank\" title=\"http://project-lamp.org\">project-lamp</a>? <span class=\"user-mention\" data-user-email=\"vaibhavsagar@gmail.com\" data-user-id=\"100041\">@Vaibhav Sagar (F1'16)</span> do you know if there is a similar project but using emscriptem for asm.js? That way current browser compatibility might be better?</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 109047622,
            "is_me_message": false,
            "last_edit_timestamp": 1490998214,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "botwhytho@gmail.com",
            "sender_full_name": "Alberto Torres (SP1'17)",
            "sender_id": 100545,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "more javascript generators",
            "submessages": [],
            "timestamp": 1490998180,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/6f786e793877c2efaf249bc5ffb429ae?d=identicon&version=1",
            "client": "website",
            "content": "<p>I'm pulling my hair out trying to solve this problem arising from a data type I made to store lambdas using existential quantification (or rather the fact that that type _cannot_ be an existential like my other ones, which would make everything much easier) and not being able to make the types of the lambdas match the variables in my constructor. Anyone want to lend an extra set of eyes to this?</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 109049871,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "sophiagoldnyc@gmail.com",
            "sender_full_name": "Sophia Gold (SP2'17)",
            "sender_id": 100779,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "bug with existential type",
            "submessages": [],
            "timestamp": 1491001153,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/57ee4628e40dfdc98e509d3cb7d823c7dfaf5eae?x=x&version=4",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"montecristoh@gmail.com\" data-user-id=\"100509\">@Alberto Zaccagni (SP1'17)</span> <span class=\"user-mention\" data-user-email=\"botwhytho@gmail.com\" data-user-id=\"100545\">@Alberto Torres (SP1'17)</span> That's the ultimate end-goal, yes. I haven't had much a chance to look over how all of that works, however.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 109050190,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "cfactora93@gmail.com",
            "sender_full_name": "Carl Joshua Factora (SP1'17)",
            "sender_id": 100519,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "more javascript generators",
            "submessages": [],
            "timestamp": 1491001746,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/57ee4628e40dfdc98e509d3cb7d823c7dfaf5eae?x=x&version=4",
            "client": "website",
            "content": "<p>Screenshot perhaps? Just saw this now, and I'm already home haha</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 109050241,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "cfactora93@gmail.com",
            "sender_full_name": "Carl Joshua Factora (SP1'17)",
            "sender_id": 100519,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "bug with existential type",
            "submessages": [],
            "timestamp": 1491001827,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/6f786e793877c2efaf249bc5ffb429ae?d=identicon&version=1",
            "client": "website",
            "content": "<p>Here's the relevant code: <a href=\"http://lpaste.net/354152\" target=\"_blank\" title=\"http://lpaste.net/354152\">http://lpaste.net/354152</a>. The error corresponds to the very last line <img alt=\":angry:\" class=\"emoji\" src=\"/static/generated/emoji/images/emoji/unicode/1f620.png\" title=\":angry:\"></p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 109050408,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "sophiagoldnyc@gmail.com",
            "sender_full_name": "Sophia Gold (SP2'17)",
            "sender_id": 100779,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "bug with existential type",
            "submessages": [],
            "timestamp": 1491002118,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/6f786e793877c2efaf249bc5ffb429ae?d=identicon&version=1",
            "client": "website",
            "content": "<p>Welp, it passed the typechecker but I'm a bit scared because I don't understand why... I think a good time to call it quits and pick this up tomorrow at least <img alt=\":confused:\" class=\"emoji\" src=\"/static/generated/emoji/images/emoji/unicode/1f615.png\" title=\":confused:\"></p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 109051055,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "sophiagoldnyc@gmail.com",
            "sender_full_name": "Sophia Gold (SP2'17)",
            "sender_id": 100779,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "bug with existential type",
            "submessages": [],
            "timestamp": 1491003436,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/7f89b22589ca6f3490f8a75591a699adc0e02fcc?x=x&version=1",
            "client": "website",
            "content": "<p>Hey Sophia, I'd be up for talking about this on monday - looks super interesting. It seems to me like you're trying to give <code>parseLambda</code> a more general type then it actually has. The function you defined looks to me like it actually has type <code>Eq a =&gt; LambdaT (OpT a -&gt; RhsT -&gt; Bool)</code> and to give it the more general type <code>Eq a =&gt; LambdaT a</code> I guess you need some way to combine an <code>OpT a</code> and a <code>RhsT</code>to get a <code>a -&gt; Bool</code>. If you know the <code>OpT a</code> has the <code>EqOp</code> as it's constructor then you can unwrap it to get the <code>a -&gt; a -&gt; Bool</code> and partially apply it to the <code>RhsT</code>. That will be closer I think, but probably still give you a <code>LambdaT RhsT</code>.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 109054881,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "ark.email@gmail.com",
            "sender_full_name": "Adam Bratschi-Kaye (he) (SP1'17)",
            "sender_id": 100532,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "bug with existential type",
            "submessages": [],
            "timestamp": 1491012248,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/57ee4628e40dfdc98e509d3cb7d823c7dfaf5eae?x=x&version=4",
            "client": "website",
            "content": "<p>Kinda dropped the ball and didn't get around to looking at the code (oops).</p>\n<p>As with <span class=\"user-mention\" data-user-email=\"ark.email@gmail.com\" data-user-id=\"100532\">@Adam Kaye (SP1'17)</span> said, it seems that you are giving too much generalization to the type of <code>LambdaT</code>, which is making the typechecker complain about how the more specific type of the function you are giving it in <code>parseLambda</code>. I can't really deduce how to fix this without seeing the entire context, but I would guess, with how you have it currently in the paste, you would have to generalize the <code>func</code> you pass to the <code>LambdaType</code> constructor.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 109055146,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "cfactora93@gmail.com",
            "sender_full_name": "Carl Joshua Factora (SP1'17)",
            "sender_id": 100519,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "bug with existential type",
            "submessages": [],
            "timestamp": 1491012934,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/6f786e793877c2efaf249bc5ffb429ae?d=identicon&version=1",
            "client": "website",
            "content": "<p>Thanks, guys! <span class=\"user-mention\" data-user-email=\"ark.email@gmail.com\" data-user-id=\"100532\">@Adam Kaye (SP1'17)</span> that makes a lot of sense and is actually the first solution to this anyone has suggested rather than \"you've painted yourself into a corner and that's why existential types are an antipattern.\" Although it does compile now, I'll see whether it actually <em>works</em> tomorrow and if not see if I can implement something along those lines. And also, you know, clearly think through what you wrote when I'm not half asleep <img alt=\":alarm_clock:\" class=\"emoji\" src=\"/static/generated/emoji/images/emoji/unicode/23f0.png\" title=\":alarm_clock:\"></p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 109063088,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "sophiagoldnyc@gmail.com",
            "sender_full_name": "Sophia Gold (SP2'17)",
            "sender_id": 100779,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "bug with existential type",
            "submessages": [],
            "timestamp": 1491032769,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/7f89b22589ca6f3490f8a75591a699adc0e02fcc?x=x&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"sophiagoldnyc@gmail.com\" data-user-id=\"100779\">@Sophia Gold (SP2'17)</span> <img alt=\":+1:\" class=\"emoji\" src=\"/static/generated/emoji/images/emoji/unicode/1f44d.png\" title=\":+1:\"></p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 109068867,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "ark.email@gmail.com",
            "sender_full_name": "Adam Bratschi-Kaye (he) (SP1'17)",
            "sender_id": 100532,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "bug with existential type",
            "submessages": [],
            "timestamp": 1491048306,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/6f786e793877c2efaf249bc5ffb429ae?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"ark.email@gmail.com\" data-user-id=\"100532\">@Adam Kaye (SP1'17)</span> It was a frustrating weekend, but I finally got everything to compile (and not only that, actually work)! Turns out I didn't need existentials or GADTs, although I learned an interesting tidbit: data types with constraints in the constructors are technically existentials since GHC embeds the builtin typeclass, which is why you need either the existential or GADT pragma for them. Anyway, I ended up learning a lot about structuring data in Haskell building this. If you or anyone else wants to do a code review later week that would be great. Not sure how many people are working on Haskell projects, but that would sure be useful for me.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 109160216,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "sophiagoldnyc@gmail.com",
            "sender_full_name": "Sophia Gold (SP2'17)",
            "sender_id": 100779,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "bug with existential type",
            "submessages": [],
            "timestamp": 1491256311,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/7f89b22589ca6f3490f8a75591a699adc0e02fcc?x=x&version=1",
            "client": "website",
            "content": "<p>Sounds good!</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 109164747,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "ark.email@gmail.com",
            "sender_full_name": "Adam Bratschi-Kaye (he) (SP1'17)",
            "sender_id": 100532,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "bug with existential type",
            "submessages": [],
            "timestamp": 1491265406,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/efe57f0998df065470ff42c938f781cf?d=identicon&version=1",
            "client": "website",
            "content": "<p>If anyone is interested in a change of pace from RC, my workplace is hosting \"weekend office hours\" with Haskell Users Group (<a href=\"https://www.meetup.com/NY-Haskell/events/238705187/\" target=\"_blank\" title=\"https://www.meetup.com/NY-Haskell/events/238705187/\">https://www.meetup.com/NY-Haskell/events/238705187/</a>). Patrick Thomson is giving an introductory talk on lenses and prisms. And you can bring a project or something you're trying to learn and work on it with other Haskellers.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 109181324,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "+1",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "fundirap@gmail.com",
                        "full_name": "Panashe Machinda Fundira (he) (S1'16)",
                        "id": 9339
                    },
                    "user_id": 9339
                },
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "+1",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "sophiagoldnyc@gmail.com",
                        "full_name": "Sophia Gold (SP2'17)",
                        "id": 100779
                    },
                    "user_id": 100779
                },
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "+1",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "dclau04@gmail.com",
                        "full_name": "Daniel Lau (he) (SP2'17)",
                        "id": 100522
                    },
                    "user_id": 100522
                },
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "+1",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "vaibhavsagar@gmail.com",
                        "full_name": "Vaibhav Sagar (he) (F1'16)",
                        "id": 100041
                    },
                    "user_id": 100041
                },
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "+1",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "heneli@kailahi.com",
                        "full_name": "Heneli Ta'angafala Kailahi (SP2'17)",
                        "id": 100771
                    },
                    "user_id": 100771
                }
            ],
            "recipient_id": 22667,
            "sender_email": "libby@daydrea.me",
            "sender_full_name": "Libby Horacek (she) (SP1'15)",
            "sender_id": 7081,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Haskell \"weekend office hours\"",
            "submessages": [],
            "timestamp": 1491304225,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/7f89b22589ca6f3490f8a75591a699adc0e02fcc?x=x&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"libby@daydrea.me\" data-user-id=\"7081\">@Libby Horacek (W2'15)</span>, will the talk be during the first hour, or later in the session?</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 109183907,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "ark.email@gmail.com",
            "sender_full_name": "Adam Bratschi-Kaye (he) (SP1'17)",
            "sender_id": 100532,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Haskell \"weekend office hours\"",
            "submessages": [],
            "timestamp": 1491309658,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/efe57f0998df065470ff42c938f781cf?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"adam@adampash.com\" data-user-id=\"2871\">@Adam Pash (F'13)</span> kaye I think during the first hour, but I'll check with Patrick when I see him this afternoon</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 109184503,
            "is_me_message": false,
            "last_edit_timestamp": 1491310764,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "libby@daydrea.me",
            "sender_full_name": "Libby Horacek (she) (SP1'15)",
            "sender_id": 7081,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Haskell \"weekend office hours\"",
            "submessages": [],
            "timestamp": 1491310756,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/6f786e793877c2efaf249bc5ffb429ae?d=identicon&version=1",
            "client": "website",
            "content": "<p>Some of us are going to meet up at 5pm today to review each others' Haskell code if anyone wants to stop by with projects they're working on. I assume we'll be in either Babbage or Lovelace, depending on which is free.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 109239516,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "sophiagoldnyc@gmail.com",
            "sender_full_name": "Sophia Gold (SP2'17)",
            "sender_id": 100779,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "code review",
            "submessages": [],
            "timestamp": 1491414488,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/6f786e793877c2efaf249bc5ffb429ae?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"ark.email@gmail.com\" data-user-id=\"100532\">@Adam Kaye (SP1'17)</span> <span class=\"user-mention\" data-user-email=\"danlaudk@yahoo.dk\" data-user-id=\"100522\">@Daniel Lau (SP2'17)</span> : <a href=\"http://cale.hn.org/Demos/ParseHaskell/ParseHaskell.jsexe/\" target=\"_blank\" title=\"http://cale.hn.org/Demos/ParseHaskell/ParseHaskell.jsexe/\">http://cale.hn.org/Demos/ParseHaskell/ParseHaskell.jsexe/</a></p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 109259045,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "sophiagoldnyc@gmail.com",
            "sender_full_name": "Sophia Gold (SP2'17)",
            "sender_id": 100779,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Interactive Web-Based AST Parser",
            "submessages": [],
            "timestamp": 1491449046,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/6f786e793877c2efaf249bc5ffb429ae?d=identicon&version=1",
            "client": "website",
            "content": "<p>Here's the code: <a href=\"http://cale.hn.org/Demos/ParseHaskell/ParseHaskell.hs\" target=\"_blank\" title=\"http://cale.hn.org/Demos/ParseHaskell/ParseHaskell.hs\">http://cale.hn.org/Demos/ParseHaskell/ParseHaskell.hs</a> <img alt=\":flushed:\" class=\"emoji\" src=\"/static/generated/emoji/images/emoji/unicode/1f633.png\" title=\":flushed:\"></p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 109259056,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "sophiagoldnyc@gmail.com",
            "sender_full_name": "Sophia Gold (SP2'17)",
            "sender_id": 100779,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Interactive Web-Based AST Parser",
            "submessages": [],
            "timestamp": 1491449127,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/36e38f07213a4459a526a3334d690aa09a75b04d?x=x&version=3",
            "client": "website",
            "content": "<p><a href=\"https://recurse.zulipchat.com/#narrow/stream/scala/topic/FP.20in.20Scala.20reading.20group.20(red.20book)\" target=\"_blank\" title=\"https://recurse.zulipchat.com/#narrow/stream/scala/topic/FP.20in.20Scala.20reading.20group.20(red.20book)\">https://recurse.zulipchat.com/#narrow/stream/scala/topic/FP.20in.20Scala.20reading.20group.20(red.20book)</a></p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 109328621,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "dclau04@gmail.com",
            "sender_full_name": "Daniel Lau (he) (SP2'17)",
            "sender_id": 100522,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "\"FP in Scala\" reading group",
            "submessages": [],
            "timestamp": 1491589562,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/efe57f0998df065470ff42c938f781cf?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"ark.email@gmail.com\" data-user-id=\"100532\">@Adam Kaye (SP1'17)</span> I forgot to get back to you! Definitely the first hour. :)</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 109398252,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "libby@daydrea.me",
            "sender_full_name": "Libby Horacek (she) (SP1'15)",
            "sender_id": 7081,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Haskell \"weekend office hours\"",
            "submessages": [],
            "timestamp": 1491755106,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/7f89b22589ca6f3490f8a75591a699adc0e02fcc?x=x&version=1",
            "client": "website",
            "content": "<p>Thanks Libby, unfortunately I can't make it anyway this weekend, but hopefully in the future.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 109401574,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "ark.email@gmail.com",
            "sender_full_name": "Adam Bratschi-Kaye (he) (SP1'17)",
            "sender_id": 100532,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Haskell \"weekend office hours\"",
            "submessages": [],
            "timestamp": 1491763230,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4d074af6cc341ef51b25bb2f738cdb11?d=identicon&version=1",
            "client": "website",
            "content": "<p><a href=\"https://aphyr.com/posts/342-typing-the-technical-interview\" target=\"_blank\" title=\"https://aphyr.com/posts/342-typing-the-technical-interview\">https://aphyr.com/posts/342-typing-the-technical-interview</a></p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 109432886,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "vaibhavsagar@gmail.com",
            "sender_full_name": "Vaibhav Sagar (he) (F1'16)",
            "sender_id": 100041,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Typing the technical interview",
            "submessages": [],
            "timestamp": 1491836237,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/6f786e793877c2efaf249bc5ffb429ae?d=identicon&version=1",
            "client": "website",
            "content": "<p>I came on here just to share this! <img alt=\":smile:\" class=\"emoji\" src=\"/static/generated/emoji/images/emoji/unicode/1f604.png\" title=\":smile:\"></p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 109458488,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "sophiagoldnyc@gmail.com",
            "sender_full_name": "Sophia Gold (SP2'17)",
            "sender_id": 100779,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Typing the technical interview",
            "submessages": [],
            "timestamp": 1491882191,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4d074af6cc341ef51b25bb2f738cdb11?d=identicon&version=1",
            "client": "website",
            "content": "<p>Kwang Yul Seo has some relatively accessible stuff on type level programming:</p>\n<ul>\n<li><a href=\"http://kseo.github.io/posts/2017-01-16-type-level-functions-using-closed-type-families.html\" target=\"_blank\" title=\"http://kseo.github.io/posts/2017-01-16-type-level-functions-using-closed-type-families.html\">http://kseo.github.io/posts/2017-01-16-type-level-functions-using-closed-type-families.html</a></li>\n<li><a href=\"http://kseo.github.io/posts/2017-01-20-how-servant%27s-type-safe-links-work.html\" target=\"_blank\" title=\"http://kseo.github.io/posts/2017-01-20-how-servant%27s-type-safe-links-work.html\">http://kseo.github.io/posts/2017-01-20-how-servant%27s-type-safe-links-work.html</a></li>\n<li><a href=\"http://kseo.github.io/posts/2017-01-30-type-level-insertion-sort.html\" target=\"_blank\" title=\"http://kseo.github.io/posts/2017-01-30-type-level-insertion-sort.html\">http://kseo.github.io/posts/2017-01-30-type-level-insertion-sort.html</a></li>\n</ul>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 109458746,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "vaibhavsagar@gmail.com",
            "sender_full_name": "Vaibhav Sagar (he) (F1'16)",
            "sender_id": 100041,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Typing the technical interview",
            "submessages": [],
            "timestamp": 1491882748,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4d074af6cc341ef51b25bb2f738cdb11?d=identicon&version=1",
            "client": "website",
            "content": "<p>Cross posted from <a class=\"stream\" data-stream-id=\"100724\" href=\"/#narrow/stream/nix\">#nix</a>: <a href=\"https://www.youtube.com/watch?v=G9yiJ7d5LeI\" target=\"_blank\" title=\"https://www.youtube.com/watch?v=G9yiJ7d5LeI\">https://www.youtube.com/watch?v=G9yiJ7d5LeI</a></p>\n<div class=\"youtube-video message_inline_image\"><a data-id=\"G9yiJ7d5LeI\" href=\"https://www.youtube.com/watch?v=G9yiJ7d5LeI\" target=\"_blank\" title=\"https://www.youtube.com/watch?v=G9yiJ7d5LeI\"><img src=\"https://i.ytimg.com/vi/G9yiJ7d5LeI/default.jpg\"></a></div>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 109502929,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "+1",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "janaipakos@gmail.com",
                        "full_name": "James Anaipakos (SP1'17)",
                        "id": 100534
                    },
                    "user_id": 100534
                },
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "+1",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "sophiagoldnyc@gmail.com",
                        "full_name": "Sophia Gold (SP2'17)",
                        "id": 100779
                    },
                    "user_id": 100779
                }
            ],
            "recipient_id": 22667,
            "sender_email": "vaibhavsagar@gmail.com",
            "sender_full_name": "Vaibhav Sagar (he) (F1'16)",
            "sender_id": 100041,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "How I use nix for Haskell development",
            "submessages": [],
            "timestamp": 1491973198,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/7f89b22589ca6f3490f8a75591a699adc0e02fcc?x=x&version=1",
            "client": "website",
            "content": "<p>Hey everyone, I'm going to do some refactoring of the bitcoin wallet today which I think will involve some interesting stuff with state monads (and a little bit of free monads). Let me know if you want to pair on it! <span class=\"user-mention\" data-user-email=\"heneli@kailahi.com\" data-user-id=\"100771\">@Heneli Ta'angafala Kailahi (SP2'17)</span> <span class=\"user-mention\" data-user-email=\"danlaudk@yahoo.dk\" data-user-id=\"100522\">@Daniel Lau (SP2'17)</span> <span class=\"user-mention\" data-user-email=\"cfactora93@gmail.com\" data-user-id=\"100519\">@Carl Joshua Factora (SP1'17)</span> <span class=\"user-mention\" data-user-email=\"janaipakos@gmail.com\" data-user-id=\"100534\">@James Anaipakos (SP1'17)</span></p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 109997722,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "ark.email@gmail.com",
            "sender_full_name": "Adam Bratschi-Kaye (he) (SP1'17)",
            "sender_id": 100532,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "pairing today",
            "submessages": [],
            "timestamp": 1493043946,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/36e38f07213a4459a526a3334d690aa09a75b04d?x=x&version=3",
            "client": "website",
            "content": "<p>free in the afternoon, anytime from 1pm</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 109997778,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "dclau04@gmail.com",
            "sender_full_name": "Daniel Lau (he) (SP2'17)",
            "sender_id": 100522,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "pairing today",
            "submessages": [],
            "timestamp": 1493044018,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/57ee4628e40dfdc98e509d3cb7d823c7dfaf5eae?x=x&version=4",
            "client": "website",
            "content": "<p>Ye. I'll be down.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 110000566,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "cfactora93@gmail.com",
            "sender_full_name": "Carl Joshua Factora (SP1'17)",
            "sender_id": 100519,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "pairing today",
            "submessages": [],
            "timestamp": 1493048985,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4d074af6cc341ef51b25bb2f738cdb11?d=identicon&version=1",
            "client": "website",
            "content": "<p>I discovered <code>coerce</code> from <a href=\"https://hackage.haskell.org/package/base-4.9.1.0/docs/Data-Coerce.html\" target=\"_blank\" title=\"https://hackage.haskell.org/package/base-4.9.1.0/docs/Data-Coerce.html\">Data.Coerce</a> today, which is super handy for converting between <code>newtype</code>s and the original type.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 110040808,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "vaibhavsagar@gmail.com",
            "sender_full_name": "Vaibhav Sagar (he) (F1'16)",
            "sender_id": 100041,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Data.Coerce",
            "submessages": [],
            "timestamp": 1493132851,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4d074af6cc341ef51b25bb2f738cdb11?d=identicon&version=1",
            "client": "website",
            "content": "<p><a href=\"https://github.com/vaibhavsagar/duffer/commit/d0df3e870e35e89f89c3f0bbde583fc6b2c01c1e?diff=split\" target=\"_blank\" title=\"https://github.com/vaibhavsagar/duffer/commit/d0df3e870e35e89f89c3f0bbde583fc6b2c01c1e?diff=split\">It's pretty magical.</a></p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 110040868,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "vaibhavsagar@gmail.com",
            "sender_full_name": "Vaibhav Sagar (he) (F1'16)",
            "sender_id": 100041,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Data.Coerce",
            "submessages": [],
            "timestamp": 1493132937,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/7f89b22589ca6f3490f8a75591a699adc0e02fcc?x=x&version=1",
            "client": "website",
            "content": "<p>Looks pretty awesome, thanks <span class=\"user-mention\" data-user-email=\"vaibhavsagar@gmail.com\" data-user-id=\"100041\">@Vaibhav Sagar (F1'16)</span></p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 110208340,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "ark.email@gmail.com",
            "sender_full_name": "Adam Bratschi-Kaye (he) (SP1'17)",
            "sender_id": 100532,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Data.Coerce",
            "submessages": [],
            "timestamp": 1493469232,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4d074af6cc341ef51b25bb2f738cdb11?d=identicon&version=1",
            "client": "website",
            "content": "<p><a href=\"https://hackage.haskell.org/package/base-4.9.1.0/docs/Data-Type-Coercion.html\" target=\"_blank\" title=\"https://hackage.haskell.org/package/base-4.9.1.0/docs/Data-Type-Coercion.html\">Data.Type.Coercion</a> also looks interesting, although I only have a vague notion of what it is</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 110240564,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "vaibhavsagar@gmail.com",
            "sender_full_name": "Vaibhav Sagar (he) (F1'16)",
            "sender_id": 100041,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Data.Coerce",
            "submessages": [],
            "timestamp": 1493549758,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4d074af6cc341ef51b25bb2f738cdb11?d=identicon&version=1",
            "client": "website",
            "content": "<p>Please enjoy these blog posts as I have: <a href=\"http://teh.id.au/\" target=\"_blank\" title=\"http://teh.id.au/\">http://teh.id.au/</a></p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 110266538,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "vaibhavsagar@gmail.com",
            "sender_full_name": "Vaibhav Sagar (he) (F1'16)",
            "sender_id": 100041,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "teh.id.au",
            "submessages": [],
            "timestamp": 1493613937,
            "topic_links": [
                "https://teh.id.au"
            ],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4d074af6cc341ef51b25bb2f738cdb11?d=identicon&version=1",
            "client": "website",
            "content": "<p>George Wilson's talks are so great: <a href=\"https://www.youtube.com/watch?v=JZPXzJ5tp9w\" target=\"_blank\" title=\"https://www.youtube.com/watch?v=JZPXzJ5tp9w\">https://www.youtube.com/watch?v=JZPXzJ5tp9w</a></p>\n<div class=\"youtube-video message_inline_image\"><a data-id=\"JZPXzJ5tp9w\" href=\"https://www.youtube.com/watch?v=JZPXzJ5tp9w\" target=\"_blank\" title=\"https://www.youtube.com/watch?v=JZPXzJ5tp9w\"><img src=\"https://i.ytimg.com/vi/JZPXzJ5tp9w/default.jpg\"></a></div>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 110270639,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "vaibhavsagar@gmail.com",
            "sender_full_name": "Vaibhav Sagar (he) (F1'16)",
            "sender_id": 100041,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "The Extended Functor Family",
            "submessages": [],
            "timestamp": 1493624152,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/7f89b22589ca6f3490f8a75591a699adc0e02fcc?x=x&version=1",
            "client": "website",
            "content": "<p>I'm curious about this library for sorting in linear time ...</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 110277853,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "ark.email@gmail.com",
            "sender_full_name": "Adam Bratschi-Kaye (he) (SP1'17)",
            "sender_id": 100532,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "The Extended Functor Family",
            "submessages": [],
            "timestamp": 1493641418,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/919b4af386b43c5ca84d8e664790a7d906336c0d?x=x&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"ark.email@gmail.com\" data-user-id=\"100532\">@Adam Kaye (SP1'17)</span> <br>\n1. Sort<br>\n2. Hal VM<br>\n3. Profit?</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 110289999,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "botwhytho@gmail.com",
            "sender_full_name": "Alberto Torres (SP1'17)",
            "sender_id": 100545,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "The Extended Functor Family",
            "submessages": [],
            "timestamp": 1493663512,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/6485c74622306264ff53449c6f0ca540?d=identicon&version=1",
            "client": "website",
            "content": "<p>I assume he's talking about <a href=\"https://github.com/ekmett/discrimination\" target=\"_blank\" title=\"https://github.com/ekmett/discrimination\">https://github.com/ekmett/discrimination</a>, because kmett.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 110290075,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "iain@mccoy.id.au",
            "sender_full_name": "Iain McCoy (he) (SP2'17)",
            "sender_id": 100806,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "The Extended Functor Family",
            "submessages": [],
            "timestamp": 1493663624,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4d074af6cc341ef51b25bb2f738cdb11?d=identicon&version=1",
            "client": "website",
            "content": "<blockquote>\n<p>By adopting a final encoding we can enjoy many instances for standard classes, lawfully, without quotienting.</p>\n</blockquote>\n<p><a href=\"https://media.giphy.com/media/KxhIhXaAmjOVy/giphy.gif\" target=\"_blank\" title=\"https://media.giphy.com/media/KxhIhXaAmjOVy/giphy.gif\">https://media.giphy.com/media/KxhIhXaAmjOVy/giphy.gif</a></p>\n<div class=\"message_inline_image\"><a href=\"https://media.giphy.com/media/KxhIhXaAmjOVy/giphy.gif\" target=\"_blank\" title=\"https://media.giphy.com/media/KxhIhXaAmjOVy/giphy.gif\"><img src=\"https://media.giphy.com/media/KxhIhXaAmjOVy/giphy.gif\"></a></div>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 110303475,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "+1",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "recurse@sweeting.me",
                        "full_name": "Nick Sweeting (he) (S1'14)",
                        "id": 5883
                    },
                    "user_id": 5883
                },
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "+1",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "dclau04@gmail.com",
                        "full_name": "Daniel Lau (he) (SP2'17)",
                        "id": 100522
                    },
                    "user_id": 100522
                }
            ],
            "recipient_id": 22667,
            "sender_email": "vaibhavsagar@gmail.com",
            "sender_full_name": "Vaibhav Sagar (he) (F1'16)",
            "sender_id": 100041,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "The Extended Functor Family",
            "submessages": [],
            "timestamp": 1493687681,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4d074af6cc341ef51b25bb2f738cdb11?d=identicon&version=1",
            "client": "website",
            "content": "<p>Tim Humphries knocks it out of the park: <a href=\"http://teh.id.au/posts/2017/05/10/lambdajam-slides/index.html\" target=\"_blank\" title=\"http://teh.id.au/posts/2017/05/10/lambdajam-slides/index.html\">http://teh.id.au/posts/2017/05/10/lambdajam-slides/index.html</a></p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 110690068,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "vaibhavsagar@gmail.com",
            "sender_full_name": "Vaibhav Sagar (he) (F1'16)",
            "sender_id": 100041,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Continuations all the way down",
            "submessages": [],
            "timestamp": 1494506294,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/57ee4628e40dfdc98e509d3cb7d823c7dfaf5eae?x=x&version=4",
            "client": "website",
            "content": "<p>totally gonna steal this :)</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 110690767,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "cfactora93@gmail.com",
            "sender_full_name": "Carl Joshua Factora (SP1'17)",
            "sender_id": 100519,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Continuations all the way down",
            "submessages": [],
            "timestamp": 1494508042,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/57ee4628e40dfdc98e509d3cb7d823c7dfaf5eae?x=x&version=4",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"montecristoh@gmail.com\" data-user-id=\"100509\">@Alberto Zaccagni (SP1'17)</span> is your body ready?</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 110690769,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "cfactora93@gmail.com",
            "sender_full_name": "Carl Joshua Factora (SP1'17)",
            "sender_id": 100519,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Continuations all the way down",
            "submessages": [],
            "timestamp": 1494508057,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/7f89b22589ca6f3490f8a75591a699adc0e02fcc?x=x&version=1",
            "client": "website",
            "content": "<p>Thanks V. I'd heard that writer can be horribly slow, but never really understood why</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 110691171,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "ark.email@gmail.com",
            "sender_full_name": "Adam Bratschi-Kaye (he) (SP1'17)",
            "sender_id": 100532,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Continuations all the way down",
            "submessages": [],
            "timestamp": 1494508950,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/f9168c90ac77e5592118339e9859e5f3?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"cfactora93@gmail.com\" data-user-id=\"100519\">@Carl Joshua Factora (SP1'17)</span> bring it on.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 110691236,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "montecristoh@gmail.com",
            "sender_full_name": "Alberto Zaccagni (SP1'17)",
            "sender_id": 100509,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Continuations all the way down",
            "submessages": [],
            "timestamp": 1494509088,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p>Ah, really cool talk. I'm going to have to meditate on that.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 110695851,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Continuations all the way down",
            "submessages": [],
            "timestamp": 1494517558,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/efe57f0998df065470ff42c938f781cf?d=identicon&version=1",
            "client": "website",
            "content": "<p>these slides are blowing my mind right now. thanks for sharing!</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 110757157,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "libby@daydrea.me",
            "sender_full_name": "Libby Horacek (she) (SP1'15)",
            "sender_id": 7081,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Continuations all the way down",
            "submessages": [],
            "timestamp": 1494633819,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/36e38f07213a4459a526a3334d690aa09a75b04d?x=x&version=3",
            "client": "website",
            "content": "<p>I think there'll be some interest from batchers  to do some kind of reading group in FP (Summer 1 starts Monday), focused on Haskell.  I'd like to invite alums too (pending logistics) so here's an invitation to consider joining a reading group. So far, I like the <a href=\"http://haskellbook.com/\" target=\"_blank\" title=\"http://haskellbook.com/\">HPFP book</a>. My focus would be chapters 22 thru 30 (the last 300 pages, basically from Reader thru Transformers, laziness, IO and Exceptions), maybe warming up on monads and modules (ch.18,13). Any interest, or other suggestions for syllabi?</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 110996118,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1100",
                    "emoji_name": "lambda",
                    "reaction_type": "realm_emoji",
                    "user": {
                        "email": "heneli@kailahi.com",
                        "full_name": "Heneli Ta'angafala Kailahi (SP2'17)",
                        "id": 100771
                    },
                    "user_id": 100771
                },
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "+1",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "vaibhavsagar@gmail.com",
                        "full_name": "Vaibhav Sagar (he) (F1'16)",
                        "id": 100041
                    },
                    "user_id": 100041
                },
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "+1",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "heneli@kailahi.com",
                        "full_name": "Heneli Ta'angafala Kailahi (SP2'17)",
                        "id": 100771
                    },
                    "user_id": 100771
                },
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "+1",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "cfactora93@gmail.com",
                        "full_name": "Carl Joshua Factora (SP1'17)",
                        "id": 100519
                    },
                    "user_id": 100519
                },
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "+1",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "adityavkk@gmail.com",
                        "full_name": "Aditya Kumarakrishnan (SP1'17)",
                        "id": 100340
                    },
                    "user_id": 100340
                }
            ],
            "recipient_id": 22667,
            "sender_email": "dclau04@gmail.com",
            "sender_full_name": "Daniel Lau (he) (SP2'17)",
            "sender_id": 100522,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "reading group Haskell Programming from first principles",
            "submessages": [],
            "timestamp": 1495086377,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/009427e1b56c85d4a70a091905cf7a305c109dc6?x=x&version=5",
            "client": "website",
            "content": "<p>I'm interested</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 111007955,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "heneli@kailahi.com",
            "sender_full_name": "Heneli Ta'angafala Kailahi (SP2'17)",
            "sender_id": 100771,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "reading group Haskell Programming from first principles",
            "submessages": [],
            "timestamp": 1495115377,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/57ee4628e40dfdc98e509d3cb7d823c7dfaf5eae?x=x&version=4",
            "client": "website",
            "content": "<p>When's the first meeting?</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 111012722,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "cfactora93@gmail.com",
            "sender_full_name": "Carl Joshua Factora (SP1'17)",
            "sender_id": 100519,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "reading group Haskell Programming from first principles",
            "submessages": [],
            "timestamp": 1495124147,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/36e38f07213a4459a526a3334d690aa09a75b04d?x=x&version=3",
            "client": "website",
            "content": "<p>How about a call for 90min on Tuesday at 10am to discuss approach and rhythm, and chapter 18?</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 111068553,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "dclau04@gmail.com",
            "sender_full_name": "Daniel Lau (he) (SP2'17)",
            "sender_id": 100522,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "reading group Haskell Programming from first principles",
            "submessages": [],
            "timestamp": 1495236747,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/57ee4628e40dfdc98e509d3cb7d823c7dfaf5eae?x=x&version=4",
            "client": "website",
            "content": "<p>Can't do Tuesday. I have interviews that day.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 111070148,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "cfactora93@gmail.com",
            "sender_full_name": "Carl Joshua Factora (SP1'17)",
            "sender_id": 100519,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "reading group Haskell Programming from first principles",
            "submessages": [],
            "timestamp": 1495239720,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/009427e1b56c85d4a70a091905cf7a305c109dc6?x=x&version=5",
            "client": "website",
            "content": "<p>I probably won't be able to partake until the second week. Please start without me, I'll catch up.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 111070244,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "heneli@kailahi.com",
            "sender_full_name": "Heneli Ta'angafala Kailahi (SP2'17)",
            "sender_id": 100771,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "reading group Haskell Programming from first principles",
            "submessages": [],
            "timestamp": 1495239914,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/009427e1b56c85d4a70a091905cf7a305c109dc6?x=x&version=5",
            "client": "website",
            "content": "<p>Tangentially related, <a href=\"http://intermediatehaskell.com\" target=\"_blank\" title=\"http://intermediatehaskell.com\">http://intermediatehaskell.com</a> was announced</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 111070245,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "heneli@kailahi.com",
            "sender_full_name": "Heneli Ta'angafala Kailahi (SP2'17)",
            "sender_id": 100771,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "reading group Haskell Programming from first principles",
            "submessages": [],
            "timestamp": 1495239930,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/009427e1b56c85d4a70a091905cf7a305c109dc6?x=x&version=5",
            "client": "website",
            "content": "<p>Also, tangentially related to my last tangentially related statement, the same author of HFFP is writing the <a href=\"https://lorepub.com/product/cookbook\" target=\"_blank\" title=\"https://lorepub.com/product/cookbook\">Haskell Almanac</a> as a direct follow-on. Not sure when it is coming out though.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 111070536,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1100",
                    "emoji_name": "lambda",
                    "reaction_type": "realm_emoji",
                    "user": {
                        "email": "heneli@kailahi.com",
                        "full_name": "Heneli Ta'angafala Kailahi (SP2'17)",
                        "id": 100771
                    },
                    "user_id": 100771
                },
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "+1",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "heneli@kailahi.com",
                        "full_name": "Heneli Ta'angafala Kailahi (SP2'17)",
                        "id": 100771
                    },
                    "user_id": 100771
                },
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "+1",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "vaibhavsagar@gmail.com",
                        "full_name": "Vaibhav Sagar (he) (F1'16)",
                        "id": 100041
                    },
                    "user_id": 100041
                },
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "+1",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "cfactora93@gmail.com",
                        "full_name": "Carl Joshua Factora (SP1'17)",
                        "id": 100519
                    },
                    "user_id": 100519
                }
            ],
            "recipient_id": 22667,
            "sender_email": "heneli@kailahi.com",
            "sender_full_name": "Heneli Ta'angafala Kailahi (SP2'17)",
            "sender_id": 100771,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "reading group Haskell Programming from first principles",
            "submessages": [],
            "timestamp": 1495240645,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/57ee4628e40dfdc98e509d3cb7d823c7dfaf5eae?x=x&version=4",
            "client": "website",
            "content": "<p>The world is about to get more <em>lambda</em>-y</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 111071706,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1100",
                    "emoji_name": "lambda",
                    "reaction_type": "realm_emoji",
                    "user": {
                        "email": "heneli@kailahi.com",
                        "full_name": "Heneli Ta'angafala Kailahi (SP2'17)",
                        "id": 100771
                    },
                    "user_id": 100771
                },
                {
                    "emoji_code": "6",
                    "emoji_name": "hackerschool",
                    "reaction_type": "realm_emoji",
                    "user": {
                        "email": "vaibhavsagar@gmail.com",
                        "full_name": "Vaibhav Sagar (he) (F1'16)",
                        "id": 100041
                    },
                    "user_id": 100041
                },
                {
                    "emoji_code": "6",
                    "emoji_name": "hackerschool",
                    "reaction_type": "realm_emoji",
                    "user": {
                        "email": "outofthemadness@gmail.com",
                        "full_name": "James A. Keene (he) (m2'18)",
                        "id": 887
                    },
                    "user_id": 887
                }
            ],
            "recipient_id": 22667,
            "sender_email": "cfactora93@gmail.com",
            "sender_full_name": "Carl Joshua Factora (SP1'17)",
            "sender_id": 100519,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "reading group Haskell Programming from first principles",
            "submessages": [],
            "timestamp": 1495243556,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/48e493d515af67a1512d977689cd051b?d=identicon&version=1",
            "client": "ZulipElectron",
            "content": "<p>sidenote: There needs to be a lambda emoji. I didn't know how much I wanted to react to things with a lambda</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 111072342,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1100",
                    "emoji_name": "lambda",
                    "reaction_type": "realm_emoji",
                    "user": {
                        "email": "ad@lamarque.fr",
                        "full_name": "Adrien Lamarque (they/he) (S1'16)",
                        "id": 9335
                    },
                    "user_id": 9335
                },
                {
                    "emoji_code": "1100",
                    "emoji_name": "lambda",
                    "reaction_type": "realm_emoji",
                    "user": {
                        "email": "cfactora93@gmail.com",
                        "full_name": "Carl Joshua Factora (SP1'17)",
                        "id": 100519
                    },
                    "user_id": 100519
                },
                {
                    "emoji_code": "1100",
                    "emoji_name": "lambda",
                    "reaction_type": "realm_emoji",
                    "user": {
                        "email": "dclau04@gmail.com",
                        "full_name": "Daniel Lau (he) (SP2'17)",
                        "id": 100522
                    },
                    "user_id": 100522
                },
                {
                    "emoji_code": "1100",
                    "emoji_name": "lambda",
                    "reaction_type": "realm_emoji",
                    "user": {
                        "email": "heneli@kailahi.com",
                        "full_name": "Heneli Ta'angafala Kailahi (SP2'17)",
                        "id": 100771
                    },
                    "user_id": 100771
                },
                {
                    "emoji_code": "1100",
                    "emoji_name": "lambda",
                    "reaction_type": "realm_emoji",
                    "user": {
                        "email": "vaibhavsagar@gmail.com",
                        "full_name": "Vaibhav Sagar (he) (F1'16)",
                        "id": 100041
                    },
                    "user_id": 100041
                },
                {
                    "emoji_code": "1100",
                    "emoji_name": "lambda",
                    "reaction_type": "realm_emoji",
                    "user": {
                        "email": "iain@mccoy.id.au",
                        "full_name": "Iain McCoy (he) (SP2'17)",
                        "id": 100806
                    },
                    "user_id": 100806
                }
            ],
            "recipient_id": 22667,
            "sender_email": "outofthemadness@gmail.com",
            "sender_full_name": "James A. Keene (he) (m2'18)",
            "sender_id": 887,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "reading group Haskell Programming from first principles",
            "submessages": [],
            "timestamp": 1495245080,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/6485c74622306264ff53449c6f0ca540?d=identicon&version=1",
            "client": "website",
            "content": "<p>... that didn't work as well as I'd hoped. And it's not letting me replace it or change it :(</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 111072469,
            "is_me_message": false,
            "last_edit_timestamp": 1495245583,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "iain@mccoy.id.au",
            "sender_full_name": "Iain McCoy (he) (SP2'17)",
            "sender_id": 100806,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "reading group Haskell Programming from first principles",
            "submessages": [],
            "timestamp": 1495245368,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/6485c74622306264ff53449c6f0ca540?d=identicon&version=1",
            "client": "website",
            "content": "<p>Now I need :the-face-you-make-when-you-went-and-made-a-shitty-lambda-emoj-and-can-not-fix-it:</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 111072569,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1100",
                    "emoji_name": "lambda",
                    "reaction_type": "realm_emoji",
                    "user": {
                        "email": "cfactora93@gmail.com",
                        "full_name": "Carl Joshua Factora (SP1'17)",
                        "id": 100519
                    },
                    "user_id": 100519
                },
                {
                    "emoji_code": "1100",
                    "emoji_name": "lambda",
                    "reaction_type": "realm_emoji",
                    "user": {
                        "email": "heneli@kailahi.com",
                        "full_name": "Heneli Ta'angafala Kailahi (SP2'17)",
                        "id": 100771
                    },
                    "user_id": 100771
                }
            ],
            "recipient_id": 22667,
            "sender_email": "iain@mccoy.id.au",
            "sender_full_name": "Iain McCoy (he) (SP2'17)",
            "sender_id": 100806,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "reading group Haskell Programming from first principles",
            "submessages": [],
            "timestamp": 1495245630,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/57ee4628e40dfdc98e509d3cb7d823c7dfaf5eae?x=x&version=4",
            "client": "website",
            "content": "<p>with the numbers... they're <em>de-Bruijn</em> lambdas lulul</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 111076533,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1100",
                    "emoji_name": "lambda",
                    "reaction_type": "realm_emoji",
                    "user": {
                        "email": "ark.email@gmail.com",
                        "full_name": "Adam Bratschi-Kaye (he) (SP1'17)",
                        "id": 100532
                    },
                    "user_id": 100532
                },
                {
                    "emoji_code": "1100",
                    "emoji_name": "lambda",
                    "reaction_type": "realm_emoji",
                    "user": {
                        "email": "heneli@kailahi.com",
                        "full_name": "Heneli Ta'angafala Kailahi (SP2'17)",
                        "id": 100771
                    },
                    "user_id": 100771
                }
            ],
            "recipient_id": 22667,
            "sender_email": "cfactora93@gmail.com",
            "sender_full_name": "Carl Joshua Factora (SP1'17)",
            "sender_id": 100519,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "reading group Haskell Programming from first principles",
            "submessages": [],
            "timestamp": 1495255438,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/6485c74622306264ff53449c6f0ca540?d=identicon&version=1",
            "client": "website",
            "content": "<p>I can't argue with that.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 111076580,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1100",
                    "emoji_name": "lambda",
                    "reaction_type": "realm_emoji",
                    "user": {
                        "email": "heneli@kailahi.com",
                        "full_name": "Heneli Ta'angafala Kailahi (SP2'17)",
                        "id": 100771
                    },
                    "user_id": 100771
                },
                {
                    "emoji_code": "1100",
                    "emoji_name": "lambda",
                    "reaction_type": "realm_emoji",
                    "user": {
                        "email": "cfactora93@gmail.com",
                        "full_name": "Carl Joshua Factora (SP1'17)",
                        "id": 100519
                    },
                    "user_id": 100519
                }
            ],
            "recipient_id": 22667,
            "sender_email": "iain@mccoy.id.au",
            "sender_full_name": "Iain McCoy (he) (SP2'17)",
            "sender_id": 100806,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "reading group Haskell Programming from first principles",
            "submessages": [],
            "timestamp": 1495255557,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/009427e1b56c85d4a70a091905cf7a305c109dc6?x=x&version=5",
            "client": "website",
            "content": "<p>Can we go deeper? The other author of HFFP is writing the <a href=\"https://joyofhaskell.com\" target=\"_blank\" title=\"https://joyofhaskell.com\">Joy of Haskell</a>.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 111077407,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "heneli@kailahi.com",
            "sender_full_name": "Heneli Ta'angafala Kailahi (SP2'17)",
            "sender_id": 100771,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "reading group Haskell Programming from first principles",
            "submessages": [],
            "timestamp": 1495257707,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/a6ac867cbcefd0b2623d3fd1b31c907ce7e83606?x=x&version=2",
            "client": "website",
            "content": "<p>This was a a great book! It takes some discipline to do all the exercises but it's more than worth it.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 111096195,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "+1",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "kal_ali@hotmail.com",
                        "full_name": "Khalid Omar Ali (F2'15)",
                        "id": 8713
                    },
                    "user_id": 8713
                }
            ],
            "recipient_id": 22667,
            "sender_email": "imjuansoto@gmail.com",
            "sender_full_name": "Juan Soto (F1'16)",
            "sender_id": 100019,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "reading group Haskell Programming from first principles",
            "submessages": [],
            "timestamp": 1495306048,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/36e38f07213a4459a526a3334d690aa09a75b04d?x=x&version=3",
            "client": "website",
            "content": "<p>what is joy of haskell? a book or the promise of a book?</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 111129559,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "dclau04@gmail.com",
            "sender_full_name": "Daniel Lau (he) (SP2'17)",
            "sender_id": 100522,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "reading group Haskell Programming from first principles",
            "submessages": [],
            "timestamp": 1495391829,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/009427e1b56c85d4a70a091905cf7a305c109dc6?x=x&version=5",
            "client": "website",
            "content": "<p>both - <a href=\"https://joyofhaskell.com/posts/2017-02-28-welcome.html\" target=\"_blank\" title=\"https://joyofhaskell.com/posts/2017-02-28-welcome.html\">https://joyofhaskell.com/posts/2017-02-28-welcome.html</a></p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 111131629,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "heneli@kailahi.com",
            "sender_full_name": "Heneli Ta'angafala Kailahi (SP2'17)",
            "sender_id": 100771,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "reading group Haskell Programming from first principles",
            "submessages": [],
            "timestamp": 1495396866,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/36e38f07213a4459a526a3334d690aa09a75b04d?x=x&version=3",
            "client": "website",
            "content": "<p>proposal is wednesday 11am. time shifted later in case west coasters are interested <img alt=\":wink:\" class=\"emoji\" src=\"/static/generated/emoji/images/emoji/unicode/1f609.png\" title=\":wink:\"> <span class=\"user-mention\" data-user-email=\"xianny@gmail.com\" data-user-id=\"100527\">@Xianny Ng (SP1'17)</span>   If there are lots of ppl interested in Haskell, we could decide to have a reading group and/or exercise groups or no-reading group and just have discussion around particular chapters</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 111168416,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "dclau04@gmail.com",
            "sender_full_name": "Daniel Lau (he) (SP2'17)",
            "sender_id": 100522,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "reading group Haskell Programming from first principles",
            "submessages": [],
            "timestamp": 1495479484,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/7f89b22589ca6f3490f8a75591a699adc0e02fcc?x=x&version=1",
            "client": "website",
            "content": "<p>Anyone have a pdf of Purely Functional Data Structures?</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 111202120,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "ark.email@gmail.com",
            "sender_full_name": "Adam Bratschi-Kaye (he) (SP1'17)",
            "sender_id": 100532,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Purely Functional Data Structures",
            "submessages": [],
            "timestamp": 1495551875,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/1dab9dd0d179fc8f5c09931c9841fd3a79edaec5?x=x&version=1",
            "client": "website",
            "content": "<p><a href=\"https://www.cs.cmu.edu/~rwh/theses/okasaki.pdf\" target=\"_blank\" title=\"https://www.cs.cmu.edu/~rwh/theses/okasaki.pdf\">https://www.cs.cmu.edu/~rwh/theses/okasaki.pdf</a> That's Okasaki's PhD thesis, on which the book is based. The book itself is not available as a PDF as far as I know.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 111202582,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1100",
                    "emoji_name": "lambda",
                    "reaction_type": "realm_emoji",
                    "user": {
                        "email": "outofthemadness@gmail.com",
                        "full_name": "James A. Keene (he) (m2'18)",
                        "id": 887
                    },
                    "user_id": 887
                },
                {
                    "emoji_code": "1100",
                    "emoji_name": "lambda",
                    "reaction_type": "realm_emoji",
                    "user": {
                        "email": "cfactora93@gmail.com",
                        "full_name": "Carl Joshua Factora (SP1'17)",
                        "id": 100519
                    },
                    "user_id": 100519
                }
            ],
            "recipient_id": 22667,
            "sender_email": "jdv@foobar.be",
            "sender_full_name": "Jonas De Vuyst (F'13)",
            "sender_id": 2860,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Purely Functional Data Structures",
            "submessages": [],
            "timestamp": 1495552625,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/48e493d515af67a1512d977689cd051b?d=identicon&version=1",
            "client": "ZulipElectron",
            "content": "<p>fwiw there are multiple copies of the book in the RC library if you're still in nyc <span class=\"user-mention\" data-user-email=\"ark.email@gmail.com\" data-user-id=\"100532\">@Adam Kaye (SP1'17)</span></p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 111203284,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "outofthemadness@gmail.com",
            "sender_full_name": "James A. Keene (he) (m2'18)",
            "sender_id": 887,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Purely Functional Data Structures",
            "submessages": [],
            "timestamp": 1495553869,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/57ee4628e40dfdc98e509d3cb7d823c7dfaf5eae?x=x&version=4",
            "client": "website",
            "content": "<p>Can confirm this.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 111203790,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "cfactora93@gmail.com",
            "sender_full_name": "Carl Joshua Factora (SP1'17)",
            "sender_id": 100519,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Purely Functional Data Structures",
            "submessages": [],
            "timestamp": 1495554621,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/7f89b22589ca6f3490f8a75591a699adc0e02fcc?x=x&version=1",
            "client": "website",
            "content": "<p>They seem to be in use at the moment, but I got the pdf. Thanks everyone!</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 111204100,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "ark.email@gmail.com",
            "sender_full_name": "Adam Bratschi-Kaye (he) (SP1'17)",
            "sender_id": 100532,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Purely Functional Data Structures",
            "submessages": [],
            "timestamp": 1495555192,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/36e38f07213a4459a526a3334d690aa09a75b04d?x=x&version=3",
            "client": "website",
            "content": "<p>rsvp init<br>\nrsvp set location Lovelace<br>\nrsvp set time 11:00<br>\nrsvp set duration 1h<br>\nrsvp set date Wednesday<br>\nrsvp description first meeting around book chapters and exercises in Haskell, or FP at large. Get sense of how we can discuss / pair/ present/  help each other . google hangout also available <a href=\"https://plus.google.com/hangouts/_/calendar/ZGNsYXUwNEBnbWFpbC5jb20.f8jj0gs4s7l9bkhk80b0vv4tn8?authuser=0\" target=\"_blank\" title=\"https://plus.google.com/hangouts/_/calendar/ZGNsYXUwNEBnbWFpbC5jb20.f8jj0gs4s7l9bkhk80b0vv4tn8?authuser=0\">link</a> . See zulip <a href=\"https://recurse.zulipchat.com/#narrow/stream/haskell/topic/reading.20group.20Haskell.20Programming.20from.20first.20principles\" target=\"_blank\" title=\"https://recurse.zulipchat.com/#narrow/stream/haskell/topic/reading.20group.20Haskell.20Programming.20from.20first.20principles\">https://recurse.zulipchat.com/#narrow/stream/haskell/topic/reading.20group.20Haskell.20Programming.20from.20first.20principles</a><br>\nrsvp add to calendar</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 111205260,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "dclau04@gmail.com",
            "sender_full_name": "Daniel Lau (he) (SP2'17)",
            "sender_id": 100522,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "reading group Haskell Programming from first principles",
            "submessages": [],
            "timestamp": 1495556923,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/57ee4628e40dfdc98e509d3cb7d823c7dfaf5eae?x=x&version=4",
            "client": "website",
            "content": "<p>rsvp yes</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 111205285,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "cfactora93@gmail.com",
            "sender_full_name": "Carl Joshua Factora (SP1'17)",
            "sender_id": 100519,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "reading group Haskell Programming from first principles",
            "submessages": [],
            "timestamp": 1495556962,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/57ee4628e40dfdc98e509d3cb7d823c7dfaf5eae?x=x&version=4",
            "client": "website",
            "content": "<p>uh</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 111205290,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "cfactora93@gmail.com",
            "sender_full_name": "Carl Joshua Factora (SP1'17)",
            "sender_id": 100519,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "reading group Haskell Programming from first principles",
            "submessages": [],
            "timestamp": 1495556973,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/57ee4628e40dfdc98e509d3cb7d823c7dfaf5eae?x=x&version=4",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"dclau04@gmail.com\" data-user-id=\"100522\">@Daniel Lau (SP2'17)</span> It's not an rsvp event yet ;)</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 111205294,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "cfactora93@gmail.com",
            "sender_full_name": "Carl Joshua Factora (SP1'17)",
            "sender_id": 100519,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "reading group Haskell Programming from first principles",
            "submessages": [],
            "timestamp": 1495556986,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/c0e2f358b9054bdd3da5c9dfb51219d85b9cc6ae?x=x&version=1",
            "client": "ZulipPython",
            "content": "<p>This thread is now an RSVPBot event for <strong><a href=\"https://www.recurse.com/calendar/70\" target=\"_blank\" title=\"https://www.recurse.com/calendar/70\">haskell</a></strong>! Type <code>rsvp help</code> for more options.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 111205471,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "rsvp-bot@recurse.zulipchat.com",
            "sender_full_name": "RSVPBot",
            "sender_id": 101113,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "reading group Haskell Programming from first principles",
            "submessages": [],
            "timestamp": 1495557256,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/57ee4628e40dfdc98e509d3cb7d823c7dfaf5eae?x=x&version=4",
            "client": "website",
            "content": "<p>rsvp yes</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 111205614,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "cfactora93@gmail.com",
            "sender_full_name": "Carl Joshua Factora (SP1'17)",
            "sender_id": 100519,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "reading group Haskell Programming from first principles",
            "submessages": [],
            "timestamp": 1495557595,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/009427e1b56c85d4a70a091905cf7a305c109dc6?x=x&version=5",
            "client": "website",
            "content": "<p>rsvp yes</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 111206094,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "heneli@kailahi.com",
            "sender_full_name": "Heneli Ta'angafala Kailahi (SP2'17)",
            "sender_id": 100771,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "reading group Haskell Programming from first principles",
            "submessages": [],
            "timestamp": 1495558432,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/48e493d515af67a1512d977689cd051b?d=identicon&version=1",
            "client": "ZulipElectron",
            "content": "<p><span class=\"user-mention\" data-user-email=\"ark.email@gmail.com\" data-user-id=\"100532\">@Adam Kaye (SP1'17)</span>  would that be the pdf of the thesis?</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 111207872,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "outofthemadness@gmail.com",
            "sender_full_name": "James A. Keene (he) (m2'18)",
            "sender_id": 887,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Purely Functional Data Structures",
            "submessages": [],
            "timestamp": 1495561179,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/7f89b22589ca6f3490f8a75591a699adc0e02fcc?x=x&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"outofthemadness@gmail.com\" data-user-id=\"887\">@James A. Keene (W1'14)</span> actually it's of the book.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 111210785,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "ark.email@gmail.com",
            "sender_full_name": "Adam Bratschi-Kaye (he) (SP1'17)",
            "sender_id": 100532,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Purely Functional Data Structures",
            "submessages": [],
            "timestamp": 1495565702,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/48e493d515af67a1512d977689cd051b?d=identicon&version=1",
            "client": "ZulipElectron",
            "content": "<p><span class=\"user-mention\" data-user-email=\"ark.email@gmail.com\" data-user-id=\"100532\">@Adam Kaye (SP1'17)</span>  in that case, would you mind sharing?</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 111210799,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "+1",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "kal_ali@hotmail.com",
                        "full_name": "Khalid Omar Ali (F2'15)",
                        "id": 8713
                    },
                    "user_id": 8713
                },
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "+1",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "vaibhavsagar@gmail.com",
                        "full_name": "Vaibhav Sagar (he) (F1'16)",
                        "id": 100041
                    },
                    "user_id": 100041
                },
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "+1",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "heneli@kailahi.com",
                        "full_name": "Heneli Ta'angafala Kailahi (SP2'17)",
                        "id": 100771
                    },
                    "user_id": 100771
                },
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "+1",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "dclau04@gmail.com",
                        "full_name": "Daniel Lau (he) (SP2'17)",
                        "id": 100522
                    },
                    "user_id": 100522
                },
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "+1",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "ark.email@gmail.com",
                        "full_name": "Adam Bratschi-Kaye (he) (SP1'17)",
                        "id": 100532
                    },
                    "user_id": 100532
                }
            ],
            "recipient_id": 22667,
            "sender_email": "outofthemadness@gmail.com",
            "sender_full_name": "James A. Keene (he) (m2'18)",
            "sender_id": 887,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Purely Functional Data Structures",
            "submessages": [],
            "timestamp": 1495565746,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4d074af6cc341ef51b25bb2f738cdb11?d=identicon&version=1",
            "client": "website",
            "content": "<p>So much cool stuff! <a href=\"https://www.haskell.org/communities/05-2017/html/report.html\" target=\"_blank\" title=\"https://www.haskell.org/communities/05-2017/html/report.html\">https://www.haskell.org/communities/05-2017/html/report.html</a></p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 111265609,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "vaibhavsagar@gmail.com",
            "sender_full_name": "Vaibhav Sagar (he) (F1'16)",
            "sender_id": 100041,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Haskell Communities and Activities Report",
            "submessages": [],
            "timestamp": 1495675685,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/7f89b22589ca6f3490f8a75591a699adc0e02fcc?x=x&version=1",
            "client": "website",
            "content": "<p>Github for LambdaBTC: <a href=\"https://github.com/clample/lambdabtc\" target=\"_blank\" title=\"https://github.com/clample/lambdabtc\">https://github.com/clample/lambdabtc</a><br>\nMessage me or <span class=\"user-mention\" data-user-email=\"clample@crimson.ua.edu\" data-user-id=\"100452\">@Chris Lample (W2'17)</span>  if you want to talk about it!</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 111302992,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1100",
                    "emoji_name": "lambda",
                    "reaction_type": "realm_emoji",
                    "user": {
                        "email": "clample@crimson.ua.edu",
                        "full_name": "Chris Lample (he) (W2'17)",
                        "id": 100452
                    },
                    "user_id": 100452
                },
                {
                    "emoji_code": "1100",
                    "emoji_name": "lambda",
                    "reaction_type": "realm_emoji",
                    "user": {
                        "email": "cfactora93@gmail.com",
                        "full_name": "Carl Joshua Factora (SP1'17)",
                        "id": 100519
                    },
                    "user_id": 100519
                }
            ],
            "recipient_id": 22667,
            "sender_email": "ark.email@gmail.com",
            "sender_full_name": "Adam Bratschi-Kaye (he) (SP1'17)",
            "sender_id": 100532,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Bitcoin Wallet!",
            "submessages": [],
            "timestamp": 1495752415,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/009427e1b56c85d4a70a091905cf7a305c109dc6?x=x&version=5",
            "client": "website",
            "content": "<p>(deleted)</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 111325431,
            "is_me_message": false,
            "last_edit_timestamp": 1495804461,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "heneli@kailahi.com",
            "sender_full_name": "Heneli Ta'angafala Kailahi (SP2'17)",
            "sender_id": 100771,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "reading group Haskell Programming from first principles",
            "submessages": [],
            "timestamp": 1495804178,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/40e1eb4186c76edfecca264f74e088ed0e62af25?x=x&version=2",
            "client": "website",
            "content": "<p>I'm working through  Stephen Diehl's \"Implementing a JIT Compiled Language with Haskell and LLVM\" since last  2 days. This will easily take a few days to complete. If anyone wants to work though this, please get in touch. I'm a LLVM no0b, but is comfortable with the Haskell that is used for this tutorial. </p>\n<p><a href=\"http://www.stephendiehl.com/llvm\" target=\"_blank\" title=\"http://www.stephendiehl.com/llvm\">http://www.stephendiehl.com/llvm</a></p>\n<p>xpost <a class=\"stream\" data-stream-id=\"18967\" href=\"/#narrow/stream/pairing\">#pairing</a> <a class=\"stream\" data-stream-id=\"26219\" href=\"/#narrow/stream/LLVM\">#LLVM</a> <a class=\"stream\" data-stream-id=\"20273\" href=\"/#narrow/stream/compilers\">#compilers</a> <br>\ncc: <span class=\"user-mention\" data-user-email=\"veit@veitheller.de\" data-user-id=\"101103\">@Veit Heller (S1'17)</span> <span class=\"user-mention\" data-user-email=\"trbabb@gmail.com\" data-user-id=\"101091\">@Tim Babb (S1'17)</span></p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 111330600,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "jaseemabid@gmail.com",
            "sender_full_name": "Jaseem Abid (he) (S1'17)",
            "sender_id": 101128,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Kaleidoscope",
            "submessages": [],
            "timestamp": 1495813495,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/36e38f07213a4459a526a3334d690aa09a75b04d?x=x&version=3",
            "client": "website",
            "content": "<p>am very interested! but the intro says i need to understand transformers first.  (i've passing familiarity with the pattern but haven't read anything for understanding cos  it's not a pattern used in Scala) i'll be available around the space after 330pm i'll try to find u? <span class=\"user-mention\" data-user-email=\"jaseemabid@gmail.com\" data-user-id=\"101128\">@Jaseem Abid (S1'17)</span></p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 111330940,
            "is_me_message": false,
            "last_edit_timestamp": 1495814082,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "dclau04@gmail.com",
            "sender_full_name": "Daniel Lau (he) (SP2'17)",
            "sender_id": 100522,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Kaleidoscope",
            "submessages": [],
            "timestamp": 1495813971,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/40e1eb4186c76edfecca264f74e088ed0e62af25?x=x&version=2",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"dclau04@gmail.com\" data-user-id=\"100522\">@Daniel Lau (SP2'17)</span> Sure. The transformers part is not that big. We can figure that out.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 111331880,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "jaseemabid@gmail.com",
            "sender_full_name": "Jaseem Abid (he) (S1'17)",
            "sender_id": 101128,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Kaleidoscope",
            "submessages": [],
            "timestamp": 1495815420,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/a7cfba3d94a1b727e5d91ed13aad1a25ff02ba79?x=x&version=2",
            "client": "website",
            "content": "<p>Exercise \"Numbers into words\" on page 294 (PDF page: 326) in chapter 8 \"Recursion\" looks like a good exercise for pairing. Is somebody interested in doing that this morning (Wednesday morning)?</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 111498244,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1100",
                    "emoji_name": "lambda",
                    "reaction_type": "realm_emoji",
                    "user": {
                        "email": "dclau04@gmail.com",
                        "full_name": "Daniel Lau (he) (SP2'17)",
                        "id": 100522
                    },
                    "user_id": 100522
                }
            ],
            "recipient_id": 22667,
            "sender_email": "business@stefan-lesser.com",
            "sender_full_name": "Stefan Lesser (S1'17)",
            "sender_id": 101083,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "reading group Haskell Programming from first principles",
            "submessages": [],
            "timestamp": 1496194499,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/0e74dfe9b92822b1371cae0f22538b2e?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"jaseemabid@gmail.com\" data-user-id=\"101128\">@Jaseem Abid (S1'17)</span> I don't see an RSVP event yet for this. Do we have a fixed time each week? <span class=\"user-mention\" data-user-email=\"abylaw@gmail.com\" data-user-id=\"100830\">@Andrea Law (SP2'17)</span> wanted to know about this as well.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 111527247,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "indradhanush.gupta@gmail.com",
            "sender_full_name": "Indradhanush Gupta (he) (S1'17)",
            "sender_id": 101105,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Haskell group RSVP event",
            "submessages": [],
            "timestamp": 1496257561,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/57ee4628e40dfdc98e509d3cb7d823c7dfaf5eae?x=x&version=4",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"abylaw@gmail.com\" data-user-id=\"100830\">@Andrea Law (SP2'17)</span> 3pm every Friday, I believe. Also, I don't think we'll have an RSVP for it every week (unless that's what <span class=\"user-mention\" data-user-email=\"dclau04@gmail.com\" data-user-id=\"100522\">@Daniel Lau (SP2'17)</span> plans to do).</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 111528133,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "cfactora93@gmail.com",
            "sender_full_name": "Carl Joshua Factora (SP1'17)",
            "sender_id": 100519,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Haskell group RSVP event",
            "submessages": [],
            "timestamp": 1496259025,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/0e74dfe9b92822b1371cae0f22538b2e?d=identicon&version=1",
            "client": "website",
            "content": "<p>There's an RSVP event for this now: <a href=\"https://www.recurse.com/calendar/125\" target=\"_blank\" title=\"https://www.recurse.com/calendar/125\">https://www.recurse.com/calendar/125</a></p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 111567932,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "indradhanush.gupta@gmail.com",
            "sender_full_name": "Indradhanush Gupta (he) (S1'17)",
            "sender_id": 101105,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Haskell group RSVP event",
            "submessages": [],
            "timestamp": 1496342890,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/cbcb9589503e23026f6e55769709dc6a43465431?x=x&version=2",
            "client": "website",
            "content": "<p>rsvp init <a href=\"https://www.recurse.com/calendar/125\" target=\"_blank\" title=\"https://www.recurse.com/calendar/125\">https://www.recurse.com/calendar/125</a></p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 111581068,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "alokbeniwal@gmail.com",
            "sender_full_name": "Alok Singh (S1'17)",
            "sender_id": 101076,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Haskell group RSVP event",
            "submessages": [],
            "timestamp": 1496368418,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/c0e2f358b9054bdd3da5c9dfb51219d85b9cc6ae?x=x&version=1",
            "client": "ZulipPython",
            "content": "<p>Oops! This event was already initialized here: <strong><a href=\"https://recurse.zulipchat.com#narrow/stream/RSVPs/topic/Haskell.20Book\" target=\"_blank\" title=\"https://recurse.zulipchat.com#narrow/stream/RSVPs/topic/Haskell.20Book\">#RSVPs &gt; Haskell Book</a></strong></p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 111581069,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "rsvp-bot@recurse.zulipchat.com",
            "sender_full_name": "RSVPBot",
            "sender_id": 101113,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Haskell group RSVP event",
            "submessages": [],
            "timestamp": 1496368418,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/36e38f07213a4459a526a3334d690aa09a75b04d?x=x&version=3",
            "client": "website",
            "content": "<p>moved to Hopper.  starting in 10min. Here's one suggestion for next week two or three sessions, but with Friday being a main one. <br>\nEg<br>\nMon: Review 5 Types / 6 Typeclasses<br>\nWed: 7-10 (Lists , List (spine) mechanics, folding, pattern matching)<br>\nFri:  5-10</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 111609812,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "dclau04@gmail.com",
            "sender_full_name": "Daniel Lau (he) (SP2'17)",
            "sender_id": 100522,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Haskell group RSVP event",
            "submessages": [],
            "timestamp": 1496429534,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/57ee4628e40dfdc98e509d3cb7d823c7dfaf5eae?x=x&version=4",
            "client": "website",
            "content": "<p>can has link to meeting?</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 111609957,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "cfactora93@gmail.com",
            "sender_full_name": "Carl Joshua Factora (SP1'17)",
            "sender_id": 100519,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Haskell group RSVP event",
            "submessages": [],
            "timestamp": 1496429832,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/57ee4628e40dfdc98e509d3cb7d823c7dfaf5eae?x=x&version=4",
            "client": "website",
            "content": "<p>nevermind i has</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 111610030,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "cfactora93@gmail.com",
            "sender_full_name": "Carl Joshua Factora (SP1'17)",
            "sender_id": 100519,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Haskell group RSVP event",
            "submessages": [],
            "timestamp": 1496429958,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/36e38f07213a4459a526a3334d690aa09a75b04d?x=x&version=3",
            "client": "ZulipAndroid",
            "content": "<p>To end Chapter 6 next Friday</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 111617944,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f642",
                    "emoji_name": "simple_smile",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "sabelo@sabelo.io",
                        "full_name": "Sabelo Mhlambi (F1'17)",
                        "id": 101085
                    },
                    "user_id": 101085
                }
            ],
            "recipient_id": 22667,
            "sender_email": "dclau04@gmail.com",
            "sender_full_name": "Daniel Lau (he) (SP2'17)",
            "sender_id": 100522,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "reading group Haskell Programming from first principles",
            "submessages": [],
            "timestamp": 1496444630,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p>I feel like somebody posted the slides for this talk a while ago, but the video is up and it's a really fun talk! <a href=\"https://www.youtube.com/watch?v=gUPuWHAt6SA\" target=\"_blank\" title=\"https://www.youtube.com/watch?v=gUPuWHAt6SA\">https://www.youtube.com/watch?v=gUPuWHAt6SA</a></p>\n<div class=\"youtube-video message_inline_image\"><a data-id=\"gUPuWHAt6SA\" href=\"https://www.youtube.com/watch?v=gUPuWHAt6SA\" target=\"_blank\" title=\"https://www.youtube.com/watch?v=gUPuWHAt6SA\"><img src=\"https://i.ytimg.com/vi/gUPuWHAt6SA/default.jpg\"></a></div>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 111638505,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Eff",
            "submessages": [],
            "timestamp": 1496496303,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4d074af6cc341ef51b25bb2f738cdb11?d=identicon&version=1",
            "client": "website",
            "content": "<p>Ooh, free monads! Thanks for sharing!</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 111638551,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "vaibhavsagar@gmail.com",
            "sender_full_name": "Vaibhav Sagar (he) (F1'16)",
            "sender_id": 100041,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Eff",
            "submessages": [],
            "timestamp": 1496496388,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4d074af6cc341ef51b25bb2f738cdb11?d=identicon&version=1",
            "client": "website",
            "content": "<p>Twitter tells me about <a href=\"https://www.reddit.com/r/haskell/comments/66pzc8/recommended_way_to_use_monad_transformers/\" target=\"_blank\" title=\"https://www.reddit.com/r/haskell/comments/66pzc8/recommended_way_to_use_monad_transformers/\">this reddit post</a> which links to this talk by George Wilson on <a href=\"https://www.youtube.com/watch?v=GZPup5Iuaqw\" target=\"_blank\" title=\"https://www.youtube.com/watch?v=GZPup5Iuaqw\">Next Level MTL</a></p>\n<div class=\"youtube-video message_inline_image\"><a data-id=\"GZPup5Iuaqw\" href=\"https://www.youtube.com/watch?v=GZPup5Iuaqw\" target=\"_blank\" title=\"https://www.youtube.com/watch?v=GZPup5Iuaqw\"><img src=\"https://i.ytimg.com/vi/GZPup5Iuaqw/default.jpg\"></a></div>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 111665015,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "vaibhavsagar@gmail.com",
            "sender_full_name": "Vaibhav Sagar (he) (F1'16)",
            "sender_id": 100041,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Eff",
            "submessages": [],
            "timestamp": 1496560981,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/36e38f07213a4459a526a3334d690aa09a75b04d?x=x&version=3",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"jaseemabid@gmail.com\" data-user-id=\"101128\">@Jaseem Abid (S1'17)</span> <span class=\"user-mention\" data-user-email=\"alokbeniwal@gmail.com\" data-user-id=\"101076\">@Alok Singh (S1'17)</span> in reference to whiteboarding suggestion at <a href=\"https://recurse.zulipchat.com/#narrow/stream/help/topic/Explain.20like.20I'm.20five.3A.20.22Writing.20a.20parser.2E.22\" target=\"_blank\" title=\"https://recurse.zulipchat.com/#narrow/stream/help/topic/Explain.20like.20I'm.20five.3A.20.22Writing.20a.20parser.2E.22\">help thread</a>  . Am also interested in whiteboarding it (after i read it)</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 111710732,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "dclau04@gmail.com",
            "sender_full_name": "Daniel Lau (he) (SP2'17)",
            "sender_id": 100522,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "monadic parsing",
            "submessages": [],
            "timestamp": 1496672091,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p>Ah, cool, monadic parsers are one of my favorite monad examples.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 111710927,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "monadic parsing",
            "submessages": [],
            "timestamp": 1496672427,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p>I was trying to find a blog post about applicative parsers, and stumbled on this: <a href=\"https://byorgey.wordpress.com/2012/01/05/parsing-context-sensitive-languages-with-applicative/\" target=\"_blank\" title=\"https://byorgey.wordpress.com/2012/01/05/parsing-context-sensitive-languages-with-applicative/\">https://byorgey.wordpress.com/2012/01/05/parsing-context-sensitive-languages-with-applicative/</a></p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 111711010,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "monadic parsing",
            "submessages": [],
            "timestamp": 1496672637,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p>Ah, having watched that talk, I'm still in the frustrating \"advanced-intermediate Haskeller's purgatory\" of basically knowing how to use all the pieces, but still feeling unsure about which approach to actually use :/</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 111711272,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Eff",
            "submessages": [],
            "timestamp": 1496673067,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p>I'm going to walk the talk Ekmett links to in that reddit post too: <a href=\"https://www.youtube.com/watch?v=YTaNkWjd-ac\" target=\"_blank\" title=\"https://www.youtube.com/watch?v=YTaNkWjd-ac\">https://www.youtube.com/watch?v=YTaNkWjd-ac</a></p>\n<div class=\"youtube-video message_inline_image\"><a data-id=\"YTaNkWjd-ac\" href=\"https://www.youtube.com/watch?v=YTaNkWjd-ac\" target=\"_blank\" title=\"https://www.youtube.com/watch?v=YTaNkWjd-ac\"><img src=\"https://i.ytimg.com/vi/YTaNkWjd-ac/default.jpg\"></a></div>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 111711317,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Eff",
            "submessages": [],
            "timestamp": 1496673127,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4d074af6cc341ef51b25bb2f738cdb11?d=identicon&version=1",
            "client": "website",
            "content": "<p>I figure if I watch enough videos I'll know what to do when the time comes <img alt=\":smiley:\" class=\"emoji\" src=\"/static/generated/emoji/images/emoji/unicode/1f603.png\" title=\":smiley:\"></p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 111712855,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "vaibhavsagar@gmail.com",
            "sender_full_name": "Vaibhav Sagar (he) (F1'16)",
            "sender_id": 100041,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Eff",
            "submessages": [],
            "timestamp": 1496675979,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p>Haha, yeah :)</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 111713341,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Eff",
            "submessages": [],
            "timestamp": 1496676911,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p>Have y'all looked at <code>ConstraintKinds</code>? Ekmett talks a bit about his constraints library, <a href=\"http://hackage.haskell.org/package/constraints\" target=\"_blank\" title=\"http://hackage.haskell.org/package/constraints\">http://hackage.haskell.org/package/constraints</a>, at the beginning of that video, and it seems like really cool stuff.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 111713644,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Eff",
            "submessages": [],
            "timestamp": 1496677457,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/6485c74622306264ff53449c6f0ca540?d=identicon&version=1",
            "client": "ZulipAndroid",
            "content": "<p>I tried and failed to use that library a while ago. Some time it might be fun to figure out what I can do with the library, rather than jumping straight to trying to use it in anger</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 111715416,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "iain@mccoy.id.au",
            "sender_full_name": "Iain McCoy (he) (SP2'17)",
            "sender_id": 100806,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Eff",
            "submessages": [],
            "timestamp": 1496680453,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/36e38f07213a4459a526a3334d690aa09a75b04d?x=x&version=3",
            "client": "website",
            "content": "<p>am working thru exercises in unfold/anamorphisms at end ch.12 this arvo/early evening. (p.478) feel free to join me!</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 111725489,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "dclau04@gmail.com",
            "sender_full_name": "Daniel Lau (he) (SP2'17)",
            "sender_id": 100522,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "pairing on hpfp book",
            "submessages": [],
            "timestamp": 1496697607,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4d074af6cc341ef51b25bb2f738cdb11?d=identicon&version=1",
            "client": "website",
            "content": "<p><img alt=\":haskell:\" class=\"emoji\" src=\"https://zulip-avatars.s3.amazonaws.com/13/emoji/haskell.png\" title=\":haskell:\"></p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 111739006,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "vaibhavsagar@gmail.com",
            "sender_full_name": "Vaibhav Sagar (he) (F1'16)",
            "sender_id": 100041,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": ":haskell:",
            "submessages": [],
            "timestamp": 1496726728,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4d074af6cc341ef51b25bb2f738cdb11?d=identicon&version=1",
            "client": "website",
            "content": "<p>found on <a href=\"https://slackmojis.com/\" target=\"_blank\" title=\"https://slackmojis.com/\">Slackmojis</a></p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 111739047,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "vaibhavsagar@gmail.com",
            "sender_full_name": "Vaibhav Sagar (he) (F1'16)",
            "sender_id": 100041,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": ":haskell:",
            "submessages": [],
            "timestamp": 1496726768,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4d074af6cc341ef51b25bb2f738cdb11?d=identicon&version=1",
            "client": "website",
            "content": "<p>This is one of my favourite pieces of technical writing ever: <a href=\"https://blog.fogcreek.com/fparsec/\" target=\"_blank\" title=\"https://blog.fogcreek.com/fparsec/\">https://blog.fogcreek.com/fparsec/</a></p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 111743080,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "vaibhavsagar@gmail.com",
            "sender_full_name": "Vaibhav Sagar (he) (F1'16)",
            "sender_id": 100041,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "monadic parsing",
            "submessages": [],
            "timestamp": 1496737227,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/36e38f07213a4459a526a3334d690aa09a75b04d?x=x&version=3",
            "client": "website",
            "content": "<p>friday's meeting moved to 4pm to accomodate room bookings at RC (job-related-activites). If this wld prevent anyone from coming pls let me know.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 111819570,
            "is_me_message": false,
            "last_edit_timestamp": 1496890226,
            "reactions": [
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "+1",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "sabelo@sabelo.io",
                        "full_name": "Sabelo Mhlambi (F1'17)",
                        "id": 101085
                    },
                    "user_id": 101085
                }
            ],
            "recipient_id": 22667,
            "sender_email": "dclau04@gmail.com",
            "sender_full_name": "Daniel Lau (he) (SP2'17)",
            "sender_id": 100522,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "reading group Haskell Programming from first principles",
            "submessages": [],
            "timestamp": 1496890114,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/36e38f07213a4459a526a3334d690aa09a75b04d?x=x&version=3",
            "client": "website",
            "content": "<p>Also, may i suggest meeting at the pairing stations at 330pm Friday to tackle problems that arise from chapter exercises, or just knock a cpl of random questions out before the meeting so we can focus on discussion</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 111819621,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "dclau04@gmail.com",
            "sender_full_name": "Daniel Lau (he) (SP2'17)",
            "sender_id": 100522,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "reading group Haskell Programming from first principles",
            "submessages": [],
            "timestamp": 1496890209,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/cbcb9589503e23026f6e55769709dc6a43465431?x=x&version=2",
            "client": "website",
            "content": "<p><a href=\"https://mobile.twitter.com/haskellceo\" target=\"_blank\" title=\"https://mobile.twitter.com/haskellceo\">https://mobile.twitter.com/haskellceo</a></p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 111857453,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "alokbeniwal@gmail.com",
            "sender_full_name": "Alok Singh (S1'17)",
            "sender_id": 101076,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "(no topic)",
            "submessages": [],
            "timestamp": 1496955282,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/57ee4628e40dfdc98e509d3cb7d823c7dfaf5eae?x=x&version=4",
            "client": "website",
            "content": "<p>Currently reading <a href=\"https://www.microsoft.com/en-us/research/wp-content/uploads/2016/02/parallel_haskell2.pdf\" target=\"_blank\" title=\"https://www.microsoft.com/en-us/research/wp-content/uploads/2016/02/parallel_haskell2.pdf\">this paper</a>, and working on some exercises.</p>\n<p>Kind of doing an off-shoot of the first <code>STM</code> exercise in the paper (section 5, page 23-24 of the PDF), where we're supposed to implement a Queue. I'm a bit stuck on trying to implement <code>dequeueEither</code> (the code type-checks, but I can't seem to get it work without using <code>unsafeIOToSTM</code>). Any tips or suggestions are welcome.</p>\n<p>I'm aware that I can just avoid using <code>atomically</code> in <code>dequeue</code>, but the paper requires that we return an <code>IO a</code> for the function (P.S. any one have a <em>in-a-nutshell</em> description for <code>atomically</code>?), which I think is for a good reason.</p>\n<p>Here is the code:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kr\">module</span> <span class=\"nn\">Main</span> <span class=\"kr\">where</span>\n\n<span class=\"kr\">import</span> <span class=\"nn\">Data.Array</span>\n<span class=\"kr\">import</span> <span class=\"nn\">Control.Concurrent.STM</span>\n<span class=\"kr\">import</span> <span class=\"nn\">GHC.Conc</span>\n\n\n<span class=\"c1\">-- data STM a \u2212\u2212 A monad supporting atomic memory transactions</span>\n<span class=\"c1\">-- atomically :: STM a \u2212&gt; IO a \u2212\u2212 Perform a series of STM actions atomically</span>\n<span class=\"c1\">-- retry :: STM a \u2212\u2212 Retry current transaction from the beginning</span>\n<span class=\"c1\">-- orElse :: STM a \u2212&gt; STM a \u2212&gt; STM a \u2212\u2212 Compose two transactions</span>\n<span class=\"c1\">-- data TVar a \u2212\u2212 Shared memory locations that support atomic memory operations</span>\n<span class=\"c1\">-- newTVar :: a \u2212&gt; STM (TVar a) \u2212\u2212 Create a new TVar with an initial value</span>\n<span class=\"c1\">-- readTVar :: TVar a \u2212&gt; STM a \u2212\u2212 Return the current value stored in a TVar</span>\n<span class=\"c1\">-- writeTVar :: TVar a \u2212&gt; a \u2212&gt; STM () \u2212\u2212 Write the supplied value into a TVar</span>\n\n\n<span class=\"kr\">data</span> <span class=\"kt\">Queue</span> <span class=\"n\">e</span> <span class=\"ow\">=</span>\n  <span class=\"kt\">Queue</span> <span class=\"p\">{</span> <span class=\"n\">cr</span> <span class=\"ow\">::</span> <span class=\"kt\">TVar</span> <span class=\"kt\">Int</span><span class=\"p\">,</span> <span class=\"c1\">-- read channel</span>\n          <span class=\"n\">cw</span> <span class=\"ow\">::</span> <span class=\"kt\">TVar</span> <span class=\"kt\">Int</span><span class=\"p\">,</span> <span class=\"c1\">-- write channel</span>\n          <span class=\"n\">r</span> <span class=\"ow\">::</span> <span class=\"kt\">TVar</span> <span class=\"p\">[</span><span class=\"n\">e</span><span class=\"p\">],</span> <span class=\"c1\">-- read elements</span>\n          <span class=\"n\">w</span> <span class=\"ow\">::</span> <span class=\"kt\">TVar</span> <span class=\"p\">[</span><span class=\"n\">e</span><span class=\"p\">]</span> <span class=\"c1\">-- written elements</span>\n        <span class=\"p\">}</span>\n\n<span class=\"c1\">-- Create a new empty queue</span>\n<span class=\"nf\">newQueue</span> <span class=\"ow\">::</span> <span class=\"kt\">Int</span> <span class=\"ow\">-&gt;</span> <span class=\"kt\">IO</span> <span class=\"p\">(</span><span class=\"kt\">Queue</span> <span class=\"n\">a</span><span class=\"p\">)</span>\n<span class=\"nf\">newQueue</span> <span class=\"n\">maxNumElems</span> <span class=\"ow\">=</span>\n  <span class=\"n\">atomically</span> <span class=\"o\">$</span>\n  <span class=\"kr\">do</span> <span class=\"n\">cr</span> <span class=\"ow\">&lt;-</span> <span class=\"n\">newTVar</span> <span class=\"mi\">0</span>\n     <span class=\"n\">cw</span> <span class=\"ow\">&lt;-</span> <span class=\"n\">newTVar</span> <span class=\"n\">maxNumElems</span>\n     <span class=\"n\">r</span> <span class=\"ow\">&lt;-</span> <span class=\"n\">newTVar</span> <span class=\"kt\">[]</span>\n     <span class=\"n\">w</span> <span class=\"ow\">&lt;-</span> <span class=\"n\">newTVar</span> <span class=\"kt\">[]</span>\n     <span class=\"n\">return</span> <span class=\"p\">(</span><span class=\"kt\">Queue</span> <span class=\"n\">cr</span> <span class=\"n\">cw</span> <span class=\"n\">r</span> <span class=\"n\">w</span><span class=\"p\">)</span>\n\n<span class=\"c1\">-- Add an element to the queue</span>\n<span class=\"c1\">-- If the queue is full the caller should block until space becomes available and</span>\n<span class=\"c1\">-- the value can be successfully written into the queue</span>\n<span class=\"nf\">enqueue</span> <span class=\"ow\">::</span> <span class=\"kt\">Queue</span> <span class=\"n\">a</span> <span class=\"ow\">-&gt;</span> <span class=\"n\">a</span> <span class=\"ow\">-&gt;</span> <span class=\"kt\">IO</span> <span class=\"nb\">()</span>\n<span class=\"nf\">enqueue</span> <span class=\"p\">(</span><span class=\"kt\">Queue</span> <span class=\"n\">cr</span> <span class=\"n\">cw</span> <span class=\"n\">r</span> <span class=\"n\">w</span><span class=\"p\">)</span> <span class=\"n\">a</span> <span class=\"ow\">=</span>\n  <span class=\"n\">atomically</span> <span class=\"o\">$</span>\n  <span class=\"kr\">do</span> <span class=\"n\">writeSize</span> <span class=\"ow\">&lt;-</span> <span class=\"n\">readTVar</span> <span class=\"n\">cw</span>\n     <span class=\"kr\">if</span> <span class=\"n\">writeSize</span> <span class=\"o\">/=</span> <span class=\"mi\">0</span>\n       <span class=\"kr\">then</span> <span class=\"kr\">do</span> <span class=\"n\">writeTVar</span> <span class=\"n\">cw</span> <span class=\"p\">(</span><span class=\"n\">writeSize</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n       <span class=\"kr\">else</span> <span class=\"kr\">do</span> <span class=\"n\">readSize</span> <span class=\"ow\">&lt;-</span> <span class=\"n\">readTVar</span> <span class=\"n\">cr</span>\n               <span class=\"kr\">if</span> <span class=\"n\">readSize</span> <span class=\"o\">/=</span> <span class=\"mi\">0</span>\n                 <span class=\"kr\">then</span> <span class=\"kr\">do</span> <span class=\"n\">writeTVar</span> <span class=\"n\">cr</span> <span class=\"mi\">0</span>\n                         <span class=\"n\">writeTVar</span> <span class=\"n\">cw</span> <span class=\"p\">(</span><span class=\"n\">readSize</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n                 <span class=\"kr\">else</span> <span class=\"n\">retry</span> <span class=\"c1\">-- queue is full</span>\n     <span class=\"n\">ls</span> <span class=\"ow\">&lt;-</span> <span class=\"n\">readTVar</span> <span class=\"n\">w</span>\n     <span class=\"n\">writeTVar</span> <span class=\"n\">w</span> <span class=\"p\">(</span><span class=\"n\">a</span><span class=\"kt\">:</span><span class=\"n\">ls</span><span class=\"p\">)</span>\n\n<span class=\"c1\">-- Remove an element from the queue</span>\n<span class=\"c1\">-- If the queue is empty the caller should block until there is an item available</span>\n<span class=\"c1\">-- in the queue for removal.</span>\n<span class=\"nf\">dequeue</span> <span class=\"ow\">::</span> <span class=\"kt\">Queue</span> <span class=\"n\">a</span> <span class=\"ow\">-&gt;</span> <span class=\"kt\">IO</span> <span class=\"n\">a</span>\n<span class=\"nf\">dequeue</span> <span class=\"p\">(</span><span class=\"kt\">Queue</span> <span class=\"n\">cr</span> <span class=\"n\">cw</span> <span class=\"n\">r</span> <span class=\"n\">w</span><span class=\"p\">)</span> <span class=\"ow\">=</span>\n  <span class=\"n\">atomically</span> <span class=\"o\">$</span>\n  <span class=\"kr\">do</span> <span class=\"n\">xs</span> <span class=\"ow\">&lt;-</span> <span class=\"n\">readTVar</span> <span class=\"n\">r</span>\n     <span class=\"n\">readSize</span> <span class=\"ow\">&lt;-</span> <span class=\"n\">readTVar</span> <span class=\"n\">cr</span>\n     <span class=\"n\">writeTVar</span> <span class=\"n\">cr</span> <span class=\"p\">(</span><span class=\"n\">readSize</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"c1\">-- space for 1 more to read</span>\n     <span class=\"kr\">case</span> <span class=\"n\">xs</span> <span class=\"kr\">of</span>\n       <span class=\"p\">(</span><span class=\"n\">x</span><span class=\"kt\">:</span><span class=\"n\">xs&#39;</span><span class=\"p\">)</span> <span class=\"ow\">-&gt;</span> <span class=\"kr\">do</span>\n         <span class=\"n\">writeTVar</span> <span class=\"n\">r</span> <span class=\"n\">xs&#39;</span> <span class=\"c1\">-- remove head of list</span>\n         <span class=\"n\">return</span> <span class=\"n\">x</span>        <span class=\"c1\">-- return head of list</span>\n       <span class=\"kt\">[]</span> <span class=\"ow\">-&gt;</span> <span class=\"kr\">do</span>\n         <span class=\"c1\">-- try the other list</span>\n         <span class=\"n\">ys</span> <span class=\"ow\">&lt;-</span> <span class=\"n\">readTVar</span> <span class=\"n\">w</span>\n         <span class=\"kr\">case</span> <span class=\"n\">ys</span> <span class=\"kr\">of</span>\n           <span class=\"kt\">[]</span> <span class=\"ow\">-&gt;</span> <span class=\"n\">retry</span>\n           <span class=\"kr\">_</span> <span class=\"ow\">-&gt;</span> <span class=\"kr\">do</span>\n             <span class=\"kr\">let</span> <span class=\"p\">(</span><span class=\"n\">z</span><span class=\"kt\">:</span><span class=\"n\">zs</span><span class=\"p\">)</span> <span class=\"ow\">=</span> <span class=\"n\">reverse</span> <span class=\"n\">ys</span>\n             <span class=\"n\">writeTVar</span> <span class=\"n\">w</span> <span class=\"kt\">[]</span> <span class=\"c1\">-- empty writes</span>\n             <span class=\"n\">writeTVar</span> <span class=\"n\">r</span> <span class=\"n\">zs</span>\n             <span class=\"n\">return</span> <span class=\"n\">z</span>\n\n<span class=\"c1\">-- Attempt to read a value from a queue and if it is empty then attempt to</span>\n<span class=\"c1\">-- read a value from a different queue.</span>\n<span class=\"c1\">-- The caller should block until a value can be obtained from one of the two queues</span>\n<span class=\"nf\">dequeueEither</span> <span class=\"ow\">::</span> <span class=\"kt\">Queue</span> <span class=\"n\">a</span> <span class=\"ow\">-&gt;</span> <span class=\"kt\">Queue</span> <span class=\"n\">a</span> <span class=\"ow\">-&gt;</span> <span class=\"kt\">IO</span> <span class=\"n\">a</span>\n<span class=\"nf\">dequeueEither</span> <span class=\"n\">q1</span> <span class=\"n\">q2</span> <span class=\"ow\">=</span>\n  <span class=\"n\">atomically</span> <span class=\"o\">$</span>\n  <span class=\"kr\">do</span> <span class=\"n\">a</span> <span class=\"ow\">&lt;-</span> <span class=\"n\">unsafeIOToSTM</span> <span class=\"p\">(</span><span class=\"n\">dequeue</span> <span class=\"n\">q1</span><span class=\"p\">)</span> <span class=\"p\">`</span><span class=\"n\">orElse</span><span class=\"p\">`</span> <span class=\"c1\">-- LOLOLOLOLOLOL</span>\n          <span class=\"n\">unsafeIOToSTM</span> <span class=\"p\">(</span><span class=\"n\">dequeue</span> <span class=\"n\">q2</span><span class=\"p\">)</span>\n     <span class=\"n\">return</span> <span class=\"n\">a</span>\n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 111892529,
            "is_me_message": false,
            "last_edit_timestamp": 1497030591,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "cfactora93@gmail.com",
            "sender_full_name": "Carl Joshua Factora (SP1'17)",
            "sender_id": 100519,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "STM Queue",
            "submessages": [],
            "timestamp": 1497030550,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/6485c74622306264ff53449c6f0ca540?d=identicon&version=1",
            "client": "website",
            "content": "<p>Refactor so that you have a non-atomically version of <code>dequeue</code> to use in <code>dequeueEither</code>? Then dequeue is just <code>dequeue = atomically dequeueSTM</code> and <code>dequeueEither</code> can use <code>dequeueSTM</code></p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 111892652,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "iain@mccoy.id.au",
            "sender_full_name": "Iain McCoy (he) (SP2'17)",
            "sender_id": 100806,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "STM Queue",
            "submessages": [],
            "timestamp": 1497030755,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/6485c74622306264ff53449c6f0ca540?d=identicon&version=1",
            "client": "website",
            "content": "<p>actually, I think that might not work. You need to not block when you see the first one is empty, which means you can't just call dequeue on the first one (unless retry in the first dequeue fails the transaction and lets the second dequeue have a go)</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 111892722,
            "is_me_message": false,
            "last_edit_timestamp": 1497030983,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "iain@mccoy.id.au",
            "sender_full_name": "Iain McCoy (he) (SP2'17)",
            "sender_id": 100806,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "STM Queue",
            "submessages": [],
            "timestamp": 1497030924,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/57ee4628e40dfdc98e509d3cb7d823c7dfaf5eae?x=x&version=4",
            "client": "website",
            "content": "<p>Yes, that's what the <code>orElse</code> does when it sees a <code>retry</code>, IIRC.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 111892779,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "cfactora93@gmail.com",
            "sender_full_name": "Carl Joshua Factora (SP1'17)",
            "sender_id": 100519,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "STM Queue",
            "submessages": [],
            "timestamp": 1497031013,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/57ee4628e40dfdc98e509d3cb7d823c7dfaf5eae?x=x&version=4",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"iain@mccoy.id.au\" data-user-id=\"100806\">@Iain McCoy (SP2'17)</span> So you're saying doing something like <code>dequeueSTM :: Queue a -&gt; STM a</code>? That's a really simple change, but I'm wondering if there's another thing that I'm intuitively <em>not</em> seeing with this exercise.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 111892854,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "cfactora93@gmail.com",
            "sender_full_name": "Carl Joshua Factora (SP1'17)",
            "sender_id": 100519,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "STM Queue",
            "submessages": [],
            "timestamp": 1497031171,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/57ee4628e40dfdc98e509d3cb7d823c7dfaf5eae?x=x&version=4",
            "client": "website",
            "content": "<p>The only thing that I can see going wrong with that is that both calls to <code>dequeueSTM</code> are <em>not</em> done <code>atomically</code> (unless there's some distibutive property with <code>atomically</code>), which I think <em>may</em> have been necessary for this context?</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 111893134,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "cfactora93@gmail.com",
            "sender_full_name": "Carl Joshua Factora (SP1'17)",
            "sender_id": 100519,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "STM Queue",
            "submessages": [],
            "timestamp": 1497031619,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/36e38f07213a4459a526a3334d690aa09a75b04d?x=x&version=3",
            "client": "website",
            "content": "<p>rsvp init  <a href=\"https://www.recurse.com/calendar/139\" target=\"_blank\" title=\"https://www.recurse.com/calendar/139\">https://www.recurse.com/calendar/139</a></p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 111896217,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "dclau04@gmail.com",
            "sender_full_name": "Daniel Lau (he) (SP2'17)",
            "sender_id": 100522,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "reading group Haskell Programming from first principles",
            "submessages": [],
            "timestamp": 1497036959,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/36e38f07213a4459a526a3334d690aa09a75b04d?x=x&version=3",
            "client": "website",
            "content": "<p>rsvp ping. discussion at 4pm.  come over to near hopper for any questions on the exercises</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 111896273,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "dclau04@gmail.com",
            "sender_full_name": "Daniel Lau (he) (SP2'17)",
            "sender_id": 100522,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "reading group Haskell Programming from first principles",
            "submessages": [],
            "timestamp": 1497037022,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/36e38f07213a4459a526a3334d690aa09a75b04d?x=x&version=3",
            "client": "website",
            "content": "<p>in lovelace</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 111897154,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "dclau04@gmail.com",
            "sender_full_name": "Daniel Lau (he) (SP2'17)",
            "sender_id": 100522,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "reading group Haskell Programming from first principles",
            "submessages": [],
            "timestamp": 1497038481,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/36e38f07213a4459a526a3334d690aa09a75b04d?x=x&version=3",
            "client": "website",
            "content": "<p>we decided to try a daily 1030am checkin<br>\n1) Update us on where u are<br>\n2) a time that day that u'd like to pair on some problem (if u like) <br>\n3) and concepts or issues u'd like to discuss. If we think we can solve it/discuss it on the spot, we'll do that after resolving (1) and (2). </p>\n<p>All issues welcome. Tentatively, due to Sp2 time constraints, we are aiming to be 'done' with ch.10 by next Friday (ahead of a mammoth ch.11&amp;12). We'll create a new topic thread for daily checkins</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 111900701,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "dclau04@gmail.com",
            "sender_full_name": "Daniel Lau (he) (SP2'17)",
            "sender_id": 100522,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "reading group Haskell Programming from first principles",
            "submessages": [],
            "timestamp": 1497044545,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/7f89b22589ca6f3490f8a75591a699adc0e02fcc?x=x&version=1",
            "client": "website",
            "content": "<p>That's pretty cool that <code>orElse</code> triggers the second <code>STM a</code> if the first hits a <code>retry</code>. It seems to like you're fine having a <code>dequeueSTM</code> as you describe and setting </p>\n<div class=\"codehilite\"><pre><span></span>dequeueEither q1 q2 = atomically $ dequeueSTM q1 `orElse` dequeueSTM q2\n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 111907758,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "ark.email@gmail.com",
            "sender_full_name": "Adam Bratschi-Kaye (he) (SP1'17)",
            "sender_id": 100532,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "STM Queue",
            "submessages": [],
            "timestamp": 1497059819,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/7f89b22589ca6f3490f8a75591a699adc0e02fcc?x=x&version=1",
            "client": "website",
            "content": "<p>By the way, did you try making the queue as described in the exercise? I don't see how you can define <code>newQueue</code> without a default value because there isn't a way to create empty <code>TVar</code>s:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kr\">import</span> <span class=\"nn\">Control.Concurrent.STM</span>\n<span class=\"kr\">import</span> <span class=\"nn\">GHC.Conc</span>\n<span class=\"kr\">import</span> <span class=\"nn\">Data.Array</span>\n\n<span class=\"nf\">arraySize</span> <span class=\"ow\">::</span> <span class=\"kt\">Int</span>\n<span class=\"nf\">arraySize</span> <span class=\"ow\">=</span> <span class=\"mi\">100</span>\n\n<span class=\"kr\">data</span> <span class=\"kt\">Queue</span> <span class=\"n\">a</span> <span class=\"ow\">=</span> <span class=\"kt\">Queue</span> <span class=\"p\">{</span> <span class=\"n\">shead</span> <span class=\"ow\">::</span> <span class=\"kt\">TVar</span> <span class=\"kt\">Int</span>\n                     <span class=\"p\">,</span> <span class=\"n\">stail</span> <span class=\"ow\">::</span> <span class=\"kt\">TVar</span> <span class=\"kt\">Int</span>\n                     <span class=\"p\">,</span> <span class=\"n\">empty</span> <span class=\"ow\">::</span> <span class=\"kt\">TVar</span> <span class=\"kt\">Bool</span>\n                     <span class=\"p\">,</span> <span class=\"n\">sa</span> <span class=\"ow\">::</span> <span class=\"kt\">Array</span> <span class=\"kt\">Int</span> <span class=\"p\">(</span><span class=\"kt\">TVar</span> <span class=\"n\">a</span><span class=\"p\">)</span>\n                     <span class=\"p\">}</span>\n\n<span class=\"nf\">newQueue</span> <span class=\"ow\">::</span> <span class=\"n\">a</span> <span class=\"ow\">-&gt;</span> <span class=\"kt\">IO</span> <span class=\"p\">(</span><span class=\"kt\">Queue</span> <span class=\"n\">a</span><span class=\"p\">)</span> <span class=\"c1\">-- should be just IO (Queue a)</span>\n<span class=\"nf\">newQueue</span> <span class=\"n\">defaultA</span> <span class=\"ow\">=</span> <span class=\"n\">atomically</span> <span class=\"o\">$</span>\n  <span class=\"kt\">Queue</span> <span class=\"o\">&lt;$&gt;</span> <span class=\"n\">newTVar</span> <span class=\"mi\">0</span> <span class=\"o\">&lt;*&gt;</span> <span class=\"n\">newTVar</span> <span class=\"mi\">0</span> <span class=\"o\">&lt;*&gt;</span> <span class=\"n\">newTVar</span> <span class=\"kt\">True</span> <span class=\"o\">&lt;*&gt;</span>\n    <span class=\"p\">(</span><span class=\"n\">listArray</span> <span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"n\">arraySize</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"o\">&lt;$&gt;</span>\n      <span class=\"n\">sequenceA</span> <span class=\"p\">(</span><span class=\"n\">replicate</span> <span class=\"n\">arraySize</span> <span class=\"p\">(</span><span class=\"n\">newTVar</span> <span class=\"n\">defaultA</span><span class=\"p\">)))</span> <span class=\"c1\">-- how to initialize the TVars without a default value of type a???</span>\n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 111907995,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "ark.email@gmail.com",
            "sender_full_name": "Adam Bratschi-Kaye (he) (SP1'17)",
            "sender_id": 100532,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "STM Queue",
            "submessages": [],
            "timestamp": 1497060386,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/57ee4628e40dfdc98e509d3cb7d823c7dfaf5eae?x=x&version=4",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"ark.email@gmail.com\" data-user-id=\"100532\">@Adam Kaye (SP1'17)</span> I did try it that way... I had no idea how to use it with an <code>Array</code>, so I just used a <code>List</code> lolol</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 111928647,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "cfactora93@gmail.com",
            "sender_full_name": "Carl Joshua Factora (SP1'17)",
            "sender_id": 100519,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "STM Queue",
            "submessages": [],
            "timestamp": 1497112443,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/57ee4628e40dfdc98e509d3cb7d823c7dfaf5eae?x=x&version=4",
            "client": "website",
            "content": "<p>I hit that same exact problem you're talking about haha</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 111928662,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "cfactora93@gmail.com",
            "sender_full_name": "Carl Joshua Factora (SP1'17)",
            "sender_id": 100519,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "STM Queue",
            "submessages": [],
            "timestamp": 1497112455,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/57ee4628e40dfdc98e509d3cb7d823c7dfaf5eae?x=x&version=4",
            "client": "website",
            "content": "<p>It basically needs a <code>None</code> object, which is of type <code>a</code></p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 111928663,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "cfactora93@gmail.com",
            "sender_full_name": "Carl Joshua Factora (SP1'17)",
            "sender_id": 100519,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "STM Queue",
            "submessages": [],
            "timestamp": 1497112493,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/57ee4628e40dfdc98e509d3cb7d823c7dfaf5eae?x=x&version=4",
            "client": "website",
            "content": "<p>yeah and the <code>retry</code> logic with <code>orElse</code> is a really cool way of composing programs that have blocking expressions.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 111928670,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "cfactora93@gmail.com",
            "sender_full_name": "Carl Joshua Factora (SP1'17)",
            "sender_id": 100519,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "STM Queue",
            "submessages": [],
            "timestamp": 1497112553,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/7f89b22589ca6f3490f8a75591a699adc0e02fcc?x=x&version=1",
            "client": "website",
            "content": "<p>I just realized we can initialize the queue with <code>undefined</code>s because we'll then make sure each spot is filled with a real value before we evaluate it. Here's what I ended up doing:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kr\">module</span> <span class=\"nn\">Main</span> <span class=\"kr\">where</span>\n\n<span class=\"kr\">import</span> <span class=\"nn\">Control.Concurrent.STM</span>\n<span class=\"kr\">import</span> <span class=\"nn\">GHC.Conc</span>\n<span class=\"kr\">import</span> <span class=\"nn\">Data.Array</span>\n<span class=\"kr\">import</span> <span class=\"nn\">System.Random</span>\n<span class=\"kr\">import</span> <span class=\"nn\">Control.Monad</span>\n<span class=\"kr\">import</span> <span class=\"nn\">System.IO</span>\n\n\n<span class=\"nf\">arraySize</span> <span class=\"ow\">::</span> <span class=\"kt\">Int</span> <span class=\"c1\">-- maximum size of the queue</span>\n<span class=\"nf\">arraySize</span> <span class=\"ow\">=</span> <span class=\"mi\">100</span>\n\n\n<span class=\"kr\">data</span> <span class=\"kt\">Queue</span> <span class=\"n\">a</span> <span class=\"ow\">=</span> <span class=\"kt\">Queue</span> <span class=\"p\">{</span> <span class=\"n\">shead</span> <span class=\"ow\">::</span> <span class=\"kt\">TVar</span> <span class=\"kt\">Int</span>\n                     <span class=\"p\">,</span> <span class=\"n\">stail</span> <span class=\"ow\">::</span> <span class=\"kt\">TVar</span> <span class=\"kt\">Int</span>\n                     <span class=\"p\">,</span> <span class=\"n\">empty</span> <span class=\"ow\">::</span> <span class=\"kt\">TVar</span> <span class=\"kt\">Bool</span>\n                     <span class=\"p\">,</span> <span class=\"n\">sa</span> <span class=\"ow\">::</span> <span class=\"kt\">Array</span> <span class=\"kt\">Int</span> <span class=\"p\">(</span><span class=\"kt\">TVar</span> <span class=\"n\">a</span><span class=\"p\">)</span>\n                     <span class=\"p\">}</span>\n\n\n<span class=\"nf\">newQueue</span> <span class=\"ow\">::</span> <span class=\"kt\">IO</span> <span class=\"p\">(</span><span class=\"kt\">Queue</span> <span class=\"n\">a</span><span class=\"p\">)</span>\n<span class=\"nf\">newQueue</span> <span class=\"ow\">=</span> <span class=\"n\">atomically</span> <span class=\"o\">$</span>\n  <span class=\"kt\">Queue</span> <span class=\"o\">&lt;$&gt;</span> <span class=\"n\">newTVar</span> <span class=\"mi\">0</span> <span class=\"o\">&lt;*&gt;</span> <span class=\"n\">newTVar</span> <span class=\"mi\">0</span> <span class=\"o\">&lt;*&gt;</span> <span class=\"n\">newTVar</span> <span class=\"kt\">True</span> <span class=\"o\">&lt;*&gt;</span>\n    <span class=\"p\">(</span><span class=\"n\">listArray</span> <span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">arraySize</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"o\">&lt;$&gt;</span>\n      <span class=\"n\">sequenceA</span> <span class=\"p\">(</span><span class=\"n\">replicate</span> <span class=\"n\">arraySize</span> <span class=\"p\">(</span><span class=\"n\">newTVar</span> <span class=\"n\">undefined</span><span class=\"p\">)))</span>\n\n\n<span class=\"nf\">isFull</span> <span class=\"ow\">::</span> <span class=\"kt\">Queue</span> <span class=\"n\">a</span> <span class=\"ow\">-&gt;</span> <span class=\"kt\">STM</span> <span class=\"kt\">Bool</span>\n<span class=\"nf\">isFull</span> <span class=\"p\">(</span><span class=\"kt\">Queue</span> <span class=\"n\">shead</span> <span class=\"n\">stail</span> <span class=\"n\">empty</span> <span class=\"kr\">_</span><span class=\"p\">)</span> <span class=\"ow\">=</span>\n  <span class=\"p\">(</span><span class=\"o\">&amp;&amp;</span><span class=\"p\">)</span> <span class=\"o\">&lt;$&gt;</span> <span class=\"p\">((</span><span class=\"o\">==</span><span class=\"p\">)</span> <span class=\"o\">&lt;$&gt;</span> <span class=\"n\">readTVar</span> <span class=\"n\">shead</span> <span class=\"o\">&lt;*&gt;</span> <span class=\"n\">readTVar</span> <span class=\"n\">stail</span><span class=\"p\">)</span>\n       <span class=\"o\">&lt;*&gt;</span> <span class=\"p\">(</span><span class=\"n\">not</span> <span class=\"o\">&lt;$&gt;</span> <span class=\"n\">readTVar</span> <span class=\"n\">empty</span><span class=\"p\">)</span>\n\n\n<span class=\"nf\">enqueueSTM</span> <span class=\"ow\">::</span> <span class=\"kt\">Queue</span> <span class=\"n\">a</span> <span class=\"ow\">-&gt;</span> <span class=\"n\">a</span> <span class=\"ow\">-&gt;</span> <span class=\"kt\">STM</span> <span class=\"nb\">()</span>\n<span class=\"nf\">enqueueSTM</span> <span class=\"n\">q</span><span class=\"o\">@</span><span class=\"p\">(</span><span class=\"kt\">Queue</span> <span class=\"n\">shead</span> <span class=\"n\">stail</span> <span class=\"n\">empty</span> <span class=\"n\">sa</span><span class=\"p\">)</span> <span class=\"n\">a</span> <span class=\"ow\">=</span> <span class=\"kr\">do</span>\n  <span class=\"n\">full</span> <span class=\"ow\">&lt;-</span> <span class=\"n\">isFull</span> <span class=\"n\">q</span>\n  <span class=\"kr\">if</span> <span class=\"n\">full</span> <span class=\"kr\">then</span> <span class=\"n\">retry</span> <span class=\"kr\">else</span> <span class=\"kr\">do</span>\n    <span class=\"n\">inx</span> <span class=\"ow\">&lt;-</span> <span class=\"n\">readTVar</span> <span class=\"n\">stail</span>\n    <span class=\"kr\">let</span> <span class=\"n\">newInx</span> <span class=\"ow\">=</span> <span class=\"p\">(</span><span class=\"n\">inx</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"p\">`</span><span class=\"n\">mod</span><span class=\"p\">`</span> <span class=\"n\">arraySize</span>\n    <span class=\"n\">writeTVar</span> <span class=\"p\">(</span><span class=\"n\">sa</span> <span class=\"o\">!</span> <span class=\"n\">inx</span><span class=\"p\">)</span> <span class=\"n\">a</span>\n    <span class=\"n\">writeTVar</span> <span class=\"n\">stail</span> <span class=\"n\">newInx</span>\n    <span class=\"n\">writeTVar</span> <span class=\"n\">empty</span> <span class=\"kt\">False</span>\n\n\n<span class=\"nf\">dequeueSTM</span> <span class=\"ow\">::</span> <span class=\"kt\">Queue</span> <span class=\"n\">a</span> <span class=\"ow\">-&gt;</span> <span class=\"kt\">STM</span> <span class=\"n\">a</span>\n<span class=\"nf\">dequeueSTM</span> <span class=\"p\">(</span><span class=\"kt\">Queue</span> <span class=\"n\">shead</span> <span class=\"n\">stail</span> <span class=\"n\">empty</span> <span class=\"n\">sa</span><span class=\"p\">)</span> <span class=\"ow\">=</span> <span class=\"kr\">do</span>\n  <span class=\"n\">isEmpty</span> <span class=\"ow\">&lt;-</span> <span class=\"n\">readTVar</span> <span class=\"n\">empty</span>\n  <span class=\"kr\">if</span> <span class=\"n\">isEmpty</span> <span class=\"kr\">then</span> <span class=\"n\">retry</span> <span class=\"kr\">else</span> <span class=\"kr\">do</span>\n    <span class=\"n\">inx</span> <span class=\"ow\">&lt;-</span> <span class=\"n\">readTVar</span> <span class=\"n\">shead</span>\n    <span class=\"n\">tail</span> <span class=\"ow\">&lt;-</span> <span class=\"n\">readTVar</span> <span class=\"n\">stail</span>\n    <span class=\"n\">value</span> <span class=\"ow\">&lt;-</span> <span class=\"n\">readTVar</span> <span class=\"p\">(</span><span class=\"n\">sa</span> <span class=\"o\">!</span> <span class=\"n\">inx</span><span class=\"p\">)</span>\n    <span class=\"kr\">let</span> <span class=\"n\">newInx</span> <span class=\"ow\">=</span> <span class=\"p\">(</span><span class=\"n\">inx</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"p\">`</span><span class=\"n\">mod</span><span class=\"p\">`</span> <span class=\"n\">arraySize</span>\n    <span class=\"kr\">let</span> <span class=\"n\">newEmpty</span> <span class=\"ow\">=</span> <span class=\"n\">newInx</span> <span class=\"o\">==</span> <span class=\"n\">tail</span>\n    <span class=\"n\">writeTVar</span> <span class=\"n\">shead</span> <span class=\"n\">newInx</span>\n    <span class=\"n\">writeTVar</span> <span class=\"n\">empty</span> <span class=\"n\">newEmpty</span>\n    <span class=\"n\">return</span> <span class=\"n\">value</span>\n\n\n<span class=\"nf\">dequeueEitherSTM</span> <span class=\"ow\">::</span> <span class=\"kt\">Queue</span> <span class=\"n\">a</span> <span class=\"ow\">-&gt;</span> <span class=\"kt\">Queue</span> <span class=\"n\">a</span> <span class=\"ow\">-&gt;</span> <span class=\"kt\">STM</span> <span class=\"n\">a</span>\n<span class=\"nf\">dequeueEitherSTM</span> <span class=\"n\">q1</span> <span class=\"n\">q2</span> <span class=\"ow\">=</span> <span class=\"n\">dequeueSTM</span> <span class=\"n\">q1</span> <span class=\"p\">`</span><span class=\"n\">orElse</span><span class=\"p\">`</span> <span class=\"n\">dequeueSTM</span> <span class=\"n\">q2</span>\n\n\n<span class=\"nf\">enqueue</span> <span class=\"ow\">::</span> <span class=\"kt\">Queue</span> <span class=\"n\">a</span> <span class=\"ow\">-&gt;</span> <span class=\"n\">a</span> <span class=\"ow\">-&gt;</span> <span class=\"kt\">IO</span> <span class=\"nb\">()</span>\n<span class=\"nf\">enqueue</span> <span class=\"n\">q</span> <span class=\"ow\">=</span> <span class=\"n\">atomically</span> <span class=\"o\">.</span> <span class=\"n\">enqueueSTM</span> <span class=\"n\">q</span>\n\n\n<span class=\"nf\">dequeue</span> <span class=\"ow\">::</span> <span class=\"kt\">Queue</span> <span class=\"n\">a</span> <span class=\"ow\">-&gt;</span> <span class=\"kt\">IO</span> <span class=\"n\">a</span>\n<span class=\"nf\">dequeue</span> <span class=\"ow\">=</span> <span class=\"n\">atomically</span> <span class=\"o\">.</span> <span class=\"n\">dequeueSTM</span>\n\n\n<span class=\"nf\">dequeueEither</span> <span class=\"ow\">::</span> <span class=\"kt\">Queue</span> <span class=\"n\">a</span> <span class=\"ow\">-&gt;</span> <span class=\"kt\">Queue</span> <span class=\"n\">a</span> <span class=\"ow\">-&gt;</span> <span class=\"kt\">IO</span> <span class=\"n\">a</span>\n<span class=\"nf\">dequeueEither</span> <span class=\"n\">q1</span> <span class=\"n\">q2</span> <span class=\"ow\">=</span> <span class=\"n\">atomically</span> <span class=\"o\">$</span> <span class=\"n\">dequeueEitherSTM</span> <span class=\"n\">q1</span> <span class=\"n\">q2</span>\n\n\n<span class=\"nf\">pushRandom</span> <span class=\"ow\">::</span> <span class=\"kt\">String</span> <span class=\"ow\">-&gt;</span> <span class=\"kt\">Queue</span> <span class=\"kt\">String</span> <span class=\"ow\">-&gt;</span> <span class=\"kt\">IO</span> <span class=\"nb\">()</span>\n<span class=\"nf\">pushRandom</span> <span class=\"n\">name</span> <span class=\"n\">q</span> <span class=\"ow\">=</span> <span class=\"kr\">do</span>\n  <span class=\"n\">x</span> <span class=\"ow\">&lt;-</span> <span class=\"p\">(</span><span class=\"n\">randomIO</span> <span class=\"ow\">::</span> <span class=\"kt\">IO</span> <span class=\"kt\">Int</span><span class=\"p\">)</span>\n  <span class=\"n\">enqueue</span> <span class=\"n\">q</span> <span class=\"o\">$</span> <span class=\"s\">&quot;from &quot;</span> <span class=\"o\">++</span> <span class=\"n\">name</span> <span class=\"o\">++</span> <span class=\"s\">&quot; &quot;</span> <span class=\"o\">++</span> <span class=\"n\">show</span> <span class=\"n\">x</span>\n\n\n<span class=\"nf\">main</span> <span class=\"ow\">::</span> <span class=\"kt\">IO</span> <span class=\"nb\">()</span>\n<span class=\"nf\">main</span> <span class=\"ow\">=</span> <span class=\"kr\">do</span>\n  <span class=\"n\">hSetBuffering</span> <span class=\"n\">stdin</span> <span class=\"kt\">NoBuffering</span>\n  <span class=\"n\">q</span> <span class=\"ow\">&lt;-</span> <span class=\"n\">newQueue</span>\n  <span class=\"n\">forkIO</span> <span class=\"p\">(</span><span class=\"n\">forever</span> <span class=\"o\">$</span> <span class=\"n\">pushRandom</span> <span class=\"s\">&quot;thread 1&quot;</span> <span class=\"n\">q</span><span class=\"p\">)</span>\n  <span class=\"n\">forkIO</span> <span class=\"p\">(</span><span class=\"n\">forever</span> <span class=\"o\">$</span> <span class=\"n\">pushRandom</span> <span class=\"s\">&quot;thread 2&quot;</span> <span class=\"n\">q</span><span class=\"p\">)</span>\n  <span class=\"n\">forM_</span> <span class=\"p\">(</span><span class=\"n\">replicate</span> <span class=\"mi\">1000</span> <span class=\"o\">$</span> <span class=\"n\">dequeue</span> <span class=\"n\">q</span> <span class=\"o\">&gt;&gt;=</span> <span class=\"n\">putStrLn</span><span class=\"p\">)</span> <span class=\"n\">id</span>\n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 111971751,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1104",
                    "emoji_name": "haskell",
                    "reaction_type": "realm_emoji",
                    "user": {
                        "email": "vaibhavsagar@gmail.com",
                        "full_name": "Vaibhav Sagar (he) (F1'16)",
                        "id": 100041
                    },
                    "user_id": 100041
                },
                {
                    "emoji_code": "1100",
                    "emoji_name": "lambda",
                    "reaction_type": "realm_emoji",
                    "user": {
                        "email": "cfactora93@gmail.com",
                        "full_name": "Carl Joshua Factora (SP1'17)",
                        "id": 100519
                    },
                    "user_id": 100519
                }
            ],
            "recipient_id": 22667,
            "sender_email": "ark.email@gmail.com",
            "sender_full_name": "Adam Bratschi-Kaye (he) (SP1'17)",
            "sender_id": 100532,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "STM Queue",
            "submessages": [],
            "timestamp": 1497217164,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/7f89b22589ca6f3490f8a75591a699adc0e02fcc?x=x&version=1",
            "client": "website",
            "content": "<p>^ <span class=\"user-mention\" data-user-email=\"cfactora93@gmail.com\" data-user-id=\"100519\">@Carl Joshua Factora (SP1'17)</span></p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 111971753,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "ark.email@gmail.com",
            "sender_full_name": "Adam Bratschi-Kaye (he) (SP1'17)",
            "sender_id": 100532,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "STM Queue",
            "submessages": [],
            "timestamp": 1497217178,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/57ee4628e40dfdc98e509d3cb7d823c7dfaf5eae?x=x&version=4",
            "client": "website",
            "content": "<p>Pretty :)</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 111975333,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "cfactora93@gmail.com",
            "sender_full_name": "Carl Joshua Factora (SP1'17)",
            "sender_id": 100519,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "STM Queue",
            "submessages": [],
            "timestamp": 1497225537,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/5693e93e0e540757b3d92c6350f39af0?d=identicon&version=1",
            "client": "website",
            "content": "<blockquote>\n<p>we decided to try a daily 1030am checkin<br>\n1) Update us on where u are<br>\n2) a time that day that u'd like to pair on some problem (if u like) <br>\n3) and concepts or issues u'd like to discuss. If we think we can solve it/discuss it on the spot, we'll do that after resolving (1) and (2). </p>\n<p>All issues welcome. Tentatively, due to Sp2 time constraints, we are aiming to be 'done' with ch.10 by next Friday (ahead of a mammoth ch.11&amp;12). We'll create a new topic thread for daily checkins</p>\n</blockquote>\n<p>Where can I find the checkin thread?</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 111998373,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "sabelo@sabelo.io",
            "sender_full_name": "Sabelo Mhlambi (F1'17)",
            "sender_id": 101085,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "reading group Haskell Programming from first principles",
            "submessages": [],
            "timestamp": 1497277551,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/36e38f07213a4459a526a3334d690aa09a75b04d?x=x&version=3",
            "client": "website",
            "content": "<p>stefan: finishing foldables chapter. up for pairing later in afternoon. daniel <img alt=\":wave:\" class=\"emoji\" src=\"/static/generated/emoji/images/emoji/unicode/1f44b.png\" title=\":wave:\"> s<br>\ndaniel &amp; stefan: implementing collisions today, coincidentally(!)<br>\nheneli: reading haskell school of music<br>\n<span class=\"user-mention\" data-user-email=\"sabelo@sabelo.io\" data-user-id=\"101085\">@Sabelo Mhlambi (S1'17)</span></p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 111999759,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "dclau04@gmail.com",
            "sender_full_name": "Daniel Lau (he) (SP2'17)",
            "sender_id": 100522,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "hpfp daily checkins",
            "submessages": [],
            "timestamp": 1497280153,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/5693e93e0e540757b3d92c6350f39af0?d=identicon&version=1",
            "client": "ZulipAndroid",
            "content": "<p>Today revisiting types and type classes from the textbook!</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 112000221,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "sabelo@sabelo.io",
            "sender_full_name": "Sabelo Mhlambi (F1'17)",
            "sender_id": 101085,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "hpfp daily checkins",
            "submessages": [],
            "timestamp": 1497280855,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/555d9fc8b9f9a919e308a050961eced4?d=identicon&version=1",
            "client": "website",
            "content": "<p>Today I'm continuing with 'More Functional Patterns' (Chapter 7). The going to look through 99-problems in haskell and try to find some problems that are possible with my current knowledge. If I find any appropriate ones I'll post here &amp; would love to pair through them.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 112005612,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "trent.gill@gmail.com",
            "sender_full_name": "Trent Gill (he) (SP2'17)",
            "sender_id": 100932,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "hpfp daily checkins",
            "submessages": [],
            "timestamp": 1497289518,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/5693e93e0e540757b3d92c6350f39af0?d=identicon&version=1",
            "client": "ZulipAndroid",
            "content": "<p>Today I plan on continuing reading, admittedly I didn't read much yesterday. Yesterday I finished my first major project so some quality time today will be dedicated towards reading.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 112042647,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "sabelo@sabelo.io",
            "sender_full_name": "Sabelo Mhlambi (F1'17)",
            "sender_id": 101085,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "hpfp daily checkins",
            "submessages": [],
            "timestamp": 1497363928,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/36e38f07213a4459a526a3334d690aa09a75b04d?x=x&version=3",
            "client": "website",
            "content": "<p>am timeboxing haskell reading/exercises today to focus on building. will read/do monoids-semigroup and spend at most 2 hours</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 112043405,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "dclau04@gmail.com",
            "sender_full_name": "Daniel Lau (he) (SP2'17)",
            "sender_id": 100522,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "hpfp daily checkins",
            "submessages": [],
            "timestamp": 1497365173,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/555d9fc8b9f9a919e308a050961eced4?d=identicon&version=1",
            "client": "website",
            "content": "<p>Continuing with pattern matching &amp; the rest of chapter 7 today. Didn't make much progress yesterday as was distracted with other projects. Thinking I'll start implementing a basic common lisp interpreter today. Baby steps will be getting a shell application that echoes input text to the terminal &amp; then waits (a RPL hah)</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 112045725,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "trent.gill@gmail.com",
            "sender_full_name": "Trent Gill (he) (SP2'17)",
            "sender_id": 100932,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "hpfp daily checkins",
            "submessages": [],
            "timestamp": 1497369102,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/a7cfba3d94a1b727e5d91ed13aad1a25ff02ba79?x=x&version=2",
            "client": "website",
            "content": "<p>Oooh\u2026 I have <a href=\"https://en.wikibooks.org/wiki/Write_Yourself_a_Scheme_in_48_Hours\" target=\"_blank\" title=\"https://en.wikibooks.org/wiki/Write_Yourself_a_Scheme_in_48_Hours\">this</a> on the list for this afternoon (still have to do my Haskell book reading first).</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 112050435,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "business@stefan-lesser.com",
            "sender_full_name": "Stefan Lesser (S1'17)",
            "sender_id": 101083,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "hpfp daily checkins",
            "submessages": [],
            "timestamp": 1497377165,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/555d9fc8b9f9a919e308a050961eced4?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"business@stefan-lesser.com\" data-user-id=\"101083\">@Stefan Lesser (S1'17)</span> yeah that was the inspiration. I've heard it's a little too \"just do this because it's the right way\", so i was going to approach it from more a first principles angle. very interested to pair if we can find the time later!</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 112051104,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "trent.gill@gmail.com",
            "sender_full_name": "Trent Gill (he) (SP2'17)",
            "sender_id": 100932,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "hpfp daily checkins",
            "submessages": [],
            "timestamp": 1497378477,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4d074af6cc341ef51b25bb2f738cdb11?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"business@stefan-lesser.com\" data-user-id=\"101083\">@Stefan Lesser (S1'17)</span> fair warning: that tutorial is very out of date</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 112061850,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f691",
                    "emoji_name": "ambulance",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "dclau04@gmail.com",
                        "full_name": "Daniel Lau (he) (SP2'17)",
                        "id": 100522
                    },
                    "user_id": 100522
                }
            ],
            "recipient_id": 22667,
            "sender_email": "vaibhavsagar@gmail.com",
            "sender_full_name": "Vaibhav Sagar (he) (F1'16)",
            "sender_id": 100041,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "hpfp daily checkins",
            "submessages": [],
            "timestamp": 1497397631,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/5693e93e0e540757b3d92c6350f39af0?d=identicon&version=1",
            "client": "website",
            "content": "<p>Plan for today:  hpfp exercises. Haskell will be my focus most of the day. As a result I'll probably be at RC later in the day.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 112084544,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "sabelo@sabelo.io",
            "sender_full_name": "Sabelo Mhlambi (F1'17)",
            "sender_id": 101085,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "hpfp daily checkins",
            "submessages": [],
            "timestamp": 1497450409,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/36e38f07213a4459a526a3334d690aa09a75b04d?x=x&version=3",
            "client": "website",
            "content": "<p>i see a monoid and a semigroup exercise from the book that i'm interested in pairing on today. but cldn't see any interesting from functors. (<span class=\"user-mention\" data-user-email=\"business@stefan-lesser.com\" data-user-id=\"101083\">@Stefan Lesser (S1'17)</span> <span class=\"user-mention\" data-user-email=\"alokbeniwal@gmail.com\" data-user-id=\"101076\">@Alok Singh (S1'17)</span> if u see one i'd also be interested) . Am again limiting haskell to two hours today. where's everyone else up to?   [btw, i resolved my issue yesterday, to be able to recognize a function as an applicative. (i wonder whether there's a defn to make it a monad) ]</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 112085683,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "dclau04@gmail.com",
            "sender_full_name": "Daniel Lau (he) (SP2'17)",
            "sender_id": 100522,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "hpfp daily checkins",
            "submessages": [],
            "timestamp": 1497452298,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/555d9fc8b9f9a919e308a050961eced4?d=identicon&version=1",
            "client": "website",
            "content": "<p>i'm planning on pairing on other projects today, so will also be limited in time for haskell. plan is to read chapter 8 (recursion) which is quite unfamiliar to me conceptually. thankfully it's a short one...</p>\n<p>started musing on a forth in haskell last night, so i'll probably end up doing that later in the evening.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 112086203,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "trent.gill@gmail.com",
            "sender_full_name": "Trent Gill (he) (SP2'17)",
            "sender_id": 100932,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "hpfp daily checkins",
            "submessages": [],
            "timestamp": 1497453206,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/36e38f07213a4459a526a3334d690aa09a75b04d?x=x&version=3",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"dangonrei@gmail.com\" data-user-id=\"101095\">@Daniel Gonz\u00e1lez Reina (S1'17)</span> asked a question i wasn't sure how to answer. It's based on this passage in HPFP </p>\n<blockquote>\n<p>Type inference<br>\nHaskell does not obligate us to assert a type for every expression or<br>\nvalue in our programs because it has type inference. Type inference<br>\nis an algorithm for determining the types of expressions. Haskell\u2019s<br>\ntype inference is built on an extended version of the Damas-HindleyMilner type system.<br>\nHaskell will infer the most generally applicable (polymorphic)<br>\ntype that is still correct. Essentially, the compiler starts from the<br>\nvalues whose types it knows and then works out the types of the<br>\nother values.<br>\n''<br>\nDoes type inference here also include typeclass inference ? As types are sets of values, and typeclasses are classes of types, then typeclasses are also sets of values in the same sense, right?</p>\n</blockquote>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 112088751,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "dclau04@gmail.com",
            "sender_full_name": "Daniel Lau (he) (SP2'17)",
            "sender_id": 100522,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "type inference",
            "submessages": [],
            "timestamp": 1497456730,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p>Not 100% sure I'm reading that question right, but Haskell can definitely infer types involving typeclasses, e.g. in the repl, <code>:t read \"foo\"</code> will show the type <code>Read a =&gt; a</code>. Another, more complicated example would be the <code>mtl</code> library.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 112090349,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "type inference",
            "submessages": [],
            "timestamp": 1497459050,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p>About the phrasing of the question, I'm not quite sure what you mean by \"typeclasses are also sets of values\". Can you clarify that?</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 112090509,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "type inference",
            "submessages": [],
            "timestamp": 1497459359,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/6485c74622306264ff53449c6f0ca540?d=identicon&version=1",
            "client": "website",
            "content": "<p>I'm not sure that a typeclass is a class of types. A typeclass has _instances_ for some types, and you can _constrain_ a type variable by saying it must have some typeclass. A value is of a type. There is a set of values whose types have instances of a typeclass, so you can talk about a set of values \"belonging to\" (ish) a typeclass. But the relationship between a value and its type, and the relationship between a type and its typeclasses, are very different, so I am dubious about the idea that typeclasses might be \"sets of values in the same sense\".</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 112093011,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "iain@mccoy.id.au",
            "sender_full_name": "Iain McCoy (he) (SP2'17)",
            "sender_id": 100806,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "type inference",
            "submessages": [],
            "timestamp": 1497463071,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/36e38f07213a4459a526a3334d690aa09a75b04d?x=x&version=3",
            "client": "website",
            "content": "<p>thanks. I'll try to develop my statement: <br>\n-types constrain the set of values that a term can take, via the type's definition.<br>\n-typeclasses constrain the set of types that a type variable can take and thereby (indirectly) constrain the set of values that a term can take (the term represented by that type variable).  Are there other ways in which typeclasses do constraining? <img alt=\":thinking_face:\" class=\"emoji\" src=\"/static/generated/emoji/images/emoji/unicode/1f914.png\" title=\":thinking_face:\"> </p>\n<p>The driving example is </p>\n<div class=\"codehilite\"><pre><span></span> <span class=\"kt\">:</span><span class=\"n\">t</span> <span class=\"mi\">1</span>\n<span class=\"c1\">-- 1 :: Num a =&gt; a</span>\n</pre></div>\n\n\n<p>and Num is a typeclass as opposed to a type. i might be missing something regarding polymorphic types</p>\n<blockquote>\n<p>Haskell will infer the most generally applicable (polymorphic) type that is still correct</p>\n</blockquote>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 112095272,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "dclau04@gmail.com",
            "sender_full_name": "Daniel Lau (he) (SP2'17)",
            "sender_id": 100522,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "type inference",
            "submessages": [],
            "timestamp": 1497466841,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/5693e93e0e540757b3d92c6350f39af0?d=identicon&version=1",
            "client": "website",
            "content": "<p><code>(/) 6 (length [1,2,3])</code> produces a cryptic message of:</p>\n<div class=\"codehilite\"><pre><span></span>&lt;interactive&gt;:90:1: error:\n    \u2022 No instance for (Fractional Int) arising from a use of \u2018/\u2019\n    \u2022 In the expression: (/) 6 (length [1, 2, 3])\n      In an equation for \u2018it\u2019: it = (/) 6 (length [1, 2, 3])\n</pre></div>\n\n\n<p>yet <code>quot 6 (length[1,2,3])</code> works. </p>\n<p>I understand that quot rounds down and <code>/</code> gives a fractional. However I don't see why the two should be different in the example above.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 112103053,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "sabelo@sabelo.io",
            "sender_full_name": "Sabelo Mhlambi (F1'17)",
            "sender_id": 101085,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "How?",
            "submessages": [],
            "timestamp": 1497480202,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/6485c74622306264ff53449c6f0ca540?d=identicon&version=1",
            "client": "website",
            "content": "<div class=\"codehilite\"><pre><span></span>*Main&gt; :t quot\nquot :: Integral a =&gt; a -&gt; a -&gt; a\n*Main&gt; :t (/)\n(/) :: Fractional a =&gt; a -&gt; a -&gt; a\n</pre></div>\n\n\n<p>So <code>quot</code> is defined for integral numeric types, and <code>/</code> is defined for fractional numeric types</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 112103253,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "iain@mccoy.id.au",
            "sender_full_name": "Iain McCoy (he) (SP2'17)",
            "sender_id": 100806,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "How?",
            "submessages": [],
            "timestamp": 1497480576,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/a7cfba3d94a1b727e5d91ed13aad1a25ff02ba79?x=x&version=2",
            "client": "website",
            "content": "<p>If you look at the types for all three expressions:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kt\">Prelude</span><span class=\"o\">&gt;</span> <span class=\"kt\">:</span><span class=\"n\">t</span> <span class=\"p\">(</span><span class=\"o\">/</span><span class=\"p\">)</span>\n<span class=\"p\">(</span><span class=\"o\">/</span><span class=\"p\">)</span> <span class=\"ow\">::</span> <span class=\"kt\">Fractional</span> <span class=\"n\">a</span> <span class=\"ow\">=&gt;</span> <span class=\"n\">a</span> <span class=\"ow\">-&gt;</span> <span class=\"n\">a</span> <span class=\"ow\">-&gt;</span> <span class=\"n\">a</span>\n</pre></div>\n\n\n<p><code>(/)</code> expects two params of type <code>a</code> that implement the type class <code>Fractional</code>.</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kt\">Prelude</span><span class=\"o\">&gt;</span> <span class=\"kt\">:</span><span class=\"n\">t</span> <span class=\"mi\">6</span>\n<span class=\"mi\">6</span> <span class=\"ow\">::</span> <span class=\"kt\">Num</span> <span class=\"n\">t</span> <span class=\"ow\">=&gt;</span> <span class=\"n\">t</span>\n</pre></div>\n\n\n<p>The number literal <code>6</code> is kept polymorphic as type <code>a</code> with type class <code>Num</code>.</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kt\">Prelude</span><span class=\"o\">&gt;</span> <span class=\"kt\">:</span><span class=\"n\">t</span> <span class=\"n\">length</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">]</span>\n<span class=\"nf\">length</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">]</span> <span class=\"ow\">::</span> <span class=\"kt\">Int</span>\n</pre></div>\n\n\n<p>However, <code>length</code> returns a concrete type <code>Int</code>, and that cannot be turned into a <code>Fractional</code>, at least not implicitly.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 112103254,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "business@stefan-lesser.com",
            "sender_full_name": "Stefan Lesser (S1'17)",
            "sender_id": 101083,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "How?",
            "submessages": [],
            "timestamp": 1497480594,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/6485c74622306264ff53449c6f0ca540?d=identicon&version=1",
            "client": "website",
            "content": "<p><code>length</code> will always return an integral type (specifically int), and so it can never satisfy <code>/</code>'s Fractional constraint</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 112103308,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "iain@mccoy.id.au",
            "sender_full_name": "Iain McCoy (he) (SP2'17)",
            "sender_id": 100806,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "How?",
            "submessages": [],
            "timestamp": 1497480626,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/a7cfba3d94a1b727e5d91ed13aad1a25ff02ba79?x=x&version=2",
            "client": "website",
            "content": "<p>Yay, so glad that I'm not that far off\u2026 :-)</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 112103312,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "business@stefan-lesser.com",
            "sender_full_name": "Stefan Lesser (S1'17)",
            "sender_id": 101083,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "How?",
            "submessages": [],
            "timestamp": 1497480658,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/5693e93e0e540757b3d92c6350f39af0?d=identicon&version=1",
            "client": "website",
            "content": "<p>Thank you! <span class=\"user-mention\" data-user-email=\"iain@mccoy.id.au\" data-user-id=\"100806\">@Iain McCoy (SP2'17)</span> <span class=\"user-mention\" data-user-email=\"business@stefan-lesser.com\" data-user-id=\"101083\">@Stefan Lesser (S1'17)</span>  It's more clear now <code>No instance for (Fractional Int) arising from a use of \u2018/\u2019</code> that / doesn't support Fractional values.. I can check the type signature to verify!</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 112103367,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "sabelo@sabelo.io",
            "sender_full_name": "Sabelo Mhlambi (F1'17)",
            "sender_id": 101085,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "How?",
            "submessages": [],
            "timestamp": 1497480769,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/7f89b22589ca6f3490f8a75591a699adc0e02fcc?x=x&version=1",
            "client": "website",
            "content": "<p>I usually find myself using <code>fromIntegral :: (Num b, Integral a) =&gt; a -&gt; b</code> in these situations.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 112105909,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "ark.email@gmail.com",
            "sender_full_name": "Adam Bratschi-Kaye (he) (SP1'17)",
            "sender_id": 100532,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "How?",
            "submessages": [],
            "timestamp": 1497485905,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/5693e93e0e540757b3d92c6350f39af0?d=identicon&version=1",
            "client": "ZulipAndroid",
            "content": "<p>Yesterday spent ally time on reading, taking notes, and trying examples. I made conceptual milestones but didn't progress more than a chapter. Today plan is to dedicate my time to Haskell again, in preparation for the reading group meeting tomorrow!</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 112128745,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "sabelo@sabelo.io",
            "sender_full_name": "Sabelo Mhlambi (F1'17)",
            "sender_id": 101085,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "hpfp daily checkins",
            "submessages": [],
            "timestamp": 1497537348,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/555d9fc8b9f9a919e308a050961eced4?d=identicon&version=1",
            "client": "website",
            "content": "<p>late start... yesterday i read ch8 (recursion) and really enjoyed the exercises. recursion is something that i've conceptually known, but never actually written, so that was very satisfying.</p>\n<p>today i'm reading ch9 (lists) among other things. really just trying to get through it as quickly as possible so i'll be up to speed for friday meeting. again, happy to pair on any projects / exercises folks are struggling through. yesterday i spent way too long with a syntax error because i didn't have my guards aligned correctly :/</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 112142208,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "+1",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "jaseemabid@gmail.com",
                        "full_name": "Jaseem Abid (he) (S1'17)",
                        "id": 101128
                    },
                    "user_id": 101128
                }
            ],
            "recipient_id": 22667,
            "sender_email": "trent.gill@gmail.com",
            "sender_full_name": "Trent Gill (he) (SP2'17)",
            "sender_id": 100932,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "hpfp daily checkins",
            "submessages": [],
            "timestamp": 1497552309,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/36e38f07213a4459a526a3334d690aa09a75b04d?x=x&version=3",
            "client": "website",
            "content": "<p>no haskell for me today! also, for tmrws reading group at <em>4pm</em>, would, say, u  <span class=\"user-mention\" data-user-email=\"sabelo@sabelo.io\" data-user-id=\"101085\">@Sabelo Mhlambi (S1'17)</span>  mind taking the lead  (feel free to try to chg the time too, but it seems jobs stuff is going on until 4pm) coz i won't be at rc (but if u set it up, i would dial in on <a href=\"https://hangouts.google.com/hangouts/_/calendar/ZGNsYXUwNEBnbWFpbC5jb20.f8jj0gs4s7l9bkhk80b0vv4tn8?authuser=0\" target=\"_blank\" title=\"https://hangouts.google.com/hangouts/_/calendar/ZGNsYXUwNEBnbWFpbC5jb20.f8jj0gs4s7l9bkhk80b0vv4tn8?authuser=0\">this hangout, as may Carl</a></p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 112142634,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "dclau04@gmail.com",
            "sender_full_name": "Daniel Lau (he) (SP2'17)",
            "sender_id": 100522,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "hpfp daily checkins",
            "submessages": [],
            "timestamp": 1497552995,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/5693e93e0e540757b3d92c6350f39af0?d=identicon&version=1",
            "client": "website",
            "content": "<blockquote>\n<p>no haskell for me today! also, for tmrws reading group at <em>4pm</em>, would, say, u  <span class=\"user-mention\" data-user-email=\"sabelo@sabelo.io\" data-user-id=\"101085\">@Sabelo Mhlambi (S1'17)</span>  mind taking the lead  (feel free to try to chg the time too, but it seems jobs stuff is going on until 4pm) coz i won't be at rc (but if u set it up, i would dial in on <a href=\"https://hangouts.google.com/hangouts/_/calendar/ZGNsYXUwNEBnbWFpbC5jb20.f8jj0gs4s7l9bkhk80b0vv4tn8?authuser=0\" target=\"_blank\" title=\"https://hangouts.google.com/hangouts/_/calendar/ZGNsYXUwNEBnbWFpbC5jb20.f8jj0gs4s7l9bkhk80b0vv4tn8?authuser=0\">this hangout, as may Carl</a></p>\n</blockquote>\n<p>Definitely..  I can take the lead for tomorrow. I'll defer to 4pm but could do 3pm depending on people's schedules.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 112143035,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "sabelo@sabelo.io",
            "sender_full_name": "Sabelo Mhlambi (F1'17)",
            "sender_id": 101085,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "hpfp daily checkins",
            "submessages": [],
            "timestamp": 1497553516,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/5693e93e0e540757b3d92c6350f39af0?d=identicon&version=1",
            "client": "website",
            "content": "<p>So I don't get the big deal with this example in the Haskell book (hpfp) regarding <strong>\"currying\" functions</strong>.  By applying <em>curry</em> to <em>fst</em> what am I trying to accomplish? Comments are my own:</p>\n<div class=\"codehilite\"><pre><span></span>Prelude&gt; let curry f a b = f (a, b)  -- does this mean curry accepts three arguments such that the result is &quot;f&quot; applied to the tuple (a,b)?\nPrelude&gt; :t curry\ncurry :: ((t1, t2) -&gt; t) -&gt; t1 -&gt; t2 -&gt; t . -- when declaring curry, where was it specified curry takes a tuple  and returns a function (t1,t2)-&gt;t\nPrelude&gt; :t fst\nfst :: (a, b) -&gt; a\nPrelude&gt; :t curry fst . -- I suppose this means give the type of the value after curry is applied to fst?\ncurry fst :: t -&gt; b -&gt; t\nPrelude&gt; fst (1, 2)\n1\nPrelude&gt; curry fst 1 2\n1\n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 112143417,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "sabelo@sabelo.io",
            "sender_full_name": "Sabelo Mhlambi (F1'17)",
            "sender_id": 101085,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "And the big deal is..",
            "submessages": [],
            "timestamp": 1497554045,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/6485c74622306264ff53449c6f0ca540?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"sabelo@sabelo.io\" data-user-id=\"101085\">@Sabelo Mhlambi (S1'17)</span> are you in the space?</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 112143510,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "iain@mccoy.id.au",
            "sender_full_name": "Iain McCoy (he) (SP2'17)",
            "sender_id": 100806,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "And the big deal is..",
            "submessages": [],
            "timestamp": 1497554261,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/5693e93e0e540757b3d92c6350f39af0?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"iain@mccoy.id.au\" data-user-id=\"100806\">@Iain McCoy (SP2'17)</span> Yes.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 112143513,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "sabelo@sabelo.io",
            "sender_full_name": "Sabelo Mhlambi (F1'17)",
            "sender_id": 101085,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "And the big deal is..",
            "submessages": [],
            "timestamp": 1497554276,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/a6a0ff0a4a9a86ae7bc4524453d439bd?d=identicon&version=1",
            "client": "website",
            "content": "<p>Not a haskell specific question, I just wasn't sure of a more relevant stream to post this to:</p>\n<p>Today I read <a href=\"http://homepages.inf.ed.ac.uk/wadler/papers/propositions-as-types/propositions-as-types.pdf\" target=\"_blank\" title=\"http://homepages.inf.ed.ac.uk/wadler/papers/propositions-as-types/propositions-as-types.pdf\">this article</a> about how reasoning about types (for a given flavor of types) is analogous to reasoning about logic(for a given flavor of logic) and now I'm very confused. What is a type? Why do we care about type theory? How do types relate to models of computation? Is an algorithm a model of computation?</p>\n<p>I understand what a type is in a sort of intuitive way- a type tells you the properties of a thing, and I think it's type theory that tells you how you can relate things of given types. Then I think it's the model of computation that tells you how to well compute things, and all 3 of these things are axiomatic, meaning they're just given to you. So if you have types and type theory and a model of computation you can \"solve problems\" by reducing \"problems\" to \"solutions\" using the reduction rules given by a theory of computation. The reason we care about types is because they happen to be a useful analysis in practice- if a program is poorly typed it's probably buggy (which is why I'm posting this in the haskell stream :) )</p>\n<p>... But I feel like I'm missing something. I feel like that's an ... application of types? Why do we care about types &amp; type theory beyond it happens to be useful for finding bugs? Can types be used for something other than telling us that a program is well typed?</p>\n<p>And specifically I'm wondering about something like: say I have a problem statement, and I have an algorithm that solves this problem. If I can axiomatize the operations I used in my algorithm, can I say that my algorithm is a model of computation over this restricted space of computation, where the only things I'm interested in computing is my specific problem statement? And if this is the case, can I develop a type theory to accompany this model of computation? Or is that \"not useful\" in some sense because it just reduces to a more general model and more general types?</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 112149402,
            "is_me_message": false,
            "last_edit_timestamp": 1497564930,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "annie.cherk@gmail.com",
            "sender_full_name": "Annie Cherkaev (she/they) (m4'18)",
            "sender_id": 9502,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "what is a type?",
            "submessages": [],
            "timestamp": 1497564734,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/a6a0ff0a4a9a86ae7bc4524453d439bd?d=identicon&version=1",
            "client": "website",
            "content": "<p>I think some of those questions might have just been rambling, but I hope at least some of those questions were well formed :)</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 112149414,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "annie.cherk@gmail.com",
            "sender_full_name": "Annie Cherkaev (she/they) (m4'18)",
            "sender_id": 9502,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "what is a type?",
            "submessages": [],
            "timestamp": 1497564818,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/a6a0ff0a4a9a86ae7bc4524453d439bd?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"lindsey@composition.al\" data-user-id=\"2170\">@Lindsey Kuper</span> do you have any thoughts on this?</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 112149459,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "annie.cherk@gmail.com",
            "sender_full_name": "Annie Cherkaev (she/they) (m4'18)",
            "sender_id": 9502,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "what is a type?",
            "submessages": [],
            "timestamp": 1497564850,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/57ad6b289d2b066f6497c2c7a542f246?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"annie.cherk@gmail.com\" data-user-id=\"9502\">@Annie Cherkaev (S2'16)</span> There are a whole lot of different angles for coming at the question of \"what is a type\" (or \"what is a type system\").  I recommend reading chapter 1 of Pierce's book <em>Types and Programming Languages</em> if you haven't already (there's a PDF <a href=\"http://port70.net/~nsz/articles/book/pierce_types_and_programming_languages_2002.pdf\" target=\"_blank\" title=\"http://port70.net/~nsz/articles/book/pierce_types_and_programming_languages_2002.pdf\">here</a>).</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 112151292,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "lindsey@composition.al",
            "sender_full_name": "Lindsey Kuper (she)",
            "sender_id": 2170,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "what is a type?",
            "submessages": [],
            "timestamp": 1497568473,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/57ad6b289d2b066f6497c2c7a542f246?d=identicon&version=1",
            "client": "website",
            "content": "<blockquote>\n<p>Can types be used for something other than telling us that a program is well typed?</p>\n</blockquote>\n<p>This question seems kind of circular to me, because there's not one thing that \"well-typed\" or \"ill-typed\" means; that depends on the type system.  You can design a type system to enforce some property that you think is important (or to not enforce some property that you don't think is important).  This property can be anything you want, although hopefully it will be something decidable.  Then you can show that if a program is well-typed then the property is true of it (i.e., that the type system is sound), or (less often) you can show that if the property is true of a program, then it is well-typed (i.e., that the type system is complete).  But \"this program is well-typed\" doesn't mean anything out of the context of a particular type system.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 112151494,
            "is_me_message": false,
            "last_edit_timestamp": 1497569828,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "lindsey@composition.al",
            "sender_full_name": "Lindsey Kuper (she)",
            "sender_id": 2170,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "what is a type?",
            "submessages": [],
            "timestamp": 1497568913,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/57ad6b289d2b066f6497c2c7a542f246?d=identicon&version=1",
            "client": "website",
            "content": "<blockquote>\n<p>Why do we care about types &amp; type theory beyond it happens to be useful for finding bugs?</p>\n</blockquote>\n<p>There are, indeed, a number of people doing work on fancy type systems who don't like to think of types in that way.  Instead of the \"types are for ruling out bad programs\" point of view, they like to think of types as tools for program <em>inference</em>: if you write down a type that's specific enough, then the program that inhabits that type will pop right out.  These two points of view are really two sides of the same coin.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 112151678,
            "is_me_message": false,
            "last_edit_timestamp": 1497569271,
            "reactions": [
                {
                    "emoji_code": "1f62e",
                    "emoji_name": "open_mouth",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "heneli@kailahi.com",
                        "full_name": "Heneli Ta'angafala Kailahi (SP2'17)",
                        "id": 100771
                    },
                    "user_id": 100771
                }
            ],
            "recipient_id": 22667,
            "sender_email": "lindsey@composition.al",
            "sender_full_name": "Lindsey Kuper (she)",
            "sender_id": 2170,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "what is a type?",
            "submessages": [],
            "timestamp": 1497569226,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/57ad6b289d2b066f6497c2c7a542f246?d=identicon&version=1",
            "client": "website",
            "content": "<p>(Classic tweet from Conor McBride: <a href=\"https://twitter.com/pigworker/status/282078448539811840\" target=\"_blank\" title=\"https://twitter.com/pigworker/status/282078448539811840\">https://twitter.com/pigworker/status/282078448539811840</a>)</p>\n<div class=\"inline-preview-twitter\"><div class=\"twitter-tweet\"><a href=\"https://twitter.com/pigworker/status/282078448539811840\" target=\"_blank\"><img class=\"twitter-avatar\" src=\"https://uploads.zulipusercontent.net/99dc7003ba2de2cf13ecdda0940adc2a325cc6e8/687474703a2f2f7062732e7477696d672e636f6d2f70726f66696c655f696d616765732f3731373031353930393938323932383839362f4e396a5268324b635f6e6f726d616c2e6a7067\"></a><p><a href=\"https://twitter.com/sperbsen\" target=\"_blank\" title=\"https://twitter.com/sperbsen\">@sperbsen</a> <a href=\"https://twitter.com/mwotton\" target=\"_blank\" title=\"https://twitter.com/mwotton\">@mwotton</a> <a href=\"https://twitter.com/TacticalGrace\" target=\"_blank\" title=\"https://twitter.com/TacticalGrace\">@TacticalGrace</a> <a href=\"https://twitter.com/puffnfresh\" target=\"_blank\" title=\"https://twitter.com/puffnfresh\">@puffnfresh</a> I'm bored of error-policing being the point of types. To me, types are for program inference.</p><span>- Conor McBride (@pigworker)</span></div></div>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 112151837,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "lindsey@composition.al",
            "sender_full_name": "Lindsey Kuper (she)",
            "sender_id": 2170,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "what is a type?",
            "submessages": [],
            "timestamp": 1497569522,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4d074af6cc341ef51b25bb2f738cdb11?d=identicon&version=1",
            "client": "website",
            "content": "<p>yet another opportunity to plug my favourite Conor McBride talk: <a href=\"https://www.youtube.com/watch?v=3U3lV5VPmOU\" target=\"_blank\" title=\"https://www.youtube.com/watch?v=3U3lV5VPmOU\">Conor McBride - What are Types for, or are they only Against?</a></p>\n<div class=\"youtube-video message_inline_image\"><a data-id=\"3U3lV5VPmOU\" href=\"https://www.youtube.com/watch?v=3U3lV5VPmOU\" target=\"_blank\" title=\"https://www.youtube.com/watch?v=3U3lV5VPmOU\"><img src=\"https://i.ytimg.com/vi/3U3lV5VPmOU/default.jpg\"></a></div>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 112154575,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "vaibhavsagar@gmail.com",
            "sender_full_name": "Vaibhav Sagar (he) (F1'16)",
            "sender_id": 100041,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "what is a type?",
            "submessages": [],
            "timestamp": 1497575568,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/661412d42ecbf0c0bd354116859a5af3562f8e5f?x=x&version=4",
            "client": "website",
            "content": "<p>woah, ive only ever read a few of his paper (which i thoroughly enjoyed, particularly \"the view from the left\"). i never heard him talk! thats so cool! thank you so much!</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 112155845,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "veit@veitheller.de",
            "sender_full_name": "Veit Heller (he) (S1'17)",
            "sender_id": 101103,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "what is a type?",
            "submessages": [],
            "timestamp": 1497578544,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/a6a0ff0a4a9a86ae7bc4524453d439bd?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"lindsey@composition.al\" data-user-id=\"2170\">@Lindsey Kuper</span> Okay, that makes more sense- that types are as a sort of sieve to make sure that programs that go through them have some property that holds- but that property can be different based on how you set up the type system... I think one of the reasons I was confused is because it seems like the first historic instance of types that I know about at least is the typed lambda calculus and Church definitely wasn't trying to eliminate bugs, but he was (I think) trying to make a notation in which programs / proofs halted- so that makes much more sense in the context of what you were saying.</p>\n<p>I haven't read Types &amp; Programming Languages- I actually picked it up one of my first days at RC thinking I would read it but then got side tracked. I will definitely take a look at the first chapter, thanks for the link.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 112159053,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "annie.cherk@gmail.com",
            "sender_full_name": "Annie Cherkaev (she/they) (m4'18)",
            "sender_id": 9502,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "what is a type?",
            "submessages": [],
            "timestamp": 1497585911,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/a6a0ff0a4a9a86ae7bc4524453d439bd?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"vaibhavsagar@gmail.com\" data-user-id=\"100041\">@Vaibhav Sagar (F1'16)</span> That looks really neat, I will watch that video tomorrow :)</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 112159055,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "annie.cherk@gmail.com",
            "sender_full_name": "Annie Cherkaev (she/they) (m4'18)",
            "sender_id": 9502,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "what is a type?",
            "submessages": [],
            "timestamp": 1497585929,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/a6a0ff0a4a9a86ae7bc4524453d439bd?d=identicon&version=1",
            "client": "website",
            "content": "<p>What about the relationship between types of models of computation? Are these orthogonal concepts?</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 112159094,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "annie.cherk@gmail.com",
            "sender_full_name": "Annie Cherkaev (she/they) (m4'18)",
            "sender_id": 9502,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "what is a type?",
            "submessages": [],
            "timestamp": 1497585990,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4d074af6cc341ef51b25bb2f738cdb11?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"annie.cherk@gmail.com\" data-user-id=\"9502\">@Annie Cherkaev (S2'16)</span> Phil Wadler also has a great talk about the relationship between systems of logic and type systems: <a href=\"https://www.youtube.com/watch?v=IOiZatlZtGU\" target=\"_blank\" title=\"https://www.youtube.com/watch?v=IOiZatlZtGU\">https://www.youtube.com/watch?v=IOiZatlZtGU</a></p>\n<div class=\"youtube-video message_inline_image\"><a data-id=\"IOiZatlZtGU\" href=\"https://www.youtube.com/watch?v=IOiZatlZtGU\" target=\"_blank\" title=\"https://www.youtube.com/watch?v=IOiZatlZtGU\"><img src=\"https://i.ytimg.com/vi/IOiZatlZtGU/default.jpg\"></a></div>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 112173440,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "vaibhavsagar@gmail.com",
            "sender_full_name": "Vaibhav Sagar (he) (F1'16)",
            "sender_id": 100041,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "what is a type?",
            "submessages": [],
            "timestamp": 1497619791,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/a6a0ff0a4a9a86ae7bc4524453d439bd?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"vaibhavsagar@gmail.com\" data-user-id=\"100041\">@Vaibhav Sagar (F1'16)</span> That's the talk version of the paper I read yesterday :)</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 112177718,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "annie.cherk@gmail.com",
            "sender_full_name": "Annie Cherkaev (she/they) (m4'18)",
            "sender_id": 9502,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "what is a type?",
            "submessages": [],
            "timestamp": 1497627393,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4d074af6cc341ef51b25bb2f738cdb11?d=identicon&version=1",
            "client": "website",
            "content": "<p>Wow, I just noticed it in the first sentence of your question</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 112177943,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "vaibhavsagar@gmail.com",
            "sender_full_name": "Vaibhav Sagar (he) (F1'16)",
            "sender_id": 100041,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "what is a type?",
            "submessages": [],
            "timestamp": 1497627733,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4d074af6cc341ef51b25bb2f738cdb11?d=identicon&version=1",
            "client": "website",
            "content": "<p>A good overview of Haskell and what is has to offer C++ programmers: <a href=\"https://www.youtube.com/watch?v=lC5UWG5N8oY\" target=\"_blank\" title=\"https://www.youtube.com/watch?v=lC5UWG5N8oY\">https://www.youtube.com/watch?v=lC5UWG5N8oY</a></p>\n<div class=\"youtube-video message_inline_image\"><a data-id=\"lC5UWG5N8oY\" href=\"https://www.youtube.com/watch?v=lC5UWG5N8oY\" target=\"_blank\" title=\"https://www.youtube.com/watch?v=lC5UWG5N8oY\"><img src=\"https://i.ytimg.com/vi/lC5UWG5N8oY/default.jpg\"></a></div>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 112178239,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "vaibhavsagar@gmail.com",
            "sender_full_name": "Vaibhav Sagar (he) (F1'16)",
            "sender_id": 100041,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Haskell taketh away",
            "submessages": [],
            "timestamp": 1497628090,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4d074af6cc341ef51b25bb2f738cdb11?d=identicon&version=1",
            "client": "website",
            "content": "<p>Great presentation slides by Julie Moronuki of Haskell Book: <a href=\"https://docs.google.com/presentation/d/1_I5mYXivG5NbOHnICld_Xo41uOyAT57Yade5qfz2toQ/edit#slide=id.p\" target=\"_blank\" title=\"https://docs.google.com/presentation/d/1_I5mYXivG5NbOHnICld_Xo41uOyAT57Yade5qfz2toQ/edit#slide=id.p\">https://docs.google.com/presentation/d/1_I5mYXivG5NbOHnICld_Xo41uOyAT57Yade5qfz2toQ/edit#slide=id.p</a></p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 112178265,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "vaibhavsagar@gmail.com",
            "sender_full_name": "Vaibhav Sagar (he) (F1'16)",
            "sender_id": 100041,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Teaching Haskell For Understanding",
            "submessages": [],
            "timestamp": 1497628182,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4d074af6cc341ef51b25bb2f738cdb11?d=identicon&version=1",
            "client": "website",
            "content": "<p>Great slides by Neil Mitchell about contributing to projects, especially those in Haskell: <a href=\"http://ndmitchell.com/downloads/slides-drive-by_haskell_contributions-09_jun_2017.pdf\" target=\"_blank\" title=\"http://ndmitchell.com/downloads/slides-drive-by_haskell_contributions-09_jun_2017.pdf\">http://ndmitchell.com/downloads/slides-drive-by_haskell_contributions-09_jun_2017.pdf</a></p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 112178328,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "vaibhavsagar@gmail.com",
            "sender_full_name": "Vaibhav Sagar (he) (F1'16)",
            "sender_id": 100041,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Drive-by Haskell Contributions",
            "submessages": [],
            "timestamp": 1497628255,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/57ad6b289d2b066f6497c2c7a542f246?d=identicon&version=1",
            "client": "website",
            "content": "<blockquote>\n<p>it seems like the first historic instance of types that I know about at least is the typed lambda calculus and Church definitely wasn't trying to eliminate bugs, but he was (I think) trying to make a notation in which programs / proofs halted- so that makes much more sense in the context of what you were saying.</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-email=\"annie.cherk@gmail.com\" data-user-id=\"9502\">@Annie Cherkaev (S2'16)</span> Right, yeah.  When Church invented/discovered the lambda calculus, he wasn't trying to invent a programming language; he was trying to invent a logic.  He famously wrote, \"There may, indeed, be other applications of the system than its use as a logic\", which has turned out to be one of the great understatements of computer science.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 112184134,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "lindsey@composition.al",
            "sender_full_name": "Lindsey Kuper (she)",
            "sender_id": 2170,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "what is a type?",
            "submessages": [],
            "timestamp": 1497637903,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/c4e6637707ff62601f3dd21ec7626095?d=identicon&version=1",
            "client": "website",
            "content": "<p>Here's a fun, small haskell puzzle:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"c1\">-- Implement regexes, starting from:</span>\n<span class=\"kr\">type</span> <span class=\"kt\">Test</span> <span class=\"ow\">=</span> <span class=\"kt\">String</span> <span class=\"ow\">-&gt;</span> <span class=\"kt\">Bool</span>\n<span class=\"c1\">-- This is your type for regular expressions.</span>\n<span class=\"kr\">type</span> <span class=\"kt\">Re</span> <span class=\"ow\">=</span> <span class=\"kt\">Test</span> <span class=\"ow\">-&gt;</span> <span class=\"kt\">Test</span>\n<span class=\"c1\">-- This is your matcher function.</span>\n<span class=\"nf\">match</span> <span class=\"ow\">::</span> <span class=\"kt\">Re</span> <span class=\"ow\">-&gt;</span> <span class=\"kt\">Test</span>\n<span class=\"nf\">match</span> <span class=\"n\">a</span> <span class=\"ow\">=</span> <span class=\"n\">a</span> <span class=\"n\">null</span>\n<span class=\"c1\">-- Now implement the rest; e.g. concatenation AB,</span>\n<span class=\"c1\">-- alternation A|B, repetition A*, and so forth.</span>\n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 112245638,
            "is_me_message": false,
            "last_edit_timestamp": 1497785873,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "daekharel@gmail.com",
            "sender_full_name": "Michael 'rntz' Arntzenius (he) (S2'20)",
            "sender_id": 5866,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "a puzzle",
            "submessages": [],
            "timestamp": 1497785857,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/a7cfba3d94a1b727e5d91ed13aad1a25ff02ba79?x=x&version=2",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"sabelo@sabelo.io\" data-user-id=\"101085\">@Sabelo Mhlambi (S1'17)</span> I came across this article: <a href=\"http://www.flyingmachinestudios.com/programming/the-unofficial-guide-to-rich-hickeys-brain/\" target=\"_blank\" title=\"http://www.flyingmachinestudios.com/programming/the-unofficial-guide-to-rich-hickeys-brain/\">The Unofficial Guide to Rich Hickey's Brain</a>. If you're looking for more reasons why functional programming helps with managing the complexity of large systems, this is a good and entertaining read.</p>\n<p>I keep track of what I read and what I think about the articles and videos I read and watched on my <a href=\"https://github.com/stefanlesser/recurse/blob/master/resources.md\" target=\"_blank\" title=\"https://github.com/stefanlesser/recurse/blob/master/resources.md\">resource list on GitHub</a>.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 112258335,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "+1",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "sabelo@sabelo.io",
                        "full_name": "Sabelo Mhlambi (F1'17)",
                        "id": 101085
                    },
                    "user_id": 101085
                }
            ],
            "recipient_id": 22667,
            "sender_email": "business@stefan-lesser.com",
            "sender_full_name": "Stefan Lesser (S1'17)",
            "sender_id": 101083,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "hpfp daily checkins",
            "submessages": [],
            "timestamp": 1497816786,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/a7cfba3d94a1b727e5d91ed13aad1a25ff02ba79?x=x&version=2",
            "client": "website",
            "content": "<p>Here are a few articles to expand the horizon about what types can be used for:</p>\n<ul>\n<li><a href=\"https://pchiusano.github.io/2013-09-10/type-systems-and-ux-example.html\" target=\"_blank\" title=\"https://pchiusano.github.io/2013-09-10/type-systems-and-ux-example.html\">Why type systems matter for UX: an example</a></li>\n<li><a href=\"http://matthew.brecknell.net/post/hole-driven-haskell/\" target=\"_blank\" title=\"http://matthew.brecknell.net/post/hole-driven-haskell/\">Hole-driven Haskell</a></li>\n<li><a href=\"https://stevekrouse.com/types-are-shapes-d6af1e83192f\" target=\"_blank\" title=\"https://stevekrouse.com/types-are-shapes-d6af1e83192f\">Types are shapes\u200a\u2014\u200aa graphical programming exploration</a></li>\n</ul>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 112264283,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "business@stefan-lesser.com",
            "sender_full_name": "Stefan Lesser (S1'17)",
            "sender_id": 101083,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "what is a type?",
            "submessages": [],
            "timestamp": 1497831101,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/555d9fc8b9f9a919e308a050961eced4?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"business@stefan-lesser.com\" data-user-id=\"101083\">@Stefan Lesser (S1'17)</span> 'Hole-driven Haskell' was really great to see in action!</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 112288307,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "trent.gill@gmail.com",
            "sender_full_name": "Trent Gill (he) (SP2'17)",
            "sender_id": 100932,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "what is a type?",
            "submessages": [],
            "timestamp": 1497885261,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4d074af6cc341ef51b25bb2f738cdb11?d=identicon&version=1",
            "client": "website",
            "content": "<p>That feature has since been incorporated into GHC as typed holes <img alt=\":smiley:\" class=\"emoji\" src=\"/static/generated/emoji/images/emoji/unicode/1f603.png\" title=\":smiley:\"></p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 112306547,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "vaibhavsagar@gmail.com",
            "sender_full_name": "Vaibhav Sagar (he) (F1'16)",
            "sender_id": 100041,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "what is a type?",
            "submessages": [],
            "timestamp": 1497916575,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/a6a0ff0a4a9a86ae7bc4524453d439bd?d=identicon&version=1",
            "client": "website",
            "content": "<p>I'm writing a parser in haskell, and many paths lead to failure! I'm trying to figure out how to handle error handling, and am soliciting opinions!</p>\n<p>I know <code>either</code> and <code>maybe</code> are options, but a little bit of google searching pulls up that using the <a href=\"https://hackage.haskell.org/package/mtl-2.2.1/docs/Control-Monad-Except.html\" target=\"_blank\" title=\"https://hackage.haskell.org/package/mtl-2.2.1/docs/Control-Monad-Except.html\">Except Monad</a> is another, perhaps more general, option. I don't have an intuition as to whether using the except monad will make my code cleaner, or if it'll be overkill. Any opinions on whether (or when) to use either vs the except monad (vs other options??)</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 112499909,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "annie.cherk@gmail.com",
            "sender_full_name": "Annie Cherkaev (she/they) (m4'18)",
            "sender_id": 9502,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "error handling",
            "submessages": [],
            "timestamp": 1498240786,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/6485c74622306264ff53449c6f0ca540?d=identicon&version=1",
            "client": "website",
            "content": "<p>What style of parser are you writing? If you already have a monad in the mix, I'd probably look at how to make it a MonadFail instance. I think most of the monadic parser combinator libraries would do this. If I was just writing plain recursive-descent parsing functions, I'd probably make them return an Either and write most of my functions in applicative style.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 112500384,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "iain@mccoy.id.au",
            "sender_full_name": "Iain McCoy (he) (SP2'17)",
            "sender_id": 100806,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "error handling",
            "submessages": [],
            "timestamp": 1498241547,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/a6a0ff0a4a9a86ae7bc4524453d439bd?d=identicon&version=1",
            "client": "website",
            "content": "<p>hmm cool, I hadn't heard of MonadFail. </p>\n<p>I'm currently not using any monads, but I'm working on a \"first iteration\" of this parser and I suspect the front end spec will be more complicated to parse in a future iteration, so I'm not currently using parsec but I might at some point switch to using it.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 112501209,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "annie.cherk@gmail.com",
            "sender_full_name": "Annie Cherkaev (she/they) (m4'18)",
            "sender_id": 9502,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "error handling",
            "submessages": [],
            "timestamp": 1498242936,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/a6a0ff0a4a9a86ae7bc4524453d439bd?d=identicon&version=1",
            "client": "website",
            "content": "<p>so it sounds like Either is the thing to use if there are no other monads in the mix</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 112501216,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "annie.cherk@gmail.com",
            "sender_full_name": "Annie Cherkaev (she/they) (m4'18)",
            "sender_id": 9502,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "error handling",
            "submessages": [],
            "timestamp": 1498242960,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/a6a0ff0a4a9a86ae7bc4524453d439bd?d=identicon&version=1",
            "client": "website",
            "content": "<p>thanks <span class=\"user-mention\" data-user-email=\"iain@mccoy.id.au\" data-user-id=\"100806\">@Iain McCoy (SP2'17)</span></p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 112501263,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "annie.cherk@gmail.com",
            "sender_full_name": "Annie Cherkaev (she/they) (m4'18)",
            "sender_id": 9502,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "error handling",
            "submessages": [],
            "timestamp": 1498242999,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/cbcb9589503e23026f6e55769709dc6a43465431?x=x&version=2",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"*\" data-user-id=\"*\">@everyone</span>  are we having the haskell meetup today?</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 112504492,
            "is_me_message": false,
            "last_edit_timestamp": 1498248325,
            "reactions": [
                {
                    "emoji_code": "2665",
                    "emoji_name": "hearts",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "dclau04@gmail.com",
                        "full_name": "Daniel Lau (he) (SP2'17)",
                        "id": 100522
                    },
                    "user_id": 100522
                }
            ],
            "recipient_id": 22667,
            "sender_email": "alokbeniwal@gmail.com",
            "sender_full_name": "Alok Singh (S1'17)",
            "sender_id": 101076,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "meetup",
            "submessages": [],
            "timestamp": 1498248298,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/555d9fc8b9f9a919e308a050961eced4?d=identicon&version=1",
            "client": "website",
            "content": "<p>i'm working on a forth interpreter &amp; after too many hours staring at monad tutorials, i took <span class=\"user-mention\" data-user-email=\"veit@veitheller.de\" data-user-id=\"101103\">@Veit Heller (S1'17)</span> 's advice and am trying to do the implementation by just passing around state instead. i've got some functional code for modifying the state blob, but feels like it's overly verbose and difficult to read:</p>\n<div class=\"codehilite\"><pre><span></span>fBL :: FState -&gt; FState\nfBL s = s { datastack = (FStr &quot;x&quot;):(datastack s) }\n</pre></div>\n\n\n<p>this function just attaches the character 'x' to the front of the datastack list.<br>\nfrom what i understand, when i use the word 'datastack' this is a function that returns only that named part of the product data type. is that true for 'datastack' on both sides of the '='? it doesn't 'feel' right, and much more imperative than my haskell before i started wrapping types inside of types haha...</p>\n<p>my data structure FState looks like this:</p>\n<div class=\"codehilite\"><pre><span></span>data FState =\n    FState { datastack :: FStack\n           , input_string :: FInput\n           , output_string :: FOutput }\n           deriving (Show)\n</pre></div>\n\n\n<p>nb: <code>FStack</code> is a list of <code>FStackItem</code>s which are either <code>FNum :: Integer</code> or <code>FStr :: String</code><br>\nany thoughts? advice?</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 112506125,
            "is_me_message": false,
            "last_edit_timestamp": 1498251215,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "trent.gill@gmail.com",
            "sender_full_name": "Trent Gill (he) (SP2'17)",
            "sender_id": 100932,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "record syntax",
            "submessages": [],
            "timestamp": 1498251149,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/c52df4d54166ed7db0141bdb21c7935e502d6ddc?x=x&version=1",
            "client": "website",
            "content": "<p>One little thing that ought to help: lots of words only affect the stack, so you could define a higher-order function like <code>stack_op f</code> which takes a function <code>f :: FStack -&gt; FStack</code> and returns an <code>FState</code> transformer. Then you could write</p>\n<div class=\"codehilite\"><pre><span></span>fBL = stack_op (FStr &quot;X&quot; :)\n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 112515630,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f6eb",
                    "emoji_name": "airplane_departure",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "outofthemadness@gmail.com",
                        "full_name": "James A. Keene (he) (m2'18)",
                        "id": 887
                    },
                    "user_id": 887
                },
                {
                    "emoji_code": "1f6eb",
                    "emoji_name": "airplane_departure",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "trent.gill@gmail.com",
                        "full_name": "Trent Gill (he) (SP2'17)",
                        "id": 100932
                    },
                    "user_id": 100932
                }
            ],
            "recipient_id": 22667,
            "sender_email": "darius@wry.me",
            "sender_full_name": "Darius Bacon (W1'16)",
            "sender_id": 902,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "record syntax",
            "submessages": [],
            "timestamp": 1498270454,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/40e1eb4186c76edfecca264f74e088ed0e62af25?x=x&version=2",
            "client": "website",
            "content": "<p><code>datastack</code> works as a getter as well as a setter. The function <code>datastack</code> pulls a part out of the record, and using it as a setter just updates the part of the record and gives you a new record.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 112516817,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "jaseemabid@gmail.com",
            "sender_full_name": "Jaseem Abid (he) (S1'17)",
            "sender_id": 101128,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "record syntax",
            "submessages": [],
            "timestamp": 1498273299,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4d074af6cc341ef51b25bb2f738cdb11?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"annie.cherk@gmail.com\" data-user-id=\"9502\">@Annie Cherkaev (S2'16)</span> if you're planning to have a validation stage you could also look at the <a href=\"https://ro-che.info/articles/2015-05-02-smarter-validation\" target=\"_blank\" title=\"https://ro-che.info/articles/2015-05-02-smarter-validation\">Validation applicative</a></p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 112516855,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "vaibhavsagar@gmail.com",
            "sender_full_name": "Vaibhav Sagar (he) (F1'16)",
            "sender_id": 100041,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "error handling",
            "submessages": [],
            "timestamp": 1498273324,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/40e1eb4186c76edfecca264f74e088ed0e62af25?x=x&version=2",
            "client": "website",
            "content": "<p>If you are just starting out and is not planning to handle the error, just use <code>error</code> function. <br>\nEither makes it one step better, and you can handle errors nicely. <br>\nIf you need to do IO or state in the mix, a <code>State + Except + IO</code>transformer will be a nice option and that is what I'm doing in my compiler now. </p>\n<p>I define a very generic monad like this to begin with. The state as well as the return type is parameterised. </p>\n<div class=\"codehilite\"><pre><span></span><span class=\"c1\">-- Olifant Monad</span>\n<span class=\"c1\">--</span>\n<span class=\"c1\">-- Olifant monad is a State Error IO transformer with Error type fixed to Error.</span>\n<span class=\"kr\">newtype</span> <span class=\"kt\">Olifant</span> <span class=\"n\">s</span> <span class=\"n\">a</span> <span class=\"ow\">=</span> <span class=\"kt\">Olifant</span>\n    <span class=\"p\">{</span> <span class=\"n\">runM</span> <span class=\"ow\">::</span> <span class=\"kt\">StateT</span> <span class=\"n\">s</span> <span class=\"p\">(</span><span class=\"kt\">ExceptT</span> <span class=\"kt\">Error</span> <span class=\"kt\">Identity</span><span class=\"p\">)</span> <span class=\"n\">a</span>\n    <span class=\"p\">}</span> <span class=\"kr\">deriving</span> <span class=\"p\">(</span><span class=\"kt\">Functor</span><span class=\"p\">,</span> <span class=\"kt\">Applicative</span><span class=\"p\">,</span> <span class=\"kt\">Monad</span><span class=\"p\">,</span> <span class=\"kt\">MonadError</span> <span class=\"kt\">Error</span><span class=\"p\">,</span>  <span class=\"kt\">MonadState</span> <span class=\"n\">s</span><span class=\"p\">)</span>\n</pre></div>\n\n\n<p>I fix some of those to get more concrete values. For example, my code generator's state is called GenState.</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"c1\">-- | Codegen monad is Olifant monad with state specialized to `GenState`</span>\n<span class=\"c1\">--</span>\n<span class=\"c1\">-- Errors are not expected to be recoverable. A valid type safe `Progn`</span>\n<span class=\"c1\">-- shouldn&#39;t raise an error and there is nothing much to do if the input is</span>\n<span class=\"c1\">-- wrong.</span>\n<span class=\"kr\">type</span> <span class=\"kt\">Codegen</span> <span class=\"n\">a</span> <span class=\"ow\">=</span> <span class=\"kt\">Olifant</span> <span class=\"kt\">GenState</span> <span class=\"n\">a</span>\n</pre></div>\n\n\n<p>My parser doesnt need any state yet, so its set to unit. </p>\n<div class=\"codehilite\"><pre><span></span><span class=\"c1\">-- Compiler is an Olifant monad with no state</span>\n<span class=\"kr\">type</span> <span class=\"kt\">Compiler</span> <span class=\"ow\">=</span> <span class=\"kt\">Olifant</span> <span class=\"nb\">()</span>\n</pre></div>\n\n\n<p>I get a consistent interface across my code now. This might not be the best approach, but this works for me.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 112517323,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "jaseemabid@gmail.com",
            "sender_full_name": "Jaseem Abid (he) (S1'17)",
            "sender_id": 101128,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "error handling",
            "submessages": [],
            "timestamp": 1498274453,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4d074af6cc341ef51b25bb2f738cdb11?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"jaseemabid@gmail.com\" data-user-id=\"101128\">@Jaseem Abid (S1'17)</span>: tangential, but why do you have <code>ExceptT Error Identity</code> instead of <code>Except Error</code>?</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 112517447,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "vaibhavsagar@gmail.com",
            "sender_full_name": "Vaibhav Sagar (he) (F1'16)",
            "sender_id": 100041,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "error handling",
            "submessages": [],
            "timestamp": 1498274736,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/40e1eb4186c76edfecca264f74e088ed0e62af25?x=x&version=2",
            "client": "website",
            "content": "<p>TIL! I tried that in the past and gave me incomprehensible  type errors and since then I've been using this form. Thank you. <code>Except Error</code> compiles and is definitely simpler.</p>\n<p>I think i mixed up Error from mtl and somewhere else.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 112517983,
            "is_me_message": false,
            "last_edit_timestamp": 1498275888,
            "reactions": [
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "+1",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "vaibhavsagar@gmail.com",
                        "full_name": "Vaibhav Sagar (he) (F1'16)",
                        "id": 100041
                    },
                    "user_id": 100041
                }
            ],
            "recipient_id": 22667,
            "sender_email": "jaseemabid@gmail.com",
            "sender_full_name": "Jaseem Abid (he) (S1'17)",
            "sender_id": 101128,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "error handling",
            "submessages": [],
            "timestamp": 1498275843,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/36e38f07213a4459a526a3334d690aa09a75b04d?x=x&version=3",
            "client": "website",
            "content": "<p>i was wondering why in haskell and purescript repls (i'm using stack ghci and pulp psci) there isn't a native way to view a function's <em>definition</em> or source (or documentation) (cf. :t or :type) ?  It looks like hoogle --info &lt;someFunction&gt; should do it, after installing the hoogle database.  Is it not in  base ghci like :t is,  bc it's difficult to introspect source? Why is that? (And if there's anything for purescript?)</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 112519306,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "dclau04@gmail.com",
            "sender_full_name": "Daniel Lau (he) (SP2'17)",
            "sender_id": 100522,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "viewing definitions in repl",
            "submessages": [],
            "timestamp": 1498278956,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4d074af6cc341ef51b25bb2f738cdb11?d=identicon&version=1",
            "client": "website",
            "content": "<p>I always assumed that it was too difficult to include, but I never thought to ask. This is a great question.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 112519387,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "vaibhavsagar@gmail.com",
            "sender_full_name": "Vaibhav Sagar (he) (F1'16)",
            "sender_id": 100041,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "viewing definitions in repl",
            "submessages": [],
            "timestamp": 1498279086,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/a6a0ff0a4a9a86ae7bc4524453d439bd?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"vaibhavsagar@gmail.com\" data-user-id=\"100041\">@Vaibhav Sagar (F1'16)</span> oooh the validation applicative is really cool! That article was also so well motivated. That might be what I'll eventually want for exactly the reason stated in that article- if someone passes in a malformed file they might as well know all the places its malformed. Thanks for the link!</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 112542102,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "annie.cherk@gmail.com",
            "sender_full_name": "Annie Cherkaev (she/they) (m4'18)",
            "sender_id": 9502,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "error handling",
            "submessages": [],
            "timestamp": 1498334971,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/a6a0ff0a4a9a86ae7bc4524453d439bd?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"jaseemabid@gmail.com\" data-user-id=\"101128\">@Jaseem Abid (S1'17)</span> Oh interesting, I hadn't thought that I could use something like the same monad across the entire compiler and just set the state to be empty for the parts that don't need state. Interesting.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 112542189,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "annie.cherk@gmail.com",
            "sender_full_name": "Annie Cherkaev (she/they) (m4'18)",
            "sender_id": 9502,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "error handling",
            "submessages": [],
            "timestamp": 1498335137,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/40e1eb4186c76edfecca264f74e088ed0e62af25?x=x&version=2",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"annie.cherk@gmail.com\" data-user-id=\"9502\">@Annie Cherkaev (S2'16)</span> Me neither. I found it hard to compose different parts of my code and eventually ended up with this solution. Its still a pain when state is not the same but I don't know anything better as of now. Also I'm happy with just one big error type.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 112542449,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "jaseemabid@gmail.com",
            "sender_full_name": "Jaseem Abid (he) (S1'17)",
            "sender_id": 101128,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "error handling",
            "submessages": [],
            "timestamp": 1498335814,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/40e1eb4186c76edfecca264f74e088ed0e62af25?x=x&version=2",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"annie.cherk@gmail.com\" data-user-id=\"9502\">@Annie Cherkaev (S2'16)</span> Also note that ExceptT doesn't mean exceptions. Its a parameterized type and you can use good old Either. See the type definition at <a href=\"https://hackage.haskell.org/package/mtl-2.2.1/docs/Control-Monad-Except.html\" target=\"_blank\" title=\"https://hackage.haskell.org/package/mtl-2.2.1/docs/Control-Monad-Except.html\">https://hackage.haskell.org/package/mtl-2.2.1/docs/Control-Monad-Except.html</a></p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 112542598,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "jaseemabid@gmail.com",
            "sender_full_name": "Jaseem Abid (he) (S1'17)",
            "sender_id": 101128,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "error handling",
            "submessages": [],
            "timestamp": 1498336104,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/40e1eb4186c76edfecca264f74e088ed0e62af25?x=x&version=2",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"vaibhavsagar@gmail.com\" data-user-id=\"100041\">@Vaibhav Sagar (F1'16)</span> Found this in the same page. <code>type Except e = ExceptT e Identity</code> I don't know when that type alias was added. Maybe I was using transformers instead of mtl.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 112542649,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "jaseemabid@gmail.com",
            "sender_full_name": "Jaseem Abid (he) (S1'17)",
            "sender_id": 101128,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "error handling",
            "submessages": [],
            "timestamp": 1498336218,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4d074af6cc341ef51b25bb2f738cdb11?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"jaseemabid@gmail.com\" data-user-id=\"101128\">@Jaseem Abid (S1'17)</span> <a href=\"https://hackage.haskell.org/package/transformers-0.5.2.0/docs/Control-Monad-Trans-Except.html#t:Except\" target=\"_blank\" title=\"https://hackage.haskell.org/package/transformers-0.5.2.0/docs/Control-Monad-Trans-Except.html#t:Except\">https://hackage.haskell.org/package/transformers-0.5.2.0/docs/Control-Monad-Trans-Except.html#t:Except</a></p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 112552179,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "vaibhavsagar@gmail.com",
            "sender_full_name": "Vaibhav Sagar (he) (F1'16)",
            "sender_id": 100041,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "error handling",
            "submessages": [],
            "timestamp": 1498359123,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/40e1eb4186c76edfecca264f74e088ed0e62af25?x=x&version=2",
            "client": "website",
            "content": "<p>Aha!  You are right. I cant remember where I messed up then :D I fixed my code. <a href=\"https://github.com/jaseemabid/Olifant/blob/master/src/Olifant/Core.hs#L85\" target=\"_blank\" title=\"https://github.com/jaseemabid/Olifant/blob/master/src/Olifant/Core.hs#L85\">https://github.com/jaseemabid/Olifant/blob/master/src/Olifant/Core.hs#L85</a></p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 112552198,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "jaseemabid@gmail.com",
            "sender_full_name": "Jaseem Abid (he) (S1'17)",
            "sender_id": 101128,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "error handling",
            "submessages": [],
            "timestamp": 1498359195,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4d074af6cc341ef51b25bb2f738cdb11?d=identicon&version=1",
            "client": "website",
            "content": "<p>Cool, glad I could help <img alt=\":smile:\" class=\"emoji\" src=\"/static/generated/emoji/images/emoji/unicode/1f604.png\" title=\":smile:\"></p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 112552199,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "vaibhavsagar@gmail.com",
            "sender_full_name": "Vaibhav Sagar (he) (F1'16)",
            "sender_id": 100041,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "error handling",
            "submessages": [],
            "timestamp": 1498359211,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/6485c74622306264ff53449c6f0ca540?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"trent.gill@gmail.com\" data-user-id=\"100932\">@Trent Gill (SP2'17)</span>  I just realised I forgot to reply to this, oops.</p>\n<p>Haskell's record syntax is pretty wacky, sadly. When you define a record like FState, you get a few things: a data constructor <code>FState :: FStack -&gt; FInput :: FOutput -&gt; FState</code>, a bunch of accessors <code>datastack :: FState -&gt; FStack</code>, <code>input_string :: FState -&gt; FInput</code> and so on, and a way of making new records based on old records <code>some_fstate { datastack = some_fstack }</code>.</p>\n<p>The important thing here is that the string <code>datastack</code> when it appears in the way of making new records is a completely different thing to the string <code>datastack</code> when you use it to refer to the accessor.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 112620745,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "iain@mccoy.id.au",
            "sender_full_name": "Iain McCoy (he) (SP2'17)",
            "sender_id": 100806,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "record syntax",
            "submessages": [],
            "timestamp": 1498509202,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/a7cfba3d94a1b727e5d91ed13aad1a25ff02ba79?x=x&version=2",
            "client": "website",
            "content": "<p>I've been reading another book, this time about <a href=\"http://www.purescript.org\" target=\"_blank\" title=\"http://www.purescript.org\">PureScript</a>. Turns out PureScript is <em>very</em> close to Haskell, but compiles to JavaScript, and therefore runs in the terminal (with Node.js), but also in the web browser. It takes the learnings from Haskell and is a clean re-implementation of most concepts. It feels a lot lighter. There are some <a href=\"https://github.com/purescript/documentation/blob/master/language/Differences-from-Haskell.md\" target=\"_blank\" title=\"https://github.com/purescript/documentation/blob/master/language/Differences-from-Haskell.md\">differences to Haskell</a>, but it seems like you will still be able to program in Haskell after learning PureScript. Why not learn two languages in one!</p>\n<p>If you didn't like the Haskell book, because you felt it was too verbose and exhaustive, you might like the <a href=\"https://leanpub.com/purescript/\" target=\"_blank\" title=\"https://leanpub.com/purescript/\">PureScript book</a>. It teaches the same concepts, is much more concise, practical, and also has exercises. If you try it, let me know what you think!</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 112697681,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "business@stefan-lesser.com",
            "sender_full_name": "Stefan Lesser (S1'17)",
            "sender_id": 101083,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "hpfp daily checkins",
            "submessages": [],
            "timestamp": 1498665787,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p>Yeah, PureScript is cool. If you'd like to see a Haskelly version of PureScript's <code>Eff</code> monad, check out <a href=\"http://reasonablypolymorphic.com/dont-eff-it-up/#/title\" target=\"_blank\" title=\"http://reasonablypolymorphic.com/dont-eff-it-up/#/title\">http://reasonablypolymorphic.com/dont-eff-it-up/#/title</a>, <a href=\"https://www.youtube.com/watch?v=gUPuWHAt6SA\" target=\"_blank\" title=\"https://www.youtube.com/watch?v=gUPuWHAt6SA\">https://www.youtube.com/watch?v=gUPuWHAt6SA</a>, <a href=\"https://github.com/IxpertaSolutions/freer-effects\" target=\"_blank\" title=\"https://github.com/IxpertaSolutions/freer-effects\">https://github.com/IxpertaSolutions/freer-effects</a>.</p>\n<div class=\"youtube-video message_inline_image\"><a data-id=\"gUPuWHAt6SA\" href=\"https://www.youtube.com/watch?v=gUPuWHAt6SA\" target=\"_blank\" title=\"https://www.youtube.com/watch?v=gUPuWHAt6SA\"><img src=\"https://i.ytimg.com/vi/gUPuWHAt6SA/default.jpg\"></a></div>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 112699639,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "hpfp daily checkins",
            "submessages": [],
            "timestamp": 1498668945,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/a6a0ff0a4a9a86ae7bc4524453d439bd?d=identicon&version=1",
            "client": "website",
            "content": "<p>Does anyone know if there's a way to install stack (or ghc) locally? (ie, without having sudo privileges) I did a bit of googling around but couldn't find a way to do it- but am also not convinced it's impossible.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 112710107,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "annie.cherk@gmail.com",
            "sender_full_name": "Annie Cherkaev (she/they) (m4'18)",
            "sender_id": 9502,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "local install?",
            "submessages": [],
            "timestamp": 1498685817,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/a6a0ff0a4a9a86ae7bc4524453d439bd?d=identicon&version=1",
            "client": "website",
            "content": "<p>nvm, I <a href=\"https://stackoverflow.com/questions/8084832/ghc-install-without-root\" target=\"_blank\" title=\"https://stackoverflow.com/questions/8084832/ghc-install-without-root\">found a stack overflow post about it</a>. Should have searched slightly longer, sorry!</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 112710169,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "annie.cherk@gmail.com",
            "sender_full_name": "Annie Cherkaev (she/they) (m4'18)",
            "sender_id": 9502,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "local install?",
            "submessages": [],
            "timestamp": 1498685938,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4d074af6cc341ef51b25bb2f738cdb11?d=identicon&version=1",
            "client": "website",
            "content": "<p>I thought Stack did this by default with <code>--install-ghc</code>, is that not the case?</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 112716260,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "vaibhavsagar@gmail.com",
            "sender_full_name": "Vaibhav Sagar (he) (F1'16)",
            "sender_id": 100041,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "local install?",
            "submessages": [],
            "timestamp": 1498696784,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/a6a0ff0a4a9a86ae7bc4524453d439bd?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"vaibhavsagar@gmail.com\" data-user-id=\"100041\">@Vaibhav Sagar (F1'16)</span> If I understand what you're saying, I agree, stack installs ghc locally based on the config file- what I was hoping for was to install <em>stack</em> locally, so that I could compile haskell on a machine which doesn't have stack/ghc installed, and on which I do not have root permissions... but I think the way to do this is to build from source which is <em>way</em> more effort than I want to put in. I was just hoping to avoid asking someone with root permissions to install it for me, but I think that's going to be way easier than building from source :P</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 112718772,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "annie.cherk@gmail.com",
            "sender_full_name": "Annie Cherkaev (she/they) (m4'18)",
            "sender_id": 9502,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "local install?",
            "submessages": [],
            "timestamp": 1498702347,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4d074af6cc341ef51b25bb2f738cdb11?d=identicon&version=1",
            "client": "website",
            "content": "<p>Stack provides static binaries too! <a href=\"https://docs.haskellstack.org/en/stable/install_and_upgrade/#linux\" target=\"_blank\" title=\"https://docs.haskellstack.org/en/stable/install_and_upgrade/#linux\">https://docs.haskellstack.org/en/stable/install_and_upgrade/#linux</a></p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 112718992,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "vaibhavsagar@gmail.com",
            "sender_full_name": "Vaibhav Sagar (he) (F1'16)",
            "sender_id": 100041,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "local install?",
            "submessages": [],
            "timestamp": 1498702832,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4d074af6cc341ef51b25bb2f738cdb11?d=identicon&version=1",
            "client": "website",
            "content": "<p>but it looks like those require certain dependencies to be available... hmm.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 112719158,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "vaibhavsagar@gmail.com",
            "sender_full_name": "Vaibhav Sagar (he) (F1'16)",
            "sender_id": 100041,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "local install?",
            "submessages": [],
            "timestamp": 1498703199,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/a6a0ff0a4a9a86ae7bc4524453d439bd?d=identicon&version=1",
            "client": "website",
            "content": "<p>I had actually found that link earlier! I tried the command, and the wget succeeded but the \"sh\" that it pipes to executes the installer- which requires root privileges. I was hoping it would just work :P</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 112720782,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "annie.cherk@gmail.com",
            "sender_full_name": "Annie Cherkaev (she/they) (m4'18)",
            "sender_id": 9502,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "local install?",
            "submessages": [],
            "timestamp": 1498707095,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4d074af6cc341ef51b25bb2f738cdb11?d=identicon&version=1",
            "client": "website",
            "content": "<p>Did you try this one: <a href=\"https://www.stackage.org/stack/linux-x86_64-static\" target=\"_blank\" title=\"https://www.stackage.org/stack/linux-x86_64-static\">https://www.stackage.org/stack/linux-x86_64-static</a>? It's an archive containing a static binary.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 112725382,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "vaibhavsagar@gmail.com",
            "sender_full_name": "Vaibhav Sagar (he) (F1'16)",
            "sender_id": 100041,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "local install?",
            "submessages": [],
            "timestamp": 1498717759,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/919b4af386b43c5ca84d8e664790a7d906336c0d?x=x&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"annie.cherk@gmail.com\" data-user-id=\"9502\">@Annie Cherkaev (S2'16)</span> , plug for nix package manager <img alt=\":smile:\" class=\"emoji\" src=\"/static/generated/emoji/images/emoji/unicode/1f604.png\" title=\":smile:\"> <span class=\"user-mention\" data-user-email=\"vaibhavsagar@gmail.com\" data-user-id=\"100041\">@Vaibhav Sagar (F1'16)</span> , think you sent me links specifically on using nix for haskell dev, unless I'm mistaken.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 112741398,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "botwhytho@gmail.com",
            "sender_full_name": "Alberto Torres (SP1'17)",
            "sender_id": 100545,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "local install?",
            "submessages": [],
            "timestamp": 1498751693,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4d074af6cc341ef51b25bb2f738cdb11?d=identicon&version=1",
            "client": "website",
            "content": "<p>Nix is great, but that installer requires root privileges too <img alt=\":slightly_frowning_face:\" class=\"emoji\" src=\"/static/generated/emoji/images/emoji/unicode/1f641.png\" title=\":slightly_frowning_face:\"></p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 112761160,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "vaibhavsagar@gmail.com",
            "sender_full_name": "Vaibhav Sagar (he) (F1'16)",
            "sender_id": 100041,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "local install?",
            "submessages": [],
            "timestamp": 1498779780,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/919b4af386b43c5ca84d8e664790a7d906336c0d?x=x&version=1",
            "client": "website",
            "content": "<p>yeah, guess to create /nix. but after that....chicken and egg..guess you can change the default directory and then you wouldn't need root?, like /nix -&gt; ~/somefolder/inYourHome. But I know that breaks any binary caching of packages so you will be building EVERYTHING from source. Don't recall if then you wouldn't need root at all for the installer, don't recall.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 112787892,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "botwhytho@gmail.com",
            "sender_full_name": "Alberto Torres (SP1'17)",
            "sender_id": 100545,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "local install?",
            "submessages": [],
            "timestamp": 1498836528,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4d074af6cc341ef51b25bb2f738cdb11?d=identicon&version=1",
            "client": "website",
            "content": "<p>Also Nix is a gigantic can of worms. IIRC I recommended it to you because you were trying to do something (get Xen up and running) that is incredibly easy in NixOS but that's not always the case. As much as I like Nix, I'm hesitant to provide a solution to a packaging problem that is \"go off and learn a new programming language and a new package manager, and relearn software packaging so you can get a local Haskell install\". That reminds me uncomfortably of my earliest Haskell evangelism attempts which went extremely poorly.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 112788107,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "vaibhavsagar@gmail.com",
            "sender_full_name": "Vaibhav Sagar (he) (F1'16)",
            "sender_id": 100041,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "local install?",
            "submessages": [],
            "timestamp": 1498836929,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/919b4af386b43c5ca84d8e664790a7d906336c0d?x=x&version=1",
            "client": "website",
            "content": "<p>being a fanboy, and not that pragmatic <img alt=\":smile_cat:\" class=\"emoji\" src=\"/static/generated/emoji/images/emoji/unicode/1f638.png\" title=\":smile_cat:\"> I do agree. Not going to claim backseat driving on myself, because maybe just letting somebody know something exists x many people = a new user at some point ?</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 112788189,
            "is_me_message": false,
            "last_edit_timestamp": 1498837098,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "botwhytho@gmail.com",
            "sender_full_name": "Alberto Torres (SP1'17)",
            "sender_id": 100545,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "local install?",
            "submessages": [],
            "timestamp": 1498837082,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/6485c74622306264ff53449c6f0ca540?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"jaseemabid@gmail.com\" data-user-id=\"101128\">@Jaseem Abid (S1'17)</span> possibly relevant to your interests about how far to go to make a haskelly api out of LLVM: <a href=\"https://www.youtube.com/watch?v=H_z4NKvxf1U\" target=\"_blank\" title=\"https://www.youtube.com/watch?v=H_z4NKvxf1U\">https://www.youtube.com/watch?v=H_z4NKvxf1U</a></p>\n<div class=\"youtube-video message_inline_image\"><a data-id=\"H_z4NKvxf1U\" href=\"https://www.youtube.com/watch?v=H_z4NKvxf1U\" target=\"_blank\" title=\"https://www.youtube.com/watch?v=H_z4NKvxf1U\"><img src=\"https://i.ytimg.com/vi/H_z4NKvxf1U/default.jpg\"></a></div>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 112790291,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "iain@mccoy.id.au",
            "sender_full_name": "Iain McCoy (he) (SP2'17)",
            "sender_id": 100806,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "A Case Study in Turning a Stateful into a Functional API",
            "submessages": [],
            "timestamp": 1498840643,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/a6a0ff0a4a9a86ae7bc4524453d439bd?d=identicon&version=1",
            "client": "website",
            "content": "<p>^ Confirming that the static binary works without root permissions <img alt=\":fireworks:\" class=\"emoji\" src=\"/static/generated/emoji/images/emoji/unicode/1f386.png\" title=\":fireworks:\"></p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 112791737,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "annie.cherk@gmail.com",
            "sender_full_name": "Annie Cherkaev (she/they) (m4'18)",
            "sender_id": 9502,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "local install?",
            "submessages": [],
            "timestamp": 1498843397,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/40e1eb4186c76edfecca264f74e088ed0e62af25?x=x&version=2",
            "client": "website",
            "content": "<p>Thanks. Will watch</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 112802300,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "jaseemabid@gmail.com",
            "sender_full_name": "Jaseem Abid (he) (S1'17)",
            "sender_id": 101128,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "A Case Study in Turning a Stateful into a Functional API",
            "submessages": [],
            "timestamp": 1498861785,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/a5990ea1928ad47ec4fc3b7998607178?d=identicon&version=1",
            "client": "website",
            "content": "<p>midway through trying to implement gradient descent ols in haskell: <br>\n<code>innerTrainOLS :: [[Double]] -&gt; [Double] -&gt; [Double] -&gt; Double -&gt; Double -&gt; Double -&gt; Double -&gt; [Double]</code> </p>\n<p>that can't be a good idea...</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 113189117,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "paul.gowder@gmail.com",
            "sender_full_name": "Paul Gowder (S2'17)",
            "sender_id": 101322,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "my code, it is so smelly.",
            "submessages": [],
            "timestamp": 1499725105,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/40e1eb4186c76edfecca264f74e088ed0e62af25?x=x&version=2",
            "client": "website",
            "content": "<p>Can you use a descriptive type here? A record maybe?</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 113189439,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "jaseemabid@gmail.com",
            "sender_full_name": "Jaseem Abid (he) (S1'17)",
            "sender_id": 101128,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "my code, it is so smelly.",
            "submessages": [],
            "timestamp": 1499725628,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/a5990ea1928ad47ec4fc3b7998607178?d=identicon&version=1",
            "client": "website",
            "content": "<p>heh, as soon as I learn how records work, maybe I will.  Right now, I'm just waiting for all the errors to go away, then I'll assume that it's right by the First Rule of Haskell.  ;-)</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 113189490,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "paul.gowder@gmail.com",
            "sender_full_name": "Paul Gowder (S2'17)",
            "sender_id": 101322,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "my code, it is so smelly.",
            "submessages": [],
            "timestamp": 1499725698,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/3514240cecd66b31ef3b3a4a7ea235cc?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"paul.gowder@gmail.com\" data-user-id=\"101322\">@Paul Gowder (S2'17)</span> when i implemented gradient descent and line search in haskell, it helped me to use a type synonym to distinguish doubles, e.g. <code>type Time = Double</code> (for step size)</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 113198065,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "katherine.ye@gmail.com",
            "sender_full_name": "Katherine Ye (S'13)",
            "sender_id": 2117,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "my code, it is so smelly.",
            "submessages": [],
            "timestamp": 1499744357,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/a5990ea1928ad47ec4fc3b7998607178?d=identicon&version=1",
            "client": "website",
            "content": "<p>oooh yeah.  that makes sense.  thanks <span class=\"user-mention\" data-user-email=\"katherine.ye@gmail.com\" data-user-id=\"2117\">@Katherine Ye (S'13)</span> --- as you can probably tell I'm really really new to haskell!</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 113213927,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1100",
                    "emoji_name": "lambda",
                    "reaction_type": "realm_emoji",
                    "user": {
                        "email": "kal_ali@hotmail.com",
                        "full_name": "Khalid Omar Ali (F2'15)",
                        "id": 8713
                    },
                    "user_id": 8713
                }
            ],
            "recipient_id": 22667,
            "sender_email": "paul.gowder@gmail.com",
            "sender_full_name": "Paul Gowder (S2'17)",
            "sender_id": 101322,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "my code, it is so smelly.",
            "submessages": [],
            "timestamp": 1499780840,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/a5990ea1928ad47ec4fc3b7998607178?d=identicon&version=1",
            "client": "website",
            "content": "<p>I am so confused by precedence in Haskell.  Would some kind person explain to me why the following two functions are different? </p>\n<div class=\"codehilite\"><pre><span></span><span class=\"nf\">meanBlowsUp</span> <span class=\"ow\">::</span> <span class=\"p\">[</span><span class=\"kt\">Double</span><span class=\"p\">]</span> <span class=\"ow\">-&gt;</span> <span class=\"kt\">Double</span>\n<span class=\"nf\">meanBlowUp</span> <span class=\"n\">lst</span> <span class=\"ow\">=</span> <span class=\"p\">(</span><span class=\"n\">sum</span> <span class=\"n\">lst</span><span class=\"p\">)</span> <span class=\"o\">/</span> <span class=\"n\">fromIntegral</span> <span class=\"o\">$</span> <span class=\"p\">(</span><span class=\"n\">length</span> <span class=\"n\">lst</span><span class=\"p\">)</span>\n</pre></div>\n\n\n<div class=\"codehilite\"><pre><span></span><span class=\"nf\">meanWorks</span> <span class=\"ow\">::</span> <span class=\"p\">[</span><span class=\"kt\">Double</span><span class=\"p\">]</span> <span class=\"ow\">-&gt;</span> <span class=\"kt\">Double</span>\n<span class=\"nf\">meanWorks</span> <span class=\"n\">lst</span> <span class=\"ow\">=</span> <span class=\"p\">(</span><span class=\"n\">sum</span> <span class=\"n\">lst</span><span class=\"p\">)</span> <span class=\"o\">/</span> <span class=\"n\">fromIntegral</span> <span class=\"p\">(</span><span class=\"n\">length</span> <span class=\"n\">lst</span><span class=\"p\">)</span>\n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 113222711,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "paul.gowder@gmail.com",
            "sender_full_name": "Paul Gowder (S2'17)",
            "sender_id": 101322,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "precedence and $",
            "submessages": [],
            "timestamp": 1499795535,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/661412d42ecbf0c0bd354116859a5af3562f8e5f?x=x&version=4",
            "client": "website",
            "content": "<p>in a more common notation:</p>\n<div class=\"codehilite\"><pre><span></span>(sum(lst) / fromIntegral())(length(lst))\n</pre></div>\n\n\n<p>versus</p>\n<div class=\"codehilite\"><pre><span></span>sum(lst) / fromIntegral(length(lst))\n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 113222839,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "veit@veitheller.de",
            "sender_full_name": "Veit Heller (he) (S1'17)",
            "sender_id": 101103,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "precedence and $",
            "submessages": [],
            "timestamp": 1499795749,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p>The first rule of precedence (the highest-precedence precedence rule?) to remember in Haskell is that function application, aka the empty space, has the highest precedence of all.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 113222842,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "precedence and $",
            "submessages": [],
            "timestamp": 1499795755,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/661412d42ecbf0c0bd354116859a5af3562f8e5f?x=x&version=4",
            "client": "website",
            "content": "<p>the latter is actually what you want.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 113222891,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "veit@veitheller.de",
            "sender_full_name": "Veit Heller (he) (S1'17)",
            "sender_id": 101103,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "precedence and $",
            "submessages": [],
            "timestamp": 1499795780,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p>You can also learn about precedence rules with <code>:i</code> at the ghci prompt. For example, <code>:i ($)</code> says that <code>$</code>has very low precedence (<code>infixr 0</code>), whereas <code>:i (/)</code> shows that <code>/</code> has much higher precedence (<code>infixl 7</code>).</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 113222961,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "precedence and $",
            "submessages": [],
            "timestamp": 1499795898,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/a5990ea1928ad47ec4fc3b7998607178?d=identicon&version=1",
            "client": "website",
            "content": "<p>Oh, so I take it from <span class=\"user-mention\" data-user-email=\"veit@veitheller.de\" data-user-id=\"101103\">@Veit Heller (S1'17)</span> 's translation that the $ operator doesn't just entail \"apply the function to everything to the right of it, but with really low precedence,\" but also \"apply everything to the left of the function to the function first?\"</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 113223094,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "paul.gowder@gmail.com",
            "sender_full_name": "Paul Gowder (S2'17)",
            "sender_id": 101322,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "precedence and $",
            "submessages": [],
            "timestamp": 1499796042,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/661412d42ecbf0c0bd354116859a5af3562f8e5f?x=x&version=4",
            "client": "website",
            "content": "<p>more or less. the following two are equivalent, for instance:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"p\">(</span><span class=\"n\">putStrLn</span> <span class=\"o\">.</span> <span class=\"n\">show</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"mi\">100</span> <span class=\"o\">*</span> <span class=\"mi\">100</span><span class=\"p\">)</span>\n<span class=\"nf\">putStrLn</span> <span class=\"o\">.</span> <span class=\"n\">show</span> <span class=\"o\">$</span> <span class=\"mi\">100</span> <span class=\"o\">*</span> <span class=\"mi\">100</span>\n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 113223185,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "veit@veitheller.de",
            "sender_full_name": "Veit Heller (he) (S1'17)",
            "sender_id": 101103,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "precedence and $",
            "submessages": [],
            "timestamp": 1499796161,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/a5990ea1928ad47ec4fc3b7998607178?d=identicon&version=1",
            "client": "website",
            "content": "<p>thanks!  I think that helps.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 113223204,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "paul.gowder@gmail.com",
            "sender_full_name": "Paul Gowder (S2'17)",
            "sender_id": 101322,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "precedence and $",
            "submessages": [],
            "timestamp": 1499796202,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p>I think we're saying the same thing, but the first version parenthesizes in a way that just doesn't really make sense: <code>((sum lst) / fromIntegral)</code> doesn't typecheck, so you can't apply it to <code>length lst</code>.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 113223207,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f34e",
                    "emoji_name": "apple",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "paul.gowder@gmail.com",
                        "full_name": "Paul Gowder (S2'17)",
                        "id": 101322
                    },
                    "user_id": 101322
                }
            ],
            "recipient_id": 22667,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "precedence and $",
            "submessages": [],
            "timestamp": 1499796215,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/faad5e420e35c613eac0b16a547c66e229d055de?x=x&version=2",
            "client": "website",
            "content": "<p>I'm trying to read this paper:</p>\n<p><a href=\"http://haskell.cs.yale.edu/wp-content/uploads/2011/02/POPL96-Modular-interpreters.pdf\" target=\"_blank\" title=\"http://haskell.cs.yale.edu/wp-content/uploads/2011/02/POPL96-Modular-interpreters.pdf\">http://haskell.cs.yale.edu/wp-content/uploads/2011/02/POPL96-Modular-interpreters.pdf</a></p>\n<p>But their code is written in Gofer, a language which seems to have been subsumed by Haskell, and I am struggling to translate it to a from that ghci finds palatable. I have also found this: <a href=\"http://www.cas.mcmaster.ca/~kahl/FP/2003/Interpreter.ps\" target=\"_blank\" title=\"http://www.cas.mcmaster.ca/~kahl/FP/2003/Interpreter.ps\">http://www.cas.mcmaster.ca/~kahl/FP/2003/Interpreter.ps</a>, which claims to provide updated code for the above, but ghci is not keen on that either.</p>\n<p>More generally I'm interested in how an interpreter can be written in terms of monads &amp; monad transformers. If anyone is familiar with this topic please let me know - thanks!</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 113922896,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "sam.x.patterson@gmail.com",
            "sender_full_name": "Sam Patterson (S1'17)",
            "sender_id": 101080,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Monad Transformers and Modular Interpreters",
            "submessages": [],
            "timestamp": 1501262564,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/40e1eb4186c76edfecca264f74e088ed0e62af25?x=x&version=2",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"sam.x.patterson@gmail.com\" data-user-id=\"101080\">@Sam Patterson (S1'17)</span> I'm happy to talk about this and show you what I know. This is probably too much to type.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 113925416,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "jaseemabid@gmail.com",
            "sender_full_name": "Jaseem Abid (he) (S1'17)",
            "sender_id": 101128,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Monad Transformers and Modular Interpreters",
            "submessages": [],
            "timestamp": 1501266970,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/faad5e420e35c613eac0b16a547c66e229d055de?x=x&version=2",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"jaseemabid@gmail.com\" data-user-id=\"101128\">@Jaseem Abid (S1'17)</span> thanks! Let me know when you are free - I am sitting by the kitchen</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 113926009,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "sam.x.patterson@gmail.com",
            "sender_full_name": "Sam Patterson (S1'17)",
            "sender_id": 101080,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Monad Transformers and Modular Interpreters",
            "submessages": [],
            "timestamp": 1501268029,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/8298819261d94800ac2ac771b9904a89?d=identicon&version=1",
            "client": "website",
            "content": "<p>Newby question! I'm running <code>stack ghci</code> and it can find some functions defined there, but not data constructors. I made sure to export it too.. Any ideas?</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 114033420,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "mail@marcusklaas.nl",
            "sender_full_name": "Marcus Klaas de Vries (S2'17)",
            "sender_id": 101443,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "ghci can't find data constructor",
            "submessages": [],
            "timestamp": 1501517770,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/40e1eb4186c76edfecca264f74e088ed0e62af25?x=x&version=2",
            "client": "website",
            "content": "<p>Should work by default. I tend to not have explicit import / export for a while till the project matures a bit.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 114034970,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "jaseemabid@gmail.com",
            "sender_full_name": "Jaseem Abid (he) (S1'17)",
            "sender_id": 101128,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "ghci can't find data constructor",
            "submessages": [],
            "timestamp": 1501520503,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/efe57f0998df065470ff42c938f781cf?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"mail@marcusklaas.nl\" data-user-id=\"101443\">@Marcus Klaas de Vries (S2'17)</span> this is really old, but one thing that trips me up sometime is I'll export <code>SomeData</code>, which exports the type <code>SomeData</code>, but it doesn't export the constructor! To export the constuctor, you need <code>SomeData(..)</code>.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 114168748,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "libby@daydrea.me",
            "sender_full_name": "Libby Horacek (she) (SP1'15)",
            "sender_id": 7081,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "ghci can't find data constructor",
            "submessages": [],
            "timestamp": 1501786584,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/8298819261d94800ac2ac771b9904a89?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"libby@daydrea.me\" data-user-id=\"7081\">@Libby Horacek (W2'15)</span> Aaah, that explains it. Thanks!!</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 114170109,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "mail@marcusklaas.nl",
            "sender_full_name": "Marcus Klaas de Vries (S2'17)",
            "sender_id": 101443,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "ghci can't find data constructor",
            "submessages": [],
            "timestamp": 1501788732,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/a6a0ff0a4a9a86ae7bc4524453d439bd?d=identicon&version=1",
            "client": "website",
            "content": "<p>Has anyone used the haskell tensorflow bindings? I need to use tensorflow for a project, and am trying to get a sense of whether it's possible in haskell. I've seen they do exist, and seem to be actively (actively-ish?) maintained, but I'm not sure about how robust they are.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 114422507,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "2764",
                    "emoji_name": "heart",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "jaseemabid@gmail.com",
                        "full_name": "Jaseem Abid (he) (S1'17)",
                        "id": 101128
                    },
                    "user_id": 101128
                }
            ],
            "recipient_id": 22667,
            "sender_email": "annie.cherk@gmail.com",
            "sender_full_name": "Annie Cherkaev (she/they) (m4'18)",
            "sender_id": 9502,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "tensorflow bindings",
            "submessages": [],
            "timestamp": 1502319181,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/07a5ba69595cc839c85aabdb8ffeabee6ad0b83e?x=x&version=1",
            "client": "website",
            "content": "<p>Ooh! Did not know that existed!</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 114428641,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "sean.martin@nyu.edu",
            "sender_full_name": "Sean Martin (they) (S2'16)",
            "sender_id": 9495,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "tensorflow bindings",
            "submessages": [],
            "timestamp": 1502331037,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/5693e93e0e540757b3d92c6350f39af0?d=identicon&version=1",
            "client": "website",
            "content": "<p>We are now resuming/resurrecting the Haskell Reading Group!! :} cc <span class=\"user-mention\" data-user-email=\"mnoronha@uchicago.edu\" data-user-id=\"101318\">@Michael Noronha (S2'17)</span> <span class=\"user-mention\" data-user-email=\"hanglu.su@gmail.com\" data-user-id=\"101107\">@Hang Lu Su (F1'17)</span> <span class=\"user-mention\" data-user-email=\"yapelynn@gmail.com\" data-user-id=\"101317\">@E-Lynn Yap (S2'17)</span>  <a href=\"https://www.recurse.com/calendar/576\" target=\"_blank\" title=\"https://www.recurse.com/calendar/576\">https://www.recurse.com/calendar/576</a></p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 114699253,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1104",
                    "emoji_name": "haskell",
                    "reaction_type": "realm_emoji",
                    "user": {
                        "email": "vaibhavsagar@gmail.com",
                        "full_name": "Vaibhav Sagar (he) (F1'16)",
                        "id": 100041
                    },
                    "user_id": 100041
                },
                {
                    "emoji_code": "1104",
                    "emoji_name": "haskell",
                    "reaction_type": "realm_emoji",
                    "user": {
                        "email": "dangonrei@gmail.com",
                        "full_name": "Daniel Gonz\u00e1lez Reina (he) (S1'17)",
                        "id": 101095
                    },
                    "user_id": 101095
                }
            ],
            "recipient_id": 22667,
            "sender_email": "sabelo@sabelo.io",
            "sender_full_name": "Sabelo Mhlambi (F1'17)",
            "sender_id": 101085,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "reading group Haskell Programming from first principles",
            "submessages": [],
            "timestamp": 1502919031,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/333bbc33b9eca3de56596185538e752c4e82dd63?x=x&version=4",
            "client": "website",
            "content": "<p>yessssss</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 114699260,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "mnoronha@uchicago.edu",
            "sender_full_name": "Michael Noronha (he) (S2'20)",
            "sender_id": 101318,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "reading group Haskell Programming from first principles",
            "submessages": [],
            "timestamp": 1502919058,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/a7cfba3d94a1b727e5d91ed13aad1a25ff02ba79?x=x&version=2",
            "client": "website",
            "content": "<p>I'm not going to read that book again, but I'm here watching and available for questions\u2026 :-)</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 114725300,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "2764",
                    "emoji_name": "heart",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "sabelo@sabelo.io",
                        "full_name": "Sabelo Mhlambi (F1'17)",
                        "id": 101085
                    },
                    "user_id": 101085
                },
                {
                    "emoji_code": "2764",
                    "emoji_name": "heart",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "mnoronha@uchicago.edu",
                        "full_name": "Michael Noronha (he) (S2'20)",
                        "id": 101318
                    },
                    "user_id": 101318
                }
            ],
            "recipient_id": 22667,
            "sender_email": "business@stefan-lesser.com",
            "sender_full_name": "Stefan Lesser (S1'17)",
            "sender_id": 101083,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "reading group Haskell Programming from first principles",
            "submessages": [],
            "timestamp": 1502977711,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/6b4c70eb08e3784223ec604d3b5a8678b3245a1e?x=x&version=2",
            "client": "website",
            "content": "<p>There isn't a physical copy of this book in the library, is there?</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 114729377,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "yapelynn@gmail.com",
            "sender_full_name": "E-Lynn Yap (S2'17)",
            "sender_id": 101317,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "reading group Haskell Programming from first principles",
            "submessages": [],
            "timestamp": 1502984561,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/333bbc33b9eca3de56596185538e752c4e82dd63?x=x&version=4",
            "client": "website",
            "content": "<p>afaik there isn't a physical copy released yet because the book is technically not done being edited</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 114732180,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "mnoronha@uchicago.edu",
            "sender_full_name": "Michael Noronha (he) (S2'20)",
            "sender_id": 101318,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "reading group Haskell Programming from first principles",
            "submessages": [],
            "timestamp": 1502989460,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/333bbc33b9eca3de56596185538e752c4e82dd63?x=x&version=4",
            "client": "website",
            "content": "<p>i have a copy though, and don't have strong feelings about distributing the pdf</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 114732191,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "mnoronha@uchicago.edu",
            "sender_full_name": "Michael Noronha (he) (S2'20)",
            "sender_id": 101318,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "reading group Haskell Programming from first principles",
            "submessages": [],
            "timestamp": 1502989518,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/6b4c70eb08e3784223ec604d3b5a8678b3245a1e?x=x&version=2",
            "client": "website",
            "content": "<p>Oh I see. No worries I've got the pdf too -- thanks though!</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 114735956,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "yapelynn@gmail.com",
            "sender_full_name": "E-Lynn Yap (S2'17)",
            "sender_id": 101317,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "reading group Haskell Programming from first principles",
            "submessages": [],
            "timestamp": 1502996202,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/333bbc33b9eca3de56596185538e752c4e82dd63?x=x&version=4",
            "client": "website",
            "content": "<p>I'm in the middle of something so will have to miss today :(</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 114777505,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "mnoronha@uchicago.edu",
            "sender_full_name": "Michael Noronha (he) (S2'20)",
            "sender_id": 101318,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "reading group Haskell Programming from first principles",
            "submessages": [],
            "timestamp": 1503083024,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/333bbc33b9eca3de56596185538e752c4e82dd63?x=x&version=4",
            "client": "website",
            "content": "<p><a href=\"http://www.paultaylor.eu/stable/prot.pdf\" target=\"_blank\" title=\"http://www.paultaylor.eu/stable/prot.pdf\">http://www.paultaylor.eu/stable/prot.pdf</a></p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 114777748,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "mnoronha@uchicago.edu",
            "sender_full_name": "Michael Noronha (he) (S2'20)",
            "sender_id": 101318,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "reading group Haskell Programming from first principles",
            "submessages": [],
            "timestamp": 1503083415,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/5693e93e0e540757b3d92c6350f39af0?d=identicon&version=1",
            "client": "website",
            "content": "<p>Let vs Where: <br>\n<a href=\"https://wiki.haskell.org/Let_vs._Where\" target=\"_blank\" title=\"https://wiki.haskell.org/Let_vs._Where\">https://wiki.haskell.org/Let_vs._Where</a></p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 114778261,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "sabelo@sabelo.io",
            "sender_full_name": "Sabelo Mhlambi (F1'17)",
            "sender_id": 101085,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "reading group Haskell Programming from first principles",
            "submessages": [],
            "timestamp": 1503084439,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/6b4c70eb08e3784223ec604d3b5a8678b3245a1e?x=x&version=2",
            "client": "website",
            "content": "<p>Possible projects:<br>\n<a href=\"https://www.classes.cs.uchicago.edu/archive/2017/winter/51400-1/homework.html\" target=\"_blank\" title=\"https://www.classes.cs.uchicago.edu/archive/2017/winter/51400-1/homework.html\">https://www.classes.cs.uchicago.edu/archive/2017/winter/51400-1/homework.html</a></p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 114779143,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "thumbs_up",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "mnoronha@uchicago.edu",
                        "full_name": "Michael Noronha (he) (S2'20)",
                        "id": 101318
                    },
                    "user_id": 101318
                },
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "thumbs_up",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "sabelo@sabelo.io",
                        "full_name": "Sabelo Mhlambi (F1'17)",
                        "id": 101085
                    },
                    "user_id": 101085
                }
            ],
            "recipient_id": 22667,
            "sender_email": "yapelynn@gmail.com",
            "sender_full_name": "E-Lynn Yap (S2'17)",
            "sender_id": 101317,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "reading group Haskell Programming from first principles",
            "submessages": [],
            "timestamp": 1503086275,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/5693e93e0e540757b3d92c6350f39af0?d=identicon&version=1",
            "client": "website",
            "content": "<p>Does anyone have a take on Peter Henderson's \"Functional Programming Application and Implementation\"? I can't find any reviews on it..  I've been reading the 1st two chapters and it seems really great --but since I'm starting out in FP and have a few weeks left at Recurse, are there better resources on FP (in addition to \"Haskell from first principles\") or can this book give me the insights I need?</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 115004484,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "sabelo@sabelo.io",
            "sender_full_name": "Sabelo Mhlambi (F1'17)",
            "sender_id": 101085,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Reading Resources for FP",
            "submessages": [],
            "timestamp": 1503587354,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/a7cfba3d94a1b727e5d91ed13aad1a25ff02ba79?x=x&version=2",
            "client": "website",
            "content": "<p>I realize I never got to publish my blog post, because I can't be bothered with setting up a blog for myself\u2026 so I parked it here: <a href=\"https://github.com/stefanlesser/recurse/blob/master/resources/how-to-learn-functional-programming.md\" target=\"_blank\" title=\"https://github.com/stefanlesser/recurse/blob/master/resources/how-to-learn-functional-programming.md\">https://github.com/stefanlesser/recurse/blob/master/resources/how-to-learn-functional-programming.md</a><br>\nAlso: <a href=\"https://github.com/stefanlesser/recurse/blob/master/resources/functional-programming.md\" target=\"_blank\" title=\"https://github.com/stefanlesser/recurse/blob/master/resources/functional-programming.md\">https://github.com/stefanlesser/recurse/blob/master/resources/functional-programming.md</a></p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 115041081,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1100",
                    "emoji_name": "lambda",
                    "reaction_type": "realm_emoji",
                    "user": {
                        "email": "dabbagh.aos@gmail.com",
                        "full_name": "Aos Dabbagh (S2'17)",
                        "id": 101320
                    },
                    "user_id": 101320
                }
            ],
            "recipient_id": 22667,
            "sender_email": "business@stefan-lesser.com",
            "sender_full_name": "Stefan Lesser (S1'17)",
            "sender_id": 101083,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Reading Resources for FP",
            "submessages": [],
            "timestamp": 1503660408,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4d074af6cc341ef51b25bb2f738cdb11?d=identicon&version=1",
            "client": "website",
            "content": "<p>It lives! You'll need Nix to play with it for now: <a href=\"https://github.com/gibiansky/IHaskell/pull/735\" target=\"_blank\" title=\"https://github.com/gibiansky/IHaskell/pull/735\">https://github.com/gibiansky/IHaskell/pull/735</a></p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 115295613,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "vaibhavsagar@gmail.com",
            "sender_full_name": "Vaibhav Sagar (he) (F1'16)",
            "sender_id": 100041,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "IHaskell + GHC 8.2",
            "submessages": [],
            "timestamp": 1504203369,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/5d6a7a4735c43e9dae0e3f9ef82919706728452a?x=x&version=3",
            "client": "website",
            "content": "<p>Is this reading group still happening? I just started the book and would love to discuss it if this is still going on :)</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 115367628,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "me@wesleyac.com",
            "sender_full_name": "Wesley Aptekar-Cassels (they) (m8'20)",
            "sender_id": 101330,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "reading group Haskell Programming from first principles",
            "submessages": [],
            "timestamp": 1504345321,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/5d6a7a4735c43e9dae0e3f9ef82919706728452a?x=x&version=3",
            "client": "website",
            "content": "<p>I want to take half of the size of a list. This is what I'm trying:</p>\n<div class=\"codehilite\"><pre><span></span>Prelude&gt; (length [1,2,3]) / 2\n\n&lt;interactive&gt;:48:1: error:\n    \u2022 No instance for (Fractional Int) arising from a use of \u2018/\u2019\n    \u2022 In the expression: (length [1, 2, 3]) / 2\n      In an equation for \u2018it\u2019: it = (length [1, 2, 3]) / 2\n</pre></div>\n\n\n<p>What is wrong with this code? I know that I can use <code>div</code>, but I want to be able to round the value either up or down, and <code>div</code> can only round down.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 115382709,
            "is_me_message": false,
            "last_edit_timestamp": 1504383185,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "me@wesleyac.com",
            "sender_full_name": "Wesley Aptekar-Cassels (they) (m8'20)",
            "sender_id": 101330,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "division",
            "submessages": [],
            "timestamp": 1504383107,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/5d6a7a4735c43e9dae0e3f9ef82919706728452a?x=x&version=3",
            "client": "website",
            "content": "<p>Ah, I just found that I can use <code>fromIntegral</code> to get it to work. Is that what I should be doing, or is there a more idiomatic way?</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 115382905,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "me@wesleyac.com",
            "sender_full_name": "Wesley Aptekar-Cassels (they) (m8'20)",
            "sender_id": 101330,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "division",
            "submessages": [],
            "timestamp": 1504383498,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/333bbc33b9eca3de56596185538e752c4e82dd63?x=x&version=4",
            "client": "website",
            "content": "<p>I'm pretty sure this is idiomatic, but I've never written production haskell code or anything. I was talking to <span class=\"user-mention\" data-user-email=\"jaseemabid@gmail.com\" data-user-id=\"101128\">@Jaseem Abid (S1'17)</span> about this awhile ago, and he was talking about how it's pretty much a language wart</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 115383337,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "+1",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "paul.gowder@gmail.com",
                        "full_name": "Paul Gowder (S2'17)",
                        "id": 101322
                    },
                    "user_id": 101322
                },
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "+1",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "me@wesleyac.com",
                        "full_name": "Wesley Aptekar-Cassels (they) (m8'20)",
                        "id": 101330
                    },
                    "user_id": 101330
                }
            ],
            "recipient_id": 22667,
            "sender_email": "mnoronha@uchicago.edu",
            "sender_full_name": "Michael Noronha (he) (S2'20)",
            "sender_id": 101318,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "division",
            "submessages": [],
            "timestamp": 1504384650,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/cbcb9589503e23026f6e55769709dc6a43465431?x=x&version=2",
            "client": "website",
            "content": "<p><code>genericLength</code></p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 115383563,
            "is_me_message": false,
            "last_edit_timestamp": 1504385273,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "alokbeniwal@gmail.com",
            "sender_full_name": "Alok Singh (S1'17)",
            "sender_id": 101076,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "division",
            "submessages": [],
            "timestamp": 1504385174,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/cbcb9589503e23026f6e55769709dc6a43465431?x=x&version=2",
            "client": "website",
            "content": "<p>but it's really slow, so <code>fromIntegral . length</code> is often better</p>\n<p><a href=\"https://softwareengineering.stackexchange.com/a/272796\" target=\"_blank\" title=\"https://softwareengineering.stackexchange.com/a/272796\">https://softwareengineering.stackexchange.com/a/272796</a></p>\n<p>another thread quote:</p>\n<blockquote>\n<p>the potential performance problems are sufficiently serious that most people have just learned not to use genericLength, ever.</p>\n</blockquote>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 115383621,
            "is_me_message": false,
            "last_edit_timestamp": 1504385423,
            "reactions": [
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "+1",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "me@wesleyac.com",
                        "full_name": "Wesley Aptekar-Cassels (they) (m8'20)",
                        "id": 101330
                    },
                    "user_id": 101330
                }
            ],
            "recipient_id": 22667,
            "sender_email": "alokbeniwal@gmail.com",
            "sender_full_name": "Alok Singh (S1'17)",
            "sender_id": 101076,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "division",
            "submessages": [],
            "timestamp": 1504385357,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/333bbc33b9eca3de56596185538e752c4e82dd63?x=x&version=4",
            "client": "website",
            "content": "<p>Any haskellers have thoughts about this statement made in the accepted answer?</p>\n<blockquote>\n<p>It's the same reason as why we have map and fmap. Error messages/usability for newbies.</p>\n</blockquote>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 115384485,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "mnoronha@uchicago.edu",
            "sender_full_name": "Michael Noronha (he) (S2'20)",
            "sender_id": 101318,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "division",
            "submessages": [],
            "timestamp": 1504387536,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/a5990ea1928ad47ec4fc3b7998607178?d=identicon&version=1",
            "client": "website",
            "content": "<p>ROFL <span class=\"user-mention\" data-user-email=\"jaseemabid@gmail.com\" data-user-id=\"101128\">@Jaseem Abid (S1'17)</span> was there when I started and then decided to stop Haskell, basically on the strength of this and similar super-snotty type things.  I think he got to hear my \"a programming language should let you <em>divide</em> without type errors\" tirade a couple times, actually.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 115385338,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "paul.gowder@gmail.com",
            "sender_full_name": "Paul Gowder (S2'17)",
            "sender_id": 101322,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "division",
            "submessages": [],
            "timestamp": 1504389556,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4d074af6cc341ef51b25bb2f738cdb11?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"mnoronha@uchicago.edu\" data-user-id=\"101318\">@Michael Noronha (S2'17)</span> the Typeclassopedia agrees: <a href=\"https://wiki.haskell.org/Typeclassopedia#Instances\" target=\"_blank\" title=\"https://wiki.haskell.org/Typeclassopedia#Instances\">https://wiki.haskell.org/Typeclassopedia#Instances</a></p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 115392464,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "vaibhavsagar@gmail.com",
            "sender_full_name": "Vaibhav Sagar (he) (F1'16)",
            "sender_id": 100041,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "division",
            "submessages": [],
            "timestamp": 1504407480,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/d5518741e12b2070f0063a21cd60c939?d=identicon&version=4",
            "client": "website",
            "content": "<p>Hi, haskell newbie - just wanting to use the tool <code>erd</code> however running into dependency issues, started out with<code>brew cask install haskell-platform</code>, and <code>cabal install erd</code> is saying<br>\n<code>parsec-3.1.11-DPgnR92AWEaFOaixmwipet is unusable due to shadowed dependencies</code><br>\nlittle help? Thanks!</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 115458024,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "carl.douglas@gmail.com",
            "sender_full_name": "Carl Douglas (S1'17)",
            "sender_id": 101092,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "cabal dependency errors",
            "submessages": [],
            "timestamp": 1504568891,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/d5518741e12b2070f0063a21cd60c939?d=identicon&version=4",
            "client": "website",
            "content": "<p>well it installed after some <code>--force-reinstalls</code> of dependencies... \u00af\\_(\u30c4)_/\u00af</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 115458236,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "carl.douglas@gmail.com",
            "sender_full_name": "Carl Douglas (S1'17)",
            "sender_id": 101092,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "cabal dependency errors",
            "submessages": [],
            "timestamp": 1504569469,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4d074af6cc341ef51b25bb2f738cdb11?d=identicon&version=1",
            "client": "website",
            "content": "<p>Can I suggest using <code>stack</code>? It's a lot easier to get up and running (speaking from experience).</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 115464338,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "thumbs_up",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "charles@nrwhl.xyz",
                        "full_name": "Charles Chamberlain (F1'17)",
                        "id": 8318
                    },
                    "user_id": 8318
                }
            ],
            "recipient_id": 22667,
            "sender_email": "vaibhavsagar@gmail.com",
            "sender_full_name": "Vaibhav Sagar (he) (F1'16)",
            "sender_id": 100041,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "cabal dependency errors",
            "submessages": [],
            "timestamp": 1504584437,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/40e1eb4186c76edfecca264f74e088ed0e62af25?x=x&version=2",
            "client": "website",
            "content": "<p>Remotely stalking this thread from far away :)</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 115938512,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f642",
                    "emoji_name": "simple_smile",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "me@wesleyac.com",
                        "full_name": "Wesley Aptekar-Cassels (they) (m8'20)",
                        "id": 101330
                    },
                    "user_id": 101330
                }
            ],
            "recipient_id": 22667,
            "sender_email": "jaseemabid@gmail.com",
            "sender_full_name": "Jaseem Abid (he) (S1'17)",
            "sender_id": 101128,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "reading group Haskell Programming from first principles",
            "submessages": [],
            "timestamp": 1505554591,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/a2cc22089e70c6b1e9a84d91ac82118ab06aa82a?x=x&version=2",
            "client": "website",
            "content": "<p>I'm midway through HPFFP and will arrive with the F2'17 group in a week. Happy to work through any part of it with folks. Also tapping away at <a href=\"https://github.com/pushcx/shenzhen\" target=\"_blank\" title=\"https://github.com/pushcx/shenzhen\">https://github.com/pushcx/shenzhen</a> (an implementation of the Shenzhen I/O solitaire game) for Haskell practice</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 116071067,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "270c",
                    "emoji_name": "victory_hand",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "c@polygon.pizza",
                        "full_name": "coco Walsh (they) (m5'20)",
                        "id": 102029
                    },
                    "user_id": 102029
                }
            ],
            "recipient_id": 22667,
            "sender_email": "peter@push.cx",
            "sender_full_name": "Peter Bhat Harkins (he) (F2'17)",
            "sender_id": 102004,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "reading group Haskell Programming from first principles",
            "submessages": [],
            "timestamp": 1505849931,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/159e0dcf4be0b3add35f61779cc41c89ea10c398?x=x&version=2",
            "client": "ZulipElectron",
            "content": "<p><img alt=\":wave:\" class=\"emoji\" src=\"/static/generated/emoji/images/emoji/unicode/1f44b.png\" title=\"wave\"></p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 116399094,
            "is_me_message": false,
            "last_edit_timestamp": 1506541669,
            "reactions": [
                {
                    "emoji_code": "270c",
                    "emoji_name": "victory_hand",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "c@polygon.pizza",
                        "full_name": "coco Walsh (they) (m5'20)",
                        "id": 102029
                    },
                    "user_id": 102029
                }
            ],
            "recipient_id": 22667,
            "sender_email": "o.awomosu@gmail.com",
            "sender_full_name": "Femi Awomosu (m6'19)",
            "sender_id": 101990,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "fall 2 Haskell study group",
            "submessages": [],
            "timestamp": 1506541652,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/a2cc22089e70c6b1e9a84d91ac82118ab06aa82a?x=x&version=2",
            "client": "website",
            "content": "<p>We had a nice kickoff - we're going to meet Mondays and Wednesdays to work through the <a href=\"https://www.haskellbook.com\" target=\"_blank\" title=\"https://www.haskellbook.com\">Haskell Programming from First Principles</a> book. We got everyone set up with Haskell via Stack today, and for Monday we're going to work through the exercises of chapters 1-3. If anyone else would like to join in, or just drop in for interesting chapters, you're very welcome.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 116399164,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "peter@push.cx",
            "sender_full_name": "Peter Bhat Harkins (he) (F2'17)",
            "sender_id": 102004,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "fall 2 Haskell study group",
            "submessages": [],
            "timestamp": 1506541767,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/a2cc22089e70c6b1e9a84d91ac82118ab06aa82a?x=x&version=2",
            "client": "website",
            "content": "<p>If the price of the book is a problem, the authors do give hardship discounts, just email them to ask.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 116399218,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "peter@push.cx",
            "sender_full_name": "Peter Bhat Harkins (he) (F2'17)",
            "sender_id": 102004,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "fall 2 Haskell study group",
            "submessages": [],
            "timestamp": 1506541812,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/8ede63f05c0a949ad0dce6b1e120fa5f2a1cc72a?x=x&version=2",
            "client": "website",
            "content": "<p><code>unconcat3 : [a] -&gt; [[a]]</code></p>\n<p>Is the kind of signature I want, so that input that looks like <code>[1, 2, 3, 4, 5]</code> will get \"chunked\" into a list of lists: <code>[[1,2,3],[4,5]]</code></p>\n<p>Any tips on the way forward? I presume recursions and maps. ;) , but my instincts just aren't there.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 116432461,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "danweasel@gmail.com",
            "sender_full_name": "Andrew Nichols (he) (F2'17)",
            "sender_id": 101997,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "\"Unconcat\" a list",
            "submessages": [],
            "timestamp": 1506611172,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/48e493d515af67a1512d977689cd051b?d=identicon&version=1",
            "client": "website",
            "content": "<p>how familiar are you with recursion and maps? I often find it useful to try to imagine the simplest case that captures the essence of what I'm building and work from there</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 116433578,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "outofthemadness@gmail.com",
            "sender_full_name": "James A. Keene (he) (m2'18)",
            "sender_id": 887,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "\"Unconcat\" a list",
            "submessages": [],
            "timestamp": 1506612875,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/48e493d515af67a1512d977689cd051b?d=identicon&version=1",
            "client": "website",
            "content": "<p>but yeah, there is a recursive solution to this that is not too hard to implement</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 116433594,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "outofthemadness@gmail.com",
            "sender_full_name": "James A. Keene (he) (m2'18)",
            "sender_id": 887,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "\"Unconcat\" a list",
            "submessages": [],
            "timestamp": 1506612903,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/8ede63f05c0a949ad0dce6b1e120fa5f2a1cc72a?x=x&version=2",
            "client": "website",
            "content": "<p>I think I've got this down, will clean it up and post it after lunch.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 116433768,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "danweasel@gmail.com",
            "sender_full_name": "Andrew Nichols (he) (F2'17)",
            "sender_id": 101997,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "\"Unconcat\" a list",
            "submessages": [],
            "timestamp": 1506613124,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/8ede63f05c0a949ad0dce6b1e120fa5f2a1cc72a?x=x&version=2",
            "client": "website",
            "content": "<div class=\"codehilite\"><pre><span></span>unconcat :: Int -&gt; [a] -&gt; [[a]]\nunconcat n xs =\n  case xs of\n    [] -&gt; []\n    _  -&gt;\n      let front = take n xs\n          back  = unconcat n $ drop n xs\n      in  front : back\n</pre></div>\n\n\n<p>Seems to do what I want! Open to suggestions of a better strategy.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 116437021,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "danweasel@gmail.com",
            "sender_full_name": "Andrew Nichols (he) (F2'17)",
            "sender_id": 101997,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "\"Unconcat\" a list",
            "submessages": [],
            "timestamp": 1506618367,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4d074af6cc341ef51b25bb2f738cdb11?d=identicon&version=1",
            "client": "website",
            "content": "<p>This looks good! There's also <code>splitAt</code> which does a <code>take</code> and <code>drop</code> simultaneously if that helps <img alt=\":smiley:\" class=\"emoji\" src=\"/static/generated/emoji/images/emoji/unicode/1f603.png\" title=\"smiley\"></p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 116457281,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "vaibhavsagar@gmail.com",
            "sender_full_name": "Vaibhav Sagar (he) (F1'16)",
            "sender_id": 100041,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "\"Unconcat\" a list",
            "submessages": [],
            "timestamp": 1506655464,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/6b4c70eb08e3784223ec604d3b5a8678b3245a1e?x=x&version=2",
            "client": "website",
            "content": "<p>probably not a 'better' strategy and arguably less readable, but you could also fold:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"nf\">unconcat</span> <span class=\"ow\">::</span> <span class=\"kt\">Int</span> <span class=\"ow\">-&gt;</span> <span class=\"p\">[</span><span class=\"n\">a</span><span class=\"p\">]</span> <span class=\"ow\">-&gt;</span> <span class=\"p\">[[</span><span class=\"n\">a</span><span class=\"p\">]]</span>\n<span class=\"nf\">unconcat</span> <span class=\"n\">n</span> <span class=\"ow\">=</span> <span class=\"n\">g</span> <span class=\"o\">.</span> <span class=\"n\">foldr</span> <span class=\"n\">f</span> <span class=\"p\">(</span><span class=\"kt\">[]</span><span class=\"p\">,</span> <span class=\"kt\">[]</span><span class=\"p\">)</span>\n  <span class=\"kr\">where</span> <span class=\"n\">f</span> <span class=\"n\">num</span> <span class=\"p\">(</span><span class=\"n\">xs</span><span class=\"p\">,</span> <span class=\"n\">ys</span><span class=\"p\">)</span> <span class=\"ow\">=</span> <span class=\"kr\">if</span> <span class=\"n\">length</span> <span class=\"n\">xs</span> <span class=\"o\">&lt;</span> <span class=\"n\">n</span> <span class=\"kr\">then</span> <span class=\"p\">(</span><span class=\"n\">num</span><span class=\"kt\">:</span><span class=\"n\">xs</span><span class=\"p\">,</span> <span class=\"n\">ys</span><span class=\"p\">)</span> <span class=\"kr\">else</span> <span class=\"p\">([</span><span class=\"n\">num</span><span class=\"p\">],</span> <span class=\"n\">xs</span><span class=\"kt\">:</span><span class=\"n\">ys</span><span class=\"p\">)</span>\n        <span class=\"n\">g</span> <span class=\"p\">(</span><span class=\"kt\">[]</span><span class=\"p\">,</span> <span class=\"n\">ys</span><span class=\"p\">)</span> <span class=\"ow\">=</span> <span class=\"n\">ys</span>\n        <span class=\"n\">g</span> <span class=\"p\">(</span><span class=\"n\">xs</span><span class=\"p\">,</span> <span class=\"n\">ys</span><span class=\"p\">)</span> <span class=\"ow\">=</span> <span class=\"n\">xs</span><span class=\"kt\">:</span><span class=\"n\">ys</span>\n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 116458729,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "yapelynn@gmail.com",
            "sender_full_name": "E-Lynn Yap (S2'17)",
            "sender_id": 101317,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "\"Unconcat\" a list",
            "submessages": [],
            "timestamp": 1506658730,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4d074af6cc341ef51b25bb2f738cdb11?d=identicon&version=1",
            "client": "website",
            "content": "<p>I'm not sure that has the expected result:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kt\">Prelude</span><span class=\"o\">&gt;</span> <span class=\"n\">unconcat</span> <span class=\"mi\">3</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"o\">..</span><span class=\"mi\">10</span><span class=\"p\">]</span>\n<span class=\"p\">[[</span><span class=\"mi\">1</span><span class=\"p\">],[</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"mi\">3</span><span class=\"p\">,</span><span class=\"mi\">4</span><span class=\"p\">],[</span><span class=\"mi\">5</span><span class=\"p\">,</span><span class=\"mi\">6</span><span class=\"p\">,</span><span class=\"mi\">7</span><span class=\"p\">],[</span><span class=\"mi\">8</span><span class=\"p\">,</span><span class=\"mi\">9</span><span class=\"p\">,</span><span class=\"mi\">10</span><span class=\"p\">]]</span>\n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 116465902,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "vaibhavsagar@gmail.com",
            "sender_full_name": "Vaibhav Sagar (he) (F1'16)",
            "sender_id": 100041,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "\"Unconcat\" a list",
            "submessages": [],
            "timestamp": 1506676456,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4d074af6cc341ef51b25bb2f738cdb11?d=identicon&version=1",
            "client": "website",
            "content": "<p>I would do something like</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"nf\">unconcat</span> <span class=\"ow\">::</span> <span class=\"kt\">Int</span> <span class=\"ow\">-&gt;</span> <span class=\"p\">[</span><span class=\"n\">a</span><span class=\"p\">]</span> <span class=\"ow\">-&gt;</span> <span class=\"p\">[[</span><span class=\"n\">a</span><span class=\"p\">]]</span>\n<span class=\"nf\">unconcat</span> <span class=\"n\">n</span> <span class=\"n\">xs</span> <span class=\"ow\">=</span> <span class=\"kr\">case</span> <span class=\"n\">splitAt</span> <span class=\"n\">n</span> <span class=\"n\">xs</span> <span class=\"kr\">of</span>\n    <span class=\"p\">(</span><span class=\"kt\">[]</span><span class=\"p\">,</span> <span class=\"kr\">_</span><span class=\"p\">)</span> <span class=\"ow\">-&gt;</span> <span class=\"kt\">[]</span>\n    <span class=\"p\">(</span><span class=\"n\">h</span><span class=\"p\">,</span> <span class=\"n\">t</span><span class=\"p\">)</span>  <span class=\"ow\">-&gt;</span> <span class=\"n\">h</span> <span class=\"kt\">:</span> <span class=\"n\">unconcat</span> <span class=\"n\">n</span> <span class=\"n\">t</span>\n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 116466218,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "vaibhavsagar@gmail.com",
            "sender_full_name": "Vaibhav Sagar (he) (F1'16)",
            "sender_id": 100041,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "\"Unconcat\" a list",
            "submessages": [],
            "timestamp": 1506677190,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/8ede63f05c0a949ad0dce6b1e120fa5f2a1cc72a?x=x&version=2",
            "client": "website",
            "content": "<p>Thanks for the alternative solutions. :)</p>\n<p>Folds are still a bit scary but I'm trying to deal with them more: some exercises I did last week involved writing some tree manipulation functions, then rewriting them with folds.</p>\n<p><code>splitAt</code> and pattern matching the result is similarly cool.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 116472087,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "danweasel@gmail.com",
            "sender_full_name": "Andrew Nichols (he) (F2'17)",
            "sender_id": 101997,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "\"Unconcat\" a list",
            "submessages": [],
            "timestamp": 1506690490,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/a2cc22089e70c6b1e9a84d91ac82118ab06aa82a?x=x&version=2",
            "client": "website",
            "content": "<p>And Hoogle is a useful tool, if you're looking for a library function rather than writing code. You can search by type signature : <a href=\"https://www.haskell.org/hoogle/?hoogle=%5Ba%5D+-%3E+%5B%5Ba%5D%5D\" target=\"_blank\" title=\"https://www.haskell.org/hoogle/?hoogle=%5Ba%5D+-%3E+%5B%5Ba%5D%5D\">https://www.haskell.org/hoogle/?hoogle=%5Ba%5D+-%3E+%5B%5Ba%5D%5D</a></p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 116473045,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "peter@push.cx",
            "sender_full_name": "Peter Bhat Harkins (he) (F2'17)",
            "sender_id": 102004,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "\"Unconcat\" a list",
            "submessages": [],
            "timestamp": 1506692477,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/6b4c70eb08e3784223ec604d3b5a8678b3245a1e?x=x&version=2",
            "client": "ZulipMobile",
            "content": "<p>Right. I'd just fold from the left then, and move the order of the arguments around.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 116474187,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "yapelynn@gmail.com",
            "sender_full_name": "E-Lynn Yap (S2'17)",
            "sender_id": 101317,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "\"Unconcat\" a list",
            "submessages": [],
            "timestamp": 1506694766,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/6b4c70eb08e3784223ec604d3b5a8678b3245a1e?x=x&version=2",
            "client": "ZulipMobile",
            "content": "<p>Folds definitely took me a while to wrap my head around. I found it useful when learning about them to do stuff like this, where you first write a recursive solution to a problem, then try to redefine it exclusively using fold/map.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 116474243,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "yapelynn@gmail.com",
            "sender_full_name": "E-Lynn Yap (S2'17)",
            "sender_id": 101317,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "\"Unconcat\" a list",
            "submessages": [],
            "timestamp": 1506694852,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/a2cc22089e70c6b1e9a84d91ac82118ab06aa82a?x=x&version=2",
            "client": "website",
            "content": "<p>And chapters 10 and 20 of the <a href=\"http://www.haskellbook.com\" target=\"_blank\" title=\"http://www.haskellbook.com\">book we're working through</a> are about folds and full of exercises.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 116474294,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "peter@push.cx",
            "sender_full_name": "Peter Bhat Harkins (he) (F2'17)",
            "sender_id": 102004,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "\"Unconcat\" a list",
            "submessages": [],
            "timestamp": 1506694948,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/159e0dcf4be0b3add35f61779cc41c89ea10c398?x=x&version=2",
            "client": "ZulipElectron",
            "content": "<p><a href=\"https://www.microsoft.com/en-us/research/publication/the-implementation-of-functional-programming-languages/?from=http%3A%2F%2Fresearch.microsoft.com%2Fen-us%2Fum%2Fpeople%2Fsimonpj%2Fpapers%2Fslpj-book-1987%2F\" target=\"_blank\" title=\"https://www.microsoft.com/en-us/research/publication/the-implementation-of-functional-programming-languages/?from=http%3A%2F%2Fresearch.microsoft.com%2Fen-us%2Fum%2Fpeople%2Fsimonpj%2Fpapers%2Fslpj-book-1987%2F\">This was one of the books</a> I used for my functional programming class this year. It touches on the implementation details for functional languages and goes deeper into the Lambda calculus and more</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 116592443,
            "is_me_message": false,
            "last_edit_timestamp": 1506978753,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "o.awomosu@gmail.com",
            "sender_full_name": "Femi Awomosu (m6'19)",
            "sender_id": 101990,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "fall 2 Haskell study group",
            "submessages": [],
            "timestamp": 1506967121,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/8ede63f05c0a949ad0dce6b1e120fa5f2a1cc72a?x=x&version=2",
            "client": "website",
            "content": "<p>Here's the implementation, effectively the inverse of <code>($)</code>:</p>\n<div class=\"codehilite\"><pre><span></span>(|&gt;) :: a -&gt; (a -&gt; b) -&gt; b\n(|&gt;) x f = f x\ninfixl 0 |&gt;\n</pre></div>\n\n\n<p>So I could totally expand the language syntax in this way, but I presume it's more idiomatic Haskell to compose functions and then apply the argument afterwards? Two trivial examples:</p>\n<div class=\"codehilite\"><pre><span></span>&#39;H&#39; : &quot;ello&quot; |&gt; length\n\nlength . (:) &#39;H&#39; $ &quot;ello&quot;\n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 116628326,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "danweasel@gmail.com",
            "sender_full_name": "Andrew Nichols (he) (F2'17)",
            "sender_id": 101997,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Forward Pipe",
            "submessages": [],
            "timestamp": 1507042048,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4d074af6cc341ef51b25bb2f738cdb11?d=identicon&version=1",
            "client": "website",
            "content": "<p>There is also <a href=\"https://hackage.haskell.org/package/base-4.9.0.0/docs/Data-Function.html#v:-38-\" target=\"_blank\" title=\"https://hackage.haskell.org/package/base-4.9.0.0/docs/Data-Function.html#v:-38-\"><code>&amp;</code></a></p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 116628416,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "vaibhavsagar@gmail.com",
            "sender_full_name": "Vaibhav Sagar (he) (F1'16)",
            "sender_id": 100041,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Forward Pipe",
            "submessages": [],
            "timestamp": 1507042193,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4d074af6cc341ef51b25bb2f738cdb11?d=identicon&version=1",
            "client": "website",
            "content": "<p>There are a couple of libraries that enable the more familiar left-to-right style, such as <a href=\"http://taylor.fausak.me/2015/04/09/write-more-understandable-haskell-with-flow/\" target=\"_blank\" title=\"http://taylor.fausak.me/2015/04/09/write-more-understandable-haskell-with-flow/\">Flow</a>, but <a href=\"http://taylor.fausak.me/2015/04/16/on-the-reaction-to-flow/\" target=\"_blank\" title=\"http://taylor.fausak.me/2015/04/16/on-the-reaction-to-flow/\">a lot of Haskellers have *strong feelings* about this</a></p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 116628607,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "vaibhavsagar@gmail.com",
            "sender_full_name": "Vaibhav Sagar (he) (F1'16)",
            "sender_id": 100041,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Forward Pipe",
            "submessages": [],
            "timestamp": 1507042475,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/8ede63f05c0a949ad0dce6b1e120fa5f2a1cc72a?x=x&version=2",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"vaibhavsagar@gmail.com\" data-user-id=\"100041\">@Vaibhav Sagar (F1'16)</span> This has sent me down a rabbit hole of reading about \"pointfree\" style, which is something I'd heard discussed before, but didn't really understand the <em>point</em> of the argument. Now it's at least somewhat understandable. :)</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 116634635,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "danweasel@gmail.com",
            "sender_full_name": "Andrew Nichols (he) (F2'17)",
            "sender_id": 101997,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Forward Pipe",
            "submessages": [],
            "timestamp": 1507052520,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4d074af6cc341ef51b25bb2f738cdb11?d=identicon&version=1",
            "client": "website",
            "content": "<p>Have you seen <a href=\"https://www.youtube.com/watch?v=seVSlKazsNk\" target=\"_blank\" title=\"https://www.youtube.com/watch?v=seVSlKazsNk\">Point-Free or Die: Tacit Programming in Haskell and Beyond</a></p>\n<div class=\"youtube-video message_inline_image\"><a data-id=\"seVSlKazsNk\" href=\"https://www.youtube.com/watch?v=seVSlKazsNk\" target=\"_blank\" title=\"https://www.youtube.com/watch?v=seVSlKazsNk\"><img src=\"https://i.ytimg.com/vi/seVSlKazsNk/default.jpg\"></a></div>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 116649630,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "vaibhavsagar@gmail.com",
            "sender_full_name": "Vaibhav Sagar (he) (F1'16)",
            "sender_id": 100041,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Forward Pipe",
            "submessages": [],
            "timestamp": 1507077247,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/a2cc22089e70c6b1e9a84d91ac82118ab06aa82a?x=x&version=2",
            "client": "website",
            "content": "<p>That question of <code>|&gt;</code>and the style in Haskell came up in the comments here: <a href=\"https://lobste.rs/s/k2b6hp/on_reaction_flow_2015\" target=\"_blank\" title=\"https://lobste.rs/s/k2b6hp/on_reaction_flow_2015\">https://lobste.rs/s/k2b6hp/on_reaction_flow_2015</a></p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 116668983,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "peter@push.cx",
            "sender_full_name": "Peter Bhat Harkins (he) (F2'17)",
            "sender_id": 102004,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Forward Pipe",
            "submessages": [],
            "timestamp": 1507122725,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/a2cc22089e70c6b1e9a84d91ac82118ab06aa82a?x=x&version=2",
            "client": "website",
            "content": "<p>And now that I get it what it's doing, I offer this implementation: <code>(|&gt;) = flip ($)</code></p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 116669112,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "peter@push.cx",
            "sender_full_name": "Peter Bhat Harkins (he) (F2'17)",
            "sender_id": 102004,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Forward Pipe",
            "submessages": [],
            "timestamp": 1507123033,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/8ede63f05c0a949ad0dce6b1e120fa5f2a1cc72a?x=x&version=2",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"vaibhavsagar@gmail.com\" data-user-id=\"100041\">@Vaibhav Sagar (F1'16)</span> Watching this now to get my morning started. The question of what <em>communicates</em> better is fascinating. The implicit but important sub-question being: \"to what audience?\"</p>\n<p><span class=\"user-mention\" data-user-email=\"peter@push.cx\" data-user-id=\"102004\">@Peter Bhat Harkins (F2'17)</span> I tried <code>flip</code> the other day but got confused by some GHCi error messages.</p>\n<p>Reading/watching more about point-free, it's making more sense that existing Haskellers wouldn't like Flow, since it seems necessarily to imply a point-full style.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 116670146,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "danweasel@gmail.com",
            "sender_full_name": "Andrew Nichols (he) (F2'17)",
            "sender_id": 101997,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Forward Pipe",
            "submessages": [],
            "timestamp": 1507124964,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4d074af6cc341ef51b25bb2f738cdb11?d=identicon&version=1",
            "client": "website",
            "content": "<p>The trick is that <a href=\"http://hackage.haskell.org/package/base-4.10.0.0/docs/src/GHC.Base.html#flip\" target=\"_blank\" title=\"http://hackage.haskell.org/package/base-4.10.0.0/docs/src/GHC.Base.html#flip\"><code>flip</code></a> only works on the first two arguments of a function</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 116670211,
            "is_me_message": false,
            "last_edit_timestamp": 1507125127,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "vaibhavsagar@gmail.com",
            "sender_full_name": "Vaibhav Sagar (he) (F1'16)",
            "sender_id": 100041,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Forward Pipe",
            "submessages": [],
            "timestamp": 1507125045,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4d074af6cc341ef51b25bb2f738cdb11?d=identicon&version=1",
            "client": "website",
            "content": "<p>one problem I have with <code>|&gt;</code> is what to do when I want to pass <strong>two</strong> arguments to the next function. The fact that you can define <code>(.:) = (.).(.)</code> and use that for two arguments, and have that generalise to <code>(.).(.).(.)</code> onwards indicates that there's something really cool there that might be worth the unintuitive order of arguments</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 116670349,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "vaibhavsagar@gmail.com",
            "sender_full_name": "Vaibhav Sagar (he) (F1'16)",
            "sender_id": 100041,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Forward Pipe",
            "submessages": [],
            "timestamp": 1507125355,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4d074af6cc341ef51b25bb2f738cdb11?d=identicon&version=1",
            "client": "website",
            "content": "<p>Amar Shah mentions the blackbird combinator and I think he explains it better <img alt=\":smiley:\" class=\"emoji\" src=\"/static/generated/emoji/images/emoji/unicode/1f603.png\" title=\"smiley\"></p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 116670464,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "vaibhavsagar@gmail.com",
            "sender_full_name": "Vaibhav Sagar (he) (F1'16)",
            "sender_id": 100041,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Forward Pipe",
            "submessages": [],
            "timestamp": 1507125503,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/a2cc22089e70c6b1e9a84d91ac82118ab06aa82a?x=x&version=2",
            "client": "website",
            "content": "<p>Clojure has its <a href=\"https://clojure.org/guides/threading_macros\" target=\"_blank\" title=\"https://clojure.org/guides/threading_macros\">threading macro</a> <code>-&gt;</code> for this niche</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 116670619,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "peter@push.cx",
            "sender_full_name": "Peter Bhat Harkins (he) (F2'17)",
            "sender_id": 102004,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Forward Pipe",
            "submessages": [],
            "timestamp": 1507125777,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4d074af6cc341ef51b25bb2f738cdb11?d=identicon&version=1",
            "client": "website",
            "content": "<p>who needs macros when you have functions <img alt=\":smile:\" class=\"emoji\" src=\"/static/generated/emoji/images/emoji/unicode/1f604.png\" title=\"smile\">?</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 116671329,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "vaibhavsagar@gmail.com",
            "sender_full_name": "Vaibhav Sagar (he) (F1'16)",
            "sender_id": 100041,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Forward Pipe",
            "submessages": [],
            "timestamp": 1507126962,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/a2cc22089e70c6b1e9a84d91ac82118ab06aa82a?x=x&version=2",
            "client": "website",
            "content": "<p>It took me a minute to realize: when you want to pass two arguments to the next function, where is that second argument coming from? The preceding function could only have returned a single value so you must be bringing it in from outside the 'flow', so at that point wouldn't it just be a partially-applied function waiting for a single arg?</p>\n<p><code>'H' : \"ello\" |&gt; length |&gt; (+) 5</code> and maybe <code>|&gt; (+) 5</code> is <code>|&gt; add5  .... where add5 = (+) 5</code> or something.</p>\n<p>(And <span class=\"user-mention\" data-user-email=\"vaibhavsagar@gmail.com\" data-user-id=\"100041\">@Vaibhav Sagar (F1'16)</span>, I really appreciate the connections and concerns you've added to this discussion, thank you.)</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 116672148,
            "is_me_message": false,
            "last_edit_timestamp": 1507128402,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "peter@push.cx",
            "sender_full_name": "Peter Bhat Harkins (he) (F2'17)",
            "sender_id": 102004,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Forward Pipe",
            "submessages": [],
            "timestamp": 1507128329,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4d074af6cc341ef51b25bb2f738cdb11?d=identicon&version=1",
            "client": "website",
            "content": "<p>My pleasure! I wasn't very clear, so let me try an example. Consider the <code>fromMaybe</code> function:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"nf\">fromMaybe</span> <span class=\"n\">a</span> <span class=\"n\">m</span> <span class=\"ow\">=</span> <span class=\"kr\">case</span> <span class=\"n\">m</span> <span class=\"kr\">of</span>\n    <span class=\"kt\">Nothing</span> <span class=\"ow\">-&gt;</span> <span class=\"n\">a</span>\n    <span class=\"kt\">Just</span> <span class=\"n\">b</span>  <span class=\"ow\">-&gt;</span> <span class=\"n\">b</span>\n</pre></div>\n\n\n<p>Suppose I have another function that e.g. prepends a path:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"nf\">prependPath</span> <span class=\"n\">base</span> <span class=\"ow\">=</span> <span class=\"s\">&quot;/home/vaibhavsagar&quot;</span> <span class=\"o\">&lt;/&gt;</span> <span class=\"n\">base</span>\n</pre></div>\n\n\n<p>(Yes, this can be written point-free, but I promise that's not what I'm getting at)</p>\n<p>Now I want to plug these two functions together:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"nf\">makePath</span> <span class=\"n\">base</span> <span class=\"kr\">default</span> <span class=\"n\">maybeValue</span> <span class=\"ow\">=</span> <span class=\"n\">prependPath</span> <span class=\"n\">base</span> <span class=\"o\">$</span> <span class=\"n\">fromMaybe</span> <span class=\"kr\">default</span> <span class=\"n\">maybeValue</span>\n</pre></div>\n\n\n<p>So we have the same argument at the end of both the LHS and the RHS! If you have <a href=\"https://github.com/ndmitchell/hlint#readme\" target=\"_blank\" title=\"https://github.com/ndmitchell/hlint#readme\"><code>HLint</code></a> installed, it will helpfully point out the possibility of an eta-reduction (aside: please try <code>HLint</code>, it's fantastic)!</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"nf\">makePath</span> <span class=\"n\">base</span> <span class=\"kr\">default</span> <span class=\"ow\">=</span> <span class=\"n\">prependPath</span> <span class=\"n\">base</span> <span class=\"o\">.</span> <span class=\"n\">fromMaybe</span> <span class=\"kr\">default</span>\n</pre></div>\n\n\n<p>Fantastic, but we again have the same arguments at the end of the LHS and the RHS! Surely there is an easy point-free thing we can do, right?</p>\n<p>Right?</p>\n<p>Well, if you define <code>(.:) = (.).(.)</code>, then you can do</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"nf\">makePath</span> <span class=\"n\">base</span> <span class=\"ow\">=</span> <span class=\"n\">prependPath</span> <span class=\"n\">base</span> <span class=\"o\">.:</span> <span class=\"n\">fromMaybe</span>\n</pre></div>\n\n\n<p>So I would argue that I've passed the two arguments to <code>fromMaybe</code>, although in the opposite sense that you probably thought I meant.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 116672983,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "vaibhavsagar@gmail.com",
            "sender_full_name": "Vaibhav Sagar (he) (F1'16)",
            "sender_id": 100041,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Forward Pipe",
            "submessages": [],
            "timestamp": 1507129636,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4d074af6cc341ef51b25bb2f738cdb11?d=identicon&version=1",
            "client": "website",
            "content": "<p>Again, the cute thing is that this generalises to multiple arguments, so you could define <code>(.::) = (.).(.).(.)</code> if you find yourself itching to program more pointlessly.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 116673053,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "vaibhavsagar@gmail.com",
            "sender_full_name": "Vaibhav Sagar (he) (F1'16)",
            "sender_id": 100041,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Forward Pipe",
            "submessages": [],
            "timestamp": 1507129779,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/a2cc22089e70c6b1e9a84d91ac82118ab06aa82a?x=x&version=2",
            "client": "website",
            "content": "<p>Could you drop that into a gist? I get a parse error if I name the arg <code>default</code>and type errors even if I rename. I'd like to tinker but can't quite spot what's wrong.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 116674125,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "peter@push.cx",
            "sender_full_name": "Peter Bhat Harkins (he) (F2'17)",
            "sender_id": 102004,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Forward Pipe",
            "submessages": [],
            "timestamp": 1507131451,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4d074af6cc341ef51b25bb2f738cdb11?d=identicon&version=1",
            "client": "website",
            "content": "<p>I should have tried it before opining on Zulip <img alt=\":smiley:\" class=\"emoji\" src=\"/static/generated/emoji/images/emoji/unicode/1f603.png\" title=\"smiley\">, <code>default</code> is a keyword and my definition of <code>prependPath</code> is wrong. <a href=\"https://gist.github.com/vaibhavsagar/688dc28349d3eb85cd51449decd75722\" target=\"_blank\" title=\"https://gist.github.com/vaibhavsagar/688dc28349d3eb85cd51449decd75722\">Here is a gist</a>.</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kr\">module</span> <span class=\"nn\">Owl</span> <span class=\"kr\">where</span>\n\n<span class=\"kr\">import</span> <span class=\"nn\">System.FilePath</span> <span class=\"p\">((</span><span class=\"o\">&lt;/&gt;</span><span class=\"p\">))</span>\n\n<span class=\"nf\">fromMaybe</span> <span class=\"ow\">::</span> <span class=\"n\">a</span> <span class=\"ow\">-&gt;</span> <span class=\"kt\">Maybe</span> <span class=\"n\">a</span> <span class=\"ow\">-&gt;</span> <span class=\"n\">a</span>\n<span class=\"nf\">fromMaybe</span> <span class=\"n\">a</span> <span class=\"n\">m</span> <span class=\"ow\">=</span> <span class=\"kr\">case</span> <span class=\"n\">m</span> <span class=\"kr\">of</span>\n    <span class=\"kt\">Nothing</span> <span class=\"ow\">-&gt;</span> <span class=\"n\">a</span>\n    <span class=\"kt\">Just</span> <span class=\"n\">b</span>  <span class=\"ow\">-&gt;</span> <span class=\"n\">b</span>\n\n<span class=\"nf\">prependPath</span> <span class=\"ow\">::</span> <span class=\"kt\">FilePath</span> <span class=\"ow\">-&gt;</span> <span class=\"kt\">FilePath</span> <span class=\"ow\">-&gt;</span> <span class=\"kt\">FilePath</span>\n<span class=\"nf\">prependPath</span> <span class=\"n\">dir</span> <span class=\"n\">base</span> <span class=\"ow\">=</span> <span class=\"n\">dir</span> <span class=\"o\">&lt;/&gt;</span> <span class=\"n\">base</span>\n\n<span class=\"nf\">makePath&#39;&#39;</span><span class=\"p\">,</span> <span class=\"n\">makePath&#39;</span><span class=\"p\">,</span> <span class=\"n\">makePath</span> <span class=\"ow\">::</span> <span class=\"kt\">FilePath</span> <span class=\"ow\">-&gt;</span> <span class=\"kt\">FilePath</span> <span class=\"ow\">-&gt;</span> <span class=\"kt\">Maybe</span> <span class=\"kt\">FilePath</span> <span class=\"ow\">-&gt;</span> <span class=\"kt\">FilePath</span>\n\n<span class=\"nf\">makePath&#39;&#39;</span> <span class=\"n\">dir</span> <span class=\"n\">def</span> <span class=\"n\">maybeValue</span> <span class=\"ow\">=</span> <span class=\"n\">prependPath</span> <span class=\"n\">dir</span> <span class=\"o\">$</span> <span class=\"n\">fromMaybe</span> <span class=\"n\">def</span> <span class=\"n\">maybeValue</span>\n\n<span class=\"nf\">makePath&#39;</span>  <span class=\"n\">dir</span> <span class=\"n\">def</span> <span class=\"ow\">=</span> <span class=\"n\">prependPath</span> <span class=\"n\">dir</span> <span class=\"o\">.</span> <span class=\"n\">fromMaybe</span> <span class=\"n\">def</span>\n\n<span class=\"p\">(</span><span class=\"o\">.:</span><span class=\"p\">)</span> <span class=\"ow\">::</span> <span class=\"p\">(</span><span class=\"n\">b</span> <span class=\"ow\">-&gt;</span> <span class=\"n\">c</span><span class=\"p\">)</span> <span class=\"ow\">-&gt;</span> <span class=\"p\">(</span><span class=\"n\">d</span> <span class=\"ow\">-&gt;</span> <span class=\"n\">a</span> <span class=\"ow\">-&gt;</span> <span class=\"n\">b</span><span class=\"p\">)</span> <span class=\"ow\">-&gt;</span> <span class=\"n\">d</span> <span class=\"ow\">-&gt;</span> <span class=\"n\">a</span> <span class=\"ow\">-&gt;</span> <span class=\"n\">c</span>\n<span class=\"p\">(</span><span class=\"o\">.:</span><span class=\"p\">)</span> <span class=\"ow\">=</span> <span class=\"p\">(</span><span class=\"o\">.</span><span class=\"p\">)</span> <span class=\"o\">.</span> <span class=\"p\">(</span><span class=\"o\">.</span><span class=\"p\">)</span>\n\n<span class=\"nf\">makePath</span> <span class=\"n\">base</span> <span class=\"ow\">=</span> <span class=\"n\">prependPath</span> <span class=\"n\">base</span> <span class=\"o\">.:</span> <span class=\"n\">fromMaybe</span>\n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 116692915,
            "is_me_message": false,
            "last_edit_timestamp": 1507162823,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "vaibhavsagar@gmail.com",
            "sender_full_name": "Vaibhav Sagar (he) (F1'16)",
            "sender_id": 100041,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Forward Pipe",
            "submessages": [],
            "timestamp": 1507162787,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/8ede63f05c0a949ad0dce6b1e120fa5f2a1cc72a?x=x&version=2",
            "client": "website",
            "content": "<p>Anyone want to join me in the Thursday activity \"coding bee\"?</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 116731421,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "danweasel@gmail.com",
            "sender_full_name": "Andrew Nichols (he) (F2'17)",
            "sender_id": 101997,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "fall 2 Haskell study group",
            "submessages": [],
            "timestamp": 1507235966,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/8393210b98b504e92071066321ec32c297574496?x=x&version=3",
            "client": "website",
            "content": "<p>yeah i'll do it lol</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 116731431,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "c@polygon.pizza",
            "sender_full_name": "coco Walsh (they) (m5'20)",
            "sender_id": 102029,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "fall 2 Haskell study group",
            "submessages": [],
            "timestamp": 1507235998,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/8ede63f05c0a949ad0dce6b1e120fa5f2a1cc72a?x=x&version=2",
            "client": "website",
            "content": "<p>I found myself wanting to take a list of Maybes and get back just the list of actual values:</p>\n<div class=\"codehilite\"><pre><span></span>onlyJust xs =\n  map (\\x -&gt; fromJust x) $ filter (\\x -&gt; x /= Nothing) xs\n</pre></div>\n\n\n<p>was my solution, but I'm guessing there's probably a library function somewhere that will do this directly.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 116766095,
            "is_me_message": false,
            "last_edit_timestamp": 1507306352,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "danweasel@gmail.com",
            "sender_full_name": "Andrew Nichols (he) (F2'17)",
            "sender_id": 101997,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "[Maybe a] -> [a]",
            "submessages": [],
            "timestamp": 1507306204,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/8ede63f05c0a949ad0dce6b1e120fa5f2a1cc72a?x=x&version=2",
            "client": "website",
            "content": "<p>Edited the title, since I guess what I really want is <code>[Maybe a] -&gt; [a]</code>, not <code>Maybe [a] -&gt; [a]</code></p>\n<p>Maybe having that right would have helped me find what I wanted on Hoogle</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 116766234,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "danweasel@gmail.com",
            "sender_full_name": "Andrew Nichols (he) (F2'17)",
            "sender_id": 101997,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "[Maybe a] -> [a]",
            "submessages": [],
            "timestamp": 1507306404,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/333bbc33b9eca3de56596185538e752c4e82dd63?x=x&version=4",
            "client": "website",
            "content": "<p>re library function: it looks like there's <code>catMaybes :: [Maybe a] -&gt; [a]</code> :) It\u2019s implemented as a list comprehension</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 116766236,
            "is_me_message": false,
            "last_edit_timestamp": 1507306481,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "mnoronha@uchicago.edu",
            "sender_full_name": "Michael Noronha (he) (S2'20)",
            "sender_id": 101318,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Maybe [a] -> [a]",
            "submessages": [],
            "timestamp": 1507306411,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/8ede63f05c0a949ad0dce6b1e120fa5f2a1cc72a?x=x&version=2",
            "client": "website",
            "content": "<p>I guess it would have helped if I had the signature right in my head. ;) Thanks!</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 116766300,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "danweasel@gmail.com",
            "sender_full_name": "Andrew Nichols (he) (F2'17)",
            "sender_id": 101997,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Maybe [a] -> [a]",
            "submessages": [],
            "timestamp": 1507306509,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/81c6c8040fc0263607edd05c09dacf6b?d=identicon&version=1",
            "client": "website",
            "content": "<p>The definition of <code>catMaybes</code> is</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"nf\">catMaybes</span> <span class=\"n\">ls</span> <span class=\"ow\">=</span> <span class=\"p\">[</span><span class=\"n\">x</span> <span class=\"o\">|</span> <span class=\"kt\">Just</span> <span class=\"n\">x</span> <span class=\"ow\">&lt;-</span> <span class=\"n\">ls</span><span class=\"p\">]</span>\n</pre></div>\n\n\n<p>which is pretty nice, although I for some reason expected some lifting magic (but on second thought realized that would be only for putting things in).</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 116766355,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "julian@cipht.net",
            "sender_full_name": "Julian Squires (he) (F2'17)",
            "sender_id": 101992,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Maybe [a] -> [a]",
            "submessages": [],
            "timestamp": 1507306610,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/8ede63f05c0a949ad0dce6b1e120fa5f2a1cc72a?x=x&version=2",
            "client": "website",
            "content": "<p>I like list comprehensions in Python, so it'll be worthwhile to learn how they work in Haskell</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 116766414,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "danweasel@gmail.com",
            "sender_full_name": "Andrew Nichols (he) (F2'17)",
            "sender_id": 101997,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Maybe [a] -> [a]",
            "submessages": [],
            "timestamp": 1507306725,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/8393210b98b504e92071066321ec32c297574496?x=x&version=3",
            "client": "website",
            "content": "<p>i'm feeling a bit under the weather today so i'm probably not going to come in today-- what chapter should we read up to for Wednesday?</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 116874506,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "c@polygon.pizza",
            "sender_full_name": "coco Walsh (they) (m5'20)",
            "sender_id": 102029,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "fall 2 Haskell study group",
            "submessages": [],
            "timestamp": 1507560681,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/a2cc22089e70c6b1e9a84d91ac82118ab06aa82a?x=x&version=2",
            "client": "website",
            "content": "<p>I think one more chapter is probably plenty... next is 8, Recursion. It's short but deep.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 116875788,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f602",
                    "emoji_name": "joy",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "c@polygon.pizza",
                        "full_name": "coco Walsh (they) (m5'20)",
                        "id": 102029
                    },
                    "user_id": 102029
                },
                {
                    "emoji_code": "1f602",
                    "emoji_name": "joy",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "danweasel@gmail.com",
                        "full_name": "Andrew Nichols (he) (F2'17)",
                        "id": 101997
                    },
                    "user_id": 101997
                }
            ],
            "recipient_id": 22667,
            "sender_email": "peter@push.cx",
            "sender_full_name": "Peter Bhat Harkins (he) (F2'17)",
            "sender_id": 102004,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "fall 2 Haskell study group",
            "submessages": [],
            "timestamp": 1507563008,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4d074af6cc341ef51b25bb2f738cdb11?d=identicon&version=1",
            "client": "website",
            "content": "<p>Some would say unbounded.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 116875812,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "vaibhavsagar@gmail.com",
            "sender_full_name": "Vaibhav Sagar (he) (F1'16)",
            "sender_id": 100041,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "fall 2 Haskell study group",
            "submessages": [],
            "timestamp": 1507563065,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/8ede63f05c0a949ad0dce6b1e120fa5f2a1cc72a?x=x&version=2",
            "client": "website",
            "content": "<p>Hope you feel better, <span class=\"user-mention\" data-user-email=\"connorrobinsonwalsh@gmail.com\" data-user-id=\"102029\">@Connor Walsh (F2'17)</span></p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 116876469,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f64f",
                    "emoji_name": "pray",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "c@polygon.pizza",
                        "full_name": "coco Walsh (they) (m5'20)",
                        "id": 102029
                    },
                    "user_id": 102029
                }
            ],
            "recipient_id": 22667,
            "sender_email": "danweasel@gmail.com",
            "sender_full_name": "Andrew Nichols (he) (F2'17)",
            "sender_id": 101997,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "fall 2 Haskell study group",
            "submessages": [],
            "timestamp": 1507564205,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/8ede63f05c0a949ad0dce6b1e120fa5f2a1cc72a?x=x&version=2",
            "client": "website",
            "content": "<p>I enjoyed reading this <a href=\"http://www.haskellforall.com/2016/04/worst-practices-should-be-hard.html\" target=\"_blank\" title=\"http://www.haskellforall.com/2016/04/worst-practices-should-be-hard.html\">article</a>. The broader idea of guiding behavior not with rules but by setting up a incentive structure has been a interest of mine for a while now.</p>\n<p>May revisit this when I know more, to keep in mind the areas where Haskell does <em>not</em> incentivize the right thing.</p>\n<p>Oh and for the <span class=\"emoji emoji-1f606\" title=\"laughing\">:laughing:</span>  from the linked article:</p>\n<blockquote>\n<p>From an outside perspective, the typical progression of a Haskell programmer might look something like this:</p>\n<p>Week 1: \"How r monad formed?\"<br>\n   Week 2: \"What is the difference between Applicative+Category and Arrow?\"<br>\n   Week 3: \"I'm beginning a PhD in polymorphic type family recursion constraints\"<br>\n   Week 4: \"I created my own language because Haskell's not powerful enough\"</p>\n</blockquote>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 116876573,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "danweasel@gmail.com",
            "sender_full_name": "Andrew Nichols (he) (F2'17)",
            "sender_id": 101997,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Worst Practices Should be Hard",
            "submessages": [],
            "timestamp": 1507564435,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/a5990ea1928ad47ec4fc3b7998607178?d=identicon&version=1",
            "client": "ZulipMobile",
            "content": "<p>Hmm.  I wonder about one thing in that article, but it's kind of a big one:  why is having effects a \"worst practice?\"  </p>\n<p>Of course, there are all the standard costs to i/o, risk of race conditions with concurrency, additional complexity, etc.  But since all software ultimately has to do something, it seems a little... much?... to say that io is a \"worst practice\" that ought to be made more difficult in order to encourage programmers to do less of it!</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 116877530,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "paul.gowder@gmail.com",
            "sender_full_name": "Paul Gowder (S2'17)",
            "sender_id": 101322,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Worst Practices Should be Hard",
            "submessages": [],
            "timestamp": 1507566181,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/81c6c8040fc0263607edd05c09dacf6b?d=identicon&version=1",
            "client": "website",
            "content": "<p>Something missing from this article, but relevant to this philosophy is examining why Ada failed.  It's the ultimate in the previous generation of \"worst practices should be hard\" languages.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 116877973,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "julian@cipht.net",
            "sender_full_name": "Julian Squires (he) (F2'17)",
            "sender_id": 101992,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Worst Practices Should be Hard",
            "submessages": [],
            "timestamp": 1507567027,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/159e0dcf4be0b3add35f61779cc41c89ea10c398?x=x&version=2",
            "client": "ZulipElectron",
            "content": "<p><a href=\"https://github.com/lmj/cayley-dickson/blob/master/src/Math/CayleyDickson.hs\" target=\"_blank\" title=\"https://github.com/lmj/cayley-dickson/blob/master/src/Math/CayleyDickson.hs\">https://github.com/lmj/cayley-dickson/blob/master/src/Math/CayleyDickson.hs</a></p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 116884156,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "o.awomosu@gmail.com",
            "sender_full_name": "Femi Awomosu (m6'19)",
            "sender_id": 101990,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "fall 2 Haskell study group",
            "submessages": [],
            "timestamp": 1507578387,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4d074af6cc341ef51b25bb2f738cdb11?d=identicon&version=1",
            "client": "website",
            "content": "<p>One area where IMHO Haskell does not incentivise the right thing is primitive data types. AFAICT you have <code>Bool</code>, <code>Int/Integer/Float/Double</code>, <code>Char</code>, and singly-linked lists. That's all. <code>String</code> is just <code>[Char]</code> which is <a href=\"https://mmhaskell.com/blog/2017/5/15/untangling-haskells-strings\" target=\"_blank\" title=\"https://mmhaskell.com/blog/2017/5/15/untangling-haskells-strings\">memory-intensive and usually bad for performance</a>. Singly-linked lists are great for pattern-matching and consuming in order but <a href=\"http://www.imn.htwk-leipzig.de/~waldmann/etc/untutorial/list-or-not-list/\" target=\"_blank\" title=\"http://www.imn.htwk-leipzig.de/~waldmann/etc/untutorial/list-or-not-list/\">terrible otherwise</a>. Although Haskell has high-performance data structures, they require pulling in external dependencies and can be very clumsy to use.</p>\n<p><code>String</code> done right? Import <code>Data.Text</code>. Do you want the strict or lazy version? What's the difference?<br>\nBytestrings? Import <code>Data.ByteString</code>. Do you want the strict or lazy version? What's the difference?<br>\nSets and dicts? Import <code>Data.Set</code>, <code>Data.Map</code>, or <code>Data.IntMap</code> from <code>containers</code>. Same question about strict or lazy.<br>\nOh, you want sets and dicts without an <code>Ord</code> constraint? Look at <code>unordered-containers</code>! Again, strict or lazy?</p>\n<p>I could go on, but I think I've made my point <span class=\"emoji emoji-1f604\" title=\"smile\">:smile:</span>. I love Haskell, but it has <a href=\"https://lorepub.com/post/2016-12-17-Haskell-Pitfalls\" target=\"_blank\" title=\"https://lorepub.com/post/2016-12-17-Haskell-Pitfalls\">its fair share of pitfalls</a>.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 116900107,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f4af",
                    "emoji_name": "100",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "jason.a.owen@gmail.com",
                        "full_name": "Jason Owen (SP2'19)",
                        "id": 100450
                    },
                    "user_id": 100450
                }
            ],
            "recipient_id": 22667,
            "sender_email": "vaibhavsagar@gmail.com",
            "sender_full_name": "Vaibhav Sagar (he) (F1'16)",
            "sender_id": 100041,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Worst Practices Should be Hard",
            "submessages": [],
            "timestamp": 1507612914,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/8ede63f05c0a949ad0dce6b1e120fa5f2a1cc72a?x=x&version=2",
            "client": "website",
            "content": "<p>Thanks for that last link <span class=\"user-mention\" data-user-email=\"vaibhavsagar@gmail.com\" data-user-id=\"100041\">@Vaibhav Sagar (F1'16)</span> . I ran into partial functions early on: it's really too bad that really common functions like <code>head</code> and <code>tail</code> are done that way.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 116912513,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "danweasel@gmail.com",
            "sender_full_name": "Andrew Nichols (he) (F2'17)",
            "sender_id": 101997,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Worst Practices Should be Hard",
            "submessages": [],
            "timestamp": 1507642225,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/8ede63f05c0a949ad0dce6b1e120fa5f2a1cc72a?x=x&version=2",
            "client": "website",
            "content": "<p>I'm coming around on defining the \"work\" of the function in a simple way, and then later specifying the variable names in a where clause.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 117047698,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "danweasel@gmail.com",
            "sender_full_name": "Andrew Nichols (he) (F2'17)",
            "sender_id": 101997,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "fall 2 Haskell study group",
            "submessages": [],
            "timestamp": 1507909147,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/8ede63f05c0a949ad0dce6b1e120fa5f2a1cc72a?x=x&version=2",
            "client": "website",
            "content": "<p>Also pointfree composition makes for some nicely readable high level functions.</p>\n<div class=\"codehilite\"><pre><span></span>wordNumber :: Int -&gt; String\nwordNumber =\n  concat . intersperse &quot;-&quot; . map digitToWord . digits\n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 117047913,
            "is_me_message": false,
            "last_edit_timestamp": 1507909571,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "danweasel@gmail.com",
            "sender_full_name": "Andrew Nichols (he) (F2'17)",
            "sender_id": 101997,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "fall 2 Haskell study group",
            "submessages": [],
            "timestamp": 1507909443,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4d074af6cc341ef51b25bb2f738cdb11?d=identicon&version=1",
            "client": "website",
            "content": "<p>This is the best blog post about beginning Haskell I have ever read: <a href=\"http://www.haskellforall.com/2017/10/advice-for-haskell-beginners.html\" target=\"_blank\" title=\"http://www.haskellforall.com/2017/10/advice-for-haskell-beginners.html\">http://www.haskellforall.com/2017/10/advice-for-haskell-beginners.html</a></p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 117172376,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "vaibhavsagar@gmail.com",
            "sender_full_name": "Vaibhav Sagar (he) (F1'16)",
            "sender_id": 100041,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Advice for Haskell beginners",
            "submessages": [],
            "timestamp": 1508166483,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/8ede63f05c0a949ad0dce6b1e120fa5f2a1cc72a?x=x&version=2",
            "client": "website",
            "content": "<p>The <a href=\"https://wiki.haskell.org/H-99:_Ninety-Nine_Haskell_Problems\" target=\"_blank\" title=\"https://wiki.haskell.org/H-99:_Ninety-Nine_Haskell_Problems\">99 Haskell Problems</a> are linked in chapter 9 of the book, and look quite entertaining. :)</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 117175664,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "danweasel@gmail.com",
            "sender_full_name": "Andrew Nichols (he) (F2'17)",
            "sender_id": 101997,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "fall 2 Haskell study group",
            "submessages": [],
            "timestamp": 1508172127,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/8393210b98b504e92071066321ec32c297574496?x=x&version=3",
            "client": "website",
            "content": "<p><a href=\"https://math.stackexchange.com/questions/146887/whats-the-difference-between-a-monoid-and-a-group\" target=\"_blank\" title=\"https://math.stackexchange.com/questions/146887/whats-the-difference-between-a-monoid-and-a-group\">https://math.stackexchange.com/questions/146887/whats-the-difference-between-a-monoid-and-a-group</a></p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 117181728,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "c@polygon.pizza",
            "sender_full_name": "coco Walsh (they) (m5'20)",
            "sender_id": 102029,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "fall 2 Haskell study group",
            "submessages": [],
            "timestamp": 1508183049,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/a6a0ff0a4a9a86ae7bc4524453d439bd?d=identicon&version=1",
            "client": "website",
            "content": "<p>I was trying to reason about whether something I wrote yesterday streamed data from a file or dumped it all into memory, and bumped into <a href=\"https://ianthehenry.com/2016/3/9/lazy-io/\" target=\"_blank\" title=\"https://ianthehenry.com/2016/3/9/lazy-io/\">this</a> completely delightful article where someone debugs a problem caused when they try to read from a file and write what they read directly back into the same file. I love the sequence of experiments, and I hadn't seen dtruss before but I love articles where people dump the low level details.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 117216089,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "annie.cherk@gmail.com",
            "sender_full_name": "Annie Cherkaev (she/they) (m4'18)",
            "sender_id": 9502,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "lazy IO",
            "submessages": [],
            "timestamp": 1508254164,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/661412d42ecbf0c0bd354116859a5af3562f8e5f?x=x&version=4",
            "client": "website",
            "content": "<p>i bumped into the same problem while at RC (working on my <a href=\"https://github.com/hellerve/bc\" target=\"_blank\" title=\"https://github.com/hellerve/bc\">BC</a> implementation, specifically its editline capabilities) and before, when I was working on file handling in the reference implementation of my programming language. i never get used to this and always scratch my head for a bit before realizing my mistake.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 117216228,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "veit@veitheller.de",
            "sender_full_name": "Veit Heller (he) (S1'17)",
            "sender_id": 101103,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "lazy IO",
            "submessages": [],
            "timestamp": 1508254371,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/661412d42ecbf0c0bd354116859a5af3562f8e5f?x=x&version=4",
            "client": "website",
            "content": "<p>i discovered that length trick myself back then, and never documented it. i suppose i\u2019m glad someone had more presence of mind.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 117216323,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "veit@veitheller.de",
            "sender_full_name": "Veit Heller (he) (S1'17)",
            "sender_id": 101103,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "lazy IO",
            "submessages": [],
            "timestamp": 1508254556,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/5d6a7a4735c43e9dae0e3f9ef82919706728452a?x=x&version=3",
            "client": "website",
            "content": "<p>I'm trying to implement some binary tree operations in haskell. I have:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kr\">data</span> <span class=\"kt\">Tree</span> <span class=\"n\">a</span> <span class=\"ow\">=</span> <span class=\"kt\">Empty</span> <span class=\"o\">|</span> <span class=\"kt\">Node</span> <span class=\"p\">(</span><span class=\"kt\">Tree</span> <span class=\"n\">a</span><span class=\"p\">)</span> <span class=\"n\">a</span> <span class=\"p\">(</span><span class=\"kt\">Tree</span> <span class=\"n\">a</span><span class=\"p\">)</span>\n</pre></div>\n\n\n<p>What's the syntax for getting a value out of an instance of Tree?</p>\n<p>CC <span class=\"user-mention\" data-user-email=\"vaibhavsagar@gmail.com\" data-user-id=\"100041\">@Vaibhav Sagar (F1'16)</span> just cause' you're online and know haskell :)</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 117244443,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "me@wesleyac.com",
            "sender_full_name": "Wesley Aptekar-Cassels (they) (m8'20)",
            "sender_id": 101330,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "BST help",
            "submessages": [],
            "timestamp": 1508306758,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/5d6a7a4735c43e9dae0e3f9ef82919706728452a?x=x&version=3",
            "client": "website",
            "content": "<p>Most of the stuff I can find online just talks about defining types, not using them :P</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 117244484,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "me@wesleyac.com",
            "sender_full_name": "Wesley Aptekar-Cassels (they) (m8'20)",
            "sender_id": 101330,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "BST help",
            "submessages": [],
            "timestamp": 1508306817,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/5d6a7a4735c43e9dae0e3f9ef82919706728452a?x=x&version=3",
            "client": "website",
            "content": "<p>Oh, do I need to bind them in the function call?</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 117244529,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "me@wesleyac.com",
            "sender_full_name": "Wesley Aptekar-Cassels (they) (m8'20)",
            "sender_id": 101330,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "BST help",
            "submessages": [],
            "timestamp": 1508306942,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4d074af6cc341ef51b25bb2f738cdb11?d=identicon&version=1",
            "client": "website",
            "content": "<p>Pattern matching!</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"nf\">someTree</span> <span class=\"ow\">=</span> <span class=\"kt\">Node</span> <span class=\"kt\">Empty</span> <span class=\"s\">&quot;hello&quot;</span> <span class=\"kt\">Empty</span>\n<span class=\"p\">(</span><span class=\"kt\">Node</span> <span class=\"kr\">_</span> <span class=\"n\">value</span> <span class=\"kr\">_</span><span class=\"p\">)</span> <span class=\"ow\">=</span> <span class=\"n\">someTree</span>\n<span class=\"nf\">print</span> <span class=\"n\">value</span>\n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 117244534,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "thumbs_up",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "me@wesleyac.com",
                        "full_name": "Wesley Aptekar-Cassels (they) (m8'20)",
                        "id": 101330
                    },
                    "user_id": 101330
                }
            ],
            "recipient_id": 22667,
            "sender_email": "vaibhavsagar@gmail.com",
            "sender_full_name": "Vaibhav Sagar (he) (F1'16)",
            "sender_id": 100041,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "BST help",
            "submessages": [],
            "timestamp": 1508306965,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/5d6a7a4735c43e9dae0e3f9ef82919706728452a?x=x&version=3",
            "client": "website",
            "content": "<p>Thanks! I have this now:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kr\">data</span> <span class=\"kt\">Tree</span> <span class=\"n\">a</span> <span class=\"ow\">=</span> <span class=\"kt\">Empty</span> <span class=\"o\">|</span> <span class=\"kt\">Node</span> <span class=\"p\">(</span><span class=\"kt\">Tree</span> <span class=\"n\">a</span><span class=\"p\">)</span> <span class=\"n\">a</span> <span class=\"p\">(</span><span class=\"kt\">Tree</span> <span class=\"n\">a</span><span class=\"p\">)</span>\n\n<span class=\"nf\">find</span> <span class=\"ow\">::</span> <span class=\"kt\">Tree</span> <span class=\"n\">a</span> <span class=\"ow\">-&gt;</span> <span class=\"n\">a</span> <span class=\"ow\">-&gt;</span> <span class=\"kt\">Bool</span>\n<span class=\"nf\">find</span> <span class=\"kt\">Empty</span> <span class=\"kr\">_</span> <span class=\"ow\">=</span> <span class=\"kt\">False</span>\n<span class=\"nf\">find</span> <span class=\"p\">(</span><span class=\"kt\">Node</span> <span class=\"n\">lhs</span> <span class=\"n\">val</span> <span class=\"n\">rhs</span><span class=\"p\">)</span> <span class=\"n\">needle</span>\n    <span class=\"o\">|</span> <span class=\"n\">val</span> <span class=\"o\">==</span> <span class=\"n\">needle</span> <span class=\"ow\">=</span> <span class=\"kt\">True</span>\n    <span class=\"o\">|</span> <span class=\"n\">val</span> <span class=\"o\">&gt;</span> <span class=\"n\">needle</span> <span class=\"ow\">=</span> <span class=\"n\">find</span> <span class=\"n\">lhs</span> <span class=\"n\">needle</span>\n    <span class=\"o\">|</span> <span class=\"n\">val</span> <span class=\"o\">&lt;</span> <span class=\"n\">needle</span> <span class=\"ow\">=</span> <span class=\"n\">find</span> <span class=\"n\">rhs</span> <span class=\"n\">needle</span>\n</pre></div>\n\n\n<p>Which I think should work, but gives the error:</p>\n<div class=\"codehilite\"><pre><span></span>tree.hs:7:11: error:\n    \u2022 No instance for (Ord a) arising from a use of \u2018&gt;\u2019\n      Possible fix:\n        add (Ord a) to the context of\n          the type signature for:\n            find :: Tree a -&gt; a -&gt; Bool\n    \u2022 In the expression: val &gt; needle\n      In a stmt of a pattern guard for\n                     an equation for \u2018find\u2019:\n        val &gt; needle\n      In an equation for \u2018find\u2019:\n          find (Node lhs val rhs) needle\n            | val == needle = True\n            | val &gt; needle = find lhs needle\n            | val &lt; needle = find rhs needle\n</pre></div>\n\n\n<p>What am I not understanding here?</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 117245414,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "me@wesleyac.com",
            "sender_full_name": "Wesley Aptekar-Cassels (they) (m8'20)",
            "sender_id": 101330,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "BST help",
            "submessages": [],
            "timestamp": 1508309214,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/5d6a7a4735c43e9dae0e3f9ef82919706728452a?x=x&version=3",
            "client": "website",
            "content": "<p>Oh, I think I see - I need to specify that a needs to be ord (presumably orderable?). What is the syntax for that?</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 117245457,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "me@wesleyac.com",
            "sender_full_name": "Wesley Aptekar-Cassels (they) (m8'20)",
            "sender_id": 101330,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "BST help",
            "submessages": [],
            "timestamp": 1508309287,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/5d6a7a4735c43e9dae0e3f9ef82919706728452a?x=x&version=3",
            "client": "website",
            "content": "<p>It seems to work with the signature of find being <code>find :: Ord a =&gt; Tree a -&gt; a -&gt; Bool</code>, but I think that the ord constraint should probably be on the tree, since it's supposed to be a BST. Is there a way to specify that?</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 117245697,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "me@wesleyac.com",
            "sender_full_name": "Wesley Aptekar-Cassels (they) (m8'20)",
            "sender_id": 101330,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "BST help",
            "submessages": [],
            "timestamp": 1508309895,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4d074af6cc341ef51b25bb2f738cdb11?d=identicon&version=1",
            "client": "website",
            "content": "<p>Short answer: Your <code>find</code> signature (<code>find :: Ord a =&gt; Tree a -&gt; a -&gt; Bool</code>) is great as it is.<br>\nLong answer: There is a <code>{-# LANGUAGE DataTypeContexts #-}</code> extension that allows you to do what you say you want, but using it means you <a href=\"https://prime.haskell.org/wiki/NoDatatypeContexts\" target=\"_blank\" title=\"https://prime.haskell.org/wiki/NoDatatypeContexts\">still need to add the constraint to all the functions that use that data type</a>. The current best practice is to use GADTs, another language extension: <a href=\"https://wiki.haskell.org/Data_declaration_with_constraint\" target=\"_blank\" title=\"https://wiki.haskell.org/Data_declaration_with_constraint\">https://wiki.haskell.org/Data_declaration_with_constraint</a></p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 117250906,
            "is_me_message": false,
            "last_edit_timestamp": 1508327019,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "vaibhavsagar@gmail.com",
            "sender_full_name": "Vaibhav Sagar (he) (F1'16)",
            "sender_id": 100041,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "BST help",
            "submessages": [],
            "timestamp": 1508322383,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4d074af6cc341ef51b25bb2f738cdb11?d=identicon&version=1",
            "client": "website",
            "content": "<p>I have never used GADTs in Haskell, but with <code>{-# LANGUAGE GADTs #-}</code> you should be able to define something like</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kr\">data</span> <span class=\"kt\">Tree</span> <span class=\"n\">a</span> <span class=\"kr\">where</span>\n    <span class=\"kt\">Empty</span> <span class=\"ow\">::</span> <span class=\"kt\">Tree</span> <span class=\"n\">a</span>\n    <span class=\"kt\">Node</span>  <span class=\"ow\">::</span> <span class=\"p\">(</span><span class=\"kt\">Ord</span> <span class=\"n\">a</span><span class=\"p\">)</span> <span class=\"ow\">=&gt;</span> <span class=\"kt\">Tree</span> <span class=\"n\">a</span> <span class=\"ow\">-&gt;</span> <span class=\"n\">a</span> <span class=\"ow\">-&gt;</span> <span class=\"kt\">Tree</span> <span class=\"n\">a</span> <span class=\"ow\">-&gt;</span> <span class=\"kt\">Tree</span> <span class=\"n\">a</span>\n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 117251171,
            "is_me_message": false,
            "last_edit_timestamp": 1508323010,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "vaibhavsagar@gmail.com",
            "sender_full_name": "Vaibhav Sagar (he) (F1'16)",
            "sender_id": 100041,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "BST help",
            "submessages": [],
            "timestamp": 1508322975,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/8ede63f05c0a949ad0dce6b1e120fa5f2a1cc72a?x=x&version=2",
            "client": "website",
            "content": "<p>The only thing I'll add is that if you want to prevent the caller from populating the tree with a type that doesn't satisfy <code>Ord</code> in the first place, you could expose a \"smart constructor\" function that includes the constraint, and <em>not</em> expose the default data constructor.</p>\n<p>That won't prevent you from needing to include an <code>Ord a =&gt;</code> constraint on other functions though. The best I found poking around earlier this morning was the GADTs as above.</p>\n<p><span class=\"user-mention\" data-user-email=\"vaibhavsagar@gmail.com\" data-user-id=\"100041\">@Vaibhav Sagar (F1'16)</span> Do you know if there are any other implications to using GADTs? They do look useful.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 117253948,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "danweasel@gmail.com",
            "sender_full_name": "Andrew Nichols (he) (F2'17)",
            "sender_id": 101997,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "BST help",
            "submessages": [],
            "timestamp": 1508329318,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4d074af6cc341ef51b25bb2f738cdb11?d=identicon&version=1",
            "client": "website",
            "content": "<p>They're more complex. For example I can't add <code>deriving (Show)</code> to that declaration. Instead I have to enable <code>{-# LANGUAGE StandaloneDeriving #-}</code> and do</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kr\">deriving</span> <span class=\"kr\">instance</span> <span class=\"kt\">Show</span> <span class=\"n\">a</span> <span class=\"ow\">=&gt;</span> <span class=\"kt\">Show</span> <span class=\"p\">(</span><span class=\"kt\">Tree</span> <span class=\"n\">a</span><span class=\"p\">)</span>\n</pre></div>\n\n\n<p>because of the typeclass constraint or something like that. If you don't use the extra functionality, then there's no advantage over the simpler way <span class=\"emoji emoji-1f603\" title=\"smiley\">:smiley:</span></p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 117254063,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "vaibhavsagar@gmail.com",
            "sender_full_name": "Vaibhav Sagar (he) (F1'16)",
            "sender_id": 100041,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "BST help",
            "submessages": [],
            "timestamp": 1508329516,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/8ede63f05c0a949ad0dce6b1e120fa5f2a1cc72a?x=x&version=2",
            "client": "website",
            "content": "<p>I don't think I've ever seen a simpler fibonacci generator than this <code>scanl</code> approach. :)</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 117257380,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "danweasel@gmail.com",
            "sender_full_name": "Andrew Nichols (he) (F2'17)",
            "sender_id": 101997,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "fall 2 Haskell study group",
            "submessages": [],
            "timestamp": 1508336194,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/8393210b98b504e92071066321ec32c297574496?x=x&version=3",
            "client": "website",
            "content": "<p>I will be MIA today intermittently, so don't wait up for me to start</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 117260794,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "c@polygon.pizza",
            "sender_full_name": "coco Walsh (they) (m5'20)",
            "sender_id": 102029,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "fall 2 Haskell study group",
            "submessages": [],
            "timestamp": 1508342345,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/159e0dcf4be0b3add35f61779cc41c89ea10c398?x=x&version=2",
            "client": "ZulipElectron",
            "content": "<p>I won't be able to attend today's meeting</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 117535356,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "o.awomosu@gmail.com",
            "sender_full_name": "Femi Awomosu (m6'19)",
            "sender_id": 101990,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "fall 2 Haskell study group",
            "submessages": [],
            "timestamp": 1508772796,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/a2cc22089e70c6b1e9a84d91ac82118ab06aa82a?x=x&version=2",
            "client": "website",
            "content": "<p>Sorry to miss you, thanks for the heads up. If it's scheduled against an interview or something, I'm sure we'd be happy to move it so you can attend. It's the only thing I have scheduled today. <span class=\"user-mention\" data-user-email=\"danweasel@gmail.com\" data-user-id=\"101997\">@Andrew Nichols (F2'17)</span> <span class=\"user-mention\" data-user-email=\"connorrobinsonwalsh@gmail.com\" data-user-id=\"102029\">@Connor Walsh (F2'17)</span> ?</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 117535713,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "peter@push.cx",
            "sender_full_name": "Peter Bhat Harkins (he) (F2'17)",
            "sender_id": 102004,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "fall 2 Haskell study group",
            "submessages": [],
            "timestamp": 1508773328,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/8393210b98b504e92071066321ec32c297574496?x=x&version=3",
            "client": "ZulipMobile",
            "content": "<p>I actually might not be able to make it today as well-- I'm catching up on my lesson plans for this week for the class I teach in the mornings. I'd be happy to reschedule tomorrow afternoon, but also do not want to be a burden to anyone else's schedule</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 117536081,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "c@polygon.pizza",
            "sender_full_name": "coco Walsh (they) (m5'20)",
            "sender_id": 102029,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "(no topic)",
            "submessages": [],
            "timestamp": 1508773921,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/159e0dcf4be0b3add35f61779cc41c89ea10c398?x=x&version=2",
            "client": "ZulipElectron",
            "content": "<p>Sorry I've just seen this <span class=\"user-mention\" data-user-email=\"peter@push.cx\" data-user-id=\"102004\">@Peter Bhat Harkins (F2'17)</span> , <span class=\"user-mention\" data-user-email=\"danweasel@gmail.com\" data-user-id=\"101997\">@Andrew Nichols (F2'17)</span>, happy reschedule for tomorrow afternoon as suggested by <span class=\"user-mention\" data-user-email=\"connorrobinsonwalsh@gmail.com\" data-user-id=\"102029\">@Connor Walsh (F2'17)</span>  :)</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 117540835,
            "is_me_message": false,
            "last_edit_timestamp": 1508781424,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "o.awomosu@gmail.com",
            "sender_full_name": "Femi Awomosu (m6'19)",
            "sender_id": 101990,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "fall 2 Haskell study group",
            "submessages": [],
            "timestamp": 1508781163,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/a2cc22089e70c6b1e9a84d91ac82118ab06aa82a?x=x&version=2",
            "client": "website",
            "content": "<p>OK, see you at the usual time tomorrow.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 117541817,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "peter@push.cx",
            "sender_full_name": "Peter Bhat Harkins (he) (F2'17)",
            "sender_id": 102004,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "fall 2 Haskell study group",
            "submessages": [],
            "timestamp": 1508782704,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/8ede63f05c0a949ad0dce6b1e120fa5f2a1cc72a?x=x&version=2",
            "client": "website",
            "content": "<p><a href=\"http://www.haskellforall.com/2016/04/data-is-code.html\" target=\"_blank\" title=\"http://www.haskellforall.com/2016/04/data-is-code.html\">http://www.haskellforall.com/2016/04/data-is-code.html</a></p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 117589538,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "danweasel@gmail.com",
            "sender_full_name": "Andrew Nichols (he) (F2'17)",
            "sender_id": 101997,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "fall 2 Haskell study group",
            "submessages": [],
            "timestamp": 1508873012,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/8ede63f05c0a949ad0dce6b1e120fa5f2a1cc72a?x=x&version=2",
            "client": "website",
            "content": "<p>video on algebraic datatypes in category theory, heavy on the haskell for illustration:<br>\n<a href=\"https://youtu.be/w1WMykh7AxA\" target=\"_blank\" title=\"https://youtu.be/w1WMykh7AxA\">https://youtu.be/w1WMykh7AxA</a></p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 117589678,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "danweasel@gmail.com",
            "sender_full_name": "Andrew Nichols (he) (F2'17)",
            "sender_id": 101997,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "fall 2 Haskell study group",
            "submessages": [],
            "timestamp": 1508873257,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/3514240cecd66b31ef3b3a4a7ea235cc?d=identicon&version=1",
            "client": "website",
            "content": "<p>hey y'all, what are your <img alt=\":lambda:\" class=\"emoji\" src=\"https://zulip-avatars.s3.amazonaws.com/13/emoji/lambda.png\" title=\"lambda\">-enhancing text editors / IDEs / emacs modes of choice? </p>\n<p>right now i'm using emacs with the basic haskell mode. but the haskell project i'm working on has grown large and unwieldy enough that my current workflow of opening many tabs of split-screened emacs buffers in terminal, and running <code>ack</code> or <code>C-s</code> to figure out where and how things are defined in various files, is really slowing me down. help me soup up my ride! </p>\n<p>here's my bucket list of features:</p>\n<ul>\n<li>good auto-indenting</li>\n<li>keyboard-friendly (minimal mouse usage) and extensible</li>\n<li>IDE-type things like showing the type of an expression that i select, showing the definition/docstrings of a type or function that i select, showing module signatures, and autocomplete</li>\n<li>live typechecking (like flycheck with python)</li>\n<li>easily run ghc, ghci, hoogle, etc. in editor</li>\n<li>can have many tabs and split-screened buffers open</li>\n<li>good debugging features: stepping through execution, setting breakpoints, access to current variable values, stack traces, call graph</li>\n</ul>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 117591039,
            "is_me_message": false,
            "last_edit_timestamp": 1508875458,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "katherine.ye@gmail.com",
            "sender_full_name": "Katherine Ye (S'13)",
            "sender_id": 2117,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "haskell IDE/editor/mode",
            "submessages": [],
            "timestamp": 1508875402,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/efe57f0998df065470ff42c938f781cf?d=identicon&version=1",
            "client": "website",
            "content": "<p>Intero for emacs is the best one that I know of -- it didn't have all of your list, but as many as any editor I know of</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 117607260,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "libby@daydrea.me",
            "sender_full_name": "Libby Horacek (she) (SP1'15)",
            "sender_id": 7081,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "haskell IDE/editor/mode",
            "submessages": [],
            "timestamp": 1508906550,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4d074af6cc341ef51b25bb2f738cdb11?d=identicon&version=1",
            "client": "website",
            "content": "<p>I don't believe anything exists today that meets all your requirements, but we're slowly moving in that direction with things like <a href=\"https://github.com/haskell/haskell-ide-engine\" target=\"_blank\" title=\"https://github.com/haskell/haskell-ide-engine\">https://github.com/haskell/haskell-ide-engine</a> and <a href=\"https://github.com/RefactoringTools/HaRe\" target=\"_blank\" title=\"https://github.com/RefactoringTools/HaRe\">https://github.com/RefactoringTools/HaRe</a></p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 117619315,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "vaibhavsagar@gmail.com",
            "sender_full_name": "Vaibhav Sagar (he) (F1'16)",
            "sender_id": 100041,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "haskell IDE/editor/mode",
            "submessages": [],
            "timestamp": 1508934803,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4d074af6cc341ef51b25bb2f738cdb11?d=identicon&version=1",
            "client": "website",
            "content": "<p>Haskell's debugger support is also slowly getting better, the compiler <a href=\"https://ghc.haskell.org/trac/ghc/wiki/DWARF\" target=\"_blank\" title=\"https://ghc.haskell.org/trac/ghc/wiki/DWARF\">can be made to output DWARF</a> which means we can use GDB now and there are tools like <a href=\"http://conscientiousprogrammer.com/blog/2015/12/21/24-days-of-hackage-2015-day-21-hood-ghood-hoed-observation-oriented-debugging-in-haskell/\" target=\"_blank\" title=\"http://conscientiousprogrammer.com/blog/2015/12/21/24-days-of-hackage-2015-day-21-hood-ghood-hoed-observation-oriented-debugging-in-haskell/\">Hoed and GHood</a></p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 117619421,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "vaibhavsagar@gmail.com",
            "sender_full_name": "Vaibhav Sagar (he) (F1'16)",
            "sender_id": 100041,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "haskell IDE/editor/mode",
            "submessages": [],
            "timestamp": 1508935002,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4d074af6cc341ef51b25bb2f738cdb11?d=identicon&version=1",
            "client": "website",
            "content": "<p>My personal editor setup is vim+hdevtools+hlint sometimes and vim+ghcid+hlint otherwise. It's pretty barebones but enough for my purposes.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 117619429,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "vaibhavsagar@gmail.com",
            "sender_full_name": "Vaibhav Sagar (he) (F1'16)",
            "sender_id": 100041,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "haskell IDE/editor/mode",
            "submessages": [],
            "timestamp": 1508935063,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4c2865418c880526dd518b2bd65adc37?d=identicon&version=1",
            "client": "website",
            "content": "<p>Atom/VSCode meets all of those except debugging. The plugins are quite nice. Either one is finicky with setting up ghc/i depending on how you have it installed on your system</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 117640567,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "janaipakos@gmail.com",
            "sender_full_name": "James Anaipakos (SP1'17)",
            "sender_id": 100534,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "haskell IDE/editor/mode",
            "submessages": [],
            "timestamp": 1508969263,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/a6a0ff0a4a9a86ae7bc4524453d439bd?d=identicon&version=1",
            "client": "website",
            "content": "<p>I use atom with a bunch of haskell plugins and I quite like it. It can do: auto-indenting, showing types on highlight, typechecking and linting <span class=\"emoji emoji-2764\" title=\"heart\">:heart:</span>, and you can run ghc/ghci/hoogle etc in a little console at the bottom. I've never used a haskell debugger, but it looks like there's an atom plugin for one. Atom supports tabs/split views, is extensible and while I certainly use my mouse but I bet there's some plugin that'll let you zoom around faster on keyboard only.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 117644829,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "annie.cherk@gmail.com",
            "sender_full_name": "Annie Cherkaev (she/they) (m4'18)",
            "sender_id": 9502,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "haskell IDE/editor/mode",
            "submessages": [],
            "timestamp": 1508977107,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/3514240cecd66b31ef3b3a4a7ea235cc?d=identicon&version=1",
            "client": "website",
            "content": "<p>this is super helpful, thanks all! i'll try emacs+intero or atom+plugins this weekend and report back <span class=\"emoji emoji-1f419\" title=\"octopus\">:octopus:</span></p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 117682192,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "katherine.ye@gmail.com",
            "sender_full_name": "Katherine Ye (S'13)",
            "sender_id": 2117,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "haskell IDE/editor/mode",
            "submessages": [],
            "timestamp": 1509050050,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/a2cc22089e70c6b1e9a84d91ac82118ab06aa82a?x=x&version=2",
            "client": "website",
            "content": "<p>For your <code>~/.ghci</code>:</p>\n<div class=\"codehilite\"><pre><span></span>:def hoo \\str -&gt; return $ &quot;:! hoogle --count=30 \\&quot;&quot; ++ str ++ &quot;\\&quot;&quot;\n:def doc \\str -&gt; return $ &quot;:! hoogle --info \\&quot;&quot; ++ str ++ &quot;\\&quot;&quot;\n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 117839584,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "peter@push.cx",
            "sender_full_name": "Peter Bhat Harkins (he) (F2'17)",
            "sender_id": 102004,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "fall 2 Haskell study group",
            "submessages": [],
            "timestamp": 1509390982,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/a2cc22089e70c6b1e9a84d91ac82118ab06aa82a?x=x&version=2",
            "client": "website",
            "content": "<p><a href=\"https://github.com/tonsky/FiraCode\" target=\"_blank\" title=\"https://github.com/tonsky/FiraCode\">https://github.com/tonsky/FiraCode</a></p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 117840224,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "peter@push.cx",
            "sender_full_name": "Peter Bhat Harkins (he) (F2'17)",
            "sender_id": 102004,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "fall 2 Haskell study group",
            "submessages": [],
            "timestamp": 1509391927,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/81c6c8040fc0263607edd05c09dacf6b?d=identicon&version=1",
            "client": "website",
            "content": "<p>My guesses about applicative vs monad last night were off track; it looks like it's more about using only what you need: <a href=\"https://kseo.github.io/posts/2014-01-26-swtiching-from-monads-to-applicative-functors.html\" target=\"_blank\" title=\"https://kseo.github.io/posts/2014-01-26-swtiching-from-monads-to-applicative-functors.html\">https://kseo.github.io/posts/2014-01-26-swtiching-from-monads-to-applicative-functors.html</a><br>\n<a href=\"http://dev.stephendiehl.com/hask/#applicatives\" target=\"_blank\" title=\"http://dev.stephendiehl.com/hask/#applicatives\">http://dev.stephendiehl.com/hask/#applicatives</a><br>\nThe guideline there seems useful:</p>\n<blockquote>\n<p>As a rule of thumb, whenever we would use m &gt;&gt;= return . f what we probably want is an applicative functor, and not a monad.</p>\n</blockquote>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 118001571,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "julian@cipht.net",
            "sender_full_name": "Julian Squires (he) (F2'17)",
            "sender_id": 101992,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Applicative",
            "submessages": [],
            "timestamp": 1509712666,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4d074af6cc341ef51b25bb2f738cdb11?d=identicon&version=1",
            "client": "website",
            "content": "<p>Conor McBride also has a good take on this: <a href=\"https://stackoverflow.com/questions/38707813/parsec-applicatives-vs-monads/38719766#38719766\" target=\"_blank\" title=\"https://stackoverflow.com/questions/38707813/parsec-applicatives-vs-monads/38719766#38719766\">https://stackoverflow.com/questions/38707813/parsec-applicatives-vs-monads/38719766#38719766</a></p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 118001846,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "vaibhavsagar@gmail.com",
            "sender_full_name": "Vaibhav Sagar (he) (F1'16)",
            "sender_id": 100041,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Applicative",
            "submessages": [],
            "timestamp": 1509713212,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/dd016afc5e2d346a0eee00bb0268c2b33da824d5?x=x&version=1",
            "client": "website",
            "content": "<p>This is a laaaaaate response but yes, threads are GC-ed without having to do anything</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 118144322,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "amindfv@gmail.com",
            "sender_full_name": "Tom Murphy (F2'15)",
            "sender_id": 8693,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Killing Threads in Haskell?",
            "submessages": [],
            "timestamp": 1510022519,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/dd016afc5e2d346a0eee00bb0268c2b33da824d5?x=x&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"vaibhavsagar@gmail.com\" data-user-id=\"100041\">@Vaibhav Sagar (F1'16)</span> fwiw GHC usually completely optimizes lists away. I have many, many times attempted to speed up some code by switching from a list to a Vector, Sequence, etc, and ended up with comparable (occasionally slower!) code at the end of it. That's not to say it isn't important to performance tune and choose the right tool for the job, but I have to stand up for those lists that have been so nice to me all this time :)</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 118145118,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "thumbs_up",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "julian@cipht.net",
                        "full_name": "Julian Squires (he) (F2'17)",
                        "id": 101992
                    },
                    "user_id": 101992
                },
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "thumbs_up",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "vaibhavsagar@gmail.com",
                        "full_name": "Vaibhav Sagar (he) (F1'16)",
                        "id": 100041
                    },
                    "user_id": 100041
                }
            ],
            "recipient_id": 22667,
            "sender_email": "amindfv@gmail.com",
            "sender_full_name": "Tom Murphy (F2'15)",
            "sender_id": 8693,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Worst Practices Should be Hard",
            "submessages": [],
            "timestamp": 1510024368,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/159e0dcf4be0b3add35f61779cc41c89ea10c398?x=x&version=2",
            "client": "ZulipElectron",
            "content": "<p><a href=\"https://functional.works-hub.com/blog/Functional-Programming-Jargon\" target=\"_blank\" title=\"https://functional.works-hub.com/blog/Functional-Programming-Jargon\">https://functional.works-hub.com/blog/Functional-Programming-Jargon</a></p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 118161331,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "o.awomosu@gmail.com",
            "sender_full_name": "Femi Awomosu (m6'19)",
            "sender_id": 101990,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "fall 2 Haskell study group",
            "submessages": [],
            "timestamp": 1510062548,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/81c6c8040fc0263607edd05c09dacf6b?d=identicon&version=1",
            "client": "website",
            "content": "<p>I understand this is because of really aggressive stream fusion; would love some pointers into the GHC code if anyone has them!</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 118162294,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "julian@cipht.net",
            "sender_full_name": "Julian Squires (he) (F2'17)",
            "sender_id": 101992,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Worst Practices Should be Hard",
            "submessages": [],
            "timestamp": 1510064321,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/81c6c8040fc0263607edd05c09dacf6b?d=identicon&version=1",
            "client": "website",
            "content": "<p>This came up in the <a href=\"http://alan.petitepomme.net/cwn/2017.11.07.html\" target=\"_blank\" title=\"http://alan.petitepomme.net/cwn/2017.11.07.html\">OCaml Weekly News</a> but ISTM this stream is more active and probably more interested in this: (Oleg says:)</p>\n<div class=\"codehilite\"><pre><span></span>It is interesting that we have this discussion about, even advocacy\nfor, monads at the time effects are coming to the front stage. The\nlanguage Eff (http://eff-lang.org), which is essentially OCaml, states\nright upfront its advantages over monads. (Monads do not compose.)\nDaan Leijen talk past month about the web server implemented in Koka\nstressed the absence of monads. In Koka, if we need an effectful\noperation, we just do it. As the Multicore OCaml project has shown,\neffects can be very efficiently implemented.\n\nI fully agree with Ivan Gotovchits that recommends Rich Jones&#39; code\nrely on exceptions rather than monads. Where I disagree is the\ncontention that ``When you need to write system code or any code that\ndeals with effects, monads become inevitable sooner or later unless\nyou&#39;re willing to use the escape hatch of mutability.&#39;&#39; Monads are not\ninevitable!\n\nFirst of all, not all effects can be represented as monads (which was\npointed long time ago by Wadler himself). My talk at the ML workshop\nlast month\n        http://okmij.org/ftp/tagless-final/nondet-effect.html\ndescribed several other effects that aren&#39;t monadic and that\ncommitment to monads precludes several useful implementations (e.g.,\ncode generation, which cannot be thought in monadic terms).  Hence,\nthere is real harm in trying to squeeze everything into a\nmonad. Incidentally, alternative ideas of effects as interactions go\nback to 1970s.\n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 118165691,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "thumbs_up",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "katherine.ye@gmail.com",
                        "full_name": "Katherine Ye (S'13)",
                        "id": 2117
                    },
                    "user_id": 2117
                },
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "thumbs_up",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "peter@push.cx",
                        "full_name": "Peter Bhat Harkins (he) (F2'17)",
                        "id": 102004
                    },
                    "user_id": 102004
                }
            ],
            "recipient_id": 22667,
            "sender_email": "julian@cipht.net",
            "sender_full_name": "Julian Squires (he) (F2'17)",
            "sender_id": 101992,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "monads vs effects",
            "submessages": [],
            "timestamp": 1510069783,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/a2cc22089e70c6b1e9a84d91ac82118ab06aa82a?x=x&version=2",
            "client": "website",
            "content": "<p>Here's a talk on stream fusion and related optimizations in GHC: <a href=\"https://www.youtube.com/watch?v=MVuj8yVUrho\" target=\"_blank\" title=\"https://www.youtube.com/watch?v=MVuj8yVUrho\">https://www.youtube.com/watch?v=MVuj8yVUrho</a></p>\n<div class=\"youtube-video message_inline_image\"><a data-id=\"MVuj8yVUrho\" href=\"https://www.youtube.com/watch?v=MVuj8yVUrho\" target=\"_blank\" title=\"https://www.youtube.com/watch?v=MVuj8yVUrho\"><img src=\"https://i.ytimg.com/vi/MVuj8yVUrho/default.jpg\"></a></div>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 118169311,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "thumbs_up",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "phoebe@slub.co",
                        "full_name": "phoebe beatrice jenkins (she) (m4'18)",
                        "id": 101991
                    },
                    "user_id": 101991
                },
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "thumbs_up",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "julian@cipht.net",
                        "full_name": "Julian Squires (he) (F2'17)",
                        "id": 101992
                    },
                    "user_id": 101992
                }
            ],
            "recipient_id": 22667,
            "sender_email": "peter@push.cx",
            "sender_full_name": "Peter Bhat Harkins (he) (F2'17)",
            "sender_id": 102004,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Worst Practices Should be Hard",
            "submessages": [],
            "timestamp": 1510075086,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4d074af6cc341ef51b25bb2f738cdb11?d=identicon&version=1",
            "client": "website",
            "content": "<p>It's true that monads don't compose, which is why in modern Haskell they've all been reimplemented in terms of monad transformers, which are functors over monads and do compose: <a href=\"http://dev.stephendiehl.com/hask/#monad-transformers\" target=\"_blank\" title=\"http://dev.stephendiehl.com/hask/#monad-transformers\">http://dev.stephendiehl.com/hask/#monad-transformers</a></p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 118186086,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "vaibhavsagar@gmail.com",
            "sender_full_name": "Vaibhav Sagar (he) (F1'16)",
            "sender_id": 100041,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "monads vs effects",
            "submessages": [],
            "timestamp": 1510102763,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/81c6c8040fc0263607edd05c09dacf6b?d=identicon&version=1",
            "client": "website",
            "content": "<p>Thanks, though I'm pretty sure Oleg is aware of monad transformers in his criticism here.  I have to admit the monad transformer situation is much better in Haskell than in Scala though.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 118186272,
            "is_me_message": false,
            "last_edit_timestamp": 1510103051,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "julian@cipht.net",
            "sender_full_name": "Julian Squires (he) (F2'17)",
            "sender_id": 101992,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "monads vs effects",
            "submessages": [],
            "timestamp": 1510103044,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4d074af6cc341ef51b25bb2f738cdb11?d=identicon&version=1",
            "client": "website",
            "content": "<p>This is not to say that effects aren't an interesting and viable area of research. One reason IMO that the Haskell community likes to force everything into a monadic worldview is that we've developed a rich vocabulary for working with them over time, and pretending that something is a monad allows us a lot of flexibility and power.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 118186282,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "vaibhavsagar@gmail.com",
            "sender_full_name": "Vaibhav Sagar (he) (F1'16)",
            "sender_id": 100041,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "monads vs effects",
            "submessages": [],
            "timestamp": 1510103071,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/a2cc22089e70c6b1e9a84d91ac82118ab06aa82a?x=x&version=2",
            "client": "website",
            "content": "<p>Winter 1s: if you're interested in joining/starting a Haskell starting group, please join us in Lovelace.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 118222102,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "peter@push.cx",
            "sender_full_name": "Peter Bhat Harkins (he) (F2'17)",
            "sender_id": 102004,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "fall 2 Haskell study group",
            "submessages": [],
            "timestamp": 1510171399,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/a2cc22089e70c6b1e9a84d91ac82118ab06aa82a?x=x&version=2",
            "client": "website",
            "content": "<p><del>Does anyone have an example of using the checkers library? It seems to be a standard tool, but I'm stumped on using it to test instances for functor, appliacative, monad, and traversable because it's undocumented and the single piece of example code I could google was unclear.</del></p>\n<p>After a break I beat my head on the type signature a little more and got it working. I don't fully know why it does, but that's a familiar feeling for quickcheck.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 118737570,
            "is_me_message": false,
            "last_edit_timestamp": 1511200558,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "peter@push.cx",
            "sender_full_name": "Peter Bhat Harkins (he) (F2'17)",
            "sender_id": 102004,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Checkers",
            "submessages": [],
            "timestamp": 1511199554,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/a6a0ff0a4a9a86ae7bc4524453d439bd?d=identicon&version=1",
            "client": "website",
            "content": "<p>An explanation of monads as monsters that starts with the sentence, \"To boost the popularity of Scheme, Felleisen has argued for renaming \"lambda\" to \"something cool, such as Funster\" \" : <a href=\"https://mail.haskell.org/pipermail/haskell-cafe/2006-November/019190.html\" target=\"_blank\" title=\"https://mail.haskell.org/pipermail/haskell-cafe/2006-November/019190.html\">https://mail.haskell.org/pipermail/haskell-cafe/2006-November/019190.html</a></p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 118892657,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1104",
                    "emoji_name": "haskell",
                    "reaction_type": "realm_emoji",
                    "user": {
                        "email": "amindfv@gmail.com",
                        "full_name": "Tom Murphy (F2'15)",
                        "id": 8693
                    },
                    "user_id": 8693
                },
                {
                    "emoji_code": "1104",
                    "emoji_name": "haskell",
                    "reaction_type": "realm_emoji",
                    "user": {
                        "email": "ad@lamarque.fr",
                        "full_name": "Adrien Lamarque (they/he) (S1'16)",
                        "id": 9335
                    },
                    "user_id": 9335
                },
                {
                    "emoji_code": "1104",
                    "emoji_name": "haskell",
                    "reaction_type": "realm_emoji",
                    "user": {
                        "email": "vaibhavsagar@gmail.com",
                        "full_name": "Vaibhav Sagar (he) (F1'16)",
                        "id": 100041
                    },
                    "user_id": 100041
                },
                {
                    "emoji_code": "1f47b",
                    "emoji_name": "ghost",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "amindfv@gmail.com",
                        "full_name": "Tom Murphy (F2'15)",
                        "id": 8693
                    },
                    "user_id": 8693
                },
                {
                    "emoji_code": "1f47b",
                    "emoji_name": "ghost",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "ad@lamarque.fr",
                        "full_name": "Adrien Lamarque (they/he) (S1'16)",
                        "id": 9335
                    },
                    "user_id": 9335
                },
                {
                    "emoji_code": "1f47b",
                    "emoji_name": "ghost",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "marielleefoster@gmail.com",
                        "full_name": "Marf Foster (she/they) (S2'16)",
                        "id": 9513
                    },
                    "user_id": 9513
                },
                {
                    "emoji_code": "1f47b",
                    "emoji_name": "ghost",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "katherine.ye@gmail.com",
                        "full_name": "Katherine Ye (S'13)",
                        "id": 2117
                    },
                    "user_id": 2117
                },
                {
                    "emoji_code": "1f47b",
                    "emoji_name": "ghost",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "vaibhavsagar@gmail.com",
                        "full_name": "Vaibhav Sagar (he) (F1'16)",
                        "id": 100041
                    },
                    "user_id": 100041
                }
            ],
            "recipient_id": 22667,
            "sender_email": "annie.cherk@gmail.com",
            "sender_full_name": "Annie Cherkaev (she/they) (m4'18)",
            "sender_id": 9502,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "A monster is like a burrito",
            "submessages": [],
            "timestamp": 1511505301,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/8ede63f05c0a949ad0dce6b1e120fa5f2a1cc72a?x=x&version=2",
            "client": "website",
            "content": "<p>Not going to make it in today.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 119021620,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "danweasel@gmail.com",
            "sender_full_name": "Andrew Nichols (he) (F2'17)",
            "sender_id": 101997,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "fall 2 Haskell study group",
            "submessages": [],
            "timestamp": 1511808923,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/8ede63f05c0a949ad0dce6b1e120fa5f2a1cc72a?x=x&version=2",
            "client": "website",
            "content": "<p>I realized I <del>needed</del> wanted an applicative today!</p>\n<div class=\"codehilite\"><pre><span></span>predicates :: [Char -&gt; Bool]\nc :: Char\n\nvalid :: Char -&gt; Bool\nvalid c = foldr1 (||) (predicates &lt;*&gt; pure c)\n</pre></div>\n\n\n<p>Since I want to monoidally combine the result of <code>&lt;*&gt;</code> anyway, I'm guessing there's some further optimization, but I'm just happy to have found a practical use in my own code for this most abstract seeming of typeclasses.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 119116104,
            "is_me_message": false,
            "last_edit_timestamp": 1511990539,
            "reactions": [
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "thumbs_up",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "julian@cipht.net",
                        "full_name": "Julian Squires (he) (F2'17)",
                        "id": 101992
                    },
                    "user_id": 101992
                },
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "thumbs_up",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "peter@push.cx",
                        "full_name": "Peter Bhat Harkins (he) (F2'17)",
                        "id": 102004
                    },
                    "user_id": 102004
                }
            ],
            "recipient_id": 22667,
            "sender_email": "danweasel@gmail.com",
            "sender_full_name": "Andrew Nichols (he) (F2'17)",
            "sender_id": 101997,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Applicative",
            "submessages": [],
            "timestamp": 1511990527,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/a2cc22089e70c6b1e9a84d91ac82118ab06aa82a?x=x&version=2",
            "client": "website",
            "content": "<p>alternately:</p>\n<div class=\"codehilite\"><pre><span></span>valid c = or $ map ($ c) predicates\n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 119116613,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "peter@push.cx",
            "sender_full_name": "Peter Bhat Harkins (he) (F2'17)",
            "sender_id": 102004,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Applicative",
            "submessages": [],
            "timestamp": 1511991303,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/a2cc22089e70c6b1e9a84d91ac82118ab06aa82a?x=x&version=2",
            "client": "website",
            "content": "<p>We've skipped the last two weeks of meeting, so I've removed the group from the calendar so folks know that Lovelace is available.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 119280101,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "peter@push.cx",
            "sender_full_name": "Peter Bhat Harkins (he) (F2'17)",
            "sender_id": 102004,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "fall 2 Haskell study group",
            "submessages": [],
            "timestamp": 1512326613,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/29b9dce46d67940051338881a4b4021e859d7b1f?x=x&version=2",
            "client": "website",
            "content": "<p>I was wondering if it's possible to put a \"do\" block inside a \"case\" statement, turns out it is</p>\n<div class=\"codehilite\"><pre><span></span>test :: String -&gt; String\ntest str =\n    case str of\n        &quot;hello&quot; -&gt; do\n            let b = str ++ &quot;meow&quot;\n            [head b]\n        _ -&gt; str\n\n\nmain :: IO ()\nmain = do\n    putStrLn $ test &quot;grrr&quot;\n    putStrLn $ test &quot;hello&quot;\n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 119376358,
            "is_me_message": false,
            "last_edit_timestamp": 1512511504,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "marielleefoster@gmail.com",
            "sender_full_name": "Marf Foster (she/they) (S2'16)",
            "sender_id": 9513,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "do inside case",
            "submessages": [],
            "timestamp": 1512511459,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4d074af6cc341ef51b25bb2f738cdb11?d=identicon&version=1",
            "client": "website",
            "content": "<p>I think you can put a <code>do</code> block anywhere that you can also put its desugaring in terms of <code>&gt;&gt;=</code>.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 119376633,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "vaibhavsagar@gmail.com",
            "sender_full_name": "Vaibhav Sagar (he) (F1'16)",
            "sender_id": 100041,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "do inside case",
            "submessages": [],
            "timestamp": 1512511986,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/187931dc9ca73b56a4e014e6009c00a1?d=identicon&version=1",
            "client": "website",
            "content": "<p>I'm trying to write the function</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"nf\">fmapSquared</span> <span class=\"ow\">::</span> <span class=\"kt\">Functor</span> <span class=\"n\">f</span><span class=\"p\">,</span> <span class=\"kt\">Functor</span> <span class=\"n\">g</span> <span class=\"ow\">=&gt;</span> <span class=\"p\">(</span><span class=\"n\">a</span><span class=\"ow\">-&gt;</span><span class=\"n\">b</span><span class=\"p\">)</span> <span class=\"ow\">-&gt;</span> <span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"n\">a</span> <span class=\"ow\">-&gt;</span> <span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"n\">b</span>\n<span class=\"nf\">fmapSquared</span> <span class=\"n\">f</span> <span class=\"ow\">=</span> <span class=\"n\">fmap</span> <span class=\"p\">(</span><span class=\"n\">fmap</span> <span class=\"n\">f</span><span class=\"p\">)</span>\n</pre></div>\n\n\n<p>Is there a more idiomatic way to write it than <code>fmap (fmap f)</code>?<br>\n(I'm not actually writing the function, just using it inline).</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 120885531,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "me@joeym.org",
            "sender_full_name": "Joey Marianer (he) (m1'18)",
            "sender_id": 105228,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "fmap squared",
            "submessages": [],
            "timestamp": 1515614449,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/efe57f0998df065470ff42c938f781cf?d=identicon&version=1",
            "client": "website",
            "content": "<p>I use <code>(fmap . fmap)</code> a lot, but I don't know if it's the most idiomatic</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 120885979,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "libby@daydrea.me",
            "sender_full_name": "Libby Horacek (she) (SP1'15)",
            "sender_id": 7081,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "fmap squared",
            "submessages": [],
            "timestamp": 1515615119,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p>That reminds me of this Edward Kmett talk on lenses, where he looks at things like <code>fmap . fmap</code>, <code>(.) . (.)</code>, etc.: <a href=\"http://comonad.com/haskell/Lenses-Folds-and-Traversals-NYC.pdf\" target=\"_blank\" title=\"http://comonad.com/haskell/Lenses-Folds-and-Traversals-NYC.pdf\">http://comonad.com/haskell/Lenses-Folds-and-Traversals-NYC.pdf</a></p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 120886217,
            "is_me_message": false,
            "last_edit_timestamp": 1515615406,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "fmap squared",
            "submessages": [],
            "timestamp": 1515615393,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/187931dc9ca73b56a4e014e6009c00a1?d=identicon&version=1",
            "client": "website",
            "content": "<p><code>fmapSquared = fmap . fmap</code> would be more idiomatic if I were actually writing the function, but since it's inlined <code>(fmap . fmap) f doubleMaybe</code> doesn't seem advantageous over <code>fmap (fmap f) doubleMaybe</code>. I'm happy to be proven wrong, of course.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 120886655,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "me@joeym.org",
            "sender_full_name": "Joey Marianer (he) (m1'18)",
            "sender_id": 105228,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "fmap squared",
            "submessages": [],
            "timestamp": 1515615972,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/570b5294859a4650f5c6c4f866b6fba3e34af02b?x=x&version=2",
            "client": "website",
            "content": "<p>Seems as good as its going to get to me.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 120892638,
            "is_me_message": false,
            "last_edit_timestamp": 1515625057,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "tobinyehle@gmail.com",
            "sender_full_name": "Tobin Yehle (he) (SP1'20)",
            "sender_id": 105607,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "fmap squared",
            "submessages": [],
            "timestamp": 1515624988,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/187931dc9ca73b56a4e014e6009c00a1?d=identicon&version=1",
            "client": "website",
            "content": "<p>I just happened to find <code>fmap (fmap f)</code> in <a href=\"https://hackage.haskell.org/package/base-4.10.1.0/docs/src/Data.Functor.Compose.html#Compose\" target=\"_blank\" title=\"https://hackage.haskell.org/package/base-4.10.1.0/docs/src/Data.Functor.Compose.html#Compose\">https://hackage.haskell.org/package/base-4.10.1.0/docs/src/Data.Functor.Compose.html#Compose</a> (search for \"Functor\").</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 120893982,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "me@joeym.org",
            "sender_full_name": "Joey Marianer (he) (m1'18)",
            "sender_id": 105228,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "fmap squared",
            "submessages": [],
            "timestamp": 1515627286,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4d074af6cc341ef51b25bb2f738cdb11?d=identicon&version=1",
            "client": "website",
            "content": "<p>The downside there is that you have to wrap and unwrap at either end, so you end up with something like</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"nf\">getCompose</span> <span class=\"o\">$</span> <span class=\"n\">fmap</span> <span class=\"n\">f</span> <span class=\"p\">(</span><span class=\"kt\">Compose</span> <span class=\"n\">x</span><span class=\"p\">)</span>\n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 120901074,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "vaibhavsagar@gmail.com",
            "sender_full_name": "Vaibhav Sagar (he) (F1'16)",
            "sender_id": 100041,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "fmap squared",
            "submessages": [],
            "timestamp": 1515640450,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4d074af6cc341ef51b25bb2f738cdb11?d=identicon&version=1",
            "client": "website",
            "content": "<p>hey it <span class=\"user-mention\" data-user-email=\"amindfv@gmail.com\" data-user-id=\"8693\">@Tom Murphy (F2'15)</span>: <a href=\"https://www.youtube.com/watch?v=XkDXXbTjA6g\" target=\"_blank\" title=\"https://www.youtube.com/watch?v=XkDXXbTjA6g\">Demo \u2014 Vivid: Sound Synthesis with Haskell and SuperCollider</a></p>\n<div class=\"youtube-video message_inline_image\"><a data-id=\"XkDXXbTjA6g\" href=\"https://www.youtube.com/watch?v=XkDXXbTjA6g\" target=\"_blank\" title=\"https://www.youtube.com/watch?v=XkDXXbTjA6g\"><img src=\"https://i.ytimg.com/vi/XkDXXbTjA6g/default.jpg\"></a></div>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 121259937,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "vaibhavsagar@gmail.com",
            "sender_full_name": "Vaibhav Sagar (he) (F1'16)",
            "sender_id": 100041,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Vivid@ICFP",
            "submessages": [],
            "timestamp": 1516353948,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/8b685fc189f3b87e207614dbbed889148f6eda41?x=x&version=21",
            "client": "website",
            "content": "<p>i may be starting a haskell project at work and ill likely have lots of lil qs and i feel like thats common when working with haskell so i made this here thread</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 121352373,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "phoebe@slub.co",
            "sender_full_name": "phoebe beatrice jenkins (she) (m4'18)",
            "sender_id": 101991,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "small haskell questions",
            "submessages": [],
            "timestamp": 1516558400,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/8b685fc189f3b87e207614dbbed889148f6eda41?x=x&version=21",
            "client": "website",
            "content": "<p>q: does the std library have any generalized function akin to <code>words</code> that splits a list into a list of lists on a predicate?</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 121352374,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "phoebe@slub.co",
            "sender_full_name": "phoebe beatrice jenkins (she) (m4'18)",
            "sender_id": 101991,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "small haskell questions",
            "submessages": [],
            "timestamp": 1516558437,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/8b685fc189f3b87e207614dbbed889148f6eda41?x=x&version=21",
            "client": "website",
            "content": "<p><code>groupBy</code> is really close to but not quite what im looking for</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 121352424,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "phoebe@slub.co",
            "sender_full_name": "phoebe beatrice jenkins (she) (m4'18)",
            "sender_id": 101991,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "small haskell questions",
            "submessages": [],
            "timestamp": 1516558509,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/8b685fc189f3b87e207614dbbed889148f6eda41?x=x&version=21",
            "client": "website",
            "content": "<p>i ended up doing this which i feel lukewarm about <a href=\"https://github.com/f2xeb/aoc2015/blob/master/day2.hs#L3\" target=\"_blank\" title=\"https://github.com/f2xeb/aoc2015/blob/master/day2.hs#L3\">https://github.com/f2xeb/aoc2015/blob/master/day2.hs#L3</a></p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 121355276,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "phoebe@slub.co",
            "sender_full_name": "phoebe beatrice jenkins (she) (m4'18)",
            "sender_id": 101991,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "small haskell questions",
            "submessages": [],
            "timestamp": 1516565245,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p>Are you cool with using <a href=\"https://hackage.haskell.org/package/split\" target=\"_blank\" title=\"https://hackage.haskell.org/package/split\">https://hackage.haskell.org/package/split</a>? Not in the standard library but my impression is that that's the standard package.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 121355604,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "small haskell questions",
            "submessages": [],
            "timestamp": 1516566102,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/8b685fc189f3b87e207614dbbed889148f6eda41?x=x&version=21",
            "client": "website",
            "content": "<p>lol @ that description. that looks like the best option yes</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 121355653,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "phoebe@slub.co",
            "sender_full_name": "phoebe beatrice jenkins (she) (m4'18)",
            "sender_id": 101991,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "small haskell questions",
            "submessages": [],
            "timestamp": 1516566200,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/8b685fc189f3b87e207614dbbed889148f6eda41?x=x&version=21",
            "client": "website",
            "content": "<p>thanks!</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 121355654,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "phoebe@slub.co",
            "sender_full_name": "phoebe beatrice jenkins (she) (m4'18)",
            "sender_id": 101991,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "small haskell questions",
            "submessages": [],
            "timestamp": 1516566203,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p>Ahaha I hadn't actually read the description yet :)</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 121355701,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "small haskell questions",
            "submessages": [],
            "timestamp": 1516566308,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/8ede63f05c0a949ad0dce6b1e120fa5f2a1cc72a?x=x&version=2",
            "client": "website",
            "content": "<p>As a potential supplement <span class=\"user-mention\" data-user-email=\"phoebe@slub.co\" data-user-id=\"101991\">@phoebe beatrice jenkins (F2'17)</span> ,</p>\n<p><a href=\"http://hackage.haskell.org/package/text-1.2.3.0/docs/Data-Text.html#v:split\" target=\"_blank\" title=\"http://hackage.haskell.org/package/text-1.2.3.0/docs/Data-Text.html#v:split\">http://hackage.haskell.org/package/text-1.2.3.0/docs/Data-Text.html#v:split</a> is also handy if you're working with text specifically. </p>\n<p><a href=\"http://hackage.haskell.org/package/base-4.10.1.0/docs/Prelude.html#v:span\" target=\"_blank\" title=\"http://hackage.haskell.org/package/base-4.10.1.0/docs/Prelude.html#v:span\">http://hackage.haskell.org/package/base-4.10.1.0/docs/Prelude.html#v:span</a> (and break, defined right below it), are also useful for breaking a list into two parts exactly.</p>\n<p>If you're not familiar with it, <a href=\"https://www.haskell.org/hoogle/\" target=\"_blank\" title=\"https://www.haskell.org/hoogle/\">https://www.haskell.org/hoogle/</a> is also just a generally useful tool for finding functions, you can search by name or by type signature.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 121385975,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "2764",
                    "emoji_name": "heart",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "phoebe@slub.co",
                        "full_name": "phoebe beatrice jenkins (she) (m4'18)",
                        "id": 101991
                    },
                    "user_id": 101991
                }
            ],
            "recipient_id": 22667,
            "sender_email": "danweasel@gmail.com",
            "sender_full_name": "Andrew Nichols (he) (F2'17)",
            "sender_id": 101997,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "small haskell questions",
            "submessages": [],
            "timestamp": 1516634065,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/8b685fc189f3b87e207614dbbed889148f6eda41?x=x&version=21",
            "client": "website",
            "content": "<p>hoogle is what i was using to try and find what i was looking for. i was working with text and in the future it might be worth seeing how parser combinator libraries work for it</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 121386817,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "phoebe@slub.co",
            "sender_full_name": "phoebe beatrice jenkins (she) (m4'18)",
            "sender_id": 101991,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "small haskell questions",
            "submessages": [],
            "timestamp": 1516635519,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/570b5294859a4650f5c6c4f866b6fba3e34af02b?x=x&version=2",
            "client": "website",
            "content": "<p>Something I'm working on needs to have both soft and hard failures. Something like <code>Either Message (Maybe a)</code> where <code>Left Message</code> represents a hard failure, <code>Right Nothing</code> represents a soft failure, and <code>Right (Just value)</code> is a successful result.<br>\nI came up with a <code>softBind :: Either Message (Maybe a) -&gt; a -&gt; Either Message b -&gt; Either Message (Maybe b)</code> function that will embed an action in <code>Either</code> into this soft failure context.<br>\nDoes anyone know of, or can think of a better way to deal with \"soft\" and \"hard\" failures?</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 121589272,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "tobinyehle@gmail.com",
            "sender_full_name": "Tobin Yehle (he) (SP1'20)",
            "sender_id": 105607,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Monad for soft failure",
            "submessages": [],
            "timestamp": 1517003037,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"tobinyehle@gmail.com\" data-user-id=\"105607\">@Tobin Yehle (m1'18)</span> have you already looked at monad transformers? I think the usual way to handle this kind of thing would be with something like</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kr\">import</span> <span class=\"nn\">Control.Monad.Except</span>\n<span class=\"kr\">type</span> <span class=\"kt\">Hopefully</span> <span class=\"ow\">=</span> <span class=\"kt\">ExceptT</span> <span class=\"kt\">Message</span> <span class=\"kt\">Maybe</span>\n\n<span class=\"nf\">hardFailureExample</span> <span class=\"ow\">::</span> <span class=\"kt\">Hopefully</span> <span class=\"n\">a</span>\n<span class=\"nf\">hardFailureExample</span> <span class=\"ow\">=</span> <span class=\"n\">throwError</span> <span class=\"s\">&quot;shoot&quot;</span>\n\n<span class=\"nf\">hardCatch</span> <span class=\"ow\">::</span> <span class=\"kt\">Hopefully</span> <span class=\"n\">a</span> <span class=\"ow\">-&gt;</span> <span class=\"p\">(</span><span class=\"kt\">String</span> <span class=\"ow\">-&gt;</span> <span class=\"kt\">Hopefully</span> <span class=\"n\">a</span><span class=\"p\">)</span> <span class=\"ow\">-&gt;</span> <span class=\"kt\">Hopefully</span> <span class=\"n\">a</span>\n<span class=\"nf\">hardCatch</span> <span class=\"ow\">=</span> <span class=\"n\">catchError</span>\n\n<span class=\"nf\">softFailureExample</span> <span class=\"ow\">::</span> <span class=\"kt\">Hopefully</span> <span class=\"n\">a</span>\n<span class=\"nf\">softFailureExample</span> <span class=\"ow\">=</span> <span class=\"kt\">ExceptT</span> <span class=\"kt\">Nothing</span>\n\n<span class=\"nf\">softCatch</span> <span class=\"ow\">::</span> <span class=\"kt\">Hopefully</span> <span class=\"n\">a</span> <span class=\"ow\">-&gt;</span> <span class=\"kt\">Hopefully</span> <span class=\"n\">a</span> <span class=\"ow\">-&gt;</span> <span class=\"kt\">Hopefully</span> <span class=\"n\">a</span>\n<span class=\"nf\">softCatch</span> <span class=\"p\">(</span><span class=\"kt\">ExceptT</span> <span class=\"kt\">Nothing</span><span class=\"p\">)</span> <span class=\"n\">fallback</span> <span class=\"ow\">=</span> <span class=\"n\">fallback</span>\n<span class=\"nf\">softCatch</span> <span class=\"n\">m</span> <span class=\"kr\">_</span> <span class=\"ow\">=</span> <span class=\"n\">m</span>\n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 121593268,
            "is_me_message": false,
            "last_edit_timestamp": 1517009865,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Monad for soft failure",
            "submessages": [],
            "timestamp": 1517009685,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p>Hopefully I got that right.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 121593368,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f419",
                    "emoji_name": "octopus",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "michael.david.lauria@gmail.com",
                        "full_name": "Michael Lauria (he) (S'13)",
                        "id": 2115
                    },
                    "user_id": 2115
                },
                {
                    "emoji_code": "1f419",
                    "emoji_name": "octopus",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "phoebe@slub.co",
                        "full_name": "phoebe beatrice jenkins (she) (m4'18)",
                        "id": 101991
                    },
                    "user_id": 101991
                },
                {
                    "emoji_code": "1f419",
                    "emoji_name": "octopus",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "tobinyehle@gmail.com",
                        "full_name": "Tobin Yehle (he) (SP1'20)",
                        "id": 105607
                    },
                    "user_id": 105607
                }
            ],
            "recipient_id": 22667,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Monad for soft failure",
            "submessages": [],
            "timestamp": 1517009869,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/570b5294859a4650f5c6c4f866b6fba3e34af02b?x=x&version=2",
            "client": "website",
            "content": "<p>Ahh that is really nice!</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 121594371,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "tobinyehle@gmail.com",
            "sender_full_name": "Tobin Yehle (he) (SP1'20)",
            "sender_id": 105607,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Monad for soft failure",
            "submessages": [],
            "timestamp": 1517011428,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p>Yeah, I'm basing that on using the <code>mtl</code>: <a href=\"https://hackage.haskell.org/package/mtl-2.2.1/docs/Control-Monad-Except.html\" target=\"_blank\" title=\"https://hackage.haskell.org/package/mtl-2.2.1/docs/Control-Monad-Except.html\">https://hackage.haskell.org/package/mtl-2.2.1/docs/Control-Monad-Except.html</a></p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 121594419,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Monad for soft failure",
            "submessages": [],
            "timestamp": 1517011493,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/3514240cecd66b31ef3b3a4a7ea235cc?d=identicon&version=1",
            "client": "website",
            "content": "<p>(long question in caps because i'm x-posting to stack overflow) </p>\n<p>I\u2019m writing a programming language using Haskell as the host language. (The parser, grammar, runtime, etc. for my language are all written in Haskell.) </p>\n<p>Depending on what\u2019s written in a program in my PL, in my language\u2019s runtime, I want to <strong>apply Haskell functions of different types dynamically (their types are known at runtime) to Haskell values of different types, whose types are known at runtime.</strong> I want to apply these functions in a generic fashion, without having to case on every possible type. Basically I want this part of my language\u2019s runtime to be dynamically-typed in Haskell. I\u2019d also like to write a typechecker for my language. </p>\n<p>Any suggestions for how I might do either of these things? Are there any examples of languages written in Haskell that do a similar thing, whose approaches I can learn from?</p>\n<p>One complication: The Haskell functions and values need to be polymorphic over floats because I am using them with a Haskell <a href=\"https://hackage.haskell.org/package/ad\" target=\"_blank\" title=\"https://hackage.haskell.org/package/ad\">autodiff library</a>, which requires that floats have type <code>Floating a =&gt; a</code>.</p>\n<p>I tried using the Haskell Data.Dynamic and Data.Typeable libraries to make functions and values dynamic so I could compare their types at runtime and apply the functions if the types match, but Data.Dynamic doesn\u2019t seem to allow polymorphic functions to be cast to Dynamic. The documentation even says this. I googled \u201cHaskell polymorphic functions dynamic\u201d but I don\u2019t see a way around this limitation.</p>\n<p>I would rather not force all the Haskell functions to have the same input/output type, and I would rather not have to statically list all of their possible types in a sum type. Maybe I can solve the applying-function problem with some kind of generic Applyable typeclass? Or use Template Haskell? None of these options sounds super appealing.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 121957192,
            "is_me_message": false,
            "last_edit_timestamp": 1517628790,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "katherine.ye@gmail.com",
            "sender_full_name": "Katherine Ye (S'13)",
            "sender_id": 2117,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "writing a PL in haskell: dynamic typing?",
            "submessages": [],
            "timestamp": 1517628749,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4d074af6cc341ef51b25bb2f738cdb11?d=identicon&version=1",
            "client": "website",
            "content": "<p>I don't know enough about <code>Typeable</code> to say anything useful, but this is an interesting problem and I hope you find a good solution!</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 121991894,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "vaibhavsagar@gmail.com",
            "sender_full_name": "Vaibhav Sagar (he) (F1'16)",
            "sender_id": 100041,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "writing a PL in haskell: dynamic typing?",
            "submessages": [],
            "timestamp": 1517712493,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/612c7c2a108d7850c62d1d2293a481aa42855408?x=x&version=2",
            "client": "website",
            "content": "<blockquote>\n<p>Data.Dynamic doesn\u2019t seem to allow polymorphic functions to be cast to Dynamic</p>\n</blockquote>\n<p>Once data is in <code>Dynamic</code> it's effectively opaque. If you pass a <code>Dynamic</code> into a polymorphic function which needs to do something with the data (like add numbers, or compare for ordering/equality) it can't.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 122052651,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "PLRedmond@gmail.com",
            "sender_full_name": "Patrick Redmond (W'14)",
            "sender_id": 5014,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "writing a PL in haskell: dynamic typing?",
            "submessages": [],
            "timestamp": 1517850787,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/612c7c2a108d7850c62d1d2293a481aa42855408?x=x&version=2",
            "client": "website",
            "content": "<blockquote>\n<p>Depending on what\u2019s written in a program in my PL, in my language\u2019s runtime, I want to apply Haskell functions of different types dynamically (their types are known at runtime) to Haskell values of different types, whose types are known at runtime.</p>\n</blockquote>\n<p>I think this is prettymuch antithetical to haskell's whole strong static typing approach. It sounds to me like you're saying that you want your guest language's runtime behavior to be performed for you by the host language's runtime.</p>\n<p>Maybe there's an easy way to do it? It might require modifying the haskell runtime code. But this could get your part way there <a href=\"https://ghc.haskell.org/trac/ghc/wiki/DeferErrorsToRuntime\" target=\"_blank\" title=\"https://ghc.haskell.org/trac/ghc/wiki/DeferErrorsToRuntime\">DeferErrorsToRuntime</a>.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 122052891,
            "is_me_message": false,
            "last_edit_timestamp": 1517851434,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "PLRedmond@gmail.com",
            "sender_full_name": "Patrick Redmond (W'14)",
            "sender_id": 5014,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "writing a PL in haskell: dynamic typing?",
            "submessages": [],
            "timestamp": 1517851151,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/612c7c2a108d7850c62d1d2293a481aa42855408?x=x&version=2",
            "client": "website",
            "content": "<blockquote>\n<p>I would rather not force all the Haskell functions to have the same input/output type, and I would rather not have to statically list all of their possible types in a sum type. </p>\n</blockquote>\n<p>I think this is actually pretty much how interpreters are  written because it allows you to mitigate leakage of the host language's semantics into the guest language. Haskell doesn't allow you to do <code>'a' + 3</code> (host semantics) but your dynamic language might (guest semantics). If you represent guest values and guest operations using a data structure (or a sum type), you have the opportunity to define those cases which are outside of the host's semantics. EG. If the guest language has a <code>'a' + 3</code> you will have a case <code>eval (AddOp (LitChar x) (LitInt y)) = ...</code> somewhere and you'll get to decide exactly what the dynamic typing semantic is for that particular case.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 122052965,
            "is_me_message": false,
            "last_edit_timestamp": 1517851678,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "PLRedmond@gmail.com",
            "sender_full_name": "Patrick Redmond (W'14)",
            "sender_id": 5014,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "writing a PL in haskell: dynamic typing?",
            "submessages": [],
            "timestamp": 1517851250,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/21b9cce736cbbe8e0761bbb33863c7d3112d0136?x=x&version=2",
            "client": "website",
            "content": "<p>I'm not a type expert, but I believe it's not possible to do what you want in Haskell. I think a language can have either run time polymorphism or automatic type inference with Hindley-Milner, but not both. I think this is the case because Scala provides run time polymorphism and not automatic type inference. The reason given for why Scala does not provide automatic type inference is that it conflicts with run time polymorphism.</p>\n<p>You may be able to do what you want by doing it the way you would do it in C. Every type in your guest language has an object in Haskell associated with it. These objects contain the specific implementations of the polymorphic functions for the given type. When you want to perform a function call on an object, you first lookup the type for that object. Then you call the relevant function from the type object, with the initial object as an argument. </p>\n<p>I think I'm doing a poor job of explaining this, so here is an example from the Redis source code. Redis is in C and has abstract dictionary type. There are different implementations for the dictionary type, each of which has different behavior. <a href=\"https://github.com/antirez/redis/blob/unstable/src/dict.h#L58\" target=\"_blank\" title=\"https://github.com/antirez/redis/blob/unstable/src/dict.h#L58\">Here's</a> the definition of the type representing a dictionary type. <a href=\"https://github.com/antirez/redis/blob/unstable/src/server.c#L550\" target=\"_blank\" title=\"https://github.com/antirez/redis/blob/unstable/src/server.c#L550\">Here's</a> the code for the definition of the implementations of various dictionary types. Redis also provides some <a href=\"https://github.com/antirez/redis/blob/unstable/src/dict.h#L135\" target=\"_blank\" title=\"https://github.com/antirez/redis/blob/unstable/src/dict.h#L135\">macros</a> which wrap calling the underlying dictionary. <a href=\"https://github.com/antirez/redis/blob/unstable/src/dict.c#L292\" target=\"_blank\" title=\"https://github.com/antirez/redis/blob/unstable/src/dict.c#L292\">Here's</a> an example function which regardless of the type of dictionary passed to it. </p>\n<p>I hope this is helpful.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 122061049,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "michaelmalis2@gmail.com",
            "sender_full_name": "Michael Malis (SP2'19)",
            "sender_id": 8099,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "writing a PL in haskell: dynamic typing?",
            "submessages": [],
            "timestamp": 1517863107,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/570b5294859a4650f5c6c4f866b6fba3e34af02b?x=x&version=2",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"michaelmalis2@gmail.com\" data-user-id=\"8099\">@Michael Malis (S1'15)</span> Runtime polymorphism vs HM inference sounds like a super interesting subject! Do you have any further reading handy?</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 122073459,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "tobinyehle@gmail.com",
            "sender_full_name": "Tobin Yehle (he) (SP1'20)",
            "sender_id": 105607,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "writing a PL in haskell: dynamic typing?",
            "submessages": [],
            "timestamp": 1517883080,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/612c7c2a108d7850c62d1d2293a481aa42855408?x=x&version=2",
            "client": "website",
            "content": "<p>+1</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 122074209,
            "is_me_message": false,
            "last_edit_timestamp": 1517884711,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "PLRedmond@gmail.com",
            "sender_full_name": "Patrick Redmond (W'14)",
            "sender_id": 5014,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "writing a PL in haskell: dynamic typing?",
            "submessages": [],
            "timestamp": 1517884697,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/3514240cecd66b31ef3b3a4a7ea235cc?d=identicon&version=1",
            "client": "website",
            "content": "<p>thanks, all, for the thoughtful answers! i will meditate on using DeferErrorsToRuntime and report back. FWIW, here's the <a href=\"https://stackoverflow.com/questions/48593687/implementing-a-language-in-haskell-dynamic-typing-for-polymorphic-functions\" target=\"_blank\" title=\"https://stackoverflow.com/questions/48593687/implementing-a-language-in-haskell-dynamic-typing-for-polymorphic-functions\">stackoverflow question</a> (with one answer).</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 122075145,
            "is_me_message": false,
            "last_edit_timestamp": 1517886863,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "katherine.ye@gmail.com",
            "sender_full_name": "Katherine Ye (S'13)",
            "sender_id": 2117,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "writing a PL in haskell: dynamic typing?",
            "submessages": [],
            "timestamp": 1517886854,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/21b9cce736cbbe8e0761bbb33863c7d3112d0136?x=x&version=2",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"tobinyehle@gmail.com\" data-user-id=\"105607\">@Tobin Yehle (m1'18)</span> <span class=\"user-mention\" data-user-email=\"PLRedmond@gmail.com\" data-user-id=\"5014\">@Patrick Redmond (W'14)</span>  I did some Googling and what I wrote above is incorrect. It is <em>possible</em> to have type inference with subtyping, but it is not <em>practical</em>. After looking into it, the best explanation I could find was in <a href=\"http://pchiusano.blogspot.com/2011/05/making-most-of-scalas-extremely-limited.html?showComment=1305755418735#c1381039165223262589\" target=\"_blank\" title=\"http://pchiusano.blogspot.com/2011/05/making-most-of-scalas-extremely-limited.html?showComment=1305755418735#c1381039165223262589\">several blog post comments written</a> by Martin Odersky, the creator of Scala. The TLDR is that \"the size of the types while performing type inference become too big\". Martin says they become the size of the expression they are in. He says this also makes it difficult to provide nice error messages.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 122075272,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "thumbs_up",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "tobinyehle@gmail.com",
                        "full_name": "Tobin Yehle (he) (SP1'20)",
                        "id": 105607
                    },
                    "user_id": 105607
                }
            ],
            "recipient_id": 22667,
            "sender_email": "michaelmalis2@gmail.com",
            "sender_full_name": "Michael Malis (SP2'19)",
            "sender_id": 8099,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "writing a PL in haskell: dynamic typing?",
            "submessages": [],
            "timestamp": 1517887158,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/29b9dce46d67940051338881a4b4021e859d7b1f?x=x&version=2",
            "client": "website",
            "content": "<p>Haskell friends! I'm using <a href=\"http://hackage.haskell.org/package/base-4.10.1.0/docs/System-Console-GetOpt.html\" target=\"_blank\" title=\"http://hackage.haskell.org/package/base-4.10.1.0/docs/System-Console-GetOpt.html\">http://hackage.haskell.org/package/base-4.10.1.0/docs/System-Console-GetOpt.html</a> to configure command line args, and running into a weird case. For most of the args, they are stand alone, but there is one arg that I want to be able to pass along an additional thing, like:</p>\n<p>./mything --mainarg=filething --dependentarg=anotherthing</p>\n<p>Aka, two args at once, that must always accompany each other, but for everything else, they can be permuted however. Is anyone familiar with this, or have ideas?</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 122154684,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "marielleefoster@gmail.com",
            "sender_full_name": "Marf Foster (she/they) (S2'16)",
            "sender_id": 9513,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "command line arg q",
            "submessages": [],
            "timestamp": 1518035175,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/570b5294859a4650f5c6c4f866b6fba3e34af02b?x=x&version=2",
            "client": "website",
            "content": "<p>You mean that the order of the arguments matters? Or that <code>--dependentarg</code> should only be present if <code>--mainarg</code> is? Or something else?</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 122159454,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "tobinyehle@gmail.com",
            "sender_full_name": "Tobin Yehle (he) (SP1'20)",
            "sender_id": 105607,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "command line arg q",
            "submessages": [],
            "timestamp": 1518042724,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4d074af6cc341ef51b25bb2f738cdb11?d=identicon&version=1",
            "client": "website",
            "content": "<p>It sounds like your two args are actually one arg?</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 122166680,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "vaibhavsagar@gmail.com",
            "sender_full_name": "Vaibhav Sagar (he) (F1'16)",
            "sender_id": 100041,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "command line arg q",
            "submessages": [],
            "timestamp": 1518056871,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4d074af6cc341ef51b25bb2f738cdb11?d=identicon&version=1",
            "client": "website",
            "content": "<p>If you have two args that must always accompany each other, then I think it would make more sense to specify them as one argument with two parameters (or something along those lines). Is there something I'm missing?</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 122166775,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "vaibhavsagar@gmail.com",
            "sender_full_name": "Vaibhav Sagar (he) (F1'16)",
            "sender_id": 100041,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "command line arg q",
            "submessages": [],
            "timestamp": 1518057005,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/a6a0ff0a4a9a86ae7bc4524453d439bd?d=identicon&version=1",
            "client": "website",
            "content": "<p>^ Is it that the <code>dependentarg</code> is optional? So if <code>dependentarg</code> shows up it must show up right after <code>mainarg</code>, but otherwise flags can come in any order?</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 122170374,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "annie.cherk@gmail.com",
            "sender_full_name": "Annie Cherkaev (she/they) (m4'18)",
            "sender_id": 9502,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "command line arg q",
            "submessages": [],
            "timestamp": 1518064711,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/29b9dce46d67940051338881a4b4021e859d7b1f?x=x&version=2",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"vaibhavsagar@gmail.com\" data-user-id=\"100041\">@Vaibhav Sagar (F1'16)</span> <span class=\"user-mention\" data-user-email=\"tobinyehle@gmail.com\" data-user-id=\"105607\">@Tobin Yehle (m1'18)</span>  yes, they are essentially one arg. <span class=\"user-mention\" data-user-email=\"annie.cherk@gmail.com\" data-user-id=\"9502\">@Annie Cherkaev (S2'16)</span> sorry for the vagueness! one thing I could do is have it be something like:</p>\n<p><code>./mything --bothargs=filething,anotherthing</code></p>\n<p>and split based on the comma. This feels inelegant, but it would work. I just think it would be prettier to have the two args separate, but always co-occurring.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 122189257,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "marielleefoster@gmail.com",
            "sender_full_name": "Marf Foster (she/they) (S2'16)",
            "sender_id": 9513,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "command line arg q",
            "submessages": [],
            "timestamp": 1518104775,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/570b5294859a4650f5c6c4f866b6fba3e34af02b?x=x&version=2",
            "client": "website",
            "content": "<p>I think you can totally do this with <a href=\"https://hackage.haskell.org/package/optparse-applicative\" target=\"_blank\" title=\"https://hackage.haskell.org/package/optparse-applicative\">opt parse applicative</a>. Take a look at the example under the Alternative header. It looks like you can make a parser that will eat two arguments and then combine that with the alternate parser using <code>&lt;|&gt;</code></p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 122189841,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "tobinyehle@gmail.com",
            "sender_full_name": "Tobin Yehle (he) (SP1'20)",
            "sender_id": 105607,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "command line arg q",
            "submessages": [],
            "timestamp": 1518105806,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/570b5294859a4650f5c6c4f866b6fba3e34af02b?x=x&version=2",
            "client": "website",
            "content": "<p>I'm not sure this is exactly what you are asking, but I think it could allow you to have <code>./mything --in=foo --out=bar</code> or <code>./mything --stdstream</code></p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 122189982,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "tobinyehle@gmail.com",
            "sender_full_name": "Tobin Yehle (he) (SP1'20)",
            "sender_id": 105607,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "command line arg q",
            "submessages": [],
            "timestamp": 1518106065,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/29b9dce46d67940051338881a4b4021e859d7b1f?x=x&version=2",
            "client": "website",
            "content": "<p>Hrmmm <span class=\"user-mention\" data-user-email=\"tobinyehle@gmail.com\" data-user-id=\"105607\">@Tobin Yehle (m1'18)</span> this does look like something I could make work, but I've already got an entire command line parsing file written for the ~10 other args. I wrote a <em>hideous</em> pair of functions to find the two things I'm looking for, remove them and process them together, which is working ok. If I were gonna start again I'd use <code>opt parse</code></p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 122194029,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "marielleefoster@gmail.com",
            "sender_full_name": "Marf Foster (she/they) (S2'16)",
            "sender_id": 9513,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "command line arg q",
            "submessages": [],
            "timestamp": 1518112300,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/efe57f0998df065470ff42c938f781cf?d=identicon&version=1",
            "client": "website",
            "content": "<p>Anyone else here use Stack? I just went back to a project that I haven't touched in a couple years, and when I try to <code>stack build</code> it's unable to construct the build plan. <code>stack solver</code> isn't able to find a solution either. I know that this same configuration used to work, because this version was built and put in production a couple years ago. (yes the same version has been running w/o problems for two years... go haskell) I'm definitely using a different version of Stack, which I guess is probably the problem? But I'm not sure how to fix it. Any ideas on how to troubleshoot these sorts of dependency problems? I've never had a problem like this with Stack before.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 122353110,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "libby@daydrea.me",
            "sender_full_name": "Libby Horacek (she) (SP1'15)",
            "sender_id": 7081,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Stack help",
            "submessages": [],
            "timestamp": 1518452695,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/a6a0ff0a4a9a86ae7bc4524453d439bd?d=identicon&version=1",
            "client": "website",
            "content": "<p>I've got a handful of Lists of Strings, and I'm keeping track of them in a List of Lists of Strings. I'm using the strings in a limited way- I need to check equality between them and show them, but not a whole lot more. ie</p>\n<div class=\"codehilite\"><pre><span></span>a = [&quot;annie&quot;, &quot;eats&quot;, &quot;cake&quot;]\nb = [&quot;annie&quot;, &quot;drinks&quot;, &quot;boba&quot;, &quot;tea&quot;]\nsummary = [a, b]\n-- summary is then used for further, but limited, computation\n</pre></div>\n\n\n<p>I'd love to be able to now make different kinds of lists. So maybe a List of Strings, and a List of Ints- this shouldn't be a problem because I can put typeclasses on the things I do with the contents, like make sure they're equal'able &amp; showable. This is a problem though, because I can't make <code>summary</code> because lists must have homogenous types. I could use a tuple, but for my context I need to be able to handle a variable, but statically known, number of lists.</p>\n<div class=\"codehilite\"><pre><span></span>-- a valid example:\na = [&quot;annie&quot;, &quot;eats&quot;, &quot;cake&quot;]\nmy_favorite_numbers=[-2, 0, 7, 42]\nsummary=(a, my_favorite_numbers)-- &lt;-- tuple of size 2\n\n\n-- another valid example:\na = [&quot;annie&quot;, &quot;eats&quot;, &quot;cake&quot;]\nmy_favorite_numbers=[-2, 0, 7, 42]\nmy_least_favorite_booleans=[False, False]\nsummary=(a, my_favorite_numbers, my_least_favorite_booleans)  -- &lt;-- tuple of size 3\n</pre></div>\n\n\n<p>It almost seems like maybe there's a way to use a macro that can generate a tuple for me, but then I'd also need to generate all the code that accesses the sublists somehow because that code also needs to be aware of how large the tuple is. Does anyone know how to handle something like this?</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 122357987,
            "is_me_message": false,
            "last_edit_timestamp": 1518460960,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "annie.cherk@gmail.com",
            "sender_full_name": "Annie Cherkaev (she/they) (m4'18)",
            "sender_id": 9502,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "collections of heterogenous type",
            "submessages": [],
            "timestamp": 1518460738,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p>So each separate list in <code>summary</code> is supposed to consist of some fixed Eq'able, Show'able type?</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 122358700,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "collections of heterogenous type",
            "submessages": [],
            "timestamp": 1518461672,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p>Could you do something like this?</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"cm\">{-# LANGUAGE ExistentialQuantification #-}</span>\n<span class=\"kr\">data</span> <span class=\"kt\">Things</span> <span class=\"ow\">=</span> <span class=\"n\">forall</span> <span class=\"n\">a</span><span class=\"o\">.</span> <span class=\"p\">(</span><span class=\"kt\">Eq</span> <span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"kt\">Show</span> <span class=\"n\">a</span><span class=\"p\">)</span> <span class=\"kt\">Things</span> <span class=\"p\">[</span><span class=\"n\">a</span><span class=\"p\">]</span>\n\n<span class=\"kr\">instance</span> <span class=\"kt\">Show</span> <span class=\"kt\">Things</span> <span class=\"kr\">where</span>\n    <span class=\"n\">show</span> <span class=\"p\">(</span><span class=\"kt\">Things</span> <span class=\"n\">ts</span><span class=\"p\">)</span> <span class=\"ow\">=</span> <span class=\"n\">show</span> <span class=\"n\">ts</span> <span class=\"c1\">-- or something nicer</span>\n\n<span class=\"nf\">my_favorite_numbers</span> <span class=\"ow\">=</span> <span class=\"kt\">Things</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"mi\">3</span><span class=\"p\">]</span>\n<span class=\"nf\">my_favorite_names</span> <span class=\"ow\">=</span> <span class=\"kt\">Things</span> <span class=\"p\">[</span><span class=\"s\">&quot;alan&quot;</span><span class=\"p\">]</span>\n\n<span class=\"nf\">things</span> <span class=\"ow\">::</span> <span class=\"p\">[</span><span class=\"kt\">Things</span><span class=\"p\">]</span>\n<span class=\"nf\">things</span> <span class=\"ow\">=</span> <span class=\"p\">[</span><span class=\"n\">my_favorite_numbers</span><span class=\"p\">,</span> <span class=\"n\">my_favorite_names</span><span class=\"p\">]</span>\n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 122358818,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "collections of heterogenous type",
            "submessages": [],
            "timestamp": 1518461852,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/612c7c2a108d7850c62d1d2293a481aa42855408?x=x&version=2",
            "client": "website",
            "content": "<p>I use stack.. old build plans can be a problem.. i'd like to help</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 122360233,
            "is_me_message": false,
            "last_edit_timestamp": 1518463792,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "PLRedmond@gmail.com",
            "sender_full_name": "Patrick Redmond (W'14)",
            "sender_id": 5014,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Stack help",
            "submessages": [],
            "timestamp": 1518463751,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/612c7c2a108d7850c62d1d2293a481aa42855408?x=x&version=2",
            "client": "website",
            "content": "<p>could you post the error? is it possible to post your stack.yaml and/or cabal-file so i can debug locally?</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 122360308,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "PLRedmond@gmail.com",
            "sender_full_name": "Patrick Redmond (W'14)",
            "sender_id": 5014,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Stack help",
            "submessages": [],
            "timestamp": 1518463834,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/612c7c2a108d7850c62d1d2293a481aa42855408?x=x&version=2",
            "client": "website",
            "content": "<p>i wish there was a :forall: emoji i could react with..</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 122360651,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f504",
                    "emoji_name": "arrows_counterclockwise",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "harold@x.st",
                        "full_name": "Harold Cooper (he) (F2'16)",
                        "id": 9490
                    },
                    "user_id": 9490
                },
                {
                    "emoji_code": "1f170",
                    "emoji_name": "a_button",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "harold@x.st",
                        "full_name": "Harold Cooper (he) (F2'16)",
                        "id": 9490
                    },
                    "user_id": 9490
                }
            ],
            "recipient_id": 22667,
            "sender_email": "PLRedmond@gmail.com",
            "sender_full_name": "Patrick Redmond (W'14)",
            "sender_id": 5014,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "collections of heterogenous type",
            "submessages": [],
            "timestamp": 1518464379,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/a6a0ff0a4a9a86ae7bc4524453d439bd?d=identicon&version=1",
            "client": "website",
            "content": "<p>wow! That's so cool! Thanks <span class=\"user-mention\" data-user-email=\"alan@hackerschool.com\" data-user-id=\"813\">@Alan O'Donnell</span> !</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 122366914,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "annie.cherk@gmail.com",
            "sender_full_name": "Annie Cherkaev (she/they) (m4'18)",
            "sender_id": 9502,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "collections of heterogenous type",
            "submessages": [],
            "timestamp": 1518466509,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4d074af6cc341ef51b25bb2f738cdb11?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"PLRedmond@gmail.com\" data-user-id=\"5014\">@Patrick Redmond (W'14)</span> \u2200</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 122377840,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "vaibhavsagar@gmail.com",
            "sender_full_name": "Vaibhav Sagar (he) (F1'16)",
            "sender_id": 100041,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "collections of heterogenous type",
            "submessages": [],
            "timestamp": 1518484771,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/612c7c2a108d7850c62d1d2293a481aa42855408?x=x&version=2",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"vaibhavsagar@gmail.com\" data-user-id=\"100041\">@Vaibhav Sagar (F1'16)</span> yeah but i want to react to messages with it :))</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 122378283,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "PLRedmond@gmail.com",
            "sender_full_name": "Patrick Redmond (W'14)",
            "sender_id": 5014,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "collections of heterogenous type",
            "submessages": [],
            "timestamp": 1518485685,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4d074af6cc341ef51b25bb2f738cdb11?d=identicon&version=1",
            "client": "website",
            "content": "<p>You're right, that would be a significant improvement on the current state of affairs.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 122378294,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "vaibhavsagar@gmail.com",
            "sender_full_name": "Vaibhav Sagar (he) (F1'16)",
            "sender_id": 100041,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "collections of heterogenous type",
            "submessages": [],
            "timestamp": 1518485728,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/efe57f0998df065470ff42c938f781cf?d=identicon&version=1",
            "client": "website",
            "content": "<p>ack I feel really silly -- I added \"allow-newer: true\" (as the error message instructed!!) and it worked. I could've sworn that it didn't work the first time I tried it but I tried it again just to prove to somebody that it wouldn't, and it did.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 122400966,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "libby@daydrea.me",
            "sender_full_name": "Libby Horacek (she) (SP1'15)",
            "sender_id": 7081,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Stack help",
            "submessages": [],
            "timestamp": 1518533880,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/efe57f0998df065470ff42c938f781cf?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"PLRedmond@gmail.com\" data-user-id=\"5014\">@Patrick Redmond (W'14)</span> thanks for the offer of help!</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 122401013,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "libby@daydrea.me",
            "sender_full_name": "Libby Horacek (she) (SP1'15)",
            "sender_id": 7081,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Stack help",
            "submessages": [],
            "timestamp": 1518533928,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/612c7c2a108d7850c62d1d2293a481aa42855408?x=x&version=2",
            "client": "website",
            "content": "<p>oh, i'm glad that worked!</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 122402587,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "PLRedmond@gmail.com",
            "sender_full_name": "Patrick Redmond (W'14)",
            "sender_id": 5014,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Stack help",
            "submessages": [],
            "timestamp": 1518536333,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/612c7c2a108d7850c62d1d2293a481aa42855408?x=x&version=2",
            "client": "website",
            "content": "<p>just be aware that <code>allow-newer</code> might reduce the reproducibility of your builds</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 122402600,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "PLRedmond@gmail.com",
            "sender_full_name": "Patrick Redmond (W'14)",
            "sender_id": 5014,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Stack help",
            "submessages": [],
            "timestamp": 1518536362,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/612c7c2a108d7850c62d1d2293a481aa42855408?x=x&version=2",
            "client": "website",
            "content": "<p>but it's nothing to worry about.. good luck! :)</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 122402607,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "PLRedmond@gmail.com",
            "sender_full_name": "Patrick Redmond (W'14)",
            "sender_id": 5014,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Stack help",
            "submessages": [],
            "timestamp": 1518536384,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/a6a0ff0a4a9a86ae7bc4524453d439bd?d=identicon&version=1",
            "client": "website",
            "content": "<p><a href=\"https://lexi-lambda.github.io/blog/2018/02/10/an-opinionated-guide-to-haskell-in-2018/\" target=\"_blank\" title=\"https://lexi-lambda.github.io/blog/2018/02/10/an-opinionated-guide-to-haskell-in-2018/\">In pretty amazing detail</a></p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 122424520,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "thumbs_up",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "vaibhavsagar@gmail.com",
                        "full_name": "Vaibhav Sagar (he) (F1'16)",
                        "id": 100041
                    },
                    "user_id": 100041
                }
            ],
            "recipient_id": 22667,
            "sender_email": "annie.cherk@gmail.com",
            "sender_full_name": "Annie Cherkaev (she/they) (m4'18)",
            "sender_id": 9502,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "An article on build tools, warnings & language extensions",
            "submessages": [],
            "timestamp": 1518574390,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4d074af6cc341ef51b25bb2f738cdb11?d=identicon&version=1",
            "client": "website",
            "content": "<p><a href=\"https://twitter.com/vbhvsgr/status/962387257930891265\" target=\"_blank\" title=\"https://twitter.com/vbhvsgr/status/962387257930891265\">https://twitter.com/vbhvsgr/status/962387257930891265</a></p>\n<div class=\"inline-preview-twitter\"><div class=\"twitter-tweet\"><a href=\"https://twitter.com/vbhvsgr/status/962387257930891265\" target=\"_blank\"><img class=\"twitter-avatar\" src=\"https://uploads.zulipusercontent.net/5a36609ebcc5a17a74023f516bae973840742d23/687474703a2f2f7062732e7477696d672e636f6d2f70726f66696c655f696d616765732f3737373531313738313733323334333830392f584e68474c684b6d5f6e6f726d616c2e6a7067\"></a><p><a href=\"https://twitter.com/lexi_lambda\" target=\"_blank\" title=\"https://twitter.com/lexi_lambda\">@lexi_lambda</a> Great post! Two minor comments:\n\n1. Nix coexists peacefully with other package managers, and I'd recommend starting with that instead of full-blown NixOS.\n\n2. Putting language extensions in each module allows them to be loaded in GHCi, unlike the `default-extensions` approach.</p><span>- Vaibhav Sagar (@vbhvsgr)</span></div></div>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 122427222,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "vaibhavsagar@gmail.com",
            "sender_full_name": "Vaibhav Sagar (he) (F1'16)",
            "sender_id": 100041,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "An article on build tools, warnings & language extensions",
            "submessages": [],
            "timestamp": 1518580332,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/d2d1f3e361a479849026fe298e091c50e1a4b20a?x=x&version=5",
            "client": "website",
            "content": "<p>hey :) I'm missing RC, so I want to sign up for a ton of meetups in Vancouver -- the Haskell group here is using \"Haskell Programming from first principles\" and there are some previous messages in this stream about it, I'm mainly wondering if you think it's a good place to start?</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 122754301,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "rc@alicja.dev",
            "sender_full_name": "Alicja Karolina Raszkowska (she/they) (W2'18)",
            "sender_id": 100049,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Haskell Programming from first principles",
            "submessages": [],
            "timestamp": 1519156041,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/8ede63f05c0a949ad0dce6b1e120fa5f2a1cc72a?x=x&version=2",
            "client": "website",
            "content": "<p>It's a fantastic place to start! Literally designed to teach Haskell without assuming any prior knowledge.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 122760939,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "thumbs_up",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "vaibhavsagar@gmail.com",
                        "full_name": "Vaibhav Sagar (he) (F1'16)",
                        "id": 100041
                    },
                    "user_id": 100041
                },
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "thumbs_up",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "peter@push.cx",
                        "full_name": "Peter Bhat Harkins (he) (F2'17)",
                        "id": 102004
                    },
                    "user_id": 102004
                },
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "thumbs_up",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "rc@alicja.dev",
                        "full_name": "Alicja Karolina Raszkowska (she/they) (W2'18)",
                        "id": 100049
                    },
                    "user_id": 100049
                }
            ],
            "recipient_id": 22667,
            "sender_email": "danweasel@gmail.com",
            "sender_full_name": "Andrew Nichols (he) (F2'17)",
            "sender_id": 101997,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Haskell Programming from first principles",
            "submessages": [],
            "timestamp": 1519166933,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/d2d1f3e361a479849026fe298e091c50e1a4b20a?x=x&version=5",
            "client": "website",
            "content": "<p>sounds good :) I'm not sure if learning Haskell just because I want to be part of a group is a good motivation, but after doing some functional JS and Lisp, I feel it's time to try it out</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 122762208,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1104",
                    "emoji_name": "haskell",
                    "reaction_type": "realm_emoji",
                    "user": {
                        "email": "amindfv@gmail.com",
                        "full_name": "Tom Murphy (F2'15)",
                        "id": 8693
                    },
                    "user_id": 8693
                },
                {
                    "emoji_code": "1104",
                    "emoji_name": "haskell",
                    "reaction_type": "realm_emoji",
                    "user": {
                        "email": "tobinyehle@gmail.com",
                        "full_name": "Tobin Yehle (he) (SP1'20)",
                        "id": 105607
                    },
                    "user_id": 105607
                },
                {
                    "emoji_code": "1104",
                    "emoji_name": "haskell",
                    "reaction_type": "realm_emoji",
                    "user": {
                        "email": "vaibhavsagar@gmail.com",
                        "full_name": "Vaibhav Sagar (he) (F1'16)",
                        "id": 100041
                    },
                    "user_id": 100041
                }
            ],
            "recipient_id": 22667,
            "sender_email": "rc@alicja.dev",
            "sender_full_name": "Alicja Karolina Raszkowska (she/they) (W2'18)",
            "sender_id": 100049,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Haskell Programming from first principles",
            "submessages": [],
            "timestamp": 1519169253,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4d074af6cc341ef51b25bb2f738cdb11?d=identicon&version=1",
            "client": "website",
            "content": "<p>Like typed holes except better! <a href=\"http://comcom.csail.mit.edu/comcom/#Synquid\" target=\"_blank\" title=\"http://comcom.csail.mit.edu/comcom/#Synquid\">http://comcom.csail.mit.edu/comcom/#Synquid</a></p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 122818940,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "vaibhavsagar@gmail.com",
            "sender_full_name": "Vaibhav Sagar (he) (F1'16)",
            "sender_id": 100041,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Synquid",
            "submessages": [],
            "timestamp": 1519277164,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/661412d42ecbf0c0bd354116859a5af3562f8e5f?x=x&version=4",
            "client": "website",
            "content": "<p>neat! weve had typed holes in Carp for a while now, but that might be interesting to hack into the compiler :)</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 122827392,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "veit@veitheller.de",
            "sender_full_name": "Veit Heller (he) (S1'17)",
            "sender_id": 101103,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Synquid",
            "submessages": [],
            "timestamp": 1519294950,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4d074af6cc341ef51b25bb2f738cdb11?d=identicon&version=1",
            "client": "website",
            "content": "<p>I'd love to try it if you do! Here's some more background: <a href=\"http://www.srl.inf.ethz.ch/pa2016/SMTSynthesis.pdf\" target=\"_blank\" title=\"http://www.srl.inf.ethz.ch/pa2016/SMTSynthesis.pdf\">http://www.srl.inf.ethz.ch/pa2016/SMTSynthesis.pdf</a></p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 122827468,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "vaibhavsagar@gmail.com",
            "sender_full_name": "Vaibhav Sagar (he) (F1'16)",
            "sender_id": 100041,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Synquid",
            "submessages": [],
            "timestamp": 1519295162,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/661412d42ecbf0c0bd354116859a5af3562f8e5f?x=x&version=4",
            "client": "website",
            "content": "<p>i\u2019m not sure i get to it in the next few weeks</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 122827502,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "veit@veitheller.de",
            "sender_full_name": "Veit Heller (he) (S1'17)",
            "sender_id": 101103,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Synquid",
            "submessages": [],
            "timestamp": 1519295258,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4d074af6cc341ef51b25bb2f738cdb11?d=identicon&version=1",
            "client": "website",
            "content": "<p>It's an area of active research, so it's possible it might take you much longer than that <span class=\"emoji emoji-1f604\" title=\"smile\">:smile:</span></p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 122827546,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "vaibhavsagar@gmail.com",
            "sender_full_name": "Vaibhav Sagar (he) (F1'16)",
            "sender_id": 100041,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Synquid",
            "submessages": [],
            "timestamp": 1519295299,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/661412d42ecbf0c0bd354116859a5af3562f8e5f?x=x&version=4",
            "client": "website",
            "content": "<p>i mean starting out :D</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 122827606,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "veit@veitheller.de",
            "sender_full_name": "Veit Heller (he) (S1'17)",
            "sender_id": 101103,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Synquid",
            "submessages": [],
            "timestamp": 1519295405,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/a6a0ff0a4a9a86ae7bc4524453d439bd?d=identicon&version=1",
            "client": "website",
            "content": "<p>I'm trying to run some code which I need to build with stack on a server  where my home directory has very limited disk space because it's backed up. The trouble is that stack, by default, places .stack in the home directory and then proceeds to put several large things in there, notably the correct version of the compiler, which exceeds the disk space quota so my build fails. </p>\n<p>It looks like there's an environment variable that stack uses to set the path to the .stack directory, and I'm trying to set that variable to point to my \"scratch\" directory, which is not backed up and hence has plenty of space, but I'm having trouble setting it correctly. Does anyone have experience with this?</p>\n<p>So, for instance, <a href=\"https://github.com/commercialhaskell/stack/issues/1148\" target=\"_blank\" title=\"https://github.com/commercialhaskell/stack/issues/1148\">this</a> describes how you should be able to set the path. </p>\n<p>I tried setting running that line (ie, <code>export STACK_GLOBAL_ROOT=path/to/scratch</code>, then doing a clean clone of my repo, attempting to build (<code>stack build</code>), then attempting to setup (<code>stack setup</code>), and I get the message: <br>\n<code>Unpacking GHC into /home/acherk/.stack/programs/x86_64-linux/ghc-8.0.2.temp/</code> <br>\n(meaning that the install location had not changed.)</p>\n<p>I found this line in the stack README: <br>\n\"For more information on paths, see 'stack path' and 'stack exec env'\"</p>\n<p>But when I run <code>stack path</code> or <code>stack exec env</code> I get aeson errors. This might be because my install is screwed up, or it might be unrelated. I was thinking of emailing support to ask them to reinstall stack (I can't do it myself since I dont have root on this server) but I was wondering if anyone had thoughts on what else to try before emailing them?</p>\n<div class=\"codehilite\"><pre><span></span>~$ stack path\nDownloaded lts-10.6 build plan.\nAesonException &quot;Error in $.packages.cassava.constraints.flags[&#39;bytestring--lt-0_10_4&#39;]: Invalid flag name: \\&quot;bytestring--lt-0_10_4\\&quot;&quot;\n~$ stack exec env\nDownloaded lts-10.6 build plan.\nAesonException &quot;Error in $.packages.cassava.constraints.flags[&#39;bytestring--lt-0_10_4&#39;]: Invalid flag name: \\&quot;bytestring--lt-0_10_4\\&quot;&quot;\n</pre></div>\n\n\n<p>Any ideas of what else to try?</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 123273290,
            "is_me_message": false,
            "last_edit_timestamp": 1520194945,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "annie.cherk@gmail.com",
            "sender_full_name": "Annie Cherkaev (she/they) (m4'18)",
            "sender_id": 9502,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "help! changing to location of .stack",
            "submessages": [],
            "timestamp": 1520194910,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4d074af6cc341ef51b25bb2f738cdb11?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"annie.cherk@gmail.com\" data-user-id=\"9502\">@Annie Cherkaev (S2'16)</span> the Aeson error at least indicates an old version of Stack, can you email support and ask them to upgrade? That might also resolve your other issues.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 123284456,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "vaibhavsagar@gmail.com",
            "sender_full_name": "Vaibhav Sagar (he) (F1'16)",
            "sender_id": 100041,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "help! changing to location of .stack",
            "submessages": [],
            "timestamp": 1520220789,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4d074af6cc341ef51b25bb2f738cdb11?d=identicon&version=1",
            "client": "website",
            "content": "<p>Alternatively you could run <code>stack upgrade</code> and see if that works.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 123284504,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "vaibhavsagar@gmail.com",
            "sender_full_name": "Vaibhav Sagar (he) (F1'16)",
            "sender_id": 100041,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "help! changing to location of .stack",
            "submessages": [],
            "timestamp": 1520220955,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4d074af6cc341ef51b25bb2f738cdb11?d=identicon&version=1",
            "client": "website",
            "content": "<p>Also it looks like the environment variable is <code>STACK_ROOT</code>, not <code>STACK_GLOBAL_ROOT</code></p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 123284545,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "vaibhavsagar@gmail.com",
            "sender_full_name": "Vaibhav Sagar (he) (F1'16)",
            "sender_id": 100041,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "help! changing to location of .stack",
            "submessages": [],
            "timestamp": 1520220999,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/a6a0ff0a4a9a86ae7bc4524453d439bd?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"vaibhavsagar@gmail.com\" data-user-id=\"100041\">@Vaibhav Sagar (F1'16)</span> thanks on both counts!</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 123286011,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "annie.cherk@gmail.com",
            "sender_full_name": "Annie Cherkaev (she/they) (m4'18)",
            "sender_id": 9502,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "help! changing to location of .stack",
            "submessages": [],
            "timestamp": 1520224485,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/612c7c2a108d7850c62d1d2293a481aa42855408?x=x&version=2",
            "client": "ZulipMobile",
            "content": "<p>In this situation you could always use a symlink if the program doesn't support writing to a different place through other means. For example:</p>\n<div class=\"codehilite\"><pre><span></span>ln -s ~/.stack /tmp/stack\n</pre></div>\n\n\n<p>This would put it into tmp (I might have arguments in the wrong order, but that's the gist)</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 123303403,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "PLRedmond@gmail.com",
            "sender_full_name": "Patrick Redmond (W'14)",
            "sender_id": 5014,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "help! changing to location of .stack",
            "submessages": [],
            "timestamp": 1520260549,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/612c7c2a108d7850c62d1d2293a481aa42855408?x=x&version=2",
            "client": "ZulipMobile",
            "content": "<p>I've been trying to teach a somebody haskell who has no experience with programming.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 123357530,
            "is_me_message": false,
            "last_edit_timestamp": 1520354464,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "PLRedmond@gmail.com",
            "sender_full_name": "Patrick Redmond (W'14)",
            "sender_id": 5014,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "what is a type?",
            "submessages": [],
            "timestamp": 1520354419,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/612c7c2a108d7850c62d1d2293a481aa42855408?x=x&version=2",
            "client": "ZulipMobile",
            "content": "<p>They stumped me Sunday with the question \"what is a type?\"</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 123357555,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "PLRedmond@gmail.com",
            "sender_full_name": "Patrick Redmond (W'14)",
            "sender_id": 5014,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "what is a type?",
            "submessages": [],
            "timestamp": 1520354490,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/612c7c2a108d7850c62d1d2293a481aa42855408?x=x&version=2",
            "client": "ZulipMobile",
            "content": "<p>I tried showing them examples of several sets of values, and saying \"the name if this set is the type 'Char' and this one is 'In8' and they are finite sets\" (i drew circles and wrote some values inside them)</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 123357616,
            "is_me_message": false,
            "last_edit_timestamp": 1520355103,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "PLRedmond@gmail.com",
            "sender_full_name": "Patrick Redmond (W'14)",
            "sender_id": 5014,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "what is a type?",
            "submessages": [],
            "timestamp": 1520354576,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/612c7c2a108d7850c62d1d2293a481aa42855408?x=x&version=2",
            "client": "ZulipMobile",
            "content": "<p>Then I expanded to infinite sets, 'String' and 'Integer' which seemed to work</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 123357682,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "PLRedmond@gmail.com",
            "sender_full_name": "Patrick Redmond (W'14)",
            "sender_id": 5014,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "what is a type?",
            "submessages": [],
            "timestamp": 1520354652,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/612c7c2a108d7850c62d1d2293a481aa42855408?x=x&version=2",
            "client": "ZulipMobile",
            "content": "<p>They had no problem with two-tuples and three-tuples</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 123357688,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "PLRedmond@gmail.com",
            "sender_full_name": "Patrick Redmond (W'14)",
            "sender_id": 5014,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "what is a type?",
            "submessages": [],
            "timestamp": 1520354674,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/612c7c2a108d7850c62d1d2293a481aa42855408?x=x&version=2",
            "client": "ZulipMobile",
            "content": "<p>Things fell apart when i tried introducing functions as \"collections of arrows\" (literally drawn on paper, arrows, connecting two circles) \"from this set (type) to this set (type)\" because they didn't understand how the collection of arrows could be thought of as having a type</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 123357753,
            "is_me_message": false,
            "last_edit_timestamp": 1520355141,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "PLRedmond@gmail.com",
            "sender_full_name": "Patrick Redmond (W'14)",
            "sender_id": 5014,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "what is a type?",
            "submessages": [],
            "timestamp": 1520354767,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/612c7c2a108d7850c62d1d2293a481aa42855408?x=x&version=2",
            "client": "ZulipMobile",
            "content": "<p>I used the examples:</p>\n<p><code>Data.Char.ord</code><br>\nand<br>\n<code>const 0 :: Char -&gt; Int</code></p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 123357773,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "PLRedmond@gmail.com",
            "sender_full_name": "Patrick Redmond (W'14)",
            "sender_id": 5014,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "what is a type?",
            "submessages": [],
            "timestamp": 1520354827,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/612c7c2a108d7850c62d1d2293a481aa42855408?x=x&version=2",
            "client": "ZulipMobile",
            "content": "<p>Eventually this stumbling block was overcome partly by making an analogy to the two-tuples from the previous part:</p>\n<p>A (unary) function is just a relationship between members of the two sets .. so you could imagine it as a collection of tuples.. since the tuples have type <code>(Char, Int)</code>, that's how you can think of the function type</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 123357874,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "PLRedmond@gmail.com",
            "sender_full_name": "Patrick Redmond (W'14)",
            "sender_id": 5014,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "what is a type?",
            "submessages": [],
            "timestamp": 1520354974,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/612c7c2a108d7850c62d1d2293a481aa42855408?x=x&version=2",
            "client": "ZulipMobile",
            "content": "<p>Does anyone know what this way of thinking of functions is called?</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 123357934,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "PLRedmond@gmail.com",
            "sender_full_name": "Patrick Redmond (W'14)",
            "sender_id": 5014,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "what is a type?",
            "submessages": [],
            "timestamp": 1520355043,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/612c7c2a108d7850c62d1d2293a481aa42855408?x=x&version=2",
            "client": "ZulipMobile",
            "content": "<p>Is there a better way to relate functions and their types to more concrete notions of types?</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 123357950,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "PLRedmond@gmail.com",
            "sender_full_name": "Patrick Redmond (W'14)",
            "sender_id": 5014,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "what is a type?",
            "submessages": [],
            "timestamp": 1520355079,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/aabd3f5b0d85a5cd43367315223e784a0b18b740?x=x&version=2",
            "client": "website",
            "content": "<p>I'm not sure if there's a more concise term for it, but I would call that the <em>set-theoretic definition of \"function\"</em> - i.e., where a relation is just a set of ordered pairs, and a function is just a relation where each left-hand item is related to only one right-hand item.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 123358046,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "levimroth@gmail.com",
            "sender_full_name": "Levi Roth (he) (W2'18)",
            "sender_id": 105051,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "what is a type?",
            "submessages": [],
            "timestamp": 1520355221,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/aabd3f5b0d85a5cd43367315223e784a0b18b740?x=x&version=2",
            "client": "website",
            "content": "<p>I'm not sure if this is helpful for what you're trying to do, but I wonder if it would help to approach types in terms of the <em>guarantees</em> that they provide about a program. For example, the point of having something with type <code>Int</code> is that you are guaranteed that it's an <code>Int</code>, so you can perform operations like addition without worrying that you've accidentally tried to add a string.</p>\n<p>In order to make use of these guarantees, you need to have some rules about they compose together. Example 1: If you want to do <code>if &lt;cond&gt; then &lt;foo&gt; else &lt;bar&gt;</code>, you/the compiler will want to check that <code>&lt;cond&gt;</code> is a <code>Bool</code> and that <code>&lt;foo&gt;</code> has the same type as <code>&lt;bar&gt;</code>; and you/the compiler will then be guaranteed that the result of this expression has the type of <code>&lt;foo&gt;</code> and <code>&lt;bar&gt;</code>. Example 2: if you compose a <code>Char</code> and an <code>Int</code> to a <code>(Char, Int)</code>, you/the compiler also need to know that <code>fst</code> will give you back a <code>Char</code> (and you need to know that the input is a pair to know that it makes sense to call <code>fst</code> in the first place).</p>\n<p>For the case of functions, the type of a function expresses how these guarantees are transformed. The function needs its inputs to meet certain guarantees for the computation to make sense; in turn, it's able to provide certain guarantees about the resulting value. Those rules are expressed in the type of the function.</p>\n<p>(I wrote this by thinking in terms of a language I do know, OCaml, and using Google to help me translate into Haskell, which I do not know. Hopefully what I've said here still makes sense after that translation. For that matter, hopefully my OCaml understanding is also correct!)</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 123358843,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "38",
                    "emoji_name": "wizard_hat",
                    "reaction_type": "realm_emoji",
                    "user": {
                        "email": "roberto.n.thais@gmail.com",
                        "full_name": "Roberto Thais (he) (W2'18)",
                        "id": 105531
                    },
                    "user_id": 105531
                }
            ],
            "recipient_id": 22667,
            "sender_email": "levimroth@gmail.com",
            "sender_full_name": "Levi Roth (he) (W2'18)",
            "sender_id": 105051,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "what is a type?",
            "submessages": [],
            "timestamp": 1520356365,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/d2d1f3e361a479849026fe298e091c50e1a4b20a?x=x&version=5",
            "client": "website",
            "content": "<p>one thing that helped me was crudely naming functions, e.g.:</p>\n<div class=\"codehilite\"><pre><span></span>arith :: Num b =&gt; (a -&gt; b) -&gt; Integer -&gt; a -&gt; b\narith aToB i a = (aToB a) * (fromInteger i)\n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 123364527,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "rc@alicja.dev",
            "sender_full_name": "Alicja Karolina Raszkowska (she/they) (W2'18)",
            "sender_id": 100049,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "what is a type?",
            "submessages": [],
            "timestamp": 1520365634,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/d2d1f3e361a479849026fe298e091c50e1a4b20a?x=x&version=5",
            "client": "website",
            "content": "<p>which is basically saying \"you use this to go from a to b\"</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 123364537,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "rc@alicja.dev",
            "sender_full_name": "Alicja Karolina Raszkowska (she/they) (W2'18)",
            "sender_id": 100049,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "what is a type?",
            "submessages": [],
            "timestamp": 1520365681,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/d2d1f3e361a479849026fe298e091c50e1a4b20a?x=x&version=5",
            "client": "website",
            "content": "<p>building intuition in Haskell is hard</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 123364587,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "rc@alicja.dev",
            "sender_full_name": "Alicja Karolina Raszkowska (she/they) (W2'18)",
            "sender_id": 100049,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "what is a type?",
            "submessages": [],
            "timestamp": 1520365713,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/612c7c2a108d7850c62d1d2293a481aa42855408?x=x&version=2",
            "client": "website",
            "content": "<p>these are both good approaches.. thanks! i'll try and report back</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 123365239,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "PLRedmond@gmail.com",
            "sender_full_name": "Patrick Redmond (W'14)",
            "sender_id": 5014,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "what is a type?",
            "submessages": [],
            "timestamp": 1520366802,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/dd016afc5e2d346a0eee00bb0268c2b33da824d5?x=x&version=1",
            "client": "website",
            "content": "<p>I might write this as:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kr\">data</span> <span class=\"kt\">Things</span>\n   <span class=\"ow\">=</span> <span class=\"kt\">IThings</span> <span class=\"p\">[</span><span class=\"kt\">Int</span><span class=\"p\">]</span>\n   <span class=\"o\">|</span> <span class=\"kt\">SThings</span> <span class=\"p\">[</span><span class=\"kt\">String</span><span class=\"p\">]</span>\n <span class=\"kr\">deriving</span> <span class=\"p\">(</span><span class=\"kt\">Show</span><span class=\"p\">,</span> <span class=\"kt\">Eq</span><span class=\"p\">)</span>\n\n<span class=\"nf\">my_favorite_numbers</span> <span class=\"ow\">=</span> <span class=\"kt\">IThings</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"mi\">3</span><span class=\"p\">]</span>\n<span class=\"nf\">my_favorite_names</span> <span class=\"ow\">=</span> <span class=\"kt\">SThings</span> <span class=\"p\">[</span><span class=\"s\">&quot;alan&quot;</span><span class=\"p\">]</span>\n\n<span class=\"nf\">things</span> <span class=\"ow\">::</span> <span class=\"p\">[</span><span class=\"kt\">Things</span><span class=\"p\">]</span>\n<span class=\"nf\">things</span> <span class=\"ow\">=</span> <span class=\"p\">[</span><span class=\"n\">my_favorite_numbers</span><span class=\"p\">,</span> <span class=\"n\">my_favorite_names</span><span class=\"p\">]</span>\n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 123374626,
            "is_me_message": false,
            "last_edit_timestamp": 1520381943,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "amindfv@gmail.com",
            "sender_full_name": "Tom Murphy (F2'15)",
            "sender_id": 8693,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "collections of heterogenous type",
            "submessages": [],
            "timestamp": 1520381647,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/dd016afc5e2d346a0eee00bb0268c2b33da824d5?x=x&version=1",
            "client": "website",
            "content": "<p>But I know I don't get a :forall: emoji for that one <span class=\"emoji emoji-1f638\" title=\"smile cat\">:smile_cat:</span></p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 123374629,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "amindfv@gmail.com",
            "sender_full_name": "Tom Murphy (F2'15)",
            "sender_id": 8693,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "collections of heterogenous type",
            "submessages": [],
            "timestamp": 1520381667,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/dd016afc5e2d346a0eee00bb0268c2b33da824d5?x=x&version=1",
            "client": "website",
            "content": "<p>That way you can case on the elements (before <code>Show</code>ing), and if you want to switch to \"heterogeneous\" lists later it's a relatively small change:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kr\">data</span> <span class=\"kt\">Thing</span>\n   <span class=\"ow\">=</span> <span class=\"kt\">IThing</span> <span class=\"kt\">Int</span>\n   <span class=\"o\">|</span> <span class=\"kt\">SThing</span> <span class=\"kt\">String</span>\n <span class=\"kr\">deriving</span> <span class=\"p\">(</span><span class=\"kt\">Show</span><span class=\"p\">,</span> <span class=\"kt\">Eq</span><span class=\"p\">)</span>\n\n<span class=\"nf\">my_favorite_numbers</span> <span class=\"ow\">=</span> <span class=\"n\">map</span> <span class=\"kt\">IThing</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"mi\">3</span><span class=\"p\">]</span>\n<span class=\"nf\">my_favorite_names</span> <span class=\"ow\">=</span> <span class=\"n\">map</span> <span class=\"kt\">SThing</span> <span class=\"p\">[</span><span class=\"s\">&quot;alan&quot;</span><span class=\"p\">]</span>\n\n<span class=\"nf\">things</span> <span class=\"ow\">::</span> <span class=\"p\">[[</span><span class=\"kt\">Thing</span><span class=\"p\">]]</span>\n<span class=\"nf\">things</span> <span class=\"ow\">=</span> <span class=\"p\">[</span><span class=\"n\">my_favorite_numbers</span><span class=\"p\">,</span> <span class=\"n\">my_favorite_names</span><span class=\"p\">]</span>\n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 123374754,
            "is_me_message": false,
            "last_edit_timestamp": 1520381957,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "amindfv@gmail.com",
            "sender_full_name": "Tom Murphy (F2'15)",
            "sender_id": 8693,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "collections of heterogenous type",
            "submessages": [],
            "timestamp": 1520381885,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/dd016afc5e2d346a0eee00bb0268c2b33da824d5?x=x&version=1",
            "client": "website",
            "content": "<p>I have been <span class=\"emoji emoji-2764\" title=\"heart\">:heart:</span> <span class=\"emoji emoji-1f49f\" title=\"heart decoration\">:heart_decoration:</span> <span class=\"emoji emoji-2764\" title=\"heart\">:heart:</span> ing <code>cabal new-build</code> lately! That is all.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 123375865,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "2764",
                    "emoji_name": "heart",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "vaibhavsagar@gmail.com",
                        "full_name": "Vaibhav Sagar (he) (F1'16)",
                        "id": 100041
                    },
                    "user_id": 100041
                }
            ],
            "recipient_id": 22667,
            "sender_email": "amindfv@gmail.com",
            "sender_full_name": "Tom Murphy (F2'15)",
            "sender_id": 8693,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "cabal new-build",
            "submessages": [],
            "timestamp": 1520384117,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/612c7c2a108d7850c62d1d2293a481aa42855408?x=x&version=2",
            "client": "ZulipMobile",
            "content": "<p>How does it compare with stack in terms of usability? I haven't had time to check out new build..</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 123397488,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "PLRedmond@gmail.com",
            "sender_full_name": "Patrick Redmond (W'14)",
            "sender_id": 5014,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "cabal new-build",
            "submessages": [],
            "timestamp": 1520428238,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/dd016afc5e2d346a0eee00bb0268c2b33da824d5?x=x&version=1",
            "client": "website",
            "content": "<p>I haven't used stack extensively (really for any non-trivial projects) but my general impression is they're trying to do similar things (reproducible builds). <code>cabal new-build</code> keeps a global store to keep file size down but separates projects like stack. It allows you to have multiple versions of a package installed at the same time (i.e. no \"cabal hell\") and has niceties like creating freeze files if you want to just not think about versioning a la <code>npm</code></p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 123425642,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "amindfv@gmail.com",
            "sender_full_name": "Tom Murphy (F2'15)",
            "sender_id": 8693,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "cabal new-build",
            "submessages": [],
            "timestamp": 1520474253,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/dd016afc5e2d346a0eee00bb0268c2b33da824d5?x=x&version=1",
            "client": "website",
            "content": "<p>We've been using <code>cabal new-build</code> at work for the past ~8 months but it's only recently that I've noticed how little I have to think about managing packages, and found lots of little <span class=\"emoji emoji-1f60d\" title=\"heart eyes\">:heart_eyes:</span> features</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 123425694,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "amindfv@gmail.com",
            "sender_full_name": "Tom Murphy (F2'15)",
            "sender_id": 8693,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "cabal new-build",
            "submessages": [],
            "timestamp": 1520474383,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/dd016afc5e2d346a0eee00bb0268c2b33da824d5?x=x&version=1",
            "client": "website",
            "content": "<p>If I had to directly compare <code>new-build</code> and stack, I <strong>miiight</strong> say it's like the difference between <code>snap-core</code> and <code>yesod</code> (the former more minimalist, the latter more opinionated)</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 123425801,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "amindfv@gmail.com",
            "sender_full_name": "Tom Murphy (F2'15)",
            "sender_id": 8693,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "cabal new-build",
            "submessages": [],
            "timestamp": 1520474529,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/612c7c2a108d7850c62d1d2293a481aa42855408?x=x&version=2",
            "client": "website",
            "content": "<p>interesting.. if new-build is less opinionated, i might like it more than stack... i went over to stack when it first came out because i was running into cabal hell so regularly, but stack has its own issues..</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 123515359,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "PLRedmond@gmail.com",
            "sender_full_name": "Patrick Redmond (W'14)",
            "sender_id": 5014,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "cabal new-build",
            "submessages": [],
            "timestamp": 1520640493,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/612c7c2a108d7850c62d1d2293a481aa42855408?x=x&version=2",
            "client": "website",
            "content": "<p>what's the upgrade path for a cabal new-build project when you want newer versions of the dependencies?<br>\ndo you have a favorite intro resource?</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 123515366,
            "is_me_message": false,
            "last_edit_timestamp": 1520640556,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "PLRedmond@gmail.com",
            "sender_full_name": "Patrick Redmond (W'14)",
            "sender_id": 5014,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "cabal new-build",
            "submessages": [],
            "timestamp": 1520640514,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/612c7c2a108d7850c62d1d2293a481aa42855408?x=x&version=2",
            "client": "website",
            "content": "<div class=\"codehilite\"><pre><span></span>*Main Lib&gt; read &quot;-1&quot; :: Word\n18446744073709551615\n</pre></div>\n\n\n<p>I think haskell reads the number first, and then fits it to the bound. I'm not sure why it does this, but it seems like a bug.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 123520012,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "PLRedmond@gmail.com",
            "sender_full_name": "Patrick Redmond (W'14)",
            "sender_id": 5014,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "reading and numeric overflow",
            "submessages": [],
            "timestamp": 1520650137,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4d074af6cc341ef51b25bb2f738cdb11?d=identicon&version=1",
            "client": "website",
            "content": "<p><code>Word</code> is unsigned, see <a href=\"https://hackage.haskell.org/package/base-4.10.1.0/docs/Data-Word.html#t:Word\" target=\"_blank\" title=\"https://hackage.haskell.org/package/base-4.10.1.0/docs/Data-Word.html#t:Word\">https://hackage.haskell.org/package/base-4.10.1.0/docs/Data-Word.html#t:Word</a></p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 123520109,
            "is_me_message": false,
            "last_edit_timestamp": 1520650414,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "vaibhavsagar@gmail.com",
            "sender_full_name": "Vaibhav Sagar (he) (F1'16)",
            "sender_id": 100041,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "reading and numeric overflow",
            "submessages": [],
            "timestamp": 1520650362,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4d074af6cc341ef51b25bb2f738cdb11?d=identicon&version=1",
            "client": "website",
            "content": "<p>What do you expect this to do?</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 123520118,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "vaibhavsagar@gmail.com",
            "sender_full_name": "Vaibhav Sagar (he) (F1'16)",
            "sender_id": 100041,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "reading and numeric overflow",
            "submessages": [],
            "timestamp": 1520650432,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4d074af6cc341ef51b25bb2f738cdb11?d=identicon&version=1",
            "client": "website",
            "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kt\">Prelude</span><span class=\"o\">&gt;</span> <span class=\"p\">(</span><span class=\"o\">-</span><span class=\"mi\">1</span> <span class=\"ow\">::</span> <span class=\"kt\">Word</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"p\">(</span><span class=\"n\">maxBound</span> <span class=\"ow\">::</span> <span class=\"kt\">Word</span><span class=\"p\">)</span>\n<span class=\"kt\">True</span>\n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 123520216,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "vaibhavsagar@gmail.com",
            "sender_full_name": "Vaibhav Sagar (he) (F1'16)",
            "sender_id": 100041,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "reading and numeric overflow",
            "submessages": [],
            "timestamp": 1520650665,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/612c7c2a108d7850c62d1d2293a481aa42855408?x=x&version=2",
            "client": "website",
            "content": "<p>I kind of expected that to be a parse error, honestly.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 123577803,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "PLRedmond@gmail.com",
            "sender_full_name": "Patrick Redmond (W'14)",
            "sender_id": 5014,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "reading and numeric overflow",
            "submessages": [],
            "timestamp": 1520793380,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/612c7c2a108d7850c62d1d2293a481aa42855408?x=x&version=2",
            "client": "website",
            "content": "<div class=\"codehilite\"><pre><span></span>Prelude Data.Int&gt; read &quot;230918&quot; :: Int8\n6\nPrelude Data.Int&gt; 230918 :: Int8\n6\n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 123577811,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "PLRedmond@gmail.com",
            "sender_full_name": "Patrick Redmond (W'14)",
            "sender_id": 5014,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "reading and numeric overflow",
            "submessages": [],
            "timestamp": 1520793481,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/612c7c2a108d7850c62d1d2293a481aa42855408?x=x&version=2",
            "client": "website",
            "content": "<p>In my expectation, the former would be <code>_|_</code> and the latter would be a parse error.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 123577852,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "PLRedmond@gmail.com",
            "sender_full_name": "Patrick Redmond (W'14)",
            "sender_id": 5014,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "reading and numeric overflow",
            "submessages": [],
            "timestamp": 1520793518,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/612c7c2a108d7850c62d1d2293a481aa42855408?x=x&version=2",
            "client": "website",
            "content": "<p>The type <code>Int8</code> cannot represent the number <code>230918</code>, just as the type <code>Word</code> cannot represent the number <code>-1</code>.</p>\n<p>I find it to be inconsistent with the rest of haskell's attitude toward data mixups (type errors) that the behavior for reifying a literal seems to first presume type <code>Integer</code> before enforcing (possibly by overflow) the declared or inferenced bounds.<br>\nIe.</p>\n<div class=\"codehilite\"><pre><span></span>\\s -&gt; let i = read s :: Integer in fromIntegral i\n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 123577948,
            "is_me_message": false,
            "last_edit_timestamp": 1520793906,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "PLRedmond@gmail.com",
            "sender_full_name": "Patrick Redmond (W'14)",
            "sender_id": 5014,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "reading and numeric overflow",
            "submessages": [],
            "timestamp": 1520793779,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/8ede63f05c0a949ad0dce6b1e120fa5f2a1cc72a?x=x&version=2",
            "client": "website",
            "content": "<p><code>230918 :: Int8</code> does at least provoke a warning for me</p>\n<div class=\"codehilite\"><pre><span></span>&lt;interactive&gt;:29:3: warning: [-Woverflowed-literals]\n    Literal 230918 is out of the Int8 range -128..127\n6\n</pre></div>\n\n\n<p>But this sadly does not: </p>\n<div class=\"codehilite\"><pre><span></span>Prelude Data.Int&gt; f :: Int8 -&gt; Int8; f = id\nPrelude Data.Int&gt; x = 230918\nPrelude Data.Int&gt; f x\n6\n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 123578281,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "danweasel@gmail.com",
            "sender_full_name": "Andrew Nichols (he) (F2'17)",
            "sender_id": 101997,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "reading and numeric overflow",
            "submessages": [],
            "timestamp": 1520794565,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/570b5294859a4650f5c6c4f866b6fba3e34af02b?x=x&version=2",
            "client": "website",
            "content": "<p>Looks like <a href=\"https://hackage.haskell.org/package/base-4.10.1.0/docs/src/GHC.Read.html#line-520\" target=\"_blank\" title=\"https://hackage.haskell.org/package/base-4.10.1.0/docs/src/GHC.Read.html#line-520\">all the read instances</a> for number call <code>readNumber</code> and then convert. It does seem a bit annoying to get no warning of overflow, but that is consistent with other arithmetic operations.</p>\n<div class=\"codehilite\"><pre><span></span>\u03bb&gt; (0 :: Word) - (1 :: Word)\n18446744073709551615\n</pre></div>\n\n\n<p>If you want to fail on overflow you could always do something like this:</p>\n<div class=\"codehilite\"><pre><span></span>readSafe :: String -&gt; Maybe Word\nreadSafe s = if (toInteger &lt;$&gt; w) == i then w else Nothing\n  where\n    w :: Maybe Word\n    w = readMaybe s\n    i :: Maybe Integer\n    i = readMaybe s\n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 123578752,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "tobinyehle@gmail.com",
            "sender_full_name": "Tobin Yehle (he) (SP1'20)",
            "sender_id": 105607,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "reading and numeric overflow",
            "submessages": [],
            "timestamp": 1520795741,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/612c7c2a108d7850c62d1d2293a481aa42855408?x=x&version=2",
            "client": "website",
            "content": "<p>i recognize that when doing arithmetic one must be careful about overflow, however i still find it surprising that reifying literals (or reading in strings) can cause overflow..</p>\n<div class=\"codehilite\"><pre><span></span>&lt;interactive&gt;:29:3: warning: [-Woverflowed-literals]\n    Literal 230918 is out of the Int8 range -128..127\n</pre></div>\n\n\n<p>this is sweet! is that in a new version of the compiler? i'll try updating</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 123587624,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "PLRedmond@gmail.com",
            "sender_full_name": "Patrick Redmond (W'14)",
            "sender_id": 5014,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "reading and numeric overflow",
            "submessages": [],
            "timestamp": 1520816069,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/612c7c2a108d7850c62d1d2293a481aa42855408?x=x&version=2",
            "client": "website",
            "content": "<p>one tension i've noticed recently as i've been writing some haskell code for work is the need sometimes to either <br>\n1. stop execution of code due to an error case, or<br>\n2. report on an error case and keep going</p>\n<p>i guess the \"proper way\" to do this is to use the <a href=\"https://hackage.haskell.org/package/transformers-0.5.5.0/docs/Control-Monad-Trans-Except.html\" target=\"_blank\" title=\"https://hackage.haskell.org/package/transformers-0.5.5.0/docs/Control-Monad-Trans-Except.html\"><code>ExceptT</code></a> transformer (to stop code) stacked with the <a href=\"https://hackage.haskell.org/package/monad-logger-0.3.28.1/docs/Control-Monad-Logger.html\" target=\"_blank\" title=\"https://hackage.haskell.org/package/monad-logger-0.3.28.1/docs/Control-Monad-Logger.html\"><code>LoggingT</code></a> transformer (to report on an error case and continue)</p>\n<p>however, i really don't like transformer stacks and would like to find a pure-code pattern without transformer stacks which is convenient for both of these use cases .. <code>Either error result</code> is great for stopping code, but i'd need also something which accumulates messages to (optionally) spit out later (once execution returns up to impure code, and if you choose to print the messages).. i guess that sounds a lot like the <code>WriterT</code> transformer...</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 123590888,
            "is_me_message": false,
            "last_edit_timestamp": 1520824546,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "PLRedmond@gmail.com",
            "sender_full_name": "Patrick Redmond (W'14)",
            "sender_id": 5014,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "stopping code and reporting errors",
            "submessages": [],
            "timestamp": 1520824025,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/612c7c2a108d7850c62d1d2293a481aa42855408?x=x&version=2",
            "client": "website",
            "content": "<p>i find monads in pure-code less readable of their 'spooky action at a distance' way of mimicking effects</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 123590941,
            "is_me_message": false,
            "last_edit_timestamp": 1520824514,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "PLRedmond@gmail.com",
            "sender_full_name": "Patrick Redmond (W'14)",
            "sender_id": 5014,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "stopping code and reporting errors",
            "submessages": [],
            "timestamp": 1520824093,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/612c7c2a108d7850c62d1d2293a481aa42855408?x=x&version=2",
            "client": "website",
            "content": "<p>maybe somebody knows of a lightweight way to approach this?</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 123591018,
            "is_me_message": false,
            "last_edit_timestamp": 1520824276,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "PLRedmond@gmail.com",
            "sender_full_name": "Patrick Redmond (W'14)",
            "sender_id": 5014,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "stopping code and reporting errors",
            "submessages": [],
            "timestamp": 1520824267,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4d074af6cc341ef51b25bb2f738cdb11?d=identicon&version=1",
            "client": "website",
            "content": "<p>Sounds like you want <a href=\"https://hackage.haskell.org/package/validation\" target=\"_blank\" title=\"https://hackage.haskell.org/package/validation\">Validation</a></p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 123592720,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "vaibhavsagar@gmail.com",
            "sender_full_name": "Vaibhav Sagar (he) (F1'16)",
            "sender_id": 100041,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "stopping code and reporting errors",
            "submessages": [],
            "timestamp": 1520828135,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4d074af6cc341ef51b25bb2f738cdb11?d=identicon&version=1",
            "client": "website",
            "content": "<p>i.e. it's like <code>Either</code> except that it accumulates errors as you go instead of stopping at the first one. For this reason, it has no <code>Monad</code> instance.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 123592769,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "vaibhavsagar@gmail.com",
            "sender_full_name": "Vaibhav Sagar (he) (F1'16)",
            "sender_id": 100041,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "stopping code and reporting errors",
            "submessages": [],
            "timestamp": 1520828224,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4d074af6cc341ef51b25bb2f738cdb11?d=identicon&version=1",
            "client": "website",
            "content": "<p>Alternatively, you might like the <a href=\"https://hackage.haskell.org/package/these\" target=\"_blank\" title=\"https://hackage.haskell.org/package/these\"><code>these</code></a> package which offers different but possibly useful functionality. There's a cool blog post about it <a href=\"https://teh.id.au/posts/2017/03/29/these-align-crosswalk/index.html\" target=\"_blank\" title=\"https://teh.id.au/posts/2017/03/29/these-align-crosswalk/index.html\">here</a>.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 123592815,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "vaibhavsagar@gmail.com",
            "sender_full_name": "Vaibhav Sagar (he) (F1'16)",
            "sender_id": 100041,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "stopping code and reporting errors",
            "submessages": [],
            "timestamp": 1520828330,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4d074af6cc341ef51b25bb2f738cdb11?d=identicon&version=1",
            "client": "website",
            "content": "<p>Tim also has a blog post about <a href=\"https://teh.id.au/posts/2017/03/13/accumulating-errors/\" target=\"_blank\" title=\"https://teh.id.au/posts/2017/03/13/accumulating-errors/\">accumulating errors</a></p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 123594072,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "vaibhavsagar@gmail.com",
            "sender_full_name": "Vaibhav Sagar (he) (F1'16)",
            "sender_id": 100041,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "stopping code and reporting errors",
            "submessages": [],
            "timestamp": 1520831112,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/612c7c2a108d7850c62d1d2293a481aa42855408?x=x&version=2",
            "client": "ZulipMobile",
            "content": "<p>Ooh. So many new things to try. Thanks! The post about <code>These</code> is very interesting, and helpfully also links to a post about merging maps :)) fun</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 123609140,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "PLRedmond@gmail.com",
            "sender_full_name": "Patrick Redmond (W'14)",
            "sender_id": 5014,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "stopping code and reporting errors",
            "submessages": [],
            "timestamp": 1520862562,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4d074af6cc341ef51b25bb2f738cdb11?d=identicon&version=1",
            "client": "website",
            "content": "<p>This is right after ZuriHac: <a href=\"https://monadic.party/\" target=\"_blank\" title=\"https://monadic.party/\">https://monadic.party/</a>, and I just realised this means I might be able to go</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 123909754,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "vaibhavsagar@gmail.com",
            "sender_full_name": "Vaibhav Sagar (he) (F1'16)",
            "sender_id": 100041,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "monadic.party",
            "submessages": [],
            "timestamp": 1521453162,
            "topic_links": [
                "https://monadic.party"
            ],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/a5990ea1928ad47ec4fc3b7998607178?d=identicon&version=1",
            "client": "website",
            "content": "<p>There ain't no party like a monadic party, because a monadic party Maybe[stop | don't stop]?</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 123915748,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "2764",
                    "emoji_name": "heart",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "rc@alicja.dev",
                        "full_name": "Alicja Karolina Raszkowska (she/they) (W2'18)",
                        "id": 100049
                    },
                    "user_id": 100049
                }
            ],
            "recipient_id": 22667,
            "sender_email": "paul.gowder@gmail.com",
            "sender_full_name": "Paul Gowder (S2'17)",
            "sender_id": 101322,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "monadic.party",
            "submessages": [],
            "timestamp": 1521464988,
            "topic_links": [
                "https://monadic.party"
            ],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/570b5294859a4650f5c6c4f866b6fba3e34af02b?x=x&version=2",
            "client": "website",
            "content": "<p>Will the talks be recorded/streamed? Doesn't look like it from their website, but this sounds interesting.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 123923439,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "tobinyehle@gmail.com",
            "sender_full_name": "Tobin Yehle (he) (SP1'20)",
            "sender_id": 105607,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "monadic.party",
            "submessages": [],
            "timestamp": 1521477126,
            "topic_links": [
                "https://monadic.party"
            ],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/612c7c2a108d7850c62d1d2293a481aa42855408?x=x&version=2",
            "client": "website",
            "content": "<p>i've been using <a href=\"https://hackage.haskell.org/package/fgl\" target=\"_blank\" title=\"https://hackage.haskell.org/package/fgl\">fgl</a> for representing graphs recently, and it has won me over from <a href=\"https://hackage.haskell.org/package/containers-0.5.11.0/docs/Data-Graph.html\" target=\"_blank\" title=\"https://hackage.haskell.org/package/containers-0.5.11.0/docs/Data-Graph.html\">containers:Data.Graph</a> (and even from <a href=\"https://hackage.haskell.org/package/containers-0.5.11.0/docs/Data-Tree.html\" target=\"_blank\" title=\"https://hackage.haskell.org/package/containers-0.5.11.0/docs/Data-Tree.html\">containers:Data.Tree</a>, but that's maybe because i'm trying to be too general).. does anyone else have a favorite graph library they use?</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 123933889,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "PLRedmond@gmail.com",
            "sender_full_name": "Patrick Redmond (W'14)",
            "sender_id": 5014,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "graphs",
            "submessages": [],
            "timestamp": 1521493167,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4d074af6cc341ef51b25bb2f738cdb11?d=identicon&version=1",
            "client": "website",
            "content": "<p>FGL is great and AFAIK is the most fully featured, but sometimes I just want the simple <code>IntMap [Int]</code>adjacency list implementation so I just roll my own <span class=\"emoji emoji-1f642\" title=\"simple smile\">:simple_smile:</span></p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 123937814,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "vaibhavsagar@gmail.com",
            "sender_full_name": "Vaibhav Sagar (he) (F1'16)",
            "sender_id": 100041,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "graphs",
            "submessages": [],
            "timestamp": 1521500123,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4d074af6cc341ef51b25bb2f738cdb11?d=identicon&version=1",
            "client": "website",
            "content": "<p>One thing that bothers me is that <code>Data.Graph</code> uses <code>Array</code> instead of <code>Vector</code> unlike almost every other library I use.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 123937947,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "vaibhavsagar@gmail.com",
            "sender_full_name": "Vaibhav Sagar (he) (F1'16)",
            "sender_id": 100041,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "graphs",
            "submessages": [],
            "timestamp": 1521500379,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/612c7c2a108d7850c62d1d2293a481aa42855408?x=x&version=2",
            "client": "website",
            "content": "<p>Yeah, I find <code>Array</code> to be pretty confusing every time I approach it.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 123938143,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "PLRedmond@gmail.com",
            "sender_full_name": "Patrick Redmond (W'14)",
            "sender_id": 5014,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "graphs",
            "submessages": [],
            "timestamp": 1521500694,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4d074af6cc341ef51b25bb2f738cdb11?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-id=\"105607\">@Tobin Yehle (m1'18)</span>: <a href=\"https://www.reddit.com/r/programming/comments/85kcre/monadic_party_talk_titles_and_schedule_announced/dvy41jm/\" target=\"_blank\" title=\"https://www.reddit.com/r/programming/comments/85kcre/monadic_party_talk_titles_and_schedule_announced/dvy41jm/\">Yes!</a></p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 123944357,
            "is_me_message": false,
            "last_edit_timestamp": 1521513593,
            "reactions": [
                {
                    "emoji_code": "1f6b0",
                    "emoji_name": "potable_water",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "tobinyehle@gmail.com",
                        "full_name": "Tobin Yehle (he) (SP1'20)",
                        "id": 105607
                    },
                    "user_id": 105607
                },
                {
                    "emoji_code": "1f389",
                    "emoji_name": "tada",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "tobinyehle@gmail.com",
                        "full_name": "Tobin Yehle (he) (SP1'20)",
                        "id": 105607
                    },
                    "user_id": 105607
                }
            ],
            "recipient_id": 22667,
            "sender_email": "vaibhavsagar@gmail.com",
            "sender_full_name": "Vaibhav Sagar (he) (F1'16)",
            "sender_id": 100041,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "monadic.party",
            "submessages": [],
            "timestamp": 1521513564,
            "topic_links": [
                "https://monadic.party"
            ],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/d2d1f3e361a479849026fe298e091c50e1a4b20a?x=x&version=5",
            "client": "website",
            "content": "<p>I started doing Exercism today and stumbled upon a challenge that I'm not sure how to handle - <a href=\"http://exercism.io/exercises/haskell/bob/readme\" target=\"_blank\" title=\"http://exercism.io/exercises/haskell/bob/readme\">http://exercism.io/exercises/haskell/bob/readme</a><br>\n<br>\nsome background:<br>\n- I've only been doing Haskell for a month now, following \"Haskell Programming from First Principles\" (finished chapter 9 on lists)<br>\n- normally I would use a regex to solve it, but somebody suggested parser combinators - when I started researching them, all the scary articles with monads and other things I don't know popped up<br>\n<br>\nI'm not sure if I should:<br>\n- leave it for now and get back to it after I do the corresponding chapter in the book (which is at least a few weeks away)<br>\n- try and do it with regexes, however unrecommended that is<br>\n- learn about parser combinators and not be scared of monads<br>\n- use things I already know - filters, recursion, list comprehension - and try to hack around the problem</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 123985416,
            "is_me_message": false,
            "last_edit_timestamp": 1521587045,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "rc@alicja.dev",
            "sender_full_name": "Alicja Karolina Raszkowska (she/they) (W2'18)",
            "sender_id": 100049,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "exercism",
            "submessages": [],
            "timestamp": 1521586973,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/d2d1f3e361a479849026fe298e091c50e1a4b20a?x=x&version=5",
            "client": "website",
            "content": "<p>I figured out a way to do it only using the stuff I already know, would love some feedback - <a href=\"http://exercism.io/submissions/0d6f88847336478080e513278128975c\" target=\"_blank\" title=\"http://exercism.io/submissions/0d6f88847336478080e513278128975c\">http://exercism.io/submissions/0d6f88847336478080e513278128975c</a></p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 123987155,
            "is_me_message": false,
            "last_edit_timestamp": 1521590328,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "rc@alicja.dev",
            "sender_full_name": "Alicja Karolina Raszkowska (she/they) (W2'18)",
            "sender_id": 100049,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "exercism",
            "submessages": [],
            "timestamp": 1521590230,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/d2d1f3e361a479849026fe298e091c50e1a4b20a?x=x&version=5",
            "client": "website",
            "content": "<p>also, got excited about parser combinators, but I think I don't know enough yet :)</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 123987162,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "rc@alicja.dev",
            "sender_full_name": "Alicja Karolina Raszkowska (she/they) (W2'18)",
            "sender_id": 100049,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "exercism",
            "submessages": [],
            "timestamp": 1521590244,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4d074af6cc341ef51b25bb2f738cdb11?d=identicon&version=1",
            "client": "website",
            "content": "<p>I think it's a good idea to hold off on parser combinators until you're more familiar with them. Doing it with regexes is fine <span class=\"emoji emoji-1f604\" title=\"smile\">:smile:</span>.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 123989317,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "vaibhavsagar@gmail.com",
            "sender_full_name": "Vaibhav Sagar (he) (F1'16)",
            "sender_id": 100041,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "exercism",
            "submessages": [],
            "timestamp": 1521594317,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4d074af6cc341ef51b25bb2f738cdb11?d=identicon&version=1",
            "client": "website",
            "content": "<p>I think your solution is excellent, very clean and easy to understand.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 123989361,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "vaibhavsagar@gmail.com",
            "sender_full_name": "Vaibhav Sagar (he) (F1'16)",
            "sender_id": 100041,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "exercism",
            "submessages": [],
            "timestamp": 1521594371,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4d074af6cc341ef51b25bb2f738cdb11?d=identicon&version=1",
            "client": "website",
            "content": "<p>You can replace <code>isSilent</code> with <code>null</code>, which checks if a list is empty.</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"nf\">isSilent</span> <span class=\"ow\">::</span> <span class=\"kt\">String</span> <span class=\"ow\">-&gt;</span> <span class=\"kt\">Bool</span>\n<span class=\"nf\">isSilent</span> <span class=\"ow\">=</span> <span class=\"n\">null</span>\n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 123989526,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "vaibhavsagar@gmail.com",
            "sender_full_name": "Vaibhav Sagar (he) (F1'16)",
            "sender_id": 100041,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "exercism",
            "submessages": [],
            "timestamp": 1521594798,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4d074af6cc341ef51b25bb2f738cdb11?d=identicon&version=1",
            "client": "website",
            "content": "<p>You could golf the solution to be a little shorter by taking advantage of chained comparisons and <code>null</code>:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kt\">Prelude</span><span class=\"o\">&gt;</span> <span class=\"n\">isAsking</span> <span class=\"n\">s</span> <span class=\"ow\">=</span> <span class=\"n\">not</span> <span class=\"p\">(</span><span class=\"n\">null</span> <span class=\"n\">s</span><span class=\"p\">)</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">last</span> <span class=\"n\">s</span> <span class=\"o\">==</span> <span class=\"sc\">&#39;?&#39;</span>\n<span class=\"kt\">Prelude</span><span class=\"o\">&gt;</span> <span class=\"n\">isAsking</span> <span class=\"s\">&quot;&quot;</span>\n<span class=\"kt\">False</span>\n<span class=\"kt\">Prelude</span><span class=\"o\">&gt;</span> <span class=\"n\">isAsking</span> <span class=\"s\">&quot;What.&quot;</span>\n<span class=\"kt\">False</span>\n<span class=\"kt\">Prelude</span><span class=\"o\">&gt;</span> <span class=\"n\">isAsking</span> <span class=\"s\">&quot;Huh?&quot;</span>\n<span class=\"kt\">True</span>\n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 123989639,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "vaibhavsagar@gmail.com",
            "sender_full_name": "Vaibhav Sagar (he) (F1'16)",
            "sender_id": 100041,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "exercism",
            "submessages": [],
            "timestamp": 1521595052,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4d074af6cc341ef51b25bb2f738cdb11?d=identicon&version=1",
            "client": "website",
            "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kt\">Prelude</span> <span class=\"kt\">Data</span><span class=\"o\">.</span><span class=\"kt\">Char</span><span class=\"o\">&gt;</span> <span class=\"n\">isYelling</span> <span class=\"n\">s</span> <span class=\"ow\">=</span> <span class=\"n\">not</span> <span class=\"p\">(</span><span class=\"n\">null</span> <span class=\"n\">s</span><span class=\"p\">)</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">all</span> <span class=\"n\">isUpper</span> <span class=\"n\">s</span>\n<span class=\"kt\">Prelude</span> <span class=\"kt\">Data</span><span class=\"o\">.</span><span class=\"kt\">Char</span><span class=\"o\">&gt;</span> <span class=\"n\">isYelling</span> <span class=\"s\">&quot;not yelling&quot;</span>\n<span class=\"kt\">False</span>\n<span class=\"kt\">Prelude</span> <span class=\"kt\">Data</span><span class=\"o\">.</span><span class=\"kt\">Char</span><span class=\"o\">&gt;</span> <span class=\"n\">isYelling</span> <span class=\"s\">&quot;YELLING&quot;</span>\n<span class=\"kt\">True</span>\n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 123989690,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "vaibhavsagar@gmail.com",
            "sender_full_name": "Vaibhav Sagar (he) (F1'16)",
            "sender_id": 100041,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "exercism",
            "submessages": [],
            "timestamp": 1521595174,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/d2d1f3e361a479849026fe298e091c50e1a4b20a?x=x&version=5",
            "client": "website",
            "content": "<p>thanks <span class=\"user-mention\" data-user-id=\"100041\">@Vaibhav Sagar (F1'16)</span>!</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 123992293,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "rc@alicja.dev",
            "sender_full_name": "Alicja Karolina Raszkowska (she/they) (W2'18)",
            "sender_id": 100049,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "exercism",
            "submessages": [],
            "timestamp": 1521601007,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/d2d1f3e361a479849026fe298e091c50e1a4b20a?x=x&version=5",
            "client": "website",
            "content": "<p>yelling actually needs a longer clause</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 123992294,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "rc@alicja.dev",
            "sender_full_name": "Alicja Karolina Raszkowska (she/they) (W2'18)",
            "sender_id": 100049,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "exercism",
            "submessages": [],
            "timestamp": 1521601015,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/d2d1f3e361a479849026fe298e091c50e1a4b20a?x=x&version=5",
            "client": "website",
            "content": "<p>since <code>all isUpper \"\"</code> returns <code>True</code></p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 123992301,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "rc@alicja.dev",
            "sender_full_name": "Alicja Karolina Raszkowska (she/they) (W2'18)",
            "sender_id": 100049,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "exercism",
            "submessages": [],
            "timestamp": 1521601024,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/d2d1f3e361a479849026fe298e091c50e1a4b20a?x=x&version=5",
            "client": "website",
            "content": "<p>oh, no, wait, you're guarding for that :)</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 123992303,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "rc@alicja.dev",
            "sender_full_name": "Alicja Karolina Raszkowska (she/they) (W2'18)",
            "sender_id": 100049,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "exercism",
            "submessages": [],
            "timestamp": 1521601051,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/d2d1f3e361a479849026fe298e091c50e1a4b20a?x=x&version=5",
            "client": "website",
            "content": "<p>I did <code>isYelling x = not (any isLower x) &amp;&amp; (any isAlpha x)</code></p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 123992304,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "rc@alicja.dev",
            "sender_full_name": "Alicja Karolina Raszkowska (she/they) (W2'18)",
            "sender_id": 100049,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "exercism",
            "submessages": [],
            "timestamp": 1521601074,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/d2d1f3e361a479849026fe298e091c50e1a4b20a?x=x&version=5",
            "client": "website",
            "content": "<p>but I think <code>isYelling s = not (null s) &amp;&amp; all isUpper s</code> won't work for <code>\"WHAT THE HELL WERE YOU THINKING?\"</code>, since it should be both <code>isAsking</code> and <code>isYelling</code></p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 123992354,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "rc@alicja.dev",
            "sender_full_name": "Alicja Karolina Raszkowska (she/they) (W2'18)",
            "sender_id": 100049,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "exercism",
            "submessages": [],
            "timestamp": 1521601196,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/d2d1f3e361a479849026fe298e091c50e1a4b20a?x=x&version=5",
            "client": "website",
            "content": "<p>I refactored :) <a href=\"http://exercism.io/submissions/4f15c66700a34becb7bbe89163d4bb07\" target=\"_blank\" title=\"http://exercism.io/submissions/4f15c66700a34becb7bbe89163d4bb07\">http://exercism.io/submissions/4f15c66700a34becb7bbe89163d4bb07</a></p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 123992456,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "rc@alicja.dev",
            "sender_full_name": "Alicja Karolina Raszkowska (she/they) (W2'18)",
            "sender_id": 100049,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "exercism",
            "submessages": [],
            "timestamp": 1521601383,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4d074af6cc341ef51b25bb2f738cdb11?d=identicon&version=1",
            "client": "website",
            "content": "<p>I based my suggestions on the code that was already there, I think your earlier <code>isYelling</code> would have behaved the same way <span class=\"emoji emoji-1f603\" title=\"smiley\">:smiley:</span></p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 123993882,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "vaibhavsagar@gmail.com",
            "sender_full_name": "Vaibhav Sagar (he) (F1'16)",
            "sender_id": 100041,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "exercism",
            "submessages": [],
            "timestamp": 1521604583,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/d2d1f3e361a479849026fe298e091c50e1a4b20a?x=x&version=5",
            "client": "website",
            "content": "<p>obviously you based it on the previous code</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 124018018,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "rc@alicja.dev",
            "sender_full_name": "Alicja Karolina Raszkowska (she/they) (W2'18)",
            "sender_id": 100049,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "exercism",
            "submessages": [],
            "timestamp": 1521647900,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/d2d1f3e361a479849026fe298e091c50e1a4b20a?x=x&version=5",
            "client": "website",
            "content": "<p>my previous code would pass the <code> \"WHAT THE HELL WERE YOU THINKING?\" </code>as <code>isYelling</code>, given the additional removing of all non-alpha characters</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 124018032,
            "is_me_message": false,
            "last_edit_timestamp": 1521647989,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "rc@alicja.dev",
            "sender_full_name": "Alicja Karolina Raszkowska (she/they) (W2'18)",
            "sender_id": 100049,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "exercism",
            "submessages": [],
            "timestamp": 1521647941,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/d2d1f3e361a479849026fe298e091c50e1a4b20a?x=x&version=5",
            "client": "website",
            "content": "<p>but I wouldn't want you to think you didn't help!</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 124018104,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "rc@alicja.dev",
            "sender_full_name": "Alicja Karolina Raszkowska (she/they) (W2'18)",
            "sender_id": 100049,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "exercism",
            "submessages": [],
            "timestamp": 1521648009,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/d2d1f3e361a479849026fe298e091c50e1a4b20a?x=x&version=5",
            "client": "website",
            "content": "<p>thank you <span class=\"emoji emoji-2665\" title=\"hearts\">:hearts:</span></p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 124018108,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "rc@alicja.dev",
            "sender_full_name": "Alicja Karolina Raszkowska (she/they) (W2'18)",
            "sender_id": 100049,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "exercism",
            "submessages": [],
            "timestamp": 1521648013,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4d074af6cc341ef51b25bb2f738cdb11?d=identicon&version=1",
            "client": "website",
            "content": "<p>I wanted my refactoring to be equivalent to</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"nf\">isYelling</span> <span class=\"ow\">::</span> <span class=\"kt\">String</span> <span class=\"ow\">-&gt;</span> <span class=\"kt\">Bool</span>\n<span class=\"nf\">isYelling</span> <span class=\"kt\">[]</span>     <span class=\"ow\">=</span> <span class=\"kt\">False</span>\n<span class=\"nf\">isYelling</span> <span class=\"p\">[</span><span class=\"n\">x</span><span class=\"p\">]</span>\n    <span class=\"o\">|</span> <span class=\"n\">isUpper</span> <span class=\"n\">x</span>  <span class=\"ow\">=</span> <span class=\"kt\">True</span>\n    <span class=\"o\">|</span> <span class=\"n\">otherwise</span>  <span class=\"ow\">=</span> <span class=\"kt\">False</span>\n<span class=\"nf\">isYelling</span> <span class=\"p\">(</span><span class=\"n\">x</span><span class=\"kt\">:</span><span class=\"n\">xs</span><span class=\"p\">)</span> <span class=\"ow\">=</span> <span class=\"n\">isUpper</span> <span class=\"n\">x</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">isYelling</span> <span class=\"n\">xs</span>\n</pre></div>\n\n\n<p>which is what you had earlier. Is it not?</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 124019079,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "vaibhavsagar@gmail.com",
            "sender_full_name": "Vaibhav Sagar (he) (F1'16)",
            "sender_id": 100041,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "exercism",
            "submessages": [],
            "timestamp": 1521649274,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/d2d1f3e361a479849026fe298e091c50e1a4b20a?x=x&version=5",
            "client": "website",
            "content": "<p>it is! when I was responding yesterday I was in the context of 2 refactorings after that and I mixed up the fact that I had the helper function</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 124020717,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "rc@alicja.dev",
            "sender_full_name": "Alicja Karolina Raszkowska (she/they) (W2'18)",
            "sender_id": 100049,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "exercism",
            "submessages": [],
            "timestamp": 1521651858,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4d074af6cc341ef51b25bb2f738cdb11?d=identicon&version=1",
            "client": "ZulipMobile",
            "content": "<p>Ah, I see. I'm glad I didn't accidentally give you bad advice <span class=\"emoji emoji-1f603\" title=\"smiley\">:smiley:</span>.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 124034913,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "vaibhavsagar@gmail.com",
            "sender_full_name": "Vaibhav Sagar (he) (F1'16)",
            "sender_id": 100041,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "exercism",
            "submessages": [],
            "timestamp": 1521673114,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/d2d1f3e361a479849026fe298e091c50e1a4b20a?x=x&version=5",
            "client": "website",
            "content": "<p>you always give great advice <span class=\"user-mention\" data-user-id=\"100041\">@Vaibhav Sagar (F1'16)</span>  :)</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 124037314,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "2764",
                    "emoji_name": "heart",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "vaibhavsagar@gmail.com",
                        "full_name": "Vaibhav Sagar (he) (F1'16)",
                        "id": 100041
                    },
                    "user_id": 100041
                }
            ],
            "recipient_id": 22667,
            "sender_email": "rc@alicja.dev",
            "sender_full_name": "Alicja Karolina Raszkowska (she/they) (W2'18)",
            "sender_id": 100049,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "exercism",
            "submessages": [],
            "timestamp": 1521676688,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4d074af6cc341ef51b25bb2f738cdb11?d=identicon&version=1",
            "client": "website",
            "content": "<p>A cool paper that takes a multidisciplinary approach to the M-word: <a href=\"http://tomasp.net/academic/papers/monads/monads-programming.pdf\" target=\"_blank\" title=\"http://tomasp.net/academic/papers/monads/monads-programming.pdf\">What we talk about when we talk about monads</a></p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 124048841,
            "is_me_message": false,
            "last_edit_timestamp": 1521701884,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "vaibhavsagar@gmail.com",
            "sender_full_name": "Vaibhav Sagar (he) (F1'16)",
            "sender_id": 100041,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "What we talk about when we talk about monads",
            "submessages": [],
            "timestamp": 1521701842,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/40e1eb4186c76edfecca264f74e088ed0e62af25?x=x&version=2",
            "client": "website",
            "content": "<p>This paper is making rounds everyday today! I'll read. Thanks for sharing.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 124076975,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "jaseemabid@gmail.com",
            "sender_full_name": "Jaseem Abid (he) (S1'17)",
            "sender_id": 101128,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "What we talk about when we talk about monads",
            "submessages": [],
            "timestamp": 1521749549,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/40e1eb4186c76edfecca264f74e088ed0e62af25?x=x&version=2",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-id=\"100041\">@Vaibhav Sagar (F1'16)</span> This is so tempting! I wanna go as well!</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 124110664,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "jaseemabid@gmail.com",
            "sender_full_name": "Jaseem Abid (he) (S1'17)",
            "sender_id": 101128,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "monadic.party",
            "submessages": [],
            "timestamp": 1521816501,
            "topic_links": [
                "https://monadic.party"
            ],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/a6a0ff0a4a9a86ae7bc4524453d439bd?d=identicon&version=1",
            "client": "website",
            "content": "<p>I want to create an operator, and I know that in Haskell <a href=\"https://stackoverflow.com/questions/10548170/what-characters-are-permitted-for-haskell-operators\" target=\"_blank\" title=\"https://stackoverflow.com/questions/10548170/what-characters-are-permitted-for-haskell-operators\">various symbol sequences are valid operator names</a>, but what if I want to be difficult and define an operator which is syntactically a new kind of bracket? For instance, if my operator is named <code>&lt;&amp;</code>, I want to write <code>&lt;&amp; input1 input2 &amp;&gt;</code>  instead of <code>&lt;&amp; input1 input2</code>. Is this a thing I can do by mucking around with the AST using TemplateHaskell?</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 124117698,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "annie.cherk@gmail.com",
            "sender_full_name": "Annie Cherkaev (she/they) (m4'18)",
            "sender_id": 9502,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "bracket syntax",
            "submessages": [],
            "timestamp": 1521826292,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/009427e1b56c85d4a70a091905cf7a305c109dc6?x=x&version=5",
            "client": "ZulipElectron",
            "content": "<p>Hi - very junior Haskeller here. The extent of my experience is reading LYAH and HFFP.</p>\n<p>I have an upcoming interview for a junior Haskell position, and I'm at a loss for how I should be prepping. Normally for an OO position I would cram Leetcode, review some system design texts, and refresh on undergrad CS fundementals. I have 3 days, what should I be looking into?</p>\n<p>Memorizing important type signature? Practicing monad/transformer explanations? I haven't looked at many libraries and was thinking that making a simple REST application might be the best use of my time. Any thoughts?</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 124119097,
            "is_me_message": false,
            "last_edit_timestamp": 1521844083,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "heneli@kailahi.com",
            "sender_full_name": "Heneli Ta'angafala Kailahi (SP2'17)",
            "sender_id": 100771,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Junior Haskell Interview",
            "submessages": [],
            "timestamp": 1521828020,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/009427e1b56c85d4a70a091905cf7a305c109dc6?x=x&version=5",
            "client": "ZulipElectron",
            "content": "<p>I found a good list of questions, ranging from easy to difficult, here - <a href=\"https://gist.github.com/pchiusano/bf06bd751395e1a6d09794b38f093787\" target=\"_blank\" title=\"https://gist.github.com/pchiusano/bf06bd751395e1a6d09794b38f093787\">https://gist.github.com/pchiusano/bf06bd751395e1a6d09794b38f093787</a></p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 124123992,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "heneli@kailahi.com",
            "sender_full_name": "Heneli Ta'angafala Kailahi (SP2'17)",
            "sender_id": 100771,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Junior Haskell Interview",
            "submessages": [],
            "timestamp": 1521835510,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/57ad6b289d2b066f6497c2c7a542f246?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-id=\"100771\">@Heneli Ta'angafala Kailahi (SP2'17)</span> What does the company do?  Can you figure out which libraries/tools are most relevant to their work and spend a couple of days poking around with those?</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 124128530,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "lindsey@composition.al",
            "sender_full_name": "Lindsey Kuper (she)",
            "sender_id": 2170,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Junior Haskell Interview",
            "submessages": [],
            "timestamp": 1521842814,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/009427e1b56c85d4a70a091905cf7a305c109dc6?x=x&version=5",
            "client": "ZulipElectron",
            "content": "<p>They are a healthcare tech company. The position I'm applying for would invole working on everything from full-stack dev, iOS, embedded software,  to DevOps.</p>\n<p>As far as libraries, I believe they use Servant and Postgres on the backend, Reflex/GHCJS for the frontend, and some libraries developed in-house. Reflex seems like a bit much for to take on in a weekend, but doing something with Servant looks manageable. Thanks <span class=\"user-mention\" data-user-id=\"2170\">@Lindsey Kuper</span> !</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 124129182,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "heneli@kailahi.com",
            "sender_full_name": "Heneli Ta'angafala Kailahi (SP2'17)",
            "sender_id": 100771,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Junior Haskell Interview",
            "submessages": [],
            "timestamp": 1521844002,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/57ad6b289d2b066f6497c2c7a542f246?d=identicon&version=1",
            "client": "website",
            "content": "<p>Good luck! <span class=\"emoji emoji-1f91e\" title=\"hand with index and middle fingers crossed\">:hand_with_index_and_middle_fingers_crossed:</span></p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 124130189,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f642",
                    "emoji_name": "simple_smile",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "heneli@kailahi.com",
                        "full_name": "Heneli Ta'angafala Kailahi (SP2'17)",
                        "id": 100771
                    },
                    "user_id": 100771
                }
            ],
            "recipient_id": 22667,
            "sender_email": "lindsey@composition.al",
            "sender_full_name": "Lindsey Kuper (she)",
            "sender_id": 2170,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Junior Haskell Interview",
            "submessages": [],
            "timestamp": 1521845886,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4d074af6cc341ef51b25bb2f738cdb11?d=identicon&version=1",
            "client": "website",
            "content": "<p>I suspect you're right about Template Haskell. I think the <a href=\"https://wiki.haskell.org/Quasiquotation\" target=\"_blank\" title=\"https://wiki.haskell.org/Quasiquotation\">quasiquoter</a> would be the first place to look.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 124134804,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "vaibhavsagar@gmail.com",
            "sender_full_name": "Vaibhav Sagar (he) (F1'16)",
            "sender_id": 100041,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "bracket syntax",
            "submessages": [],
            "timestamp": 1521855874,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4d074af6cc341ef51b25bb2f738cdb11?d=identicon&version=1",
            "client": "website",
            "content": "<p>This is so exciting! All the best with your interview <span class=\"emoji emoji-1f604\" title=\"smile\">:smile:</span>. If you're new to Servant I wrote a short blog post on getting something up and running <a href=\"http://vaibhavsagar.com/blog/2017/01/24/simple-kv-store/\" target=\"_blank\" title=\"http://vaibhavsagar.com/blog/2017/01/24/simple-kv-store/\">here</a>. It's a bit old but I would expect it to work with the current version (if not please don't hesitate to let me know).</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 124134872,
            "is_me_message": false,
            "last_edit_timestamp": 1522984757,
            "reactions": [
                {
                    "emoji_code": "1f642",
                    "emoji_name": "simple_smile",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "heneli@kailahi.com",
                        "full_name": "Heneli Ta'angafala Kailahi (SP2'17)",
                        "id": 100771
                    },
                    "user_id": 100771
                }
            ],
            "recipient_id": 22667,
            "sender_email": "vaibhavsagar@gmail.com",
            "sender_full_name": "Vaibhav Sagar (he) (F1'16)",
            "sender_id": 100041,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Junior Haskell Interview",
            "submessages": [],
            "timestamp": 1521856036,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/009427e1b56c85d4a70a091905cf7a305c109dc6?x=x&version=5",
            "client": "ZulipElectron",
            "content": "<p>Wow thanks <span class=\"user-mention\" data-user-id=\"100041\">@Vaibhav Sagar (F1'16)</span> ! That blogpost looks very helpful! <span class=\"emoji emoji-1f6e0\" title=\"hammer and wrench\">:hammer_and_wrench:</span></p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 124148678,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "heneli@kailahi.com",
            "sender_full_name": "Heneli Ta'angafala Kailahi (SP2'17)",
            "sender_id": 100771,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Junior Haskell Interview",
            "submessages": [],
            "timestamp": 1521891074,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/a6a0ff0a4a9a86ae7bc4524453d439bd?d=identicon&version=1",
            "client": "website",
            "content": "<p>ah-ha, thanks <span class=\"user-mention\" data-user-id=\"100041\">@Vaibhav Sagar (F1'16)</span></p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 124163877,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "annie.cherk@gmail.com",
            "sender_full_name": "Annie Cherkaev (she/they) (m4'18)",
            "sender_id": 9502,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "bracket syntax",
            "submessages": [],
            "timestamp": 1521927337,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/d5518741e12b2070f0063a21cd60c939?d=identicon&version=4",
            "client": "website",
            "content": "<p>I saw <a href=\"http://hackerrank.com\" target=\"_blank\" title=\"http://hackerrank.com\">hackerrank.com</a> has some practice problems you can solve in Haskell.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 124261456,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f642",
                    "emoji_name": "simple_smile",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "heneli@kailahi.com",
                        "full_name": "Heneli Ta'angafala Kailahi (SP2'17)",
                        "id": 100771
                    },
                    "user_id": 100771
                }
            ],
            "recipient_id": 22667,
            "sender_email": "carl.douglas@gmail.com",
            "sender_full_name": "Carl Douglas (S1'17)",
            "sender_id": 101092,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Junior Haskell Interview",
            "submessages": [],
            "timestamp": 1522134347,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4d074af6cc341ef51b25bb2f738cdb11?d=identicon&version=1",
            "client": "website",
            "content": "<p>my gripe with the hackerrank problems is that parsing the input in the convoluted format they provide is often harder than solving the actual problem</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 124262092,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f389",
                    "emoji_name": "tada",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "lukeadba@gmail.com",
                        "full_name": "Luke Barone-Adesi (he) (F'13)",
                        "id": 2903
                    },
                    "user_id": 2903
                },
                {
                    "emoji_code": "1f389",
                    "emoji_name": "tada",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "heneli@kailahi.com",
                        "full_name": "Heneli Ta'angafala Kailahi (SP2'17)",
                        "id": 100771
                    },
                    "user_id": 100771
                },
                {
                    "emoji_code": "1f389",
                    "emoji_name": "tada",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "tobinyehle@gmail.com",
                        "full_name": "Tobin Yehle (he) (SP1'20)",
                        "id": 105607
                    },
                    "user_id": 105607
                }
            ],
            "recipient_id": 22667,
            "sender_email": "vaibhavsagar@gmail.com",
            "sender_full_name": "Vaibhav Sagar (he) (F1'16)",
            "sender_id": 100041,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Junior Haskell Interview",
            "submessages": [],
            "timestamp": 1522135815,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/dd016afc5e2d346a0eee00bb0268c2b33da824d5?x=x&version=1",
            "client": "website",
            "content": "<p>The resource I used to get into it was just the QuickStart here: <a href=\"https://www.haskell.org/cabal/users-guide/nix-local-build-overview.html\" target=\"_blank\" title=\"https://www.haskell.org/cabal/users-guide/nix-local-build-overview.html\">https://www.haskell.org/cabal/users-guide/nix-local-build-overview.html</a> . Upgrading to newer versions of dependencies just involves specifying the newer dependency you want, and the solver will re-run. If no dependencies have changed the solver doesn't run at all.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 124346313,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "amindfv@gmail.com",
            "sender_full_name": "Tom Murphy (F2'15)",
            "sender_id": 8693,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "cabal new-build",
            "submessages": [],
            "timestamp": 1522286132,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/dd016afc5e2d346a0eee00bb0268c2b33da824d5?x=x&version=1",
            "client": "website",
            "content": "<p>Unlike \"old-build\", it's free to pick an entirely different solver plan (not pinned to whatever you've already installed), so cabal hell is effectively gone</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 124346364,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "amindfv@gmail.com",
            "sender_full_name": "Tom Murphy (F2'15)",
            "sender_id": 8693,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "cabal new-build",
            "submessages": [],
            "timestamp": 1522286187,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/dd016afc5e2d346a0eee00bb0268c2b33da824d5?x=x&version=1",
            "client": "website",
            "content": "<p>And when I say \"effectively gone\", I mean in my experience 100% gone but maybe in theory there are ways to still get it(?) Someone who knows it better might be able to say for sure</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 124346382,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "amindfv@gmail.com",
            "sender_full_name": "Tom Murphy (F2'15)",
            "sender_id": 8693,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "cabal new-build",
            "submessages": [],
            "timestamp": 1522286255,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4d074af6cc341ef51b25bb2f738cdb11?d=identicon&version=1",
            "client": "website",
            "content": "<p>You can now have your very own IHaskell by following this link: <a href=\"https://mybinder.org/v2/gh/vaibhavsagar/ihaskell-mybinder/master\" target=\"_blank\" title=\"https://mybinder.org/v2/gh/vaibhavsagar/ihaskell-mybinder/master\">https://mybinder.org/v2/gh/vaibhavsagar/ihaskell-mybinder/master</a></p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 124365386,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "vaibhavsagar@gmail.com",
            "sender_full_name": "Vaibhav Sagar (he) (F1'16)",
            "sender_id": 100041,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "IHaskell on mybinder.org",
            "submessages": [],
            "timestamp": 1522327965,
            "topic_links": [
                "https://mybinder.org"
            ],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/b4d94d953db52e1e7cfc3724b95a6dc906fa9d58?x=x&version=2",
            "client": "ZulipMobile",
            "content": "<p>Hooray!</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 124379147,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "2764",
                    "emoji_name": "heart",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "vaibhavsagar@gmail.com",
                        "full_name": "Vaibhav Sagar (he) (F1'16)",
                        "id": 100041
                    },
                    "user_id": 100041
                }
            ],
            "recipient_id": 22667,
            "sender_email": "me@ballingt.com",
            "sender_full_name": "Tom Ballinger (he) (W'12)",
            "sender_id": 807,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "IHaskell on mybinder.org",
            "submessages": [],
            "timestamp": 1522349876,
            "topic_links": [
                "https://mybinder.org"
            ],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/40e1eb4186c76edfecca264f74e088ed0e62af25?x=x&version=2",
            "client": "website",
            "content": "<p>I got tickets for the event and will attend this year. I'm super super excited <span class=\"emoji emoji-1f389\" title=\"tada\">:tada:</span> <span class=\"emoji emoji-1f389\" title=\"tada\">:tada:</span>  </p>\n<p>1. I guess my haskell paper reading days are back. <br>\n2. First Haskell conf<br>\n3. First euro trip! </p>\n<p><a href=\"https://skillsmatter.com/conferences/10237-haskell-exchange-2018\" target=\"_blank\" title=\"https://skillsmatter.com/conferences/10237-haskell-exchange-2018\">https://skillsmatter.com/conferences/10237-haskell-exchange-2018</a></p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 124480544,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f4b6",
                    "emoji_name": "euro",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "vaibhavsagar@gmail.com",
                        "full_name": "Vaibhav Sagar (he) (F1'16)",
                        "id": 100041
                    },
                    "user_id": 100041
                },
                {
                    "emoji_code": "1f389",
                    "emoji_name": "tada",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "vaibhavsagar@gmail.com",
                        "full_name": "Vaibhav Sagar (he) (F1'16)",
                        "id": 100041
                    },
                    "user_id": 100041
                }
            ],
            "recipient_id": 22667,
            "sender_email": "jaseemabid@gmail.com",
            "sender_full_name": "Jaseem Abid (he) (S1'17)",
            "sender_id": 101128,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "HaskellX 2018, 11-12 Oct, London",
            "submessages": [],
            "timestamp": 1522566443,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/40e1eb4186c76edfecca264f74e088ed0e62af25?x=x&version=2",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-id=\"101083\">@Stefan Lesser (S1'17)</span> <span class=\"user-mention\" data-user-id=\"101082\">@James Routley (S1'17)</span> Would love to see you both! :D</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 124480584,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "jaseemabid@gmail.com",
            "sender_full_name": "Jaseem Abid (he) (S1'17)",
            "sender_id": 101128,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "HaskellX 2018, 11-12 Oct, London",
            "submessages": [],
            "timestamp": 1522566488,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/ff7f41de2091a8d3f5ff0a0722bdeda1ab87faa3?x=x&version=2",
            "client": "website",
            "content": "<p>Yep totally!</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 124486271,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "jroutley@gmail.com",
            "sender_full_name": "James Routley (S1'17)",
            "sender_id": 101082,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "HaskellX 2018, 11-12 Oct, London",
            "submessages": [],
            "timestamp": 1522581126,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/a7cfba3d94a1b727e5d91ed13aad1a25ff02ba79?x=x&version=2",
            "client": "website",
            "content": "<p>Yay, looking forward to seeing you! How long will you be in town for?</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 124581731,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "business@stefan-lesser.com",
            "sender_full_name": "Stefan Lesser (S1'17)",
            "sender_id": 101083,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "HaskellX 2018, 11-12 Oct, London",
            "submessages": [],
            "timestamp": 1522772486,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/009427e1b56c85d4a70a091905cf7a305c109dc6?x=x&version=5",
            "client": "ZulipElectron",
            "content": "<p><span class=\"user-mention\" data-user-id=\"2170\">@Lindsey Kuper</span> <span class=\"user-mention\" data-user-id=\"100041\">@Vaibhav Sagar (F1'16)</span> <span class=\"user-mention\" data-user-id=\"101092\">@Carl Douglas (S1'17)</span>  Thank you soooo much for the help!! My take-home project was adding features to a Servant application, and I probably couldn't have done it without having studied the library beforehand.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 124697697,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "heneli@kailahi.com",
            "sender_full_name": "Heneli Ta'angafala Kailahi (SP2'17)",
            "sender_id": 100771,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Junior Haskell Interview",
            "submessages": [],
            "timestamp": 1522975554,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/009427e1b56c85d4a70a091905cf7a305c109dc6?x=x&version=5",
            "client": "ZulipElectron",
            "content": "<p>They gave me an offer today and I am planning to accept it. <span class=\"emoji emoji-1f601\" title=\"grin\">:grin:</span>  I am stoked to be joining the professional Haskell community!</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 124697750,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1104",
                    "emoji_name": "haskell",
                    "reaction_type": "realm_emoji",
                    "user": {
                        "email": "jason.a.owen@gmail.com",
                        "full_name": "Jason Owen (SP2'19)",
                        "id": 100450
                    },
                    "user_id": 100450
                },
                {
                    "emoji_code": "1f389",
                    "emoji_name": "tada",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "jason.a.owen@gmail.com",
                        "full_name": "Jason Owen (SP2'19)",
                        "id": 100450
                    },
                    "user_id": 100450
                },
                {
                    "emoji_code": "1f389",
                    "emoji_name": "tada",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "jaseemabid@gmail.com",
                        "full_name": "Jaseem Abid (he) (S1'17)",
                        "id": 101128
                    },
                    "user_id": 101128
                },
                {
                    "emoji_code": "1104",
                    "emoji_name": "haskell",
                    "reaction_type": "realm_emoji",
                    "user": {
                        "email": "jaseemabid@gmail.com",
                        "full_name": "Jaseem Abid (he) (S1'17)",
                        "id": 101128
                    },
                    "user_id": 101128
                },
                {
                    "emoji_code": "1f389",
                    "emoji_name": "tada",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "lukeadba@gmail.com",
                        "full_name": "Luke Barone-Adesi (he) (F'13)",
                        "id": 2903
                    },
                    "user_id": 2903
                },
                {
                    "emoji_code": "1104",
                    "emoji_name": "haskell",
                    "reaction_type": "realm_emoji",
                    "user": {
                        "email": "lukeadba@gmail.com",
                        "full_name": "Luke Barone-Adesi (he) (F'13)",
                        "id": 2903
                    },
                    "user_id": 2903
                },
                {
                    "emoji_code": "1104",
                    "emoji_name": "haskell",
                    "reaction_type": "realm_emoji",
                    "user": {
                        "email": "danweasel@gmail.com",
                        "full_name": "Andrew Nichols (he) (F2'17)",
                        "id": 101997
                    },
                    "user_id": 101997
                },
                {
                    "emoji_code": "1f389",
                    "emoji_name": "tada",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "danweasel@gmail.com",
                        "full_name": "Andrew Nichols (he) (F2'17)",
                        "id": 101997
                    },
                    "user_id": 101997
                },
                {
                    "emoji_code": "1104",
                    "emoji_name": "haskell",
                    "reaction_type": "realm_emoji",
                    "user": {
                        "email": "nick@recurse.com",
                        "full_name": "Nick Bergson-Shilcock (he)",
                        "id": 811
                    },
                    "user_id": 811
                },
                {
                    "emoji_code": "1f389",
                    "emoji_name": "tada",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "libby@daydrea.me",
                        "full_name": "Libby Horacek (she) (SP1'15)",
                        "id": 7081
                    },
                    "user_id": 7081
                },
                {
                    "emoji_code": "1f389",
                    "emoji_name": "tada",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "tobinyehle@gmail.com",
                        "full_name": "Tobin Yehle (he) (SP1'20)",
                        "id": 105607
                    },
                    "user_id": 105607
                },
                {
                    "emoji_code": "1104",
                    "emoji_name": "haskell",
                    "reaction_type": "realm_emoji",
                    "user": {
                        "email": "tobinyehle@gmail.com",
                        "full_name": "Tobin Yehle (he) (SP1'20)",
                        "id": 105607
                    },
                    "user_id": 105607
                },
                {
                    "emoji_code": "1f389",
                    "emoji_name": "tada",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "ark.email@gmail.com",
                        "full_name": "Adam Bratschi-Kaye (he) (SP1'17)",
                        "id": 100532
                    },
                    "user_id": 100532
                },
                {
                    "emoji_code": "1104",
                    "emoji_name": "haskell",
                    "reaction_type": "realm_emoji",
                    "user": {
                        "email": "ark.email@gmail.com",
                        "full_name": "Adam Bratschi-Kaye (he) (SP1'17)",
                        "id": 100532
                    },
                    "user_id": 100532
                },
                {
                    "emoji_code": "1104",
                    "emoji_name": "haskell",
                    "reaction_type": "realm_emoji",
                    "user": {
                        "email": "katherine.ye@gmail.com",
                        "full_name": "Katherine Ye (S'13)",
                        "id": 2117
                    },
                    "user_id": 2117
                },
                {
                    "emoji_code": "1f389",
                    "emoji_name": "tada",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "katherine.ye@gmail.com",
                        "full_name": "Katherine Ye (S'13)",
                        "id": 2117
                    },
                    "user_id": 2117
                },
                {
                    "emoji_code": "1f389",
                    "emoji_name": "tada",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "annie.cherk@gmail.com",
                        "full_name": "Annie Cherkaev (she/they) (m4'18)",
                        "id": 9502
                    },
                    "user_id": 9502
                },
                {
                    "emoji_code": "1104",
                    "emoji_name": "haskell",
                    "reaction_type": "realm_emoji",
                    "user": {
                        "email": "annie.cherk@gmail.com",
                        "full_name": "Annie Cherkaev (she/they) (m4'18)",
                        "id": 9502
                    },
                    "user_id": 9502
                },
                {
                    "emoji_code": "1104",
                    "emoji_name": "haskell",
                    "reaction_type": "realm_emoji",
                    "user": {
                        "email": "vaibhavsagar@gmail.com",
                        "full_name": "Vaibhav Sagar (he) (F1'16)",
                        "id": 100041
                    },
                    "user_id": 100041
                },
                {
                    "emoji_code": "1f389",
                    "emoji_name": "tada",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "vaibhavsagar@gmail.com",
                        "full_name": "Vaibhav Sagar (he) (F1'16)",
                        "id": 100041
                    },
                    "user_id": 100041
                }
            ],
            "recipient_id": 22667,
            "sender_email": "heneli@kailahi.com",
            "sender_full_name": "Heneli Ta'angafala Kailahi (SP2'17)",
            "sender_id": 100771,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Junior Haskell Interview",
            "submessages": [],
            "timestamp": 1522975618,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4d074af6cc341ef51b25bb2f738cdb11?d=identicon&version=1",
            "client": "website",
            "content": "<p>Fantastic! Glad to help <span class=\"emoji emoji-1f604\" title=\"smile\">:smile:</span></p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 124698231,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f642",
                    "emoji_name": "simple_smile",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "heneli@kailahi.com",
                        "full_name": "Heneli Ta'angafala Kailahi (SP2'17)",
                        "id": 100771
                    },
                    "user_id": 100771
                }
            ],
            "recipient_id": 22667,
            "sender_email": "vaibhavsagar@gmail.com",
            "sender_full_name": "Vaibhav Sagar (he) (F1'16)",
            "sender_id": 100041,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Junior Haskell Interview",
            "submessages": [],
            "timestamp": 1522976616,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/7f89b22589ca6f3490f8a75591a699adc0e02fcc?x=x&version=1",
            "client": "website",
            "content": "<p>Awesome <span class=\"user-mention\" data-user-id=\"100771\">@Heneli Ta'angafala Kailahi (SP2'17)</span> !!!!!</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 124701831,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "263a",
                    "emoji_name": "relaxed",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "heneli@kailahi.com",
                        "full_name": "Heneli Ta'angafala Kailahi (SP2'17)",
                        "id": 100771
                    },
                    "user_id": 100771
                }
            ],
            "recipient_id": 22667,
            "sender_email": "ark.email@gmail.com",
            "sender_full_name": "Adam Bratschi-Kaye (he) (SP1'17)",
            "sender_id": 100532,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Junior Haskell Interview",
            "submessages": [],
            "timestamp": 1522984687,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/d2d1f3e361a479849026fe298e091c50e1a4b20a?x=x&version=5",
            "client": "website",
            "content": "<p>congrats! yay!\\</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 124706651,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "263a",
                    "emoji_name": "relaxed",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "heneli@kailahi.com",
                        "full_name": "Heneli Ta'angafala Kailahi (SP2'17)",
                        "id": 100771
                    },
                    "user_id": 100771
                }
            ],
            "recipient_id": 22667,
            "sender_email": "rc@alicja.dev",
            "sender_full_name": "Alicja Karolina Raszkowska (she/they) (W2'18)",
            "sender_id": 100049,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Junior Haskell Interview",
            "submessages": [],
            "timestamp": 1522995620,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/57ad6b289d2b066f6497c2c7a542f246?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-id=\"100771\">@Heneli Ta'angafala Kailahi (SP2'17)</span> That's so great to hear!  Congrats!</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 124729199,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f642",
                    "emoji_name": "simple_smile",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "heneli@kailahi.com",
                        "full_name": "Heneli Ta'angafala Kailahi (SP2'17)",
                        "id": 100771
                    },
                    "user_id": 100771
                }
            ],
            "recipient_id": 22667,
            "sender_email": "lindsey@composition.al",
            "sender_full_name": "Lindsey Kuper (she)",
            "sender_id": 2170,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Junior Haskell Interview",
            "submessages": [],
            "timestamp": 1523036296,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/612c7c2a108d7850c62d1d2293a481aa42855408?x=x&version=2",
            "client": "website",
            "content": "<p>i have an interview on very short notice with a haskell company</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 124910329,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "PLRedmond@gmail.com",
            "sender_full_name": "Patrick Redmond (W'14)",
            "sender_id": 5014,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "haskell interview",
            "submessages": [],
            "timestamp": 1523406262,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/612c7c2a108d7850c62d1d2293a481aa42855408?x=x&version=2",
            "client": "website",
            "content": "<p>it's tomorrow morning... i've spent the evening reading their recent engineering blog posts</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 124910333,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "PLRedmond@gmail.com",
            "sender_full_name": "Patrick Redmond (W'14)",
            "sender_id": 5014,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "haskell interview",
            "submessages": [],
            "timestamp": 1523406286,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/612c7c2a108d7850c62d1d2293a481aa42855408?x=x&version=2",
            "client": "website",
            "content": "<p>after that i've started digging into (the one) library which my interviewer has commits in on github</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 124910342,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "PLRedmond@gmail.com",
            "sender_full_name": "Patrick Redmond (W'14)",
            "sender_id": 5014,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "haskell interview",
            "submessages": [],
            "timestamp": 1523406307,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/612c7c2a108d7850c62d1d2293a481aa42855408?x=x&version=2",
            "client": "website",
            "content": "<p>i'm trying to understand the basics of the implementation .. it uses arrows, which i'm not experienced with, but i understand they reify the concept of a computation from-and-to types</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 124910390,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "PLRedmond@gmail.com",
            "sender_full_name": "Patrick Redmond (W'14)",
            "sender_id": 5014,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "haskell interview",
            "submessages": [],
            "timestamp": 1523406371,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/612c7c2a108d7850c62d1d2293a481aa42855408?x=x&version=2",
            "client": "website",
            "content": "<p>i'm also not really in-practice..<br>\ni guess i should solve some interview problems..</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 124910405,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "PLRedmond@gmail.com",
            "sender_full_name": "Patrick Redmond (W'14)",
            "sender_id": 5014,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "haskell interview",
            "submessages": [],
            "timestamp": 1523406446,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/612c7c2a108d7850c62d1d2293a481aa42855408?x=x&version=2",
            "client": "website",
            "content": "<blockquote>\n<p>I found a good list of questions, ranging from easy to difficult, here - <a href=\"https://gist.github.com/pchiusano/bf06bd751395e1a6d09794b38f093787\" target=\"_blank\" title=\"https://gist.github.com/pchiusano/bf06bd751395e1a6d09794b38f093787\">https://gist.github.com/pchiusano/bf06bd751395e1a6d09794b38f093787</a></p>\n</blockquote>\n<p>from <a href=\"#narrow/stream/20298-haskell/topic/Junior.20Haskell.20Interview\" title=\"#narrow/stream/20298-haskell/topic/Junior.20Haskell.20Interview\">this topic</a></p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 124910464,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "PLRedmond@gmail.com",
            "sender_full_name": "Patrick Redmond (W'14)",
            "sender_id": 5014,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "haskell interview",
            "submessages": [],
            "timestamp": 1523406569,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/612c7c2a108d7850c62d1d2293a481aa42855408?x=x&version=2",
            "client": "website",
            "content": "<blockquote>\n<p>'hard': need more than five minutes of thinking for each part of your answer you actually write down, and possibly lots of time iterating, revising, and restarting. Possibly need to go off and learn about a whole new area of FP you've had little exposure to previously.</p>\n</blockquote>\n<p>i don't really solve anything within five minutes these days.. <br>\ntime to practice</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 124910513,
            "is_me_message": false,
            "last_edit_timestamp": 1523406624,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "PLRedmond@gmail.com",
            "sender_full_name": "Patrick Redmond (W'14)",
            "sender_id": 5014,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "haskell interview",
            "submessages": [],
            "timestamp": 1523406619,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4d074af6cc341ef51b25bb2f738cdb11?d=identicon&version=1",
            "client": "website",
            "content": "<p>do you use typed holes much?</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 124910679,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "vaibhavsagar@gmail.com",
            "sender_full_name": "Vaibhav Sagar (he) (F1'16)",
            "sender_id": 100041,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "haskell interview",
            "submessages": [],
            "timestamp": 1523406947,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/612c7c2a108d7850c62d1d2293a481aa42855408?x=x&version=2",
            "client": "website",
            "content": "<p>ah, yeah.. kinda<br>\ni use <code>()</code> way more than <code>_</code> though</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 124910746,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "PLRedmond@gmail.com",
            "sender_full_name": "Patrick Redmond (W'14)",
            "sender_id": 5014,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "haskell interview",
            "submessages": [],
            "timestamp": 1523407018,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/612c7c2a108d7850c62d1d2293a481aa42855408?x=x&version=2",
            "client": "website",
            "content": "<p><code>_</code> seems to output less information in situations where the inferencer wants to keep things more general than i do..<br>\nputting in <code>()</code> usually makes the typechecker say \"but <code>()</code> isn't shaped like <code>foo -&gt; Set bar -&gt; ExceptT err m blah</code>\" which tells me exactly what i need to put there</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 124910880,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "PLRedmond@gmail.com",
            "sender_full_name": "Patrick Redmond (W'14)",
            "sender_id": 5014,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "haskell interview",
            "submessages": [],
            "timestamp": 1523407213,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/612c7c2a108d7850c62d1d2293a481aa42855408?x=x&version=2",
            "client": "website",
            "content": "<p>arrows mixed with free ...</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 124911407,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "PLRedmond@gmail.com",
            "sender_full_name": "Patrick Redmond (W'14)",
            "sender_id": 5014,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "haskell interview",
            "submessages": [],
            "timestamp": 1523408302,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/612c7c2a108d7850c62d1d2293a481aa42855408?x=x&version=2",
            "client": "website",
            "content": "<p>and i can't seem to locate the Arrow instance for the main GADT.. i took out the <code>Free</code> but i think that's where the arrow instance was coming from<br>\n[i was trying to extract the core concept of the library into a small package; i'll pick this up again later and just try to compile/dissect the library instead of reifying it]</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 124911416,
            "is_me_message": false,
            "last_edit_timestamp": 1523409102,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "PLRedmond@gmail.com",
            "sender_full_name": "Patrick Redmond (W'14)",
            "sender_id": 5014,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "haskell interview",
            "submessages": [],
            "timestamp": 1523408344,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/612c7c2a108d7850c62d1d2293a481aa42855408?x=x&version=2",
            "client": "website",
            "content": "<p>ok, putting that down and focusing on solving interview problems..</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 124911790,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "PLRedmond@gmail.com",
            "sender_full_name": "Patrick Redmond (W'14)",
            "sender_id": 5014,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "haskell interview",
            "submessages": [],
            "timestamp": 1523409023,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/612c7c2a108d7850c62d1d2293a481aa42855408?x=x&version=2",
            "client": "website",
            "content": "<p>oh, fun, .. <code>doctest, doctest-discover, QuickCheck</code> make testing small bits of code much less of a hassle</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 124912186,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "PLRedmond@gmail.com",
            "sender_full_name": "Patrick Redmond (W'14)",
            "sender_id": 5014,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "haskell interview",
            "submessages": [],
            "timestamp": 1523409876,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/612c7c2a108d7850c62d1d2293a481aa42855408?x=x&version=2",
            "client": "website",
            "content": "<p><a href=\"https://github.com/sol/doctest\" target=\"_blank\" title=\"https://github.com/sol/doctest\">https://github.com/sol/doctest</a></p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 124912485,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "thumbs_up",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "vaibhavsagar@gmail.com",
                        "full_name": "Vaibhav Sagar (he) (F1'16)",
                        "id": 100041
                    },
                    "user_id": 100041
                }
            ],
            "recipient_id": 22667,
            "sender_email": "PLRedmond@gmail.com",
            "sender_full_name": "Patrick Redmond (W'14)",
            "sender_id": 5014,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "haskell interview",
            "submessages": [],
            "timestamp": 1523410453,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/b4d94d953db52e1e7cfc3724b95a6dc906fa9d58?x=x&version=2",
            "client": "website",
            "content": "<p><span class=\"emoji emoji-1f44d\" title=\"+1\">:+1:</span>  The Python version of doctest was my faithful programming interview companion.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 124921496,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f419",
                    "emoji_name": "octopus",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "PLRedmond@gmail.com",
                        "full_name": "Patrick Redmond (W'14)",
                        "id": 5014
                    },
                    "user_id": 5014
                }
            ],
            "recipient_id": 22667,
            "sender_email": "me@ballingt.com",
            "sender_full_name": "Tom Ballinger (he) (W'12)",
            "sender_id": 807,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "haskell interview",
            "submessages": [],
            "timestamp": 1523431082,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/612c7c2a108d7850c62d1d2293a481aa42855408?x=x&version=2",
            "client": "ZulipMobile",
            "content": "<p>Well, i froze up during the technical question and didn't work through the problem in any meaningful way</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 124983181,
            "is_me_message": false,
            "last_edit_timestamp": 1523536707,
            "reactions": [
                {
                    "emoji_code": "58",
                    "emoji_name": "hug",
                    "reaction_type": "realm_emoji",
                    "user": {
                        "email": "vaibhavsagar@gmail.com",
                        "full_name": "Vaibhav Sagar (he) (F1'16)",
                        "id": 100041
                    },
                    "user_id": 100041
                },
                {
                    "emoji_code": "58",
                    "emoji_name": "hug",
                    "reaction_type": "realm_emoji",
                    "user": {
                        "email": "rc@alicja.dev",
                        "full_name": "Alicja Karolina Raszkowska (she/they) (W2'18)",
                        "id": 100049
                    },
                    "user_id": 100049
                },
                {
                    "emoji_code": "58",
                    "emoji_name": "hug",
                    "reaction_type": "realm_emoji",
                    "user": {
                        "email": "danweasel@gmail.com",
                        "full_name": "Andrew Nichols (he) (F2'17)",
                        "id": 101997
                    },
                    "user_id": 101997
                }
            ],
            "recipient_id": 22667,
            "sender_email": "PLRedmond@gmail.com",
            "sender_full_name": "Patrick Redmond (W'14)",
            "sender_id": 5014,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "haskell interview",
            "submessages": [],
            "timestamp": 1523536697,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/612c7c2a108d7850c62d1d2293a481aa42855408?x=x&version=2",
            "client": "ZulipMobile",
            "content": "<p>Oh well</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 124983190,
            "is_me_message": false,
            "last_edit_timestamp": 1523536738,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "PLRedmond@gmail.com",
            "sender_full_name": "Patrick Redmond (W'14)",
            "sender_id": 5014,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "haskell interview",
            "submessages": [],
            "timestamp": 1523536724,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4d074af6cc341ef51b25bb2f738cdb11?d=identicon&version=1",
            "client": "website",
            "content": "<p>Someone started a <a href=\"https://github.com/Wizek/haskell-pair-programming\" target=\"_blank\" title=\"https://github.com/Wizek/haskell-pair-programming\">GitHub repo</a> and <a href=\"https://gitter.im/haskell-pair-programming/Lobby\" target=\"_blank\" title=\"https://gitter.im/haskell-pair-programming/Lobby\">Gitter channel</a> for ad-hoc pair-programming sessions! Edward Kmett joined and I just had a very enjoyable couple of hours watching the master at work.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 125613029,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "2764",
                    "emoji_name": "heart",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "annie.cherk@gmail.com",
                        "full_name": "Annie Cherkaev (she/they) (m4'18)",
                        "id": 9502
                    },
                    "user_id": 9502
                },
                {
                    "emoji_code": "2764",
                    "emoji_name": "heart",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "rc@alicja.dev",
                        "full_name": "Alicja Karolina Raszkowska (she/they) (W2'18)",
                        "id": 100049
                    },
                    "user_id": 100049
                }
            ],
            "recipient_id": 22667,
            "sender_email": "vaibhavsagar@gmail.com",
            "sender_full_name": "Vaibhav Sagar (he) (F1'16)",
            "sender_id": 100041,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "haskell pair programming",
            "submessages": [],
            "timestamp": 1524563109,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/8ede63f05c0a949ad0dce6b1e120fa5f2a1cc72a?x=x&version=2",
            "client": "website",
            "content": "<p>Very nice. I'll keep an eye out for opportunities to pair there.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 125625206,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "danweasel@gmail.com",
            "sender_full_name": "Andrew Nichols (he) (F2'17)",
            "sender_id": 101997,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "haskell pair programming",
            "submessages": [],
            "timestamp": 1524583678,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/7f89b22589ca6f3490f8a75591a699adc0e02fcc?x=x&version=1",
            "client": "ZulipMobile",
            "content": "<p><span class=\"user-mention\" data-user-id=\"100041\">@Vaibhav Sagar (F1'16)</span>  sweet! What did you work on?</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 125643146,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "ark.email@gmail.com",
            "sender_full_name": "Adam Bratschi-Kaye (he) (SP1'17)",
            "sender_id": 100532,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "haskell pair programming",
            "submessages": [],
            "timestamp": 1524607722,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4d074af6cc341ef51b25bb2f738cdb11?d=identicon&version=1",
            "client": "website",
            "content": "<p>He started the <a href=\"http://hackage.haskell.org/package/perhaps-0\" target=\"_blank\" title=\"http://hackage.haskell.org/package/perhaps-0\">perhaps</a> package, which is somewhere between Maybe and Either in that it provides the ability for failure but not a failure value. Writing the actual code took less than two hours but then he spent the next 5 getting backwards compatibility all the way back to 7.2 and making CI pass <span class=\"emoji emoji-1f604\" title=\"smile\">:smile:</span></p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 125647818,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f6e0",
                    "emoji_name": "hammer_and_wrench",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "annie.cherk@gmail.com",
                        "full_name": "Annie Cherkaev (she/they) (m4'18)",
                        "id": 9502
                    },
                    "user_id": 9502
                }
            ],
            "recipient_id": 22667,
            "sender_email": "vaibhavsagar@gmail.com",
            "sender_full_name": "Vaibhav Sagar (he) (F1'16)",
            "sender_id": 100041,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "haskell pair programming",
            "submessages": [],
            "timestamp": 1524615312,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/612c7c2a108d7850c62d1d2293a481aa42855408?x=x&version=2",
            "client": "ZulipMobile",
            "content": "<p>Huh, they asked me back for a second interview. What luck!</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 125676888,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f603",
                    "emoji_name": "smiley",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "lindsey@composition.al",
                        "full_name": "Lindsey Kuper (she)",
                        "id": 2170
                    },
                    "user_id": 2170
                },
                {
                    "emoji_code": "1f419",
                    "emoji_name": "octopus",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "libby@daydrea.me",
                        "full_name": "Libby Horacek (she) (SP1'15)",
                        "id": 7081
                    },
                    "user_id": 7081
                },
                {
                    "emoji_code": "1f389",
                    "emoji_name": "tada",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "libby@daydrea.me",
                        "full_name": "Libby Horacek (she) (SP1'15)",
                        "id": 7081
                    },
                    "user_id": 7081
                },
                {
                    "emoji_code": "1f419",
                    "emoji_name": "octopus",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "annie.cherk@gmail.com",
                        "full_name": "Annie Cherkaev (she/they) (m4'18)",
                        "id": 9502
                    },
                    "user_id": 9502
                },
                {
                    "emoji_code": "1f389",
                    "emoji_name": "tada",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "annie.cherk@gmail.com",
                        "full_name": "Annie Cherkaev (she/they) (m4'18)",
                        "id": 9502
                    },
                    "user_id": 9502
                },
                {
                    "emoji_code": "1f389",
                    "emoji_name": "tada",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "rc@alicja.dev",
                        "full_name": "Alicja Karolina Raszkowska (she/they) (W2'18)",
                        "id": 100049
                    },
                    "user_id": 100049
                },
                {
                    "emoji_code": "1f389",
                    "emoji_name": "tada",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "heneli@kailahi.com",
                        "full_name": "Heneli Ta'angafala Kailahi (SP2'17)",
                        "id": 100771
                    },
                    "user_id": 100771
                },
                {
                    "emoji_code": "1f419",
                    "emoji_name": "octopus",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "levimroth@gmail.com",
                        "full_name": "Levi Roth (he) (W2'18)",
                        "id": 105051
                    },
                    "user_id": 105051
                },
                {
                    "emoji_code": "1f603",
                    "emoji_name": "smiley",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "phoebe@slub.co",
                        "full_name": "phoebe beatrice jenkins (she) (m4'18)",
                        "id": 101991
                    },
                    "user_id": 101991
                },
                {
                    "emoji_code": "1f389",
                    "emoji_name": "tada",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "tobinyehle@gmail.com",
                        "full_name": "Tobin Yehle (he) (SP1'20)",
                        "id": 105607
                    },
                    "user_id": 105607
                },
                {
                    "emoji_code": "1f603",
                    "emoji_name": "smiley",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "vaibhavsagar@gmail.com",
                        "full_name": "Vaibhav Sagar (he) (F1'16)",
                        "id": 100041
                    },
                    "user_id": 100041
                },
                {
                    "emoji_code": "1f389",
                    "emoji_name": "tada",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "vaibhavsagar@gmail.com",
                        "full_name": "Vaibhav Sagar (he) (F1'16)",
                        "id": 100041
                    },
                    "user_id": 100041
                },
                {
                    "emoji_code": "1f419",
                    "emoji_name": "octopus",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "vaibhavsagar@gmail.com",
                        "full_name": "Vaibhav Sagar (he) (F1'16)",
                        "id": 100041
                    },
                    "user_id": 100041
                }
            ],
            "recipient_id": 22667,
            "sender_email": "PLRedmond@gmail.com",
            "sender_full_name": "Patrick Redmond (W'14)",
            "sender_id": 5014,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "haskell interview",
            "submessages": [],
            "timestamp": 1524670669,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/a6a0ff0a4a9a86ae7bc4524453d439bd?d=identicon&version=1",
            "client": "website",
            "content": "<p>This sounds awesome, I just joined. Thanks for posting a link <span class=\"user-mention\" data-user-id=\"100041\">@Vaibhav Sagar (F1'16)</span> !</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 125690221,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "annie.cherk@gmail.com",
            "sender_full_name": "Annie Cherkaev (she/they) (m4'18)",
            "sender_id": 9502,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "haskell pair programming",
            "submessages": [],
            "timestamp": 1524687852,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/a6a0ff0a4a9a86ae7bc4524453d439bd?d=identicon&version=1",
            "client": "website",
            "content": "<p>Also the perhaps package is <span class=\"emoji emoji-1f44c\" title=\"ok hand\">:ok_hand:</span></p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 125690228,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "annie.cherk@gmail.com",
            "sender_full_name": "Annie Cherkaev (she/they) (m4'18)",
            "sender_id": 9502,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "haskell pair programming",
            "submessages": [],
            "timestamp": 1524687870,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4d074af6cc341ef51b25bb2f738cdb11?d=identicon&version=1",
            "client": "website",
            "content": "<p><a href=\"https://www.twitch.tv/ekmett\" target=\"_blank\" title=\"https://www.twitch.tv/ekmett\">https://www.twitch.tv/ekmett</a></p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 125762251,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "vaibhavsagar@gmail.com",
            "sender_full_name": "Vaibhav Sagar (he) (F1'16)",
            "sender_id": 100041,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Ed Kmett on Twitch!",
            "submessages": [],
            "timestamp": 1524813534,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/612c7c2a108d7850c62d1d2293a481aa42855408?x=x&version=2",
            "client": "website",
            "content": "<p>I just received an offer to work for <a href=\"http://tweag.io\" target=\"_blank\" title=\"http://tweag.io\">tweag.io</a> and also an offer for a research position at AMNH</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 125956913,
            "is_me_message": false,
            "last_edit_timestamp": 1525200667,
            "reactions": [
                {
                    "emoji_code": "1f389",
                    "emoji_name": "tada",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "katherine.ye@gmail.com",
                        "full_name": "Katherine Ye (S'13)",
                        "id": 2117
                    },
                    "user_id": 2117
                },
                {
                    "emoji_code": "1f389",
                    "emoji_name": "tada",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "libby@daydrea.me",
                        "full_name": "Libby Horacek (she) (SP1'15)",
                        "id": 7081
                    },
                    "user_id": 7081
                },
                {
                    "emoji_code": "1f389",
                    "emoji_name": "tada",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "annie.cherk@gmail.com",
                        "full_name": "Annie Cherkaev (she/they) (m4'18)",
                        "id": 9502
                    },
                    "user_id": 9502
                }
            ],
            "recipient_id": 22667,
            "sender_email": "PLRedmond@gmail.com",
            "sender_full_name": "Patrick Redmond (W'14)",
            "sender_id": 5014,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "victory/dilemma",
            "submessages": [],
            "timestamp": 1525200318,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/612c7c2a108d7850c62d1d2293a481aa42855408?x=x&version=2",
            "client": "website",
            "content": "<p><strong>tweag</strong><br>\n- works with <a href=\"https://www.microsoft.com/en-us/research/wp-content/uploads/2017/03/haskell-linear-submitted.pdf\" target=\"_blank\" title=\"https://www.microsoft.com/en-us/research/wp-content/uploads/2017/03/haskell-linear-submitted.pdf\">SPJ on adding linear types to GHC-haskell</a><br>\n- it sounds like they're hiring Eelco Dolstra creator of nixos?<br>\n- exploding offer<br>\n<strong>AMNH</strong><br>\n- one of 10-15 active \"research museums\" in the world<br>\n- position is working on a phylogenetic tree generation sysetm <a href=\"https://github.com/amnh/PCG\" target=\"_blank\" title=\"https://github.com/amnh/PCG\">https://github.com/amnh/PCG</a></p>\n<p><span class=\"emoji emoji-1f914\" title=\"thinking face\">:thinking_face:</span>  I have no idea what to do<br>\nI feel like a dog with a car bumper in my mouth.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 125957251,
            "is_me_message": false,
            "last_edit_timestamp": 1525201316,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "PLRedmond@gmail.com",
            "sender_full_name": "Patrick Redmond (W'14)",
            "sender_id": 5014,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "victory/dilemma",
            "submessages": [],
            "timestamp": 1525200782,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p>Nice! Tweag always seemed like an impressive place to me.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 125957261,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "victory/dilemma",
            "submessages": [],
            "timestamp": 1525200796,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p>They're based in Paris, right?</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 125957263,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "victory/dilemma",
            "submessages": [],
            "timestamp": 1525200803,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/612c7c2a108d7850c62d1d2293a481aa42855408?x=x&version=2",
            "client": "website",
            "content": "<p>yes, paris is where tweag's founder lives.. the other main locations are zurich and london.. there are a variety of remote people places like australia, siberia, massachusetts</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 125957320,
            "is_me_message": false,
            "last_edit_timestamp": 1525200963,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "PLRedmond@gmail.com",
            "sender_full_name": "Patrick Redmond (W'14)",
            "sender_id": 5014,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "victory/dilemma",
            "submessages": [],
            "timestamp": 1525200858,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4d074af6cc341ef51b25bb2f738cdb11?d=identicon&version=1",
            "client": "website",
            "content": "<p>Awesome! When you mentioned \"research group in Europe\" I suspected Tweag. I applied to their Nix team a few months ago but I'm severely underqualified so that didn't go very far. It sucks that they have an exploding offer though.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 125968207,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "vaibhavsagar@gmail.com",
            "sender_full_name": "Vaibhav Sagar (he) (F1'16)",
            "sender_id": 100041,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "victory/dilemma",
            "submessages": [],
            "timestamp": 1525218005,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/612c7c2a108d7850c62d1d2293a481aa42855408?x=x&version=2",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-id=\"100041\">@Vaibhav Sagar (F1'16)</span> I applied to the general opening <a href=\"https://www.tweag.io/posts/2018-03-29-we-are-hiring-swe.html\" target=\"_blank\" title=\"https://www.tweag.io/posts/2018-03-29-we-are-hiring-swe.html\">on their blog</a>. You might try that! I don't know how many seats they're trying to fill (I'm asking in an email I'll send out tonight).</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 125969021,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "PLRedmond@gmail.com",
            "sender_full_name": "Patrick Redmond (W'14)",
            "sender_id": 5014,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "victory/dilemma",
            "submessages": [],
            "timestamp": 1525219496,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/612c7c2a108d7850c62d1d2293a481aa42855408?x=x&version=2",
            "client": "website",
            "content": "<p>Hmm... To be honest, there have been many red flags about <a href=\"http://tweag.io\" target=\"_blank\" title=\"http://tweag.io\">tweag.io</a>, or maybe I'm just being overly cautious.</p>\n<ul>\n<li>It's an exploding offer.</li>\n<li>I'll be a contractor, not an employee.</li>\n<li>It's unclear who at Tweag I'll work with.</li>\n<li>It's unclear exactly what open source Rust/WebAssembly project I'll be working on.</li>\n<li>The project I'll be working on is a blockchain \"network appliance\".</li>\n<li>My performance will be evaluated via \"informal surveys\" conducted with the client.</li>\n<li>They said the contract won't include mention of the coverage for health-insurance premiums or vacation days (though, the offer letter does mention these things).</li>\n<li>Tweag has an office in cyprus which was designated a tax haven until 2015.</li>\n</ul>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 126056434,
            "is_me_message": false,
            "last_edit_timestamp": 1525370999,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "PLRedmond@gmail.com",
            "sender_full_name": "Patrick Redmond (W'14)",
            "sender_id": 5014,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "victory/dilemma",
            "submessages": [],
            "timestamp": 1525369671,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/612c7c2a108d7850c62d1d2293a481aa42855408?x=x&version=2",
            "client": "website",
            "content": "<p>I wonder if I'm being overly risk averse in the face of what other people see as a good opportunity.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 126056530,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "PLRedmond@gmail.com",
            "sender_full_name": "Patrick Redmond (W'14)",
            "sender_id": 5014,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "victory/dilemma",
            "submessages": [],
            "timestamp": 1525369764,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/187931dc9ca73b56a4e014e6009c00a1?d=identicon&version=1",
            "client": "website",
            "content": "<p>Gut instincts can be important sometimes. Your laundry list of red flags doesn't sound like risk aversion at all. (I've never heard of Tweag, but I've suffered from not listening to my gut in the past.)</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 126057170,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "me@joeym.org",
            "sender_full_name": "Joey Marianer (he) (m1'18)",
            "sender_id": 105228,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "victory/dilemma",
            "submessages": [],
            "timestamp": 1525370610,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/8b685fc189f3b87e207614dbbed889148f6eda41?x=x&version=21",
            "client": "website",
            "content": "<p>i've only got an exploding offer from one company and i'm very glad i didn't take it. that whole hiring process was really psychologically manipulative</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 126057697,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "phoebe@slub.co",
            "sender_full_name": "phoebe beatrice jenkins (she) (m4'18)",
            "sender_id": 101991,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "victory/dilemma",
            "submessages": [],
            "timestamp": 1525371358,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/612c7c2a108d7850c62d1d2293a481aa42855408?x=x&version=2",
            "client": "website",
            "content": "<p>The flip side is that they work with some of the biggest names in FP.. Simon Peyton Jones, Phillip Wadler, Eelco Dolstra</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 126058209,
            "is_me_message": false,
            "last_edit_timestamp": 1525372055,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "PLRedmond@gmail.com",
            "sender_full_name": "Patrick Redmond (W'14)",
            "sender_id": 5014,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "victory/dilemma",
            "submessages": [],
            "timestamp": 1525372030,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/612c7c2a108d7850c62d1d2293a481aa42855408?x=x&version=2",
            "client": "website",
            "content": "<p>This makes me think I'm just barking at shadows</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 126058216,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "PLRedmond@gmail.com",
            "sender_full_name": "Patrick Redmond (W'14)",
            "sender_id": 5014,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "victory/dilemma",
            "submessages": [],
            "timestamp": 1525372041,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/612c7c2a108d7850c62d1d2293a481aa42855408?x=x&version=2",
            "client": "website",
            "content": "<p>well, my current employer was magnanimous and told me to come back if it doesn't work out.. i never expected such kindness</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 126064473,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "2764",
                    "emoji_name": "heart",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "libby@daydrea.me",
                        "full_name": "Libby Horacek (she) (SP1'15)",
                        "id": 7081
                    },
                    "user_id": 7081
                },
                {
                    "emoji_code": "2764",
                    "emoji_name": "heart",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "vaibhavsagar@gmail.com",
                        "full_name": "Vaibhav Sagar (he) (F1'16)",
                        "id": 100041
                    },
                    "user_id": 100041
                },
                {
                    "emoji_code": "2764",
                    "emoji_name": "heart",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "levimroth@gmail.com",
                        "full_name": "Levi Roth (he) (W2'18)",
                        "id": 105051
                    },
                    "user_id": 105051
                },
                {
                    "emoji_code": "2764",
                    "emoji_name": "heart",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "phoebe@slub.co",
                        "full_name": "phoebe beatrice jenkins (she) (m4'18)",
                        "id": 101991
                    },
                    "user_id": 101991
                },
                {
                    "emoji_code": "2764",
                    "emoji_name": "heart",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "me@joeym.org",
                        "full_name": "Joey Marianer (he) (m1'18)",
                        "id": 105228
                    },
                    "user_id": 105228
                }
            ],
            "recipient_id": 22667,
            "sender_email": "PLRedmond@gmail.com",
            "sender_full_name": "Patrick Redmond (W'14)",
            "sender_id": 5014,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "victory/dilemma",
            "submessages": [],
            "timestamp": 1525380302,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/187931dc9ca73b56a4e014e6009c00a1?d=identicon&version=1",
            "client": "website",
            "content": "<p>That's a very kind thing for an employer to say. Most employers have a generic \"you're not barred from being rehired\", but coming out and saying it is a rare form of awesome. (...and \"leave and you'll never work at this company again\" is a blessedly rare form of awful.)</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 126064849,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "me@joeym.org",
            "sender_full_name": "Joey Marianer (he) (m1'18)",
            "sender_id": 105228,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "victory/dilemma",
            "submessages": [],
            "timestamp": 1525380821,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/d2d1f3e361a479849026fe298e091c50e1a4b20a?x=x&version=5",
            "client": "website",
            "content": "<p>there is a free property testing webinar next week - <a href=\"https://www.fpcomplete.com/practical_property_testing_in_haskell\" target=\"_blank\" title=\"https://www.fpcomplete.com/practical_property_testing_in_haskell\">https://www.fpcomplete.com/practical_property_testing_in_haskell</a></p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 126115189,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1104",
                    "emoji_name": "haskell",
                    "reaction_type": "realm_emoji",
                    "user": {
                        "email": "adampalay@gmail.com",
                        "full_name": "Adam Palay (he) (SP2'18)",
                        "id": 111960
                    },
                    "user_id": 111960
                }
            ],
            "recipient_id": 22667,
            "sender_email": "rc@alicja.dev",
            "sender_full_name": "Alicja Karolina Raszkowska (she/they) (W2'18)",
            "sender_id": 100049,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "property testing webinar",
            "submessages": [],
            "timestamp": 1525469986,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4d074af6cc341ef51b25bb2f738cdb11?d=identicon&version=1",
            "client": "website",
            "content": "<p>The CfP is still open! <a href=\"https://skillsmatter.com/conferences/10237-haskell-exchange-2018\" target=\"_blank\" title=\"https://skillsmatter.com/conferences/10237-haskell-exchange-2018\">https://skillsmatter.com/conferences/10237-haskell-exchange-2018</a></p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 126299894,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "vaibhavsagar@gmail.com",
            "sender_full_name": "Vaibhav Sagar (he) (F1'16)",
            "sender_id": 100041,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "HaskellX 2018, 11-12 Oct, London",
            "submessages": [],
            "timestamp": 1525843184,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4d074af6cc341ef51b25bb2f738cdb11?d=identicon&version=1",
            "client": "website",
            "content": "<p>I have had what is potentially my best idea yet: the INGSOC slogans applied to FP! Observe:</p>\n<ul>\n<li>\"War is peace\": the way we achieve peace of mind is by having our tools yell at us as much as possible as often as possible</li>\n<li>\"Freedom is slavery\": Dynamic programming languages allow you do do everything, but it's soul-crushingly difficult to reason about your code when it can do anything</li>\n<li>\"Ignorance is strength\": Parametricity, liberties constrain and constraints liberate. Also things like Rank-2 types that make <code>ST</code> possible!</li>\n</ul>\n<p>I also think there's a broader point to be made here about brainwashing and the absurdity of FP that we need to address when trying to bring new members into the cult.</p>\n<p>Stay tuned for my wildly successful conference talk/blog post!</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 126948723,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1240",
                    "emoji_name": "parrot",
                    "reaction_type": "realm_emoji",
                    "user": {
                        "email": "juliano.solanho@gmail.com",
                        "full_name": "Juliano Bortolozzo Solanho (he) (F1'16)",
                        "id": 100035
                    },
                    "user_id": 100035
                },
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "thumbs_up",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "tobinyehle@gmail.com",
                        "full_name": "Tobin Yehle (he) (SP1'20)",
                        "id": 105607
                    },
                    "user_id": 105607
                }
            ],
            "recipient_id": 22667,
            "sender_email": "vaibhavsagar@gmail.com",
            "sender_full_name": "Vaibhav Sagar (he) (F1'16)",
            "sender_id": 100041,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "functional programming doublethink",
            "submessages": [],
            "timestamp": 1527027435,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/612c7c2a108d7850c62d1d2293a481aa42855408?x=x&version=2",
            "client": "website",
            "content": "<p><span class=\"emoji emoji-1f914\" title=\"thinking face\">:thinking_face:</span></p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 126949881,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "PLRedmond@gmail.com",
            "sender_full_name": "Patrick Redmond (W'14)",
            "sender_id": 5014,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "functional programming doublethink",
            "submessages": [],
            "timestamp": 1527029204,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/612c7c2a108d7850c62d1d2293a481aa42855408?x=x&version=2",
            "client": "website",
            "content": "<p><span class=\"emoji emoji-1f914\" title=\"thinking face\">:thinking_face:</span> <span class=\"emoji emoji-1f914\" title=\"thinking face\">:thinking_face:</span>  <span class=\"emoji emoji-1f914\" title=\"thinking face\">:thinking_face:</span></p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 126949889,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "PLRedmond@gmail.com",
            "sender_full_name": "Patrick Redmond (W'14)",
            "sender_id": 5014,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "functional programming doublethink",
            "submessages": [],
            "timestamp": 1527029230,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/612c7c2a108d7850c62d1d2293a481aa42855408?x=x&version=2",
            "client": "website",
            "content": "<p>The people are nice. I don't get to interact with them very much though because I'm mostly working with tweag's client iohk. I'm not really feeling enthusiastic about the project with iohk because it's work on blockchains.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 127064387,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "PLRedmond@gmail.com",
            "sender_full_name": "Patrick Redmond (W'14)",
            "sender_id": 5014,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "tweag.io",
            "submessages": [],
            "timestamp": 1527223342,
            "topic_links": [
                "https://tweag.io"
            ],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/612c7c2a108d7850c62d1d2293a481aa42855408?x=x&version=2",
            "client": "website",
            "content": "<p>Also all the work is rust, which so far I feel very undecided about.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 127064395,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "PLRedmond@gmail.com",
            "sender_full_name": "Patrick Redmond (W'14)",
            "sender_id": 5014,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "tweag.io",
            "submessages": [],
            "timestamp": 1527223382,
            "topic_links": [
                "https://tweag.io"
            ],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4d074af6cc341ef51b25bb2f738cdb11?d=identicon&version=1",
            "client": "website",
            "content": "<p>I met someone from FPComplete at Lambda Jam who was telling me how they were getting paid to complain about the IOHK codebase (i.e. audit it). Also one relatively well-known Sydney Haskeller who works for IOHK was telling me how they fired their first contractors because the codebase was so terrible and so bereft of documentation.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 127064574,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "vaibhavsagar@gmail.com",
            "sender_full_name": "Vaibhav Sagar (he) (F1'16)",
            "sender_id": 100041,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "tweag.io",
            "submessages": [],
            "timestamp": 1527223796,
            "topic_links": [
                "https://tweag.io"
            ],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4d074af6cc341ef51b25bb2f738cdb11?d=identicon&version=1",
            "client": "website",
            "content": "<p>All this to say this doesn't sound like the ideal first codebase to be working on, but I hope things go well!</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 127065654,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "vaibhavsagar@gmail.com",
            "sender_full_name": "Vaibhav Sagar (he) (F1'16)",
            "sender_id": 100041,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "tweag.io",
            "submessages": [],
            "timestamp": 1527225968,
            "topic_links": [
                "https://tweag.io"
            ],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/612c7c2a108d7850c62d1d2293a481aa42855408?x=x&version=2",
            "client": "ZulipMobile",
            "content": "<p>Hmm, that's good to know. In evaluating the job opportunity I focused entirely on tweag. This is my first time doing contract work so I didn't think to evaluate the client!</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 127076387,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "PLRedmond@gmail.com",
            "sender_full_name": "Patrick Redmond (W'14)",
            "sender_id": 5014,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "tweag.io",
            "submessages": [],
            "timestamp": 1527246994,
            "topic_links": [
                "https://tweag.io"
            ],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4d074af6cc341ef51b25bb2f738cdb11?d=identicon&version=1",
            "client": "ZulipMobile",
            "content": "<p>OTOH all of this was referring to the Haskell codebase, so maybe that's an entirely different can of worms?</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 127086334,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "vaibhavsagar@gmail.com",
            "sender_full_name": "Vaibhav Sagar (he) (F1'16)",
            "sender_id": 100041,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "tweag.io",
            "submessages": [],
            "timestamp": 1527261258,
            "topic_links": [
                "https://tweag.io"
            ],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/612c7c2a108d7850c62d1d2293a481aa42855408?x=x&version=2",
            "client": "ZulipMobile",
            "content": "<p>The rust codebase is much narrower at current. It doesn't participate in the network so much as just read from it. I think it has some problems, but perhaps not as severe. There's a surprising lack of planning and documentation though.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 127087351,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "PLRedmond@gmail.com",
            "sender_full_name": "Patrick Redmond (W'14)",
            "sender_id": 5014,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "tweag.io",
            "submessages": [],
            "timestamp": 1527262577,
            "topic_links": [
                "https://tweag.io"
            ],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4d074af6cc341ef51b25bb2f738cdb11?d=identicon&version=1",
            "client": "website",
            "content": "<p><a href=\"https://www.youtube.com/watch?v=pDgshr-oc14\" target=\"_blank\" title=\"https://www.youtube.com/watch?v=pDgshr-oc14\">Lambda Days 2018 - Matth\u00edas P\u00e1ll Gissurarson - Suggesting Valid Substitutions For Typed Holes</a></p>\n<div class=\"youtube-video message_inline_image\"><a data-id=\"pDgshr-oc14\" href=\"https://www.youtube.com/watch?v=pDgshr-oc14\" target=\"_blank\" title=\"https://www.youtube.com/watch?v=pDgshr-oc14\"><img src=\"https://i.ytimg.com/vi/pDgshr-oc14/default.jpg\"></a></div>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 127131125,
            "is_me_message": false,
            "last_edit_timestamp": 1527347280,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "vaibhavsagar@gmail.com",
            "sender_full_name": "Vaibhav Sagar (he) (F1'16)",
            "sender_id": 100041,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Suggesting Valid Substitutions For Typed Holes",
            "submessages": [],
            "timestamp": 1527347250,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4d074af6cc341ef51b25bb2f738cdb11?d=identicon&version=1",
            "client": "website",
            "content": "<p>I had planned to use this in my !!Con talk but it was too much output and one of the first people I showed it to advised me to tone it down</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 127131189,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1100",
                    "emoji_name": "lambda",
                    "reaction_type": "realm_emoji",
                    "user": {
                        "email": "adampalay@gmail.com",
                        "full_name": "Adam Palay (he) (SP2'18)",
                        "id": 111960
                    },
                    "user_id": 111960
                }
            ],
            "recipient_id": 22667,
            "sender_email": "vaibhavsagar@gmail.com",
            "sender_full_name": "Vaibhav Sagar (he) (F1'16)",
            "sender_id": 100041,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Suggesting Valid Substitutions For Typed Holes",
            "submessages": [],
            "timestamp": 1527347397,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/09f2e3360e1ea6dcd2418b763e8f82d0?d=identicon&version=3",
            "client": "website",
            "content": "<p>I read this stackoverflow answer today, which I didn't completely understand but thought was really interesting <a href=\"https://stackoverflow.com/questions/9190352/abusing-the-algebra-of-algebraic-data-types-why-does-this-work\" target=\"_blank\" title=\"https://stackoverflow.com/questions/9190352/abusing-the-algebra-of-algebraic-data-types-why-does-this-work\">https://stackoverflow.com/questions/9190352/abusing-the-algebra-of-algebraic-data-types-why-does-this-work</a></p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 127271501,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "lucy.zhang7@gmail.com",
            "sender_full_name": "Lucy Zhang (S1'18)",
            "sender_id": 117507,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "\"Abusing the algebra of algebraic data types\"",
            "submessages": [],
            "timestamp": 1527624627,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/09f2e3360e1ea6dcd2418b763e8f82d0?d=identicon&version=3",
            "client": "website",
            "content": "<p>TIL there is a bijection between binary trees and 7-tuples of binary trees</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 127271526,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "lucy.zhang7@gmail.com",
            "sender_full_name": "Lucy Zhang (S1'18)",
            "sender_id": 117507,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "\"Abusing the algebra of algebraic data types\"",
            "submessages": [],
            "timestamp": 1527624652,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4c6c33ba34805ad702799c529d0cdce4?d=identicon&version=1",
            "client": "ZulipElectron",
            "content": "<p>that is so cool</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 127274034,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "adampalay@gmail.com",
            "sender_full_name": "Adam Palay (he) (SP2'18)",
            "sender_id": 111960,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "\"Abusing the algebra of algebraic data types\"",
            "submessages": [],
            "timestamp": 1527627696,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/efe57f0998df065470ff42c938f781cf?d=identicon&version=1",
            "client": "website",
            "content": "<p>Would anyone be interested in pairing on a Haskell library tomorrow evening? I want to work on my HTML templating library, Larceny (<a href=\"https://github.com/positiondev/larceny\" target=\"_blank\" title=\"https://github.com/positiondev/larceny\">https://github.com/positiondev/larceny</a>) and it would be fun to have some company.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 127278933,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "libby@daydrea.me",
            "sender_full_name": "Libby Horacek (she) (SP1'15)",
            "sender_id": 7081,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Pairing tomorrow evening?",
            "submessages": [],
            "timestamp": 1527634564,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4d074af6cc341ef51b25bb2f738cdb11?d=identicon&version=1",
            "client": "website",
            "content": "<p>What time would this be? I could probably do 7pm-9pm your time!</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 127281466,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "vaibhavsagar@gmail.com",
            "sender_full_name": "Vaibhav Sagar (he) (F1'16)",
            "sender_id": 100041,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Pairing tomorrow evening?",
            "submessages": [],
            "timestamp": 1527638847,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/efe57f0998df065470ff42c938f781cf?d=identicon&version=1",
            "client": "website",
            "content": "<p>sounds great!</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 127282213,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "libby@daydrea.me",
            "sender_full_name": "Libby Horacek (she) (SP1'15)",
            "sender_id": 7081,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Pairing tomorrow evening?",
            "submessages": [],
            "timestamp": 1527640018,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4d074af6cc341ef51b25bb2f738cdb11?d=identicon&version=1",
            "client": "website",
            "content": "<p>I just found this blog post again after multiple unsuccessful attempts, please enjoy: <a href=\"https://elephly.net/posts/2017-01-09-bootstrapping-haskell-part-1.html\" target=\"_blank\" title=\"https://elephly.net/posts/2017-01-09-bootstrapping-haskell-part-1.html\">https://elephly.net/posts/2017-01-09-bootstrapping-haskell-part-1.html</a></p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 127298014,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "vaibhavsagar@gmail.com",
            "sender_full_name": "Vaibhav Sagar (he) (F1'16)",
            "sender_id": 100041,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Bootstrapping Haskell: Part 1",
            "submessages": [],
            "timestamp": 1527671029,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4d074af6cc341ef51b25bb2f738cdb11?d=identicon&version=1",
            "client": "website",
            "content": "<p>I've been waiting for this for a while! <a href=\"https://typeclasses.com/news/2018-05-prepare-for-launch\" target=\"_blank\" title=\"https://typeclasses.com/news/2018-05-prepare-for-launch\">https://typeclasses.com/news/2018-05-prepare-for-launch</a></p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 127456514,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f389",
                    "emoji_name": "tada",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "katherine.ye@gmail.com",
                        "full_name": "Katherine Ye (S'13)",
                        "id": 2117
                    },
                    "user_id": 2117
                },
                {
                    "emoji_code": "1f389",
                    "emoji_name": "tada",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "juliano.solanho@gmail.com",
                        "full_name": "Juliano Bortolozzo Solanho (he) (F1'16)",
                        "id": 100035
                    },
                    "user_id": 100035
                },
                {
                    "emoji_code": "1f389",
                    "emoji_name": "tada",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "heneli@kailahi.com",
                        "full_name": "Heneli Ta'angafala Kailahi (SP2'17)",
                        "id": 100771
                    },
                    "user_id": 100771
                }
            ],
            "recipient_id": 22667,
            "sender_email": "vaibhavsagar@gmail.com",
            "sender_full_name": "Vaibhav Sagar (he) (F1'16)",
            "sender_id": 100041,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Typeclasses.com",
            "submessages": [],
            "timestamp": 1527923085,
            "topic_links": [
                "https://Typeclasses.com"
            ],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4d074af6cc341ef51b25bb2f738cdb11?d=identicon&version=1",
            "client": "website",
            "content": "<p>It's a new site of Haskell and Nix learning materials by Chris Martin and Julie Moronuki, so essentially Destroy All Software but for Haskell!</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 127456568,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "vaibhavsagar@gmail.com",
            "sender_full_name": "Vaibhav Sagar (he) (F1'16)",
            "sender_id": 100041,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Typeclasses.com",
            "submessages": [],
            "timestamp": 1527923245,
            "topic_links": [
                "https://Typeclasses.com"
            ],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/612c7c2a108d7850c62d1d2293a481aa42855408?x=x&version=2",
            "client": "website",
            "content": "<p>Dimensional provides compile-time-checked units. Linear provides linear algebra operations. Does anyone know how to use them together? I think an instance of <code>Linear.Metric</code> is all that's required, but I've been stumped trying to create one.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 128005917,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "PLRedmond@gmail.com",
            "sender_full_name": "Patrick Redmond (W'14)",
            "sender_id": 5014,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "dimensional + linear",
            "submessages": [],
            "timestamp": 1528893462,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/612c7c2a108d7850c62d1d2293a481aa42855408?x=x&version=2",
            "client": "website",
            "content": "<p>If anybody else is interested in this, here's a starter for trying to get it working. I've found both libraries to be essential in writing physical simulations, but haven't used them together except very carefully. :)</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"o\">#!</span> <span class=\"o\">/</span><span class=\"n\">usr</span><span class=\"o\">/</span><span class=\"n\">bin</span><span class=\"o\">/</span><span class=\"n\">env</span> <span class=\"n\">nix</span><span class=\"o\">-</span><span class=\"n\">shell</span>\n<span class=\"o\">#!</span> <span class=\"n\">nix</span><span class=\"o\">-</span><span class=\"n\">shell</span> <span class=\"o\">-</span><span class=\"n\">i</span> <span class=\"n\">runghc</span> <span class=\"o\">-</span><span class=\"n\">p</span> <span class=\"s\">&quot;haskellPackages.ghcWithPackages (pkgs: with pkgs; [dimensional linear])&quot;</span>\n\n<span class=\"kr\">import</span> <span class=\"k\">qualified</span> <span class=\"nn\">Prelude</span> <span class=\"k\">as</span> <span class=\"n\">P</span>\n<span class=\"kr\">import</span> <span class=\"nn\">Numeric.Units.Dimensional.Prelude</span> <span class=\"c1\">-- redefines all the basic math operators</span>\n\n<span class=\"kr\">import</span> <span class=\"nn\">Linear</span>\n\n<span class=\"nf\">someDist</span><span class=\"ow\">=</span> <span class=\"mi\">3</span> <span class=\"o\">*~</span> <span class=\"n\">kilo</span> <span class=\"n\">meter</span>\n<span class=\"nf\">someTime</span><span class=\"ow\">=</span> <span class=\"mi\">4</span> <span class=\"o\">*~</span> <span class=\"n\">deca</span> <span class=\"n\">second</span>\n<span class=\"nf\">someVecA</span> <span class=\"ow\">=</span> <span class=\"kt\">V2</span> <span class=\"mi\">5</span> <span class=\"mi\">6</span>\n<span class=\"nf\">someVecB</span> <span class=\"ow\">=</span> <span class=\"kt\">V2</span> <span class=\"mi\">2</span> <span class=\"mi\">3</span>\n\n<span class=\"nf\">main</span> <span class=\"ow\">=</span> <span class=\"kr\">do</span>\n    <span class=\"n\">print</span> <span class=\"o\">$</span> <span class=\"n\">someDist</span> <span class=\"o\">/</span> <span class=\"n\">someTime</span>\n    <span class=\"n\">print</span> <span class=\"o\">$</span> <span class=\"n\">someVecA</span> <span class=\"kt\">P</span><span class=\"o\">.*</span> <span class=\"n\">someVecB</span>\n    <span class=\"c1\">-- use them together</span>\n    <span class=\"n\">dimInVec</span>\n    <span class=\"n\">vecInDim</span>\n  <span class=\"kr\">where</span>\n\n<span class=\"nf\">dimInVec</span> <span class=\"ow\">=</span> <span class=\"kr\">do</span>\n    <span class=\"n\">putStrLn</span> <span class=\"s\">&quot;Dimensioned units in a vec:&quot;</span>\n    <span class=\"n\">print</span> <span class=\"n\">smth</span>\n\n    <span class=\"cm\">{- The next line doesn&#39;t work. It&#39;s probably because existing</span>\n<span class=\"cm\">     - implementations of `Linear.Metric` for V2, V3, etc all rely on Prelude</span>\n<span class=\"cm\">     - math operators.</span>\n<span class=\"cm\">     -}</span>\n\n    <span class=\"c1\">-- print $ norm someVec</span>\n  <span class=\"kr\">where</span>\n    <span class=\"n\">smth</span> <span class=\"ow\">=</span> <span class=\"p\">(</span><span class=\"o\">*~</span> <span class=\"n\">meter</span><span class=\"p\">)</span> <span class=\"o\">&lt;$&gt;</span> <span class=\"n\">someVecA</span>\n\n<span class=\"nf\">vecInDim</span> <span class=\"ow\">=</span> <span class=\"kr\">do</span>\n    <span class=\"n\">putStrLn</span> <span class=\"s\">&quot;Vecs wraped in a dimension:&quot;</span>\n    <span class=\"n\">print</span> <span class=\"n\">smth</span>\n\n    <span class=\"cm\">{- The next line doesn&#39;t work because ther&#39;s no instance of `Linear.Metric`</span>\n<span class=\"cm\">     - for the dimensional wrapper.</span>\n<span class=\"cm\">     -}</span>\n\n    <span class=\"c1\">-- print $ norm smth</span>\n\n  <span class=\"kr\">where</span>\n    <span class=\"n\">smth</span> <span class=\"ow\">=</span> <span class=\"n\">someVecA</span> <span class=\"o\">*~</span> <span class=\"n\">meter</span>\n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 128007054,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "PLRedmond@gmail.com",
            "sender_full_name": "Patrick Redmond (W'14)",
            "sender_id": 5014,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "dimensional + linear",
            "submessages": [],
            "timestamp": 1528895035,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4d074af6cc341ef51b25bb2f738cdb11?d=identicon&version=1",
            "client": "website",
            "content": "<p><a href=\"https://benlynn.blogspot.com/2018/06/why-laziness-matters.html\" target=\"_blank\" title=\"https://benlynn.blogspot.com/2018/06/why-laziness-matters.html\">https://benlynn.blogspot.com/2018/06/why-laziness-matters.html</a></p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 128803039,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "vaibhavsagar@gmail.com",
            "sender_full_name": "Vaibhav Sagar (he) (F1'16)",
            "sender_id": 100041,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Why Laziness Matters",
            "submessages": [],
            "timestamp": 1530232360,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4d074af6cc341ef51b25bb2f738cdb11?d=identicon&version=1",
            "client": "website",
            "content": "<blockquote>\n<p>Haskell gently forces us to distinguish between pure and impure code through its unobtrusive yet uncompromising type system</p>\n</blockquote>\n<p><a href=\"https://crypto.stanford.edu/~blynn/haskell/\" target=\"_blank\" title=\"https://crypto.stanford.edu/~blynn/haskell/\">https://crypto.stanford.edu/~blynn/haskell/</a></p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 128806673,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "thumbs_up",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "me@joeym.org",
                        "full_name": "Joey Marianer (he) (m1'18)",
                        "id": 105228
                    },
                    "user_id": 105228
                },
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "thumbs_up",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "eha@posteo.de",
                        "full_name": "Eugene Ha (he) (S1'18)",
                        "id": 116366
                    },
                    "user_id": 116366
                }
            ],
            "recipient_id": 22667,
            "sender_email": "vaibhavsagar@gmail.com",
            "sender_full_name": "Vaibhav Sagar (he) (F1'16)",
            "sender_id": 100041,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Haskell Sorcery",
            "submessages": [],
            "timestamp": 1530239485,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/009427e1b56c85d4a70a091905cf7a305c109dc6?x=x&version=5",
            "client": "ZulipElectron",
            "content": "<p>Well it was an incredible two months <img alt=\":cool-crying:\" class=\"emoji\" src=\"https://zulip-avatars.s3.amazonaws.com/13/emoji/images/1337.png\" title=\"cool-crying\"> ! Unfortunately the company ran out of funding and shut down today, so I'm back to looking for another Haskell position. If anyone is aware of an opening please let me know!</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 129226396,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "heneli@kailahi.com",
            "sender_full_name": "Heneli Ta'angafala Kailahi (SP2'17)",
            "sender_id": 100771,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Junior Haskell Interview",
            "submessages": [],
            "timestamp": 1530912752,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/423a5327ed896db2dfd052de561709d0e6ae2689?x=x&version=1",
            "client": "ZulipMobile",
            "content": "<p>Excellent, excellent, excellent article on the GHC here: <a href=\"http://aosabook.org/en/ghc.html\" target=\"_blank\" title=\"http://aosabook.org/en/ghc.html\">http://aosabook.org/en/ghc.html</a></p>\n<p>It's chock full of juicy details and tidbits.</p>\n<p>(cc <span class=\"user-mention\" data-user-id=\"116583\">@S\u00f6nke Hahn (S1'18)</span> )</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 129371921,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "casey@rodarmor.com",
            "sender_full_name": "Casey Rodarmor (SP2'18)",
            "sender_id": 6935,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Glasgow Haskell Compiler Internals",
            "submessages": [],
            "timestamp": 1531168257,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/423a5327ed896db2dfd052de561709d0e6ae2689?x=x&version=1",
            "client": "ZulipMobile",
            "content": "<p>It reveals one tragedy, however: internally, Haskell complies to an imperative language with an explicit stack <span class=\"emoji emoji-1f62f\" title=\"hushed\">:hushed:</span><span class=\"emoji emoji-1f62e\" title=\"open mouth\">:open_mouth:</span><span class=\"emoji emoji-1f623\" title=\"persevere\">:persevere:</span><span class=\"emoji emoji-1f62d\" title=\"sob\">:sob:</span><span class=\"emoji emoji-1f62d\" title=\"sob\">:sob:</span><span class=\"emoji emoji-1f62d\" title=\"sob\">:sob:</span></p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 129372084,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "casey@rodarmor.com",
            "sender_full_name": "Casey Rodarmor (SP2'18)",
            "sender_id": 6935,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Glasgow Haskell Compiler Internals",
            "submessages": [],
            "timestamp": 1531168427,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/a2cc22089e70c6b1e9a84d91ac82118ab06aa82a?x=x&version=2",
            "client": "website",
            "content": "<p>I hope this doesn't come off as smarmy, but isn't the goal to compile to a native binary, which is an imperative language with an explicit stack? Why are you dismayed? I feel like I'm missing something. (If I'm missing that someone has started making Haskell Machines after the old Lisp Machines, that would be pretty neat.)</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 129372566,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "peter@push.cx",
            "sender_full_name": "Peter Bhat Harkins (he) (F2'17)",
            "sender_id": 102004,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Glasgow Haskell Compiler Internals",
            "submessages": [],
            "timestamp": 1531168945,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/423a5327ed896db2dfd052de561709d0e6ae2689?x=x&version=1",
            "client": "website",
            "content": "<p>It's got to run on a real computer somehow, but somehow I liked to fantasize that it was pure and functional all the way down.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 129379489,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "casey@rodarmor.com",
            "sender_full_name": "Casey Rodarmor (SP2'18)",
            "sender_id": 6935,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Glasgow Haskell Compiler Internals",
            "submessages": [],
            "timestamp": 1531178094,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/a6a0ff0a4a9a86ae7bc4524453d439bd?d=identicon&version=1",
            "client": "website",
            "content": "<p>It could be if your hardware natively did alpha, beta &amp; eta reductions! <img alt=\":lambda:\" class=\"emoji\" src=\"https://zulip-avatars.s3.amazonaws.com/13/emoji/images/1100.png\" title=\"lambda\"> <img alt=\":lambda:\" class=\"emoji\" src=\"https://zulip-avatars.s3.amazonaws.com/13/emoji/images/1100.png\" title=\"lambda\"> <img alt=\":lambda:\" class=\"emoji\" src=\"https://zulip-avatars.s3.amazonaws.com/13/emoji/images/1100.png\" title=\"lambda\"> <br>\nI don't grok how that would work, but I bet we could make this happen <span class=\"emoji emoji-1f419\" title=\"octopus\">:octopus:</span> <span class=\"emoji emoji-1f419\" title=\"octopus\">:octopus:</span> <br>\nAlso, yes, that article is very very good</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 129381445,
            "is_me_message": false,
            "last_edit_timestamp": 1531180972,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "annie.cherk@gmail.com",
            "sender_full_name": "Annie Cherkaev (she/they) (m4'18)",
            "sender_id": 9502,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Glasgow Haskell Compiler Internals",
            "submessages": [],
            "timestamp": 1531180903,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4c6c33ba34805ad702799c529d0cdce4?d=identicon&version=1",
            "client": "ZulipMobile",
            "content": "<p>Are there those reductions in nature? Bits abound, but lambda expressions?</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 129381719,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "adampalay@gmail.com",
            "sender_full_name": "Adam Palay (he) (SP2'18)",
            "sender_id": 111960,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Glasgow Haskell Compiler Internals",
            "submessages": [],
            "timestamp": 1531181312,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4c6c33ba34805ad702799c529d0cdce4?d=identicon&version=1",
            "client": "ZulipMobile",
            "content": "<p>Or ski combinators? ;)</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 129381735,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f3bf",
                    "emoji_name": "skis",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "vaibhavsagar@gmail.com",
                        "full_name": "Vaibhav Sagar (he) (F1'16)",
                        "id": 100041
                    },
                    "user_id": 100041
                },
                {
                    "emoji_code": "1f3bf",
                    "emoji_name": "skis",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "annie.cherk@gmail.com",
                        "full_name": "Annie Cherkaev (she/they) (m4'18)",
                        "id": 9502
                    },
                    "user_id": 9502
                }
            ],
            "recipient_id": 22667,
            "sender_email": "adampalay@gmail.com",
            "sender_full_name": "Adam Palay (he) (SP2'18)",
            "sender_id": 111960,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Glasgow Haskell Compiler Internals",
            "submessages": [],
            "timestamp": 1531181335,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/c52df4d54166ed7db0141bdb21c7935e502d6ddc?x=x&version=1",
            "client": "website",
            "content": "<p>One such project: <a href=\"https://github.com/tommythorn/Reduceron\" target=\"_blank\" title=\"https://github.com/tommythorn/Reduceron\">https://github.com/tommythorn/Reduceron</a></p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 129384248,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "darius@wry.me",
            "sender_full_name": "Darius Bacon (W1'16)",
            "sender_id": 902,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Glasgow Haskell Compiler Internals",
            "submessages": [],
            "timestamp": 1531185855,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4d074af6cc341ef51b25bb2f738cdb11?d=identicon&version=1",
            "client": "website",
            "content": "<p>there's a talk by Edward Kmett about compiling to combinators and why that might be a good idea (or not) today with GPUs: <a href=\"https://www.youtube.com/watch?v=PA1Fc7DNKtA\" target=\"_blank\" title=\"https://www.youtube.com/watch?v=PA1Fc7DNKtA\">https://www.youtube.com/watch?v=PA1Fc7DNKtA</a></p>\n<div class=\"youtube-video message_inline_image\"><a data-id=\"PA1Fc7DNKtA\" href=\"https://www.youtube.com/watch?v=PA1Fc7DNKtA\" target=\"_blank\" title=\"https://www.youtube.com/watch?v=PA1Fc7DNKtA\"><img src=\"https://i.ytimg.com/vi/PA1Fc7DNKtA/default.jpg\"></a></div>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 129385508,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "vaibhavsagar@gmail.com",
            "sender_full_name": "Vaibhav Sagar (he) (F1'16)",
            "sender_id": 100041,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Glasgow Haskell Compiler Internals",
            "submessages": [],
            "timestamp": 1531188344,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4d074af6cc341ef51b25bb2f738cdb11?d=identicon&version=1",
            "client": "website",
            "content": "<p>he gave the same talk at Lambda Jam but the video for that isn't up yet AFAICT</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 129385550,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "vaibhavsagar@gmail.com",
            "sender_full_name": "Vaibhav Sagar (he) (F1'16)",
            "sender_id": 100041,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Glasgow Haskell Compiler Internals",
            "submessages": [],
            "timestamp": 1531188370,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4d074af6cc341ef51b25bb2f738cdb11?d=identicon&version=1",
            "client": "website",
            "content": "<p>There's also this paper on the Spineless Tagless G-machine, which is the virtual machine that Haskell executes on: <a href=\"https://www.microsoft.com/en-us/research/wp-content/uploads/1992/04/spineless-tagless-gmachine.pdf\" target=\"_blank\" title=\"https://www.microsoft.com/en-us/research/wp-content/uploads/1992/04/spineless-tagless-gmachine.pdf\">https://www.microsoft.com/en-us/research/wp-content/uploads/1992/04/spineless-tagless-gmachine.pdf</a></p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 129394701,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "vaibhavsagar@gmail.com",
            "sender_full_name": "Vaibhav Sagar (he) (F1'16)",
            "sender_id": 100041,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Glasgow Haskell Compiler Internals",
            "submessages": [],
            "timestamp": 1531204341,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/649c2682ffc71d16cddbbbcb3595bc45?d=identicon&version=1",
            "client": "ZulipElectron",
            "content": "<p>Hey Everyone! </p>\n<p>I propose we start the session by helping anyone that would like it to get a haskell environment set up on their machine <a href=\"https://docs.haskellstack.org/en/stable/README/\" target=\"_blank\" title=\"https://docs.haskellstack.org/en/stable/README/\">https://docs.haskellstack.org/en/stable/README/</a> is a pretty good tool for that.  Also, I think the beginning of the session should be open for general haskell questions / discussion followed by maybe some group exercises if people are interested in that. </p>\n<p>Last study group the idea was thrown out there to work through a haskell a day exercise: <a href=\"https://twitter.com/1HaskellADay\" target=\"_blank\" title=\"https://twitter.com/1HaskellADay\">https://twitter.com/1HaskellADay</a> the one for today is <a href=\"https://github.com/geophf/1HaskellADay/blob/master/exercises/HAD/Y2018/M07/D10/Exercise.hs\" target=\"_blank\" title=\"https://github.com/geophf/1HaskellADay/blob/master/exercises/HAD/Y2018/M07/D10/Exercise.hs\">https://github.com/geophf/1HaskellADay/blob/master/exercises/HAD/Y2018/M07/D10/Exercise.hs</a>.  This one is probably going to be a stretch for me personally (as it has been  a while since I have done any IO in haskell and am still working to that point in the book).  If people are in the mood for an exploratory session working on that problem, totally happy to do that, but I personally may not be able to finish it in an hour (just to set expectations).</p>\n<p>Other possible exercises we could work through are are implementing Ciphers (I have a Ceasar cipher implementation and am going to work on a Vigene\u0300re Cipher at some point today, so we could work on that if anyone is interested).  Hutton\u2019s Razor and  implementing phone keyboard presses -&gt; alphanumeric characters is also exercises I plan on doing today which we could cover in the session if people are interested.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 129415020,
            "is_me_message": false,
            "last_edit_timestamp": 1531234606,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "me@nicksanford.io",
            "sender_full_name": "Nick Sanford (he) (S2'18)",
            "sender_id": 120479,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "study group",
            "submessages": [],
            "timestamp": 1531233873,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/e654cae31e526bde135190738ead4dd5?d=identicon&version=1",
            "client": "ZulipElectron",
            "content": "<p><a href=\"https://wiki.haskell.org/Dealing_with_binary_data\" target=\"_blank\" title=\"https://wiki.haskell.org/Dealing_with_binary_data\">https://wiki.haskell.org/Dealing_with_binary_data</a></p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 129416568,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "pierre.s.gergis@gmail.com",
            "sender_full_name": "Pierre Gergis (he) (S2'18)",
            "sender_id": 120080,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "study group",
            "submessages": [],
            "timestamp": 1531235742,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4d074af6cc341ef51b25bb2f738cdb11?d=identicon&version=1",
            "client": "website",
            "content": "<p>I strongly recommend <code>attoparsec</code> for parsing binary data</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 129416630,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "vaibhavsagar@gmail.com",
            "sender_full_name": "Vaibhav Sagar (he) (F1'16)",
            "sender_id": 100041,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "study group",
            "submessages": [],
            "timestamp": 1531235804,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/649c2682ffc71d16cddbbbcb3595bc45?d=identicon&version=1",
            "client": "ZulipElectron",
            "content": "<p>Awesome <span class=\"user-mention\" data-user-id=\"100041\">@Vaibhav Sagar (F1'16)</span> ! Thanks for the recommendation. <br>\n<a href=\"https://github.com/bos/attoparsec/blob/master/examples/Atto_RFC2616.hs\" target=\"_blank\" title=\"https://github.com/bos/attoparsec/blob/master/examples/Atto_RFC2616.hs\">https://github.com/bos/attoparsec/blob/master/examples/Atto_RFC2616.hs</a></p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 129416735,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "me@nicksanford.io",
            "sender_full_name": "Nick Sanford (he) (S2'18)",
            "sender_id": 120479,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "study group",
            "submessages": [],
            "timestamp": 1531235973,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4d074af6cc341ef51b25bb2f738cdb11?d=identicon&version=1",
            "client": "website",
            "content": "<p>I also used it <a href=\"https://github.com/vaibhavsagar/duffer/blob/master/duffer/src/Duffer/Loose/Parser.hs\" target=\"_blank\" title=\"https://github.com/vaibhavsagar/duffer/blob/master/duffer/src/Duffer/Loose/Parser.hs\">here</a></p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 129416891,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "vaibhavsagar@gmail.com",
            "sender_full_name": "Vaibhav Sagar (he) (F1'16)",
            "sender_id": 100041,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "study group",
            "submessages": [],
            "timestamp": 1531236150,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/649c2682ffc71d16cddbbbcb3595bc45?d=identicon&version=1",
            "client": "ZulipElectron",
            "content": "<p><span class=\"user-mention\" data-user-id=\"100041\">@Vaibhav Sagar (F1'16)</span>  Awesome! Did you work on <a href=\"https://github.com/vaibhavsagar/duffer\" target=\"_blank\" title=\"https://github.com/vaibhavsagar/duffer\">https://github.com/vaibhavsagar/duffer</a> during your batch? </p>\n<p>I'm currently leaning towards doing a bittorrent client during my batch, but am currently working through the Haskell book (at chapter 11 at the moment). as it seems like getting more haskell under my belt is necessary to do so.   Seems like monad transformers are necessary knowledge for anytihng real world so I am currently trying to sprint to that chapter before starting, but not sure if you you had any thoughts on the matter?</p>\n<p>Also, do you have any recommendations for open source haskell projects that would be good candidates to contribute to?</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 129424902,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "me@nicksanford.io",
            "sender_full_name": "Nick Sanford (he) (S2'18)",
            "sender_id": 120479,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "study group",
            "submessages": [],
            "timestamp": 1531245605,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/e654cae31e526bde135190738ead4dd5?d=identicon&version=1",
            "client": "ZulipElectron",
            "content": "<p>For anyone curious about my vigenere cipher implementation: <a href=\"https://gist.github.com/pgergis/698ad5f3edca8c781deaf7ef9c5447f0\" target=\"_blank\" title=\"https://gist.github.com/pgergis/698ad5f3edca8c781deaf7ef9c5447f0\">https://gist.github.com/pgergis/698ad5f3edca8c781deaf7ef9c5447f0</a></p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 129438656,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f419",
                    "emoji_name": "octopus",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "santiago.gepigon@gmail.com",
                        "full_name": "Santiago Gepigon III (he) (S2'18)",
                        "id": 120074
                    },
                    "user_id": 120074
                }
            ],
            "recipient_id": 22667,
            "sender_email": "pierre.s.gergis@gmail.com",
            "sender_full_name": "Pierre Gergis (he) (S2'18)",
            "sender_id": 120080,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "study group",
            "submessages": [],
            "timestamp": 1531263103,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/e654cae31e526bde135190738ead4dd5?d=identicon&version=1",
            "client": "ZulipElectron",
            "content": "<p>(as a feature, to make it harder to crack, you don't allow spaces / caps / special characters in your output, though i guess that's not necessarily...necessary)</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 129438716,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "pierre.s.gergis@gmail.com",
            "sender_full_name": "Pierre Gergis (he) (S2'18)",
            "sender_id": 120080,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "study group",
            "submessages": [],
            "timestamp": 1531263201,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4d074af6cc341ef51b25bb2f738cdb11?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-id=\"120479\">@Nick Sanford (S2'18)</span> I did! I implemented a lot of the fiddly binary encoding stuff at RC.</p>\n<p>Monad transformers are useful, but I don't think they're necessary and you can go a long way without them. An earlier version of my project didn't use them at all. If you're in a hurry to know what they are I would recommend reading <a href=\"http://dev.stephendiehl.com/hask/#monad-transformers\" target=\"_blank\" title=\"http://dev.stephendiehl.com/hask/#monad-transformers\">http://dev.stephendiehl.com/hask/#monad-transformers</a> for a quick overview (the rest of the stuff on that page is great too).</p>\n<p>As far as open source haskell projects, I've gotten a lot of mileage out of fixing typos in documentation, which is my favourite way of contributing to projects. I've even fixed typos in GHC and Cabal <span class=\"emoji emoji-1f604\" title=\"smile\">:smile:</span>. I think this is a good way of getting started because it's a fast and easy way of gauging the maintainer's willingness to accept changes, and you don't want to make a gigantic change only for it to languish or be rejected.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 129444851,
            "is_me_message": false,
            "last_edit_timestamp": 1531274672,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "vaibhavsagar@gmail.com",
            "sender_full_name": "Vaibhav Sagar (he) (F1'16)",
            "sender_id": 100041,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "study group",
            "submessages": [],
            "timestamp": 1531274092,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/649c2682ffc71d16cddbbbcb3595bc45?d=identicon&version=1",
            "client": "ZulipMobile",
            "content": "<p><span class=\"user-mention\" data-user-id=\"100041\">@Vaibhav Sagar (F1'16)</span>  thank you so much for this suggestions. I will get started on the project before i get to monad transformers then. I will also take your suggestion to start with contributing documentation as well. That seems like a great approach for getting started in any open source project.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 129447706,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "me@nicksanford.io",
            "sender_full_name": "Nick Sanford (he) (S2'18)",
            "sender_id": 120479,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "study group",
            "submessages": [],
            "timestamp": 1531279568,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/d2d1f3e361a479849026fe298e091c50e1a4b20a?x=x&version=5",
            "client": "website",
            "content": "<p>as a side note - I wouldn't sprint through the book, as writing the instances and testing the laws helps you build up your intuition, which is the main intention of the authors</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 129452407,
            "is_me_message": false,
            "last_edit_timestamp": 1531287250,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "rc@alicja.dev",
            "sender_full_name": "Alicja Karolina Raszkowska (she/they) (W2'18)",
            "sender_id": 100049,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "study group",
            "submessages": [],
            "timestamp": 1531287219,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/d2d1f3e361a479849026fe298e091c50e1a4b20a?x=x&version=5",
            "client": "website",
            "content": "<p>it's different from \"Learn You a Haskell\" and other beginner resources in that it requires building up theory and intuition before jumping into projects</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 129452451,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "rc@alicja.dev",
            "sender_full_name": "Alicja Karolina Raszkowska (she/they) (W2'18)",
            "sender_id": 100049,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "study group",
            "submessages": [],
            "timestamp": 1531287288,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/649c2682ffc71d16cddbbbcb3595bc45?d=identicon&version=1",
            "client": "ZulipElectron",
            "content": "<p>Hey <span class=\"user-mention\" data-user-id=\"100049\">@Alicja Karolina Raszkowska (W2'18)</span> I have really enjoyed your blog posts on your experience learning Haskell! Thank you for the suggestion on taking my time going through the book. </p>\n<p>My main goal this batch is get comfortable enough in Haskell to implement a non trivial project (currently leaning towards a bittorrent client after a great conversation with <span class=\"user-mention\" data-user-id=\"813\">@Alan O'Donnell</span>).   I am indeed making sure that I work through all the exercises as LYAH \"read the book then do projects\" approach (with no exercises) has not worked for me in the past. </p>\n<p>I have found the exercises incredibly useful for actually understanding and being able to apply the concepts in the book.   I am just feeling impatient b/c I want to be able to get started on some projects (parsers, bit torrent client, maybe a toy DHT implementation) ASAP and don't want to spend 2 - 6 weeks of my batch just working through the Haskell book without doing any projects, which at my current pace looks likely if I want to get through monad transformers (chapter 26).   So I guess when I say \"sprinting through the book\" I mean \"spending all my batch time working through the book so I can get through it as soon as possible so I can get started on some projects which is what I really want to do\".  </p>\n<p>Any suggestions on balancing \"study\" and \"projects\" when learning a language like Haskell where it seems to me (maybe incorrectly) like a understanding  monoid, functor, applicative, monad, parser combinators inside and out, is necessary before implementing any projects?</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 129473405,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "me@nicksanford.io",
            "sender_full_name": "Nick Sanford (he) (S2'18)",
            "sender_id": 120479,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "study group",
            "submessages": [],
            "timestamp": 1531318927,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/d2d1f3e361a479849026fe298e091c50e1a4b20a?x=x&version=5",
            "client": "website",
            "content": "<p>I understand being eager to do some projects :) I didn't work on the book during my batch, I was a part of a study group and we would do a chapter a week, so I took my time and went through the first 20 chapters in about 4 months - my study group mentor encouraged me to reimplement Prelude functions and data structures, use Exercism and get really comfortable with property testing</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 129475162,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "rc@alicja.dev",
            "sender_full_name": "Alicja Karolina Raszkowska (she/they) (W2'18)",
            "sender_id": 100049,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "study group",
            "submessages": [],
            "timestamp": 1531320499,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/d2d1f3e361a479849026fe298e091c50e1a4b20a?x=x&version=5",
            "client": "website",
            "content": "<p>I think it depends on what you count as a project - some of the exercises in the book are small projects, e.g. the ciphers, the phone, Morse code (granted, this one has a ton of scaffolding)</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 129475224,
            "is_me_message": false,
            "last_edit_timestamp": 1531321155,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "rc@alicja.dev",
            "sender_full_name": "Alicja Karolina Raszkowska (she/they) (W2'18)",
            "sender_id": 100049,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "study group",
            "submessages": [],
            "timestamp": 1531320593,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/d2d1f3e361a479849026fe298e091c50e1a4b20a?x=x&version=5",
            "client": "website",
            "content": "<p>I got comfortable enough that I'm working on small projects, I did Tic Tac Toe last week and I'm working through a BF interpreter today, but my focus is still to grasp the concepts and be comfortable, not build projects, so I'm going through some chapters in the book still, taking notes and reading about category theory</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 129475327,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "rc@alicja.dev",
            "sender_full_name": "Alicja Karolina Raszkowska (she/they) (W2'18)",
            "sender_id": 100049,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "study group",
            "submessages": [],
            "timestamp": 1531320663,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/d2d1f3e361a479849026fe298e091c50e1a4b20a?x=x&version=5",
            "client": "website",
            "content": "<p>after the monads chapter you'll be more than ready to take on most web-dev stuff, learning a framework like Yesod or a smaller one like Scotty shouldn't be too tricky</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 129475483,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "rc@alicja.dev",
            "sender_full_name": "Alicja Karolina Raszkowska (she/they) (W2'18)",
            "sender_id": 100049,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "study group",
            "submessages": [],
            "timestamp": 1531320779,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/d2d1f3e361a479849026fe298e091c50e1a4b20a?x=x&version=5",
            "client": "website",
            "content": "<p>my mentors suggest holding off until monad transformers and IO chapters before jumping into projects, because that's the goal of the book - learn before you apply - but if you're eager to start, maybe using a different resource would be more useful?</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 129475636,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "rc@alicja.dev",
            "sender_full_name": "Alicja Karolina Raszkowska (she/they) (W2'18)",
            "sender_id": 100049,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "study group",
            "submessages": [],
            "timestamp": 1531320885,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/649c2682ffc71d16cddbbbcb3595bc45?d=identicon&version=1",
            "client": "ZulipElectron",
            "content": "<p><span class=\"user-mention\" data-user-id=\"100049\">@Alicja Karolina Raszkowska (W2'18)</span>  that is very useful advise and very encouraging! I'll stay head down and really make sure I get the fundamental abstractions down pat and also get comfortable with quickcheck testing before going off and doing projects.  I think i'm realizing that a dash of patience on my part is probably the best way to meet  my learning goals.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 129475776,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "me@nicksanford.io",
            "sender_full_name": "Nick Sanford (he) (S2'18)",
            "sender_id": 120479,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "study group",
            "submessages": [],
            "timestamp": 1531320989,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/d2d1f3e361a479849026fe298e091c50e1a4b20a?x=x&version=5",
            "client": "website",
            "content": "<p>I don't think this book is the best and only way to learn Haskell, but I found following it valuable :) learning algebras and other FP concepts is useful, especially if you want to check something in the source code, be it for the language itself or other people's code  - it's full of functional patterns, because functional patterns are everywhere ^^</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 129475853,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "rc@alicja.dev",
            "sender_full_name": "Alicja Karolina Raszkowska (she/they) (W2'18)",
            "sender_id": 100049,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "study group",
            "submessages": [],
            "timestamp": 1531321076,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/d2d1f3e361a479849026fe298e091c50e1a4b20a?x=x&version=5",
            "client": "website",
            "content": "<p>I can't wait to learn lenses, because my code feels lacking without them, but I don't think they're even in the book, so I'll need to figure that out soon :)</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 129475934,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "rc@alicja.dev",
            "sender_full_name": "Alicja Karolina Raszkowska (she/they) (W2'18)",
            "sender_id": 100049,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "study group",
            "submessages": [],
            "timestamp": 1531321118,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/649c2682ffc71d16cddbbbcb3595bc45?d=identicon&version=1",
            "client": "ZulipElectron",
            "content": "<p>Lenses sound quite fun. I have only had a tiny bit of exposure to them through Aeson but still don't fully understand them beyond that they are a way to do getter &amp; setter operations on immutable data-structures.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 129477721,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "me@nicksanford.io",
            "sender_full_name": "Nick Sanford (he) (S2'18)",
            "sender_id": 120479,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "study group",
            "submessages": [],
            "timestamp": 1531322342,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/3ca604eb0c0cfa22b4a10fc739c056c8?d=identicon&version=1",
            "client": "website",
            "content": "<p>Sorry, which book are you talking about? Reading the history, I think it's not LYAH, but am unclear on what it is. :)</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 129480469,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "lukeadba@gmail.com",
            "sender_full_name": "Luke Barone-Adesi (he) (F'13)",
            "sender_id": 2903,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "study group",
            "submessages": [],
            "timestamp": 1531324701,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/e654cae31e526bde135190738ead4dd5?d=identicon&version=1",
            "client": "ZulipElectron",
            "content": "<p><span class=\"user-mention\" data-user-id=\"2903\">@Luke Barone-Adesi (F'13)</span> p sure the discussion is about Haskell Programming from First Principles (HPFP) - <a href=\"http://haskellbook.com/\" target=\"_blank\" title=\"http://haskellbook.com/\">http://haskellbook.com/</a></p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 129485460,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "pierre.s.gergis@gmail.com",
            "sender_full_name": "Pierre Gergis (he) (S2'18)",
            "sender_id": 120080,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "study group",
            "submessages": [],
            "timestamp": 1531329631,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/3ca604eb0c0cfa22b4a10fc739c056c8?d=identicon&version=1",
            "client": "website",
            "content": "<p>Wow, thank you. That looks awesome.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 129485490,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f389",
                    "emoji_name": "tada",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "rc@alicja.dev",
                        "full_name": "Alicja Karolina Raszkowska (she/they) (W2'18)",
                        "id": 100049
                    },
                    "user_id": 100049
                }
            ],
            "recipient_id": 22667,
            "sender_email": "lukeadba@gmail.com",
            "sender_full_name": "Luke Barone-Adesi (he) (F'13)",
            "sender_id": 2903,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "study group",
            "submessages": [],
            "timestamp": 1531329659,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/7c2c992516b3fd501ea15b5ec95473a8?d=identicon&version=1",
            "client": "website",
            "content": "<p>In honour of all the curry puns I have heard over the past 7 weeks, I present to you: the reason Haskell was not named Curry!</p>\n<p>\"\"\"<br>\nAnyone could propose one or more names for the language, which<br>\nwere all written on a blackboard. At the end of this process, the<br>\nfollowing names appeared: Semla, Haskell, Vivaldi, Mozart, CFL<br>\n(Common Functional Language), Funl 88, Semlor, Candle (Common<br>\nApplicative Notation for Denoting Lambda Expressions), Fun,<br>\nDavid, Nice, Light, ML Nouveau (or Miranda Nouveau, or LML<br>\nNouveau, or ...), Mirabelle, Concord, LL, Slim, Meet, Leval, Curry,<br>\nFrege, Peano, Ease, Portland, and Haskell B Curry. After considerable<br>\ndiscussion about the various names, each person was then free<br>\nto cross out a name that he disliked. When we were done, there was<br>\none name left.<br>\nThat name was \u201cCurry,\u201d in honour of the mathematician and logician<br>\nHaskell B. Curry, whose work had led, variously and indirectly,<br>\nto our presence in that room. That night, two of us realised<br>\nthat we would be left with a lot of curry puns (aside from the spice,<br>\nand the thought of currying favour, the one that truly horrified us<br>\nwas Tim Curry\u2014TIM was Jon Fairbairn\u2019s abstract machine, and<br>\nTim Curry was famous for playing the lead in the Rocky Horror<br>\nPicture Show). So the next day, after some further discussion, we<br>\nsettled on \u201cHaskell\u201d as the name for the new language. Only later<br>\ndid we realise that this was too easily confused with Pascal or Hassle!<br>\n\"\"\"</p>\n<p>tldr: The Haskell committee decided to name the language 'Haskell' after it was determined that 'Curry' would cause too many puns. (Source: <a href=\"https://www.microsoft.com/en-us/research/publication/a-history-of-haskell-being-lazy-with-class/\" target=\"_blank\" title=\"https://www.microsoft.com/en-us/research/publication/a-history-of-haskell-being-lazy-with-class/\">https://www.microsoft.com/en-us/research/publication/a-history-of-haskell-being-lazy-with-class/</a>)</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 129489312,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1695",
                    "emoji_name": "sadparrot",
                    "reaction_type": "realm_emoji",
                    "user": {
                        "email": "john.danger.xia@gmail.com",
                        "full_name": "John Xia (he) (F2'18)",
                        "id": 8472
                    },
                    "user_id": 8472
                },
                {
                    "emoji_code": "1f35b",
                    "emoji_name": "curry",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "santiago.gepigon@gmail.com",
                        "full_name": "Santiago Gepigon III (he) (S2'18)",
                        "id": 120074
                    },
                    "user_id": 120074
                },
                {
                    "emoji_code": "2764",
                    "emoji_name": "heart",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "santiago.gepigon@gmail.com",
                        "full_name": "Santiago Gepigon III (he) (S2'18)",
                        "id": 120074
                    },
                    "user_id": 120074
                },
                {
                    "emoji_code": "1f35b",
                    "emoji_name": "curry",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "vaibhavsagar@gmail.com",
                        "full_name": "Vaibhav Sagar (he) (F1'16)",
                        "id": 100041
                    },
                    "user_id": 100041
                },
                {
                    "emoji_code": "2764",
                    "emoji_name": "heart",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "vaibhavsagar@gmail.com",
                        "full_name": "Vaibhav Sagar (he) (F1'16)",
                        "id": 100041
                    },
                    "user_id": 100041
                },
                {
                    "emoji_code": "2764",
                    "emoji_name": "heart",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "soenkehahn@gmail.com",
                        "full_name": "S\u00f6nke Hahn (he) (S1'18)",
                        "id": 116583
                    },
                    "user_id": 116583
                },
                {
                    "emoji_code": "2764",
                    "emoji_name": "heart",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "rc@alicja.dev",
                        "full_name": "Alicja Karolina Raszkowska (she/they) (W2'18)",
                        "id": 100049
                    },
                    "user_id": 100049
                },
                {
                    "emoji_code": "2764",
                    "emoji_name": "heart",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "adampalay@gmail.com",
                        "full_name": "Adam Palay (he) (SP2'18)",
                        "id": 111960
                    },
                    "user_id": 111960
                },
                {
                    "emoji_code": "2764",
                    "emoji_name": "heart",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "phoebe@slub.co",
                        "full_name": "phoebe beatrice jenkins (she) (m4'18)",
                        "id": 101991
                    },
                    "user_id": 101991
                }
            ],
            "recipient_id": 22667,
            "sender_email": "ruoyi.lin@gmail.com",
            "sender_full_name": "Caroline Lin (S1'18)",
            "sender_id": 116367,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "it was almost named curry",
            "submessages": [],
            "timestamp": 1531333632,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/649c2682ffc71d16cddbbbcb3595bc45?d=identicon&version=1",
            "client": "ZulipElectron",
            "content": "<p>This may be a very niche question but I am trying to get a literate Haskell setup working for a presentation with spacemacs org mode &amp; babel, which should allow for a jupyter nodebook like experience for any langauge supported. </p>\n<p>Haskell is supported but when I try to run a haskell code block such as </p>\n<div class=\"codehilite\"><pre><span></span>#+BEGIN_SRC haskell\n  foldr :: Foldable t =&gt; (a -&gt; b -&gt; b) -&gt; b -&gt; t a -&gt; b\n  foldr f z []     = z\n  foldr f z (x:xs) = f x (foldr f z xs)\n\n\n  main = do\n    putStrLn $ show $ foldr (-) 0 [1,2,3]\n#+END_SRC\n</pre></div>\n\n\n<p>in org mode using <code>C-c C-C</code> I am experiencing the symptoms described in this issue: <a href=\"https://github.com/haskell/haskell-mode/issues/1429\" target=\"_blank\" title=\"https://github.com/haskell/haskell-mode/issues/1429\">https://github.com/haskell/haskell-mode/issues/1429</a></p>\n<div class=\"codehilite\"><pre><span></span>Buffer *haskell* does not exist or has no process\n</pre></div>\n\n\n<p>Has anyone hit this issue before / maybe have any suggestions?</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 129534666,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "me@nicksanford.io",
            "sender_full_name": "Nick Sanford (he) (S2'18)",
            "sender_id": 120479,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "tooling",
            "submessages": [],
            "timestamp": 1531400867,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/649c2682ffc71d16cddbbbcb3595bc45?d=identicon&version=1",
            "client": "ZulipElectron",
            "content": "<p>I'm considering trying to just manually update spacemacs org mode to the latest version to see if that solves the issue.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 129534724,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "me@nicksanford.io",
            "sender_full_name": "Nick Sanford (he) (S2'18)",
            "sender_id": 120479,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "tooling",
            "submessages": [],
            "timestamp": 1531400914,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4d074af6cc341ef51b25bb2f738cdb11?d=identicon&version=1",
            "client": "website",
            "content": "<p>FWIW there's a Jupyter backend for Haskell: <a href=\"https://github.com/gibiansky/IHaskell\" target=\"_blank\" title=\"https://github.com/gibiansky/IHaskell\">https://github.com/gibiansky/IHaskell</a></p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 129534886,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "vaibhavsagar@gmail.com",
            "sender_full_name": "Vaibhav Sagar (he) (F1'16)",
            "sender_id": 100041,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "tooling",
            "submessages": [],
            "timestamp": 1531401129,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/649c2682ffc71d16cddbbbcb3595bc45?d=identicon&version=1",
            "client": "ZulipMobile",
            "content": "<p>Cool! Thanks <span class=\"user-mention\" data-user-id=\"100041\">@Vaibhav Sagar (F1'16)</span> . I'll keep that as a good backup if I can't get the org mode version to work today.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 129535468,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "me@nicksanford.io",
            "sender_full_name": "Nick Sanford (he) (S2'18)",
            "sender_id": 120479,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "tooling",
            "submessages": [],
            "timestamp": 1531401902,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/649c2682ffc71d16cddbbbcb3595bc45?d=identicon&version=1",
            "client": "ZulipElectron",
            "content": "<p>Hey, we are going to be in hopper today :)</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 129540883,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "me@nicksanford.io",
            "sender_full_name": "Nick Sanford (he) (S2'18)",
            "sender_id": 120479,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "study group",
            "submessages": [],
            "timestamp": 1531407791,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/649c2682ffc71d16cddbbbcb3595bc45?d=identicon&version=1",
            "client": "ZulipElectron",
            "content": "<p><a href=\"https://github.com/haskellbook/hello\" target=\"_blank\" title=\"https://github.com/haskellbook/hello\">https://github.com/haskellbook/hello</a></p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 129541919,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "me@nicksanford.io",
            "sender_full_name": "Nick Sanford (he) (S2'18)",
            "sender_id": 120479,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "study group",
            "submessages": [],
            "timestamp": 1531408735,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/d2d1f3e361a479849026fe298e091c50e1a4b20a?x=x&version=5",
            "client": "website",
            "content": "<p>John Hughes also talked about it on Computerphile :) <a href=\"https://www.youtube.com/watch?v=LnX3B9oaKzw\" target=\"_blank\" title=\"https://www.youtube.com/watch?v=LnX3B9oaKzw\">https://www.youtube.com/watch?v=LnX3B9oaKzw</a></p>\n<div class=\"youtube-video message_inline_image\"><a data-id=\"LnX3B9oaKzw\" href=\"https://www.youtube.com/watch?v=LnX3B9oaKzw\" target=\"_blank\" title=\"https://www.youtube.com/watch?v=LnX3B9oaKzw\"><img src=\"https://i.ytimg.com/vi/LnX3B9oaKzw/default.jpg\"></a></div>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 129553940,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "rc@alicja.dev",
            "sender_full_name": "Alicja Karolina Raszkowska (she/they) (W2'18)",
            "sender_id": 100049,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "it was almost named curry",
            "submessages": [],
            "timestamp": 1531420377,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4d074af6cc341ef51b25bb2f738cdb11?d=identicon&version=1",
            "client": "website",
            "content": "<p>as it turns out, some other people went ahead and made one anyway: <a href=\"http://www-ps.informatik.uni-kiel.de/currywiki/\" target=\"_blank\" title=\"http://www-ps.informatik.uni-kiel.de/currywiki/\">http://www-ps.informatik.uni-kiel.de/currywiki/</a></p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 129645612,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f35b",
                    "emoji_name": "curry",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "ruoyi.lin@gmail.com",
                        "full_name": "Caroline Lin (S1'18)",
                        "id": 116367
                    },
                    "user_id": 116367
                }
            ],
            "recipient_id": 22667,
            "sender_email": "vaibhavsagar@gmail.com",
            "sender_full_name": "Vaibhav Sagar (he) (F1'16)",
            "sender_id": 100041,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "it was almost named curry",
            "submessages": [],
            "timestamp": 1531541112,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/e622b23d56ce1dbfd935c38e071636c4a40935e8?x=x&version=2",
            "client": "website",
            "content": "<p>Does anyone know how to set up a <em>complete</em> Hoogle in Emacs? In particular, I want to be able to display Hoogle source links from within Emacs.</p>\n<p>This functionality is important enough to me that I'm willing to switch editors to get it.</p>\n<p>Currently, I'm using Stack with <a href=\"https://github.com/commercialhaskell/intero\" target=\"_blank\" title=\"https://github.com/commercialhaskell/intero\">intero</a>. I'm able to make Hoogle queries from Emacs (against a local Hoogle database\u2014I've forgotten how I did that), and get a (truncated) list of suggestions in a new buffer. But that's pretty much it.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 129677538,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "eha@posteo.de",
            "sender_full_name": "Eugene Ha (he) (S1'18)",
            "sender_id": 116366,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Hoogle in Emacs or other editor",
            "submessages": [],
            "timestamp": 1531605505,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/649c2682ffc71d16cddbbbcb3595bc45?d=identicon&version=1",
            "client": "ZulipMobile",
            "content": "<p>I don't quite have the setup you are describing but I am able to get a web browser to open for my locally hosted hoogle server from spacemacs. I would be happy to show how I have done that on Monday if that interests you. :)</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 129677604,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "me@nicksanford.io",
            "sender_full_name": "Nick Sanford (he) (S2'18)",
            "sender_id": 120479,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Hoogle in Emacs or other editor",
            "submessages": [],
            "timestamp": 1531605622,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/e622b23d56ce1dbfd935c38e071636c4a40935e8?x=x&version=2",
            "client": "website",
            "content": "<p>Thanks! That's certainly better than what I currently have. Would love to see how it's done.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 129680354,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "eha@posteo.de",
            "sender_full_name": "Eugene Ha (he) (S1'18)",
            "sender_id": 116366,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Hoogle in Emacs or other editor",
            "submessages": [],
            "timestamp": 1531612008,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/040d3d35c8e8e39ac8d7cac865c1c6e7?d=identicon&version=1",
            "client": "website",
            "content": "<p>Last Tuesday I briefly had Haskell on my laptop (I ran out of space <span class=\"emoji emoji-1f605\" title=\"sweat smile\">:sweat_smile:</span> ) I had Hoogle working within Emacs via Spacemacs' <code>helm-hoogle</code>integration. I actually preferred <span class=\"user-mention\" data-user-id=\"120479\">@Nick Sanford (S2'18)</span> 's setup because <code>helm-hoogle</code> only showed the type signature while the web interface also showed the docstring.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 129709218,
            "is_me_message": false,
            "last_edit_timestamp": 1531674457,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "santiago.gepigon@gmail.com",
            "sender_full_name": "Santiago Gepigon III (he) (S2'18)",
            "sender_id": 120074,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Hoogle in Emacs or other editor",
            "submessages": [],
            "timestamp": 1531674223,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/040d3d35c8e8e39ac8d7cac865c1c6e7?d=identicon&version=1",
            "client": "website",
            "content": "<p>I followed the Haskell layer in Spacemacs: <a href=\"https://github.com/syl20bnr/spacemacs/tree/master/layers/%2Blang/haskell#dependencies\" target=\"_blank\" title=\"https://github.com/syl20bnr/spacemacs/tree/master/layers/%2Blang/haskell#dependencies\">https://github.com/syl20bnr/spacemacs/tree/master/layers/%2Blang/haskell#dependencies</a></p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 129709269,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "santiago.gepigon@gmail.com",
            "sender_full_name": "Santiago Gepigon III (he) (S2'18)",
            "sender_id": 120074,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Hoogle in Emacs or other editor",
            "submessages": [],
            "timestamp": 1531674266,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/2451bf67052aa2b66fc7500d315762b4?d=identicon&version=1",
            "client": "website",
            "content": "<p>Hey Haskellers,<br>\n<span class=\"user-mention\" data-user-id=\"120479\">@Nick Sanford (S2'18)</span>  and I have a question: do you ever actually need the State monad? We're having trouble finding examples of State that can't be rewritten using fold or some other strategy. If you could point us to some examples, we'd be very grateful. :)</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 129787376,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "omsragha@gmail.com",
            "sender_full_name": "Omar Agha (he) (S2'18)",
            "sender_id": 120551,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "State Monad?",
            "submessages": [],
            "timestamp": 1531791160,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4d074af6cc341ef51b25bb2f738cdb11?d=identicon&version=1",
            "client": "website",
            "content": "<p><code>State</code> and <code>fold</code> are equivalent: <a href=\"https://mail.haskell.org/pipermail/beginners/2014-August/013993.html\" target=\"_blank\" title=\"https://mail.haskell.org/pipermail/beginners/2014-August/013993.html\">https://mail.haskell.org/pipermail/beginners/2014-August/013993.html</a></p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 129788486,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1104",
                    "emoji_name": "haskell",
                    "reaction_type": "realm_emoji",
                    "user": {
                        "email": "santiago.gepigon@gmail.com",
                        "full_name": "Santiago Gepigon III (he) (S2'18)",
                        "id": 120074
                    },
                    "user_id": 120074
                },
                {
                    "emoji_code": "1f6e0",
                    "emoji_name": "hammer_and_wrench",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "omsragha@gmail.com",
                        "full_name": "Omar Agha (he) (S2'18)",
                        "id": 120551
                    },
                    "user_id": 120551
                },
                {
                    "emoji_code": "1104",
                    "emoji_name": "haskell",
                    "reaction_type": "realm_emoji",
                    "user": {
                        "email": "me@nicksanford.io",
                        "full_name": "Nick Sanford (he) (S2'18)",
                        "id": 120479
                    },
                    "user_id": 120479
                },
                {
                    "emoji_code": "1f642",
                    "emoji_name": "simple_smile",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "alan.m.odonnell@gmail.com",
                        "full_name": "Alan O'Donnell (he) (S1'19)",
                        "id": 813
                    },
                    "user_id": 813
                }
            ],
            "recipient_id": 22667,
            "sender_email": "vaibhavsagar@gmail.com",
            "sender_full_name": "Vaibhav Sagar (he) (F1'16)",
            "sender_id": 100041,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "State Monad?",
            "submessages": [],
            "timestamp": 1531793335,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4d074af6cc341ef51b25bb2f738cdb11?d=identicon&version=1",
            "client": "website",
            "content": "<p>Some things are more obvious to express in terms of <code>State</code> though: <a href=\"https://nikita-volkov.github.io/a-taste-of-state-parsers-are-easy/\" target=\"_blank\" title=\"https://nikita-volkov.github.io/a-taste-of-state-parsers-are-easy/\">https://nikita-volkov.github.io/a-taste-of-state-parsers-are-easy/</a></p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 129788558,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "vaibhavsagar@gmail.com",
            "sender_full_name": "Vaibhav Sagar (he) (F1'16)",
            "sender_id": 100041,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "State Monad?",
            "submessages": [],
            "timestamp": 1531793500,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4d074af6cc341ef51b25bb2f738cdb11?d=identicon&version=1",
            "client": "website",
            "content": "<p>FWIW <code>IO</code> in Haskell is implemented as a kind of <code>State</code> monad, because the <code>State</code> monad enforces an ordering on operations which we need to do IO predictably. A program such as</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"nf\">main</span> <span class=\"ow\">::</span> <span class=\"kt\">IO</span> <span class=\"nb\">()</span>\n<span class=\"nf\">main</span> <span class=\"ow\">=</span> <span class=\"kr\">do</span>\n    <span class=\"n\">putStr</span> <span class=\"s\">&quot;Please enter your name: &quot;</span>\n    <span class=\"n\">name</span> <span class=\"ow\">&lt;-</span> <span class=\"n\">getLine</span>\n    <span class=\"n\">putStrLn</span> <span class=\"p\">(</span><span class=\"s\">&quot;Hello, &quot;</span> <span class=\"o\">++</span> <span class=\"n\">name</span><span class=\"p\">)</span>\n</pre></div>\n\n\n<p>becomes something like</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"nf\">main</span> <span class=\"ow\">::</span> <span class=\"kt\">Baton</span> <span class=\"ow\">-&gt;</span> <span class=\"nb\">()</span>\n<span class=\"nf\">main</span> <span class=\"n\">baton</span> <span class=\"ow\">=</span> <span class=\"kr\">let</span>\n    <span class=\"p\">(</span><span class=\"nb\">()</span><span class=\"p\">,</span> <span class=\"n\">baton&#39;</span><span class=\"p\">)</span> <span class=\"ow\">=</span> <span class=\"n\">putStr</span> <span class=\"s\">&quot;Please enter your name: &quot;</span> <span class=\"n\">baton</span>\n    <span class=\"p\">(</span><span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">baton&#39;&#39;</span><span class=\"p\">)</span> <span class=\"ow\">=</span> <span class=\"n\">getLine</span> <span class=\"n\">baton&#39;</span>\n    <span class=\"p\">(</span><span class=\"n\">r</span><span class=\"p\">,</span> <span class=\"n\">baton&#39;&#39;&#39;</span><span class=\"p\">)</span> <span class=\"ow\">=</span> <span class=\"n\">putStrLn</span> <span class=\"p\">(</span><span class=\"s\">&quot;Hello, &quot;</span> <span class=\"o\">++</span> <span class=\"n\">name</span><span class=\"p\">)</span> <span class=\"n\">baton&#39;&#39;</span>\n    <span class=\"kr\">in</span> <span class=\"n\">r</span>\n</pre></div>\n\n\n<p>where the <code>baton</code> is something that is implicitly passed to the <code>main</code> function and passed to each operation that needs to do IO in sequence.</p>\n<p>There's a paper on this that I found surprisingly readable, \"Lazy Functional State Threads\": <a href=\"https://www.microsoft.com/en-us/research/wp-content/uploads/1994/06/lazy-functional-state-threads.pdf\" target=\"_blank\" title=\"https://www.microsoft.com/en-us/research/wp-content/uploads/1994/06/lazy-functional-state-threads.pdf\">https://www.microsoft.com/en-us/research/wp-content/uploads/1994/06/lazy-functional-state-threads.pdf</a> which still forms the basis of <code>IO</code> in Haskell today.</p>\n<p>This can be rewritten in terms of <code>State</code>:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"nf\">main</span> <span class=\"ow\">::</span> <span class=\"kt\">State</span> <span class=\"kt\">Baton</span> <span class=\"nb\">()</span>\n<span class=\"nf\">main&#39;</span> <span class=\"ow\">=</span> <span class=\"kr\">do</span>\n    <span class=\"n\">state</span> <span class=\"o\">$</span> <span class=\"n\">putStr</span> <span class=\"s\">&quot;Please enter your name: &quot;</span>\n    <span class=\"n\">name</span> <span class=\"ow\">&lt;-</span> <span class=\"n\">state</span> <span class=\"o\">$</span> <span class=\"n\">getLine</span>\n    <span class=\"n\">state</span> <span class=\"o\">$</span> <span class=\"n\">putStrLn</span> <span class=\"p\">(</span><span class=\"s\">&quot;Hello, &quot;</span> <span class=\"o\">++</span> <span class=\"n\">name</span><span class=\"p\">)</span>\n\n<span class=\"nf\">main</span> <span class=\"ow\">::</span> <span class=\"kt\">Baton</span> <span class=\"ow\">-&gt;</span> <span class=\"nb\">()</span>\n<span class=\"nf\">main</span> <span class=\"n\">baton</span> <span class=\"ow\">=</span> <span class=\"n\">evalState</span> <span class=\"n\">main&#39;</span> <span class=\"n\">baton</span>\n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 129790797,
            "is_me_message": false,
            "last_edit_timestamp": 1531798275,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "vaibhavsagar@gmail.com",
            "sender_full_name": "Vaibhav Sagar (he) (F1'16)",
            "sender_id": 100041,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "State Monad?",
            "submessages": [],
            "timestamp": 1531797471,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/649c2682ffc71d16cddbbbcb3595bc45?d=identicon&version=1",
            "client": "ZulipElectron",
            "content": "<p>Thanks for the amazing response <span class=\"user-mention\" data-user-id=\"100041\">@Vaibhav Sagar (F1'16)</span> !  We had some intuition that they were the same but figured we would raise the question.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 129791696,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "me@nicksanford.io",
            "sender_full_name": "Nick Sanford (he) (S2'18)",
            "sender_id": 120479,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "State Monad?",
            "submessages": [],
            "timestamp": 1531798930,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4d074af6cc341ef51b25bb2f738cdb11?d=identicon&version=1",
            "client": "website",
            "content": "<p>It's a good question! Another thing that you gain from using <code>State</code> is compositionality. One definition of parsers in Haskell is</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kr\">newtype</span> <span class=\"kt\">Parser</span> <span class=\"n\">a</span> <span class=\"ow\">=</span> <span class=\"kt\">Parser</span> <span class=\"p\">{</span> <span class=\"n\">runParser</span> <span class=\"ow\">::</span> <span class=\"kt\">String</span> <span class=\"ow\">-&gt;</span> <span class=\"p\">[(</span><span class=\"n\">a</span><span class=\"p\">,</span><span class=\"kt\">String</span><span class=\"p\">)]</span> <span class=\"p\">}</span>\n</pre></div>\n\n\n<p>but this definition is also equivalent to</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kr\">newtype</span> <span class=\"kt\">Parser</span> <span class=\"n\">a</span> <span class=\"ow\">=</span> <span class=\"kt\">Parser</span> <span class=\"p\">{</span> <span class=\"n\">runParser</span> <span class=\"ow\">::</span> <span class=\"kt\">StateT</span> <span class=\"kt\">String</span> <span class=\"kt\">[]</span> <span class=\"n\">a</span> <span class=\"p\">}</span>\n</pre></div>\n\n\n<p>and if you use this one a lot of useful functions and instances can be derived for you automatically.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 129791886,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f642",
                    "emoji_name": "simple_smile",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "alan.m.odonnell@gmail.com",
                        "full_name": "Alan O'Donnell (he) (S1'19)",
                        "id": 813
                    },
                    "user_id": 813
                }
            ],
            "recipient_id": 22667,
            "sender_email": "vaibhavsagar@gmail.com",
            "sender_full_name": "Vaibhav Sagar (he) (F1'16)",
            "sender_id": 100041,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "State Monad?",
            "submessages": [],
            "timestamp": 1531799290,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/649c2682ffc71d16cddbbbcb3595bc45?d=identicon&version=1",
            "client": "ZulipElectron",
            "content": "<p>For my batch  I was planning on implementing a bittorrent client  in haskell after discussing with some fellow recursers who had also worked on haskell during their batch. However a friend of mine suggested a really interesting project idea which I am currently exploring as doing instead:  adding an option to nix to be able to install packages via the bittorrent network (ideally from the DHT). This seems like a really interesting idea given that both bittorrent and nix both use checksums to verify the identity of the downloaded content so that one can talk about exactly WHAT to install and think less about WHERE to install it from (as that is taken care of by the bittorrent protocol). </p>\n<p>I am really excited to start working on it (once I get through a bit more of the haskell book) but I am wondering if any recursers have any experience contributing to nix  (specifically the package manager, not the OS) and  / or developing bittorrent clients might be able to recommend a good place to start.  I'm not sure if this would require rolling a bittorrent client in haskell to do so or could be achieved using an existing implementation.  If so, does anyone have any recommendations / thoughts?</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 129792441,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "me@nicksanford.io",
            "sender_full_name": "Nick Sanford (he) (S2'18)",
            "sender_id": 120479,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "nix + bittorrent",
            "submessages": [],
            "timestamp": 1531800263,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/649c2682ffc71d16cddbbbcb3595bc45?d=identicon&version=1",
            "client": "ZulipElectron",
            "content": "<p>Very cool! Today working with <span class=\"user-mention\" data-user-id=\"120551\">@Omar Agha (S2'18)</span> on the  chem parser with parsec was my first introduction to monad transformers, and while I can't say I have a good intuition / understanding of them yet, it was encouraging to see how much functionality one was able to get from just defining type constraints and letting the library derive the implementation for you. Very much looking forward to learning more.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 129792638,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "me@nicksanford.io",
            "sender_full_name": "Nick Sanford (he) (S2'18)",
            "sender_id": 120479,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "State Monad?",
            "submessages": [],
            "timestamp": 1531800601,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4d074af6cc341ef51b25bb2f738cdb11?d=identicon&version=1",
            "client": "website",
            "content": "<p>This is a really cool idea! Nix is written in C++ and Perl, and I see that there is a C++ bittorrent library at <a href=\"https://www.libtorrent.org/\" target=\"_blank\" title=\"https://www.libtorrent.org/\">https://www.libtorrent.org/</a></p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 129793017,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "vaibhavsagar@gmail.com",
            "sender_full_name": "Vaibhav Sagar (he) (F1'16)",
            "sender_id": 100041,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "nix + bittorrent",
            "submessages": [],
            "timestamp": 1531801231,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4d074af6cc341ef51b25bb2f738cdb11?d=identicon&version=1",
            "client": "website",
            "content": "<p>Nix 2.0 also supports plugins (although I can't find where they're documented right now), and there is a collection of them here <a href=\"https://github.com/shlevy/nix-plugins\" target=\"_blank\" title=\"https://github.com/shlevy/nix-plugins\">https://github.com/shlevy/nix-plugins</a></p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 129793039,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "vaibhavsagar@gmail.com",
            "sender_full_name": "Vaibhav Sagar (he) (F1'16)",
            "sender_id": 100041,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "nix + bittorrent",
            "submessages": [],
            "timestamp": 1531801318,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4d074af6cc341ef51b25bb2f738cdb11?d=identicon&version=1",
            "client": "website",
            "content": "<p>I think it might be possible to implement this without having to make changes directly to the Nix source code if the plugin API provides access to this functionality</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 129793137,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "vaibhavsagar@gmail.com",
            "sender_full_name": "Vaibhav Sagar (he) (F1'16)",
            "sender_id": 100041,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "nix + bittorrent",
            "submessages": [],
            "timestamp": 1531801461,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/649c2682ffc71d16cddbbbcb3595bc45?d=identicon&version=1",
            "client": "ZulipElectron",
            "content": "<p>Very cool! I will take a look at plugins then, that seems like a good first place to start. Thank you very much <span class=\"user-mention\" data-user-id=\"100041\">@Vaibhav Sagar (F1'16)</span> !</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 129793150,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "me@nicksanford.io",
            "sender_full_name": "Nick Sanford (he) (S2'18)",
            "sender_id": 120479,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "nix + bittorrent",
            "submessages": [],
            "timestamp": 1531801529,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/649c2682ffc71d16cddbbbcb3595bc45?d=identicon&version=1",
            "client": "ZulipElectron",
            "content": "<p>Hey! We are going to get started early with the haskell study group. We are meeting in hopper. Come join if you are at all interested in the state monad.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 129818012,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "me@nicksanford.io",
            "sender_full_name": "Nick Sanford (he) (S2'18)",
            "sender_id": 120479,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "study group",
            "submessages": [],
            "timestamp": 1531840292,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/72ee26065724239b61be271722b682dd?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-id=\"120479\">@Nick Sanford (S2'18)</span>  I've decided to write a Bittorrent client in Python + one of { Rust, Clojure, Elixir, Haskell } to explore different approaches to concurrency, so I'd love to have a chat if you decide to write a client.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 129819759,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "nick@vividx.co.uk",
            "sender_full_name": "Nick Collins (S2'18)",
            "sender_id": 843,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "nix + bittorrent",
            "submessages": [],
            "timestamp": 1531842514,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/e27ba784e666a1367cca797c2e7a2dca?d=identicon&version=1",
            "client": "website",
            "content": "<p>I've updated the event so it's now Tuesdays and Thursdays from 12-1pm \u2013\u00a0you'll need to RSVP again. Feel free to change it if that's not ok</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 129820913,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "henry@henrystanley.com",
            "sender_full_name": "Henry Stanley (S1'18)",
            "sender_id": 116362,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "study group",
            "submessages": [],
            "timestamp": 1531844014,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/649c2682ffc71d16cddbbbcb3595bc45?d=identicon&version=1",
            "client": "ZulipElectron",
            "content": "<p><span class=\"user-mention\" data-user-id=\"843\">@Nick Collins  (S2'18)</span> Lets do it!  I have some projects (some of which are in python) which we can go through together to learn more about the bittorrent protocol.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 129822704,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "me@nicksanford.io",
            "sender_full_name": "Nick Sanford (he) (S2'18)",
            "sender_id": 120479,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "nix + bittorrent",
            "submessages": [],
            "timestamp": 1531846581,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/72ee26065724239b61be271722b682dd?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-id=\"120479\">@Nick Sanford (S2'18)</span> Cool!</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 129829158,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "nick@vividx.co.uk",
            "sender_full_name": "Nick Collins (S2'18)",
            "sender_id": 843,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "nix + bittorrent",
            "submessages": [],
            "timestamp": 1531854228,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4d074af6cc341ef51b25bb2f738cdb11?d=identicon&version=1",
            "client": "website",
            "content": "<p>I'm trying to solve <a href=\"#narrow/stream/19044-python/subject/Multithreading/near/129916227\" title=\"#narrow/stream/19044-python/subject/Multithreading/near/129916227\">this problem</a> in Haskell. I have a working (essentially single-threaded) solution <a href=\"https://github.com/vaibhavsagar/experiments/blob/e5e59febdbd63d6acc2f195a09a1c679a7209b72/concurrent-merge/Main.hs\" target=\"_blank\" title=\"https://github.com/vaibhavsagar/experiments/blob/e5e59febdbd63d6acc2f195a09a1c679a7209b72/concurrent-merge/Main.hs\">here</a> but my attempt to speed it up by working from both the front and the back is failing and I suspect a deadlock. Here it is with the broken bits commented out:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"o\">#!</span> <span class=\"o\">/</span><span class=\"n\">usr</span><span class=\"o\">/</span><span class=\"n\">bin</span><span class=\"o\">/</span><span class=\"n\">env</span> <span class=\"n\">nix</span><span class=\"o\">-</span><span class=\"n\">shell</span>\n<span class=\"o\">#!</span> <span class=\"n\">nix</span><span class=\"o\">-</span><span class=\"n\">shell</span> <span class=\"o\">-</span><span class=\"n\">i</span> <span class=\"n\">runhaskell</span>\n<span class=\"o\">#!</span> <span class=\"n\">nix</span><span class=\"o\">-</span><span class=\"n\">shell</span> <span class=\"o\">-</span><span class=\"n\">p</span> <span class=\"s\">&quot;haskellPackages.ghcWithPackages (p: [ p.base p.containers ])&quot;</span>\n\n<span class=\"kr\">module</span> <span class=\"nn\">Main</span> <span class=\"kr\">where</span>\n\n<span class=\"kr\">import</span> <span class=\"nn\">Control.Concurrent.MVar</span>\n<span class=\"kr\">import</span> <span class=\"nn\">Control.Concurrent</span>      <span class=\"p\">(</span><span class=\"nf\">forkIO</span><span class=\"p\">)</span>\n<span class=\"kr\">import</span> <span class=\"nn\">Data.Maybe</span>              <span class=\"p\">(</span><span class=\"nf\">isJust</span><span class=\"p\">,</span> <span class=\"nf\">fromJust</span><span class=\"p\">)</span>\n<span class=\"kr\">import</span> <span class=\"nn\">Data.List</span>               <span class=\"p\">(</span><span class=\"nf\">minimumBy</span><span class=\"p\">,</span> <span class=\"nf\">maximumBy</span><span class=\"p\">)</span>\n<span class=\"kr\">import</span> <span class=\"nn\">Data.Ord</span>                <span class=\"p\">(</span><span class=\"kt\">Ordering</span><span class=\"p\">,</span> <span class=\"nf\">comparing</span><span class=\"p\">)</span>\n<span class=\"kr\">import</span> <span class=\"k\">qualified</span> <span class=\"nn\">Data.Sequence</span> <span class=\"k\">as</span> <span class=\"n\">Seq</span>\n\n<span class=\"nf\">input1</span> <span class=\"ow\">=</span> <span class=\"p\">[</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">5</span> <span class=\"p\">]</span>\n<span class=\"nf\">input2</span> <span class=\"ow\">=</span> <span class=\"p\">[</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">4</span> <span class=\"p\">]</span>\n\n<span class=\"nf\">frontWorker</span> <span class=\"ow\">::</span> <span class=\"kt\">MVar</span> <span class=\"p\">(</span><span class=\"kt\">Seq</span><span class=\"o\">.</span><span class=\"kt\">Seq</span> <span class=\"kt\">Int</span><span class=\"p\">)</span> <span class=\"ow\">-&gt;</span> <span class=\"kt\">MVar</span> <span class=\"p\">(</span><span class=\"kt\">Maybe</span> <span class=\"kt\">Int</span><span class=\"p\">)</span> <span class=\"ow\">-&gt;</span> <span class=\"kt\">IO</span> <span class=\"nb\">()</span>\n<span class=\"nf\">frontWorker</span> <span class=\"n\">queueVar</span> <span class=\"n\">slot</span> <span class=\"ow\">=</span> <span class=\"kr\">do</span>\n    <span class=\"n\">queue</span> <span class=\"ow\">&lt;-</span> <span class=\"n\">takeMVar</span> <span class=\"n\">queueVar</span>\n    <span class=\"kr\">case</span> <span class=\"n\">queue</span> <span class=\"kr\">of</span>\n        <span class=\"kt\">Seq</span><span class=\"o\">.</span><span class=\"kt\">Empty</span>   <span class=\"ow\">-&gt;</span> <span class=\"kr\">do</span>\n            <span class=\"n\">putMVar</span> <span class=\"n\">slot</span> <span class=\"kt\">Nothing</span>\n            <span class=\"n\">putMVar</span> <span class=\"n\">queueVar</span> <span class=\"kt\">Seq</span><span class=\"o\">.</span><span class=\"kt\">Empty</span>\n        <span class=\"n\">h</span> <span class=\"kt\">Seq</span><span class=\"o\">.:&lt;|</span> <span class=\"n\">t</span> <span class=\"ow\">-&gt;</span> <span class=\"kr\">do</span>\n            <span class=\"n\">putMVar</span> <span class=\"n\">slot</span> <span class=\"p\">(</span><span class=\"kt\">Just</span> <span class=\"n\">h</span><span class=\"p\">)</span>\n            <span class=\"n\">putMVar</span> <span class=\"n\">queueVar</span> <span class=\"n\">t</span>\n            <span class=\"n\">frontWorker</span> <span class=\"n\">queueVar</span> <span class=\"n\">slot</span>\n\n<span class=\"nf\">backWorker</span> <span class=\"ow\">::</span> <span class=\"kt\">MVar</span> <span class=\"p\">(</span><span class=\"kt\">Seq</span><span class=\"o\">.</span><span class=\"kt\">Seq</span> <span class=\"kt\">Int</span><span class=\"p\">)</span> <span class=\"ow\">-&gt;</span> <span class=\"kt\">MVar</span> <span class=\"p\">(</span><span class=\"kt\">Maybe</span> <span class=\"kt\">Int</span><span class=\"p\">)</span> <span class=\"ow\">-&gt;</span> <span class=\"kt\">IO</span> <span class=\"nb\">()</span>\n<span class=\"nf\">backWorker</span> <span class=\"n\">queueVar</span> <span class=\"n\">slot</span> <span class=\"ow\">=</span> <span class=\"kr\">do</span>\n    <span class=\"n\">queue</span> <span class=\"ow\">&lt;-</span> <span class=\"n\">takeMVar</span> <span class=\"n\">queueVar</span>\n    <span class=\"kr\">case</span> <span class=\"n\">queue</span> <span class=\"kr\">of</span>\n        <span class=\"kt\">Seq</span><span class=\"o\">.</span><span class=\"kt\">Empty</span>   <span class=\"ow\">-&gt;</span> <span class=\"kr\">do</span>\n            <span class=\"n\">putMVar</span> <span class=\"n\">slot</span> <span class=\"kt\">Nothing</span>\n            <span class=\"n\">putMVar</span> <span class=\"n\">queueVar</span> <span class=\"kt\">Seq</span><span class=\"o\">.</span><span class=\"kt\">Empty</span>\n        <span class=\"n\">i</span> <span class=\"kt\">Seq</span><span class=\"o\">.:|&gt;</span> <span class=\"n\">l</span> <span class=\"ow\">-&gt;</span> <span class=\"kr\">do</span>\n            <span class=\"n\">putMVar</span> <span class=\"n\">slot</span> <span class=\"p\">(</span><span class=\"kt\">Just</span> <span class=\"n\">l</span><span class=\"p\">)</span>\n            <span class=\"n\">putMVar</span> <span class=\"n\">queueVar</span> <span class=\"n\">i</span>\n            <span class=\"n\">backWorker</span> <span class=\"n\">queueVar</span> <span class=\"n\">slot</span>\n\n<span class=\"kr\">type</span> <span class=\"kt\">Pair</span> <span class=\"ow\">=</span> <span class=\"p\">(</span><span class=\"kt\">Int</span><span class=\"p\">,</span> <span class=\"kt\">Maybe</span> <span class=\"kt\">Int</span><span class=\"p\">)</span>\n\n<span class=\"nf\">merge</span>\n   <span class=\"ow\">::</span> <span class=\"p\">((</span><span class=\"kt\">Pair</span> <span class=\"ow\">-&gt;</span> <span class=\"kt\">Pair</span> <span class=\"ow\">-&gt;</span> <span class=\"kt\">Ordering</span><span class=\"p\">)</span>\n   <span class=\"ow\">-&gt;</span> <span class=\"p\">[</span><span class=\"kt\">Pair</span><span class=\"p\">]</span> <span class=\"ow\">-&gt;</span> <span class=\"kt\">Pair</span><span class=\"p\">)</span>\n   <span class=\"ow\">-&gt;</span> <span class=\"p\">[</span><span class=\"kt\">MVar</span> <span class=\"p\">(</span><span class=\"kt\">Maybe</span> <span class=\"kt\">Int</span><span class=\"p\">)]</span>\n   <span class=\"ow\">-&gt;</span> <span class=\"p\">[</span><span class=\"kt\">Int</span><span class=\"p\">]</span>\n   <span class=\"ow\">-&gt;</span> <span class=\"kt\">IO</span> <span class=\"p\">[</span><span class=\"kt\">Int</span><span class=\"p\">]</span>\n<span class=\"nf\">merge</span> <span class=\"n\">cmp</span> <span class=\"n\">slots</span> <span class=\"n\">output</span> <span class=\"ow\">=</span> <span class=\"n\">traverse</span> <span class=\"n\">readMVar</span> <span class=\"n\">slots</span> <span class=\"o\">&gt;&gt;=</span> <span class=\"nf\">\\</span><span class=\"n\">values</span> <span class=\"ow\">-&gt;</span>\n    <span class=\"kr\">case</span> <span class=\"n\">filter</span> <span class=\"p\">(</span><span class=\"n\">isJust</span> <span class=\"o\">.</span> <span class=\"n\">snd</span><span class=\"p\">)</span> <span class=\"o\">$</span> <span class=\"n\">zip</span> <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"o\">..</span><span class=\"p\">]</span> <span class=\"n\">values</span> <span class=\"kr\">of</span>\n        <span class=\"kt\">[]</span> <span class=\"ow\">-&gt;</span> <span class=\"n\">return</span> <span class=\"n\">output</span>\n        <span class=\"n\">ls</span> <span class=\"ow\">-&gt;</span> <span class=\"kr\">let</span>\n            <span class=\"p\">(</span><span class=\"n\">ix</span><span class=\"p\">,</span> <span class=\"kt\">Just</span> <span class=\"n\">el</span><span class=\"p\">)</span> <span class=\"ow\">=</span> <span class=\"n\">cmp</span> <span class=\"p\">(</span><span class=\"n\">comparing</span> <span class=\"p\">(</span><span class=\"n\">fromJust</span> <span class=\"o\">.</span> <span class=\"n\">snd</span><span class=\"p\">))</span> <span class=\"n\">ls</span>\n            <span class=\"kr\">in</span> <span class=\"n\">takeMVar</span> <span class=\"p\">(</span><span class=\"n\">slots</span> <span class=\"o\">!!</span> <span class=\"n\">ix</span><span class=\"p\">)</span> <span class=\"o\">&gt;&gt;</span> <span class=\"n\">merge</span> <span class=\"n\">cmp</span> <span class=\"n\">slots</span> <span class=\"p\">(</span><span class=\"n\">output</span> <span class=\"o\">++</span> <span class=\"p\">[</span><span class=\"n\">el</span><span class=\"p\">])</span>\n\n<span class=\"nf\">main</span> <span class=\"ow\">::</span> <span class=\"kt\">IO</span> <span class=\"nb\">()</span>\n<span class=\"nf\">main</span> <span class=\"ow\">=</span> <span class=\"kr\">do</span>\n    <span class=\"n\">frontSlots</span> <span class=\"ow\">&lt;-</span> <span class=\"n\">sequenceA</span> <span class=\"o\">$</span> <span class=\"n\">replicate</span> <span class=\"mi\">2</span> <span class=\"n\">newEmptyMVar</span>\n    <span class=\"n\">backSlots</span>  <span class=\"ow\">&lt;-</span> <span class=\"n\">sequenceA</span> <span class=\"o\">$</span> <span class=\"n\">replicate</span> <span class=\"mi\">2</span> <span class=\"n\">newEmptyMVar</span>\n    <span class=\"n\">i1</span> <span class=\"ow\">&lt;-</span> <span class=\"n\">newMVar</span> <span class=\"o\">$</span> <span class=\"kt\">Seq</span><span class=\"o\">.</span><span class=\"n\">fromList</span> <span class=\"n\">input1</span>\n    <span class=\"n\">i2</span> <span class=\"ow\">&lt;-</span> <span class=\"n\">newMVar</span> <span class=\"o\">$</span> <span class=\"kt\">Seq</span><span class=\"o\">.</span><span class=\"n\">fromList</span> <span class=\"n\">input2</span>\n    <span class=\"n\">traverse</span> <span class=\"p\">(</span><span class=\"n\">forkIO</span> <span class=\"o\">.</span> <span class=\"n\">uncurry</span> <span class=\"n\">frontWorker</span><span class=\"p\">)</span> <span class=\"o\">$</span> <span class=\"n\">zip</span> <span class=\"p\">[</span><span class=\"n\">i1</span><span class=\"p\">,</span> <span class=\"n\">i2</span><span class=\"p\">]</span> <span class=\"n\">frontSlots</span>\n    <span class=\"c1\">-- traverse (forkIO . uncurry backWorker)  $ zip [i1, i2] backSlots</span>\n    <span class=\"n\">l1</span> <span class=\"ow\">&lt;-</span> <span class=\"n\">merge</span> <span class=\"n\">minimumBy</span> <span class=\"n\">frontSlots</span> <span class=\"kt\">[]</span>\n    <span class=\"c1\">-- l2 &lt;- merge maximumBy backSlots  []</span>\n    <span class=\"n\">print</span> <span class=\"o\">$</span> <span class=\"n\">l1</span> <span class=\"c1\">-- ++ (reverse l2)</span>\n</pre></div>\n\n\n<p>Is the mistake I'm making obvious to anyone? I'm pretty new to concurrent programming in Haskell so I'm hoping it's something silly.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 129980146,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "vaibhavsagar@gmail.com",
            "sender_full_name": "Vaibhav Sagar (he) (F1'16)",
            "sender_id": 100041,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "concurrently merging sorted lists",
            "submessages": [],
            "timestamp": 1532068465,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4d074af6cc341ef51b25bb2f738cdb11?d=identicon&version=1",
            "client": "website",
            "content": "<p>My approach is essentially:</p>\n<p>1. Create two <code>MVar</code>s to hold the front of each list<br>\n2. Create two <code>MVar</code>s to hold the back of each list<br>\n3. Populate the <code>MVars</code> using <code>frontWorker</code> and <code>backWorker</code><br>\n4. Empty the <code>MVar</code>s that contain the minimum (for the front of the list) and the maximum (for the back of the list) and add them to respective output lists using <code>merge</code><br>\n5. Concatenate the lists at the end.</p>\n<p>But I think there's a deadlock when accessing the input lists I'm using.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 129980317,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "vaibhavsagar@gmail.com",
            "sender_full_name": "Vaibhav Sagar (he) (F1'16)",
            "sender_id": 100041,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "concurrently merging sorted lists",
            "submessages": [],
            "timestamp": 1532068792,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4d074af6cc341ef51b25bb2f738cdb11?d=identicon&version=1",
            "client": "website",
            "content": "<p>I think I got rid of the deadlock by switching the order of the <code>putMVar</code>s in <code>frontWorker</code> and <code>backWorker</code> but now my result is wrong:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"o\">#!</span> <span class=\"o\">/</span><span class=\"n\">usr</span><span class=\"o\">/</span><span class=\"n\">bin</span><span class=\"o\">/</span><span class=\"n\">env</span> <span class=\"n\">nix</span><span class=\"o\">-</span><span class=\"n\">shell</span>\n<span class=\"o\">#!</span> <span class=\"n\">nix</span><span class=\"o\">-</span><span class=\"n\">shell</span> <span class=\"o\">-</span><span class=\"n\">i</span> <span class=\"n\">runhaskell</span>\n<span class=\"o\">#!</span> <span class=\"n\">nix</span><span class=\"o\">-</span><span class=\"n\">shell</span> <span class=\"o\">-</span><span class=\"n\">p</span> <span class=\"s\">&quot;haskellPackages.ghcWithPackages (p: [ p.base p.containers ])&quot;</span>\n\n<span class=\"kr\">module</span> <span class=\"nn\">Main</span> <span class=\"kr\">where</span>\n\n<span class=\"kr\">import</span> <span class=\"nn\">Control.Concurrent.MVar</span>\n<span class=\"kr\">import</span> <span class=\"nn\">Control.Concurrent</span>      <span class=\"p\">(</span><span class=\"nf\">forkIO</span><span class=\"p\">)</span>\n<span class=\"kr\">import</span> <span class=\"nn\">Data.Maybe</span>              <span class=\"p\">(</span><span class=\"nf\">isJust</span><span class=\"p\">,</span> <span class=\"nf\">fromJust</span><span class=\"p\">)</span>\n<span class=\"kr\">import</span> <span class=\"nn\">Data.List</span>               <span class=\"p\">(</span><span class=\"nf\">minimumBy</span><span class=\"p\">,</span> <span class=\"nf\">maximumBy</span><span class=\"p\">)</span>\n<span class=\"kr\">import</span> <span class=\"nn\">Data.Ord</span>                <span class=\"p\">(</span><span class=\"kt\">Ordering</span><span class=\"p\">,</span> <span class=\"nf\">comparing</span><span class=\"p\">)</span>\n<span class=\"kr\">import</span> <span class=\"k\">qualified</span> <span class=\"nn\">Data.Sequence</span> <span class=\"k\">as</span> <span class=\"n\">Seq</span>\n\n<span class=\"nf\">input1</span> <span class=\"ow\">=</span> <span class=\"p\">[</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">5</span> <span class=\"p\">]</span>\n<span class=\"nf\">input2</span> <span class=\"ow\">=</span> <span class=\"p\">[</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">4</span> <span class=\"p\">]</span>\n\n<span class=\"nf\">frontWorker</span> <span class=\"ow\">::</span> <span class=\"kt\">MVar</span> <span class=\"p\">(</span><span class=\"kt\">Seq</span><span class=\"o\">.</span><span class=\"kt\">Seq</span> <span class=\"kt\">Int</span><span class=\"p\">)</span> <span class=\"ow\">-&gt;</span> <span class=\"kt\">MVar</span> <span class=\"p\">(</span><span class=\"kt\">Maybe</span> <span class=\"kt\">Int</span><span class=\"p\">)</span> <span class=\"ow\">-&gt;</span> <span class=\"kt\">IO</span> <span class=\"nb\">()</span>\n<span class=\"nf\">frontWorker</span> <span class=\"n\">queueVar</span> <span class=\"n\">slot</span> <span class=\"ow\">=</span> <span class=\"kr\">do</span>\n    <span class=\"n\">queue</span> <span class=\"ow\">&lt;-</span> <span class=\"n\">takeMVar</span> <span class=\"n\">queueVar</span>\n    <span class=\"kr\">case</span> <span class=\"n\">queue</span> <span class=\"kr\">of</span>\n        <span class=\"kt\">Seq</span><span class=\"o\">.</span><span class=\"kt\">Empty</span>   <span class=\"ow\">-&gt;</span> <span class=\"kr\">do</span>\n            <span class=\"n\">putMVar</span> <span class=\"n\">queueVar</span> <span class=\"kt\">Seq</span><span class=\"o\">.</span><span class=\"kt\">Empty</span>\n            <span class=\"n\">putMVar</span> <span class=\"n\">slot</span> <span class=\"kt\">Nothing</span>\n        <span class=\"n\">h</span> <span class=\"kt\">Seq</span><span class=\"o\">.:&lt;|</span> <span class=\"n\">t</span> <span class=\"ow\">-&gt;</span> <span class=\"kr\">do</span>\n            <span class=\"n\">putMVar</span> <span class=\"n\">queueVar</span> <span class=\"n\">t</span>\n            <span class=\"n\">putMVar</span> <span class=\"n\">slot</span> <span class=\"p\">(</span><span class=\"kt\">Just</span> <span class=\"n\">h</span><span class=\"p\">)</span>\n            <span class=\"n\">frontWorker</span> <span class=\"n\">queueVar</span> <span class=\"n\">slot</span>\n\n<span class=\"nf\">backWorker</span> <span class=\"ow\">::</span> <span class=\"kt\">MVar</span> <span class=\"p\">(</span><span class=\"kt\">Seq</span><span class=\"o\">.</span><span class=\"kt\">Seq</span> <span class=\"kt\">Int</span><span class=\"p\">)</span> <span class=\"ow\">-&gt;</span> <span class=\"kt\">MVar</span> <span class=\"p\">(</span><span class=\"kt\">Maybe</span> <span class=\"kt\">Int</span><span class=\"p\">)</span> <span class=\"ow\">-&gt;</span> <span class=\"kt\">IO</span> <span class=\"nb\">()</span>\n<span class=\"nf\">backWorker</span> <span class=\"n\">queueVar</span> <span class=\"n\">slot</span> <span class=\"ow\">=</span> <span class=\"kr\">do</span>\n    <span class=\"n\">queue</span> <span class=\"ow\">&lt;-</span> <span class=\"n\">takeMVar</span> <span class=\"n\">queueVar</span>\n    <span class=\"kr\">case</span> <span class=\"n\">queue</span> <span class=\"kr\">of</span>\n        <span class=\"kt\">Seq</span><span class=\"o\">.</span><span class=\"kt\">Empty</span>   <span class=\"ow\">-&gt;</span> <span class=\"kr\">do</span>\n            <span class=\"n\">putMVar</span> <span class=\"n\">queueVar</span> <span class=\"kt\">Seq</span><span class=\"o\">.</span><span class=\"kt\">Empty</span>\n            <span class=\"n\">putMVar</span> <span class=\"n\">slot</span> <span class=\"kt\">Nothing</span>\n        <span class=\"n\">i</span> <span class=\"kt\">Seq</span><span class=\"o\">.:|&gt;</span> <span class=\"n\">l</span> <span class=\"ow\">-&gt;</span> <span class=\"kr\">do</span>\n            <span class=\"n\">putMVar</span> <span class=\"n\">queueVar</span> <span class=\"n\">i</span>\n            <span class=\"n\">putMVar</span> <span class=\"n\">slot</span> <span class=\"p\">(</span><span class=\"kt\">Just</span> <span class=\"n\">l</span><span class=\"p\">)</span>\n            <span class=\"n\">backWorker</span> <span class=\"n\">queueVar</span> <span class=\"n\">slot</span>\n\n<span class=\"kr\">type</span> <span class=\"kt\">Pair</span> <span class=\"ow\">=</span> <span class=\"p\">(</span><span class=\"kt\">Int</span><span class=\"p\">,</span> <span class=\"kt\">Maybe</span> <span class=\"kt\">Int</span><span class=\"p\">)</span>\n\n<span class=\"nf\">merge</span>\n   <span class=\"ow\">::</span> <span class=\"p\">((</span><span class=\"kt\">Pair</span> <span class=\"ow\">-&gt;</span> <span class=\"kt\">Pair</span> <span class=\"ow\">-&gt;</span> <span class=\"kt\">Ordering</span><span class=\"p\">)</span>\n   <span class=\"ow\">-&gt;</span> <span class=\"p\">[</span><span class=\"kt\">Pair</span><span class=\"p\">]</span> <span class=\"ow\">-&gt;</span> <span class=\"kt\">Pair</span><span class=\"p\">)</span>\n   <span class=\"ow\">-&gt;</span> <span class=\"p\">[</span><span class=\"kt\">MVar</span> <span class=\"p\">(</span><span class=\"kt\">Maybe</span> <span class=\"kt\">Int</span><span class=\"p\">)]</span>\n   <span class=\"ow\">-&gt;</span> <span class=\"p\">[</span><span class=\"kt\">Int</span><span class=\"p\">]</span>\n   <span class=\"ow\">-&gt;</span> <span class=\"kt\">IO</span> <span class=\"p\">[</span><span class=\"kt\">Int</span><span class=\"p\">]</span>\n<span class=\"nf\">merge</span> <span class=\"n\">cmp</span> <span class=\"n\">slots</span> <span class=\"n\">output</span> <span class=\"ow\">=</span> <span class=\"n\">traverse</span> <span class=\"n\">readMVar</span> <span class=\"n\">slots</span> <span class=\"o\">&gt;&gt;=</span> <span class=\"nf\">\\</span><span class=\"n\">values</span> <span class=\"ow\">-&gt;</span>\n    <span class=\"kr\">case</span> <span class=\"n\">filter</span> <span class=\"p\">(</span><span class=\"n\">isJust</span> <span class=\"o\">.</span> <span class=\"n\">snd</span><span class=\"p\">)</span> <span class=\"o\">$</span> <span class=\"n\">zip</span> <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"o\">..</span><span class=\"p\">]</span> <span class=\"n\">values</span> <span class=\"kr\">of</span>\n        <span class=\"kt\">[]</span> <span class=\"ow\">-&gt;</span> <span class=\"n\">return</span> <span class=\"n\">output</span>\n        <span class=\"n\">ls</span> <span class=\"ow\">-&gt;</span> <span class=\"kr\">let</span>\n            <span class=\"p\">(</span><span class=\"n\">ix</span><span class=\"p\">,</span> <span class=\"kt\">Just</span> <span class=\"n\">el</span><span class=\"p\">)</span> <span class=\"ow\">=</span> <span class=\"n\">cmp</span> <span class=\"p\">(</span><span class=\"n\">comparing</span> <span class=\"p\">(</span><span class=\"n\">fromJust</span> <span class=\"o\">.</span> <span class=\"n\">snd</span><span class=\"p\">))</span> <span class=\"n\">ls</span>\n            <span class=\"kr\">in</span> <span class=\"n\">takeMVar</span> <span class=\"p\">(</span><span class=\"n\">slots</span> <span class=\"o\">!!</span> <span class=\"n\">ix</span><span class=\"p\">)</span> <span class=\"o\">&gt;&gt;</span> <span class=\"n\">merge</span> <span class=\"n\">cmp</span> <span class=\"n\">slots</span> <span class=\"p\">(</span><span class=\"n\">output</span> <span class=\"o\">++</span> <span class=\"p\">[</span><span class=\"n\">el</span><span class=\"p\">])</span>\n\n<span class=\"nf\">main</span> <span class=\"ow\">::</span> <span class=\"kt\">IO</span> <span class=\"nb\">()</span>\n<span class=\"nf\">main</span> <span class=\"ow\">=</span> <span class=\"kr\">do</span>\n    <span class=\"n\">frontSlots</span> <span class=\"ow\">&lt;-</span> <span class=\"n\">sequenceA</span> <span class=\"o\">$</span> <span class=\"n\">replicate</span> <span class=\"mi\">2</span> <span class=\"n\">newEmptyMVar</span>\n    <span class=\"n\">backSlots</span>  <span class=\"ow\">&lt;-</span> <span class=\"n\">sequenceA</span> <span class=\"o\">$</span> <span class=\"n\">replicate</span> <span class=\"mi\">2</span> <span class=\"n\">newEmptyMVar</span>\n    <span class=\"n\">i1</span> <span class=\"ow\">&lt;-</span> <span class=\"n\">newMVar</span> <span class=\"o\">$</span> <span class=\"kt\">Seq</span><span class=\"o\">.</span><span class=\"n\">fromList</span> <span class=\"n\">input1</span>\n    <span class=\"n\">i2</span> <span class=\"ow\">&lt;-</span> <span class=\"n\">newMVar</span> <span class=\"o\">$</span> <span class=\"kt\">Seq</span><span class=\"o\">.</span><span class=\"n\">fromList</span> <span class=\"n\">input2</span>\n    <span class=\"n\">traverse</span> <span class=\"p\">(</span><span class=\"n\">forkIO</span> <span class=\"o\">.</span> <span class=\"n\">uncurry</span> <span class=\"n\">frontWorker</span><span class=\"p\">)</span> <span class=\"o\">$</span> <span class=\"n\">zip</span> <span class=\"p\">[</span><span class=\"n\">i1</span><span class=\"p\">,</span> <span class=\"n\">i2</span><span class=\"p\">]</span> <span class=\"n\">frontSlots</span>\n    <span class=\"n\">traverse</span> <span class=\"p\">(</span><span class=\"n\">forkIO</span> <span class=\"o\">.</span> <span class=\"n\">uncurry</span> <span class=\"n\">backWorker</span><span class=\"p\">)</span>  <span class=\"o\">$</span> <span class=\"n\">zip</span> <span class=\"p\">[</span><span class=\"n\">i1</span><span class=\"p\">,</span> <span class=\"n\">i2</span><span class=\"p\">]</span> <span class=\"n\">backSlots</span>\n    <span class=\"n\">l1</span> <span class=\"ow\">&lt;-</span> <span class=\"n\">merge</span> <span class=\"n\">minimumBy</span> <span class=\"n\">frontSlots</span> <span class=\"kt\">[]</span>\n    <span class=\"n\">l2</span> <span class=\"ow\">&lt;-</span> <span class=\"n\">merge</span> <span class=\"n\">maximumBy</span> <span class=\"n\">backSlots</span>  <span class=\"kt\">[]</span>\n    <span class=\"n\">print</span> <span class=\"o\">$</span> <span class=\"n\">l1</span> <span class=\"o\">++</span> <span class=\"p\">(</span><span class=\"n\">reverse</span> <span class=\"n\">l2</span><span class=\"p\">)</span>\n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 129982047,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "vaibhavsagar@gmail.com",
            "sender_full_name": "Vaibhav Sagar (he) (F1'16)",
            "sender_id": 100041,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "concurrently merging sorted lists",
            "submessages": [],
            "timestamp": 1532071446,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4d074af6cc341ef51b25bb2f738cdb11?d=identicon&version=1",
            "client": "website",
            "content": "<p>I've decided this is working as designed, and that the approach is fundamentally misguided. Thanks for <img alt=\":rubberduck:\" class=\"emoji\" src=\"https://zulip-avatars.s3.amazonaws.com/13/emoji/images/1089.jpg\" title=\"rubberduck\">ing with me <span class=\"emoji emoji-1f603\" title=\"smiley\">:smiley:</span></p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 129985046,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "vaibhavsagar@gmail.com",
            "sender_full_name": "Vaibhav Sagar (he) (F1'16)",
            "sender_id": 100041,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "concurrently merging sorted lists",
            "submessages": [],
            "timestamp": 1532077172,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/e622b23d56ce1dbfd935c38e071636c4a40935e8?x=x&version=2",
            "client": "website",
            "content": "<p>What is the \"canonical\" way to do many compositions of map?</p>\n<p>For example, when I want to promote a function <code>f :: a -&gt; b</code> to one of type <code>[[[a]]] -&gt; [[[b]]]</code>, I find that I am resorting to</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"nf\">map</span> <span class=\"o\">.</span> <span class=\"n\">map</span> <span class=\"o\">.</span> <span class=\"n\">map</span> <span class=\"o\">$</span> <span class=\"n\">f</span>\n</pre></div>\n\n\n<p>which feels clumsy.</p>\n<p>I presume that a cleaner way to do this should also work more generally for functors (i.e., <code>fmap</code>).</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 130107115,
            "is_me_message": false,
            "last_edit_timestamp": 1532344706,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "eha@posteo.de",
            "sender_full_name": "Eugene Ha (he) (S1'18)",
            "sender_id": 116366,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Many compositions of map",
            "submessages": [],
            "timestamp": 1532280437,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/649c2682ffc71d16cddbbbcb3595bc45?d=identicon&version=1",
            "client": "ZulipElectron",
            "content": "<p>Not sure about a \"canonical\"  way, but just replaing map with fmap will work on all functors</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"nf\">goDeep</span> <span class=\"ow\">::</span> <span class=\"p\">(</span><span class=\"kt\">Functor</span> <span class=\"n\">f1</span><span class=\"p\">,</span> <span class=\"kt\">Functor</span> <span class=\"n\">f2</span><span class=\"p\">,</span> <span class=\"kt\">Functor</span> <span class=\"n\">f3</span><span class=\"p\">)</span> <span class=\"ow\">=&gt;</span> <span class=\"p\">(</span><span class=\"n\">a</span> <span class=\"ow\">-&gt;</span> <span class=\"n\">b</span><span class=\"p\">)</span> <span class=\"ow\">-&gt;</span> <span class=\"n\">f1</span> <span class=\"p\">(</span><span class=\"n\">f2</span> <span class=\"p\">(</span><span class=\"n\">f3</span> <span class=\"n\">a</span><span class=\"p\">))</span> <span class=\"ow\">-&gt;</span> <span class=\"n\">f1</span> <span class=\"p\">(</span><span class=\"n\">f2</span> <span class=\"p\">(</span><span class=\"n\">f3</span> <span class=\"n\">b</span><span class=\"p\">))</span>\n<span class=\"nf\">goDeep</span> <span class=\"ow\">=</span> <span class=\"n\">fmap</span> <span class=\"o\">.</span> <span class=\"n\">fmap</span> <span class=\"o\">.</span> <span class=\"n\">fmap</span>\n\n<span class=\"nf\">xs</span> <span class=\"ow\">=</span> <span class=\"p\">[</span><span class=\"kt\">Just</span> <span class=\"p\">(</span><span class=\"kt\">Right</span> <span class=\"p\">(</span><span class=\"s\">&quot;This  is cool&quot;</span><span class=\"p\">)),</span> <span class=\"kt\">Just</span> <span class=\"p\">(</span><span class=\"kt\">Left</span> <span class=\"s\">&quot;This is left untouched&quot;</span><span class=\"p\">),</span> <span class=\"kt\">Nothing</span><span class=\"p\">]</span>\n\n<span class=\"nf\">goDeep</span> <span class=\"p\">(</span><span class=\"o\">++</span>  <span class=\"s\">&quot; WOO!&quot;</span><span class=\"p\">)</span> <span class=\"n\">xs</span> <span class=\"c1\">-- =&gt; [Just (Right &quot;This  is cool WOO!&quot;),Just (Left &quot;This is left untouched&quot;), Nothing]</span>\n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 130111525,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "me@nicksanford.io",
            "sender_full_name": "Nick Sanford (he) (S2'18)",
            "sender_id": 120479,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Many compositions of map",
            "submessages": [],
            "timestamp": 1532288488,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p><a href=\"http://comonad.com/haskell/Lenses-Folds-and-Traversals-NYC.pdf\" target=\"_blank\" title=\"http://comonad.com/haskell/Lenses-Folds-and-Traversals-NYC.pdf\">The power is in the dot</a>, slide 10+.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 130116189,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Many compositions of map",
            "submessages": [],
            "timestamp": 1532295875,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/e622b23d56ce1dbfd935c38e071636c4a40935e8?x=x&version=2",
            "client": "ZulipMobile",
            "content": "<p><span class=\"user-mention\" data-user-id=\"813\">@Alan O'Donnell</span> Thanks for the reference! I feared this might have something to do with lenses (since the pattern is after all about digging through powers of a functor). :-/</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 130119542,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "eha@posteo.de",
            "sender_full_name": "Eugene Ha (he) (S1'18)",
            "sender_id": 116366,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Many compositions of map",
            "submessages": [],
            "timestamp": 1532303272,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p>Ha, yeah, those slides are fun. Although I guess they don't solve your problem (you still have to dot things together n times as far as I can tell).</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 130119667,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Many compositions of map",
            "submessages": [],
            "timestamp": 1532303489,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/e622b23d56ce1dbfd935c38e071636c4a40935e8?x=x&version=2",
            "client": "ZulipMobile",
            "content": "<p><span class=\"user-mention\" data-user-id=\"120479\">@Nick Sanford (S2'18)</span> thanks for that remark.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 130119771,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "eha@posteo.de",
            "sender_full_name": "Eugene Ha (he) (S1'18)",
            "sender_id": 116366,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Many compositions of map",
            "submessages": [],
            "timestamp": 1532303648,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4d074af6cc341ef51b25bb2f738cdb11?d=identicon&version=1",
            "client": "website",
            "content": "<p>Fun fact: <code>.</code> is <code>fmap</code> for functions, so</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"nf\">goDeep</span> <span class=\"ow\">::</span> <span class=\"p\">(</span><span class=\"kt\">Functor</span> <span class=\"n\">f1</span><span class=\"p\">,</span> <span class=\"kt\">Functor</span> <span class=\"n\">f2</span><span class=\"p\">,</span> <span class=\"kt\">Functor</span> <span class=\"n\">f3</span><span class=\"p\">)</span> <span class=\"ow\">=&gt;</span> <span class=\"p\">(</span><span class=\"n\">a</span> <span class=\"ow\">-&gt;</span> <span class=\"n\">b</span><span class=\"p\">)</span> <span class=\"ow\">-&gt;</span> <span class=\"n\">f1</span> <span class=\"p\">(</span><span class=\"n\">f2</span> <span class=\"p\">(</span><span class=\"n\">f3</span> <span class=\"n\">a</span><span class=\"p\">))</span> <span class=\"ow\">-&gt;</span> <span class=\"n\">f1</span> <span class=\"p\">(</span><span class=\"n\">f2</span> <span class=\"p\">(</span><span class=\"n\">f3</span> <span class=\"n\">b</span><span class=\"p\">))</span>\n<span class=\"nf\">goDeep</span> <span class=\"ow\">=</span> <span class=\"n\">fmap</span> <span class=\"p\">`</span><span class=\"n\">fmap</span><span class=\"p\">`</span> <span class=\"n\">fmap</span> <span class=\"p\">`</span><span class=\"n\">fmap</span><span class=\"p\">`</span> <span class=\"n\">fmap</span>\n\n<span class=\"nf\">xs</span> <span class=\"ow\">=</span> <span class=\"p\">[</span><span class=\"kt\">Just</span> <span class=\"p\">(</span><span class=\"kt\">Right</span> <span class=\"p\">(</span><span class=\"s\">&quot;This  is cool&quot;</span><span class=\"p\">)),</span> <span class=\"kt\">Just</span> <span class=\"p\">(</span><span class=\"kt\">Left</span> <span class=\"s\">&quot;This is left untouched&quot;</span><span class=\"p\">),</span> <span class=\"kt\">Nothing</span><span class=\"p\">]</span>\n\n<span class=\"nf\">goDeep</span> <span class=\"p\">(</span><span class=\"o\">++</span>  <span class=\"s\">&quot; WOO!&quot;</span><span class=\"p\">)</span> <span class=\"n\">xs</span> <span class=\"c1\">-- =&gt; [Just (Right &quot;This  is cool WOO!&quot;),Just (Left &quot;This is left untouched&quot;), Nothing]</span>\n</pre></div>\n\n\n<p>will also work!</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 130122568,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1104",
                    "emoji_name": "haskell",
                    "reaction_type": "realm_emoji",
                    "user": {
                        "email": "me@nicksanford.io",
                        "full_name": "Nick Sanford (he) (S2'18)",
                        "id": 120479
                    },
                    "user_id": 120479
                },
                {
                    "emoji_code": "1f913",
                    "emoji_name": "nerd_face",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "alan.m.odonnell@gmail.com",
                        "full_name": "Alan O'Donnell (he) (S1'19)",
                        "id": 813
                    },
                    "user_id": 813
                },
                {
                    "emoji_code": "1f913",
                    "emoji_name": "nerd_face",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "adampalay@gmail.com",
                        "full_name": "Adam Palay (he) (SP2'18)",
                        "id": 111960
                    },
                    "user_id": 111960
                },
                {
                    "emoji_code": "1f913",
                    "emoji_name": "nerd_face",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "eha@posteo.de",
                        "full_name": "Eugene Ha (he) (S1'18)",
                        "id": 116366
                    },
                    "user_id": 116366
                }
            ],
            "recipient_id": 22667,
            "sender_email": "vaibhavsagar@gmail.com",
            "sender_full_name": "Vaibhav Sagar (he) (F1'16)",
            "sender_id": 100041,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Many compositions of map",
            "submessages": [],
            "timestamp": 1532309848,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4d074af6cc341ef51b25bb2f738cdb11?d=identicon&version=1",
            "client": "website",
            "content": "<p>I used the Haskell <code>req</code> library to access the Zulip API! Here is an example (you need to have an API key at <code>./api-key</code>):</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"o\">#!</span> <span class=\"o\">/</span><span class=\"n\">usr</span><span class=\"o\">/</span><span class=\"n\">bin</span><span class=\"o\">/</span><span class=\"n\">env</span> <span class=\"n\">nix</span><span class=\"o\">-</span><span class=\"n\">shell</span>\n<span class=\"o\">#!</span> <span class=\"n\">nix</span><span class=\"o\">-</span><span class=\"n\">shell</span> <span class=\"o\">-</span><span class=\"n\">i</span> <span class=\"n\">runhaskell</span>\n<span class=\"o\">#!</span> <span class=\"n\">nix</span><span class=\"o\">-</span><span class=\"n\">shell</span> <span class=\"o\">-</span><span class=\"n\">p</span> <span class=\"s\">&quot;haskellPackages.ghcWithPackages (self: with self; [ aeson bytestring data-default-class req ])&quot;</span>\n\n\n<span class=\"cm\">{-# LANGUAGE OverloadedStrings #-}</span>\n<span class=\"cm\">{-# LANGUAGE OverloadedLists #-}</span>\n\n<span class=\"kr\">module</span> <span class=\"nn\">Main</span> <span class=\"kr\">where</span>\n\n<span class=\"kr\">import</span> <span class=\"nn\">Network.HTTP.Req</span>\n<span class=\"kr\">import</span> <span class=\"k\">qualified</span> <span class=\"nn\">Data.ByteString</span> <span class=\"k\">as</span> <span class=\"n\">B</span>\n<span class=\"kr\">import</span> <span class=\"k\">qualified</span> <span class=\"nn\">Data.ByteString.Lazy</span> <span class=\"k\">as</span> <span class=\"n\">BL</span>\n<span class=\"kr\">import</span> <span class=\"nn\">Data.Default.Class</span>\n<span class=\"kr\">import</span> <span class=\"nn\">Data.Aeson</span>\n<span class=\"kr\">import</span> <span class=\"nn\">Data.Aeson.Text</span>\n<span class=\"kr\">import</span> <span class=\"nn\">Data.Monoid</span> <span class=\"p\">((</span><span class=\"o\">&lt;&gt;</span><span class=\"p\">))</span>\n\n<span class=\"nf\">narrow</span> <span class=\"ow\">::</span> <span class=\"kt\">Value</span>\n<span class=\"nf\">narrow</span> <span class=\"ow\">=</span> <span class=\"kt\">Array</span>\n    <span class=\"p\">[</span> <span class=\"n\">object</span> <span class=\"p\">[</span><span class=\"s\">&quot;operator&quot;</span> <span class=\"o\">.=</span> <span class=\"kt\">String</span> <span class=\"s\">&quot;sender&quot;</span><span class=\"p\">,</span> <span class=\"s\">&quot;operand&quot;</span> <span class=\"o\">.=</span> <span class=\"kt\">String</span> <span class=\"s\">&quot;vaibhavsagar@gmail.com&quot;</span><span class=\"p\">]</span>\n    <span class=\"p\">,</span> <span class=\"n\">object</span> <span class=\"p\">[</span><span class=\"s\">&quot;operator&quot;</span> <span class=\"o\">.=</span> <span class=\"kt\">String</span> <span class=\"s\">&quot;stream&quot;</span><span class=\"p\">,</span> <span class=\"s\">&quot;operand&quot;</span> <span class=\"o\">.=</span> <span class=\"kt\">String</span> <span class=\"s\">&quot;music&quot;</span><span class=\"p\">]</span>\n    <span class=\"p\">]</span>\n\n<span class=\"nf\">params</span>\n    <span class=\"ow\">=</span>  <span class=\"s\">&quot;anchor&quot;</span>     <span class=\"o\">=:</span> <span class=\"p\">(</span><span class=\"mi\">0</span>  <span class=\"ow\">::</span> <span class=\"kt\">Int</span><span class=\"p\">)</span>\n    <span class=\"o\">&lt;&gt;</span> <span class=\"s\">&quot;num_before&quot;</span> <span class=\"o\">=:</span> <span class=\"p\">(</span><span class=\"mi\">0</span>  <span class=\"ow\">::</span> <span class=\"kt\">Int</span><span class=\"p\">)</span>\n    <span class=\"o\">&lt;&gt;</span> <span class=\"s\">&quot;num_after&quot;</span>  <span class=\"o\">=:</span> <span class=\"p\">(</span><span class=\"mi\">5</span>  <span class=\"ow\">::</span> <span class=\"kt\">Int</span><span class=\"p\">)</span>\n    <span class=\"o\">&lt;&gt;</span> <span class=\"s\">&quot;narrow&quot;</span>     <span class=\"o\">=:</span> <span class=\"p\">(</span><span class=\"n\">encodeToLazyText</span> <span class=\"n\">narrow</span><span class=\"p\">)</span>\n\n<span class=\"nf\">main</span> <span class=\"ow\">=</span> <span class=\"kr\">do</span>\n    <span class=\"n\">key</span> <span class=\"ow\">&lt;-</span> <span class=\"kt\">B</span><span class=\"o\">.</span><span class=\"n\">init</span> <span class=\"o\">&lt;$&gt;</span> <span class=\"kt\">B</span><span class=\"o\">.</span><span class=\"n\">readFile</span> <span class=\"s\">&quot;./api-key&quot;</span>\n    <span class=\"kr\">let</span> <span class=\"n\">r</span> <span class=\"ow\">=</span> <span class=\"n\">req</span> <span class=\"kt\">GET</span> <span class=\"p\">(</span><span class=\"n\">https</span> <span class=\"s\">&quot;recurse.zulipchat.com&quot;</span> <span class=\"o\">/:</span> <span class=\"s\">&quot;api&quot;</span> <span class=\"o\">/:</span> <span class=\"s\">&quot;v1&quot;</span> <span class=\"o\">/:</span> <span class=\"s\">&quot;messages&quot;</span><span class=\"p\">)</span> <span class=\"kt\">NoReqBody</span> <span class=\"n\">jsonResponse</span> <span class=\"p\">(</span><span class=\"n\">basicAuth</span> <span class=\"s\">&quot;vaibhavsagar@gmail.com&quot;</span> <span class=\"n\">key</span> <span class=\"o\">&lt;&gt;</span> <span class=\"n\">params</span><span class=\"p\">)</span>\n    <span class=\"n\">res</span> <span class=\"ow\">&lt;-</span> <span class=\"n\">responseBody</span> <span class=\"o\">&lt;$&gt;</span> <span class=\"n\">runReq</span> <span class=\"n\">def</span> <span class=\"n\">r</span> <span class=\"ow\">::</span> <span class=\"kt\">IO</span> <span class=\"kt\">Value</span>\n    <span class=\"kt\">BL</span><span class=\"o\">.</span><span class=\"n\">putStr</span> <span class=\"o\">$</span> <span class=\"n\">encode</span> <span class=\"n\">res</span>\n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 130149869,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f389",
                    "emoji_name": "tada",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "joelburget@gmail.com",
                        "full_name": "Joel Burget (SP1'15)",
                        "id": 7624
                    },
                    "user_id": 7624
                },
                {
                    "emoji_code": "1f389",
                    "emoji_name": "tada",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "libby@daydrea.me",
                        "full_name": "Libby Horacek (she) (SP1'15)",
                        "id": 7081
                    },
                    "user_id": 7081
                },
                {
                    "emoji_code": "1f389",
                    "emoji_name": "tada",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "rc@alicja.dev",
                        "full_name": "Alicja Karolina Raszkowska (she/they) (W2'18)",
                        "id": 100049
                    },
                    "user_id": 100049
                }
            ],
            "recipient_id": 22667,
            "sender_email": "vaibhavsagar@gmail.com",
            "sender_full_name": "Vaibhav Sagar (he) (F1'16)",
            "sender_id": 100041,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Zulip API example",
            "submessages": [],
            "timestamp": 1532354398,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4d074af6cc341ef51b25bb2f738cdb11?d=identicon&version=1",
            "client": "website",
            "content": "<p>There are a lot of good examples at <a href=\"https://github.com/zulip/python-zulip-api/tree/master/zulip/zulip/examples\" target=\"_blank\" title=\"https://github.com/zulip/python-zulip-api/tree/master/zulip/zulip/examples\">https://github.com/zulip/python-zulip-api/tree/master/zulip/zulip/examples</a></p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 130149991,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "vaibhavsagar@gmail.com",
            "sender_full_name": "Vaibhav Sagar (he) (F1'16)",
            "sender_id": 100041,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Zulip API example",
            "submessages": [],
            "timestamp": 1532354497,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4d074af6cc341ef51b25bb2f738cdb11?d=identicon&version=1",
            "client": "website",
            "content": "<p>Now I am one step closer to turning all of my posts in <a class=\"stream\" data-stream-id=\"20412\" href=\"/#narrow/stream/20412-music\">#music</a> into the greatest playlist of all time</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 130150146,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "vaibhavsagar@gmail.com",
            "sender_full_name": "Vaibhav Sagar (he) (F1'16)",
            "sender_id": 100041,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Zulip API example",
            "submessages": [],
            "timestamp": 1532354653,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/649c2682ffc71d16cddbbbcb3595bc45?d=identicon&version=1",
            "client": "ZulipElectron",
            "content": "<p>That is so cool! I did not know that</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 130151702,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "me@nicksanford.io",
            "sender_full_name": "Nick Sanford (he) (S2'18)",
            "sender_id": 120479,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Many compositions of map",
            "submessages": [],
            "timestamp": 1532356209,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4d074af6cc341ef51b25bb2f738cdb11?d=identicon&version=1",
            "client": "website",
            "content": "<p>There are instances of <code>Applicative</code> and <code>Monad</code> for functions too <span class=\"emoji emoji-1f642\" title=\"simple smile\">:simple_smile:</span></p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 130153133,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "vaibhavsagar@gmail.com",
            "sender_full_name": "Vaibhav Sagar (he) (F1'16)",
            "sender_id": 100041,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Many compositions of map",
            "submessages": [],
            "timestamp": 1532357687,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/d2d1f3e361a479849026fe298e091c50e1a4b20a?x=x&version=5",
            "client": "website",
            "content": "<p>I don't know if I'm more excited about connecting to the API or being able to actually understand your code</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 130156571,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "rc@alicja.dev",
            "sender_full_name": "Alicja Karolina Raszkowska (she/they) (W2'18)",
            "sender_id": 100049,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Zulip API example",
            "submessages": [],
            "timestamp": 1532361215,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p>Yeah, functions are one of my favorite examples of Functors/Applicatives/Monads etc.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 130164239,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Many compositions of map",
            "submessages": [],
            "timestamp": 1532369303,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/649c2682ffc71d16cddbbbcb3595bc45?d=identicon&version=1",
            "client": "ZulipElectron",
            "content": "<p>Hey! For the next study  group how about we come in with a few topics that we are interested in researching, pick one topic, and researching it together?</p>\n<p>Some topics of interest which have been mentioned are Lens and GHC internals (specifically related to how GHC does optimizations).</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 130601241,
            "is_me_message": false,
            "last_edit_timestamp": 1532980764,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "me@nicksanford.io",
            "sender_full_name": "Nick Sanford (he) (S2'18)",
            "sender_id": 120479,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "study group",
            "submessages": [],
            "timestamp": 1532980699,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/649c2682ffc71d16cddbbbcb3595bc45?d=identicon&version=1",
            "client": "ZulipElectron",
            "content": "<p>Just a reminder that Haskell study group is going to be starting in hopper in about 7 min!</p>\n<p>Got a question about Haskell or functional programming in general (even if it is \"how do I install X and get a development environment up and running\")?   This study group is for you!</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 130651989,
            "is_me_message": false,
            "last_edit_timestamp": 1533052488,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "me@nicksanford.io",
            "sender_full_name": "Nick Sanford (he) (S2'18)",
            "sender_id": 120479,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "study group",
            "submessages": [],
            "timestamp": 1533052419,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/3514240cecd66b31ef3b3a4a7ea235cc?d=identicon&version=1",
            "client": "website",
            "content": "<p>does anyone have suggestions for a good tutorial on making numerical haskell code run fast? we've been trying to use the haskell profiler to figure out slow points in our codebase, and the cost centers generated in the profile by default aren't very helpful, nor does the profiler consistently report our custom-set cost centers.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 130663186,
            "is_me_message": false,
            "last_edit_timestamp": 1533823031,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "katherine.ye@gmail.com",
            "sender_full_name": "Katherine Ye (S'13)",
            "sender_id": 2117,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "benchmarking/profiling haskell code time",
            "submessages": [],
            "timestamp": 1533062465,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/e5845e045f9bcd4c95b82b01366893ed8b219f00?x=x&version=1",
            "client": "website",
            "content": "<p>A friend recently asked me if  there was a way to generate syntax in Haskell.  A simple example of the sort of thing he was asking about is:  He wants something sort of like <code>if (condition) then (something)</code> which should evaluate the condition, and if it's true it yields <code>Just (something)</code> and if false it yields <code>Nothing</code>.  Obviously you can't reuse the keywords <code>if</code> and <code>then</code>.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 130786330,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "mjd@plover.com",
            "sender_full_name": "Mark Dominus (indifferent)",
            "sender_id": 7912,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Fake keywords",
            "submessages": [],
            "timestamp": 1533225205,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/e5845e045f9bcd4c95b82b01366893ed8b219f00?x=x&version=1",
            "client": "website",
            "content": "<p>I said well, it's easy to write  <code>myif c v = if c then Just v else Nothing</code>, but that doesn't get his <code>then</code> in there.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 130786339,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "mjd@plover.com",
            "sender_full_name": "Mark Dominus (indifferent)",
            "sender_id": 7912,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Fake keywords",
            "submessages": [],
            "timestamp": 1533225232,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/e5845e045f9bcd4c95b82b01366893ed8b219f00?x=x&version=1",
            "client": "website",
            "content": "<p>So then I said well, you can write  <code>myif c _ v = if c then Just v else Nothing</code>  and write <code>myif (condition) \"then\" (something)</code> and it will ignore the \"then\".</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 130786394,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "mjd@plover.com",
            "sender_full_name": "Mark Dominus (indifferent)",
            "sender_id": 7912,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Fake keywords",
            "submessages": [],
            "timestamp": 1533225269,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/e5845e045f9bcd4c95b82b01366893ed8b219f00?x=x&version=1",
            "client": "website",
            "content": "<p>But then I had a brainwave, and said you can do this:</p>\n<div class=\"codehilite\"><pre><span></span>data Then = Then\nmyif c Then v = if c then Just v else Nothing\n</pre></div>\n\n\n<p>and now the <code>Then</code> will be type-checked and you will get a reasonably clear error message if you leave it out or misspell it.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 130786425,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "mjd@plover.com",
            "sender_full_name": "Mark Dominus (indifferent)",
            "sender_id": 7912,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Fake keywords",
            "submessages": [],
            "timestamp": 1533225324,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/649c2682ffc71d16cddbbbcb3595bc45?d=identicon&version=1",
            "client": "ZulipElectron",
            "content": "<p>Hey! Everyone! I'm planning on not joining the haskell study group today, as I would like to participate in the game jam.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 130786453,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "me@nicksanford.io",
            "sender_full_name": "Nick Sanford (he) (S2'18)",
            "sender_id": 120479,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "study group",
            "submessages": [],
            "timestamp": 1533225355,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/e5845e045f9bcd4c95b82b01366893ed8b219f00?x=x&version=1",
            "client": "website",
            "content": "<p>And I _think_ I am not the first person to invent this technique and that I have seen it before somewhere.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 130786504,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "mjd@plover.com",
            "sender_full_name": "Mark Dominus (indifferent)",
            "sender_id": 7912,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Fake keywords",
            "submessages": [],
            "timestamp": 1533225377,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/e5845e045f9bcd4c95b82b01366893ed8b219f00?x=x&version=1",
            "client": "website",
            "content": "<p>So my question is, is this technique, of making up a one-element type to use as a pretend keyword, something that is common, well-known, uncommon, rare, or unheard-of?</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 130786520,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "mjd@plover.com",
            "sender_full_name": "Mark Dominus (indifferent)",
            "sender_id": 7912,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Fake keywords",
            "submessages": [],
            "timestamp": 1533225422,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/e5845e045f9bcd4c95b82b01366893ed8b219f00?x=x&version=1",
            "client": "website",
            "content": "<p>If I did this in my Haskell code, would an experienced Haskeller see it and say \u201cwow, that is bizarre\u201d or \u201cOh, he's just doing _that_, sure\u201d.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 130786606,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "mjd@plover.com",
            "sender_full_name": "Mark Dominus (indifferent)",
            "sender_id": 7912,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Fake keywords",
            "submessages": [],
            "timestamp": 1533225500,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/187931dc9ca73b56a4e014e6009c00a1?d=identicon&version=1",
            "client": "website",
            "content": "<p>I knew that sounded familiar, and it's because I read about it on <a href=\"https://pozorvlak.livejournal.com/94558.html\" target=\"_blank\" title=\"https://pozorvlak.livejournal.com/94558.html\">this article</a> which was linked to from an edit to <a href=\"https://blog.plover.com/prog/johnson.html\" target=\"_blank\" title=\"https://blog.plover.com/prog/johnson.html\">this one</a>. :-)</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 130787115,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "me@joeym.org",
            "sender_full_name": "Joey Marianer (he) (m1'18)",
            "sender_id": 105228,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Fake keywords",
            "submessages": [],
            "timestamp": 1533226105,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/f064a05448647a821438855810164407e4609eb9?x=x&version=2",
            "client": "website",
            "content": "<p>I have a lot of Haskell experience (10 years + day job) but have never seen this before</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 130790606,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "joelburget@gmail.com",
            "sender_full_name": "Joel Burget (SP1'15)",
            "sender_id": 7624,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Fake keywords",
            "submessages": [],
            "timestamp": 1533230537,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/e5845e045f9bcd4c95b82b01366893ed8b219f00?x=x&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-id=\"7624\">@Joel Burget (SP1'15)</span> Thanks, that's useful.  I decided the best thing I could do at this point is ask Brent Yorgey.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 130791076,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "mjd@plover.com",
            "sender_full_name": "Mark Dominus (indifferent)",
            "sender_id": 7912,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Fake keywords",
            "submessages": [],
            "timestamp": 1533231241,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/187931dc9ca73b56a4e014e6009c00a1?d=identicon&version=1",
            "client": "website",
            "content": "<p>The other thing it reminds me of is TeX, which... probably isn't speaking in its favor.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 130791308,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "me@joeym.org",
            "sender_full_name": "Joey Marianer (he) (m1'18)",
            "sender_id": 105228,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Fake keywords",
            "submessages": [],
            "timestamp": 1533231503,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4d074af6cc341ef51b25bb2f738cdb11?d=identicon&version=1",
            "client": "ZulipMobile",
            "content": "<p>You can in fact reuse the <code>if</code> keyword with <a href=\"https://ocharles.org.uk/blog/guest-posts/2014-12-06-rebindable-syntax.html\" target=\"_blank\" title=\"https://ocharles.org.uk/blog/guest-posts/2014-12-06-rebindable-syntax.html\"><code>RebindableSyntax</code></a></p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 130808351,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "vaibhavsagar@gmail.com",
            "sender_full_name": "Vaibhav Sagar (he) (F1'16)",
            "sender_id": 100041,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Fake keywords",
            "submessages": [],
            "timestamp": 1533254177,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4d074af6cc341ef51b25bb2f738cdb11?d=identicon&version=1",
            "client": "ZulipMobile",
            "content": "<p>The linked blog post doesn't include this as an example but you can define your own <code>ifThenElse</code> with that language extension enabled</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 130808445,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "vaibhavsagar@gmail.com",
            "sender_full_name": "Vaibhav Sagar (he) (F1'16)",
            "sender_id": 100041,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Fake keywords",
            "submessages": [],
            "timestamp": 1533254316,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/e5845e045f9bcd4c95b82b01366893ed8b219f00?x=x&version=1",
            "client": "website",
            "content": "<p>Thanks.  But this isn't really pertinent to my question.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 130838339,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "mjd@plover.com",
            "sender_full_name": "Mark Dominus (indifferent)",
            "sender_id": 7912,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Fake keywords",
            "submessages": [],
            "timestamp": 1533302287,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4d074af6cc341ef51b25bb2f738cdb11?d=identicon&version=1",
            "client": "website",
            "content": "<p>Fair enough, I thought it might be worth mentioning because you don't need to make up fake keywords when the real ones can be made to suit your purposes.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 130840768,
            "is_me_message": false,
            "last_edit_timestamp": 1533304950,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "vaibhavsagar@gmail.com",
            "sender_full_name": "Vaibhav Sagar (he) (F1'16)",
            "sender_id": 100041,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Fake keywords",
            "submessages": [],
            "timestamp": 1533304944,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/e5845e045f9bcd4c95b82b01366893ed8b219f00?x=x&version=1",
            "client": "website",
            "content": "<p>Brent Yorgey says he has never heard of this.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 130901233,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "mjd@plover.com",
            "sender_full_name": "Mark Dominus (indifferent)",
            "sender_id": 7912,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Fake keywords",
            "submessages": [],
            "timestamp": 1533410832,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/649c2682ffc71d16cddbbbcb3595bc45?d=identicon&version=1",
            "client": "ZulipElectron",
            "content": "<p>Hello Haskell friends!</p>\n<p>I am testing a parser with quickcheck and it found a bug in my recursive parsing function which can cause an infinite loop for some inputs.</p>\n<p>YAY QuickCheck for finding this!</p>\n<p>I think I am pretty close to getting it figured out but  I am wondering if there is any generic approach for having quickcheck be able to detect an infinite loop (or just that it is taking too long to test a given case) and start to do shrinkage on generated test data like any other failure.</p>\n<p>Right now my tests just hang and take up 100% cpu until I kill them manually and I have to do the shrinkage manually.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 131005477,
            "is_me_message": false,
            "last_edit_timestamp": 1533591309,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "me@nicksanford.io",
            "sender_full_name": "Nick Sanford (he) (S2'18)",
            "sender_id": 120479,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "QuickCheck Infinite Loop",
            "submessages": [],
            "timestamp": 1533591247,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/3514240cecd66b31ef3b3a4a7ea235cc?d=identicon&version=1",
            "client": "website",
            "content": "<p>update: we found the performance issue. turns out polymorphism in haskell is Real Slow.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 131047355,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "katherine.ye@gmail.com",
            "sender_full_name": "Katherine Ye (S'13)",
            "sender_id": 2117,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "benchmarking/profiling haskell code time",
            "submessages": [],
            "timestamp": 1533651793,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/570b5294859a4650f5c6c4f866b6fba3e34af02b?x=x&version=2",
            "client": "website",
            "content": "<p>There is no way for any program to test for the presence of infinite loops generally because of the halting problem, but I suspect this is not quite what you meant <span class=\"emoji emoji-1f600\" title=\"grinning\">:grinning:</span></p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 131050278,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "tobinyehle@gmail.com",
            "sender_full_name": "Tobin Yehle (he) (SP1'20)",
            "sender_id": 105607,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "QuickCheck Infinite Loop",
            "submessages": [],
            "timestamp": 1533654920,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/570b5294859a4650f5c6c4f866b6fba3e34af02b?x=x&version=2",
            "client": "website",
            "content": "<p>I'd be interested in details if you care to share them! Is the issue dynamic dispatch?</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 131050377,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "tobinyehle@gmail.com",
            "sender_full_name": "Tobin Yehle (he) (SP1'20)",
            "sender_id": 105607,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "benchmarking/profiling haskell code time",
            "submessages": [],
            "timestamp": 1533654998,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/649c2682ffc71d16cddbbbcb3595bc45?d=identicon&version=1",
            "client": "ZulipElectron",
            "content": "<p>:) Yeah, what I meant is more like \"If I am testing the properties of something then I expect it to terminate, and within a reasonable amount of time.\" I was hoping there would be a way to say \"If you have been running this function for a second and still don't ave an answer, consider it a failed test\".</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 131050547,
            "is_me_message": false,
            "last_edit_timestamp": 1533655362,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "me@nicksanford.io",
            "sender_full_name": "Nick Sanford (he) (S2'18)",
            "sender_id": 120479,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "QuickCheck Infinite Loop",
            "submessages": [],
            "timestamp": 1533655188,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/570b5294859a4650f5c6c4f866b6fba3e34af02b?x=x&version=2",
            "client": "website",
            "content": "<p>I know there are configurable timeouts available in many testing frameworks, though I don't know of any for haskell. Seems like a reasonable thing to want.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 131050683,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "tobinyehle@gmail.com",
            "sender_full_name": "Tobin Yehle (he) (SP1'20)",
            "sender_id": 105607,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "QuickCheck Infinite Loop",
            "submessages": [],
            "timestamp": 1533655316,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4d074af6cc341ef51b25bb2f738cdb11?d=identicon&version=1",
            "client": "website",
            "content": "<p>can you use <a href=\"https://wiki.haskell.org/Inlining_and_Specialisation#How_do_I_use_the_SPECIALISE_pragma.3F\" target=\"_blank\" title=\"https://wiki.haskell.org/Inlining_and_Specialisation#How_do_I_use_the_SPECIALISE_pragma.3F\"><code>SPECIALIZE</code> pragmas</a> to work around this issue?</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 131078019,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "vaibhavsagar@gmail.com",
            "sender_full_name": "Vaibhav Sagar (he) (F1'16)",
            "sender_id": 100041,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "benchmarking/profiling haskell code time",
            "submessages": [],
            "timestamp": 1533687870,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/e5845e045f9bcd4c95b82b01366893ed8b219f00?x=x&version=1",
            "client": "website",
            "content": "<p>I took this up again at <a href=\"https://blog.plover.com/prog/haskell/fake-keyword.html\" target=\"_blank\" title=\"https://blog.plover.com/prog/haskell/fake-keyword.html\">https://blog.plover.com/prog/haskell/fake-keyword.html</a> .</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 131113905,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "mjd@plover.com",
            "sender_full_name": "Mark Dominus (indifferent)",
            "sender_id": 7912,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Fake keywords",
            "submessages": [],
            "timestamp": 1533740805,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/c21944a6a1d816666759e8c37fbdff15441a590b?x=x&version=1",
            "client": "website",
            "content": "<p>this isn't exactly syntactic sugar, since you could still write things like <code>while condition (id Do) action</code> and have them work. but there's not much else you can do with a data type isomorphic to unit.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 131117689,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "kyle.littler@gmail.com",
            "sender_full_name": "Kyle Littler (F'13)",
            "sender_id": 2857,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Fake keywords",
            "submessages": [],
            "timestamp": 1533744755,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/21b9cce736cbbe8e0761bbb33863c7d3112d0136?x=x&version=2",
            "client": "website",
            "content": "<p>I believe you can use <a href=\"https://wiki.haskell.org/Template_Haskell\" target=\"_blank\" title=\"https://wiki.haskell.org/Template_Haskell\">Template Haskell</a> to define your own syntax. I'm not familiar with it, but my understanding is it gives you access to the AST. It lets you run code to manipulate the AST similar to Lisp macros.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 131122936,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "michaelmalis2@gmail.com",
            "sender_full_name": "Michael Malis (SP2'19)",
            "sender_id": 8099,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Fake keywords",
            "submessages": [],
            "timestamp": 1533750789,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/e5845e045f9bcd4c95b82b01366893ed8b219f00?x=x&version=1",
            "client": "website",
            "content": "<p>Joachim Breitner provided an example of someone else doing something like this:  <a href=\"https://blog.plover.com/prog/haskell/fake-keyword-2.html\" target=\"_blank\" title=\"https://blog.plover.com/prog/haskell/fake-keyword-2.html\">https://blog.plover.com/prog/haskell/fake-keyword-2.html</a></p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 131125030,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "mjd@plover.com",
            "sender_full_name": "Mark Dominus (indifferent)",
            "sender_id": 7912,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Fake keywords",
            "submessages": [],
            "timestamp": 1533752935,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/187931dc9ca73b56a4e014e6009c00a1?d=identicon&version=1",
            "client": "website",
            "content": "<p>Doesn't this count? <a href=\"https://pozorvlak.livejournal.com/94558.html?thread=840286#t840286\" target=\"_blank\" title=\"https://pozorvlak.livejournal.com/94558.html?thread=840286#t840286\">https://pozorvlak.livejournal.com/94558.html?thread=840286#t840286</a><br>\nIt was linked to from your blog in 2008; could it have been in the back of your mind for ten years?<br>\n(I linked to that comment earlier but you may have not seen it. Sorry if I'm just spouting nonsense)</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 131132972,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "me@joeym.org",
            "sender_full_name": "Joey Marianer (he) (m1'18)",
            "sender_id": 105228,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Fake keywords",
            "submessages": [],
            "timestamp": 1533762607,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/e5845e045f9bcd4c95b82b01366893ed8b219f00?x=x&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-id=\"105228\">@Joey Marianer (m1'18)</span> When you first mentioned it, I didn't read down far enough to realize what you were talking about, and I didn't see the connection!</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 131145142,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "mjd@plover.com",
            "sender_full_name": "Mark Dominus (indifferent)",
            "sender_id": 7912,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Fake keywords",
            "submessages": [],
            "timestamp": 1533781423,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/e5845e045f9bcd4c95b82b01366893ed8b219f00?x=x&version=1",
            "client": "website",
            "content": "<p>Thanks!</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 131145144,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "mjd@plover.com",
            "sender_full_name": "Mark Dominus (indifferent)",
            "sender_id": 7912,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Fake keywords",
            "submessages": [],
            "timestamp": 1533781426,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4d074af6cc341ef51b25bb2f738cdb11?d=identicon&version=1",
            "client": "website",
            "content": "<p>Would the way that <a href=\"http://hackage.haskell.org/package/base-4.11.1.0/docs/Prelude.html#v:otherwise\" target=\"_blank\" title=\"http://hackage.haskell.org/package/base-4.11.1.0/docs/Prelude.html#v:otherwise\"><code>otherwise = True</code></a> purely for convenience when working with guards count as an example of a fake keyword?</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 131148504,
            "is_me_message": false,
            "last_edit_timestamp": 1533786794,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "vaibhavsagar@gmail.com",
            "sender_full_name": "Vaibhav Sagar (he) (F1'16)",
            "sender_id": 100041,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Fake keywords",
            "submessages": [],
            "timestamp": 1533786736,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/e5845e045f9bcd4c95b82b01366893ed8b219f00?x=x&version=1",
            "client": "website",
            "content": "<p>It's certainly syntactic sugar, but it's not an example of the technique I was discussing.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 131166048,
            "is_me_message": false,
            "last_edit_timestamp": 1533813961,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "mjd@plover.com",
            "sender_full_name": "Mark Dominus (indifferent)",
            "sender_id": 7912,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Fake keywords",
            "submessages": [],
            "timestamp": 1533813945,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/3514240cecd66b31ef3b3a4a7ea235cc?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-id=\"105607\">@Tobin Yehle (m1'18)</span> <span class=\"user-mention\" data-user-id=\"100041\">@Vaibhav Sagar (F1'16)</span> we're not 100% clear on the exact issue, so I wrote up a <a href=\"https://stackoverflow.com/questions/51829788/puzzling-performance-output-behavior-with-rank-2-polymorphism-in-haskell\" target=\"_blank\" title=\"https://stackoverflow.com/questions/51829788/puzzling-performance-output-behavior-with-rank-2-polymorphism-in-haskell\">stackoverflow question</a>. any thoughts are appreciated!</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 132068612,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "katherine.ye@gmail.com",
            "sender_full_name": "Katherine Ye (S'13)",
            "sender_id": 2117,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "benchmarking/profiling haskell code time",
            "submessages": [],
            "timestamp": 1534190671,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/555d9fc8b9f9a919e308a050961eced4?d=identicon&version=1",
            "client": "website",
            "content": "<p>Allo, I've been working on my silly forth-in-haskell language and running into a roadblock currently. I have a dictionary of all the forth words both precompiled, and runtime compiled. The dictionary contains a String name for parsing from the CLI, a flag, and the function or list-of-functions.</p>\n<p>I want to be able to take a 'compiled word' (a list of Functions in my implementation) and reverse-lookup the dictionary to print back the String representation. As it stands, my Show instance only returns \"&lt;function&gt;\" with no way of knowing which one.</p>\n<p>In trying to implement the reverse lookup, with a list comprehension, I'm trying to match on the Function itself, which returns a \"No Eq typeclass\" error. I'm struggling to understand how to add an Eq typeclass for a function or set of functions. Perhaps I'm coming at this the wrong way (C background!) as I'm expecting the underlying representation to be a function-pointer that could be compared.</p>\n<p>I put in a gist because the minimal example was a little long for inline posting. The ghci error is attached as a comment in the gist.</p>\n<p>If there's a different approach you can think of, or a solution to this problem I'm super curious to hear! <a href=\"https://gist.github.com/trentgill/95b295d8eb6cc42e9636bc1b69f5fc32\" target=\"_blank\" title=\"https://gist.github.com/trentgill/95b295d8eb6cc42e9636bc1b69f5fc32\">https://gist.github.com/trentgill/95b295d8eb6cc42e9636bc1b69f5fc32</a></p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 132496763,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "trent.gill@gmail.com",
            "sender_full_name": "Trent Gill (he) (SP2'17)",
            "sender_id": 100932,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Creating Eq instance for functions?",
            "submessages": [],
            "timestamp": 1534823196,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p>Yeah, Haskell doesn't consider functions as being e.g. function pointers under the hood, so function equality really means \"both functions return the same output whenever fed the same input\". That would be pretty exhausting to check in general (and not even necessarily possible, maybe the args/outputs aren't Eq either).</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 132497834,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Creating Eq instance for functions?",
            "submessages": [],
            "timestamp": 1534825298,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p>I guess one thing you could do is manually recreate pointer semantics, and tag each function with an auto-incrementing id or something.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 132497931,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Creating Eq instance for functions?",
            "submessages": [],
            "timestamp": 1534825451,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p>I'm not actually sure what would be the simplest thing to do.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 132497935,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Creating Eq instance for functions?",
            "submessages": [],
            "timestamp": 1534825475,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/c52df4d54166ed7db0141bdb21c7935e502d6ddc?x=x&version=1",
            "client": "website",
            "content": "<p>I'd add an (optional?) name field to FStackItem unless Eq is needed for other reasons.<br>\nThis is just one of those places where Haskell can be less convenient than some other languages.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 132507966,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "darius@wry.me",
            "sender_full_name": "Darius Bacon (W1'16)",
            "sender_id": 902,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Creating Eq instance for functions?",
            "submessages": [],
            "timestamp": 1534844103,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/555d9fc8b9f9a919e308a050961eced4?d=identicon&version=1",
            "client": "website",
            "content": "<p>Thanks both for the responses. I imagined something like this would be the case. Thinking for now I'm going to leave this functionality out as adding a name field to the FStackItem makes the whole program way messier, and doing the pointer semantics thing feels pretty alien to the way i'm trying to refactor and keep things clean and streamlined.<br>\nTY!</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 132541495,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "trent.gill@gmail.com",
            "sender_full_name": "Trent Gill (he) (SP2'17)",
            "sender_id": 100932,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Creating Eq instance for functions?",
            "submessages": [],
            "timestamp": 1534885094,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/649c2682ffc71d16cddbbbcb3595bc45?d=identicon&version=1",
            "client": "ZulipElectron",
            "content": "<p>Does anyone have experience with parallelizing both IO &amp; CPU heavy work in haskell?</p>\n<p>I was inspired to try to optimize <span class=\"user-mention\" data-user-id=\"116363\">@Daniel Friedman (S1'18)</span> 's wc -l ./tmp haskell implementation <a href=\"https://github.com/dan-f/concurrent-wc\" target=\"_blank\" title=\"https://github.com/dan-f/concurrent-wc\">https://github.com/dan-f/concurrent-wc</a> and could use some help understanding how to get the haskell runtime to fairly schedule green threds to system threads.  </p>\n<p>I found that the original implantation wasn't making use of all available system threads (maybe only running in parallel 30% of the time according to threadscope) and I figured that figuring out how to get the haskell runtime to fairly schedule the work would yield a great performance  boost. </p>\n<div class=\"message_inline_image\"><a href=\"https://github.com/nicksanford/haskell-concurrency-exercise/raw/master/images/original.png\" target=\"_blank\" title=\"https://github.com/nicksanford/haskell-concurrency-exercise/raw/master/images/original.png\"><img src=\"https://github.com/nicksanford/haskell-concurrency-exercise/raw/master/images/original.png\"></a></div><p>However and am still stuck on not being able to get the  haskell runtime to properly schedule green thread work on system threads when both reading files and summing up the newlines in said files.</p>\n<div class=\"message_inline_image\"><a href=\"https://github.com/nicksanford/haskell-concurrency-exercise/raw/master/images/new.png\" target=\"_blank\" title=\"https://github.com/nicksanford/haskell-concurrency-exercise/raw/master/images/new.png\"><img src=\"https://github.com/nicksanford/haskell-concurrency-exercise/raw/master/images/new.png\"></a></div><p>This is a simplified version of the project <a href=\"https://github.com/nicksanford/haskell-concurrency-exercise\" target=\"_blank\" title=\"https://github.com/nicksanford/haskell-concurrency-exercise\">https://github.com/nicksanford/haskell-concurrency-exercise</a> I created with a profiling harness (using ghc-events and threadsope) which shows that despite there being a green thread per worker reading and counting lines in a file one thread is doing the vast majority of the work.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 132542204,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1104",
                    "emoji_name": "haskell",
                    "reaction_type": "realm_emoji",
                    "user": {
                        "email": "santiago.gepigon@gmail.com",
                        "full_name": "Santiago Gepigon III (he) (S2'18)",
                        "id": 120074
                    },
                    "user_id": 120074
                },
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "+1",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "santiago.gepigon@gmail.com",
                        "full_name": "Santiago Gepigon III (he) (S2'18)",
                        "id": 120074
                    },
                    "user_id": 120074
                }
            ],
            "recipient_id": 22667,
            "sender_email": "me@nicksanford.io",
            "sender_full_name": "Nick Sanford (he) (S2'18)",
            "sender_id": 120479,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "parallelism",
            "submessages": [],
            "timestamp": 1534885980,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/649c2682ffc71d16cddbbbcb3595bc45?d=identicon&version=1",
            "client": "ZulipElectron",
            "content": "<p>I have tried forkIO, async, parallel-io, and none of them have lead to any improvement in either speed or more fair scheduling.  Everything just ends up spending the vast majority of its time in a single system thread.</p>\n<p>The only way I have been able to get parallelism is by doing all the IO upfront and then parallelizing the summation, but that is slower than just doing everything in a single thread synchronously.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 132542317,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "me@nicksanford.io",
            "sender_full_name": "Nick Sanford (he) (S2'18)",
            "sender_id": 120479,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "parallelism",
            "submessages": [],
            "timestamp": 1534886113,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/42eb8364884b6847ba9c7485ae5b47650e0e95fc?x=x&version=2",
            "client": "website",
            "content": "<p>hi folks! I've got an interview on Friday with a pairing component built in. They said for me to pick a functional language to interview in, and for better or worse I chose haskell!</p>\n<p>I've got a decent amount of haskell experience, am familiar with IO, monads, functors, and such core concepts. I'm interested in making sure i'm ready for the task at hand.</p>\n<p>What are some \"core\" bits of haskell you'd recommend brushing up on for a pairing interview? I'm thinking lazy evaluation, performant data structures, testing, etc. Any recommendations?</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 133835728,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1100",
                    "emoji_name": "lambda",
                    "reaction_type": "realm_emoji",
                    "user": {
                        "email": "me@nicksanford.io",
                        "full_name": "Nick Sanford (he) (S2'18)",
                        "id": 120479
                    },
                    "user_id": 120479
                },
                {
                    "emoji_code": "1100",
                    "emoji_name": "lambda",
                    "reaction_type": "realm_emoji",
                    "user": {
                        "email": "santiago.gepigon@gmail.com",
                        "full_name": "Santiago Gepigon III (he) (S2'18)",
                        "id": 120074
                    },
                    "user_id": 120074
                },
                {
                    "emoji_code": "1100",
                    "emoji_name": "lambda",
                    "reaction_type": "realm_emoji",
                    "user": {
                        "email": "vaibhavsagar@gmail.com",
                        "full_name": "Vaibhav Sagar (he) (F1'16)",
                        "id": 100041
                    },
                    "user_id": 100041
                },
                {
                    "emoji_code": "1100",
                    "emoji_name": "lambda",
                    "reaction_type": "realm_emoji",
                    "user": {
                        "email": "adampalay@gmail.com",
                        "full_name": "Adam Palay (he) (SP2'18)",
                        "id": 111960
                    },
                    "user_id": 111960
                }
            ],
            "recipient_id": 22667,
            "sender_email": "dfriedman58@gmail.com",
            "sender_full_name": "Daniel Friedman (he) (S1'18)",
            "sender_id": 116363,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "preparing for an interview",
            "submessages": [],
            "timestamp": 1536777739,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/efe57f0998df065470ff42c938f781cf?d=identicon&version=1",
            "client": "website",
            "content": "<p>What does the company do? What's the pairing task likely to be? Have they mentioned?</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 133841452,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "libby@daydrea.me",
            "sender_full_name": "Libby Horacek (she) (SP1'15)",
            "sender_id": 7081,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "preparing for an interview",
            "submessages": [],
            "timestamp": 1536783822,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/570b5294859a4650f5c6c4f866b6fba3e34af02b?x=x&version=2",
            "client": "website",
            "content": "<p>Anyone have any idea how to make stack install something for all users of a system? <code>stack install &lt;thing&gt;</code> puts it into <code>~/.local/bin/</code> by default which is not going to be on another user's path.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 133845034,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "tobinyehle@gmail.com",
            "sender_full_name": "Tobin Yehle (he) (SP1'20)",
            "sender_id": 105607,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "stack global install",
            "submessages": [],
            "timestamp": 1536787382,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/661412d42ecbf0c0bd354116859a5af3562f8e5f?x=x&version=4",
            "client": "website",
            "content": "<p>i don\u2019t an answer to your question exactly, but there is an option named <code>--local-bin-path</code> that installs binaries in a directory of your choosing. that\u2019s a little more tedious than what you are suggesting, but it works.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 133845329,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "+1",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "tobinyehle@gmail.com",
                        "full_name": "Tobin Yehle (he) (SP1'20)",
                        "id": 105607
                    },
                    "user_id": 105607
                }
            ],
            "recipient_id": 22667,
            "sender_email": "veit@veitheller.de",
            "sender_full_name": "Veit Heller (he) (S1'17)",
            "sender_id": 101103,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "stack global install",
            "submessages": [],
            "timestamp": 1536787668,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4d074af6cc341ef51b25bb2f738cdb11?d=identicon&version=1",
            "client": "website",
            "content": "<p>I'm curious to know more so I can give you better suggestions, but in the meantime, have a quick skim of <a href=\"http://dev.stephendiehl.com/hask/\" target=\"_blank\" title=\"http://dev.stephendiehl.com/hask/\">http://dev.stephendiehl.com/hask/</a> and see what is least familiar to you</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 133858484,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "vaibhavsagar@gmail.com",
            "sender_full_name": "Vaibhav Sagar (he) (F1'16)",
            "sender_id": 100041,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "preparing for an interview",
            "submessages": [],
            "timestamp": 1536807149,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/649c2682ffc71d16cddbbbcb3595bc45?d=identicon&version=1",
            "client": "ZulipElectron",
            "content": "<p>I think that one of the big challenges I have had in haskell is figuring out which libraries to us to solve a given problem. (e.g. I need to do some bit twidding, does that live in Data.Bits, Data.Binary, or one of the other 4 similarly named modules). </p>\n<p>For that reason, I think that if you can have a rough idea of what you are going to be pairing on, and maybe play with some libraries you may need to solve that problem I think that would be a good idea. </p>\n<p>If  not, I would take a programming task you have been given in other interviews and try to solve it in Haskell.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 133888879,
            "is_me_message": false,
            "last_edit_timestamp": 1536849234,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "me@nicksanford.io",
            "sender_full_name": "Nick Sanford (he) (S2'18)",
            "sender_id": 120479,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "preparing for an interview",
            "submessages": [],
            "timestamp": 1536849155,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/649c2682ffc71d16cddbbbcb3595bc45?d=identicon&version=1",
            "client": "ZulipElectron",
            "content": "<p>Also, if you haven't played around with hspec (an rspec like testing library for haskell) that might be a good thing to know (I have frequently had interviewers ask me questions and then immediately want a test written).  Hspec will probably feel pretty familiar if you have used any BDD  testing library (I found it very familiar at least).</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 133889158,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "me@nicksanford.io",
            "sender_full_name": "Nick Sanford (he) (S2'18)",
            "sender_id": 120479,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "preparing for an interview",
            "submessages": [],
            "timestamp": 1536849396,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/649c2682ffc71d16cddbbbcb3595bc45?d=identicon&version=1",
            "client": "ZulipElectron",
            "content": "<p>I personally would not try to learn a new haskell abstraction in a day (as I have found that it takes a while to sink in for me) so I personally wouldn't stress about trying to learn monad transformers or anything like that (not sure if others feel differently).</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 133889513,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "me@nicksanford.io",
            "sender_full_name": "Nick Sanford (he) (S2'18)",
            "sender_id": 120479,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "preparing for an interview",
            "submessages": [],
            "timestamp": 1536849689,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/649c2682ffc71d16cddbbbcb3595bc45?d=identicon&version=1",
            "client": "ZulipElectron",
            "content": "<p><span class=\"user-mention\" data-user-id=\"116583\">@S\u00f6nke Hahn (S1'18)</span>  thank you so much for recommending taking a look at <a href=\"https://hackage.haskell.org/package/deepseq-1.4.3.0/docs/Control-DeepSeq.html\" target=\"_blank\" title=\"https://hackage.haskell.org/package/deepseq-1.4.3.0/docs/Control-DeepSeq.html\">https://hackage.haskell.org/package/deepseq-1.4.3.0/docs/Control-DeepSeq.html</a> yesterday. That completely fixed my memory problem. My bittorrent client was taking up 12 GB of memory due to a space leak when trying to download a large file and adding deep seq in 2 places brought it down to around 200 - 300 mb</p>\n<p><a href=\"https://github.com/nicksanford/htorrent/commit/f45850ab161db9cc144414fa5b5720a076a84101\" target=\"_blank\" title=\"https://github.com/nicksanford/htorrent/commit/f45850ab161db9cc144414fa5b5720a076a84101\">https://github.com/nicksanford/htorrent/commit/f45850ab161db9cc144414fa5b5720a076a84101</a></p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 133972559,
            "is_me_message": false,
            "last_edit_timestamp": 1536951698,
            "reactions": [
                {
                    "emoji_code": "1f419",
                    "emoji_name": "octopus",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "nick@vividx.co.uk",
                        "full_name": "Nick Collins (S2'18)",
                        "id": 843
                    },
                    "user_id": 843
                },
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "+1",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "soenkehahn@gmail.com",
                        "full_name": "S\u00f6nke Hahn (he) (S1'18)",
                        "id": 116583
                    },
                    "user_id": 116583
                },
                {
                    "emoji_code": "1f419",
                    "emoji_name": "octopus",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "soenkehahn@gmail.com",
                        "full_name": "S\u00f6nke Hahn (he) (S1'18)",
                        "id": 116583
                    },
                    "user_id": 116583
                },
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "+1",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "vaibhavsagar@gmail.com",
                        "full_name": "Vaibhav Sagar (he) (F1'16)",
                        "id": 100041
                    },
                    "user_id": 100041
                },
                {
                    "emoji_code": "1f419",
                    "emoji_name": "octopus",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "vaibhavsagar@gmail.com",
                        "full_name": "Vaibhav Sagar (he) (F1'16)",
                        "id": 100041
                    },
                    "user_id": 100041
                },
                {
                    "emoji_code": "1f419",
                    "emoji_name": "octopus",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "santiago.gepigon@gmail.com",
                        "full_name": "Santiago Gepigon III (he) (S2'18)",
                        "id": 120074
                    },
                    "user_id": 120074
                },
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "+1",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "santiago.gepigon@gmail.com",
                        "full_name": "Santiago Gepigon III (he) (S2'18)",
                        "id": 120074
                    },
                    "user_id": 120074
                }
            ],
            "recipient_id": 22667,
            "sender_email": "me@nicksanford.io",
            "sender_full_name": "Nick Sanford (he) (S2'18)",
            "sender_id": 120479,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "fixed space leak!",
            "submessages": [],
            "timestamp": 1536951671,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/7f89b22589ca6f3490f8a75591a699adc0e02fcc?x=x&version=1",
            "client": "ZulipMobile",
            "content": "<p>That sounds pretty interesting - how'd you decide where the rnf calls should go?</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 133978839,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "ark.email@gmail.com",
            "sender_full_name": "Adam Bratschi-Kaye (he) (SP1'17)",
            "sender_id": 100532,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "fixed space leak!",
            "submessages": [],
            "timestamp": 1536959035,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/649c2682ffc71d16cddbbbcb3595bc45?d=identicon&version=1",
            "client": "ZulipElectron",
            "content": "<p>I had already done some profiling using <code>stack build --profile &amp;&amp; stack exec -- htorrent &lt;path to torrent&gt; +RTS -s</code> which shows a memory &amp; cpu printout <a href=\"https://github.com/nicksanford/htorrent/blob/master/profiling/big/htorrent.prof\" target=\"_blank\" title=\"https://github.com/nicksanford/htorrent/blob/master/profiling/big/htorrent.prof\">https://github.com/nicksanford/htorrent/blob/master/profiling/big/htorrent.prof</a></p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 133990421,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "me@nicksanford.io",
            "sender_full_name": "Nick Sanford (he) (S2'18)",
            "sender_id": 120479,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "fixed space leak!",
            "submessages": [],
            "timestamp": 1536975244,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/649c2682ffc71d16cddbbbcb3595bc45?d=identicon&version=1",
            "client": "ZulipElectron",
            "content": "<p>And basically both places showed up as having high memory usage so I started there. I also had a sneaking suspicion that the place where I was reading in a large file was not getting fully evaluated (which ended up being the case).</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 133990434,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "me@nicksanford.io",
            "sender_full_name": "Nick Sanford (he) (S2'18)",
            "sender_id": 120479,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "fixed space leak!",
            "submessages": [],
            "timestamp": 1536975311,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/efe57f0998df065470ff42c938f781cf?d=identicon&version=1",
            "client": "website",
            "content": "<p>Hi all, I'm working on this blog post and it would be awesome to have some feedback, and not just on the writing (although yes!) but like -- did I get anything super obviously wrong, is this a bad way to do locking, am I using terms correctly, etc <a href=\"https://gist.github.com/emhoracek/4b1ceee9e3f1f2b1c4bd1ae4a653aecd\" target=\"_blank\" title=\"https://gist.github.com/emhoracek/4b1ceee9e3f1f2b1c4bd1ae4a653aecd\">https://gist.github.com/emhoracek/4b1ceee9e3f1f2b1c4bd1ae4a653aecd</a> (cross-posted to <a class=\"stream\" data-stream-id=\"21709\" href=\"/#narrow/stream/21709-writing-review\">#writing review</a> )</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 134056351,
            "is_me_message": false,
            "last_edit_timestamp": 1537108413,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "libby@daydrea.me",
            "sender_full_name": "Libby Horacek (she) (SP1'15)",
            "sender_id": 7081,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "blog post in progress on using psql advisory locks",
            "submessages": [],
            "timestamp": 1537108365,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/e5845e045f9bcd4c95b82b01366893ed8b219f00?x=x&version=1",
            "client": "website",
            "content": "<p><a href=\"https://typeclasses.com/\" target=\"_blank\" title=\"https://typeclasses.com/\">https://typeclasses.com/</a>  describes itself as:</p>\n<blockquote>\n<p>Who we are:<br>\nType Classes is Julie Moronuki and Chris Martin, producing videos and writing to help you experience the joy of pure functional programming.<br>\nWhat you can expect as a subscriber:</p>\n<ul>\n<li>Focused, coherent video courses covering topics in Haskell and Nix.</li>\n<li>Practical projects, presented in video and text.</li>\n<li>Clear, approachable articles for all levels, whatever your background.</li>\n</ul>\n</blockquote>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 134621072,
            "is_me_message": false,
            "last_edit_timestamp": 1537903303,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "mjd@plover.com",
            "sender_full_name": "Mark Dominus (indifferent)",
            "sender_id": 7912,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Type Classes",
            "submessages": [],
            "timestamp": 1537903278,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/e5845e045f9bcd4c95b82b01366893ed8b219f00?x=x&version=1",
            "client": "website",
            "content": "<p>it costs $29 per month, but Julie told me:</p>\n<blockquote>\n<p>if you know someone (particuarly someone who is a woman or underrep'd minority) who would like to learn haskell but can't afford it, please send them to me. we would <em>especially</em> love to help anyone who has formerly found the community hostile.</p>\n</blockquote>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 134621099,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f389",
                    "emoji_name": "tada",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "vaibhavsagar@gmail.com",
                        "full_name": "Vaibhav Sagar (he) (F1'16)",
                        "id": 100041
                    },
                    "user_id": 100041
                },
                {
                    "emoji_code": "1104",
                    "emoji_name": "haskell",
                    "reaction_type": "realm_emoji",
                    "user": {
                        "email": "vaibhavsagar@gmail.com",
                        "full_name": "Vaibhav Sagar (he) (F1'16)",
                        "id": 100041
                    },
                    "user_id": 100041
                },
                {
                    "emoji_code": "1104",
                    "emoji_name": "haskell",
                    "reaction_type": "realm_emoji",
                    "user": {
                        "email": "katherine.ye@gmail.com",
                        "full_name": "Katherine Ye (S'13)",
                        "id": 2117
                    },
                    "user_id": 2117
                },
                {
                    "emoji_code": "1104",
                    "emoji_name": "haskell",
                    "reaction_type": "realm_emoji",
                    "user": {
                        "email": "libby@daydrea.me",
                        "full_name": "Libby Horacek (she) (SP1'15)",
                        "id": 7081
                    },
                    "user_id": 7081
                },
                {
                    "emoji_code": "1f389",
                    "emoji_name": "tada",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "libby@daydrea.me",
                        "full_name": "Libby Horacek (she) (SP1'15)",
                        "id": 7081
                    },
                    "user_id": 7081
                },
                {
                    "emoji_code": "1104",
                    "emoji_name": "haskell",
                    "reaction_type": "realm_emoji",
                    "user": {
                        "email": "me@nicksanford.io",
                        "full_name": "Nick Sanford (he) (S2'18)",
                        "id": 120479
                    },
                    "user_id": 120479
                },
                {
                    "emoji_code": "1f389",
                    "emoji_name": "tada",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "santiago.gepigon@gmail.com",
                        "full_name": "Santiago Gepigon III (he) (S2'18)",
                        "id": 120074
                    },
                    "user_id": 120074
                },
                {
                    "emoji_code": "1f389",
                    "emoji_name": "tada",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "williamsykesfisher@gmail.com",
                        "full_name": "William Sykes Fisher (he) (F2'18)",
                        "id": 129933
                    },
                    "user_id": 129933
                }
            ],
            "recipient_id": 22667,
            "sender_email": "mjd@plover.com",
            "sender_full_name": "Mark Dominus (indifferent)",
            "sender_id": 7912,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Type Classes",
            "submessages": [],
            "timestamp": 1537903311,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/e5845e045f9bcd4c95b82b01366893ed8b219f00?x=x&version=1",
            "client": "website",
            "content": "<p>She does not want this advertised too widely because \u201cwe're not prepared for the inevitable 4chan ddos attack if we announce that publicly\u201d.  But I think folks here might be able to make use of the offer, and understand how to keep things quiet.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 134621211,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "mjd@plover.com",
            "sender_full_name": "Mark Dominus (indifferent)",
            "sender_id": 7912,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Type Classes",
            "submessages": [],
            "timestamp": 1537903393,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p>I actually just signed up a few days ago, but haven't watched enough videos to say much yet\u2014I'll report back once I have :)</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 134629357,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Type Classes",
            "submessages": [],
            "timestamp": 1537911049,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4d074af6cc341ef51b25bb2f738cdb11?d=identicon&version=1",
            "client": "website",
            "content": "<p>I signed up for this a few months ago!</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 134642514,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "vaibhavsagar@gmail.com",
            "sender_full_name": "Vaibhav Sagar (he) (F1'16)",
            "sender_id": 100041,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Type Classes",
            "submessages": [],
            "timestamp": 1537930342,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4d074af6cc341ef51b25bb2f738cdb11?d=identicon&version=1",
            "client": "website",
            "content": "<p>Anyone else planning to go? <a href=\"https://www.meetup.com/NY-Haskell/events/254584461/\" target=\"_blank\" title=\"https://www.meetup.com/NY-Haskell/events/254584461/\">https://www.meetup.com/NY-Haskell/events/254584461/</a></p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 134689221,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "vaibhavsagar@gmail.com",
            "sender_full_name": "Vaibhav Sagar (he) (F1'16)",
            "sender_id": 100041,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Meetup tonight",
            "submessages": [],
            "timestamp": 1537981470,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4c6c33ba34805ad702799c529d0cdce4?d=identicon&version=1",
            "client": "ZulipElectron",
            "content": "<p><span class=\"user-mention\" data-user-id=\"100041\">@Vaibhav Sagar (F1'16)</span> , I am actually</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 134693279,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "+1",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "vaibhavsagar@gmail.com",
                        "full_name": "Vaibhav Sagar (he) (F1'16)",
                        "id": 100041
                    },
                    "user_id": 100041
                }
            ],
            "recipient_id": 22667,
            "sender_email": "adampalay@gmail.com",
            "sender_full_name": "Adam Palay (he) (SP2'18)",
            "sender_id": 111960,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Meetup tonight",
            "submessages": [],
            "timestamp": 1537985862,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/20a01060af1034994b2b9c0cf12035c60680a6c9?x=x&version=4",
            "client": "website",
            "content": "<p>I will most likely be there too! :)</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 134694262,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1104",
                    "emoji_name": "haskell",
                    "reaction_type": "realm_emoji",
                    "user": {
                        "email": "vaibhavsagar@gmail.com",
                        "full_name": "Vaibhav Sagar (he) (F1'16)",
                        "id": 100041
                    },
                    "user_id": 100041
                },
                {
                    "emoji_code": "1104",
                    "emoji_name": "haskell",
                    "reaction_type": "realm_emoji",
                    "user": {
                        "email": "adampalay@gmail.com",
                        "full_name": "Adam Palay (he) (SP2'18)",
                        "id": 111960
                    },
                    "user_id": 111960
                }
            ],
            "recipient_id": 22667,
            "sender_email": "marlenefdez@gmail.com",
            "sender_full_name": "Marlene Fernandez (she) (SP1'18)",
            "sender_id": 109654,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Meetup tonight",
            "submessages": [],
            "timestamp": 1537986898,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/649c2682ffc71d16cddbbbcb3595bc45?d=identicon&version=1",
            "client": "ZulipElectron",
            "content": "<p>Good chance I might be there</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 134696475,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "me@nicksanford.io",
            "sender_full_name": "Nick Sanford (he) (S2'18)",
            "sender_id": 120479,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Meetup tonight",
            "submessages": [],
            "timestamp": 1537989217,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/649c2682ffc71d16cddbbbcb3595bc45?d=identicon&version=1",
            "client": "ZulipElectron",
            "content": "<p>At a minimum at drinks afterwards :)</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 134696564,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "me@nicksanford.io",
            "sender_full_name": "Nick Sanford (he) (S2'18)",
            "sender_id": 120479,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Meetup tonight",
            "submessages": [],
            "timestamp": 1537989289,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/09f2e3360e1ea6dcd2418b763e8f82d0?d=identicon&version=3",
            "client": "website",
            "content": "<p>possibly</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 134701674,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "lucy.zhang7@gmail.com",
            "sender_full_name": "Lucy Zhang (S1'18)",
            "sender_id": 117507,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Meetup tonight",
            "submessages": [],
            "timestamp": 1537994222,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/d2d1f3e361a479849026fe298e091c50e1a4b20a?x=x&version=5",
            "client": "website",
            "content": "<p>Julie is so wonderful <span class=\"emoji emoji-2665\" title=\"hearts\">:hearts:</span></p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 134887559,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "rc@alicja.dev",
            "sender_full_name": "Alicja Karolina Raszkowska (she/they) (W2'18)",
            "sender_id": 100049,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Type Classes",
            "submessages": [],
            "timestamp": 1538237561,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/e654cae31e526bde135190738ead4dd5?d=identicon&version=1",
            "client": "ZulipElectron",
            "content": "<p>Long shot, but anyone around the RC space (or anywhere in the city) tomorrow night (i.e., after 9/9.30pm) to talk through and practice graph traversals in haskell?</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 134936311,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "pierre.s.gergis@gmail.com",
            "sender_full_name": "Pierre Gergis (he) (S2'18)",
            "sender_id": 120080,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "graph traversals",
            "submessages": [],
            "timestamp": 1538342298,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4d074af6cc341ef51b25bb2f738cdb11?d=identicon&version=1",
            "client": "website",
            "content": "<p>I can make myself available!</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 134936384,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "vaibhavsagar@gmail.com",
            "sender_full_name": "Vaibhav Sagar (he) (F1'16)",
            "sender_id": 100041,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "graph traversals",
            "submessages": [],
            "timestamp": 1538342415,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/e654cae31e526bde135190738ead4dd5?d=identicon&version=1",
            "client": "ZulipElectron",
            "content": "<p><span class=\"user-mention\" data-user-id=\"100041\">@Vaibhav Sagar (F1'16)</span> would love your brilliant help! but no pressure if it's late / i'm also happy to meet wherever is easy for you</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 134936645,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "pierre.s.gergis@gmail.com",
            "sender_full_name": "Pierre Gergis (he) (S2'18)",
            "sender_id": 120080,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "graph traversals",
            "submessages": [],
            "timestamp": 1538342996,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/42eb8364884b6847ba9c7485ae5b47650e0e95fc?x=x&version=2",
            "client": "website",
            "content": "<p>Well, this is probably too late, but I recently implemented both a BFS and DFS in haskell, so I'd be happy to chat about it</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 135121461,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "dfriedman58@gmail.com",
            "sender_full_name": "Daniel Friedman (he) (S1'18)",
            "sender_id": 116363,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "graph traversals",
            "submessages": [],
            "timestamp": 1538589574,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/e654cae31e526bde135190738ead4dd5?d=identicon&version=1",
            "client": "ZulipMobile",
            "content": "<p>This was fun! We did BFS together and I did DFS afterward\u2014would Haskell more soon!</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 135139462,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "pierre.s.gergis@gmail.com",
            "sender_full_name": "Pierre Gergis (he) (S2'18)",
            "sender_id": 120080,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "graph traversals",
            "submessages": [],
            "timestamp": 1538607731,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/42eb8364884b6847ba9c7485ae5b47650e0e95fc?x=x&version=2",
            "client": "website",
            "content": "<p>nice. curious as to what your approach was to BFS!</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 135207836,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "dfriedman58@gmail.com",
            "sender_full_name": "Daniel Friedman (he) (S1'18)",
            "sender_id": 116363,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "graph traversals",
            "submessages": [],
            "timestamp": 1538677738,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/dd016afc5e2d346a0eee00bb0268c2b33da824d5?x=x&version=1",
            "client": "website",
            "content": "<p>Sorry this is massively late but perhaps you want <a href=\"http://hackage.haskell.org/package/QuickCheck-2.12.6.1/docs/Test-QuickCheck.html#v:within\" target=\"_blank\" title=\"http://hackage.haskell.org/package/QuickCheck-2.12.6.1/docs/Test-QuickCheck.html#v:within\">http://hackage.haskell.org/package/QuickCheck-2.12.6.1/docs/Test-QuickCheck.html#v:within</a> ?</p>\n<blockquote>\n<p>Considers a property failed if it does not complete within the given number of microseconds.</p>\n</blockquote>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 135650075,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "amindfv@gmail.com",
            "sender_full_name": "Tom Murphy (F2'15)",
            "sender_id": 8693,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "QuickCheck Infinite Loop",
            "submessages": [],
            "timestamp": 1539311736,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/649c2682ffc71d16cddbbbcb3595bc45?d=identicon&version=1",
            "client": "ZulipMobile",
            "content": "<p>Ooh! Thank you very much I will have to check that out next time I hit this issue.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 135650131,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "me@nicksanford.io",
            "sender_full_name": "Nick Sanford (he) (S2'18)",
            "sender_id": 120479,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "QuickCheck Infinite Loop",
            "submessages": [],
            "timestamp": 1539311858,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/efe57f0998df065470ff42c938f781cf?d=identicon&version=1",
            "client": "website",
            "content": "<p>I just upgraded my app to GHC 8.4 to use a new library, and while it compiles fine on my laptop, on the CI server it's running out of memory when I try to build it. I'm using Stack (and no, I can't switch to Nix, my client is not going to pay me to figure out Nix before delivering the feature they wanted literally yesterday). Does anyone know any fancy configuration settings that might make GHC use less memory when compiling? I tried adding \" --ghc-options '+RTS -M1500M -RTS'\" but that just seemed to make it die slightly earlier in compilation.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 135650670,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "libby@daydrea.me",
            "sender_full_name": "Libby Horacek (she) (SP1'15)",
            "sender_id": 7081,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Get GHC to use less memory while compiling",
            "submessages": [],
            "timestamp": 1539312953,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/dd016afc5e2d346a0eee00bb0268c2b33da824d5?x=x&version=1",
            "client": "website",
            "content": "<p>Not directly helpful, but can you share which package requires you to be on 8.4?</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 135651547,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "amindfv@gmail.com",
            "sender_full_name": "Tom Murphy (F2'15)",
            "sender_id": 8693,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Get GHC to use less memory while compiling",
            "submessages": [],
            "timestamp": 1539314648,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/dd016afc5e2d346a0eee00bb0268c2b33da824d5?x=x&version=1",
            "client": "website",
            "content": "<p>And is it dying when building your app or a dependency?</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 135651572,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "amindfv@gmail.com",
            "sender_full_name": "Tom Murphy (F2'15)",
            "sender_id": 8693,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Get GHC to use less memory while compiling",
            "submessages": [],
            "timestamp": 1539314743,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/a2cc22089e70c6b1e9a84d91ac82118ab06aa82a?x=x&version=2",
            "client": "website",
            "content": "<p>If it's running Linux, perhaps you could add a <a href=\"https://wiki.archlinux.org/index.php/swap#Swap_file\" target=\"_blank\" title=\"https://wiki.archlinux.org/index.php/swap#Swap_file\">swap file</a> to get through your deadline?</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 135651616,
            "is_me_message": false,
            "last_edit_timestamp": 1539315140,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "peter@push.cx",
            "sender_full_name": "Peter Bhat Harkins (he) (F2'17)",
            "sender_id": 102004,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Get GHC to use less memory while compiling",
            "submessages": [],
            "timestamp": 1539314769,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/dd016afc5e2d346a0eee00bb0268c2b33da824d5?x=x&version=1",
            "client": "website",
            "content": "<p>Also, are you upgrading from 8.2, or an earlier version? E.g. if you haven't used 8.2 yet _maybe_ this is an earlier regression, such as <a href=\"https://ghc.haskell.org/trac/ghc/ticket/14974\" target=\"_blank\" title=\"https://ghc.haskell.org/trac/ghc/ticket/14974\">https://ghc.haskell.org/trac/ghc/ticket/14974</a> ?</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 135651883,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "amindfv@gmail.com",
            "sender_full_name": "Tom Murphy (F2'15)",
            "sender_id": 8693,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Get GHC to use less memory while compiling",
            "submessages": [],
            "timestamp": 1539315327,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/efe57f0998df065470ff42c938f781cf?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-id=\"8693\">@Tom Murphy (F2'15)</span> It's faktory_worker_haskell (<a href=\"https://github.com/frontrowed/faktory_worker_haskell\" target=\"_blank\" title=\"https://github.com/frontrowed/faktory_worker_haskell\">https://github.com/frontrowed/faktory_worker_haskell</a>)</p>\n<p>It's dying when building dependencies. It could be an earlier regression, because I upgraded from 8.02 to 8.4 in one shot (so many regrets)</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 135652285,
            "is_me_message": false,
            "last_edit_timestamp": 1539316183,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "libby@daydrea.me",
            "sender_full_name": "Libby Horacek (she) (SP1'15)",
            "sender_id": 7081,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Get GHC to use less memory while compiling",
            "submessages": [],
            "timestamp": 1539316123,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/efe57f0998df065470ff42c938f781cf?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-id=\"102004\">@Peter Bhat Harkins (F2'17)</span> will definitely look into that! thanks!</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 135652297,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "libby@daydrea.me",
            "sender_full_name": "Libby Horacek (she) (SP1'15)",
            "sender_id": 7081,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Get GHC to use less memory while compiling",
            "submessages": [],
            "timestamp": 1539316162,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/dd016afc5e2d346a0eee00bb0268c2b33da824d5?x=x&version=1",
            "client": "website",
            "content": "<p>I would second the use of a swap file! It's not clear to me if it's being terminated by the OOM killer, or it's dying on its own when it runs out of memory (seems like the second is more likely if setting <code>+RTS -M1500M -RTS</code> makes it die more quickly</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 135652650,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "amindfv@gmail.com",
            "sender_full_name": "Tom Murphy (F2'15)",
            "sender_id": 8693,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Get GHC to use less memory while compiling",
            "submessages": [],
            "timestamp": 1539316796,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/dd016afc5e2d346a0eee00bb0268c2b33da824d5?x=x&version=1",
            "client": "website",
            "content": "<p>If the library it's dying on is using a lot of Generics (e.g. with large data structures) that could be a known issue <a href=\"https://ghc.haskell.org/trac/ghc/ticket/5642\" target=\"_blank\" title=\"https://ghc.haskell.org/trac/ghc/ticket/5642\">https://ghc.haskell.org/trac/ghc/ticket/5642</a></p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 135652780,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "amindfv@gmail.com",
            "sender_full_name": "Tom Murphy (F2'15)",
            "sender_id": 8693,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Get GHC to use less memory while compiling",
            "submessages": [],
            "timestamp": 1539316986,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/dd016afc5e2d346a0eee00bb0268c2b33da824d5?x=x&version=1",
            "client": "website",
            "content": "<p>an issue which bit aeson in the past (though with 7.10) <a href=\"https://github.com/bos/aeson/issues/296\" target=\"_blank\" title=\"https://github.com/bos/aeson/issues/296\">https://github.com/bos/aeson/issues/296</a></p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 135652832,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "amindfv@gmail.com",
            "sender_full_name": "Tom Murphy (F2'15)",
            "sender_id": 8693,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Get GHC to use less memory while compiling",
            "submessages": [],
            "timestamp": 1539317056,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/dd016afc5e2d346a0eee00bb0268c2b33da824d5?x=x&version=1",
            "client": "website",
            "content": "<p>Also if you haven't already you might be able to reduce memory use by reducing parallelism, with <code>-j 1</code></p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 135652838,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "amindfv@gmail.com",
            "sender_full_name": "Tom Murphy (F2'15)",
            "sender_id": 8693,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Get GHC to use less memory while compiling",
            "submessages": [],
            "timestamp": 1539317091,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/dd016afc5e2d346a0eee00bb0268c2b33da824d5?x=x&version=1",
            "client": "website",
            "content": "<p>Sorry I can't help more!</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 135653085,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "amindfv@gmail.com",
            "sender_full_name": "Tom Murphy (F2'15)",
            "sender_id": 8693,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Get GHC to use less memory while compiling",
            "submessages": [],
            "timestamp": 1539317485,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/efe57f0998df065470ff42c938f781cf?d=identicon&version=1",
            "client": "website",
            "content": "<p>I got the <code>-j 1</code> tip about an hour ago on StackOverflow -- I tried it out and it looks like it's going to work!! <span class=\"emoji emoji-1f389\" title=\"tada\">:tada:</span> </p>\n<p>Thanks for the support <span class=\"user-mention\" data-user-id=\"8693\">@Tom Murphy (F2'15)</span> I'm going to sleep now <span class=\"emoji emoji-1f602\" title=\"joy\">:joy:</span></p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 135653194,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "libby@daydrea.me",
            "sender_full_name": "Libby Horacek (she) (SP1'15)",
            "sender_id": 7081,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Get GHC to use less memory while compiling",
            "submessages": [],
            "timestamp": 1539317663,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4d074af6cc341ef51b25bb2f738cdb11?d=identicon&version=1",
            "client": "website",
            "content": "<p>I want to listen to <a href=\"https://www.youtube.com/watch?v=VzNGF4V937o\" target=\"_blank\" title=\"https://www.youtube.com/watch?v=VzNGF4V937o\">George Wilson talk about laws</a> all day <span class=\"emoji emoji-1f60d\" title=\"heart eyes\">:heart_eyes:</span></p>\n<div class=\"youtube-video message_inline_image\"><a data-id=\"VzNGF4V937o\" href=\"https://www.youtube.com/watch?v=VzNGF4V937o\" target=\"_blank\" title=\"https://www.youtube.com/watch?v=VzNGF4V937o\"><img src=\"https://i.ytimg.com/vi/VzNGF4V937o/default.jpg\"></a></div>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 135765917,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "+1",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "connor@cdosborn.com",
                        "full_name": "Connor Osborn (F1'14)",
                        "id": 6427
                    },
                    "user_id": 6427
                },
                {
                    "emoji_code": "1f60d",
                    "emoji_name": "heart_eyes",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "iain@mccoy.id.au",
                        "full_name": "Iain McCoy (he) (SP2'17)",
                        "id": 100806
                    },
                    "user_id": 100806
                }
            ],
            "recipient_id": 22667,
            "sender_email": "vaibhavsagar@gmail.com",
            "sender_full_name": "Vaibhav Sagar (he) (F1'16)",
            "sender_id": 100041,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "LAWS!",
            "submessages": [],
            "timestamp": 1539499994,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/6485c74622306264ff53449c6f0ca540?d=identicon&version=1",
            "client": "ZulipMobile",
            "content": "<p>Was this from this year's compose? There was an excellent moment where somebody asked why something (possibly the applicative instance for zipper) had the definition it had, and the answer was basically \"LAWS!\"</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 135766576,
            "is_me_message": false,
            "last_edit_timestamp": 1539501600,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "iain@mccoy.id.au",
            "sender_full_name": "Iain McCoy (he) (SP2'17)",
            "sender_id": 100806,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "LAWS!",
            "submessages": [],
            "timestamp": 1539501531,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4d074af6cc341ef51b25bb2f738cdb11?d=identicon&version=1",
            "client": "website",
            "content": "<p>Yeah, I'm kicking myself for not going now.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 135766882,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "vaibhavsagar@gmail.com",
            "sender_full_name": "Vaibhav Sagar (he) (F1'16)",
            "sender_id": 100041,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "LAWS!",
            "submessages": [],
            "timestamp": 1539502223,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/649c2682ffc71d16cddbbbcb3595bc45?d=identicon&version=1",
            "client": "ZulipElectron",
            "content": "<p>Shout out to <span class=\"user-mention\" data-user-id=\"100041\">@Vaibhav Sagar (F1'16)</span> for suggesting I refactor my BitTorrent RPC parser using attoparsec / parser combinators. I was really intimidated by the haskell book's 80+ page section on parser combinators, but I was able to get it working in one day by just treating it like the state monad.</p>\n<p>If anyone is holding out on using / learning parser combinators b/c they seem difficult / the haskell book chapter is intimidating I would highly recommend just diving in.<br>\nSome resources to get started:<br>\nTheory (resource is in F# but found it very approachable intro): <a href=\"https://www.youtube.com/watch?v=RDalzi7mhdY\" target=\"_blank\" title=\"https://www.youtube.com/watch?v=RDalzi7mhdY\">https://www.youtube.com/watch?v=RDalzi7mhdY</a><br>\nStart going through the attoparsec examples and play with them (see if you can break them, then fix them): <a href=\"https://github.com/bos/attoparsec/tree/master/examples\" target=\"_blank\" title=\"https://github.com/bos/attoparsec/tree/master/examples\">https://github.com/bos/attoparsec/tree/master/examples</a><br>\nThe example in the github repo don't really go into monadic parsers which I found much easier to understand and reason about than applicative parsers. This article goes into the use of monadic parsers and was invaluable for me: <a href=\"https://www.schoolofhaskell.com/school/starting-with-haskell/libraries-and-frameworks/text-manipulation/attoparsec\" target=\"_blank\" title=\"https://www.schoolofhaskell.com/school/starting-with-haskell/libraries-and-frameworks/text-manipulation/attoparsec\">https://www.schoolofhaskell.com/school/starting-with-haskell/libraries-and-frameworks/text-manipulation/attoparsec</a></p>\n<div class=\"youtube-video message_inline_image\"><a data-id=\"RDalzi7mhdY\" href=\"https://www.youtube.com/watch?v=RDalzi7mhdY\" target=\"_blank\" title=\"https://www.youtube.com/watch?v=RDalzi7mhdY\"><img src=\"https://i.ytimg.com/vi/RDalzi7mhdY/default.jpg\"></a></div>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 135830771,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1104",
                    "emoji_name": "haskell",
                    "reaction_type": "realm_emoji",
                    "user": {
                        "email": "santiago.gepigon@gmail.com",
                        "full_name": "Santiago Gepigon III (he) (S2'18)",
                        "id": 120074
                    },
                    "user_id": 120074
                },
                {
                    "emoji_code": "1104",
                    "emoji_name": "haskell",
                    "reaction_type": "realm_emoji",
                    "user": {
                        "email": "peter@push.cx",
                        "full_name": "Peter Bhat Harkins (he) (F2'17)",
                        "id": 102004
                    },
                    "user_id": 102004
                },
                {
                    "emoji_code": "1104",
                    "emoji_name": "haskell",
                    "reaction_type": "realm_emoji",
                    "user": {
                        "email": "vaibhavsagar@gmail.com",
                        "full_name": "Vaibhav Sagar (he) (F1'16)",
                        "id": 100041
                    },
                    "user_id": 100041
                },
                {
                    "emoji_code": "1104",
                    "emoji_name": "haskell",
                    "reaction_type": "realm_emoji",
                    "user": {
                        "email": "felix.czhu@gmail.com",
                        "full_name": "Felix Zhu (F1'18)",
                        "id": 125020
                    },
                    "user_id": 125020
                }
            ],
            "recipient_id": 22667,
            "sender_email": "me@nicksanford.io",
            "sender_full_name": "Nick Sanford (he) (S2'18)",
            "sender_id": 120479,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "I <3 parser combinators",
            "submessages": [],
            "timestamp": 1539610193,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4d074af6cc341ef51b25bb2f738cdb11?d=identicon&version=1",
            "client": "ZulipMobile",
            "content": "<p>Was there a noticeable impact on performance?</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 135831073,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "vaibhavsagar@gmail.com",
            "sender_full_name": "Vaibhav Sagar (he) (F1'16)",
            "sender_id": 100041,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "I <3 parser combinators",
            "submessages": [],
            "timestamp": 1539610395,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/649c2682ffc71d16cddbbbcb3595bc45?d=identicon&version=1",
            "client": "ZulipElectron",
            "content": "<p>Before:<br>\n<a href=\"https://github.com/nicksanford/htorrent/commit/f192e3a222438dbdde1716574b5c89e815fae865#diff-fb6feb48d8708da533675321dfe441cdL24\" target=\"_blank\" title=\"https://github.com/nicksanford/htorrent/commit/f192e3a222438dbdde1716574b5c89e815fae865#diff-fb6feb48d8708da533675321dfe441cdL24\">https://github.com/nicksanford/htorrent/commit/f192e3a222438dbdde1716574b5c89e815fae865#diff-fb6feb48d8708da533675321dfe441cdL24</a><br>\nAfter:<br>\n<a href=\"https://github.com/nicksanford/htorrent/commit/f192e3a222438dbdde1716574b5c89e815fae865#diff-fb6feb48d8708da533675321dfe441cdR99\" target=\"_blank\" title=\"https://github.com/nicksanford/htorrent/commit/f192e3a222438dbdde1716574b5c89e815fae865#diff-fb6feb48d8708da533675321dfe441cdR99\">https://github.com/nicksanford/htorrent/commit/f192e3a222438dbdde1716574b5c89e815fae865#diff-fb6feb48d8708da533675321dfe441cdR99</a></p>\n<p>Also, it removed the main performance bottleneck in my BitTorrent client as the parser combinator only needs to make a single pass, where as my fold / unfold parser was spending a lot of work (potentially O(n^2)) going through byte by byte and trying to match an rpc message on every byte.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 135831099,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "me@nicksanford.io",
            "sender_full_name": "Nick Sanford (he) (S2'18)",
            "sender_id": 120479,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "I <3 parser combinators",
            "submessages": [],
            "timestamp": 1539610436,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/649c2682ffc71d16cddbbbcb3595bc45?d=identicon&version=1",
            "client": "ZulipElectron",
            "content": "<p><span class=\"user-mention\" data-user-id=\"100041\">@Vaibhav Sagar (F1'16)</span>  Massive improvement in performance</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 135831138,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "me@nicksanford.io",
            "sender_full_name": "Nick Sanford (he) (S2'18)",
            "sender_id": 120479,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "I <3 parser combinators",
            "submessages": [],
            "timestamp": 1539610445,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/649c2682ffc71d16cddbbbcb3595bc45?d=identicon&version=1",
            "client": "ZulipElectron",
            "content": "<p>before the parser was 98% of cpu &amp; memory consumptions.  Now it is not even on the radar: <a href=\"https://github.com/nicksanford/htorrent/blob/f192e3a222438dbdde1716574b5c89e815fae865/profiling/big/htorrent.prof#L10\" target=\"_blank\" title=\"https://github.com/nicksanford/htorrent/blob/f192e3a222438dbdde1716574b5c89e815fae865/profiling/big/htorrent.prof#L10\">https://github.com/nicksanford/htorrent/blob/f192e3a222438dbdde1716574b5c89e815fae865/profiling/big/htorrent.prof#L10</a></p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 135831207,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f419",
                    "emoji_name": "octopus",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "santiago.gepigon@gmail.com",
                        "full_name": "Santiago Gepigon III (he) (S2'18)",
                        "id": 120074
                    },
                    "user_id": 120074
                },
                {
                    "emoji_code": "1f419",
                    "emoji_name": "octopus",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "katherine.ye@gmail.com",
                        "full_name": "Katherine Ye (S'13)",
                        "id": 2117
                    },
                    "user_id": 2117
                },
                {
                    "emoji_code": "1f419",
                    "emoji_name": "octopus",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "vaibhavsagar@gmail.com",
                        "full_name": "Vaibhav Sagar (he) (F1'16)",
                        "id": 100041
                    },
                    "user_id": 100041
                }
            ],
            "recipient_id": 22667,
            "sender_email": "me@nicksanford.io",
            "sender_full_name": "Nick Sanford (he) (S2'18)",
            "sender_id": 120479,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "I <3 parser combinators",
            "submessages": [],
            "timestamp": 1539610555,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/649c2682ffc71d16cddbbbcb3595bc45?d=identicon&version=1",
            "client": "ZulipElectron",
            "content": "<p>But even more than performance, the parser now reads like the spec :)</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 135831261,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "me@nicksanford.io",
            "sender_full_name": "Nick Sanford (he) (S2'18)",
            "sender_id": 120479,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "I <3 parser combinators",
            "submessages": [],
            "timestamp": 1539610592,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p>Nice :) Parser combinators are on my \"most satisfying\" list for programming. They are a blast and a great intuitive-but-nontrivial example of a bunch of cool FP concepts.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 135831270,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "I <3 parser combinators",
            "submessages": [],
            "timestamp": 1539610599,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/649c2682ffc71d16cddbbbcb3595bc45?d=identicon&version=1",
            "client": "ZulipElectron",
            "content": "<p>Yeah! And what I love is how they are applicable outside of haskell:<br>\nElixir: <a href=\"https://elixirforum.com/t/nimbleparsec-a-simple-and-fast-parser-combinator-for-elixir/12860\" target=\"_blank\" title=\"https://elixirforum.com/t/nimbleparsec-a-simple-and-fast-parser-combinator-for-elixir/12860\">https://elixirforum.com/t/nimbleparsec-a-simple-and-fast-parser-combinator-for-elixir/12860</a><br>\nClojure: <a href=\"https://github.com/youngnh/parsatron\" target=\"_blank\" title=\"https://github.com/youngnh/parsatron\">https://github.com/youngnh/parsatron</a><br>\nScala: <a href=\"http://bitwalker.org/posts/2013-08-10-learn-by-example-scala-parser-combinators/\" target=\"_blank\" title=\"http://bitwalker.org/posts/2013-08-10-learn-by-example-scala-parser-combinators/\">http://bitwalker.org/posts/2013-08-10-learn-by-example-scala-parser-combinators/</a></p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 135831328,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "me@nicksanford.io",
            "sender_full_name": "Nick Sanford (he) (S2'18)",
            "sender_id": 120479,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "I <3 parser combinators",
            "submessages": [],
            "timestamp": 1539610668,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/c98cd897d78d976aeb69dbc659093719?d=identicon&version=1",
            "client": "ZulipElectron",
            "content": "<p>that before and after looks so satisfying (not to mention the performance gains)!!</p>\n<p>also: before seeing the qualified import I read all the \"BS\" variable name suffixes in my head as bullshit</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 135834586,
            "is_me_message": false,
            "last_edit_timestamp": 1539613905,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "felix.czhu@gmail.com",
            "sender_full_name": "Felix Zhu (F1'18)",
            "sender_id": 125020,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "I <3 parser combinators",
            "submessages": [],
            "timestamp": 1539613667,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/649c2682ffc71d16cddbbbcb3595bc45?d=identicon&version=1",
            "client": "ZulipElectron",
            "content": "<p>That interpretation was pretty fair before the refactor :p</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 135835525,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "me@nicksanford.io",
            "sender_full_name": "Nick Sanford (he) (S2'18)",
            "sender_id": 120479,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "I <3 parser combinators",
            "submessages": [],
            "timestamp": 1539614327,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/ff22292433214ccd87cf6ff9ae34e54ac477eab8?x=x&version=1",
            "client": "website",
            "content": "<p>Does anyone have experience running <code>Euterpea</code> with <code>fluidsynth</code> on ubuntu? I'm trying to get an environment set up to work through <em>haskell school of music</em> this weekend.</p>\n<p>So far all installations seem to have progressed successfully, but running the test code <code>play $ c 4 qn</code> from <code>ghci</code> as prescribed on the the <code>euterpea</code> website does not seem to produce any sound output. I'm attempting to play sound through <code>fluidsynth</code>.</p>\n<p>Any guidance from those who have experienced similar issues would be appreciated.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 137126419,
            "is_me_message": false,
            "last_edit_timestamp": 1541275166,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "ds2643@columbia.edu",
            "sender_full_name": "David Shaked (W2'16)",
            "sender_id": 8995,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "haskell-school-of-music: euterpea",
            "submessages": [],
            "timestamp": 1541275095,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4d074af6cc341ef51b25bb2f738cdb11?d=identicon&version=1",
            "client": "website",
            "content": "<p>This helped me fix a build issue for a client, thanks! <a href=\"https://github.com/kadena-io/pact/pull/248/commits/302e27f9bc0d53c1903e61ea53a9d944dff632c5\" target=\"_blank\" title=\"https://github.com/kadena-io/pact/pull/248/commits/302e27f9bc0d53c1903e61ea53a9d944dff632c5\">https://github.com/kadena-io/pact/pull/248/commits/302e27f9bc0d53c1903e61ea53a9d944dff632c5</a></p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 137126638,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f389",
                    "emoji_name": "tada",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "juliano.solanho@gmail.com",
                        "full_name": "Juliano Bortolozzo Solanho (he) (F1'16)",
                        "id": 100035
                    },
                    "user_id": 100035
                },
                {
                    "emoji_code": "1f389",
                    "emoji_name": "tada",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "sean.martin@nyu.edu",
                        "full_name": "Sean Martin (they) (S2'16)",
                        "id": 9495
                    },
                    "user_id": 9495
                },
                {
                    "emoji_code": "1f389",
                    "emoji_name": "tada",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "libby@daydrea.me",
                        "full_name": "Libby Horacek (she) (SP1'15)",
                        "id": 7081
                    },
                    "user_id": 7081
                }
            ],
            "recipient_id": 22667,
            "sender_email": "vaibhavsagar@gmail.com",
            "sender_full_name": "Vaibhav Sagar (he) (F1'16)",
            "sender_id": 100041,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Get GHC to use less memory while compiling",
            "submessages": [],
            "timestamp": 1541275475,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/ff22292433214ccd87cf6ff9ae34e54ac477eab8?x=x&version=1",
            "client": "website",
            "content": "<p>^ resolved</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 137138949,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "ds2643@columbia.edu",
            "sender_full_name": "David Shaked (W2'16)",
            "sender_id": 8995,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "haskell-school-of-music: euterpea",
            "submessages": [],
            "timestamp": 1541300475,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/e5845e045f9bcd4c95b82b01366893ed8b219f00?x=x&version=1",
            "client": "website",
            "content": "<p><code>&lt;*&gt;</code> has type <code>f (a -&gt; b) -&gt; f a -&gt; f b</code>.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 147384748,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "mjd@plover.com",
            "sender_full_name": "Mark Dominus (indifferent)",
            "sender_id": 7912,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Deeper analogue of <*>",
            "submessages": [],
            "timestamp": 1541782848,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/e5845e045f9bcd4c95b82b01366893ed8b219f00?x=x&version=1",
            "client": "website",
            "content": "<p>I want the corresponding thing that does <code>f (f (a -&gt; b)) -&gt; f (f a) -&gt; f (f b)</code>.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 147384773,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "mjd@plover.com",
            "sender_full_name": "Mark Dominus (indifferent)",
            "sender_id": 7912,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Deeper analogue of <*>",
            "submessages": [],
            "timestamp": 1541782873,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/e5845e045f9bcd4c95b82b01366893ed8b219f00?x=x&version=1",
            "client": "website",
            "content": "<p>How can I get that?</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 147384778,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "mjd@plover.com",
            "sender_full_name": "Mark Dominus (indifferent)",
            "sender_id": 7912,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Deeper analogue of <*>",
            "submessages": [],
            "timestamp": 1541782877,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p><code>liftA2 (&lt;*&gt;)</code> :)</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 147385824,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "2764",
                    "emoji_name": "heart",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "vaibhavsagar@gmail.com",
                        "full_name": "Vaibhav Sagar (he) (F1'16)",
                        "id": 100041
                    },
                    "user_id": 100041
                }
            ],
            "recipient_id": 22667,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Deeper analogue of <*>",
            "submessages": [],
            "timestamp": 1541783780,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/e5845e045f9bcd4c95b82b01366893ed8b219f00?x=x&version=1",
            "client": "website",
            "content": "<p>Aha, thanks!</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 147385839,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "mjd@plover.com",
            "sender_full_name": "Mark Dominus (indifferent)",
            "sender_id": 7912,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Deeper analogue of <*>",
            "submessages": [],
            "timestamp": 1541783811,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p>Can even do <code>liftA2 (lift A2 (&lt;*&gt;))</code> haha.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 147385850,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Deeper analogue of <*>",
            "submessages": [],
            "timestamp": 1541783835,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/e5845e045f9bcd4c95b82b01366893ed8b219f00?x=x&version=1",
            "client": "website",
            "content": "<p>Why is it, that when I asked for the type of <code>(&lt;*&gt;) . (&lt;*&gt;)</code>, I get something that has no <code>Applicative</code> constraints?  Has it decided to specialize this to the <code>(-&gt; e)</code> functor again?</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 147385934,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "mjd@plover.com",
            "sender_full_name": "Mark Dominus (indifferent)",
            "sender_id": 7912,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Deeper analogue of <*>",
            "submessages": [],
            "timestamp": 1541783917,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/e5845e045f9bcd4c95b82b01366893ed8b219f00?x=x&version=1",
            "client": "website",
            "content": "<p>I think you may have meant <code>liftA2 (liftA2 ($))</code>?</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 147385957,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "mjd@plover.com",
            "sender_full_name": "Mark Dominus (indifferent)",
            "sender_id": 7912,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Deeper analogue of <*>",
            "submessages": [],
            "timestamp": 1541783947,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/e5845e045f9bcd4c95b82b01366893ed8b219f00?x=x&version=1",
            "client": "website",
            "content": "<p>That was the first thing I tried.  :)</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 147385965,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "mjd@plover.com",
            "sender_full_name": "Mark Dominus (indifferent)",
            "sender_id": 7912,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Deeper analogue of <*>",
            "submessages": [],
            "timestamp": 1541783960,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p>Oh, sorry, I just meant you can keep on lifting (to get f (f (f ...)))</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 147386213,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Deeper analogue of <*>",
            "submessages": [],
            "timestamp": 1541784212,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p>You're right, continuing to lift doesn't do the same thing.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 147386225,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Deeper analogue of <*>",
            "submessages": [],
            "timestamp": 1541784232,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/e5845e045f9bcd4c95b82b01366893ed8b219f00?x=x&version=1",
            "client": "website",
            "content": "<p><span class=\"emoji emoji-1f44d\" title=\"+1\">:+1:</span></p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 147386272,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "mjd@plover.com",
            "sender_full_name": "Mark Dominus (indifferent)",
            "sender_id": 7912,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Deeper analogue of <*>",
            "submessages": [],
            "timestamp": 1541784247,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p>And I was just wondering the same thing, about how (&lt;<em>&gt;) . (&lt;</em>&gt;) gets rid of the Applicative constraints.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 147386279,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Deeper analogue of <*>",
            "submessages": [],
            "timestamp": 1541784268,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/e5845e045f9bcd4c95b82b01366893ed8b219f00?x=x&version=1",
            "client": "website",
            "content": "<p>I bet it's silently specializing to <code>(-&gt; e)</code>.  That's what it always is.  I hate that so much.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 147386315,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "mjd@plover.com",
            "sender_full_name": "Mark Dominus (indifferent)",
            "sender_id": 7912,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Deeper analogue of <*>",
            "submessages": [],
            "timestamp": 1541784319,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/e5845e045f9bcd4c95b82b01366893ed8b219f00?x=x&version=1",
            "client": "website",
            "content": "<p>Not going down that rabbit hole again.  Not today, anyway.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 147386471,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "mjd@plover.com",
            "sender_full_name": "Mark Dominus (indifferent)",
            "sender_id": 7912,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Deeper analogue of <*>",
            "submessages": [],
            "timestamp": 1541784505,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/e5845e045f9bcd4c95b82b01366893ed8b219f00?x=x&version=1",
            "client": "website",
            "content": "<p>I have <code>matrix m = ZipList (fmap ZipList m)</code> which does what I expect and has type <code>[[a]] -&gt; ZipList (ZipList a)</code>.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 147387086,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "mjd@plover.com",
            "sender_full_name": "Mark Dominus (indifferent)",
            "sender_id": 7912,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Why can't I abstract this function?",
            "submessages": [],
            "timestamp": 1541785280,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/e5845e045f9bcd4c95b82b01366893ed8b219f00?x=x&version=1",
            "client": "website",
            "content": "<p>Now I would like to abstract over <code>ZipList</code>, so I wrote</p>\n<div class=\"codehilite\"><pre><span></span>twice zl m = zl (fmap zl m)\n</pre></div>\n\n\n<p>with the idea that I could then define <code>matrix = twice ZipList</code>.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 147387146,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "mjd@plover.com",
            "sender_full_name": "Mark Dominus (indifferent)",
            "sender_id": 7912,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Why can't I abstract this function?",
            "submessages": [],
            "timestamp": 1541785336,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/e5845e045f9bcd4c95b82b01366893ed8b219f00?x=x&version=1",
            "client": "website",
            "content": "<p>Wrong!  <code>twice</code> does not have the type I expect; it has type <code>Functor f =&gt; (f b -&gt; b) -&gt; f (f b) -&gt; b</code>.  And <code>twice ZipList</code> doesn't typecheck, saying instead <code>cannot construct the infinite type: a ~ ZipList a</code>,</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 147387184,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "mjd@plover.com",
            "sender_full_name": "Mark Dominus (indifferent)",
            "sender_id": 7912,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Why can't I abstract this function?",
            "submessages": [],
            "timestamp": 1541785408,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/e5845e045f9bcd4c95b82b01366893ed8b219f00?x=x&version=1",
            "client": "website",
            "content": "<p>What went wrong here?</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 147387192,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "mjd@plover.com",
            "sender_full_name": "Mark Dominus (indifferent)",
            "sender_id": 7912,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Why can't I abstract this function?",
            "submessages": [],
            "timestamp": 1541785414,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4d074af6cc341ef51b25bb2f738cdb11?d=identicon&version=1",
            "client": "website",
            "content": "<p>what is the type you expect <code>twice</code> to have?</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 147388364,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "vaibhavsagar@gmail.com",
            "sender_full_name": "Vaibhav Sagar (he) (F1'16)",
            "sender_id": 100041,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Why can't I abstract this function?",
            "submessages": [],
            "timestamp": 1541786659,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/e5845e045f9bcd4c95b82b01366893ed8b219f00?x=x&version=1",
            "client": "website",
            "content": "<p>I think the type I wanted was <code>twice :: (Functor f, Functor g) =&gt; (f a -&gt; g a) -&gt; (f (f a)) -&gt; (g (g a))  </code>.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 147388577,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "mjd@plover.com",
            "sender_full_name": "Mark Dominus (indifferent)",
            "sender_id": 7912,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Why can't I abstract this function?",
            "submessages": [],
            "timestamp": 1541786909,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/e5845e045f9bcd4c95b82b01366893ed8b219f00?x=x&version=1",
            "client": "website",
            "content": "<p>I get the same result as GHC when I do the unification on paper, but I'm not sure where the difference has come in.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 147388590,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "mjd@plover.com",
            "sender_full_name": "Mark Dominus (indifferent)",
            "sender_id": 7912,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Why can't I abstract this function?",
            "submessages": [],
            "timestamp": 1541786930,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4d074af6cc341ef51b25bb2f738cdb11?d=identicon&version=1",
            "client": "website",
            "content": "<p>is that first argument a natural transformation, i.e. <code>forall a. (f a -&gt; g a)</code>?</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 147388743,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "vaibhavsagar@gmail.com",
            "sender_full_name": "Vaibhav Sagar (he) (F1'16)",
            "sender_id": 100041,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Why can't I abstract this function?",
            "submessages": [],
            "timestamp": 1541787064,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4d074af6cc341ef51b25bb2f738cdb11?d=identicon&version=1",
            "client": "website",
            "content": "<p>(not sure if that makes a difference, just thinking out loud)</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 147388758,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "vaibhavsagar@gmail.com",
            "sender_full_name": "Vaibhav Sagar (he) (F1'16)",
            "sender_id": 100041,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Why can't I abstract this function?",
            "submessages": [],
            "timestamp": 1541787091,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/e5845e045f9bcd4c95b82b01366893ed8b219f00?x=x&version=1",
            "client": "website",
            "content": "<p>Yes, that is what I want.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 147388760,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "mjd@plover.com",
            "sender_full_name": "Mark Dominus (indifferent)",
            "sender_id": 7912,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Why can't I abstract this function?",
            "submessages": [],
            "timestamp": 1541787098,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/e5845e045f9bcd4c95b82b01366893ed8b219f00?x=x&version=1",
            "client": "website",
            "content": "<p>It was in some sense unreasonable to expect to get two Functor constraints in the type of <code>twice</code> since it only mentioned <code>fmap</code> once.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 147388825,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "mjd@plover.com",
            "sender_full_name": "Mark Dominus (indifferent)",
            "sender_id": 7912,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Why can't I abstract this function?",
            "submessages": [],
            "timestamp": 1541787133,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/e5845e045f9bcd4c95b82b01366893ed8b219f00?x=x&version=1",
            "client": "website",
            "content": "<p>But I still don't understand what is going on.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 147388833,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "mjd@plover.com",
            "sender_full_name": "Mark Dominus (indifferent)",
            "sender_id": 7912,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Why can't I abstract this function?",
            "submessages": [],
            "timestamp": 1541787142,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4d074af6cc341ef51b25bb2f738cdb11?d=identicon&version=1",
            "client": "website",
            "content": "<p>This seems to work:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"cm\">{-# LANGUAGE RankNTypes #-}</span>\n\n<span class=\"nf\">twice</span> <span class=\"ow\">::</span> <span class=\"p\">(</span><span class=\"kt\">Functor</span> <span class=\"n\">f</span><span class=\"p\">,</span> <span class=\"kt\">Functor</span> <span class=\"n\">g</span><span class=\"p\">)</span> <span class=\"ow\">=&gt;</span> <span class=\"p\">(</span><span class=\"n\">forall</span> <span class=\"n\">a</span><span class=\"o\">.</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"ow\">-&gt;</span> <span class=\"n\">g</span> <span class=\"n\">a</span><span class=\"p\">)</span> <span class=\"ow\">-&gt;</span> <span class=\"p\">(</span><span class=\"n\">f</span> <span class=\"p\">(</span><span class=\"n\">f</span> <span class=\"n\">a</span><span class=\"p\">))</span> <span class=\"ow\">-&gt;</span> <span class=\"p\">(</span><span class=\"n\">g</span> <span class=\"p\">(</span><span class=\"n\">g</span> <span class=\"n\">a</span><span class=\"p\">))</span>\n<span class=\"nf\">twice</span> <span class=\"n\">zl</span> <span class=\"n\">m</span> <span class=\"ow\">=</span> <span class=\"n\">zl</span> <span class=\"p\">(</span><span class=\"n\">fmap</span> <span class=\"n\">zl</span> <span class=\"n\">m</span><span class=\"p\">)</span>\n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 147388933,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "vaibhavsagar@gmail.com",
            "sender_full_name": "Vaibhav Sagar (he) (F1'16)",
            "sender_id": 100041,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Why can't I abstract this function?",
            "submessages": [],
            "timestamp": 1541787290,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/e5845e045f9bcd4c95b82b01366893ed8b219f00?x=x&version=1",
            "client": "website",
            "content": "<p>Sure, but what happened with my original definition?  Why does it work for <code>ZipList</code> but not when I abstract <code>ZipList</code> to be a bound variable?</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 147388968,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "mjd@plover.com",
            "sender_full_name": "Mark Dominus (indifferent)",
            "sender_id": 7912,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Why can't I abstract this function?",
            "submessages": [],
            "timestamp": 1541787335,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4d074af6cc341ef51b25bb2f738cdb11?d=identicon&version=1",
            "client": "website",
            "content": "<p>because Haskell doesn't know that you guarantee that <code>zl</code> is a natural transformation maybe?</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 147389059,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "vaibhavsagar@gmail.com",
            "sender_full_name": "Vaibhav Sagar (he) (F1'16)",
            "sender_id": 100041,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Why can't I abstract this function?",
            "submessages": [],
            "timestamp": 1541787411,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4d074af6cc341ef51b25bb2f738cdb11?d=identicon&version=1",
            "client": "website",
            "content": "<p>Another solution is to use <code>Compose</code> from <a href=\"http://hackage.haskell.org/package/base/docs/Data-Functor-Compose.html\" target=\"_blank\" title=\"http://hackage.haskell.org/package/base/docs/Data-Functor-Compose.html\"><code>Data.Functor.Compose</code></a></p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 147390642,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "vaibhavsagar@gmail.com",
            "sender_full_name": "Vaibhav Sagar (he) (F1'16)",
            "sender_id": 100041,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Why can't I abstract this function?",
            "submessages": [],
            "timestamp": 1541788767,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/187931dc9ca73b56a4e014e6009c00a1?d=identicon&version=1",
            "client": "website",
            "content": "<p>I'm no expert but I believe the reason is that without RankNTypes, z1 is limited to a specific type, and you're asking it to be of two types at once: both <code>f a -&gt; g a</code> and <code>f g a -&gt; g g a</code>. RankNTypes allows it to generalize that into <code>forall x. f x -&gt; g x</code> (changing variable names to emphasize the lack of an immediate relation between <code>x</code> and <code>a</code>).</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 147444610,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "me@joeym.org",
            "sender_full_name": "Joey Marianer (he) (m1'18)",
            "sender_id": 105228,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Why can't I abstract this function?",
            "submessages": [],
            "timestamp": 1541877289,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4d074af6cc341ef51b25bb2f738cdb11?d=identicon&version=1",
            "client": "website",
            "content": "<p><a href=\"https://github.com/nh2/lambdabot-zulip\" target=\"_blank\" title=\"https://github.com/nh2/lambdabot-zulip\">https://github.com/nh2/lambdabot-zulip</a></p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 148056304,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f389",
                    "emoji_name": "tada",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "charles@nrwhl.xyz",
                        "full_name": "Charles Chamberlain (F1'17)",
                        "id": 8318
                    },
                    "user_id": 8318
                },
                {
                    "emoji_code": "1f389",
                    "emoji_name": "tada",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "sean.martin@nyu.edu",
                        "full_name": "Sean Martin (they) (S2'16)",
                        "id": 9495
                    },
                    "user_id": 9495
                },
                {
                    "emoji_code": "1f389",
                    "emoji_name": "tada",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "santiago.gepigon@gmail.com",
                        "full_name": "Santiago Gepigon III (he) (S2'18)",
                        "id": 120074
                    },
                    "user_id": 120074
                },
                {
                    "emoji_code": "1f389",
                    "emoji_name": "tada",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "williamsykesfisher@gmail.com",
                        "full_name": "William Sykes Fisher (he) (F2'18)",
                        "id": 129933
                    },
                    "user_id": 129933
                }
            ],
            "recipient_id": 22667,
            "sender_email": "vaibhavsagar@gmail.com",
            "sender_full_name": "Vaibhav Sagar (he) (F1'16)",
            "sender_id": 100041,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Lambdabot for Zulip",
            "submessages": [],
            "timestamp": 1542737088,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/612c7c2a108d7850c62d1d2293a481aa42855408?x=x&version=2",
            "client": "website",
            "content": "<p>I do a lot of haskell development on a computer with 1g of memory. It's not ideal, but adding swapspace has helped sometimes.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 148158271,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "PLRedmond@gmail.com",
            "sender_full_name": "Patrick Redmond (W'14)",
            "sender_id": 5014,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Get GHC to use less memory while compiling",
            "submessages": [],
            "timestamp": 1542870550,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/612c7c2a108d7850c62d1d2293a481aa42855408?x=x&version=2",
            "client": "website",
            "content": "<p><code>-j1</code> is a very important piece</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 148158273,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "PLRedmond@gmail.com",
            "sender_full_name": "Patrick Redmond (W'14)",
            "sender_id": 5014,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Get GHC to use less memory while compiling",
            "submessages": [],
            "timestamp": 1542870578,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/612c7c2a108d7850c62d1d2293a481aa42855408?x=x&version=2",
            "client": "website",
            "content": "<p>adding <code>--fast</code> (for stack) or otherwise turning off optimization passes helps also, since many of those are not really optimized</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 148158325,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "PLRedmond@gmail.com",
            "sender_full_name": "Patrick Redmond (W'14)",
            "sender_id": 5014,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Get GHC to use less memory while compiling",
            "submessages": [],
            "timestamp": 1542870619,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/612c7c2a108d7850c62d1d2293a481aa42855408?x=x&version=2",
            "client": "website",
            "content": "<p>I've found the linker phase to be the biggest memory user, though, and I have no idea how to improve that</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 148158338,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "PLRedmond@gmail.com",
            "sender_full_name": "Patrick Redmond (W'14)",
            "sender_id": 5014,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Get GHC to use less memory while compiling",
            "submessages": [],
            "timestamp": 1542870671,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/efe57f0998df065470ff42c938f781cf?d=identicon&version=1",
            "client": "website",
            "content": "<p>I've been slowly turning the Haskell web app I maintain from 200+-line-long staircasing functions to nice, small composable functions that \"do one thing\". Here's what the original situation looked like:</p>\n<div class=\"codehilite\"><pre><span></span>handleThing :: Ctxt -&gt; IO (Maybe Response)\nhandleThing ctxt = do\n  mResult &lt;- doSomething ctxt\n  case mResult of\n    Nothing -&gt; -- report doSomething failed\n    Just result -&gt; do\n        mSomethingElse &lt;- scaryOperation ctxt\n        case somethingElse of\n          Nothing -&gt; -- now I need to rollback doSomething AND report that scaryOperation failed\n -- etcetera\n</pre></div>\n\n\n<p>This could go on for literally hundreds of lines if, e.g. I need to create a customer, create an order, charge a card, create a subscription, update the order, assign some files, yadda yadda yadda. </p>\n<p>I've improved things a bit by wrapping my operations in an ExceptT monad transformer, like so:</p>\n<div class=\"codehilite\"><pre><span></span>handleThing :: Ctxt -&gt; IO (Maybe Response)\nhandleThing = do\n  overallResult &lt;- runExceptT $ do\n    result &lt;- doSomething Ctxt\n    somethingElse &lt;- scaryOperation ctxt\n    --etc\n</pre></div>\n\n\n<p>and</p>\n<div class=\"codehilite\"><pre><span></span>scaryOperation :: Ctxt -&gt; ExceptT Text IO Result\nscaryOperation ctxt =\n  mResult &lt;- oldScaryOperation ctxt\n  case mResult of\n    Nothing -&gt; do\n      rollbackDoSomething\n      throwError &quot;Something went wrong in scaryOperation&quot;\n    Just res -&gt; return res\n</pre></div>\n\n\n<p>And this mostly works and feels much better. However, it bothers me that, even though I've broken the giant function apart, and the functions seem independent now, there's still an assumed ordering that creates a dependency. </p>\n<p>A client recently asked for a feature that combined elements of donation and subscription functionality we already had. I'd already broken apart a huge donation function and a huge subscription function, but I still wasn't able to compose the smaller functions to create the feature. The subscription rollbacks didn't know about the donation transactions and vice versa. I had to just copy/paste and make \"subscriptionDonation\" versions of all of them. SO UNSATISFYING.</p>\n<p>The solution I'm pondering looks something like this:</p>\n<div class=\"codehilite\"><pre><span></span>handleThing :: Ctxt -&gt; IO (Maybe Response)\nhandleThing = do\n  overallResult &lt;- runExceptT $ do\n    (result, rollback) &lt;- doSomething Ctxt\n    (somethingElse, rollback2) &lt;- scaryOperation rollback ctxt\n    anotherThing &lt;- anotherScaryOperation (rollback &lt;&gt; rollback 2) ctxt\n    --etc\n</pre></div>\n\n\n<p>So each operation returns a way to roll itself back, then those are passed to consecutive operations that need to be able to roll those operations back.</p>\n<div class=\"codehilite\"><pre><span></span>scaryOperation :: Ctxt -&gt; Rollbacks -&gt; ExceptT Text IO (Result, Rollback)\nscaryOperation ctxt rollbacks =\n  mResult &lt;- oldScaryOperation ctxt\n  case mResult of\n    Nothing -&gt; do\n      runRollbacks ctxt rollbacks\n      throwError &quot;Something went wrong in scaryOperation&quot;\n    Just res -&gt; return (res, rollbackScaryOperation)\n</pre></div>\n\n\n<p>Is this a known pattern? Is there a name for it? (Is the name \"absurd over-engineering\"?)</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 150932305,
            "is_me_message": false,
            "last_edit_timestamp": 1544021784,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "libby@daydrea.me",
            "sender_full_name": "Libby Horacek (she) (SP1'15)",
            "sender_id": 7081,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "\"Rollback\" pattern?",
            "submessages": [],
            "timestamp": 1544020524,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4d074af6cc341ef51b25bb2f738cdb11?d=identicon&version=1",
            "client": "website",
            "content": "<p>smells like continuations</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 150939220,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "vaibhavsagar@gmail.com",
            "sender_full_name": "Vaibhav Sagar (he) (F1'16)",
            "sender_id": 100041,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "\"Rollback\" pattern?",
            "submessages": [],
            "timestamp": 1544026070,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/efe57f0998df065470ff42c938f781cf?d=identicon&version=1",
            "client": "website",
            "content": "<p>hmmm yeah I see that...</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 150940634,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "libby@daydrea.me",
            "sender_full_name": "Libby Horacek (she) (SP1'15)",
            "sender_id": 7081,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "\"Rollback\" pattern?",
            "submessages": [],
            "timestamp": 1544027145,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/009427e1b56c85d4a70a091905cf7a305c109dc6?x=x&version=5",
            "client": "ZulipElectron",
            "content": "<p>My coworker's conference talk got uploaded today, and it reminded me that I did a small one on Profunctor Optics people might be interested in. I haven't looked at this in a bit but I think the modules can be read Algebra -&gt; Products -&gt; Sums -&gt; Optics -&gt; Profunctors -&gt; ProfunctorOptics <span class=\"emoji emoji-1f642\" title=\"slight smile\">:slight_smile:</span><br>\nslides: <a href=\"https://slides.com/henelikailahi/deck/fullscreen#/8/6\" target=\"_blank\" title=\"https://slides.com/henelikailahi/deck/fullscreen#/8/6\">https://slides.com/henelikailahi/deck/fullscreen#/8/6</a><br>\ncodes: <a href=\"https://bitbucket.org/hkailahi_tv/profunctor-optics/src/master/src/\" target=\"_blank\" title=\"https://bitbucket.org/hkailahi_tv/profunctor-optics/src/master/src/\">https://bitbucket.org/hkailahi_tv/profunctor-optics/src/master/src/</a></p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 152303712,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "heneli@kailahi.com",
            "sender_full_name": "Heneli Ta'angafala Kailahi (SP2'17)",
            "sender_id": 100771,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Profunctor Optics",
            "submessages": [],
            "timestamp": 1545359669,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/009427e1b56c85d4a70a091905cf7a305c109dc6?x=x&version=5",
            "client": "ZulipElectron",
            "content": "<p>I signed up to give a type-level programming talk in 2 weeks, so if anyone has ideas hmu.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 152303864,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "heneli@kailahi.com",
            "sender_full_name": "Heneli Ta'angafala Kailahi (SP2'17)",
            "sender_id": 100771,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Profunctor Optics",
            "submessages": [],
            "timestamp": 1545359908,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/a6a0ff0a4a9a86ae7bc4524453d439bd?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-id=\"111960\">@Adam Palay (SP2'18)</span> and I thought it would be funny to show that Haskell's type system is Turing complete (and therefore that we could get the typechecker stuck in an infinite loop) by implementing a model of computation in the type system-- <a href=\"https://github.com/adampalay/SKITypes\" target=\"_blank\" title=\"https://github.com/adampalay/SKITypes\">here</a> is his implementation of the SKI calculus in the type system. I'm not sure if it would make a good talk but it was a fun thing to think about!</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 152313305,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "2764",
                    "emoji_name": "heart",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "adampalay@gmail.com",
                        "full_name": "Adam Palay (he) (SP2'18)",
                        "id": 111960
                    },
                    "user_id": 111960
                },
                {
                    "emoji_code": "1100",
                    "emoji_name": "lambda",
                    "reaction_type": "realm_emoji",
                    "user": {
                        "email": "adampalay@gmail.com",
                        "full_name": "Adam Palay (he) (SP2'18)",
                        "id": 111960
                    },
                    "user_id": 111960
                },
                {
                    "emoji_code": "1f62e",
                    "emoji_name": "surprise",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "vaibhavsagar@gmail.com",
                        "full_name": "Vaibhav Sagar (he) (F1'16)",
                        "id": 100041
                    },
                    "user_id": 100041
                },
                {
                    "emoji_code": "1f62e",
                    "emoji_name": "surprise",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "felix.czhu@gmail.com",
                        "full_name": "Felix Zhu (F1'18)",
                        "id": 125020
                    },
                    "user_id": 125020
                }
            ],
            "recipient_id": 22667,
            "sender_email": "annie.cherk@gmail.com",
            "sender_full_name": "Annie Cherkaev (she/they) (m4'18)",
            "sender_id": 9502,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Profunctor Optics",
            "submessages": [],
            "timestamp": 1545376672,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/009427e1b56c85d4a70a091905cf7a305c109dc6?x=x&version=5",
            "client": "ZulipElectron",
            "content": "<p>Oooo thanks that looks cool!</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 152334479,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "heneli@kailahi.com",
            "sender_full_name": "Heneli Ta'angafala Kailahi (SP2'17)",
            "sender_id": 100771,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Profunctor Optics",
            "submessages": [],
            "timestamp": 1545403231,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p>This is such a fun post: <a href=\"https://patternsinfp.wordpress.com/2018/11/21/how-to-design-co-programs/\" target=\"_blank\" title=\"https://patternsinfp.wordpress.com/2018/11/21/how-to-design-co-programs/\">https://patternsinfp.wordpress.com/2018/11/21/how-to-design-co-programs/</a>.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 155035457,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "+1",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "dkarapetyan@scriptcrafty.com",
                        "full_name": "David Karapetyan (W1'14)",
                        "id": 6929
                    },
                    "user_id": 6929
                },
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "+1",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "eha@posteo.de",
                        "full_name": "Eugene Ha (he) (S1'18)",
                        "id": 116366
                    },
                    "user_id": 116366
                }
            ],
            "recipient_id": 22667,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "structural corecursion",
            "submessages": [],
            "timestamp": 1547394820,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/b2a6b06ba040fd7f7c2acd4d1440e7de?d=identicon&version=1",
            "client": "website",
            "content": "<p>I didn't know the Haskell Wiki linked to a whole lot of freely available Functional Pearls, which are relatively easy-to-read papers documenting instructive patterns in functional programming. They are much more polished and accessible than standard research papers, and more than once (e.g., Applicatives) I found that the corresponding paper is more insightful than any other reference; I highly recommend using some of those as learning material if you are interested in a specific topic! Here's a link for anyone else who also didn't know about their availability: <a href=\"https://wiki.haskell.org/Research_papers/Functional_pearls\" target=\"_blank\" title=\"https://wiki.haskell.org/Research_papers/Functional_pearls\">https://wiki.haskell.org/Research_papers/Functional_pearls</a></p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 156379212,
            "is_me_message": false,
            "last_edit_timestamp": 1547867290,
            "reactions": [
                {
                    "emoji_code": "1f3af",
                    "emoji_name": "bulls_eye",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "recurse@dbalan.in",
                        "full_name": "Dhananjay Balan (he) (W2'19)",
                        "id": 158692
                    },
                    "user_id": 158692
                },
                {
                    "emoji_code": "26aa",
                    "emoji_name": "white_circle",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "outofthemadness@gmail.com",
                        "full_name": "James A. Keene (he) (m2'18)",
                        "id": 887
                    },
                    "user_id": 887
                },
                {
                    "emoji_code": "1f3af",
                    "emoji_name": "bulls_eye",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "tenorbiel@gmail.com",
                        "full_name": "Tenor Tenor (they/he) (m4'19)",
                        "id": 158532
                    },
                    "user_id": 158532
                }
            ],
            "recipient_id": 22667,
            "sender_email": "mauricio@collares.org",
            "sender_full_name": "Mauricio Collares (he) (W2'19)",
            "sender_id": 158563,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Functional Pearls",
            "submessages": [],
            "timestamp": 1547827704,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4d074af6cc341ef51b25bb2f738cdb11?d=identicon&version=1",
            "client": "ZulipMobile",
            "content": "<p><a href=\"https://twitter.com/lambdazai/status/1079052761248026624?s=19\" target=\"_blank\" title=\"https://twitter.com/lambdazai/status/1079052761248026624?s=19\">https://twitter.com/lambdazai/status/1079052761248026624?s=19</a></p>\n<div class=\"inline-preview-twitter\"><div class=\"twitter-tweet\"><a href=\"https://twitter.com/lambdazai/status/1079052761248026624?s=19\" target=\"_blank\"><img class=\"twitter-avatar\" src=\"https://pbs.twimg.com/profile_images/1076587542517088256/MOcjMWN6_normal.jpg\"></a><p>new year's resolution: read lots of functional pearls</p><span>- deshalb (@lambdazai)</span></div></div>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 156486668,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "vaibhavsagar@gmail.com",
            "sender_full_name": "Vaibhav Sagar (he) (F1'16)",
            "sender_id": 100041,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Functional Pearls",
            "submessages": [],
            "timestamp": 1548000098,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4d074af6cc341ef51b25bb2f738cdb11?d=identicon&version=1",
            "client": "website",
            "content": "<p>^ contains links to more resources</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 156495283,
            "is_me_message": false,
            "last_edit_timestamp": 1548104212,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "vaibhavsagar@gmail.com",
            "sender_full_name": "Vaibhav Sagar (he) (F1'16)",
            "sender_id": 100041,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Functional Pearls",
            "submessages": [],
            "timestamp": 1548014064,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/317fbbc77f88bb984337d8e6030dd1218ff59252?x=x&version=9",
            "client": "ZulipElectron",
            "content": "<p><a href=\"/user_uploads/13/Q9S-nSB-EG9dtSbDpz-D1ocN/haskell-programming-1.0RC3-screen.pdf\" target=\"_blank\" title=\"haskell-programming-1.0RC3-screen.pdf\">haskell-programming-1.0RC3-screen.pdf</a>  I couple people have asked me for this PDF (but please don't post it publicly, thanks).</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 156711668,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "charles.lu@columbia.edu",
            "sender_full_name": "Charlie Lu (W2'19)",
            "sender_id": 158530,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Haskell Programming from First Principles book",
            "submessages": [],
            "timestamp": 1548267708,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/009427e1b56c85d4a70a091905cf7a305c109dc6?x=x&version=5",
            "client": "ZulipElectron",
            "content": "<p>I learned off a shared pdf when I was at RC, and have since bought the book (and plan to buy the next ones). I'm pretty sure the author's are very understanding if you can't afford the book and offer discounts if you reach out</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 156736195,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "heneli@kailahi.com",
            "sender_full_name": "Heneli Ta'angafala Kailahi (SP2'17)",
            "sender_id": 100771,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Haskell Programming from First Principles book",
            "submessages": [],
            "timestamp": 1548287637,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/009427e1b56c85d4a70a091905cf7a305c109dc6?x=x&version=5",
            "client": "ZulipElectron",
            "content": "<p>Yeah <a href=\"https://twitter.com/haskellbook/status/724304591379025920\" target=\"_blank\" title=\"https://twitter.com/haskellbook/status/724304591379025920\">https://twitter.com/haskellbook/status/724304591379025920</a></p>\n<div class=\"inline-preview-twitter\"><div class=\"twitter-tweet\"><a href=\"https://twitter.com/haskellbook/status/724304591379025920\" target=\"_blank\"><img class=\"twitter-avatar\" src=\"https://pbs.twimg.com/profile_images/534078237840650241/25p37mV3_normal.png\"></a><p><a href=\"https://twitter.com/alexisgallepe\" target=\"_blank\" title=\"https://twitter.com/alexisgallepe\">@alexisgallepe</a> <a href=\"https://twitter.com/ryoia\" target=\"_blank\" title=\"https://twitter.com/ryoia\">@ryoia</a> <a href=\"https://twitter.com/zacanger\" target=\"_blank\" title=\"https://twitter.com/zacanger\">@zacanger</a> students should email us, we make sure everyone gets a book, whatever their means.</p><span>- Haskell Book (@haskellbook)</span></div></div>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 156736242,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "heneli@kailahi.com",
            "sender_full_name": "Heneli Ta'angafala Kailahi (SP2'17)",
            "sender_id": 100771,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Haskell Programming from First Principles book",
            "submessages": [],
            "timestamp": 1548287655,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/317fbbc77f88bb984337d8e6030dd1218ff59252?x=x&version=9",
            "client": "ZulipElectron",
            "content": "<p>Yes, please support the authors if you enjoy the book. It's well worth it. <a href=\"http://haskellbook.com/\" target=\"_blank\" title=\"http://haskellbook.com/\">http://haskellbook.com/</a></p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 156742680,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "charles.lu@columbia.edu",
            "sender_full_name": "Charlie Lu (W2'19)",
            "sender_id": 158530,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Haskell Programming from First Principles book",
            "submessages": [],
            "timestamp": 1548295593,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/317fbbc77f88bb984337d8e6030dd1218ff59252?x=x&version=9",
            "client": "ZulipElectron",
            "content": "<p><a href=\"https://wiki.haskell.org/99_questions\" target=\"_blank\" title=\"https://wiki.haskell.org/99_questions\">https://wiki.haskell.org/99_questions</a></p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 157230868,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "charles.lu@columbia.edu",
            "sender_full_name": "Charlie Lu (W2'19)",
            "sender_id": 158530,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "nice and easy problems",
            "submessages": [],
            "timestamp": 1548889018,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/1316da00218a425032fe2e4a5a1bf125?d=identicon&version=1",
            "client": "website",
            "content": "<p>A nice monad tutorial: <a href=\"http://blog.sigfpe.com/2007/04/trivial-monad.html\" target=\"_blank\" title=\"http://blog.sigfpe.com/2007/04/trivial-monad.html\">http://blog.sigfpe.com/2007/04/trivial-monad.html</a></p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 157231009,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "+1",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "meredith@paom.com",
                        "full_name": "Meredith Finkelstein (W2'19)",
                        "id": 198453
                    },
                    "user_id": 198453
                }
            ],
            "recipient_id": 22667,
            "sender_email": "billy1kaplan@gmail.com",
            "sender_full_name": "Billy Kaplan (he) (W1'18)",
            "sender_id": 134184,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "nice and easy problems",
            "submessages": [],
            "timestamp": 1548889177,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/b2a6b06ba040fd7f7c2acd4d1440e7de?d=identicon&version=1",
            "client": "website",
            "content": "<p>I am doing Cryptopals in Haskell and I decided to refactor my code to never use partial functions. When doing base conversion, there are a ton of \"Maybe a\" return types, corresponding to the fact that the input string might be malformed. Chaining error handling is a breeze with the &lt;$&gt; and &lt;*&gt; operators, so far so good. But before I added the Maybes, I tended to write my functions in a point-free way:</p>\n<div class=\"codehilite\"><pre><span></span>unapplyDigitsTable :: BS.ByteString -&gt; BS.ByteString -&gt; [Int]\nintFromDigits :: Int -&gt; [Int] -&gt; Int\nbaseToInt :: BS.ByteString -&gt; BS.ByteString -&gt; Int\nbaseToInt table = (intFromDigits base) . (unapplyDigitsTable table) where base = BS.length table\n</pre></div>\n\n\n<p>Now, my functions look like this</p>\n<div class=\"codehilite\"><pre><span></span>unapplyDigitsTable :: BS.ByteString -&gt; BS.ByteString -&gt; Maybe [Int]\nintFromDigits :: Int -&gt; [Int] -&gt; Int\nbaseToInt :: BS.ByteString -&gt; BS.ByteString -&gt; Maybe Int\nbaseToInt table digits = (intFromDigits base) &lt;$&gt; (unapplyDigitsTable table digits) where base = BS.length table\n</pre></div>\n\n\n<p>Is there any way I can keep writing point-free functions, but using the applicative machinery? Do I need to lift a whole bunch of things?</p>\n<p>Edit: I guess fmap (intFromDigits base) . (unapplyDigitsTable table) is fine. I was just too set on using &lt;$&gt;, but this is more readable :)</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 157301253,
            "is_me_message": false,
            "last_edit_timestamp": 1548966198,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "mauricio@collares.org",
            "sender_full_name": "Mauricio Collares (he) (W2'19)",
            "sender_id": 158563,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "point-free usage of applicatives",
            "submessages": [],
            "timestamp": 1548964795,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/8da25fc620831b661b032ac34b666707?d=identicon&version=1",
            "client": "website",
            "content": "<p>Check out <code>(&lt;=&lt;)</code> from Control.Monad. Not 100% sure how to exactly use it for your code, but it's the analog of <code>(.)</code> for monadic functions.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 158916880,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "sefim96@gmail.com",
            "sender_full_name": "Joseph Morag (he) (SP1'19)",
            "sender_id": 203861,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "point-free usage of applicatives",
            "submessages": [],
            "timestamp": 1550608665,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/57ad6b289d2b066f6497c2c7a542f246?d=identicon&version=1",
            "client": "website",
            "content": "<p>I'm resurrecting this thread to say that I did a thing with Servant this weekend, and <span class=\"user-mention\" data-user-id=\"100041\">@Vaibhav Sagar (F1'16)</span>, I found your blog post useful!  I agree that it's helpful to have a more minimal example of what Servant can do.  (What I was doing was actually even <em>more</em> minimal.)</p>\n<p>(<span class=\"user-mention\" data-user-id=\"100771\">@Heneli Ta'angafala Kailahi (SP2'17)</span>, aww, sorry to hear that!)</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 159957108,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f642",
                    "emoji_name": "slight_smile",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "vaibhavsagar@gmail.com",
                        "full_name": "Vaibhav Sagar (he) (F1'16)",
                        "id": 100041
                    },
                    "user_id": 100041
                }
            ],
            "recipient_id": 22667,
            "sender_email": "lindsey@composition.al",
            "sender_full_name": "Lindsey Kuper (she)",
            "sender_id": 2170,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Junior Haskell Interview",
            "submessages": [],
            "timestamp": 1551738428,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4d074af6cc341ef51b25bb2f738cdb11?d=identicon&version=1",
            "client": "website",
            "content": "<p>Yay! Glad you found it useful.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 159957219,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "vaibhavsagar@gmail.com",
            "sender_full_name": "Vaibhav Sagar (he) (F1'16)",
            "sender_id": 100041,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Junior Haskell Interview",
            "submessages": [],
            "timestamp": 1551738509,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/009427e1b56c85d4a70a091905cf7a305c109dc6?x=x&version=5",
            "client": "ZulipElectron",
            "content": "<p><span class=\"user-mention\" data-user-id=\"2170\">@Lindsey Kuper</span> Forgot to update, but it worked out! I started another Haskell position at TVision shortly after</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 159965763,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f389",
                    "emoji_name": "tada",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "lindsey@composition.al",
                        "full_name": "Lindsey Kuper (she)",
                        "id": 2170
                    },
                    "user_id": 2170
                }
            ],
            "recipient_id": 22667,
            "sender_email": "heneli@kailahi.com",
            "sender_full_name": "Heneli Ta'angafala Kailahi (SP2'17)",
            "sender_id": 100771,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Junior Haskell Interview",
            "submessages": [],
            "timestamp": 1551746243,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/009427e1b56c85d4a70a091905cf7a305c109dc6?x=x&version=5",
            "client": "ZulipElectron",
            "content": "<p>Servant is super cool! There's a lot of great posts. I also really enjoyed <a href=\"https://arow.info/blog/posts/2015-07-10-servant-intro.html\" target=\"_blank\" title=\"https://arow.info/blog/posts/2015-07-10-servant-intro.html\">https://arow.info/blog/posts/2015-07-10-servant-intro.html</a> and <a href=\"https://www.servant.dev/posts/2018-07-12-servant-dsl-typelevel.html\" target=\"_blank\" title=\"https://www.servant.dev/posts/2018-07-12-servant-dsl-typelevel.html\">https://www.servant.dev/posts/2018-07-12-servant-dsl-typelevel.html</a></p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 159965910,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "heneli@kailahi.com",
            "sender_full_name": "Heneli Ta'angafala Kailahi (SP2'17)",
            "sender_id": 100771,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Junior Haskell Interview",
            "submessages": [],
            "timestamp": 1551746391,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/009427e1b56c85d4a70a091905cf7a305c109dc6?x=x&version=5",
            "client": "ZulipElectron",
            "content": "<p>And the paper is fantastic</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 159965948,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "heneli@kailahi.com",
            "sender_full_name": "Heneli Ta'angafala Kailahi (SP2'17)",
            "sender_id": 100771,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Junior Haskell Interview",
            "submessages": [],
            "timestamp": 1551746403,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/57ad6b289d2b066f6497c2c7a542f246?d=identicon&version=1",
            "client": "website",
            "content": "<p>I like it, but I had to dig around a whole lot to do what I wanted to do.  I had a couple of endpoints that literally just return strings -- not even JSON -- and it took forever to figure out how to do that with Servant because all the examples were doing more sophisticated things, haha.  I get the feeling like the docs are written more to show off what's cool about Servant than to help people use it to get work done.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 159976433,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "lindsey@composition.al",
            "sender_full_name": "Lindsey Kuper (she)",
            "sender_id": 2170,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Junior Haskell Interview",
            "submessages": [],
            "timestamp": 1551761289,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/57ad6b289d2b066f6497c2c7a542f246?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-id=\"100041\">@Vaibhav Sagar (F1'16)</span> I actually ended up sharing your post with my student who's learning Haskell.  We're using Servant, but the post is also nice as an example of putting a data structure inside an IORef.  Most of the IORef tutorials I've seen are just like a simple counter inside an IORef, so it was nice to see something a little bit more interesting.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 160512906,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "lindsey@composition.al",
            "sender_full_name": "Lindsey Kuper (she)",
            "sender_id": 2170,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Junior Haskell Interview",
            "submessages": [],
            "timestamp": 1552334538,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4d074af6cc341ef51b25bb2f738cdb11?d=identicon&version=1",
            "client": "ZulipMobile",
            "content": "<p>That's so wonderful to hear! I wasn't expecting this blog post to have that much longevity :)</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 160535829,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "vaibhavsagar@gmail.com",
            "sender_full_name": "Vaibhav Sagar (he) (F1'16)",
            "sender_id": 100041,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Junior Haskell Interview",
            "submessages": [],
            "timestamp": 1552355988,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/57ad6b289d2b066f6497c2c7a542f246?d=identicon&version=1",
            "client": "website",
            "content": "<p>It's only a couple years old!  Not out of date yet!</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 160547332,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "lindsey@composition.al",
            "sender_full_name": "Lindsey Kuper (she)",
            "sender_id": 2170,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Junior Haskell Interview",
            "submessages": [],
            "timestamp": 1552372824,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4d074af6cc341ef51b25bb2f738cdb11?d=identicon&version=1",
            "client": "website",
            "content": "<p>I'm speaking at the next Haskell meetup! <a href=\"https://www.meetup.com/NY-Haskell/events/259782984/\" target=\"_blank\" title=\"https://www.meetup.com/NY-Haskell/events/259782984/\">https://www.meetup.com/NY-Haskell/events/259782984/</a></p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 160881087,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1104",
                    "emoji_name": "haskell",
                    "reaction_type": "realm_emoji",
                    "user": {
                        "email": "debugsteven@gmail.com",
                        "full_name": "Steven J Haigh (they/he) (W1'18)",
                        "id": 134314
                    },
                    "user_id": 134314
                },
                {
                    "emoji_code": "1f4e3",
                    "emoji_name": "megaphone",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "debugsteven@gmail.com",
                        "full_name": "Steven J Haigh (they/he) (W1'18)",
                        "id": 134314
                    },
                    "user_id": 134314
                },
                {
                    "emoji_code": "9129",
                    "emoji_name": "animatedoctopus",
                    "reaction_type": "realm_emoji",
                    "user": {
                        "email": "debugsteven@gmail.com",
                        "full_name": "Steven J Haigh (they/he) (W1'18)",
                        "id": 134314
                    },
                    "user_id": 134314
                },
                {
                    "emoji_code": "1f389",
                    "emoji_name": "tada",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "debugsteven@gmail.com",
                        "full_name": "Steven J Haigh (they/he) (W1'18)",
                        "id": 134314
                    },
                    "user_id": 134314
                },
                {
                    "emoji_code": "1f389",
                    "emoji_name": "tada",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "marlenefdez@gmail.com",
                        "full_name": "Marlene Fernandez (she) (SP1'18)",
                        "id": 109654
                    },
                    "user_id": 109654
                },
                {
                    "emoji_code": "1f389",
                    "emoji_name": "tada",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "paul@paulwmorris.com",
                        "full_name": "Paul Morris (he) (SP1'17)",
                        "id": 100524
                    },
                    "user_id": 100524
                },
                {
                    "emoji_code": "1104",
                    "emoji_name": "haskell",
                    "reaction_type": "realm_emoji",
                    "user": {
                        "email": "jason.a.owen@gmail.com",
                        "full_name": "Jason Owen (SP2'19)",
                        "id": 100450
                    },
                    "user_id": 100450
                },
                {
                    "emoji_code": "1f389",
                    "emoji_name": "tada",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "jason.a.owen@gmail.com",
                        "full_name": "Jason Owen (SP2'19)",
                        "id": 100450
                    },
                    "user_id": 100450
                },
                {
                    "emoji_code": "1f389",
                    "emoji_name": "tada",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "sean.martin@nyu.edu",
                        "full_name": "Sean Martin (they) (S2'16)",
                        "id": 9495
                    },
                    "user_id": 9495
                },
                {
                    "emoji_code": "9129",
                    "emoji_name": "animatedoctopus",
                    "reaction_type": "realm_emoji",
                    "user": {
                        "email": "heneli@kailahi.com",
                        "full_name": "Heneli Ta'angafala Kailahi (SP2'17)",
                        "id": 100771
                    },
                    "user_id": 100771
                },
                {
                    "emoji_code": "1f389",
                    "emoji_name": "tada",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "heneli@kailahi.com",
                        "full_name": "Heneli Ta'angafala Kailahi (SP2'17)",
                        "id": 100771
                    },
                    "user_id": 100771
                },
                {
                    "emoji_code": "1104",
                    "emoji_name": "haskell",
                    "reaction_type": "realm_emoji",
                    "user": {
                        "email": "tobinyehle@gmail.com",
                        "full_name": "Tobin Yehle (he) (SP1'20)",
                        "id": 105607
                    },
                    "user_id": 105607
                },
                {
                    "emoji_code": "1104",
                    "emoji_name": "haskell",
                    "reaction_type": "realm_emoji",
                    "user": {
                        "email": "mauricio@collares.org",
                        "full_name": "Mauricio Collares (he) (W2'19)",
                        "id": 158563
                    },
                    "user_id": 158563
                },
                {
                    "emoji_code": "1f389",
                    "emoji_name": "tada",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "iain@mccoy.id.au",
                        "full_name": "Iain McCoy (he) (SP2'17)",
                        "id": 100806
                    },
                    "user_id": 100806
                },
                {
                    "emoji_code": "1f4e3",
                    "emoji_name": "megaphone",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "iain@mccoy.id.au",
                        "full_name": "Iain McCoy (he) (SP2'17)",
                        "id": 100806
                    },
                    "user_id": 100806
                },
                {
                    "emoji_code": "1f4e3",
                    "emoji_name": "megaphone",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "libby@daydrea.me",
                        "full_name": "Libby Horacek (she) (SP1'15)",
                        "id": 7081
                    },
                    "user_id": 7081
                },
                {
                    "emoji_code": "9129",
                    "emoji_name": "animatedoctopus",
                    "reaction_type": "realm_emoji",
                    "user": {
                        "email": "libby@daydrea.me",
                        "full_name": "Libby Horacek (she) (SP1'15)",
                        "id": 7081
                    },
                    "user_id": 7081
                },
                {
                    "emoji_code": "1f389",
                    "emoji_name": "tada",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "libby@daydrea.me",
                        "full_name": "Libby Horacek (she) (SP1'15)",
                        "id": 7081
                    },
                    "user_id": 7081
                },
                {
                    "emoji_code": "1104",
                    "emoji_name": "haskell",
                    "reaction_type": "realm_emoji",
                    "user": {
                        "email": "libby@daydrea.me",
                        "full_name": "Libby Horacek (she) (SP1'15)",
                        "id": 7081
                    },
                    "user_id": 7081
                },
                {
                    "emoji_code": "1104",
                    "emoji_name": "haskell",
                    "reaction_type": "realm_emoji",
                    "user": {
                        "email": "nick@recurse.com",
                        "full_name": "Nick Bergson-Shilcock (he)",
                        "id": 811
                    },
                    "user_id": 811
                },
                {
                    "emoji_code": "1f389",
                    "emoji_name": "tada",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "nick@recurse.com",
                        "full_name": "Nick Bergson-Shilcock (he)",
                        "id": 811
                    },
                    "user_id": 811
                },
                {
                    "emoji_code": "9129",
                    "emoji_name": "animatedoctopus",
                    "reaction_type": "realm_emoji",
                    "user": {
                        "email": "stanley@zheng.nyc",
                        "full_name": "Stanley Zheng (they) (W1'19)",
                        "id": 100315
                    },
                    "user_id": 100315
                },
                {
                    "emoji_code": "1f4e3",
                    "emoji_name": "megaphone",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "stanley@zheng.nyc",
                        "full_name": "Stanley Zheng (they) (W1'19)",
                        "id": 100315
                    },
                    "user_id": 100315
                },
                {
                    "emoji_code": "1f389",
                    "emoji_name": "tada",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "stanley@zheng.nyc",
                        "full_name": "Stanley Zheng (they) (W1'19)",
                        "id": 100315
                    },
                    "user_id": 100315
                },
                {
                    "emoji_code": "1f389",
                    "emoji_name": "tada",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "rc@alicja.dev",
                        "full_name": "Alicja Karolina Raszkowska (she/they) (W2'18)",
                        "id": 100049
                    },
                    "user_id": 100049
                },
                {
                    "emoji_code": "1f389",
                    "emoji_name": "tada",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "annie.cherk@gmail.com",
                        "full_name": "Annie Cherkaev (she/they) (m4'18)",
                        "id": 9502
                    },
                    "user_id": 9502
                },
                {
                    "emoji_code": "1f4e3",
                    "emoji_name": "megaphone",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "annie.cherk@gmail.com",
                        "full_name": "Annie Cherkaev (she/they) (m4'18)",
                        "id": 9502
                    },
                    "user_id": 9502
                }
            ],
            "recipient_id": 22667,
            "sender_email": "vaibhavsagar@gmail.com",
            "sender_full_name": "Vaibhav Sagar (he) (F1'16)",
            "sender_id": 100041,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "NY Haskell Meetup",
            "submessages": [],
            "timestamp": 1552661011,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/3f4785d95e43ecfb2f20d49e6ec824dc?d=identicon&version=1",
            "client": "website",
            "content": "<p>Congrats!</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 160899903,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f642",
                    "emoji_name": "slight_smile",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "vaibhavsagar@gmail.com",
                        "full_name": "Vaibhav Sagar (he) (F1'16)",
                        "id": 100041
                    },
                    "user_id": 100041
                }
            ],
            "recipient_id": 22667,
            "sender_email": "nick@recurse.com",
            "sender_full_name": "Nick Bergson-Shilcock (he)",
            "sender_id": 811,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "NY Haskell Meetup",
            "submessages": [],
            "timestamp": 1552673880,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/57ad6b289d2b066f6497c2c7a542f246?d=identicon&version=1",
            "client": "website",
            "content": "<p>Hey y'all!  I'm working on implementing a key-value store exposed via a REST web service API, as a reference implementation of the course project for a course I'm currently teaching.  We already have a Python reference implementation, but I thought it would be fun to try to do it in Haskell, using Servant.  One of the things I'm having trouble with is dealing with JSON.  I've been reading the Servant tutorial, but I'm kind of stuck.  Does anyone with experience with Servant and JSON-wrangling in Haskell want to help me out, say, today or tomorrow sometime?</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 163041934,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "lindsey@composition.al",
            "sender_full_name": "Lindsey Kuper (she)",
            "sender_id": 2170,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "anyone want to pair on a tiny Servant project?",
            "submessages": [],
            "timestamp": 1554927679,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4d074af6cc341ef51b25bb2f738cdb11?d=identicon&version=1",
            "client": "website",
            "content": "<p>Hi Lindsey! I'd love to help, but I might be too busy today and tomorrow. Is there a way we can collaborate asynchronously? Alternatively, I'm free all weekend!</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 163042061,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "vaibhavsagar@gmail.com",
            "sender_full_name": "Vaibhav Sagar (he) (F1'16)",
            "sender_id": 100041,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "anyone want to pair on a tiny Servant project?",
            "submessages": [],
            "timestamp": 1554927782,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/57ad6b289d2b066f6497c2c7a542f246?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-id=\"100041\">@Vaibhav Sagar (F1'16)</span> I can add you to the repo, check in my WIP work, and share with you the assignment specification.  The weekend might work, too...</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 163042108,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "lindsey@composition.al",
            "sender_full_name": "Lindsey Kuper (she)",
            "sender_id": 2170,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "anyone want to pair on a tiny Servant project?",
            "submessages": [],
            "timestamp": 1554927826,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/57ad6b289d2b066f6497c2c7a542f246?d=identicon&version=1",
            "client": "website",
            "content": "<p>(I had a feeling you might be the first person to respond, heh.)</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 163042174,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f642",
                    "emoji_name": "slight_smile",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "vaibhavsagar@gmail.com",
                        "full_name": "Vaibhav Sagar (he) (F1'16)",
                        "id": 100041
                    },
                    "user_id": 100041
                }
            ],
            "recipient_id": 22667,
            "sender_email": "lindsey@composition.al",
            "sender_full_name": "Lindsey Kuper (she)",
            "sender_id": 2170,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "anyone want to pair on a tiny Servant project?",
            "submessages": [],
            "timestamp": 1554927861,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4d074af6cc341ef51b25bb2f738cdb11?d=identicon&version=1",
            "client": "website",
            "content": "<p>That would be great! My GItHub username is <a href=\"https://github.com/vaibhavsagar\" target=\"_blank\" title=\"https://github.com/vaibhavsagar\"><code>vaibhavsagar</code></a>.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 163043155,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "vaibhavsagar@gmail.com",
            "sender_full_name": "Vaibhav Sagar (he) (F1'16)",
            "sender_id": 100041,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "anyone want to pair on a tiny Servant project?",
            "submessages": [],
            "timestamp": 1554928599,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/57ad6b289d2b066f6497c2c7a542f246?d=identicon&version=1",
            "client": "website",
            "content": "<p>Actually, maybe I can start by just asking a specific question!</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 163043934,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "lindsey@composition.al",
            "sender_full_name": "Lindsey Kuper (she)",
            "sender_id": 2170,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "anyone want to pair on a tiny Servant project?",
            "submessages": [],
            "timestamp": 1554929202,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4d074af6cc341ef51b25bb2f738cdb11?d=identicon&version=1",
            "client": "website",
            "content": "<p>That works too!</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 163044741,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "vaibhavsagar@gmail.com",
            "sender_full_name": "Vaibhav Sagar (he) (F1'16)",
            "sender_id": 100041,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "anyone want to pair on a tiny Servant project?",
            "submessages": [],
            "timestamp": 1554929787,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/57ad6b289d2b066f6497c2c7a542f246?d=identicon&version=1",
            "client": "website",
            "content": "<p>So, if you look up a key that exists, the server should return the JSON</p>\n<div class=\"codehilite\"><pre><span></span>{&quot;doesExist&quot;:&quot;True&quot;,&quot;message&quot;:&quot;Retrieved successfully&quot;,&quot;value&quot;:&quot;foo&quot;}\n</pre></div>\n\n\n<p>and status code 200.</p>\n<p>Whereas, if you try to look up a non-existent key, you're supposed to get a JSON response like this:</p>\n<div class=\"codehilite\"><pre><span></span> {&quot;doesExist&quot;:&quot;False&quot;,&quot;error&quot;:&quot;Key does not exist&quot;,&quot;message&quot;:&quot;Error in GET&quot;}\n</pre></div>\n\n\n<p>and status code 404.</p>\n<p>(Arguably, <code>doesExist</code> should be the boolean <code>true</code> or <code>false</code> rather than the string <code>\"True\"</code> or <code>\"False\"</code>, but that's neither here nor there.)</p>\n<p>So my question is, should I be defining different data types for the two responses?  I currently have</p>\n<div class=\"codehilite\"><pre><span></span>data GetResponse = GetResponse\n  { doesExist :: Bool,\n    error :: Maybe String,\n    message :: String,\n    value :: Maybe String\n  } deriving (Eq, Show, Generic)\n\ninstance ToJSON GetResponse\n</pre></div>\n\n\n<p>and I was hoping that the <code>Maybe</code> types would just magically be omitted if they were <code>Nothing</code>, but instead I get, like,</p>\n<div class=\"codehilite\"><pre><span></span>{&quot;error&quot;:&quot;Key does not exist&quot;,&quot;value&quot;:null,&quot;message&quot;:&quot;Error in GET&quot;,&quot;doesExist&quot;:false}\n</pre></div>\n\n\n<p>which is not quite what I want.</p>\n<p>But if I try to do something like</p>\n<div class=\"codehilite\"><pre><span></span>data GetSuccessResponse = GetSuccessResponse\n  { doesExist :: Bool,\n    message :: String,\n    value :: String\n  } deriving (Eq, Show, Generic)\n\ninstance ToJSON GetSuccessResponse\n\ndata GetFailureResponse = GetFailureResponse\n  { doesExist :: Bool,\n    message :: String,\n    error :: String\n  } deriving (Eq, Show, Generic)\n\ninstance ToJSON GetFailureResponse\n</pre></div>\n\n\n<p>then I get errors about multiple declarations of 'doesExist' and 'message'.  <span class=\"user-mention\" data-user-id=\"100041\">@Vaibhav Sagar (F1'16)</span> (or anyone else), what do you suggest?</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 163044932,
            "is_me_message": false,
            "last_edit_timestamp": 1554929984,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "lindsey@composition.al",
            "sender_full_name": "Lindsey Kuper (she)",
            "sender_id": 2170,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "anyone want to pair on a tiny Servant project?",
            "submessages": [],
            "timestamp": 1554929887,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4d074af6cc341ef51b25bb2f738cdb11?d=identicon&version=1",
            "client": "website",
            "content": "<p>The particular error you're getting seems like an issue with duplicate record fields.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 163045061,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "vaibhavsagar@gmail.com",
            "sender_full_name": "Vaibhav Sagar (he) (F1'16)",
            "sender_id": 100041,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "anyone want to pair on a tiny Servant project?",
            "submessages": [],
            "timestamp": 1554929997,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4d074af6cc341ef51b25bb2f738cdb11?d=identicon&version=1",
            "client": "website",
            "content": "<p>I think the way you want it to work is reasonable, but you might need to write out the <code>ToJSON</code> instance yourself, because the derived one seems to be behaving differently.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 163045232,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "vaibhavsagar@gmail.com",
            "sender_full_name": "Vaibhav Sagar (he) (F1'16)",
            "sender_id": 100041,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "anyone want to pair on a tiny Servant project?",
            "submessages": [],
            "timestamp": 1554930082,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4d074af6cc341ef51b25bb2f738cdb11?d=identicon&version=1",
            "client": "website",
            "content": "<p>i.e. you can have one data type</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 163045258,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "vaibhavsagar@gmail.com",
            "sender_full_name": "Vaibhav Sagar (he) (F1'16)",
            "sender_id": 100041,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "anyone want to pair on a tiny Servant project?",
            "submessages": [],
            "timestamp": 1554930104,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/57ad6b289d2b066f6497c2c7a542f246?d=identicon&version=1",
            "client": "website",
            "content": "<p>Yeah, I was hoping the derived <code>ToJSON</code> would just do what I wanted...</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 163045392,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "lindsey@composition.al",
            "sender_full_name": "Lindsey Kuper (she)",
            "sender_id": 2170,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "anyone want to pair on a tiny Servant project?",
            "submessages": [],
            "timestamp": 1554930166,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/57ad6b289d2b066f6497c2c7a542f246?d=identicon&version=1",
            "client": "website",
            "content": "<p>I don't understand the errors, though.  Why wouldn't it be OK for different record types to have the same field names?</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 163045631,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "lindsey@composition.al",
            "sender_full_name": "Lindsey Kuper (she)",
            "sender_id": 2170,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "anyone want to pair on a tiny Servant project?",
            "submessages": [],
            "timestamp": 1554930210,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/57ad6b289d2b066f6497c2c7a542f246?d=identicon&version=1",
            "client": "website",
            "content": "<p>In particular, the error is:</p>\n<div class=\"codehilite\"><pre><span></span>/Users/lkuper/repos/haskell-dkvs/dkvs/src/Lib.hs:85:5: error:\n    Multiple declarations of \u2018doesExist\u2019\n    Declared at: src/Lib.hs:77:5\n                 src/Lib.hs:85:5\n   |\n85 |   { doesExist :: Bool,\n   |     ^^^^^^^^^\n\n/Users/lkuper/repos/haskell-dkvs/dkvs/src/Lib.hs:86:5: error:\n    Multiple declarations of \u2018message\u2019\n    Declared at: src/Lib.hs:78:5\n                 src/Lib.hs:86:5\n   |\n86 |     message :: String,\n   |     ^^^^^^^\n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 163045731,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "lindsey@composition.al",
            "sender_full_name": "Lindsey Kuper (she)",
            "sender_id": 2170,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "anyone want to pair on a tiny Servant project?",
            "submessages": [],
            "timestamp": 1554930252,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4d074af6cc341ef51b25bb2f738cdb11?d=identicon&version=1",
            "client": "website",
            "content": "<p><a href=\"https://wiki.haskell.org/Name_clashes_in_record_fields\" target=\"_blank\" title=\"https://wiki.haskell.org/Name_clashes_in_record_fields\">https://wiki.haskell.org/Name_clashes_in_record_fields</a></p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 163045735,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "vaibhavsagar@gmail.com",
            "sender_full_name": "Vaibhav Sagar (he) (F1'16)",
            "sender_id": 100041,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "anyone want to pair on a tiny Servant project?",
            "submessages": [],
            "timestamp": 1554930256,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4d074af6cc341ef51b25bb2f738cdb11?d=identicon&version=1",
            "client": "website",
            "content": "<p>you can work around this with a language extension</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 163045750,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "vaibhavsagar@gmail.com",
            "sender_full_name": "Vaibhav Sagar (he) (F1'16)",
            "sender_id": 100041,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "anyone want to pair on a tiny Servant project?",
            "submessages": [],
            "timestamp": 1554930268,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4d074af6cc341ef51b25bb2f738cdb11?d=identicon&version=1",
            "client": "website",
            "content": "<p>but the way GHC behaves is that it defines a function for each record field name that acts as an accessor</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 163045776,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "vaibhavsagar@gmail.com",
            "sender_full_name": "Vaibhav Sagar (he) (F1'16)",
            "sender_id": 100041,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "anyone want to pair on a tiny Servant project?",
            "submessages": [],
            "timestamp": 1554930302,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4d074af6cc341ef51b25bb2f738cdb11?d=identicon&version=1",
            "client": "website",
            "content": "<p>and it literally has no idea what to do if it encounters the same name twice</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 163045808,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "vaibhavsagar@gmail.com",
            "sender_full_name": "Vaibhav Sagar (he) (F1'16)",
            "sender_id": 100041,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "anyone want to pair on a tiny Servant project?",
            "submessages": [],
            "timestamp": 1554930325,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4d074af6cc341ef51b25bb2f738cdb11?d=identicon&version=1",
            "client": "website",
            "content": "<p>for this reason, most codebases I've seen prefix the record field name with the name of the type they are referring to</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 163045900,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "vaibhavsagar@gmail.com",
            "sender_full_name": "Vaibhav Sagar (he) (F1'16)",
            "sender_id": 100041,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "anyone want to pair on a tiny Servant project?",
            "submessages": [],
            "timestamp": 1554930367,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/57ad6b289d2b066f6497c2c7a542f246?d=identicon&version=1",
            "client": "website",
            "content": "<p>I've never run into this before!</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 163045904,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "lindsey@composition.al",
            "sender_full_name": "Lindsey Kuper (she)",
            "sender_id": 2170,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "anyone want to pair on a tiny Servant project?",
            "submessages": [],
            "timestamp": 1554930372,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/57ad6b289d2b066f6497c2c7a542f246?d=identicon&version=1",
            "client": "website",
            "content": "<p>Well, but I need the names to be a specific thing so that the returned JSON is what it has to be (unless I write my own <code>ToJSON</code>)...</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 163045940,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "lindsey@composition.al",
            "sender_full_name": "Lindsey Kuper (she)",
            "sender_id": 2170,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "anyone want to pair on a tiny Servant project?",
            "submessages": [],
            "timestamp": 1554930413,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4d074af6cc341ef51b25bb2f738cdb11?d=identicon&version=1",
            "client": "website",
            "content": "<p>you only need one type</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 163045966,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "vaibhavsagar@gmail.com",
            "sender_full_name": "Vaibhav Sagar (he) (F1'16)",
            "sender_id": 100041,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "anyone want to pair on a tiny Servant project?",
            "submessages": [],
            "timestamp": 1554930427,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4d074af6cc341ef51b25bb2f738cdb11?d=identicon&version=1",
            "client": "website",
            "content": "<p>and then if you write your own <code>ToJSON</code>, it's pretty simple to get the behaviour you want</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 163045998,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "vaibhavsagar@gmail.com",
            "sender_full_name": "Vaibhav Sagar (he) (F1'16)",
            "sender_id": 100041,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "anyone want to pair on a tiny Servant project?",
            "submessages": [],
            "timestamp": 1554930447,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4d074af6cc341ef51b25bb2f738cdb11?d=identicon&version=1",
            "client": "website",
            "content": "<p>you can e.g. branch on whether <code>doesExist</code> is True or False</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 163046089,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "vaibhavsagar@gmail.com",
            "sender_full_name": "Vaibhav Sagar (he) (F1'16)",
            "sender_id": 100041,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "anyone want to pair on a tiny Servant project?",
            "submessages": [],
            "timestamp": 1554930498,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/57ad6b289d2b066f6497c2c7a542f246?d=identicon&version=1",
            "client": "website",
            "content": "<p>OK, yeah, I'm now thinking that's the right approach, because I just realized that if I have the two different types then I can't have just one <code>GetResponse</code> type in the API type</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 163046097,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "lindsey@composition.al",
            "sender_full_name": "Lindsey Kuper (she)",
            "sender_id": 2170,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "anyone want to pair on a tiny Servant project?",
            "submessages": [],
            "timestamp": 1554930503,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/57ad6b289d2b066f6497c2c7a542f246?d=identicon&version=1",
            "client": "website",
            "content": "<p>i.e., now I have</p>\n<div class=\"codehilite\"><pre><span></span>API  =    &quot;key-value-store&quot; :&gt; Capture &quot;key&quot; String :&gt; Get &#39;[JSON] GetResponse\n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 163046142,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "lindsey@composition.al",
            "sender_full_name": "Lindsey Kuper (she)",
            "sender_id": 2170,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "anyone want to pair on a tiny Servant project?",
            "submessages": [],
            "timestamp": 1554930545,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4d074af6cc341ef51b25bb2f738cdb11?d=identicon&version=1",
            "client": "website",
            "content": "<p>I don't know if you've seen <a href=\"https://artyom.me/aeson\" target=\"_blank\" title=\"https://artyom.me/aeson\">https://artyom.me/aeson</a> but I reach for it frequently when doing anything even slightly unusual with <code>Aeson</code></p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 163046167,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "vaibhavsagar@gmail.com",
            "sender_full_name": "Vaibhav Sagar (he) (F1'16)",
            "sender_id": 100041,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "anyone want to pair on a tiny Servant project?",
            "submessages": [],
            "timestamp": 1554930567,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/57ad6b289d2b066f6497c2c7a542f246?d=identicon&version=1",
            "client": "website",
            "content": "<p>I glanced at it but I didn't really understand how it was going to help me</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 163046181,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "lindsey@composition.al",
            "sender_full_name": "Lindsey Kuper (she)",
            "sender_id": 2170,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "anyone want to pair on a tiny Servant project?",
            "submessages": [],
            "timestamp": 1554930588,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/57ad6b289d2b066f6497c2c7a542f246?d=identicon&version=1",
            "client": "website",
            "content": "<p>ok, let me see about just having <code>GetResponse</code> and writing my own <code>ToJSON</code>...</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 163046244,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "lindsey@composition.al",
            "sender_full_name": "Lindsey Kuper (she)",
            "sender_id": 2170,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "anyone want to pair on a tiny Servant project?",
            "submessages": [],
            "timestamp": 1554930607,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4d074af6cc341ef51b25bb2f738cdb11?d=identicon&version=1",
            "client": "website",
            "content": "<p>e.g. <a href=\"https://artyom.me/aeson#recordwildcards\" target=\"_blank\" title=\"https://artyom.me/aeson#recordwildcards\">https://artyom.me/aeson#recordwildcards</a> is one way to write your <code>ToJSON</code> instance</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 163046279,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "vaibhavsagar@gmail.com",
            "sender_full_name": "Vaibhav Sagar (he) (F1'16)",
            "sender_id": 100041,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "anyone want to pair on a tiny Servant project?",
            "submessages": [],
            "timestamp": 1554930636,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4d074af6cc341ef51b25bb2f738cdb11?d=identicon&version=1",
            "client": "website",
            "content": "<p>I remember finding it pretty useful when working on <a href=\"https://github.com/vaibhavsagar/suppandi\" target=\"_blank\" title=\"https://github.com/vaibhavsagar/suppandi\">https://github.com/vaibhavsagar/suppandi</a></p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 163046440,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "vaibhavsagar@gmail.com",
            "sender_full_name": "Vaibhav Sagar (he) (F1'16)",
            "sender_id": 100041,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "anyone want to pair on a tiny Servant project?",
            "submessages": [],
            "timestamp": 1554930747,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/57ad6b289d2b066f6497c2c7a542f246?d=identicon&version=1",
            "client": "website",
            "content": "<p>ok, newest issue is that Aeson is mad that my field names are <code>String</code> and not <code>Text</code>, but that seems easy to fix</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 163048061,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "lindsey@composition.al",
            "sender_full_name": "Lindsey Kuper (she)",
            "sender_id": 2170,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "anyone want to pair on a tiny Servant project?",
            "submessages": [],
            "timestamp": 1554931863,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/57ad6b289d2b066f6497c2c7a542f246?d=identicon&version=1",
            "client": "website",
            "content": "<p>yay, it compiles</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 163048212,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "lindsey@composition.al",
            "sender_full_name": "Lindsey Kuper (she)",
            "sender_id": 2170,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "anyone want to pair on a tiny Servant project?",
            "submessages": [],
            "timestamp": 1554931986,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/57ad6b289d2b066f6497c2c7a542f246?d=identicon&version=1",
            "client": "website",
            "content": "<p>Woohoo, I think that particular thing is working the way I want it now.  Thanks for your help, <span class=\"user-mention\" data-user-id=\"100041\">@Vaibhav Sagar (F1'16)</span>! :)</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 163048295,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f389",
                    "emoji_name": "tada",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "libby@daydrea.me",
                        "full_name": "Libby Horacek (she) (SP1'15)",
                        "id": 7081
                    },
                    "user_id": 7081
                },
                {
                    "emoji_code": "1f389",
                    "emoji_name": "tada",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "vaibhavsagar@gmail.com",
                        "full_name": "Vaibhav Sagar (he) (F1'16)",
                        "id": 100041
                    },
                    "user_id": 100041
                }
            ],
            "recipient_id": 22667,
            "sender_email": "lindsey@composition.al",
            "sender_full_name": "Lindsey Kuper (she)",
            "sender_id": 2170,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "anyone want to pair on a tiny Servant project?",
            "submessages": [],
            "timestamp": 1554932046,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4d074af6cc341ef51b25bb2f738cdb11?d=identicon&version=1",
            "client": "website",
            "content": "<p>My pleasure!</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 163048356,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "vaibhavsagar@gmail.com",
            "sender_full_name": "Vaibhav Sagar (he) (F1'16)",
            "sender_id": 100041,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "anyone want to pair on a tiny Servant project?",
            "submessages": [],
            "timestamp": 1554932119,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/57ad6b289d2b066f6497c2c7a542f246?d=identicon&version=1",
            "client": "website",
            "content": "<p>Off the top of your head, do you know if these records need to derive <code>Generic</code>?  And if so, why?  I just copied that from the Servant docs.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 163048472,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "lindsey@composition.al",
            "sender_full_name": "Lindsey Kuper (she)",
            "sender_id": 2170,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "anyone want to pair on a tiny Servant project?",
            "submessages": [],
            "timestamp": 1554932214,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4d074af6cc341ef51b25bb2f738cdb11?d=identicon&version=1",
            "client": "website",
            "content": "<p>You only need to derive <code>Generic</code> if you want automatically derived <code>ToJSON</code> and <code>FromJSON</code> instances</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 163048509,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "vaibhavsagar@gmail.com",
            "sender_full_name": "Vaibhav Sagar (he) (F1'16)",
            "sender_id": 100041,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "anyone want to pair on a tiny Servant project?",
            "submessages": [],
            "timestamp": 1554932240,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4d074af6cc341ef51b25bb2f738cdb11?d=identicon&version=1",
            "client": "website",
            "content": "<p>otherwise everything works just fine without it</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 163048523,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "vaibhavsagar@gmail.com",
            "sender_full_name": "Vaibhav Sagar (he) (F1'16)",
            "sender_id": 100041,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "anyone want to pair on a tiny Servant project?",
            "submessages": [],
            "timestamp": 1554932259,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/57ad6b289d2b066f6497c2c7a542f246?d=identicon&version=1",
            "client": "website",
            "content": "<p>Aha, that would explain why it was fine without <code>Generic</code> for the one that I just wrote my own <code>ToJSON</code> for!  :)  Cool.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 163048596,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "lindsey@composition.al",
            "sender_full_name": "Lindsey Kuper (she)",
            "sender_id": 2170,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "anyone want to pair on a tiny Servant project?",
            "submessages": [],
            "timestamp": 1554932304,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/57ad6b289d2b066f6497c2c7a542f246?d=identicon&version=1",
            "client": "website",
            "content": "<p>I'm still not at all sure that I'm doing this in the nicest way.  But it runs, anyway.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 163048675,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "lindsey@composition.al",
            "sender_full_name": "Lindsey Kuper (she)",
            "sender_id": 2170,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "anyone want to pair on a tiny Servant project?",
            "submessages": [],
            "timestamp": 1554932388,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4d074af6cc341ef51b25bb2f738cdb11?d=identicon&version=1",
            "client": "website",
            "content": "<p>IMHO that's the important thing! It's easy to refactor Haskell to be nicer later.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 163048769,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "vaibhavsagar@gmail.com",
            "sender_full_name": "Vaibhav Sagar (he) (F1'16)",
            "sender_id": 100041,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "anyone want to pair on a tiny Servant project?",
            "submessages": [],
            "timestamp": 1554932438,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/57ad6b289d2b066f6497c2c7a542f246?d=identicon&version=1",
            "client": "website",
            "content": "<p>OK, here's another question!  When I try to look up a non-existent key, how do I make the status code of the response be 404, while still returning the JSON?  I found this:</p>\n<p><a href=\"https://github.com/haskell-servant/servant/blob/9b73435d21f7c5b48596986f67725493ba08fbb5/doc/cookbook/jsonerror/Jsonerror.lhs\" target=\"_blank\" title=\"https://github.com/haskell-servant/servant/blob/9b73435d21f7c5b48596986f67725493ba08fbb5/doc/cookbook/jsonerror/Jsonerror.lhs\">https://github.com/haskell-servant/servant/blob/9b73435d21f7c5b48596986f67725493ba08fbb5/doc/cookbook/jsonerror/Jsonerror.lhs</a></p>\n<p>But I can't seem to figure out how to use their <code>throwJSONError</code>.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 163055446,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "lindsey@composition.al",
            "sender_full_name": "Lindsey Kuper (she)",
            "sender_id": 2170,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "anyone want to pair on a tiny Servant project?",
            "submessages": [],
            "timestamp": 1554938513,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/57ad6b289d2b066f6497c2c7a542f246?d=identicon&version=1",
            "client": "website",
            "content": "<p>(Also, that cookbook recipe uses <code>OverloadedStrings</code> which seems to wreak havoc.)</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 163056225,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "lindsey@composition.al",
            "sender_full_name": "Lindsey Kuper (she)",
            "sender_id": 2170,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "anyone want to pair on a tiny Servant project?",
            "submessages": [],
            "timestamp": 1554939424,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/57ad6b289d2b066f6497c2c7a542f246?d=identicon&version=1",
            "client": "website",
            "content": "<p>This looks _possibly_ relevant: <a href=\"https://stackoverflow.com/questions/41753516/custom-json-errors-for-servant-server\" target=\"_blank\" title=\"https://stackoverflow.com/questions/41753516/custom-json-errors-for-servant-server\">https://stackoverflow.com/questions/41753516/custom-json-errors-for-servant-server</a></p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 163056488,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "lindsey@composition.al",
            "sender_full_name": "Lindsey Kuper (she)",
            "sender_id": 2170,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "anyone want to pair on a tiny Servant project?",
            "submessages": [],
            "timestamp": 1554939785,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/efe57f0998df065470ff42c938f781cf?d=identicon&version=1",
            "client": "website",
            "content": "<p>If using <code>OverloadedStrings</code> messes things up, maybe you can explicitly cast your strings to whatever type is needed? I think with that example it's <code>T.pack</code> to turn the error headers to <code>Text</code>.</p>\n<p>To me the cookbook example seems better than any of the Stackoverflow answers.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 163093289,
            "is_me_message": false,
            "last_edit_timestamp": 1554984843,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "libby@daydrea.me",
            "sender_full_name": "Libby Horacek (she) (SP1'15)",
            "sender_id": 7081,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "anyone want to pair on a tiny Servant project?",
            "submessages": [],
            "timestamp": 1554984741,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4d074af6cc341ef51b25bb2f738cdb11?d=identicon&version=1",
            "client": "website",
            "content": "<p>I had a discussion with one of our clients the other day that ended with the same StackOverflow link! I hadn't seen <code>throwJSONError</code> before but that does sound like the way to go if you are willing to explicitly throw JSON errors. Servant by default will provide HTTP errors as text only.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 163093831,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "vaibhavsagar@gmail.com",
            "sender_full_name": "Vaibhav Sagar (he) (F1'16)",
            "sender_id": 100041,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "anyone want to pair on a tiny Servant project?",
            "submessages": [],
            "timestamp": 1554985320,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4d074af6cc341ef51b25bb2f738cdb11?d=identicon&version=1",
            "client": "website",
            "content": "<p><a href=\"https://www.youtube.com/watch?v=wgMgtgVZdYg\" target=\"_blank\" title=\"https://www.youtube.com/watch?v=wgMgtgVZdYg\">Here's the video!</a></p>\n<div class=\"youtube-video message_inline_image\"><a data-id=\"wgMgtgVZdYg\" href=\"https://www.youtube.com/watch?v=wgMgtgVZdYg\" target=\"_blank\" title=\"https://www.youtube.com/watch?v=wgMgtgVZdYg\"><img src=\"https://i.ytimg.com/vi/wgMgtgVZdYg/default.jpg\"></a></div>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 163124016,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1104",
                    "emoji_name": "haskell",
                    "reaction_type": "realm_emoji",
                    "user": {
                        "email": "ark.email@gmail.com",
                        "full_name": "Adam Bratschi-Kaye (he) (SP1'17)",
                        "id": 100532
                    },
                    "user_id": 100532
                },
                {
                    "emoji_code": "1f419",
                    "emoji_name": "octopus",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "ark.email@gmail.com",
                        "full_name": "Adam Bratschi-Kaye (he) (SP1'17)",
                        "id": 100532
                    },
                    "user_id": 100532
                },
                {
                    "emoji_code": "1f419",
                    "emoji_name": "octopus",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "heneli@kailahi.com",
                        "full_name": "Heneli Ta'angafala Kailahi (SP2'17)",
                        "id": 100771
                    },
                    "user_id": 100771
                },
                {
                    "emoji_code": "1f419",
                    "emoji_name": "octopus",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "jacquin.mininger@gmail.com",
                        "full_name": "Jacquin Mininger (F2'17)",
                        "id": 102005
                    },
                    "user_id": 102005
                },
                {
                    "emoji_code": "1f419",
                    "emoji_name": "octopus",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "rc@alicja.dev",
                        "full_name": "Alicja Karolina Raszkowska (she/they) (W2'18)",
                        "id": 100049
                    },
                    "user_id": 100049
                }
            ],
            "recipient_id": 22667,
            "sender_email": "vaibhavsagar@gmail.com",
            "sender_full_name": "Vaibhav Sagar (he) (F1'16)",
            "sender_id": 100041,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "NY Haskell Meetup",
            "submessages": [],
            "timestamp": 1555006439,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/57ad6b289d2b066f6497c2c7a542f246?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-id=\"7081\">@Libby Horacek (W2'15)</span> <span class=\"user-mention\" data-user-id=\"100041\">@Vaibhav Sagar (F1'16)</span>  Hmmm, but part of the problem I'm having seems to be the errors that Servant handles for me before I even get to <code>throwError</code>.  But I think I might have just thought of a way to make those happen later...</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 163141475,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "lindsey@composition.al",
            "sender_full_name": "Lindsey Kuper (she)",
            "sender_id": 2170,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "anyone want to pair on a tiny Servant project?",
            "submessages": [],
            "timestamp": 1555020631,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/57ad6b289d2b066f6497c2c7a542f246?d=identicon&version=1",
            "client": "website",
            "content": "<p>Another really gross way to do it is to just use <code>throwError</code> and then write a string of literal JSON as the <code>errBody</code>.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 163141516,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "lindsey@composition.al",
            "sender_full_name": "Lindsey Kuper (she)",
            "sender_id": 2170,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "anyone want to pair on a tiny Servant project?",
            "submessages": [],
            "timestamp": 1555020673,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/57ad6b289d2b066f6497c2c7a542f246?d=identicon&version=1",
            "client": "website",
            "content": "<p>OK, things are closer to working.  Here's one more question for y'all.  I have a particular API call that puts a value to the store.  It should return a 201 if the value is being created for the first time, and 200 if it's being updated.  Servant has different verbs for these (<code>PutCreated</code> and <code>Put</code>, respectively).  I don't really understand how to deal with this.  I can't treat them as different types in the type of the API because it needs to actually look up the value in the current store to know which status code to return.  Any thoughts?</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 163143359,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "lindsey@composition.al",
            "sender_full_name": "Lindsey Kuper (she)",
            "sender_id": 2170,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "anyone want to pair on a tiny Servant project?",
            "submessages": [],
            "timestamp": 1555022397,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/57ad6b289d2b066f6497c2c7a542f246?d=identicon&version=1",
            "client": "website",
            "content": "<p>OK, I figured out another terrible hack for that: pretending it's an error (even though it's a 2XX response!) and writing my own error combinator, <code>success201</code>.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 163144582,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "lindsey@composition.al",
            "sender_full_name": "Lindsey Kuper (she)",
            "sender_id": 2170,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "anyone want to pair on a tiny Servant project?",
            "submessages": [],
            "timestamp": 1555023570,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/57ad6b289d2b066f6497c2c7a542f246?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-id=\"7081\">@Libby Horacek (W2'15)</span> Yes, I agree that the cookbook example is a bit nicer than the StackOverflow answers, once I figured out how to use it.  I had to make some tweaks to it.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 163146009,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "lindsey@composition.al",
            "sender_full_name": "Lindsey Kuper (she)",
            "sender_id": 2170,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "anyone want to pair on a tiny Servant project?",
            "submessages": [],
            "timestamp": 1555024891,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/efe57f0998df065470ff42c938f781cf?d=identicon&version=1",
            "client": "website",
            "content": "<p>I'm glad you could figure it out! I've done very little with Servant -- at work I use Fn (<a href=\"http://fnhaskell.com\" target=\"_blank\" title=\"http://fnhaskell.com\">fnhaskell.com</a>).</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 163149119,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "libby@daydrea.me",
            "sender_full_name": "Libby Horacek (she) (SP1'15)",
            "sender_id": 7081,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "anyone want to pair on a tiny Servant project?",
            "submessages": [],
            "timestamp": 1555028803,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/efe57f0998df065470ff42c938f781cf?d=identicon&version=1",
            "client": "website",
            "content": "<p>But Servant looks really cool so if you want to share the Github repo with me (<code>emhoracek</code>) I can help more this weekend :D</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 163149220,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "libby@daydrea.me",
            "sender_full_name": "Libby Horacek (she) (SP1'15)",
            "sender_id": 7081,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "anyone want to pair on a tiny Servant project?",
            "submessages": [],
            "timestamp": 1555028921,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/57ad6b289d2b066f6497c2c7a542f246?d=identicon&version=1",
            "client": "website",
            "content": "<p>I think I got everything working the way I want now, actually!  But I'm happy to add you both to the repo in case you want to have a look.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 163155880,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "lindsey@composition.al",
            "sender_full_name": "Lindsey Kuper (she)",
            "sender_id": 2170,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "anyone want to pair on a tiny Servant project?",
            "submessages": [],
            "timestamp": 1555038059,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/57ad6b289d2b066f6497c2c7a542f246?d=identicon&version=1",
            "client": "website",
            "content": "<p>I hadn't heard of Fn, but it looks nice!  I just stumbled across Servant and decided to try it out.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 163155959,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "lindsey@composition.al",
            "sender_full_name": "Lindsey Kuper (she)",
            "sender_id": 2170,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "anyone want to pair on a tiny Servant project?",
            "submessages": [],
            "timestamp": 1555038138,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/57ad6b289d2b066f6497c2c7a542f246?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-id=\"7081\">@Libby Horacek (W2'15)</span> <span class=\"user-mention\" data-user-id=\"100041\">@Vaibhav Sagar (F1'16)</span>  Just sent you both repo invitations.  The code I've been talking about is here: <a href=\"https://github.com/lkuper/haskell-dkvs/blob/65f66ca1a4ba278ecd2da7760772cf930f6fb7db/dkvs/src/Lib.hs\" target=\"_blank\" title=\"https://github.com/lkuper/haskell-dkvs/blob/65f66ca1a4ba278ecd2da7760772cf930f6fb7db/dkvs/src/Lib.hs\">https://github.com/lkuper/haskell-dkvs/blob/65f66ca1a4ba278ecd2da7760772cf930f6fb7db/dkvs/src/Lib.hs</a> .  Advice on how to improve things would be great, but no pressure if you're busy!</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 163156053,
            "is_me_message": false,
            "last_edit_timestamp": 1555038399,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "lindsey@composition.al",
            "sender_full_name": "Lindsey Kuper (she)",
            "sender_id": 2170,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "anyone want to pair on a tiny Servant project?",
            "submessages": [],
            "timestamp": 1555038290,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/57ad6b289d2b066f6497c2c7a542f246?d=identicon&version=1",
            "client": "website",
            "content": "<p>(I went back to having different record types for the success and error responses, because once it sank in that I could short-circuit with <code>throwError</code>, that's what seemed to make the most sense.)</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 163156204,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "lindsey@composition.al",
            "sender_full_name": "Lindsey Kuper (she)",
            "sender_id": 2170,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "anyone want to pair on a tiny Servant project?",
            "submessages": [],
            "timestamp": 1555038483,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/efe57f0998df065470ff42c938f781cf?d=identicon&version=1",
            "client": "website",
            "content": "<p>Servant is the most popular Haskell solution for stuff like this, and I think I may be the only user of Fn, so your choice makes sense :)</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 163189979,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "libby@daydrea.me",
            "sender_full_name": "Libby Horacek (she) (SP1'15)",
            "sender_id": 7081,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "anyone want to pair on a tiny Servant project?",
            "submessages": [],
            "timestamp": 1555076264,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/009427e1b56c85d4a70a091905cf7a305c109dc6?x=x&version=5",
            "client": "ZulipElectron",
            "content": "<p><a href=\"https://twitter.com/BanjoTragedy/status/1098831377049550848\" target=\"_blank\" title=\"https://twitter.com/BanjoTragedy/status/1098831377049550848\">https://twitter.com/BanjoTragedy/status/1098831377049550848</a></p>\n<div class=\"inline-preview-twitter\"><div class=\"twitter-tweet\"><a href=\"https://twitter.com/BanjoTragedy/status/1098831377049550848\" target=\"_blank\"><img class=\"twitter-avatar\" src=\"https://pbs.twimg.com/profile_images/925526455550869505/I2zreBHW_normal.jpg\"></a><p>Someday I'll never again have to manually recurse over a data structure. And now that day is a little closer... #DerivingVia <a href=\"https://t.co/nVlWkhtPN8\" target=\"_blank\" title=\"https://t.co/nVlWkhtPN8\">https://twitter.com/BanjoTragedy/status/1098831377049550848/photo/1</a></p><span>- Matt Noonan (@BanjoTragedy)</span><div class=\"twitter-image\"><a href=\"https://t.co/nVlWkhtPN8\" target=\"_blank\" title=\"https://t.co/nVlWkhtPN8\"><img src=\"https://pbs.twimg.com/media/Dz_VDC_X0AA1btN.png:thumb\"></a></div></div></div>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 163240229,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "heneli@kailahi.com",
            "sender_full_name": "Heneli Ta'angafala Kailahi (SP2'17)",
            "sender_id": 100771,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Recursion Schemes + DerivingVia",
            "submessages": [],
            "timestamp": 1555117689,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/009427e1b56c85d4a70a091905cf7a305c109dc6?x=x&version=5",
            "client": "ZulipElectron",
            "content": "<p>Can anyone explain what's going on here? I've been staring at this tweet for days and it's breaking my brain</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 163240238,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "heneli@kailahi.com",
            "sender_full_name": "Heneli Ta'angafala Kailahi (SP2'17)",
            "sender_id": 100771,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Recursion Schemes + DerivingVia",
            "submessages": [],
            "timestamp": 1555117717,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/009427e1b56c85d4a70a091905cf7a305c109dc6?x=x&version=5",
            "client": "ZulipElectron",
            "content": "<p>Ooo neat I've never heard of Fn!</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 163240357,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "heneli@kailahi.com",
            "sender_full_name": "Heneli Ta'angafala Kailahi (SP2'17)",
            "sender_id": 100771,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "anyone want to pair on a tiny Servant project?",
            "submessages": [],
            "timestamp": 1555117895,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/7f89b22589ca6f3490f8a75591a699adc0e02fcc?x=x&version=1",
            "client": "website",
            "content": "<p>The syntax there seems to conflict with the syntax in the deriving via <a href=\"https://www.google.com/url?sa=t&amp;source=web&amp;rct=j&amp;url=https://www.kosmikus.org/DerivingVia/deriving-via-paper.pdf&amp;ved=2ahUKEwjt3J68kszhAhUoU98KHYLuAPAQFjABegQIAhAB&amp;usg=AOvVaw2mSScey7hSXaGI4Jy4O7nS\" target=\"_blank\" title=\"https://www.google.com/url?sa=t&amp;source=web&amp;rct=j&amp;url=https://www.kosmikus.org/DerivingVia/deriving-via-paper.pdf&amp;ved=2ahUKEwjt3J68kszhAhUoU98KHYLuAPAQFjABegQIAhAB&amp;usg=AOvVaw2mSScey7hSXaGI4Jy4O7nS\">paper</a>. I think in the syntax of the paper it would be </p>\n<div class=\"codehilite\"><pre><span></span>data Ast = ...\nderiving Show via FixpointOf AstF\n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 163247308,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "ark.email@gmail.com",
            "sender_full_name": "Adam Bratschi-Kaye (he) (SP1'17)",
            "sender_id": 100532,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Recursion Schemes + DerivingVia",
            "submessages": [],
            "timestamp": 1555129183,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/7f89b22589ca6f3490f8a75591a699adc0e02fcc?x=x&version=1",
            "client": "website",
            "content": "<p>It seems like if you have</p>\n<div class=\"codehilite\"><pre><span></span>instance Show a =&gt; Show AstF a\n</pre></div>\n\n\n<p>then you get</p>\n<div class=\"codehilite\"><pre><span></span>instance Show FixpointOf AstF\n</pre></div>\n\n\n<p>and <code>Ast</code> is just a newtype for <code>FixpointOf AstF</code> so you only need to define the show instance for <code>FixpointOf</code> and then deriving via will automatically give you a show instance for any AST.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 163247683,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "ark.email@gmail.com",
            "sender_full_name": "Adam Bratschi-Kaye (he) (SP1'17)",
            "sender_id": 100532,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Recursion Schemes + DerivingVia",
            "submessages": [],
            "timestamp": 1555129877,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/7f89b22589ca6f3490f8a75591a699adc0e02fcc?x=x&version=1",
            "client": "website",
            "content": "<p>Sorry that's not very precise - I don't really understand this stuff myself.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 163247749,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "ark.email@gmail.com",
            "sender_full_name": "Adam Bratschi-Kaye (he) (SP1'17)",
            "sender_id": 100532,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Recursion Schemes + DerivingVia",
            "submessages": [],
            "timestamp": 1555130011,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/009427e1b56c85d4a70a091905cf7a305c109dc6?x=x&version=5",
            "client": "ZulipMobile",
            "content": "<p>Awesome thanks!!</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 163369629,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "heneli@kailahi.com",
            "sender_full_name": "Heneli Ta'angafala Kailahi (SP2'17)",
            "sender_id": 100771,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Recursion Schemes + DerivingVia",
            "submessages": [],
            "timestamp": 1555325508,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4d074af6cc341ef51b25bb2f738cdb11?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-id=\"100532\">@Adam Kaye (SP1'17)</span>  <span class=\"user-mention\" data-user-id=\"100771\">@Heneli Ta'angafala Kailahi (SP2'17)</span> I think the syntax as implemented is slightly different from the paper, see <a href=\"https://github.com/vaibhavsagar/notebooks/blob/866438ef58cc9944c8afbbabeb759e94579f60a4/deriving-via/DerivingVia.ipynb\" target=\"_blank\" title=\"https://github.com/vaibhavsagar/notebooks/blob/866438ef58cc9944c8afbbabeb759e94579f60a4/deriving-via/DerivingVia.ipynb\">DerivingVia.ipynb</a></p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 163586752,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f419",
                    "emoji_name": "octopus",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "PLRedmond@gmail.com",
                        "full_name": "Patrick Redmond (W'14)",
                        "id": 5014
                    },
                    "user_id": 5014
                },
                {
                    "emoji_code": "1f64f",
                    "emoji_name": "pray",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "heneli@kailahi.com",
                        "full_name": "Heneli Ta'angafala Kailahi (SP2'17)",
                        "id": 100771
                    },
                    "user_id": 100771
                }
            ],
            "recipient_id": 22667,
            "sender_email": "vaibhavsagar@gmail.com",
            "sender_full_name": "Vaibhav Sagar (he) (F1'16)",
            "sender_id": 100041,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Recursion Schemes + DerivingVia",
            "submessages": [],
            "timestamp": 1555524838,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/7f89b22589ca6f3490f8a75591a699adc0e02fcc?x=x&version=1",
            "client": "website",
            "content": "<p>The bleeding edge! Thanks <span class=\"user-mention\" data-user-id=\"100041\">@Vaibhav Sagar (F1'16)</span></p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 163593489,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "+1",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "vaibhavsagar@gmail.com",
                        "full_name": "Vaibhav Sagar (he) (F1'16)",
                        "id": 100041
                    },
                    "user_id": 100041
                }
            ],
            "recipient_id": 22667,
            "sender_email": "ark.email@gmail.com",
            "sender_full_name": "Adam Bratschi-Kaye (he) (SP1'17)",
            "sender_id": 100532,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Recursion Schemes + DerivingVia",
            "submessages": [],
            "timestamp": 1555529262,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4d074af6cc341ef51b25bb2f738cdb11?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-id=\"100532\">@Adam Kaye (SP1'17)</span> this is why I do battle with the GHC API <span aria-label=\"smiley\" class=\"emoji emoji-1f603\" role=\"img\" title=\"smiley\">:smiley:</span></p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 163593595,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "vaibhavsagar@gmail.com",
            "sender_full_name": "Vaibhav Sagar (he) (F1'16)",
            "sender_id": 100041,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Recursion Schemes + DerivingVia",
            "submessages": [],
            "timestamp": 1555529333,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/612c7c2a108d7850c62d1d2293a481aa42855408?x=x&version=2",
            "client": "website",
            "content": "<p>Hello! I'm trying to reimplement <a href=\"https://eli.thegreenplace.net/2018/type-inference/\" target=\"_blank\" title=\"https://eli.thegreenplace.net/2018/type-inference/\">eli bendersky's python type inference</a> in haskell for the learns. I have a function <code>typeVar :: Int -&gt; Var</code> (a way to generate type-var names from ints) and I'd like to use that to implement <code>assignTypenames :: PlainAST -&gt; SymTab -&gt; Result TypedAST</code> where <code>type Result a = StateT Int (Except TypeErr) a</code>. The <code>Int</code> state is my way of making sure I can always generate a unique type-name. :)</p>\n<p>As soon as I started on this implementation I realized I was stumbling into the handwritten-recursion trap, and so turned to <a href=\"https://blog.sumtypeofway.com/an-introduction-to-recursion-schemes/\" target=\"_blank\" title=\"https://blog.sumtypeofway.com/an-introduction-to-recursion-schemes/\">sumtypeofway's 5 part post</a> on understanding <a href=\"https://hackage.haskell.org/package/recursion-schemes-5.1.2/docs/Data-Functor-Foldable.html\" target=\"_blank\" title=\"https://hackage.haskell.org/package/recursion-schemes-5.1.2/docs/Data-Functor-Foldable.html\">recursion-schemes</a>. However, after refreshing my understanding of that, I realised that I need to recurse with monadic actions, since I'm using <code>StateT Int</code> to keep track of type names that i've assigned...</p>\n<p>Soo.. This might be a waste of my time, and yours, but does anybody know how to use recursion schemes with monads? Maybe it's trivial, but I haven't made progress thinking about it away from my computer (and don't have a lot of time infront of my computer recently because <span aria-label=\"baby change station\" class=\"emoji emoji-1f6bc\" role=\"img\" title=\"baby change station\">:baby_change_station:</span>). Maybe it's an interesting problem for folks here too?</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 163864248,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "PLRedmond@gmail.com",
            "sender_full_name": "Patrick Redmond (W'14)",
            "sender_id": 5014,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "recursion schemes + state monad",
            "submessages": [],
            "timestamp": 1555874993,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p>Ah, cool, thinking about it\u2014and thanks for the link to the recursion-schemes post!</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 163865134,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f389",
                    "emoji_name": "tada",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "PLRedmond@gmail.com",
                        "full_name": "Patrick Redmond (W'14)",
                        "id": 5014
                    },
                    "user_id": 5014
                }
            ],
            "recipient_id": 22667,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "recursion schemes + state monad",
            "submessages": [],
            "timestamp": 1555876575,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/29c07e18de7841a470c83fe1272049e8fe5643a7?x=x&version=1",
            "client": "ZulipElectron",
            "content": "<p><span class=\"user-mention\" data-user-id=\"5014\">@Patrick Redmond (W'14)</span>  To confirm my understanding, are you using recursion schemes to traverse PlainAST and assign symbolic type names (t1, t2) to all nodes (subexpressions)? If so, it might work to make the PlainAST TreeLike ( <a href=\"http://hackage.haskell.org/package/tree-traversals\" target=\"_blank\" title=\"http://hackage.haskell.org/package/tree-traversals\">http://hackage.haskell.org/package/tree-traversals</a>).  Then, from their examples:</p>\n<div class=\"codehilite\"><pre><span></span>visit a = StateT $ \\e -&gt; print a &gt;&gt; return (e, succ e)\ntraversed &lt;- postorder visit myTree `evalStateT` 0\n</pre></div>\n\n\n<p>You can use the order of the recursion to generate a unique symbolic type name for each node. *hopefully :)</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 163866998,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "michael.david.lauria@gmail.com",
            "sender_full_name": "Michael Lauria (he) (S'13)",
            "sender_id": 2115,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "recursion schemes + state monad",
            "submessages": [],
            "timestamp": 1555879827,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/612c7c2a108d7850c62d1d2293a481aa42855408?x=x&version=2",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-id=\"2115\">@Michael Lauria (S'13)</span> yes, that's what i'm doing! I'll check out <code>tree-traversals</code> .. thanks! :)</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 163869676,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "+1",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "michael.david.lauria@gmail.com",
                        "full_name": "Michael Lauria (he) (S'13)",
                        "id": 2115
                    },
                    "user_id": 2115
                }
            ],
            "recipient_id": 22667,
            "sender_email": "PLRedmond@gmail.com",
            "sender_full_name": "Patrick Redmond (W'14)",
            "sender_id": 5014,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "recursion schemes + state monad",
            "submessages": [],
            "timestamp": 1555884322,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4d074af6cc341ef51b25bb2f738cdb11?d=identicon&version=1",
            "client": "website",
            "content": "<p>I've never seriously used recursion schemes, but a quick search turned up <a href=\"https://jtobin.io/monadic-recursion-schemes\" target=\"_blank\" title=\"https://jtobin.io/monadic-recursion-schemes\">https://jtobin.io/monadic-recursion-schemes</a>, which links to <a href=\"https://github.com/ekmett/recursion-schemes/issues/3\" target=\"_blank\" title=\"https://github.com/ekmett/recursion-schemes/issues/3\">https://github.com/ekmett/recursion-schemes/issues/3</a> which has been closed, so maybe something like <code>cataA</code> exists that you can use?</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 163872173,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "vaibhavsagar@gmail.com",
            "sender_full_name": "Vaibhav Sagar (he) (F1'16)",
            "sender_id": 100041,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "recursion schemes + state monad",
            "submessages": [],
            "timestamp": 1555888675,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/6485c74622306264ff53449c6f0ca540?d=identicon&version=1",
            "client": "ZulipMobile",
            "content": "<p>I have done this! I have also forgotten all of the details... <a href=\"https://github.com/imccoy/babytc/blob/master/src/Lib.hs#L124\" target=\"_blank\" title=\"https://github.com/imccoy/babytc/blob/master/src/Lib.hs#L124\">https://github.com/imccoy/babytc/blob/master/src/Lib.hs#L124</a> is the link.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 163875575,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "203c",
                    "emoji_name": "bangbang",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "PLRedmond@gmail.com",
                        "full_name": "Patrick Redmond (W'14)",
                        "id": 5014
                    },
                    "user_id": 5014
                }
            ],
            "recipient_id": 22667,
            "sender_email": "iain@mccoy.id.au",
            "sender_full_name": "Iain McCoy (he) (SP2'17)",
            "sender_id": 100806,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "recursion schemes + state monad",
            "submessages": [],
            "timestamp": 1555894586,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/6485c74622306264ff53449c6f0ca540?d=identicon&version=1",
            "client": "ZulipMobile",
            "content": "<p>I used hmapM, which unification-fd defines in its own recursion schemes infrastructure at <a href=\"http://hackage.haskell.org/package/unification-fd-0.10.0.1/docs/src/Data-Functor-Fixedpoint.html#hmapM\" target=\"_blank\" title=\"http://hackage.haskell.org/package/unification-fd-0.10.0.1/docs/src/Data-Functor-Fixedpoint.html#hmapM\">http://hackage.haskell.org/package/unification-fd-0.10.0.1/docs/src/Data-Functor-Fixedpoint.html#hmapM</a></p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 163875576,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "iain@mccoy.id.au",
            "sender_full_name": "Iain McCoy (he) (SP2'17)",
            "sender_id": 100806,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "recursion schemes + state monad",
            "submessages": [],
            "timestamp": 1555894597,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/6485c74622306264ff53449c6f0ca540?d=identicon&version=1",
            "client": "ZulipMobile",
            "content": "<p>Maaaaybe later I will try to do it with the kmett'ian library</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 163875587,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "iain@mccoy.id.au",
            "sender_full_name": "Iain McCoy (he) (SP2'17)",
            "sender_id": 100806,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "recursion schemes + state monad",
            "submessages": [],
            "timestamp": 1555894624,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/612c7c2a108d7850c62d1d2293a481aa42855408?x=x&version=2",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-id=\"100041\">@Vaibhav Sagar (F1'16)</span> i honestly can't follow that github issue..</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 163876452,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "PLRedmond@gmail.com",
            "sender_full_name": "Patrick Redmond (W'14)",
            "sender_id": 5014,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "recursion schemes + state monad",
            "submessages": [],
            "timestamp": 1555896177,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4d074af6cc341ef51b25bb2f738cdb11?d=identicon&version=1",
            "client": "ZulipMobile",
            "content": "<p>I'm not completely sure what's going on either <span aria-label=\"smile\" class=\"emoji emoji-263a\" role=\"img\" title=\"smile\">:smile:</span></p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 163876536,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f605",
                    "emoji_name": "sweat_smile",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "PLRedmond@gmail.com",
                        "full_name": "Patrick Redmond (W'14)",
                        "id": 5014
                    },
                    "user_id": 5014
                }
            ],
            "recipient_id": 22667,
            "sender_email": "vaibhavsagar@gmail.com",
            "sender_full_name": "Vaibhav Sagar (he) (F1'16)",
            "sender_id": 100041,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "recursion schemes + state monad",
            "submessages": [],
            "timestamp": 1555896311,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/612c7c2a108d7850c62d1d2293a481aa42855408?x=x&version=2",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-id=\"100806\">@Iain McCoy (SP2'17)</span> <br>\nthis is great! more examples of recursion-schemes helps me to understand them better. ty for pointing this out!</p>\n<p>1. <strong>unification-fd</strong> has something called <code>hmap</code> built with <code>ana</code> that iain used for this purpose:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"nf\">hmapM</span> <span class=\"ow\">::</span> <span class=\"p\">(</span><span class=\"kt\">Functor</span> <span class=\"n\">f</span><span class=\"p\">,</span> <span class=\"kt\">Traversable</span> <span class=\"n\">g</span><span class=\"p\">,</span> <span class=\"kt\">Monad</span> <span class=\"n\">m</span><span class=\"p\">)</span> <span class=\"ow\">=&gt;</span> <span class=\"p\">(</span><span class=\"n\">forall</span> <span class=\"n\">a</span><span class=\"o\">.</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"ow\">-&gt;</span> <span class=\"n\">m</span> <span class=\"p\">(</span><span class=\"n\">g</span> <span class=\"n\">a</span><span class=\"p\">))</span> <span class=\"ow\">-&gt;</span> <span class=\"kt\">Fix</span> <span class=\"n\">f</span> <span class=\"ow\">-&gt;</span> <span class=\"n\">m</span> <span class=\"p\">(</span><span class=\"kt\">Fix</span> <span class=\"n\">g</span><span class=\"p\">)</span>\n<span class=\"nf\">hmapM</span> <span class=\"n\">eps</span> <span class=\"ow\">=</span> <span class=\"n\">anaM</span> <span class=\"p\">(</span><span class=\"n\">eps</span> <span class=\"o\">.</span> <span class=\"n\">unFix</span><span class=\"p\">)</span>\n\n<span class=\"c1\">-- N.B., this orders the side effects from the top down.</span>\n<span class=\"nf\">anaM</span> <span class=\"ow\">::</span> <span class=\"p\">(</span><span class=\"kt\">Traversable</span> <span class=\"n\">f</span><span class=\"p\">,</span> <span class=\"kt\">Monad</span> <span class=\"n\">m</span><span class=\"p\">)</span> <span class=\"ow\">=&gt;</span> <span class=\"p\">(</span><span class=\"n\">a</span> <span class=\"ow\">-&gt;</span> <span class=\"n\">m</span> <span class=\"p\">(</span><span class=\"n\">f</span> <span class=\"n\">a</span><span class=\"p\">))</span> <span class=\"ow\">-&gt;</span> <span class=\"p\">(</span><span class=\"n\">a</span> <span class=\"ow\">-&gt;</span> <span class=\"n\">m</span> <span class=\"p\">(</span><span class=\"kt\">Fix</span> <span class=\"n\">f</span><span class=\"p\">))</span>\n<span class=\"nf\">anaM</span> <span class=\"n\">psiM</span> <span class=\"ow\">=</span> <span class=\"p\">(</span><span class=\"n\">liftM</span> <span class=\"kt\">Fix</span> <span class=\"o\">.</span> <span class=\"n\">mapM</span> <span class=\"n\">self</span><span class=\"p\">)</span> <span class=\"o\">&lt;=&lt;</span> <span class=\"n\">psiM</span>\n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 163876651,
            "is_me_message": false,
            "last_edit_timestamp": 1555900430,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "PLRedmond@gmail.com",
            "sender_full_name": "Patrick Redmond (W'14)",
            "sender_id": 5014,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "recursion schemes + state monad",
            "submessages": [],
            "timestamp": 1555896531,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/612c7c2a108d7850c62d1d2293a481aa42855408?x=x&version=2",
            "client": "website",
            "content": "<p>ooh, the jtobin link is great too... ty Vaibhav!</p>\n<p>2. <strong>jtobin's blog post</strong> redefines the standard recursion-schemes for monads:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"nf\">cataM</span> <span class=\"ow\">::</span> <span class=\"p\">(</span><span class=\"kt\">Monad</span> <span class=\"n\">m</span><span class=\"p\">,</span> <span class=\"kt\">Traversable</span> <span class=\"p\">(</span><span class=\"kt\">Base</span> <span class=\"n\">t</span><span class=\"p\">),</span> <span class=\"kt\">RS</span><span class=\"o\">.</span><span class=\"kt\">Foldable</span> <span class=\"n\">t</span><span class=\"p\">)</span> <span class=\"ow\">=&gt;</span> <span class=\"p\">(</span><span class=\"kt\">Base</span> <span class=\"n\">t</span> <span class=\"n\">a</span> <span class=\"ow\">-&gt;</span> <span class=\"n\">m</span> <span class=\"n\">a</span><span class=\"p\">)</span> <span class=\"ow\">-&gt;</span> <span class=\"n\">t</span> <span class=\"ow\">-&gt;</span>  <span class=\"n\">m</span> <span class=\"n\">a</span>\n<span class=\"nf\">cataM</span> <span class=\"n\">alg</span> <span class=\"ow\">=</span> <span class=\"n\">alg</span> <span class=\"o\">&lt;=&lt;</span> <span class=\"n\">traverse</span> <span class=\"n\">c</span> <span class=\"o\">.</span> <span class=\"n\">project</span>\n</pre></div>\n\n\n<p>and here's the <code>ana</code> for comparison (with unification-fd):</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"nf\">anaM</span> <span class=\"ow\">::</span> <span class=\"p\">(</span><span class=\"kt\">Monad</span> <span class=\"n\">m</span><span class=\"p\">,</span> <span class=\"kt\">Traversable</span> <span class=\"p\">(</span><span class=\"kt\">Base</span> <span class=\"n\">t</span><span class=\"p\">),</span> <span class=\"kt\">RS</span><span class=\"o\">.</span><span class=\"kt\">Unfoldable</span> <span class=\"n\">t</span><span class=\"p\">)</span> <span class=\"ow\">=&gt;</span> <span class=\"p\">(</span><span class=\"n\">a</span> <span class=\"ow\">-&gt;</span> <span class=\"n\">m</span> <span class=\"p\">(</span><span class=\"kt\">Base</span> <span class=\"n\">t</span> <span class=\"n\">a</span><span class=\"p\">))</span> <span class=\"ow\">-&gt;</span> <span class=\"n\">a</span> <span class=\"ow\">-&gt;</span> <span class=\"n\">m</span> <span class=\"n\">t</span>\n<span class=\"nf\">anaM</span> <span class=\"n\">coalg</span> <span class=\"ow\">=</span> <span class=\"p\">(</span><span class=\"n\">return</span> <span class=\"o\">.</span> <span class=\"n\">embed</span><span class=\"p\">)</span> <span class=\"o\">&lt;=&lt;</span> <span class=\"n\">traverse</span> <span class=\"n\">a</span> <span class=\"o\">&lt;=&lt;</span> <span class=\"n\">coalg</span>\n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 163876934,
            "is_me_message": false,
            "last_edit_timestamp": 1555900435,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "PLRedmond@gmail.com",
            "sender_full_name": "Patrick Redmond (W'14)",
            "sender_id": 5014,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "recursion schemes + state monad",
            "submessages": [],
            "timestamp": 1555897006,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/612c7c2a108d7850c62d1d2293a481aa42855408?x=x&version=2",
            "client": "website",
            "content": "<p>\"hutton's razor\" was new to me.... i did something like that a few years ago <a href=\"https://github.com/plredmond/pl-explorations/tree/master/02-type-edsl\" target=\"_blank\" title=\"https://github.com/plredmond/pl-explorations/tree/master/02-type-edsl\">here</a> but never knew it had a name</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 163877191,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "PLRedmond@gmail.com",
            "sender_full_name": "Patrick Redmond (W'14)",
            "sender_id": 5014,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "recursion schemes + state monad",
            "submessages": [],
            "timestamp": 1555897474,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4d074af6cc341ef51b25bb2f738cdb11?d=identicon&version=1",
            "client": "website",
            "content": "<p>ooh, another quick search turns up that it was first used in a paper titled \"Fold and Unfold for Program Semantics\": <a href=\"http://www.cs.nott.ac.uk/~pszgmh/semantics.pdf\" target=\"_blank\" title=\"http://www.cs.nott.ac.uk/~pszgmh/semantics.pdf\">http://www.cs.nott.ac.uk/~pszgmh/semantics.pdf</a></p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 163877326,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "vaibhavsagar@gmail.com",
            "sender_full_name": "Vaibhav Sagar (he) (F1'16)",
            "sender_id": 100041,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "recursion schemes + state monad",
            "submessages": [],
            "timestamp": 1555897730,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4d074af6cc341ef51b25bb2f738cdb11?d=identicon&version=1",
            "client": "website",
            "content": "<p><a href=\"https://stackoverflow.com/questions/17870864/where-is-huttons-razor-first-defined\" target=\"_blank\" title=\"https://stackoverflow.com/questions/17870864/where-is-huttons-razor-first-defined\">https://stackoverflow.com/questions/17870864/where-is-huttons-razor-first-defined</a></p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 163877338,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "vaibhavsagar@gmail.com",
            "sender_full_name": "Vaibhav Sagar (he) (F1'16)",
            "sender_id": 100041,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "recursion schemes + state monad",
            "submessages": [],
            "timestamp": 1555897750,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/612c7c2a108d7850c62d1d2293a481aa42855408?x=x&version=2",
            "client": "website",
            "content": "<p>i'm adding the different approaches in this thread..</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 163877744,
            "is_me_message": false,
            "last_edit_timestamp": 1555899374,
            "reactions": [
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "+1",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "vaibhavsagar@gmail.com",
                        "full_name": "Vaibhav Sagar (he) (F1'16)",
                        "id": 100041
                    },
                    "user_id": 100041
                }
            ],
            "recipient_id": 22667,
            "sender_email": "PLRedmond@gmail.com",
            "sender_full_name": "Patrick Redmond (W'14)",
            "sender_id": 5014,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "recursion schemes + state monad",
            "submessages": [],
            "timestamp": 1555898478,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/612c7c2a108d7850c62d1d2293a481aa42855408?x=x&version=2",
            "client": "website",
            "content": "<p>3. <strong>ekmett's library</strong> has a type-specialization of cata for effects:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"nf\">cataA</span> <span class=\"ow\">::</span> <span class=\"kt\">Recursive</span> <span class=\"n\">t</span> <span class=\"ow\">=&gt;</span> <span class=\"p\">(</span><span class=\"kt\">Base</span> <span class=\"n\">t</span> <span class=\"p\">(</span><span class=\"n\">f</span> <span class=\"n\">a</span><span class=\"p\">)</span> <span class=\"ow\">-&gt;</span> <span class=\"n\">f</span> <span class=\"n\">a</span><span class=\"p\">)</span> <span class=\"ow\">-&gt;</span> <span class=\"n\">t</span> <span class=\"ow\">-&gt;</span> <span class=\"n\">f</span> <span class=\"n\">a</span>\n</pre></div>\n\n\n<p>which is a specialization of the <a href=\"https://blog.sumtypeofway.com/recursion-schemes-part-2/#algebras\" target=\"_blank\" title=\"https://blog.sumtypeofway.com/recursion-schemes-part-2/#algebras\">algebra's</a> bare value <code>a</code> to <code>f a</code>.. compare with the unspecialized type:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"nf\">cata</span> <span class=\"ow\">::</span> <span class=\"kt\">Recursive</span> <span class=\"n\">t</span> <span class=\"ow\">=&gt;</span> <span class=\"p\">(</span><span class=\"kt\">Base</span> <span class=\"n\">t</span> <span class=\"n\">a</span> <span class=\"ow\">-&gt;</span> <span class=\"n\">a</span><span class=\"p\">)</span> <span class=\"ow\">-&gt;</span> <span class=\"n\">t</span> <span class=\"ow\">-&gt;</span> <span class=\"n\">a</span>\n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 163878234,
            "is_me_message": false,
            "last_edit_timestamp": 1555900443,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "PLRedmond@gmail.com",
            "sender_full_name": "Patrick Redmond (W'14)",
            "sender_id": 5014,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "recursion schemes + state monad",
            "submessages": [],
            "timestamp": 1555899383,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/612c7c2a108d7850c62d1d2293a481aa42855408?x=x&version=2",
            "client": "website",
            "content": "<p>4. <strong>tree traversals</strong> focuses more on explicitly affording control over the order of traverals, and less on making the recursion implicit.. the <code>TreeLike</code> instance teaches the package how to traverse...<br>\n...and that's all i have time for tonight! i'm not sure i'm understanding this all yet, but i have to pick this up later.. thanks for the help everyone!</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 163878639,
            "is_me_message": false,
            "last_edit_timestamp": 1555900449,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "PLRedmond@gmail.com",
            "sender_full_name": "Patrick Redmond (W'14)",
            "sender_id": 5014,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "recursion schemes + state monad",
            "submessages": [],
            "timestamp": 1555900015,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/612c7c2a108d7850c62d1d2293a481aa42855408?x=x&version=2",
            "client": "website",
            "content": "<p>lol.. they came out in stack-pop order</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 163878921,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "PLRedmond@gmail.com",
            "sender_full_name": "Patrick Redmond (W'14)",
            "sender_id": 5014,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "recursion schemes + state monad",
            "submessages": [],
            "timestamp": 1555900485,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4d074af6cc341ef51b25bb2f738cdb11?d=identicon&version=1",
            "client": "website",
            "content": "<p>the CFP is open for another two days! <a href=\"http://www.composeconference.org/\" target=\"_blank\" title=\"http://www.composeconference.org/\">http://www.composeconference.org/</a></p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 163879463,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "vaibhavsagar@gmail.com",
            "sender_full_name": "Vaibhav Sagar (he) (F1'16)",
            "sender_id": 100041,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "compose conf",
            "submessages": [],
            "timestamp": 1555901506,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4d074af6cc341ef51b25bb2f738cdb11?d=identicon&version=1",
            "client": "website",
            "content": "<p>My current employer helps organise this conference, so I fully intend to be there even though I haven't purchased tickets yet <span aria-label=\"smiley\" class=\"emoji emoji-1f603\" role=\"img\" title=\"smiley\">:smiley:</span></p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 163879514,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "vaibhavsagar@gmail.com",
            "sender_full_name": "Vaibhav Sagar (he) (F1'16)",
            "sender_id": 100041,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "compose conf",
            "submessages": [],
            "timestamp": 1555901567,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/009427e1b56c85d4a70a091905cf7a305c109dc6?x=x&version=5",
            "client": "ZulipElectron",
            "content": "<p>Yay I'll be there! <span aria-label=\"smile\" class=\"emoji emoji-263a\" role=\"img\" title=\"smile\">:smile:</span></p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 163956130,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "2764",
                    "emoji_name": "heart",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "vaibhavsagar@gmail.com",
                        "full_name": "Vaibhav Sagar (he) (F1'16)",
                        "id": 100041
                    },
                    "user_id": 100041
                },
                {
                    "emoji_code": "2764",
                    "emoji_name": "heart",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "iain@mccoy.id.au",
                        "full_name": "Iain McCoy (he) (SP2'17)",
                        "id": 100806
                    },
                    "user_id": 100806
                }
            ],
            "recipient_id": 22667,
            "sender_email": "heneli@kailahi.com",
            "sender_full_name": "Heneli Ta'angafala Kailahi (SP2'17)",
            "sender_id": 100771,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "compose conf",
            "submessages": [],
            "timestamp": 1555987003,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/6485c74622306264ff53449c6f0ca540?d=identicon&version=1",
            "client": "website",
            "content": "<p>I just tried it using the recursion-schemes library and it was pleasingly straightforward :) it turns out once you have something that works with <code>cataA</code>, you can just sub <code>cata</code> in and it's still good. I think <code>cataA</code> is mostly about the type signature ergonomics.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 163993894,
            "is_me_message": false,
            "last_edit_timestamp": 1556029228,
            "reactions": [
                {
                    "emoji_code": "1f389",
                    "emoji_name": "tada",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "vaibhavsagar@gmail.com",
                        "full_name": "Vaibhav Sagar (he) (F1'16)",
                        "id": 100041
                    },
                    "user_id": 100041
                },
                {
                    "emoji_code": "1f389",
                    "emoji_name": "tada",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "PLRedmond@gmail.com",
                        "full_name": "Patrick Redmond (W'14)",
                        "id": 5014
                    },
                    "user_id": 5014
                }
            ],
            "recipient_id": 22667,
            "sender_email": "iain@mccoy.id.au",
            "sender_full_name": "Iain McCoy (he) (SP2'17)",
            "sender_id": 100806,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "recursion schemes + state monad",
            "submessages": [],
            "timestamp": 1556029192,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/6485c74622306264ff53449c6f0ca540?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-id=\"5014\">@Patrick Redmond (W'14)</span> give me a holler if cataA gives you trouble and you want to see how I did it :)</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 163994302,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1176",
                    "emoji_name": "sheepy",
                    "reaction_type": "realm_emoji",
                    "user": {
                        "email": "PLRedmond@gmail.com",
                        "full_name": "Patrick Redmond (W'14)",
                        "id": 5014
                    },
                    "user_id": 5014
                }
            ],
            "recipient_id": 22667,
            "sender_email": "iain@mccoy.id.au",
            "sender_full_name": "Iain McCoy (he) (SP2'17)",
            "sender_id": 100806,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "recursion schemes + state monad",
            "submessages": [],
            "timestamp": 1556029444,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/612c7c2a108d7850c62d1d2293a481aa42855408?x=x&version=2",
            "client": "website",
            "content": "<p>ah, yup! i'll come back here when i've made progress; just mostly not any free time yet this week</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 163995894,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "PLRedmond@gmail.com",
            "sender_full_name": "Patrick Redmond (W'14)",
            "sender_id": 5014,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "recursion schemes + state monad",
            "submessages": [],
            "timestamp": 1556030591,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/612c7c2a108d7850c62d1d2293a481aa42855408?x=x&version=2",
            "client": "website",
            "content": "<p>looking at <a href=\"https://eli.thegreenplace.net/2018/type-inference/\" target=\"_blank\" title=\"https://eli.thegreenplace.net/2018/type-inference/\">eli bendersky's python type inference</a> post again and <a href=\"https://github.com/eliben/code-for-blog/blob/master/2018/type-inference/typing.py#L132-L139\" target=\"_blank\" title=\"https://github.com/eliben/code-for-blog/blob/master/2018/type-inference/typing.py#L132-L139\">the assign_typenames python code</a> i'm a little confused how to go about doing this ... <code>cata</code> does the recursion for me, so how do I pass in the <code>local_symtab</code> that Eli's explicit recursion uses?</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 164082768,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "PLRedmond@gmail.com",
            "sender_full_name": "Patrick Redmond (W'14)",
            "sender_id": 5014,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "recursion schemes + state monad",
            "submessages": [],
            "timestamp": 1556114485,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/612c7c2a108d7850c62d1d2293a481aa42855408?x=x&version=2",
            "client": "website",
            "content": "<p>Eli's code never modifies the symtab passed in.. it passes a copy of the symtab with each LambaExpr's argNames added to it to the explicit recursion.. I'm not sure how to achieve this with  <code>cata</code> since there's never an explicit recursive call..</p>\n<p>adding the symtab to the <code>StateT</code>'s state wouldn't achieve the same thing either, since then it would persist through returns back up the tree</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 164083107,
            "is_me_message": false,
            "last_edit_timestamp": 1556114869,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "PLRedmond@gmail.com",
            "sender_full_name": "Patrick Redmond (W'14)",
            "sender_id": 5014,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "recursion schemes + state monad",
            "submessages": [],
            "timestamp": 1556114705,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/612c7c2a108d7850c62d1d2293a481aa42855408?x=x&version=2",
            "client": "website",
            "content": "<p>There's probably other ways to assign typenames/vars to expressions, but this approach discovers unbound names, which is nice</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 164084018,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "PLRedmond@gmail.com",
            "sender_full_name": "Patrick Redmond (W'14)",
            "sender_id": 5014,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "recursion schemes + state monad",
            "submessages": [],
            "timestamp": 1556115293,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/6485c74622306264ff53449c6f0ca540?d=identicon&version=1",
            "client": "ZulipMobile",
            "content": "<p>Ooh, I thought that this step was just about assigning identifiers to nodes and not about  resolving variables. What you can do is either use a state monad very carefully (assign the state for the children, cause the children to be evaluated, reset the state for the children) or there's a thing I've done in the past where the values inside your functor are functions. So your argument to cata would return a function taking an environment argument that builds some new tyvars and sticks them in a new environment, does <code>map</code> to apply your that new environment to the functions in the functor, then does <code>sequence</code> to give the side-effects a kick, then I think you might be ready to return? I'm not sure what the plumbing would be exactly but I think something like that would be viable. I know I've used the technique to do name resolution, but not sure if I've intermingled that with tyvar generation</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 164085177,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f419",
                    "emoji_name": "octopus",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "PLRedmond@gmail.com",
                        "full_name": "Patrick Redmond (W'14)",
                        "id": 5014
                    },
                    "user_id": 5014
                }
            ],
            "recipient_id": 22667,
            "sender_email": "iain@mccoy.id.au",
            "sender_full_name": "Iain McCoy (he) (SP2'17)",
            "sender_id": 100806,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "recursion schemes + state monad",
            "submessages": [],
            "timestamp": 1556116085,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/6485c74622306264ff53449c6f0ca540?d=identicon&version=1",
            "client": "ZulipMobile",
            "content": "<p>(sorry about the very loose sketch, it's almost bedtime)</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 164085487,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f4a4",
                    "emoji_name": "zzz",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "PLRedmond@gmail.com",
                        "full_name": "Patrick Redmond (W'14)",
                        "id": 5014
                    },
                    "user_id": 5014
                }
            ],
            "recipient_id": 22667,
            "sender_email": "iain@mccoy.id.au",
            "sender_full_name": "Iain McCoy (he) (SP2'17)",
            "sender_id": 100806,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "recursion schemes + state monad",
            "submessages": [],
            "timestamp": 1556116285,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/612c7c2a108d7850c62d1d2293a481aa42855408?x=x&version=2",
            "client": "website",
            "content": "<p>i think the \"use the state monad very carefully\" approach sufficiently defeats the point of a strong type system that i don't want to do it that way..</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 164180385,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "PLRedmond@gmail.com",
            "sender_full_name": "Patrick Redmond (W'14)",
            "sender_id": 5014,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "recursion schemes + state monad",
            "submessages": [],
            "timestamp": 1556205975,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/612c7c2a108d7850c62d1d2293a481aa42855408?x=x&version=2",
            "client": "website",
            "content": "<p>i'm still thinking through the functor-of-functions approach you described..</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 164180416,
            "is_me_message": false,
            "last_edit_timestamp": 1556206818,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "PLRedmond@gmail.com",
            "sender_full_name": "Patrick Redmond (W'14)",
            "sender_id": 5014,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "recursion schemes + state monad",
            "submessages": [],
            "timestamp": 1556206006,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/612c7c2a108d7850c62d1d2293a481aa42855408?x=x&version=2",
            "client": "website",
            "content": "<p>thanks!</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 164180437,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "PLRedmond@gmail.com",
            "sender_full_name": "Patrick Redmond (W'14)",
            "sender_id": 5014,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "recursion schemes + state monad",
            "submessages": [],
            "timestamp": 1556206021,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/612c7c2a108d7850c62d1d2293a481aa42855408?x=x&version=2",
            "client": "website",
            "content": "<p>hmm.. ok, i ported a very tiny example over to haskell with explicit recursion..</p>\n<p>i tried <code>\\x.(x 1)</code> and got <code>[\\x.([[x :: t1] [1 :: Int] :: t2]) :: t1 -&gt; t0]</code></p>\n<p>i tried doing the same thing with eli bendersky's implementation</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">d</span> <span class=\"o\">=</span> <span class=\"n\">parser</span><span class=\"o\">.</span><span class=\"n\">Parser</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">parse_decl</span><span class=\"p\">(</span><span class=\"s2\">&quot;foo x = x(1)&quot;</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">assign_typenames</span><span class=\"p\">(</span><span class=\"n\">d</span><span class=\"o\">.</span><span class=\"n\">expr</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">d</span><span class=\"o\">.</span><span class=\"n\">expr</span><span class=\"p\">)</span>\n<span class=\"n\">Lambda</span><span class=\"p\">([</span><span class=\"n\">x</span><span class=\"p\">],</span> <span class=\"n\">App</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]))</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">show_type_assignment</span><span class=\"p\">(</span><span class=\"n\">d</span><span class=\"o\">.</span><span class=\"n\">expr</span><span class=\"p\">))</span>\n<span class=\"n\">Lambda</span><span class=\"p\">([</span><span class=\"n\">x</span><span class=\"p\">],</span> <span class=\"n\">App</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]))</span>                                     <span class=\"n\">t0</span>\n<span class=\"n\">App</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">])</span>                                                  <span class=\"n\">t2</span>\n<span class=\"n\">x</span>                                                            <span class=\"n\">t1</span>\n<span class=\"mi\">1</span>                                                            <span class=\"n\">Int</span>\n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 164265760,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "PLRedmond@gmail.com",
            "sender_full_name": "Patrick Redmond (W'14)",
            "sender_id": 5014,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "recursion schemes + state monad",
            "submessages": [],
            "timestamp": 1556288459,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/612c7c2a108d7850c62d1d2293a481aa42855408?x=x&version=2",
            "client": "website",
            "content": "<p>from this i can tell there's going to be an equation <code>t2 == t1 -&gt; t0</code> i guess</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 164265815,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "PLRedmond@gmail.com",
            "sender_full_name": "Patrick Redmond (W'14)",
            "sender_id": 5014,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "recursion schemes + state monad",
            "submessages": [],
            "timestamp": 1556288502,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/612c7c2a108d7850c62d1d2293a481aa42855408?x=x&version=2",
            "client": "website",
            "content": "<p>ok, i re-did it with recursion schemes now too.. both implementations are in the gist, here<br>\n<a href=\"https://gist.github.com/plredmond/051f23ce9b0a521b7a53d9791dadd060\" target=\"_blank\" title=\"https://gist.github.com/plredmond/051f23ce9b0a521b7a53d9791dadd060\">https://gist.github.com/plredmond/051f23ce9b0a521b7a53d9791dadd060</a></p>\n<p>what i learned (thanks to you all) is this:</p>\n<ul>\n<li>\n<p>eli's implementation</p>\n<p>1. finds unbound variables<br>\n2. correctly sets a function's argument types to the same type-var as those arguments' in the expression</p>\n</li>\n<li>\n<p>the recursion-schemes implementation doesn't do those things but</p>\n<ul>\n<li>it's probably easy to write a separate check that discovers any unbound variables and complains</li>\n<li>later, when generating type-equations, we can generate extra equations to make up for #2</li>\n</ul>\n</li>\n</ul>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 164269833,
            "is_me_message": false,
            "last_edit_timestamp": 1556291229,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "PLRedmond@gmail.com",
            "sender_full_name": "Patrick Redmond (W'14)",
            "sender_id": 5014,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "recursion schemes + state monad",
            "submessages": [],
            "timestamp": 1556291060,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/612c7c2a108d7850c62d1d2293a481aa42855408?x=x&version=2",
            "client": "website",
            "content": "<p>Are you still working on this?</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 164313334,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "PLRedmond@gmail.com",
            "sender_full_name": "Patrick Redmond (W'14)",
            "sender_id": 5014,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "anyone want to pair on a tiny Servant project?",
            "submessages": [],
            "timestamp": 1556332524,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/612c7c2a108d7850c62d1d2293a481aa42855408?x=x&version=2",
            "client": "website",
            "content": "<p>I've used servant a lot for random personal projects that never made it to github, and one prototype at work that was productionized for a few months. I'd like to help if I can.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 164313395,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "PLRedmond@gmail.com",
            "sender_full_name": "Patrick Redmond (W'14)",
            "sender_id": 5014,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "anyone want to pair on a tiny Servant project?",
            "submessages": [],
            "timestamp": 1556332643,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/612c7c2a108d7850c62d1d2293a481aa42855408?x=x&version=2",
            "client": "website",
            "content": "<p>here's another implementation of type-name assignment, but it doesn't use recursion schemes:<br>\n<a href=\"https://github.com/wh5a/Algorithm-W-Step-By-Step/blob/master/AlgorithmW.lhs#L195-L219\" target=\"_blank\" title=\"https://github.com/wh5a/Algorithm-W-Step-By-Step/blob/master/AlgorithmW.lhs#L195-L219\">https://github.com/wh5a/Algorithm-W-Step-By-Step/blob/master/AlgorithmW.lhs#L195-L219</a><br>\nthe use is a comprehensive function <code>ti</code> that does both name assignment and inference</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 164453537,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "PLRedmond@gmail.com",
            "sender_full_name": "Patrick Redmond (W'14)",
            "sender_id": 5014,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "recursion schemes + state monad",
            "submessages": [],
            "timestamp": 1556545716,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/6485c74622306264ff53449c6f0ca540?d=identicon&version=1",
            "client": "website",
            "content": "<p>I did some things! <a href=\"https://gist.github.com/imccoy/8c23670162a5a13231a19fd7bea98039\" target=\"_blank\" title=\"https://gist.github.com/imccoy/8c23670162a5a13231a19fd7bea98039\">https://gist.github.com/imccoy/8c23670162a5a13231a19fd7bea98039</a>. The main thing I haven't done yet is to signal something to the user when a binding for a var is not found. You could do that with a post-processing step, like you said, although I'd be tempted to reach for Maybe (or some other error-collecting type).</p>\n<p>I used a let/var sort of language rather than a lam/apply sort of language in the hope that it leaves an obvious Exercise for the Reader if the techniques seem like something you want to try :)</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 164544977,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f62e",
                    "emoji_name": "open_mouth",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "PLRedmond@gmail.com",
                        "full_name": "Patrick Redmond (W'14)",
                        "id": 5014
                    },
                    "user_id": 5014
                }
            ],
            "recipient_id": 22667,
            "sender_email": "iain@mccoy.id.au",
            "sender_full_name": "Iain McCoy (he) (SP2'17)",
            "sender_id": 100806,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "recursion schemes + state monad",
            "submessages": [],
            "timestamp": 1556635583,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/612c7c2a108d7850c62d1d2293a481aa42855408?x=x&version=2",
            "client": "website",
            "content": "<p>oh wow, so few cases over your ast type... i'll have to dig into this!! thanks!!</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 164627149,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f419",
                    "emoji_name": "octopus",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "iain@mccoy.id.au",
                        "full_name": "Iain McCoy (he) (SP2'17)",
                        "id": 100806
                    },
                    "user_id": 100806
                }
            ],
            "recipient_id": 22667,
            "sender_email": "PLRedmond@gmail.com",
            "sender_full_name": "Patrick Redmond (W'14)",
            "sender_id": 5014,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "recursion schemes + state monad",
            "submessages": [],
            "timestamp": 1556720864,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4d074af6cc341ef51b25bb2f738cdb11?d=identicon&version=1",
            "client": "website",
            "content": "<p>My talk got accepted, so I can confirm I'll be there <span aria-label=\"smiley\" class=\"emoji emoji-1f603\" role=\"img\" title=\"smiley\">:smiley:</span></p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 164658673,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f389",
                    "emoji_name": "tada",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "heneli@kailahi.com",
                        "full_name": "Heneli Ta'angafala Kailahi (SP2'17)",
                        "id": 100771
                    },
                    "user_id": 100771
                },
                {
                    "emoji_code": "1f389",
                    "emoji_name": "tada",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "libby@daydrea.me",
                        "full_name": "Libby Horacek (she) (SP1'15)",
                        "id": 7081
                    },
                    "user_id": 7081
                },
                {
                    "emoji_code": "1f389",
                    "emoji_name": "tada",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "sbj6290@gmail.com",
                        "full_name": "Byung Joo Shin (W2'19)",
                        "id": 158535
                    },
                    "user_id": 158535
                },
                {
                    "emoji_code": "1f389",
                    "emoji_name": "tada",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "iain@mccoy.id.au",
                        "full_name": "Iain McCoy (he) (SP2'17)",
                        "id": 100806
                    },
                    "user_id": 100806
                },
                {
                    "emoji_code": "1f389",
                    "emoji_name": "tada",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "soenkehahn@gmail.com",
                        "full_name": "S\u00f6nke Hahn (he) (S1'18)",
                        "id": 116583
                    },
                    "user_id": 116583
                }
            ],
            "recipient_id": 22667,
            "sender_email": "vaibhavsagar@gmail.com",
            "sender_full_name": "Vaibhav Sagar (he) (F1'16)",
            "sender_id": 100041,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "compose conf",
            "submessages": [],
            "timestamp": 1556745431,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/612c7c2a108d7850c62d1d2293a481aa42855408?x=x&version=2",
            "client": "website",
            "content": "<p>It seems like the key that I'm missing is having a <code>derive Traversable</code> on my label type!</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 164719896,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "PLRedmond@gmail.com",
            "sender_full_name": "Patrick Redmond (W'14)",
            "sender_id": 5014,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "recursion schemes + state monad",
            "submessages": [],
            "timestamp": 1556812458,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/612c7c2a108d7850c62d1d2293a481aa42855408?x=x&version=2",
            "client": "website",
            "content": "<p>And the other thing is that my AST allowed having multiple names on a given node, but HM and your small language don't! Both have exactly one new label per node.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 164720045,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "PLRedmond@gmail.com",
            "sender_full_name": "Patrick Redmond (W'14)",
            "sender_id": 5014,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "recursion schemes + state monad",
            "submessages": [],
            "timestamp": 1556812570,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/612c7c2a108d7850c62d1d2293a481aa42855408?x=x&version=2",
            "client": "website",
            "content": "<p>Oh, actually, I can have multiple names on node because of the applicative pattern.. cool! :)</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 164720056,
            "is_me_message": false,
            "last_edit_timestamp": 1556812736,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "PLRedmond@gmail.com",
            "sender_full_name": "Patrick Redmond (W'14)",
            "sender_id": 5014,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "recursion schemes + state monad",
            "submessages": [],
            "timestamp": 1556812582,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/6485c74622306264ff53449c6f0ca540?d=identicon&version=1",
            "client": "website",
            "content": "<p>I'm honestly not sure how I feel about this level of abstraction on the label type. I think it might be better to go straight to something like <code>data LabeledArithF f = LabeledArithF Label (Maybe Label) (ArithF f)</code> and ditch the <code>Labeled</code> type.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 164759014,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "iain@mccoy.id.au",
            "sender_full_name": "Iain McCoy (he) (SP2'17)",
            "sender_id": 100806,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "recursion schemes + state monad",
            "submessages": [],
            "timestamp": 1556845498,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/6485c74622306264ff53449c6f0ca540?d=identicon&version=1",
            "client": "website",
            "content": "<p><code>Traversable</code> on the <code>Arith</code> type is the really big deal - it lets you do <code>sequence</code> in <code>addlabels</code>. My hunch is that you could do without it on <code>Labeled</code> without too much trouble.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 164759131,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "iain@mccoy.id.au",
            "sender_full_name": "Iain McCoy (he) (SP2'17)",
            "sender_id": 100806,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "recursion schemes + state monad",
            "submessages": [],
            "timestamp": 1556845674,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/6485c74622306264ff53449c6f0ca540?d=identicon&version=1",
            "client": "website",
            "content": "<p>I wasn't sure what you meant by multiple names on nodes... I guess it's the way I kept the node identification distinct from name resolution whereas <a href=\"https://github.com/eliben/code-for-blog/blob/master/2018/type-inference/typing.py#L129\" target=\"_blank\" title=\"https://github.com/eliben/code-for-blog/blob/master/2018/type-inference/typing.py#L129\">https://github.com/eliben/code-for-blog/blob/master/2018/type-inference/typing.py#L129</a> (var name lookup) stores into the same place as any other generated TyVar? Making an example that produces a type with only one label per node might actually be a nice way to drive error-handling, because it would mean removing that <code>Maybe</code> from inside the type and force you to handle the name-not-found case more explicitly.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 164759570,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "iain@mccoy.id.au",
            "sender_full_name": "Iain McCoy (he) (SP2'17)",
            "sender_id": 100806,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "recursion schemes + state monad",
            "submessages": [],
            "timestamp": 1556846247,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4d074af6cc341ef51b25bb2f738cdb11?d=identicon&version=1",
            "client": "website",
            "content": "<p>Program is out: <a href=\"http://www.composeconference.org/2019/program/\" target=\"_blank\" title=\"http://www.composeconference.org/2019/program/\">http://www.composeconference.org/2019/program/</a></p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 164816511,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "vaibhavsagar@gmail.com",
            "sender_full_name": "Vaibhav Sagar (he) (F1'16)",
            "sender_id": 100041,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "compose conf",
            "submessages": [],
            "timestamp": 1556906943,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/612c7c2a108d7850c62d1d2293a481aa42855408?x=x&version=2",
            "client": "website",
            "content": "<p>reading through <a href=\"https://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-827-multithreaded-parallelism-languages-and-compilers-fall-2002/lecture-notes/L06HindleyMilnerPrint.pdf\" target=\"_blank\" title=\"https://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-827-multithreaded-parallelism-languages-and-compilers-fall-2002/lecture-notes/L06HindleyMilnerPrint.pdf\">this pdf about hindley-milner</a> and one of the early things it mentions is let-polymorphism, or a restriction on type-variable instantiation.. example:</p>\n<p>this is ok:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kr\">let</span>\n    <span class=\"n\">twice</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"ow\">=</span> <span class=\"n\">f</span> <span class=\"p\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"p\">)</span>\n<span class=\"kr\">in</span>\n    <span class=\"n\">twice</span> <span class=\"n\">twice</span> <span class=\"p\">(</span><span class=\"o\">+</span> <span class=\"mi\">3</span><span class=\"p\">)</span> <span class=\"mi\">4</span>\n</pre></div>\n\n\n<p>but this doesn't typecheck:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kr\">let</span>\n    <span class=\"n\">twice</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"ow\">=</span> <span class=\"n\">f</span> <span class=\"p\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"p\">)</span>\n    <span class=\"n\">foo</span> <span class=\"n\">g</span> <span class=\"ow\">=</span> <span class=\"p\">(</span><span class=\"n\">g</span> <span class=\"n\">g</span> <span class=\"p\">(</span><span class=\"o\">+</span> <span class=\"mi\">3</span><span class=\"p\">))</span> <span class=\"mi\">4</span>\n<span class=\"kr\">in</span>\n    <span class=\"n\">foo</span> <span class=\"n\">twice</span>\n</pre></div>\n\n\n<p>i guess allowing the second form implies construction of an infinite type, but i haven't worked it out</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 164836905,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "PLRedmond@gmail.com",
            "sender_full_name": "Patrick Redmond (W'14)",
            "sender_id": 5014,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "let polymorphism",
            "submessages": [],
            "timestamp": 1556924100,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/612c7c2a108d7850c62d1d2293a481aa42855408?x=x&version=2",
            "client": "website",
            "content": "<p>the second form triggers the occurs-check in the type-unification algorithm, which makes sense that it's avoiding an infinite type.. i need to review it</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 164836996,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "PLRedmond@gmail.com",
            "sender_full_name": "Patrick Redmond (W'14)",
            "sender_id": 5014,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "let polymorphism",
            "submessages": [],
            "timestamp": 1556924207,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/612c7c2a108d7850c62d1d2293a481aa42855408?x=x&version=2",
            "client": "website",
            "content": "<p>thought it was an odd/interesting peculiarity of hindley-milner</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 164836997,
            "is_me_message": false,
            "last_edit_timestamp": 1556924234,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "PLRedmond@gmail.com",
            "sender_full_name": "Patrick Redmond (W'14)",
            "sender_id": 5014,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "let polymorphism",
            "submessages": [],
            "timestamp": 1556924212,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p>Looks like quite a nice little bittorrent client: <a href=\"https://github.com/cronokirby/haze\" target=\"_blank\" title=\"https://github.com/cronokirby/haze\">https://github.com/cronokirby/haze</a></p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 164841025,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "bittorrent",
            "submessages": [],
            "timestamp": 1556929360,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/612c7c2a108d7850c62d1d2293a481aa42855408?x=x&version=2",
            "client": "website",
            "content": "<p>1. <a href=\"https://en.wikipedia.org/wiki/Hindley%E2%80%93Milner_type_system\" target=\"_blank\" title=\"https://en.wikipedia.org/wiki/Hindley%E2%80%93Milner_type_system\">wikipedia page</a><br>\n2. <a href=\"https://eli.thegreenplace.net/2018/type-inference/\" target=\"_blank\" title=\"https://eli.thegreenplace.net/2018/type-inference/\">eli bendersky's explanation</a> and <a href=\"https://github.com/eliben/code-for-blog/tree/master/2018/type-inference\" target=\"_blank\" title=\"https://github.com/eliben/code-for-blog/tree/master/2018/type-inference\">python code</a><br>\n3. <a href=\"https://github.com/wh5a/Algorithm-W-Step-By-Step\" target=\"_blank\" title=\"https://github.com/wh5a/Algorithm-W-Step-By-Step\">martin grabmuller's \"step by step\" literate-haskell &amp; pdf</a><br>\n4. <a href=\"https://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-827-multithreaded-parallelism-languages-and-compilers-fall-2002/lecture-notes/L06HindleyMilnerPrint.pdf\" target=\"_blank\" title=\"https://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-827-multithreaded-parallelism-languages-and-compilers-fall-2002/lecture-notes/L06HindleyMilnerPrint.pdf\">2002 MIT lecture slides</a> and <a href=\"https://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-827-multithreaded-parallelism-languages-and-compilers-fall-2002/lecture-notes/L07HindleyMilner2Print.pdf\" target=\"_blank\" title=\"https://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-827-multithreaded-parallelism-languages-and-compilers-fall-2002/lecture-notes/L07HindleyMilner2Print.pdf\">part 2</a><br>\n5. <a href=\"http://dev.stephendiehl.com/fun/006_hindley_milner.html\" target=\"_blank\" title=\"http://dev.stephendiehl.com/fun/006_hindley_milner.html\">stephen diehl's chapter from WYAH</a><br>\n6. <a href=\"http://akgupta.ca/blog/2013/05/14/so-you-still-dont-understand-hindley-milner/\" target=\"_blank\" title=\"http://akgupta.ca/blog/2013/05/14/so-you-still-dont-understand-hindley-milner/\">amit gupta's 3 part explanation</a> (thanks Vaibhav Sagar!)</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 164841353,
            "is_me_message": false,
            "last_edit_timestamp": 1557187402,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "PLRedmond@gmail.com",
            "sender_full_name": "Patrick Redmond (W'14)",
            "sender_id": 5014,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "hindley milner (damas milner)",
            "submessages": [],
            "timestamp": 1556929981,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/612c7c2a108d7850c62d1d2293a481aa42855408?x=x&version=2",
            "client": "website",
            "content": "<p>I'm trying to get a foundational understanding of HM, but these explanations are all slightly different.. some of the differences are probably superficial, and some might be important</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 164841445,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "PLRedmond@gmail.com",
            "sender_full_name": "Patrick Redmond (W'14)",
            "sender_id": 5014,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "hindley milner (damas milner)",
            "submessages": [],
            "timestamp": 1556930152,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/612c7c2a108d7850c62d1d2293a481aa42855408?x=x&version=2",
            "client": "website",
            "content": "<p>some differences:</p>\n<table>\n<thead>\n<tr>\n<th>thing</th>\n<th>yes</th>\n<th>no</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>language has a <code>literal</code> expr</td>\n<td>2,3,4,5</td>\n<td>1</td>\n</tr>\n<tr>\n<td>language has a <code>let .. in ..</code> expr</td>\n<td>1,3,4,5</td>\n<td>2</td>\n</tr>\n<tr>\n<td>type-language has a <code>scheme</code> or <code>poly</code> type</td>\n<td>1,3,4,5</td>\n<td>2</td>\n</tr>\n<tr>\n<td>includes type \"envs\" or \"contexts\"</td>\n<td>to be continued..</td>\n<td></td>\n</tr>\n<tr>\n<td>includes generalization</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>includes discovering \"free variables\" in exprs</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>includes discovering \"free variables\" in types</td>\n<td></td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<hr>\n<p>some similarities:</p>\n<ul>\n<li>all of the languages have a<code>variable</code> expr, an <code>application</code> expr, and an <code>abstraction</code> or <code>lambda</code> expr</li>\n<li>all of the type-languages have a <code>variable</code> type</li>\n</ul>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 164842660,
            "is_me_message": false,
            "last_edit_timestamp": 1556932373,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "PLRedmond@gmail.com",
            "sender_full_name": "Patrick Redmond (W'14)",
            "sender_id": 5014,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "hindley milner (damas milner)",
            "submessages": [],
            "timestamp": 1556932087,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/612c7c2a108d7850c62d1d2293a481aa42855408?x=x&version=2",
            "client": "website",
            "content": "<p>one useful bit of context that i didn't notice until now is this blurb from the wikipedia page:</p>\n<blockquote>\n<p>In a typing, an expression <code>E</code> is opposed to a type <code>T</code>, formally written as <code>E : T</code>. Usually a typing only makes sense within some context, which is omitted here.</p>\n<p>In this setting, the following questions are of particular interest:</p>\n<ul>\n<li><code>E : T</code>? - In this case, both an expression <code>E</code> and a type <code>T</code> are given. Now, is <code>E</code> really a <code>T</code>? This scenario is known as type-checking.</li>\n<li><code>E : _</code>? - Here, only the expression is known. So, what type is <code>E</code>? If there is a way to derive a type for <code>E</code>, then we have accomplished type inference.</li>\n<li><code>_ : T</code>? - The other way round. Given only a type, is there any expression for it or does the type have no values? Is there any example of a <code>T</code>? And in light of the Curry\u2013Howard isomorphism, is there a proof for <code>T</code>?</li>\n</ul>\n</blockquote>\n<p>now i need to search for a good explanation of envs/contexts..</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 164842816,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "PLRedmond@gmail.com",
            "sender_full_name": "Patrick Redmond (W'14)",
            "sender_id": 5014,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "hindley milner (damas milner)",
            "submessages": [],
            "timestamp": 1556932355,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4d074af6cc341ef51b25bb2f738cdb11?d=identicon&version=1",
            "client": "ZulipMobile",
            "content": "<p>You probably want more detail than this, but I found this series of blog posts useful, despite the somewhat off-putting title : <a href=\"http://akgupta.ca/blog/2013/05/14/so-you-still-dont-understand-hindley-milner/\" target=\"_blank\" title=\"http://akgupta.ca/blog/2013/05/14/so-you-still-dont-understand-hindley-milner/\">http://akgupta.ca/blog/2013/05/14/so-you-still-dont-understand-hindley-milner/</a></p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 164843993,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "vaibhavsagar@gmail.com",
            "sender_full_name": "Vaibhav Sagar (he) (F1'16)",
            "sender_id": 100041,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "hindley milner (damas milner)",
            "submessages": [],
            "timestamp": 1556934599,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/6485c74622306264ff53449c6f0ca540?d=identicon&version=1",
            "client": "ZulipMobile",
            "content": "<p>I wrote some stuff about this! The short version is that any time you allow multiple instantiations of type variables, you lose an opportunity to learn about how those type variables relate. Choosing let-bound vars as a point at which to allow multiple instantiation turns out to have pretty nice ergonomics.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 164847496,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "iain@mccoy.id.au",
            "sender_full_name": "Iain McCoy (he) (SP2'17)",
            "sender_id": 100806,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "let polymorphism",
            "submessages": [],
            "timestamp": 1556940974,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/6485c74622306264ff53449c6f0ca540?d=identicon&version=1",
            "client": "ZulipMobile",
            "content": "<p>The long version starts at \"This might be a good time to talk about why we have these\u00a0Let\u00a0expressions. It\u2019s mostly a way to support parametric polymorphism.\" on <a href=\"https://fineshambles.com/2017/07/26/a-type-inference-implementation-adventure/\" target=\"_blank\" title=\"https://fineshambles.com/2017/07/26/a-type-inference-implementation-adventure/\">https://fineshambles.com/2017/07/26/a-type-inference-implementation-adventure/</a></p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 164847574,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "iain@mccoy.id.au",
            "sender_full_name": "Iain McCoy (he) (SP2'17)",
            "sender_id": 100806,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "let polymorphism",
            "submessages": [],
            "timestamp": 1556941161,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/6485c74622306264ff53449c6f0ca540?d=identicon&version=1",
            "client": "ZulipMobile",
            "content": "<p>I should try to find someone whose written a more rigorous account, but IIRC last time I didn't find anyone who'd written about _why_ to do it that way</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 164847640,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "iain@mccoy.id.au",
            "sender_full_name": "Iain McCoy (he) (SP2'17)",
            "sender_id": 100806,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "let polymorphism",
            "submessages": [],
            "timestamp": 1556941250,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/612c7c2a108d7850c62d1d2293a481aa42855408?x=x&version=2",
            "client": "website",
            "content": "<blockquote>\n<p>The short version is that any time you allow multiple instantiations of type variables, you lose an opportunity to learn about how those type variables relate.</p>\n</blockquote>\n<p>Ooh, that's interesting. So there's a trade-off between allowing multiple instantiations, and not.</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kr\">import</span> <span class=\"nn\">Prelude</span> <span class=\"k\">hiding</span> <span class=\"p\">(</span><span class=\"nf\">id</span><span class=\"p\">)</span>\n<span class=\"nf\">main</span> <span class=\"ow\">=</span> <span class=\"n\">undefined</span>\n<span class=\"c1\">-- ignore ^ these two lines</span>\n\n<span class=\"nf\">id</span> <span class=\"ow\">::</span> <span class=\"n\">a</span> <span class=\"ow\">-&gt;</span> <span class=\"n\">a</span>\n<span class=\"nf\">id</span> <span class=\"n\">x</span> <span class=\"ow\">=</span> <span class=\"n\">x</span>\n\n<span class=\"nf\">foo</span> <span class=\"ow\">::</span> <span class=\"kt\">Int</span>\n<span class=\"nf\">foo</span> <span class=\"ow\">=</span> <span class=\"n\">id</span> <span class=\"mi\">12</span>\n\n<span class=\"nf\">bar</span> <span class=\"ow\">::</span> <span class=\"kt\">Char</span>\n<span class=\"nf\">bar</span> <span class=\"ow\">=</span> <span class=\"n\">id</span> <span class=\"sc\">&#39;b&#39;</span>\n</pre></div>\n\n\n<p>If you said \"no multiple instantiations even at the top level\" then this code wouldn't work, because <code>id</code> is instantiated once as <code>Int -&gt; Int</code> for <code>foo</code> and once as <code>Char -&gt; Char</code> for <code>bar</code></p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 164887190,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "PLRedmond@gmail.com",
            "sender_full_name": "Patrick Redmond (W'14)",
            "sender_id": 5014,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "let polymorphism",
            "submessages": [],
            "timestamp": 1557004401,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/612c7c2a108d7850c62d1d2293a481aa42855408?x=x&version=2",
            "client": "website",
            "content": "<p>so clearly multiple instantiations are allowed at the top level (which i think of as a big <code>let ... in main</code> a la ocaml)</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 164887241,
            "is_me_message": false,
            "last_edit_timestamp": 1557004464,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "PLRedmond@gmail.com",
            "sender_full_name": "Patrick Redmond (W'14)",
            "sender_id": 5014,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "let polymorphism",
            "submessages": [],
            "timestamp": 1557004458,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/612c7c2a108d7850c62d1d2293a481aa42855408?x=x&version=2",
            "client": "website",
            "content": "<p>i'm trying to think of an example where allowing multiple instantiations causes a problem.. i guess i should start from your clue that you'd lose information.. so i'm looking for an example where types are ambiguous, and therefore cannot be checked, because things get multiply-instantiated..</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 164887274,
            "is_me_message": false,
            "last_edit_timestamp": 1557004743,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "PLRedmond@gmail.com",
            "sender_full_name": "Patrick Redmond (W'14)",
            "sender_id": 5014,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "let polymorphism",
            "submessages": [],
            "timestamp": 1557004538,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/612c7c2a108d7850c62d1d2293a481aa42855408?x=x&version=2",
            "client": "website",
            "content": "<p>thank you! i'll read that too :)</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 164887483,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "PLRedmond@gmail.com",
            "sender_full_name": "Patrick Redmond (W'14)",
            "sender_id": 5014,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "hindley milner (damas milner)",
            "submessages": [],
            "timestamp": 1557004836,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/612c7c2a108d7850c62d1d2293a481aa42855408?x=x&version=2",
            "client": "website",
            "content": "<p>is a type variable also known as a type index? or is that not always the case..</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 164893764,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "PLRedmond@gmail.com",
            "sender_full_name": "Patrick Redmond (W'14)",
            "sender_id": 5014,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "type variables",
            "submessages": [],
            "timestamp": 1557016093,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/612c7c2a108d7850c62d1d2293a481aa42855408?x=x&version=2",
            "client": "website",
            "content": "<p>oohh... i forgot about haskell's implicit <code>forall</code>s</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 164898178,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "PLRedmond@gmail.com",
            "sender_full_name": "Patrick Redmond (W'14)",
            "sender_id": 5014,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "let polymorphism",
            "submessages": [],
            "timestamp": 1557024240,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/612c7c2a108d7850c62d1d2293a481aa42855408?x=x&version=2",
            "client": "website",
            "content": "<p>for all the top-level definitions with type variables, haskell automatically sticks a <code>forall ... .</code> with those type variables at the front</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 164898290,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "PLRedmond@gmail.com",
            "sender_full_name": "Patrick Redmond (W'14)",
            "sender_id": 5014,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "let polymorphism",
            "submessages": [],
            "timestamp": 1557024382,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/612c7c2a108d7850c62d1d2293a481aa42855408?x=x&version=2",
            "client": "website",
            "content": "<div class=\"codehilite\"><pre><span></span><span class=\"nf\">id</span> <span class=\"ow\">::</span> <span class=\"n\">a</span> <span class=\"ow\">-&gt;</span> <span class=\"n\">a</span> <span class=\"c1\">-- this is actually `forall a. a -&gt; a`</span>\n<span class=\"nf\">id</span> <span class=\"n\">x</span> <span class=\"ow\">=</span> <span class=\"n\">x</span>\n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 164898297,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "+1",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "iain@mccoy.id.au",
                        "full_name": "Iain McCoy (he) (SP2'17)",
                        "id": 100806
                    },
                    "user_id": 100806
                }
            ],
            "recipient_id": 22667,
            "sender_email": "PLRedmond@gmail.com",
            "sender_full_name": "Patrick Redmond (W'14)",
            "sender_id": 5014,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "let polymorphism",
            "submessages": [],
            "timestamp": 1557024409,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/612c7c2a108d7850c62d1d2293a481aa42855408?x=x&version=2",
            "client": "website",
            "content": "<p>some interesting stuff about this here<br>\n<a href=\"https://en.wikibooks.org/wiki/Haskell/Existentially_quantified_types#A_Further_Explanation\" target=\"_blank\" title=\"https://en.wikibooks.org/wiki/Haskell/Existentially_quantified_types#A_Further_Explanation\">https://en.wikibooks.org/wiki/Haskell/Existentially_quantified_types#A_Further_Explanation</a></p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 164898504,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "PLRedmond@gmail.com",
            "sender_full_name": "Patrick Redmond (W'14)",
            "sender_id": 5014,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "let polymorphism",
            "submessages": [],
            "timestamp": 1557024752,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/612c7c2a108d7850c62d1d2293a481aa42855408?x=x&version=2",
            "client": "website",
            "content": "<div class=\"codehilite\"><pre><span></span><span class=\"cm\">{-# LANGUAGE Rank2Types #-}</span>\n<span class=\"kr\">import</span> <span class=\"nn\">Prelude</span> <span class=\"k\">hiding</span> <span class=\"p\">(</span><span class=\"nf\">id</span><span class=\"p\">)</span>\n<span class=\"nf\">main</span> <span class=\"ow\">::</span> <span class=\"kt\">IO</span> <span class=\"nb\">()</span>\n<span class=\"nf\">main</span> <span class=\"ow\">=</span> <span class=\"n\">return</span> <span class=\"nb\">()</span>\n<span class=\"c1\">-- ignore ^ these two lines</span>\n\n\n<span class=\"nf\">a</span> <span class=\"ow\">::</span> <span class=\"kt\">Int</span>\n<span class=\"nf\">a</span> <span class=\"ow\">=</span> <span class=\"kr\">let</span>\n        <span class=\"n\">twice</span> <span class=\"ow\">::</span> <span class=\"n\">forall</span> <span class=\"n\">t</span><span class=\"o\">.</span> <span class=\"p\">(</span><span class=\"n\">t</span> <span class=\"ow\">-&gt;</span> <span class=\"n\">t</span><span class=\"p\">)</span> <span class=\"ow\">-&gt;</span> <span class=\"n\">t</span> <span class=\"ow\">-&gt;</span> <span class=\"n\">t</span>\n        <span class=\"n\">twice</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"ow\">=</span> <span class=\"n\">f</span> <span class=\"p\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"p\">)</span>\n    <span class=\"kr\">in</span>\n        <span class=\"n\">twice</span> <span class=\"n\">twice</span> <span class=\"p\">(</span><span class=\"o\">+</span> <span class=\"mi\">3</span><span class=\"p\">)</span> <span class=\"mi\">4</span>\n\n<span class=\"nf\">b</span> <span class=\"ow\">::</span> <span class=\"kt\">Int</span>\n<span class=\"nf\">b</span> <span class=\"ow\">=</span> <span class=\"kr\">let</span>\n        <span class=\"n\">twice</span> <span class=\"ow\">::</span> <span class=\"n\">forall</span> <span class=\"n\">t</span><span class=\"o\">.</span> <span class=\"p\">(</span><span class=\"n\">t</span> <span class=\"ow\">-&gt;</span> <span class=\"n\">t</span><span class=\"p\">)</span> <span class=\"ow\">-&gt;</span> <span class=\"n\">t</span> <span class=\"ow\">-&gt;</span> <span class=\"n\">t</span>\n        <span class=\"n\">twice</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"ow\">=</span> <span class=\"n\">f</span> <span class=\"p\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"p\">)</span>\n        <span class=\"n\">foo</span> <span class=\"ow\">::</span> <span class=\"n\">forall</span><span class=\"o\">.</span> <span class=\"p\">(</span><span class=\"n\">forall</span> <span class=\"n\">t</span><span class=\"o\">.</span> <span class=\"p\">(</span><span class=\"n\">t</span> <span class=\"ow\">-&gt;</span> <span class=\"n\">t</span><span class=\"p\">)</span> <span class=\"ow\">-&gt;</span> <span class=\"n\">t</span> <span class=\"ow\">-&gt;</span> <span class=\"n\">t</span><span class=\"p\">)</span> <span class=\"ow\">-&gt;</span> <span class=\"kt\">Int</span>\n        <span class=\"n\">foo</span> <span class=\"n\">g</span> <span class=\"ow\">=</span> <span class=\"p\">(</span><span class=\"n\">g</span> <span class=\"n\">g</span> <span class=\"p\">(</span><span class=\"o\">+</span> <span class=\"mi\">3</span><span class=\"p\">))</span> <span class=\"mi\">4</span>\n    <span class=\"kr\">in</span>\n        <span class=\"n\">foo</span> <span class=\"n\">twice</span>\n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 164898910,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "PLRedmond@gmail.com",
            "sender_full_name": "Patrick Redmond (W'14)",
            "sender_id": 5014,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "let polymorphism",
            "submessages": [],
            "timestamp": 1557025489,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/612c7c2a108d7850c62d1d2293a481aa42855408?x=x&version=2",
            "client": "website",
            "content": "<p>ok, after making the foralls explicit, this just works..</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 164898924,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "PLRedmond@gmail.com",
            "sender_full_name": "Patrick Redmond (W'14)",
            "sender_id": 5014,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "let polymorphism",
            "submessages": [],
            "timestamp": 1557025509,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/612c7c2a108d7850c62d1d2293a481aa42855408?x=x&version=2",
            "client": "website",
            "content": "<p>this makes me wonder why let-polymorphism is a thing? why is rank2types a thing?</p>\n<p>why not just make all the <code>forall</code>s explict &amp; required all the time, as a normal type-construct...?</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 164898973,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "PLRedmond@gmail.com",
            "sender_full_name": "Patrick Redmond (W'14)",
            "sender_id": 5014,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "let polymorphism",
            "submessages": [],
            "timestamp": 1557025565,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/6485c74622306264ff53449c6f0ca540?d=identicon&version=1",
            "client": "ZulipMobile",
            "content": "<p>IIRC having implicit foralls and the HM rules makes type inference decidable. If you let people have explicit foralls then they can use them in ways that make things undecidable. This is just a vague memory and I don't have any examples to cite.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 164900605,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "iain@mccoy.id.au",
            "sender_full_name": "Iain McCoy (he) (SP2'17)",
            "sender_id": 100806,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "let polymorphism",
            "submessages": [],
            "timestamp": 1557028705,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/6485c74622306264ff53449c6f0ca540?d=identicon&version=1",
            "client": "ZulipMobile",
            "content": "<p>It turns out that having that flexibility is really handy and we can live without decidable inference, tho, so we have these extensions.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 164900629,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "iain@mccoy.id.au",
            "sender_full_name": "Iain McCoy (he) (SP2'17)",
            "sender_id": 100806,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "let polymorphism",
            "submessages": [],
            "timestamp": 1557028789,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/6485c74622306264ff53449c6f0ca540?d=identicon&version=1",
            "client": "ZulipMobile",
            "content": "<p>There's two sort of intellectual movements going on at the moment, one of them against excessive type system fanciness and one of them about embracing annotations and not insisting on everything being inferrable. I'm pretty curious about what will emerge as people think through the sort of code those forces push us towards</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 164900768,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "iain@mccoy.id.au",
            "sender_full_name": "Iain McCoy (he) (SP2'17)",
            "sender_id": 100806,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "let polymorphism",
            "submessages": [],
            "timestamp": 1557028978,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/6485c74622306264ff53449c6f0ca540?d=identicon&version=1",
            "client": "ZulipMobile",
            "content": "<p>(which isn't an answer to your question so much as a thought about the directions that similar questions are moving in)</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 164900780,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "iain@mccoy.id.au",
            "sender_full_name": "Iain McCoy (he) (SP2'17)",
            "sender_id": 100806,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "let polymorphism",
            "submessages": [],
            "timestamp": 1557029035,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/6485c74622306264ff53449c6f0ca540?d=identicon&version=1",
            "client": "ZulipMobile",
            "content": "<p>(which isn't an answer to your question so much as a thought about the directions that similar questions are moving in)</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 164914122,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "iain@mccoy.id.au",
            "sender_full_name": "Iain McCoy (he) (SP2'17)",
            "sender_id": 100806,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "let polymorphism",
            "submessages": [],
            "timestamp": 1557053880,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/6485c74622306264ff53449c6f0ca540?d=identicon&version=1",
            "client": "ZulipMobile",
            "content": "<p>I think a type variable applied directly as an argument to a non-arrow type constructor is a type index. IE, in <code>Maybe a</code>, we might say that Maybe is indexed by the type variable <code>a</code>. But we would not call <code>b</code> or <code>c</code> type indexes in <code>b -&gt; c</code></p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 164916821,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "iain@mccoy.id.au",
            "sender_full_name": "Iain McCoy (he) (SP2'17)",
            "sender_id": 100806,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "type variables",
            "submessages": [],
            "timestamp": 1557058528,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/612c7c2a108d7850c62d1d2293a481aa42855408?x=x&version=2",
            "client": "website",
            "content": "<p>hey, there might not be an answer for my question! thanks for the context and discussion. :)</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 164932814,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "PLRedmond@gmail.com",
            "sender_full_name": "Patrick Redmond (W'14)",
            "sender_id": 5014,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "let polymorphism",
            "submessages": [],
            "timestamp": 1557084736,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/612c7c2a108d7850c62d1d2293a481aa42855408?x=x&version=2",
            "client": "website",
            "content": "<blockquote>\n<p>There's two sort of intellectual movements going on at the moment, one of them against excessive type system fanciness and one of them about embracing annotations and not insisting on everything being inferrable.</p>\n</blockquote>\n<p>neat, that seems interesting.. are these largely just in academia? are there well known examples of both these extremes in the wild? (without any justification, i'm thinking golang is an example of something pushing back on typesystem complexity, while ghc-haskell and its myriad extensions is an example of something embracing annotations and undecidability? [is undecidable the same thing as not-inferrable?])</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 164932818,
            "is_me_message": false,
            "last_edit_timestamp": 1557085992,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "PLRedmond@gmail.com",
            "sender_full_name": "Patrick Redmond (W'14)",
            "sender_id": 5014,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "let polymorphism",
            "submessages": [],
            "timestamp": 1557084746,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/612c7c2a108d7850c62d1d2293a481aa42855408?x=x&version=2",
            "client": "website",
            "content": "<p>and this this section of the ghc users' guide is so helpful i'm going to quote it:<br>\n<a href=\"https://downloads.haskell.org/~ghc/latest/docs/html/users_guide/glasgow_exts.html#extension-RankNTypes\" target=\"_blank\" title=\"https://downloads.haskell.org/~ghc/latest/docs/html/users_guide/glasgow_exts.html#extension-RankNTypes\">https://downloads.haskell.org/~ghc/latest/docs/html/users_guide/glasgow_exts.html#extension-RankNTypes</a></p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 164932991,
            "is_me_message": false,
            "last_edit_timestamp": 1557086467,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "PLRedmond@gmail.com",
            "sender_full_name": "Patrick Redmond (W'14)",
            "sender_id": 5014,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "let polymorphism",
            "submessages": [],
            "timestamp": 1557085059,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/612c7c2a108d7850c62d1d2293a481aa42855408?x=x&version=2",
            "client": "website",
            "content": "<p>quoted here:</p>\n<blockquote>\n<p>GHC\u2019s type system supports arbitrary-rank explicit universal quantification in types. For example, all the following types are legal:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"nf\">f1</span> <span class=\"ow\">::</span> <span class=\"n\">forall</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">.</span> <span class=\"n\">a</span> <span class=\"ow\">-&gt;</span> <span class=\"n\">b</span> <span class=\"ow\">-&gt;</span> <span class=\"n\">a</span>\n<span class=\"nf\">g1</span> <span class=\"ow\">::</span> <span class=\"n\">forall</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">.</span> <span class=\"p\">(</span><span class=\"kt\">Ord</span> <span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"kt\">Eq</span>  <span class=\"n\">b</span><span class=\"p\">)</span> <span class=\"ow\">=&gt;</span> <span class=\"n\">a</span> <span class=\"ow\">-&gt;</span> <span class=\"n\">b</span> <span class=\"ow\">-&gt;</span> <span class=\"n\">a</span>\n\n<span class=\"nf\">f2</span> <span class=\"ow\">::</span> <span class=\"p\">(</span><span class=\"n\">forall</span> <span class=\"n\">a</span><span class=\"o\">.</span> <span class=\"n\">a</span><span class=\"ow\">-&gt;</span><span class=\"n\">a</span><span class=\"p\">)</span> <span class=\"ow\">-&gt;</span> <span class=\"kt\">Int</span> <span class=\"ow\">-&gt;</span> <span class=\"kt\">Int</span>\n<span class=\"nf\">g2</span> <span class=\"ow\">::</span> <span class=\"p\">(</span><span class=\"n\">forall</span> <span class=\"n\">a</span><span class=\"o\">.</span> <span class=\"kt\">Eq</span> <span class=\"n\">a</span> <span class=\"ow\">=&gt;</span> <span class=\"p\">[</span><span class=\"n\">a</span><span class=\"p\">]</span> <span class=\"ow\">-&gt;</span> <span class=\"n\">a</span> <span class=\"ow\">-&gt;</span> <span class=\"kt\">Bool</span><span class=\"p\">)</span> <span class=\"ow\">-&gt;</span> <span class=\"kt\">Int</span> <span class=\"ow\">-&gt;</span> <span class=\"kt\">Int</span>\n\n<span class=\"nf\">f3</span> <span class=\"ow\">::</span> <span class=\"p\">((</span><span class=\"n\">forall</span> <span class=\"n\">a</span><span class=\"o\">.</span> <span class=\"n\">a</span><span class=\"ow\">-&gt;</span><span class=\"n\">a</span><span class=\"p\">)</span> <span class=\"ow\">-&gt;</span> <span class=\"kt\">Int</span><span class=\"p\">)</span> <span class=\"ow\">-&gt;</span> <span class=\"kt\">Bool</span> <span class=\"ow\">-&gt;</span> <span class=\"kt\">Bool</span>\n\n<span class=\"nf\">f4</span> <span class=\"ow\">::</span> <span class=\"kt\">Int</span> <span class=\"ow\">-&gt;</span> <span class=\"p\">(</span><span class=\"n\">forall</span> <span class=\"n\">a</span><span class=\"o\">.</span> <span class=\"n\">a</span> <span class=\"ow\">-&gt;</span> <span class=\"n\">a</span><span class=\"p\">)</span>\n</pre></div>\n\n\n<p>Here, <code>f1</code> and <code>g1</code> are rank-1 types, and can be written in standard Haskell (e.g. <code>f1 :: a-&gt;b-&gt;a</code>). The <code>forall</code> makes explicit the universal quantification that is implicitly added by Haskell.</p>\n<p>The functions <code>f2</code> and <code>g2</code> have rank-2 types; the <code>forall</code> is on the left of a function arrow. As <code>g2</code> shows, the polymorphic type on the left of the function arrow can be overloaded.</p>\n<p>The function <code>f3</code> has a rank-3 type; it has rank-2 types on the left of a function arrow.</p>\n<p>The language option <a href=\"https://downloads.haskell.org/~ghc/latest/docs/html/users_guide/glasgow_exts.html#extension-RankNTypes\" target=\"_blank\" title=\"https://downloads.haskell.org/~ghc/latest/docs/html/users_guide/glasgow_exts.html#extension-RankNTypes\">RankNTypes</a> (which implies <a href=\"https://downloads.haskell.org/~ghc/latest/docs/html/users_guide/glasgow_exts.html#extension-ExplicitForAll\" target=\"_blank\" title=\"https://downloads.haskell.org/~ghc/latest/docs/html/users_guide/glasgow_exts.html#extension-ExplicitForAll\">ExplicitForAll</a>) enables higher-rank types. That is, you can nest <code>foralls</code> arbitrarily deep in function arrows.</p>\n</blockquote>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 164933501,
            "is_me_message": false,
            "last_edit_timestamp": 1557088663,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "PLRedmond@gmail.com",
            "sender_full_name": "Patrick Redmond (W'14)",
            "sender_id": 5014,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "let polymorphism",
            "submessages": [],
            "timestamp": 1557085858,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/612c7c2a108d7850c62d1d2293a481aa42855408?x=x&version=2",
            "client": "website",
            "content": "<p>and one last tid-bit which i haven't seen expressed explicitly anywhere else:</p>\n<blockquote>\n<p>... a forall-type (also called a \u201ctype scheme\u201d) ...</p>\n</blockquote>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 164935205,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "PLRedmond@gmail.com",
            "sender_full_name": "Patrick Redmond (W'14)",
            "sender_id": 5014,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "let polymorphism",
            "submessages": [],
            "timestamp": 1557088669,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/612c7c2a108d7850c62d1d2293a481aa42855408?x=x&version=2",
            "client": "website",
            "content": "<p>I feel like a lot of my confusion has stemmed from so much of the underlying logical structure being hidden by implicit accommodations for \"joe programmer\" mentioned here <a href=\"https://prime.haskell.org/wiki/RankNTypes\" target=\"_blank\" title=\"https://prime.haskell.org/wiki/RankNTypes\">https://prime.haskell.org/wiki/RankNTypes</a></p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 164935206,
            "is_me_message": false,
            "last_edit_timestamp": 1557088814,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "PLRedmond@gmail.com",
            "sender_full_name": "Patrick Redmond (W'14)",
            "sender_id": 5014,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "let polymorphism",
            "submessages": [],
            "timestamp": 1557088672,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/612c7c2a108d7850c62d1d2293a481aa42855408?x=x&version=2",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-id=\"100041\">@Vaibhav Sagar (F1'16)</span> oh, that was a nice overview of the formalism &amp; rules.. one thing that it did differently was to include schemes/foralls as just another type-constructor with associated inference rules... #3 from above (martin's step-by-step pdf) kind of does this because it defines a \"type\" typeclass-instance for schemes, but amit's explanation was helpful to drive home that it's types-all-the-way-down</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 164945089,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "PLRedmond@gmail.com",
            "sender_full_name": "Patrick Redmond (W'14)",
            "sender_id": 5014,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "hindley milner (damas milner)",
            "submessages": [],
            "timestamp": 1557104487,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/612c7c2a108d7850c62d1d2293a481aa42855408?x=x&version=2",
            "client": "website",
            "content": "<p>yeah, i think you're right..</p>\n<p>i'm trying to come up with a naming for value-vars and type-vars with using two unambiguous single-word names</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 164945139,
            "is_me_message": false,
            "last_edit_timestamp": 1557105580,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "PLRedmond@gmail.com",
            "sender_full_name": "Patrick Redmond (W'14)",
            "sender_id": 5014,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "type variables",
            "submessages": [],
            "timestamp": 1557104543,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/612c7c2a108d7850c62d1d2293a481aa42855408?x=x&version=2",
            "client": "website",
            "content": "<p>\"var\" could be either of them<br>\n\"id\" could be a value-var<br>\n\"binding\" could be a value-var<br>\n\"index\" could be a type-var, but i guess only in some contexts<br>\n\"name\" could be either i guess</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 164945742,
            "is_me_message": false,
            "last_edit_timestamp": 1557105969,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "PLRedmond@gmail.com",
            "sender_full_name": "Patrick Redmond (W'14)",
            "sender_id": 5014,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "type variables",
            "submessages": [],
            "timestamp": 1557105634,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/612c7c2a108d7850c62d1d2293a481aa42855408?x=x&version=2",
            "client": "website",
            "content": "<p>this also helped a bit with my understanding of the let-polymorphism thread</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 164945889,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "PLRedmond@gmail.com",
            "sender_full_name": "Patrick Redmond (W'14)",
            "sender_id": 5014,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "hindley milner (damas milner)",
            "submessages": [],
            "timestamp": 1557105861,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/6485c74622306264ff53449c6f0ca540?d=identicon&version=1",
            "client": "website",
            "content": "<p>yeah, just saying \"variables\" and \"type variables\" is pretty standard. I don't love using \"binding\" to mean variable because in my head a binding is specifically an association between a name and a value (ie, a <code>let</code> expression includes <code>binding</code>s each of which has a <code>name</code> and a <code>value</code>, and then finally a body that refers to those <code>name</code>s). The only time I'd expect to see a type variable referred to as a variable is when the context makes it clear that all the things being talked about are at the type level.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 164963262,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "iain@mccoy.id.au",
            "sender_full_name": "Iain McCoy (he) (SP2'17)",
            "sender_id": 100806,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "type variables",
            "submessages": [],
            "timestamp": 1557130606,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/6485c74622306264ff53449c6f0ca540?d=identicon&version=1",
            "client": "website",
            "content": "<p>..... I wonder how many times I've stepped outside that constraint :)</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 164963276,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f603",
                    "emoji_name": "smiley",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "PLRedmond@gmail.com",
                        "full_name": "Patrick Redmond (W'14)",
                        "id": 5014
                    },
                    "user_id": 5014
                }
            ],
            "recipient_id": 22667,
            "sender_email": "iain@mccoy.id.au",
            "sender_full_name": "Iain McCoy (he) (SP2'17)",
            "sender_id": 100806,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "type variables",
            "submessages": [],
            "timestamp": 1557130627,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/6485c74622306264ff53449c6f0ca540?d=identicon&version=1",
            "client": "website",
            "content": "<blockquote>\n<p>are there well known examples of both these extremes in the wild?<br>\naaah I did wonder if you would ask me for citations :) So I'm mostly thinking of various twitter rants. People in the Agda/Idris world spend a lot of time thinking about how the compiler can be a helpful participant in the software development process, rather than just being an arbiter that receives your code and passes down a yea or a nay. That largely involves the programmer providing more type annotations. Some Conor McBride tweets: <a href=\"https://twitter.com/pigworker/status/575448649921994755\" target=\"_blank\" title=\"https://twitter.com/pigworker/status/575448649921994755\">https://twitter.com/pigworker/status/575448649921994755</a> <a href=\"https://twitter.com/pigworker/status/778012854934986753\" target=\"_blank\" title=\"https://twitter.com/pigworker/status/778012854934986753\">https://twitter.com/pigworker/status/778012854934986753</a></p>\n</blockquote>\n<p>The blacklash against excessive type system fanciness is kind of exemplified by this tweet: <a href=\"https://twitter.com/acid2/status/1111917195020378113\" target=\"_blank\" title=\"https://twitter.com/acid2/status/1111917195020378113\">https://twitter.com/acid2/status/1111917195020378113</a> My take is that with haskell 98 code, it's pretty easy to think like the type-checker and figure out exactly what's going on. By the time you have impredicative GADTs two levels deep it is _real_ tricky to have an intuition for what's going on when the compiler tells you something's wrong.</p>\n<p>The question I'm positing - and this isn't a common take as far as I know - is to ask if embracing the necessity of annotations in some cases leads to slightly different takes on advanced type system features that might get us some of that ease-of-reasoning that haskell 98 has.</p>\n<div class=\"inline-preview-twitter\"><div class=\"twitter-tweet\"><a href=\"https://twitter.com/acid2/status/1111917195020378113\" target=\"_blank\"><img class=\"twitter-avatar\" src=\"https://pbs.twimg.com/profile_images/976798714579664897/eMPWBtvk_normal.jpg\"></a><p>Though the more you use dependent types the more you think maybe Haskell 98 and a few extensions is the sweet spot. <a href=\"https://t.co/pRHvgDRrPA\" target=\"_blank\" title=\"https://t.co/pRHvgDRrPA\">https://twitter.com/PttPrgrmmr/status/1111915061294043136</a></p><span>- ollie (@acid2)</span></div></div><div class=\"inline-preview-twitter\"><div class=\"twitter-tweet\"><a href=\"https://twitter.com/pigworker/status/575448649921994755\" target=\"_blank\"><img class=\"twitter-avatar\" src=\"https://pbs.twimg.com/profile_images/717015909982928896/N9jRh2Kc_normal.jpg\"></a><p>Guess-the-plan type inference has never been a good idea. Follow-the-plan type inference is wonderful. Let's separate the two notions.</p><span>- Conor Mc Bride (@pigworker)</span></div></div><div class=\"inline-preview-twitter\"><div class=\"twitter-tweet\"><a href=\"https://twitter.com/pigworker/status/778012854934986753\" target=\"_blank\"><img class=\"twitter-avatar\" src=\"https://pbs.twimg.com/profile_images/717015909982928896/N9jRh2Kc_normal.jpg\"></a><p>\"We can't have x because it would make type inference undecidable.\" is so last century.</p><span>- Conor Mc Bride (@pigworker)</span></div></div>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 164964259,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "iain@mccoy.id.au",
            "sender_full_name": "Iain McCoy (he) (SP2'17)",
            "sender_id": 100806,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "let polymorphism",
            "submessages": [],
            "timestamp": 1557131701,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/6485c74622306264ff53449c6f0ca540?d=identicon&version=1",
            "client": "website",
            "content": "<blockquote>\n<p>is undecidable the same thing as not-inferrable?</p>\n</blockquote>\n<p>More or less. Informally, the whole HM game kind of hinges on this set of language features with which it is always possible to infer exactly one satisfying type assignment. Formally, we say that type inference (for a particular language) is decidable.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 164964491,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "iain@mccoy.id.au",
            "sender_full_name": "Iain McCoy (he) (SP2'17)",
            "sender_id": 100806,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "let polymorphism",
            "submessages": [],
            "timestamp": 1557131930,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/612c7c2a108d7850c62d1d2293a481aa42855408?x=x&version=2",
            "client": "website",
            "content": "<p>and here's some more of the \"occasional annotations with fancy types\" crew:<br>\n<a href=\"https://repository.upenn.edu/cgi/viewcontent.cgi?article=1336&amp;context=cis_papers\" target=\"_blank\" title=\"https://repository.upenn.edu/cgi/viewcontent.cgi?article=1336&amp;context=cis_papers\">https://repository.upenn.edu/cgi/viewcontent.cgi?article=1336&amp;context=cis_papers</a><br>\nThis describse the RankNTypes inference algorithm in GHC.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 165029808,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "PLRedmond@gmail.com",
            "sender_full_name": "Patrick Redmond (W'14)",
            "sender_id": 5014,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "let polymorphism",
            "submessages": [],
            "timestamp": 1557186868,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/612c7c2a108d7850c62d1d2293a481aa42855408?x=x&version=2",
            "client": "website",
            "content": "<blockquote>\n<p>Haskell and ML are both based on the classic Damas-Milner type system (Damas &amp;<br>\nMilner, 1982), which we review in Section 4.2. This type system has the remarkable<br>\nproperty that a compiler can infer the principal type for a polymorphic function,<br>\nwithout any help from the programmer. Furthermore, the type inference algorithm is<br>\nnot unduly complicated. But Damas-Milner stands on a delicate cusp: almost any<br>\nextension of the type system either destroys this unaided-type-inference property, or<br>\ngreatly complicates the type-inference algorithm.</p>\n</blockquote>\n<p>-- <a href=\"https://repository.upenn.edu/cgi/viewcontent.cgi?article=1336&amp;context=cis_papers\" target=\"_blank\" title=\"https://repository.upenn.edu/cgi/viewcontent.cgi?article=1336&amp;context=cis_papers\">page 9 of this pdf</a></p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 165030028,
            "is_me_message": false,
            "last_edit_timestamp": 1557187164,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "PLRedmond@gmail.com",
            "sender_full_name": "Patrick Redmond (W'14)",
            "sender_id": 5014,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "hindley milner (damas milner)",
            "submessages": [],
            "timestamp": 1557187145,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/612c7c2a108d7850c62d1d2293a481aa42855408?x=x&version=2",
            "client": "website",
            "content": "<p>renamed the topic <span aria-label=\"laughter tears\" class=\"emoji emoji-1f602\" role=\"img\" title=\"laughter tears\">:laughter_tears:</span></p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 165030051,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "PLRedmond@gmail.com",
            "sender_full_name": "Patrick Redmond (W'14)",
            "sender_id": 5014,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "hindley milner (damas milner)",
            "submessages": [],
            "timestamp": 1557187191,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/612c7c2a108d7850c62d1d2293a481aa42855408?x=x&version=2",
            "client": "website",
            "content": "<p>but yeah, this quote makes clear what i've been pondering: deviating from the prescribed descriptions of HM breaks it</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 165030253,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "PLRedmond@gmail.com",
            "sender_full_name": "Patrick Redmond (W'14)",
            "sender_id": 5014,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "hindley milner (damas milner)",
            "submessages": [],
            "timestamp": 1557187387,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/612c7c2a108d7850c62d1d2293a481aa42855408?x=x&version=2",
            "client": "website",
            "content": "<p>ok, pages 14-27 of this paper are pretty much nonsense to me..</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 165127540,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "PLRedmond@gmail.com",
            "sender_full_name": "Patrick Redmond (W'14)",
            "sender_id": 5014,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "hindley milner (damas milner)",
            "submessages": [],
            "timestamp": 1557280878,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/612c7c2a108d7850c62d1d2293a481aa42855408?x=x&version=2",
            "client": "website",
            "content": "<p>i need to go back and reread the post Vaibhav linked</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 165127548,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "PLRedmond@gmail.com",
            "sender_full_name": "Patrick Redmond (W'14)",
            "sender_id": 5014,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "hindley milner (damas milner)",
            "submessages": [],
            "timestamp": 1557280914,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/612c7c2a108d7850c62d1d2293a481aa42855408?x=x&version=2",
            "client": "website",
            "content": "<p>hi! does anybody have experience with the <code>Chart</code> or <code>diagrams</code> packages?</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 165342209,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "PLRedmond@gmail.com",
            "sender_full_name": "Patrick Redmond (W'14)",
            "sender_id": 5014,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "diagrams & charts & graphs, oh my!",
            "submessages": [],
            "timestamp": 1557499766,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4d074af6cc341ef51b25bb2f738cdb11?d=identicon&version=1",
            "client": "website",
            "content": "<p>I help maintain the integrations for <code>ihaskell</code>, maybe our <a href=\"https://github.com/gibiansky/IHaskell/blob/master/notebooks/IHaskell.ipynb\" target=\"_blank\" title=\"https://github.com/gibiansky/IHaskell/blob/master/notebooks/IHaskell.ipynb\">demo notebook</a> is of interest?</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 165342512,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "vaibhavsagar@gmail.com",
            "sender_full_name": "Vaibhav Sagar (he) (F1'16)",
            "sender_id": 100041,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "diagrams & charts & graphs, oh my!",
            "submessages": [],
            "timestamp": 1557499953,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/612c7c2a108d7850c62d1d2293a481aa42855408?x=x&version=2",
            "client": "website",
            "content": "<p>ooh, i'll take a look at that</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 165344166,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "PLRedmond@gmail.com",
            "sender_full_name": "Patrick Redmond (W'14)",
            "sender_id": 5014,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "diagrams & charts & graphs, oh my!",
            "submessages": [],
            "timestamp": 1557501139,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/612c7c2a108d7850c62d1d2293a481aa42855408?x=x&version=2",
            "client": "website",
            "content": "<p>installing arch packages for ipython/ihaskell at 12kb/s on this train.. i'll concurrently read about how to use charts</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 165346568,
            "is_me_message": false,
            "last_edit_timestamp": 1557503034,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "PLRedmond@gmail.com",
            "sender_full_name": "Patrick Redmond (W'14)",
            "sender_id": 5014,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "diagrams & charts & graphs, oh my!",
            "submessages": [],
            "timestamp": 1557502893,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4d074af6cc341ef51b25bb2f738cdb11?d=identicon&version=1",
            "client": "website",
            "content": "<p>Can I persuade you to use Nix <span aria-label=\"smiley\" class=\"emoji emoji-1f603\" role=\"img\" title=\"smiley\">:smiley:</span>?</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 165351859,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f602",
                    "emoji_name": "joy",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "iain@mccoy.id.au",
                        "full_name": "Iain McCoy (he) (SP2'17)",
                        "id": 100806
                    },
                    "user_id": 100806
                }
            ],
            "recipient_id": 22667,
            "sender_email": "vaibhavsagar@gmail.com",
            "sender_full_name": "Vaibhav Sagar (he) (F1'16)",
            "sender_id": 100041,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "diagrams & charts & graphs, oh my!",
            "submessages": [],
            "timestamp": 1557506980,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/612c7c2a108d7850c62d1d2293a481aa42855408?x=x&version=2",
            "client": "website",
            "content": "<p><a href=\"/user_uploads/13/-XuRsWl2-yfj6qi5dwqwiS-C/example.png\" target=\"_blank\" title=\"example.png\">stacked.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/13/-XuRsWl2-yfj6qi5dwqwiS-C/example.png\" target=\"_blank\" title=\"stacked.png\"><img src=\"/user_uploads/13/-XuRsWl2-yfj6qi5dwqwiS-C/example.png\"></a></div>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 165453191,
            "is_me_message": false,
            "last_edit_timestamp": 1557646716,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "PLRedmond@gmail.com",
            "sender_full_name": "Patrick Redmond (W'14)",
            "sender_id": 5014,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "diagrams & charts & graphs, oh my!",
            "submessages": [],
            "timestamp": 1557646659,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/612c7c2a108d7850c62d1d2293a481aa42855408?x=x&version=2",
            "client": "website",
            "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kr\">data</span> <span class=\"kt\">Plot</span> <span class=\"n\">y</span> <span class=\"ow\">=</span> <span class=\"kt\">Plot</span>\n    <span class=\"p\">{</span> <span class=\"n\">title</span> <span class=\"ow\">::</span> <span class=\"kt\">String</span>\n    <span class=\"p\">,</span> <span class=\"n\">color</span> <span class=\"ow\">::</span> <span class=\"kt\">C</span><span class=\"o\">.</span><span class=\"kt\">Colour</span> <span class=\"kt\">Double</span>\n    <span class=\"p\">,</span> <span class=\"n\">yData</span> <span class=\"ow\">::</span> <span class=\"kt\">Vector</span> <span class=\"n\">y</span>\n    <span class=\"p\">}</span>\n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 165453234,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "PLRedmond@gmail.com",
            "sender_full_name": "Patrick Redmond (W'14)",
            "sender_id": 5014,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "diagrams & charts & graphs, oh my!",
            "submessages": [],
            "timestamp": 1557646692,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/612c7c2a108d7850c62d1d2293a481aa42855408?x=x&version=2",
            "client": "website",
            "content": "<div class=\"codehilite\"><pre><span></span><span class=\"nf\">stacked</span> <span class=\"ow\">::</span> <span class=\"p\">(</span><span class=\"kt\">C</span><span class=\"o\">.</span><span class=\"kt\">PlotValue</span> <span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"kt\">Num</span> <span class=\"n\">y</span><span class=\"p\">,</span> <span class=\"kt\">C</span><span class=\"o\">.</span><span class=\"kt\">PlotValue</span> <span class=\"n\">y</span><span class=\"p\">)</span> <span class=\"ow\">=&gt;</span> <span class=\"kt\">String</span> <span class=\"ow\">-&gt;</span> <span class=\"kt\">Vector</span> <span class=\"n\">x</span> <span class=\"ow\">-&gt;</span> <span class=\"n\">y</span> <span class=\"ow\">-&gt;</span> <span class=\"p\">[</span><span class=\"kt\">Plot</span> <span class=\"n\">y</span><span class=\"p\">]</span> <span class=\"ow\">-&gt;</span> <span class=\"kt\">Either</span> <span class=\"kt\">String</span> <span class=\"p\">(</span><span class=\"kt\">C</span><span class=\"o\">.</span><span class=\"kt\">Layout</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"p\">)</span>\n<span class=\"nf\">stacked</span> <span class=\"n\">title</span> <span class=\"n\">xData</span> <span class=\"n\">zero</span> <span class=\"n\">plots</span>\n    <span class=\"o\">|</span> <span class=\"n\">any</span> <span class=\"n\">invalid</span> <span class=\"n\">plots</span> <span class=\"ow\">=</span> <span class=\"kt\">Left</span> <span class=\"s\">&quot;number of y-datapoints must equal x-datapoints&quot;</span>\n    <span class=\"o\">|</span> <span class=\"n\">otherwise</span>         <span class=\"ow\">=</span> <span class=\"n\">pure</span> <span class=\"n\">layout</span>\n  <span class=\"kr\">where</span>\n    <span class=\"n\">expectedLen</span> <span class=\"ow\">=</span> <span class=\"n\">length</span> <span class=\"n\">xData</span>\n    <span class=\"n\">zeros</span> <span class=\"ow\">=</span> <span class=\"kt\">V</span><span class=\"o\">.</span><span class=\"n\">replicate</span> <span class=\"n\">expectedLen</span> <span class=\"n\">zero</span>\n    <span class=\"n\">invalid</span> <span class=\"kt\">Plot</span><span class=\"p\">{</span><span class=\"n\">yData</span><span class=\"p\">}</span>\n        <span class=\"ow\">=</span> <span class=\"n\">length</span> <span class=\"n\">yData</span> <span class=\"o\">/=</span> <span class=\"n\">expectedLen</span>\n    <span class=\"n\">plot</span> <span class=\"n\">prev</span> <span class=\"kt\">Plot</span><span class=\"p\">{</span><span class=\"n\">title</span><span class=\"p\">,</span><span class=\"n\">color</span><span class=\"p\">,</span><span class=\"n\">yData</span><span class=\"p\">}</span> <span class=\"ow\">=</span> <span class=\"n\">def</span>\n        <span class=\"p\">{</span> <span class=\"kt\">C</span><span class=\"o\">.</span><span class=\"n\">_plot_fillbetween_title</span> <span class=\"ow\">=</span> <span class=\"n\">title</span>\n        <span class=\"p\">,</span> <span class=\"kt\">C</span><span class=\"o\">.</span><span class=\"n\">_plot_fillbetween_style</span> <span class=\"ow\">=</span> <span class=\"kt\">C</span><span class=\"o\">.</span><span class=\"n\">solidFillStyle</span> <span class=\"o\">$</span> <span class=\"kt\">C</span><span class=\"o\">.</span><span class=\"n\">opaque</span> <span class=\"n\">color</span>\n        <span class=\"p\">,</span> <span class=\"kt\">C</span><span class=\"o\">.</span><span class=\"n\">_plot_fillbetween_values</span>\n            <span class=\"ow\">=</span> <span class=\"kt\">V</span><span class=\"o\">.</span><span class=\"n\">toList</span> <span class=\"o\">.</span> <span class=\"kt\">V</span><span class=\"o\">.</span><span class=\"n\">zip</span> <span class=\"n\">xData</span> <span class=\"o\">.</span> <span class=\"kt\">V</span><span class=\"o\">.</span><span class=\"n\">zip</span> <span class=\"n\">prev</span> <span class=\"o\">.</span> <span class=\"kt\">V</span><span class=\"o\">.</span><span class=\"n\">zipWith</span> <span class=\"p\">(</span><span class=\"o\">+</span><span class=\"p\">)</span> <span class=\"n\">prev</span> <span class=\"o\">$</span> <span class=\"n\">yData</span>\n        <span class=\"p\">}</span>\n    <span class=\"n\">layout</span> <span class=\"ow\">=</span> <span class=\"n\">def</span>\n        <span class=\"p\">{</span> <span class=\"kt\">C</span><span class=\"o\">.</span><span class=\"n\">_layout_title</span> <span class=\"ow\">=</span> <span class=\"n\">title</span>\n        <span class=\"p\">,</span> <span class=\"kt\">C</span><span class=\"o\">.</span><span class=\"n\">_layout_plots</span> <span class=\"ow\">=</span> <span class=\"kt\">C</span><span class=\"o\">.</span><span class=\"n\">toPlot</span> <span class=\"o\">&lt;$&gt;</span> <span class=\"n\">zipWith</span> <span class=\"n\">plot</span> <span class=\"p\">(</span><span class=\"n\">zeros</span> <span class=\"kt\">:</span> <span class=\"n\">fmap</span> <span class=\"n\">yData</span> <span class=\"n\">plots</span><span class=\"p\">)</span> <span class=\"n\">plots</span>\n        <span class=\"p\">}</span>\n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 165453237,
            "is_me_message": false,
            "last_edit_timestamp": 1557646943,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "PLRedmond@gmail.com",
            "sender_full_name": "Patrick Redmond (W'14)",
            "sender_id": 5014,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "diagrams & charts & graphs, oh my!",
            "submessages": [],
            "timestamp": 1557646706,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/612c7c2a108d7850c62d1d2293a481aa42855408?x=x&version=2",
            "client": "website",
            "content": "<p>this could probably be made simpler</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 165453241,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "PLRedmond@gmail.com",
            "sender_full_name": "Patrick Redmond (W'14)",
            "sender_id": 5014,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "diagrams & charts & graphs, oh my!",
            "submessages": [],
            "timestamp": 1557646737,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/612c7c2a108d7850c62d1d2293a481aa42855408?x=x&version=2",
            "client": "website",
            "content": "<p>it's just stacked lines; i'm going to use it to show deployed versions of a service (the service cannot be deployed <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span> )</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 165453251,
            "is_me_message": false,
            "last_edit_timestamp": 1557646802,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "PLRedmond@gmail.com",
            "sender_full_name": "Patrick Redmond (W'14)",
            "sender_id": 5014,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "diagrams & charts & graphs, oh my!",
            "submessages": [],
            "timestamp": 1557646758,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/612c7c2a108d7850c62d1d2293a481aa42855408?x=x&version=2",
            "client": "website",
            "content": "<p>putting this here, just for fun.. every time i reencounter this it makes me wonder</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kr\">type</span> <span class=\"kt\">DL</span> <span class=\"n\">a</span> <span class=\"ow\">=</span> <span class=\"p\">[</span><span class=\"n\">a</span><span class=\"p\">]</span> <span class=\"ow\">-&gt;</span> <span class=\"p\">[</span><span class=\"n\">a</span><span class=\"p\">]</span>\n<span class=\"nf\">empty</span>     <span class=\"ow\">=</span> <span class=\"n\">id</span>     <span class=\"ow\">::</span> <span class=\"kt\">DL</span> <span class=\"n\">a</span>\n<span class=\"nf\">singleton</span> <span class=\"ow\">=</span> <span class=\"p\">(</span><span class=\"kt\">:</span><span class=\"p\">)</span>    <span class=\"ow\">::</span> <span class=\"n\">a</span> <span class=\"ow\">-&gt;</span> <span class=\"kt\">DL</span> <span class=\"n\">a</span>\n<span class=\"nf\">append</span>    <span class=\"ow\">=</span> <span class=\"p\">(</span><span class=\"o\">.</span><span class=\"p\">)</span>    <span class=\"ow\">::</span> <span class=\"kt\">DL</span> <span class=\"n\">a</span> <span class=\"ow\">-&gt;</span> <span class=\"kt\">DL</span> <span class=\"n\">a</span> <span class=\"ow\">-&gt;</span> <span class=\"kt\">DL</span> <span class=\"n\">a</span>\n<span class=\"nf\">fromList</span>  <span class=\"ow\">=</span> <span class=\"p\">(</span><span class=\"o\">++</span><span class=\"p\">)</span>   <span class=\"ow\">::</span> <span class=\"p\">[</span><span class=\"n\">a</span><span class=\"p\">]</span> <span class=\"ow\">-&gt;</span> <span class=\"kt\">DL</span> <span class=\"n\">a</span>\n<span class=\"nf\">toList</span>    <span class=\"ow\">=</span> <span class=\"p\">(</span><span class=\"o\">$</span> <span class=\"kt\">[]</span><span class=\"p\">)</span> <span class=\"ow\">::</span> <span class=\"kt\">DL</span> <span class=\"n\">a</span> <span class=\"ow\">-&gt;</span> <span class=\"p\">[</span><span class=\"n\">a</span><span class=\"p\">]</span>\n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 165591284,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "PLRedmond@gmail.com",
            "sender_full_name": "Patrick Redmond (W'14)",
            "sender_id": 5014,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "difference lists",
            "submessages": [],
            "timestamp": 1557806804,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/612c7c2a108d7850c62d1d2293a481aa42855408?x=x&version=2",
            "client": "website",
            "content": "<p>here's a more complete implementation: <a href=\"https://hackage.haskell.org/package/dlist-0.8.0.6/docs/src/Data.DList.html\" target=\"_blank\" title=\"https://hackage.haskell.org/package/dlist-0.8.0.6/docs/src/Data.DList.html\">https://hackage.haskell.org/package/dlist-0.8.0.6/docs/src/Data.DList.html</a></p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 165591472,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "PLRedmond@gmail.com",
            "sender_full_name": "Patrick Redmond (W'14)",
            "sender_id": 5014,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "difference lists",
            "submessages": [],
            "timestamp": 1557807046,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4d074af6cc341ef51b25bb2f738cdb11?d=identicon&version=1",
            "client": "website",
            "content": "<p>Have you read <a href=\"http://www.janis-voigtlaender.eu/papers/AsymptoticImprovementOfComputationsOverFreeMonads.pdf\" target=\"_blank\" title=\"http://www.janis-voigtlaender.eu/papers/AsymptoticImprovementOfComputationsOverFreeMonads.pdf\">Asymptotic Improvement of Computations over Free Monads</a>, which generalises this trick?</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 165620594,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f440",
                    "emoji_name": "eyes",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "PLRedmond@gmail.com",
                        "full_name": "Patrick Redmond (W'14)",
                        "id": 5014
                    },
                    "user_id": 5014
                }
            ],
            "recipient_id": 22667,
            "sender_email": "vaibhavsagar@gmail.com",
            "sender_full_name": "Vaibhav Sagar (he) (F1'16)",
            "sender_id": 100041,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "difference lists",
            "submessages": [],
            "timestamp": 1557839557,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4d074af6cc341ef51b25bb2f738cdb11?d=identicon&version=1",
            "client": "website",
            "content": "<p>Ed Yang wrote a <a href=\"http://blog.ezyang.com/2012/01/problem-set-the-codensity-transformation/\" target=\"_blank\" title=\"http://blog.ezyang.com/2012/01/problem-set-the-codensity-transformation/\">problem set</a> about this if that helps</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 165620694,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "vaibhavsagar@gmail.com",
            "sender_full_name": "Vaibhav Sagar (he) (F1'16)",
            "sender_id": 100041,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "difference lists",
            "submessages": [],
            "timestamp": 1557839636,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/7f89b22589ca6f3490f8a75591a699adc0e02fcc?x=x&version=1",
            "client": "website",
            "content": "<p>Can <code>toList</code> be quadratic?</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 165629777,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "ark.email@gmail.com",
            "sender_full_name": "Adam Bratschi-Kaye (he) (SP1'17)",
            "sender_id": 100532,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "difference lists",
            "submessages": [],
            "timestamp": 1557846101,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/21b9cce736cbbe8e0761bbb33863c7d3112d0136?x=x&version=2",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-id=\"100532\">@Adam Kaye (SP1'17)</span> I don't think so. You can think of a difference list as a tree of difference lists. When you call <code>toList</code>, you are flattening the tree into a single list. Under this viewpoint, the following operations correspond to the following trees:</p>\n<ul>\n<li><code>empty</code> - The empty tree.</li>\n<li><code>singleton</code> - Tree with a single node containing the value given.</li>\n<li><code>append</code> - Tree containing the two difference lists passed in as children.</li>\n<li><code>fromList</code> - Tree containing a single node that has the list passed in.</li>\n</ul>\n<p>When you call <code>fromList</code> you recursively traverse the trees and concatenate all the elements in the nodes together. The time it takes to traverse the tree is <code>O(number of operations performed)</code>. The total runtime of the concatenation is <code>O(number of operations performed + number of elements in fromList nodes)</code>. This gives a total runtime of <code>O(number of operations performed + number of elements in fromList nodes)</code>.</p>\n<p>If you don't use <code>empty</code> at all when constructing the tree, this can be simplified to <code>O(total number of elements in the tree)</code> since the total number of elements in the tree is guaranteed to be greater than the number of  nodes in the tree.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 165654967,
            "is_me_message": false,
            "last_edit_timestamp": 1557863165,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "michaelmalis2@gmail.com",
            "sender_full_name": "Michael Malis (SP2'19)",
            "sender_id": 8099,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "difference lists",
            "submessages": [],
            "timestamp": 1557862995,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/7f89b22589ca6f3490f8a75591a699adc0e02fcc?x=x&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-id=\"8099\">@Michael Malis (SP2'19)</span> Nice explanation!</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 165687899,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "ark.email@gmail.com",
            "sender_full_name": "Adam Bratschi-Kaye (he) (SP1'17)",
            "sender_id": 100532,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "difference lists",
            "submessages": [],
            "timestamp": 1557898457,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4d074af6cc341ef51b25bb2f738cdb11?d=identicon&version=1",
            "client": "website",
            "content": "<p>here's another post with the same explanation: <a href=\"http://h2.jaguarpaw.co.uk/posts/demystifying-dlist/\" target=\"_blank\" title=\"http://h2.jaguarpaw.co.uk/posts/demystifying-dlist/\">http://h2.jaguarpaw.co.uk/posts/demystifying-dlist/</a></p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 165745726,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "vaibhavsagar@gmail.com",
            "sender_full_name": "Vaibhav Sagar (he) (F1'16)",
            "sender_id": 100041,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "difference lists",
            "submessages": [],
            "timestamp": 1557948064,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/21b9cce736cbbe8e0761bbb33863c7d3112d0136?x=x&version=2",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-id=\"100041\">@Vaibhav Sagar (F1'16)</span> Are you aware of any decent benchmarks of different functional data structures? One of my biggest pet peeves about data structure performance is that people usually look at asymptotic complexity and nothing beyond that. I could easily see a difference list being 2-3x slower than an ordinary linked list due to the overhead of all the function calls.</p>\n<p>The only real example I'm aware of is that iterating through an array is much faster than iterating through a linked list (IIRC by as much as 30x). This is because the array is laid out sequentially in memory and thus gets extremely good cache locality.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 165749684,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "michaelmalis2@gmail.com",
            "sender_full_name": "Michael Malis (SP2'19)",
            "sender_id": 8099,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "difference lists",
            "submessages": [],
            "timestamp": 1557950934,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4d074af6cc341ef51b25bb2f738cdb11?d=identicon&version=1",
            "client": "ZulipMobile",
            "content": "<p><span class=\"user-mention\" data-user-id=\"8099\">@Michael Malis (SP2'19)</span> I'm not aware of any good benchmarks, but IME GHC's optimisations and the STG runtime make it very difficult to apply intuitions from any other languages I've used.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 165751795,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "vaibhavsagar@gmail.com",
            "sender_full_name": "Vaibhav Sagar (he) (F1'16)",
            "sender_id": 100041,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "difference lists",
            "submessages": [],
            "timestamp": 1557952345,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/c52df4d54166ed7db0141bdb21c7935e502d6ddc?x=x&version=1",
            "client": "website",
            "content": "<p>I've read assertions from Clojure people that the built-in structures there have good constant factors -- presumably they'd have benchmarks?</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 165752411,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "darius@wry.me",
            "sender_full_name": "Darius Bacon (W1'16)",
            "sender_id": 902,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "difference lists",
            "submessages": [],
            "timestamp": 1557952687,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/8260829a7479dd27047312816718afaed99f3fd1?x=x&version=1",
            "client": "website",
            "content": "<p>When preparing my data structures course, I found a reference to someone at Jane Street coding and comparing all sorts of ways to implement maps, and concluding that AVL trees (relaxing the height difference to 2 instead of 1) worked the best. This is specific to the OCaml compiler, though. And I can't immediately find a link to the reference.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 165756840,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "plragde@uwaterloo.ca",
            "sender_full_name": "Prabhakar Ragde (he)",
            "sender_id": 8655,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "difference lists",
            "submessages": [],
            "timestamp": 1557956108,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/21b9cce736cbbe8e0761bbb33863c7d3112d0136?x=x&version=2",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-id=\"902\">@Darius Bacon (F2'15)</span> The main claim I've heard coming from the Clojure community is on the performance of their persistent vector implementation. The persistent vector has <code>O(log n)</code> insert/update. The claim is that since the vector has a branching factor of 32, for any reasonable workload the vector has \"effectively constant\" performance. </p>\n<p>Personally I have some misgivings about this. It's misleading to claim that a <code>O(log n)</code> algorithm is effectively <code>O(1)</code> since <code>O(1)</code> and <code>O(log n)</code> are, under the definition of big-O, two completely different things. </p>\n<p>I think a better way to say what they mean is that if an operation is <code>O(log n)</code>, that does not necessarily mean the operation is slow. At <code>O(log n)</code> most of the performance is still determined by constant factors. </p>\n<p>I don't think this claim is particularly interesting as it doesn't tell you anything about the actual performance of the data structure (see my comment above). I did come across this <a href=\"https://hypirion.com/musings/persistent-vector-performance\" target=\"_blank\" title=\"https://hypirion.com/musings/persistent-vector-performance\">blog post</a> where someone ran benchmarks against the Clojure persistent vector type. Based on the benchmarks it looks like a persistent vector is ~2-10x slower than an ArrayList once you reach millions of elements.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 165760136,
            "is_me_message": false,
            "last_edit_timestamp": 1557958753,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "michaelmalis2@gmail.com",
            "sender_full_name": "Michael Malis (SP2'19)",
            "sender_id": 8099,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "difference lists",
            "submessages": [],
            "timestamp": 1557958729,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/c52df4d54166ed7db0141bdb21c7935e502d6ddc?x=x&version=1",
            "client": "website",
            "content": "<p>The \"good constant factors\" claims I remember were compared to things like finger trees and Okasaki's book.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 165760248,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "darius@wry.me",
            "sender_full_name": "Darius Bacon (W1'16)",
            "sender_id": 902,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "difference lists",
            "submessages": [],
            "timestamp": 1557958807,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/c52df4d54166ed7db0141bdb21c7935e502d6ddc?x=x&version=1",
            "client": "website",
            "content": "<p>What I vaguely remember is something like 2-3 times faster in practice, though I may be totally confabulating that memory.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 165760303,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "darius@wry.me",
            "sender_full_name": "Darius Bacon (W1'16)",
            "sender_id": 902,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "difference lists",
            "submessages": [],
            "timestamp": 1557958856,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/c52df4d54166ed7db0141bdb21c7935e502d6ddc?x=x&version=1",
            "client": "website",
            "content": "<p>(I'm not a clojure user -- there are some superficial ways the language and community rub me the wrong way.)</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 165760570,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "darius@wry.me",
            "sender_full_name": "Darius Bacon (W1'16)",
            "sender_id": 902,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "difference lists",
            "submessages": [],
            "timestamp": 1557959079,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/7571d485f27fd3656371e4418e0e4f3e?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-id=\"8099\">@Michael Malis (SP2'19)</span> zach tellman curated a library of both persistent and mutable data structures on the jvm with extensive benchmarking: <a href=\"https://github.com/lacuna/bifurcan/tree/master/benchmarks\" target=\"_blank\" title=\"https://github.com/lacuna/bifurcan/tree/master/benchmarks\">https://github.com/lacuna/bifurcan/tree/master/benchmarks</a></p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 165768074,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "bts@gmail.com",
            "sender_full_name": "Brian Schroeder (he) (S2'15)",
            "sender_id": 8317,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "difference lists",
            "submessages": [],
            "timestamp": 1557966935,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/8776bd2d19cdb1399c4e9589d9397d57290e5729?x=x&version=2",
            "client": "website",
            "content": "<p>There's a weekly (bi-weekly?) rust check-in for the current batch, is there also a Haskell check-in I could attend?<br>\nOr is that my cue to create such a thing?</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 166934791,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "shae.erisson@gmail.com",
            "sender_full_name": "Shae Matijs Erisson (he) (F1'19)",
            "sender_id": 221819,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "weekly check-in?",
            "submessages": [],
            "timestamp": 1559241819,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/8776bd2d19cdb1399c4e9589d9397d57290e5729?x=x&version=2",
            "client": "website",
            "content": "<p>ok, I created a Monday at 3pm weekly Haskell event!</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 166935157,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f419",
                    "emoji_name": "octopus",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "tmg@fastmail.com",
                        "full_name": "Thomas Gardner (W2'19)",
                        "id": 198212
                    },
                    "user_id": 198212
                },
                {
                    "emoji_code": "1104",
                    "emoji_name": "haskell",
                    "reaction_type": "realm_emoji",
                    "user": {
                        "email": "heneli@kailahi.com",
                        "full_name": "Heneli Ta'angafala Kailahi (SP2'17)",
                        "id": 100771
                    },
                    "user_id": 100771
                },
                {
                    "emoji_code": "1f389",
                    "emoji_name": "tada",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "elhanani@gmail.com",
                        "full_name": "Yoni Elhanani (he) (SP2'19)",
                        "id": 215273
                    },
                    "user_id": 215273
                },
                {
                    "emoji_code": "1f419",
                    "emoji_name": "octopus",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "elhanani@gmail.com",
                        "full_name": "Yoni Elhanani (he) (SP2'19)",
                        "id": 215273
                    },
                    "user_id": 215273
                },
                {
                    "emoji_code": "1104",
                    "emoji_name": "haskell",
                    "reaction_type": "realm_emoji",
                    "user": {
                        "email": "elhanani@gmail.com",
                        "full_name": "Yoni Elhanani (he) (SP2'19)",
                        "id": 215273
                    },
                    "user_id": 215273
                },
                {
                    "emoji_code": "1104",
                    "emoji_name": "haskell",
                    "reaction_type": "realm_emoji",
                    "user": {
                        "email": "vaibhavsagar@gmail.com",
                        "full_name": "Vaibhav Sagar (he) (F1'16)",
                        "id": 100041
                    },
                    "user_id": 100041
                },
                {
                    "emoji_code": "1f419",
                    "emoji_name": "octopus",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "vaibhavsagar@gmail.com",
                        "full_name": "Vaibhav Sagar (he) (F1'16)",
                        "id": 100041
                    },
                    "user_id": 100041
                }
            ],
            "recipient_id": 22667,
            "sender_email": "shae.erisson@gmail.com",
            "sender_full_name": "Shae Matijs Erisson (he) (F1'19)",
            "sender_id": 221819,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "weekly check-in?",
            "submessages": [],
            "timestamp": 1559242077,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/8776bd2d19cdb1399c4e9589d9397d57290e5729?x=x&version=2",
            "client": "ZulipMobile",
            "content": "<p>Weekly check-in ten minutes from now!</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 167219541,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "shae.erisson@gmail.com",
            "sender_full_name": "Shae Matijs Erisson (he) (F1'19)",
            "sender_id": 221819,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "weekly check-in?",
            "submessages": [],
            "timestamp": 1559587825,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p>Here's that applicative \"fold\" stuff I mentioned: <a href=\"http://hackage.haskell.org/package/foldl-1.4.5/docs/Control-Foldl.html\" target=\"_blank\" title=\"http://hackage.haskell.org/package/foldl-1.4.5/docs/Control-Foldl.html\">http://hackage.haskell.org/package/foldl-1.4.5/docs/Control-Foldl.html</a></p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 167223568,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f4c2",
                    "emoji_name": "folder",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "shae.erisson@gmail.com",
                        "full_name": "Shae Matijs Erisson (he) (F1'19)",
                        "id": 221819
                    },
                    "user_id": 221819
                },
                {
                    "emoji_code": "1f4c2",
                    "emoji_name": "folder",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "vaibhavsagar@gmail.com",
                        "full_name": "Vaibhav Sagar (he) (F1'16)",
                        "id": 100041
                    },
                    "user_id": 100041
                }
            ],
            "recipient_id": 22667,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "weekly check-in?",
            "submessages": [],
            "timestamp": 1559590571,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/8776bd2d19cdb1399c4e9589d9397d57290e5729?x=x&version=2",
            "client": "website",
            "content": "<p>today in haskell weekly, we're talking about ghcup <a href=\"https://github.com/haskell/ghcup\" target=\"_blank\" title=\"https://github.com/haskell/ghcup\">https://github.com/haskell/ghcup</a></p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 167786653,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "shae.erisson@gmail.com",
            "sender_full_name": "Shae Matijs Erisson (he) (F1'19)",
            "sender_id": 221819,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "weekly check-in?",
            "submessages": [],
            "timestamp": 1560193421,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/8776bd2d19cdb1399c4e9589d9397d57290e5729?x=x&version=2",
            "client": "website",
            "content": "<p>aka, how to easily install GHC on your Unix system</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 167786723,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "shae.erisson@gmail.com",
            "sender_full_name": "Shae Matijs Erisson (he) (F1'19)",
            "sender_id": 221819,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "weekly check-in?",
            "submessages": [],
            "timestamp": 1560193450,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/3f29df543be812656249f5932737560869ab8f09?x=x&version=5",
            "client": "website",
            "content": "<p>This is the best Monad explanation I've read to date: <a href=\"https://mvanier.livejournal.com/3917.html\" target=\"_blank\" title=\"https://mvanier.livejournal.com/3917.html\">https://mvanier.livejournal.com/3917.html</a></p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 167787541,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "elhanani@gmail.com",
            "sender_full_name": "Yoni Elhanani (he) (SP2'19)",
            "sender_id": 215273,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "weekly check-in?",
            "submessages": [],
            "timestamp": 1560194114,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/c52df4d54166ed7db0141bdb21c7935e502d6ddc?x=x&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-id=\"215273\">@Yoni Elhanani (SP2'19)</span> I just told Mike you said that <span aria-label=\"slight smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"slight smile\">:slight_smile:</span> (not by name).</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 167793798,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "darius@wry.me",
            "sender_full_name": "Darius Bacon (W1'16)",
            "sender_id": 902,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "weekly check-in?",
            "submessages": [],
            "timestamp": 1560198773,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/3f29df543be812656249f5932737560869ab8f09?x=x&version=5",
            "client": "website",
            "content": "<p>Wow, awesome! <span aria-label=\"grinning\" class=\"emoji emoji-1f600\" role=\"img\" title=\"grinning\">:grinning:</span></p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 167803459,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "elhanani@gmail.com",
            "sender_full_name": "Yoni Elhanani (he) (SP2'19)",
            "sender_id": 215273,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "weekly check-in?",
            "submessages": [],
            "timestamp": 1560206978,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/612c7c2a108d7850c62d1d2293a481aa42855408?x=x&version=2",
            "client": "ZulipMobile",
            "content": "<p>Ooh! Is ghcup inspired by rustup? I'm going to check it out!</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 167818261,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "PLRedmond@gmail.com",
            "sender_full_name": "Patrick Redmond (W'14)",
            "sender_id": 5014,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "weekly check-in?",
            "submessages": [],
            "timestamp": 1560227639,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/8776bd2d19cdb1399c4e9589d9397d57290e5729?x=x&version=2",
            "client": "website",
            "content": "<p>Today in Haskell weekly we're talking about getting started by solving Euler Problems, and I'm requesting feedback on the code I wrote this past weekend: <a href=\"https://shapr.github.io/posts/2019-06-16-tmux-sparklines.html\" target=\"_blank\" title=\"https://shapr.github.io/posts/2019-06-16-tmux-sparklines.html\">https://shapr.github.io/posts/2019-06-16-tmux-sparklines.html</a></p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 168337273,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "shae.erisson@gmail.com",
            "sender_full_name": "Shae Matijs Erisson (he) (F1'19)",
            "sender_id": 221819,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "weekly check-in?",
            "submessages": [],
            "timestamp": 1560797899,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/3f29df543be812656249f5932737560869ab8f09?x=x&version=5",
            "client": "website",
            "content": "<p>I'm trying to define a class which has a function that should be able to return some data with itself as a class constraint.<br>\nA simple example for such a thing is:</p>\n<p>class MyClass a where<br>\n  func :: MyClass b =&gt; a -&gt; [b]<br>\n  func x = [x]</p>\n<p>However, it doesn't compile. I can't find anywhere that mentions something like it, and other questions similar to it usually suggested using some language extensions but these didn't make this work. Is there anything I can do to allow such a class?</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 168771904,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "elhanani@gmail.com",
            "sender_full_name": "Yoni Elhanani (he) (SP2'19)",
            "sender_id": 215273,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Constraining a class on itself",
            "submessages": [],
            "timestamp": 1561251162,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/6485c74622306264ff53449c6f0ca540?d=identicon&version=1",
            "client": "ZulipMobile",
            "content": "<p>I suspect the issue here is that the type signature of func makes a promise to the caller: you can give me an <code>a</code>, and I'll return a list of any type of thing you want as long as there's a MyClass impl for it. But the code <code>func x = [x]</code> doesn't keep this promise, since it will only return a list of things of the same type as its argument</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 168772173,
            "is_me_message": false,
            "last_edit_timestamp": 1561251746,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "iain@mccoy.id.au",
            "sender_full_name": "Iain McCoy (he) (SP2'17)",
            "sender_id": 100806,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Constraining a class on itself",
            "submessages": [],
            "timestamp": 1561251733,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/6485c74622306264ff53449c6f0ca540?d=identicon&version=1",
            "client": "ZulipMobile",
            "content": "<p>(I'm just going off the typechecker in my head here and not the Glorious one on my laptop, so I can't guarantee that that's it)</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 168772183,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "iain@mccoy.id.au",
            "sender_full_name": "Iain McCoy (he) (SP2'17)",
            "sender_id": 100806,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Constraining a class on itself",
            "submessages": [],
            "timestamp": 1561251790,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/3f29df543be812656249f5932737560869ab8f09?x=x&version=5",
            "client": "website",
            "content": "<p>Not sure what you mean by that. I promise that I return a list of things of some type that have a \"func\" functions associated with it, and in fact I return just that, since the type of a is in instance of MyClass by the very definition of it. GHC outputs the following error:</p>\n<p>SolverDefs.hs:19:13: error:<br>\n    \u2022 Couldn't match expected type \u2018b\u2019 with actual type \u2018a\u2019<br>\n      \u2018a\u2019 is a rigid type variable bound by<br>\n        the class declaration for \u2018MyClass\u2019<br>\n        at SolverDefs.hs:17:15<br>\n      \u2018b\u2019 is a rigid type variable bound by<br>\n        the type signature for:<br>\n          func :: forall b. MyClass b =&gt; a -&gt; [b]<br>\n        at SolverDefs.hs:18:11-31<br>\n    \u2022 In the expression: x<br>\n      In the expression: [x]<br>\n      In an equation for \u2018func\u2019: func x = [x]<br>\n    \u2022 Relevant bindings include<br>\n        x :: a (bound at SolverDefs.hs:19:8)<br>\n        func :: a -&gt; [b] (bound at SolverDefs.hs:19:3)</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 168772239,
            "is_me_message": false,
            "last_edit_timestamp": 1561251992,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "elhanani@gmail.com",
            "sender_full_name": "Yoni Elhanani (he) (SP2'19)",
            "sender_id": 215273,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Constraining a class on itself",
            "submessages": [],
            "timestamp": 1561251946,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p>I think what Iain means is that the type <code>MyClass b =&gt; a -&gt; [b]</code> is really, when de-sugared, <code>forall b. MyClass b =&gt; a -&gt; [b]</code>. So you're actually promising to return a list that is somehow of type <code>forall b. MyClass b =&gt; [b]</code>. As far as I know, the only way to do that is to return the empty list :)</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 168774717,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Constraining a class on itself",
            "submessages": [],
            "timestamp": 1561257301,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/6485c74622306264ff53449c6f0ca540?d=identicon&version=1",
            "client": "website",
            "content": "<p>Another way of saying it is that the type of <code>func</code> in <code>MyClass</code> means that given <code>MyClass</code> instances for String and Int, I can call it in both of these ways:</p>\n<div class=\"codehilite\"><pre><span></span>f1 :: Int -&gt; [String]\nf1 v = func v\n\nf2 :: Int -&gt; [Int]\nf2 v = func v\n</pre></div>\n\n\n<p>But the implementation you've provided will only work for <code>f2</code>. That error is the type checker saying that there are things the type signature will allow that the implementation cannot; in particular, it wants to match b with a because in the func implementation you provided, <code>[x]</code> is only of type <code>[b]</code> when <code>a</code> and <code>b</code> are the same.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 168775149,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "iain@mccoy.id.au",
            "sender_full_name": "Iain McCoy (he) (SP2'17)",
            "sender_id": 100806,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Constraining a class on itself",
            "submessages": [],
            "timestamp": 1561258238,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p>Is there a nice way to do the pseudo-code <code>func :: a -&gt; [exists t. MyClass t =&gt; t]</code> version?</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 168775380,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Constraining a class on itself",
            "submessages": [],
            "timestamp": 1561258722,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/6485c74622306264ff53449c6f0ca540?d=identicon&version=1",
            "client": "website",
            "content": "<p>looking at your description of the type, it seems a bit like existential types.  You can express a type like <code>forall a. a -&gt; exists b. MyClass b =&gt; [b]</code> by doing <code>data Funcable = forall b. MyClass b =&gt; Funcable b</code> then <code>a -&gt; Funcable b</code>. Pattern-matching on the <code>Funcable</code> will extract the <code>b</code> and the <code>MyClass b</code> used to construct it.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 168775393,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "iain@mccoy.id.au",
            "sender_full_name": "Iain McCoy (he) (SP2'17)",
            "sender_id": 100806,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Constraining a class on itself",
            "submessages": [],
            "timestamp": 1561258760,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/6485c74622306264ff53449c6f0ca540?d=identicon&version=1",
            "client": "website",
            "content": "<p>but in this case that would require a mutually-recursive type and typeclass and I don't know if the compiler will buy it.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 168775402,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "iain@mccoy.id.au",
            "sender_full_name": "Iain McCoy (he) (SP2'17)",
            "sender_id": 100806,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Constraining a class on itself",
            "submessages": [],
            "timestamp": 1561258800,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/6485c74622306264ff53449c6f0ca540?d=identicon&version=1",
            "client": "website",
            "content": "<p>In general, when you run into this sort of esoterica there's often an easier way to solve the problem if you can reframe it. Feel free to let us know what problem inspired the question and we'll see what we can do!</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 168775455,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "iain@mccoy.id.au",
            "sender_full_name": "Iain McCoy (he) (SP2'17)",
            "sender_id": 100806,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Constraining a class on itself",
            "submessages": [],
            "timestamp": 1561258859,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/3f29df543be812656249f5932737560869ab8f09?x=x&version=5",
            "client": "website",
            "content": "<p>I'll try to be more specific.</p>\n<p>Let's say that I have a class that defines tree nodes. Each tree node has some functions associated with which are defined by the class instances, and also a function that lists its children nodes. I want to be able to define trees that can have mixed types of nodes in it (specifically to be able to change some functions generically regardless of the specific data type). I can build a generic data type that has the same fields as the class, and make it an instance of the class, but it turns out to be both super ugly with boilerplate(even when using existential qualification)  and also extremely slow.</p>\n<p>Is there a way to define a class that can have this functionality?</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 168775576,
            "is_me_message": false,
            "last_edit_timestamp": 1561259245,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "elhanani@gmail.com",
            "sender_full_name": "Yoni Elhanani (he) (SP2'19)",
            "sender_id": 215273,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Constraining a class on itself",
            "submessages": [],
            "timestamp": 1561259094,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/3f29df543be812656249f5932737560869ab8f09?x=x&version=5",
            "client": "website",
            "content": "<p>To be even more specific, I want to have an option to take a specific instance of that class and prune some children only from the root, so the root of the tree will have a \"pruned node\" type, with children which are all of the original type, and traversal of the tree after the first node will be as efficient as it would have been otherwise (i.e. without having to check which children are pruned and which are still valid)</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 168775826,
            "is_me_message": false,
            "last_edit_timestamp": 1561259726,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "elhanani@gmail.com",
            "sender_full_name": "Yoni Elhanani (he) (SP2'19)",
            "sender_id": 215273,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Constraining a class on itself",
            "submessages": [],
            "timestamp": 1561259701,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/612c7c2a108d7850c62d1d2293a481aa42855408?x=x&version=2",
            "client": "website",
            "content": "<p>I think there are two main approaches to this problem:</p>\n<ul>\n<li>\n<p>hide an existential type with a type constraint like this:<br>\n<code>data AnyWidget = forall w. Widget w =&gt; AnyWidget w</code> (example lifted from <a href=\"https://lukepalmer.wordpress.com/2010/01/24/haskell-antipattern-existential-typeclass/\" target=\"_blank\" title=\"https://lukepalmer.wordpress.com/2010/01/24/haskell-antipattern-existential-typeclass/\">here; i haven't read this article</a>...) now anything you pack inside of an AnyWidget can call the Widget methods and have different behaviors depending on its (now forgotten) concrete type</p>\n</li>\n<li>\n<p>use the data constructor object pattern (also called <a href=\"http://www.haskellforall.com/2012/05/scrap-your-type-classes.html\" target=\"_blank\" title=\"http://www.haskellforall.com/2012/05/scrap-your-type-classes.html\">scrap your typeclasses</a>..) using this pattern you can instantiate a single type with 'methods' that are different depending on the different behavior you want (but your different instances are no longer different types)</p>\n</li>\n</ul>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 168792399,
            "is_me_message": false,
            "last_edit_timestamp": 1561293046,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "PLRedmond@gmail.com",
            "sender_full_name": "Patrick Redmond (W'14)",
            "sender_id": 5014,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Constraining a class on itself",
            "submessages": [],
            "timestamp": 1561292986,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/612c7c2a108d7850c62d1d2293a481aa42855408?x=x&version=2",
            "client": "website",
            "content": "<p>does that help?</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 168792462,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "PLRedmond@gmail.com",
            "sender_full_name": "Patrick Redmond (W'14)",
            "sender_id": 5014,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Constraining a class on itself",
            "submessages": [],
            "timestamp": 1561293082,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/6485c74622306264ff53449c6f0ca540?d=identicon&version=1",
            "client": "ZulipMobile",
            "content": "<p>The phrase \"tree that can have mixed types of nodes in it\" just makes me think of a tree where the value is a union type. If you want a situation where the value of this level of the tree determines the possible types of the children, then you probably want to either un-abstract the tree structure and have a family of mutually recursive data types that happen to define something you could look at as a tree, or to look at recursion schemes.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 168792788,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "iain@mccoy.id.au",
            "sender_full_name": "Iain McCoy (he) (SP2'17)",
            "sender_id": 100806,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Constraining a class on itself",
            "submessages": [],
            "timestamp": 1561293732,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/6485c74622306264ff53449c6f0ca540?d=identicon&version=1",
            "client": "ZulipMobile",
            "content": "<p>I'm not sure I understand why the pruned-ness of the tree should be part of the tree's type. It might be worth removing the pruned-ness from the type level, or at other ways of supplying and demanding evidence of pruned-ness</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 168792822,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "iain@mccoy.id.au",
            "sender_full_name": "Iain McCoy (he) (SP2'17)",
            "sender_id": 100806,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Constraining a class on itself",
            "submessages": [],
            "timestamp": 1561293838,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/6485c74622306264ff53449c6f0ca540?d=identicon&version=1",
            "client": "ZulipMobile",
            "content": "<p>Did you dig into why your initial implementations were slow?</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 168792877,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "iain@mccoy.id.au",
            "sender_full_name": "Iain McCoy (he) (SP2'17)",
            "sender_id": 100806,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Constraining a class on itself",
            "submessages": [],
            "timestamp": 1561293903,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/3f29df543be812656249f5932737560869ab8f09?x=x&version=5",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-id=\"5014\">@Patrick Redmond (W'14)</span>  I'll look further into the articles you sent, but I've already tried some ways to pack the class into a data type / use a data type instead of class and it didn't suit me both for performance reasons and also ugliness of code / boilerplate. Maybe these issues are addressed in the articles, I'll look into it. Thanks for the references!</p>\n<p><span class=\"user-mention\" data-user-id=\"100806\">@Iain McCoy (SP2'17)</span> Unionizing the data structure is not a good solution to my problem. I'll further elaborate: <span aria-label=\"grinning\" class=\"emoji emoji-1f600\" role=\"img\" title=\"grinning\">:grinning:</span> </p>\n<p>My class represents a 2-player zero-sum game. I've coded a bunch of game instances, and also different general game playing algorithms. Being a class makes it very easy for me to define a new game just by instantiating the class, and solve it with any of the algorithms transparently. The pruning is made so I can remove symmetries from the first moves of a game in way that is transparent to the game implementations and the solvers. Adding this feature to every node slows things down because I have to perform another unboxing / check at each node traversal.</p>\n<p>I spent the better part of last week working on performance issues (and was able to get it 10x as fast than the original version for some instances!) - this is crucial to me, as a game solver is as strong as the number of nodes it can explore. So far my attempts to add pruning in different places within a data type reduced performance to about 75% traversals per second compared to the baseline...</p>\n<p>After some thought, it does make sense to me, in the same sense that in OOP virtual polymorphism is being done at runtime and not at compile time, but taking 25% performance hit for it seems to be too much of a blow...</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 168795410,
            "is_me_message": false,
            "last_edit_timestamp": 1561299014,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "elhanani@gmail.com",
            "sender_full_name": "Yoni Elhanani (he) (SP2'19)",
            "sender_id": 215273,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Constraining a class on itself",
            "submessages": [],
            "timestamp": 1561298987,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/6485c74622306264ff53449c6f0ca540?d=identicon&version=1",
            "client": "ZulipMobile",
            "content": "<p>Did you dig into why your initial implementations were slow?</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 168795510,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "iain@mccoy.id.au",
            "sender_full_name": "Iain McCoy (he) (SP2'17)",
            "sender_id": 100806,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Constraining a class on itself",
            "submessages": [],
            "timestamp": 1561299199,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4d074af6cc341ef51b25bb2f738cdb11?d=identicon&version=1",
            "client": "website",
            "content": "<p>I don't understand why it's necessary to pull in the typeclass machinery for this. Have you considered using a data type such as</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kr\">data</span> <span class=\"kt\">GameTree</span> <span class=\"n\">a</span>\n    <span class=\"ow\">=</span> <span class=\"kt\">Leaf</span> <span class=\"n\">a</span>\n    <span class=\"o\">|</span> <span class=\"kt\">Regular</span> <span class=\"p\">[</span><span class=\"kt\">GameTree</span> <span class=\"n\">a</span><span class=\"p\">]</span>\n    <span class=\"o\">|</span> <span class=\"kt\">Pruned</span> <span class=\"p\">[</span><span class=\"kt\">GameTree</span> <span class=\"n\">a</span><span class=\"p\">]</span>\n</pre></div>\n\n\n<p>to represent your tree?</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 168795888,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "vaibhavsagar@gmail.com",
            "sender_full_name": "Vaibhav Sagar (he) (F1'16)",
            "sender_id": 100041,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Constraining a class on itself",
            "submessages": [],
            "timestamp": 1561300001,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/3f29df543be812656249f5932737560869ab8f09?x=x&version=5",
            "client": "website",
            "content": "<p>The answers to both questions are the same! <span aria-label=\"grinning\" class=\"emoji emoji-1f600\" role=\"img\" title=\"grinning\">:grinning:</span> </p>\n<p>I started with an implementation similar to what V suggested, but the thing is that my data can be a bit more complex. Changing into a class structure allowed me to do the following: </p>\n<p>1. Having a solved game just a subclass of a game, where there is also another function that chooses the next move.<br>\n2. Consequently, externalize the state from the algorithm implementation (for example randomness)<br>\n3. Define some default functions on the class that can be overridden in case they can be made more efficient (for example, for some games it may be easier to get the number of possible moves without performing \"length\" on the moves list).<br>\n4. Remove the amount of unboxing that is being performed. My game solving algorithms spend most of their time traversing the tree with very little computation (just propagating values). <br>\n.</p>\n<p>On my original \"type style\" implementation, I used waaaay too much of heap for stuff that an imperative language would do with some mutable data structure, and so most of the time was spent on garbage collection and not on actual computation. By changing the structure in that way I was able to reduce it considerably (and also by sprinkling bangs very generously). </p>\n<p>Another side effect which I liked, is that the code is a lot more elegant, as I can now treat everything in the same way. For example: the human interface is now  just a game solver (where the choosing function polls the player instead of doing computations). Previously I had 3 different functions for player vs AI, player vs. player, and AI vs. AI.</p>\n<p>To be honest, even if I can't generalize pruning as nice as I could the other things so far, at worst it will only be as ugly as my previous implementation (I'm now using the \"union of types\" approach. 75% of 1000% improvement is much better than before, but also still hoping to make that 75% into 95% somehow if I can).</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 168799354,
            "is_me_message": false,
            "last_edit_timestamp": 1561307268,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "elhanani@gmail.com",
            "sender_full_name": "Yoni Elhanani (he) (SP2'19)",
            "sender_id": 215273,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Constraining a class on itself",
            "submessages": [],
            "timestamp": 1561307155,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4d074af6cc341ef51b25bb2f738cdb11?d=identicon&version=1",
            "client": "website",
            "content": "<p>There's nothing stopping you from having mutable data structures in Haskell, see <a href=\"http://hackage.haskell.org/package/base-4.12.0.0/docs/Control-Monad-ST.html\" target=\"_blank\" title=\"http://hackage.haskell.org/package/base-4.12.0.0/docs/Control-Monad-ST.html\"><code>Control.Monad.ST</code></a></p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 168803979,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "vaibhavsagar@gmail.com",
            "sender_full_name": "Vaibhav Sagar (he) (F1'16)",
            "sender_id": 100041,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Constraining a class on itself",
            "submessages": [],
            "timestamp": 1561315580,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/8776bd2d19cdb1399c4e9589d9397d57290e5729?x=x&version=2",
            "client": "website",
            "content": "<p>I hope you'll show off this code at the weekly haskell event today?</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 168875284,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "shae.erisson@gmail.com",
            "sender_full_name": "Shae Matijs Erisson (he) (F1'19)",
            "sender_id": 221819,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Constraining a class on itself",
            "submessages": [],
            "timestamp": 1561402311,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/7f89b22589ca6f3490f8a75591a699adc0e02fcc?x=x&version=1",
            "client": "website",
            "content": "<p><a href=\"https://github.com/adamrk/ouroboros\" target=\"_blank\" title=\"https://github.com/adamrk/ouroboros\">https://github.com/adamrk/ouroboros</a></p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 168905779,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1104",
                    "emoji_name": "haskell",
                    "reaction_type": "realm_emoji",
                    "user": {
                        "email": "clample@crimson.ua.edu",
                        "full_name": "Chris Lample (he) (W2'17)",
                        "id": 100452
                    },
                    "user_id": 100452
                },
                {
                    "emoji_code": "2764",
                    "emoji_name": "heart",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "felix.czhu@gmail.com",
                        "full_name": "Felix Zhu (F1'18)",
                        "id": 125020
                    },
                    "user_id": 125020
                },
                {
                    "emoji_code": "2764",
                    "emoji_name": "heart",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "vaibhavsagar@gmail.com",
                        "full_name": "Vaibhav Sagar (he) (F1'16)",
                        "id": 100041
                    },
                    "user_id": 100041
                },
                {
                    "emoji_code": "2764",
                    "emoji_name": "heart",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "annie.cherk@gmail.com",
                        "full_name": "Annie Cherkaev (she/they) (m4'18)",
                        "id": 9502
                    },
                    "user_id": 9502
                },
                {
                    "emoji_code": "1104",
                    "emoji_name": "haskell",
                    "reaction_type": "realm_emoji",
                    "user": {
                        "email": "vaibhavsagar@gmail.com",
                        "full_name": "Vaibhav Sagar (he) (F1'16)",
                        "id": 100041
                    },
                    "user_id": 100041
                },
                {
                    "emoji_code": "1f42b",
                    "emoji_name": "camel",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "vaibhavsagar@gmail.com",
                        "full_name": "Vaibhav Sagar (he) (F1'16)",
                        "id": 100041
                    },
                    "user_id": 100041
                },
                {
                    "emoji_code": "2b55",
                    "emoji_name": "circle",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "vaibhavsagar@gmail.com",
                        "full_name": "Vaibhav Sagar (he) (F1'16)",
                        "id": 100041
                    },
                    "user_id": 100041
                }
            ],
            "recipient_id": 22667,
            "sender_email": "ark.email@gmail.com",
            "sender_full_name": "Adam Bratschi-Kaye (he) (SP1'17)",
            "sender_id": 100532,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "OCaml/Haskell ouroboros quine",
            "submessages": [],
            "timestamp": 1561436890,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/57ad6b289d2b066f6497c2c7a542f246?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-id=\"5014\">@Patrick Redmond (W'14)</span> Hi!  I am, in fact, still working on this (it was on hold for a while, but I'm picking it back up again this summer).  Interested in helping?  I'm working on it with a student who's brand new to Haskell and he's kinda flailing.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 168983518,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "lindsey@composition.al",
            "sender_full_name": "Lindsey Kuper (she)",
            "sender_id": 2170,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "anyone want to pair on a tiny Servant project?",
            "submessages": [],
            "timestamp": 1561501974,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4d074af6cc341ef51b25bb2f738cdb11?d=identicon&version=1",
            "client": "website",
            "content": "<p>I'm also available to help if that's useful <span aria-label=\"smiley\" class=\"emoji emoji-1f603\" role=\"img\" title=\"smiley\">:smiley:</span></p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 168995020,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "vaibhavsagar@gmail.com",
            "sender_full_name": "Vaibhav Sagar (he) (F1'16)",
            "sender_id": 100041,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "anyone want to pair on a tiny Servant project?",
            "submessages": [],
            "timestamp": 1561516916,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/612c7c2a108d7850c62d1d2293a481aa42855408?x=x&version=2",
            "client": "website",
            "content": "<p>hey lindsey! yeah, i'm happy to pair!</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 169030055,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "PLRedmond@gmail.com",
            "sender_full_name": "Patrick Redmond (W'14)",
            "sender_id": 5014,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "anyone want to pair on a tiny Servant project?",
            "submessages": [],
            "timestamp": 1561556245,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/612c7c2a108d7850c62d1d2293a481aa42855408?x=x&version=2",
            "client": "website",
            "content": "<p>does <a href=\"http://hackage.haskell.org/package/recursion-schemes\" target=\"_blank\" title=\"http://hackage.haskell.org/package/recursion-schemes\">http://hackage.haskell.org/package/recursion-schemes</a> support doing any top-down catamorphism?</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 169144864,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "PLRedmond@gmail.com",
            "sender_full_name": "Patrick Redmond (W'14)",
            "sender_id": 5014,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "recursion-schemes package",
            "submessages": [],
            "timestamp": 1561649070,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4d074af6cc341ef51b25bb2f738cdb11?d=identicon&version=1",
            "client": "website",
            "content": "<p>I think so! Can you provide an example of the top-down catamorphism you want to write?</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 169145562,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "vaibhavsagar@gmail.com",
            "sender_full_name": "Vaibhav Sagar (he) (F1'16)",
            "sender_id": 100041,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "recursion-schemes package",
            "submessages": [],
            "timestamp": 1561649622,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/612c7c2a108d7850c62d1d2293a481aa42855408?x=x&version=2",
            "client": "website",
            "content": "<p>a directory walk</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 169145666,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "PLRedmond@gmail.com",
            "sender_full_name": "Patrick Redmond (W'14)",
            "sender_id": 5014,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "recursion-schemes package",
            "submessages": [],
            "timestamp": 1561649677,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/612c7c2a108d7850c62d1d2293a481aa42855408?x=x&version=2",
            "client": "website",
            "content": "<p>unless you can just recommend a package you've used for that <span aria-label=\"smiley cat\" class=\"emoji emoji-1f63a\" role=\"img\" title=\"smiley cat\">:smiley_cat:</span></p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 169145677,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "PLRedmond@gmail.com",
            "sender_full_name": "Patrick Redmond (W'14)",
            "sender_id": 5014,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "recursion-schemes package",
            "submessages": [],
            "timestamp": 1561649693,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/612c7c2a108d7850c62d1d2293a481aa42855408?x=x&version=2",
            "client": "website",
            "content": "<p>didn't see anything included with the base packages</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 169145707,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "PLRedmond@gmail.com",
            "sender_full_name": "Patrick Redmond (W'14)",
            "sender_id": 5014,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "recursion-schemes package",
            "submessages": [],
            "timestamp": 1561649719,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/612c7c2a108d7850c62d1d2293a481aa42855408?x=x&version=2",
            "client": "website",
            "content": "<p>(a directory walk would be a top-down catamorpism because at each step the whole path is required, assuming only the current path component is stored in the tree)</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 169145823,
            "is_me_message": false,
            "last_edit_timestamp": 1561649855,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "PLRedmond@gmail.com",
            "sender_full_name": "Patrick Redmond (W'14)",
            "sender_id": 5014,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "recursion-schemes package",
            "submessages": [],
            "timestamp": 1561649821,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4d074af6cc341ef51b25bb2f738cdb11?d=identicon&version=1",
            "client": "website",
            "content": "<p>It looks like <a href=\"http://hackage.haskell.org/package/filemanip-0.3.6.2/docs/System-FilePath-Find.html\" target=\"_blank\" title=\"http://hackage.haskell.org/package/filemanip-0.3.6.2/docs/System-FilePath-Find.html\"><code>filemanip</code></a> can do what you need</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 169145997,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "vaibhavsagar@gmail.com",
            "sender_full_name": "Vaibhav Sagar (he) (F1'16)",
            "sender_id": 100041,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "recursion-schemes package",
            "submessages": [],
            "timestamp": 1561649967,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/612c7c2a108d7850c62d1d2293a481aa42855408?x=x&version=2",
            "client": "website",
            "content": "<p>i mean, <a href=\"https://hackage.haskell.org/package/pathwalk\" target=\"_blank\" title=\"https://hackage.haskell.org/package/pathwalk\">https://hackage.haskell.org/package/pathwalk</a> looks fine but</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 169145998,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "PLRedmond@gmail.com",
            "sender_full_name": "Patrick Redmond (W'14)",
            "sender_id": 5014,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "recursion-schemes package",
            "submessages": [],
            "timestamp": 1561649968,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/612c7c2a108d7850c62d1d2293a481aa42855408?x=x&version=2",
            "client": "website",
            "content": "<p>filemanip also looks fine</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 169146160,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "PLRedmond@gmail.com",
            "sender_full_name": "Patrick Redmond (W'14)",
            "sender_id": 5014,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "recursion-schemes package",
            "submessages": [],
            "timestamp": 1561650086,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/612c7c2a108d7850c62d1d2293a481aa42855408?x=x&version=2",
            "client": "website",
            "content": "<p>i guess i'm still kind of wondering about <code>recursion-schemes</code> being able to do top-down because in my experience using it, its <code>cata</code> and <code>para</code> are both bottom-up</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 169146287,
            "is_me_message": false,
            "last_edit_timestamp": 1561650175,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "PLRedmond@gmail.com",
            "sender_full_name": "Patrick Redmond (W'14)",
            "sender_id": 5014,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "recursion-schemes package",
            "submessages": [],
            "timestamp": 1561650169,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4d074af6cc341ef51b25bb2f738cdb11?d=identicon&version=1",
            "client": "website",
            "content": "<p>I'm confident that it's possible with <code>recursion-schemes</code>, but I haven't used it enough to be certain</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 169146358,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "vaibhavsagar@gmail.com",
            "sender_full_name": "Vaibhav Sagar (he) (F1'16)",
            "sender_id": 100041,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "recursion-schemes package",
            "submessages": [],
            "timestamp": 1561650231,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4d074af6cc341ef51b25bb2f738cdb11?d=identicon&version=1",
            "client": "website",
            "content": "<p>maybe with <code>cataA</code> to carry around the current path?</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 169146512,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "vaibhavsagar@gmail.com",
            "sender_full_name": "Vaibhav Sagar (he) (F1'16)",
            "sender_id": 100041,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "recursion-schemes package",
            "submessages": [],
            "timestamp": 1561650333,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/612c7c2a108d7850c62d1d2293a481aa42855408?x=x&version=2",
            "client": "website",
            "content": "<p>looking at <a href=\"http://hackage.haskell.org/package/filemanip-0.3.6.2/docs/System-FilePath-Find.html#v:find\" target=\"_blank\" title=\"http://hackage.haskell.org/package/filemanip-0.3.6.2/docs/System-FilePath-Find.html#v:find\">http://hackage.haskell.org/package/filemanip-0.3.6.2/docs/System-FilePath-Find.html#v:find</a> ...</p>\n<p>if i want to build a tree data structure that mirrors the filesystem structure, i'd need to re-parse the path stored in <code>FileInfo</code> at each step and then search through the accumulated tree <code>a</code> to insert the new value</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 169146594,
            "is_me_message": false,
            "last_edit_timestamp": 1561650390,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "PLRedmond@gmail.com",
            "sender_full_name": "Patrick Redmond (W'14)",
            "sender_id": 5014,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "recursion-schemes package",
            "submessages": [],
            "timestamp": 1561650368,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/612c7c2a108d7850c62d1d2293a481aa42855408?x=x&version=2",
            "client": "website",
            "content": "<p>the advantage of rolling my own recursion or using a top-down recursion scheme is that the return value would sit in the right place in the resultant tree</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 169146749,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "PLRedmond@gmail.com",
            "sender_full_name": "Patrick Redmond (W'14)",
            "sender_id": 5014,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "recursion-schemes package",
            "submessages": [],
            "timestamp": 1561650480,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4d074af6cc341ef51b25bb2f738cdb11?d=identicon&version=1",
            "client": "website",
            "content": "<p>could you use an anamorphism to generate the directory tree?</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 169146819,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "vaibhavsagar@gmail.com",
            "sender_full_name": "Vaibhav Sagar (he) (F1'16)",
            "sender_id": 100041,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "recursion-schemes package",
            "submessages": [],
            "timestamp": 1561650514,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/612c7c2a108d7850c62d1d2293a481aa42855408?x=x&version=2",
            "client": "website",
            "content": "<p>that sounds right.. one sec</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 169147156,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "PLRedmond@gmail.com",
            "sender_full_name": "Patrick Redmond (W'14)",
            "sender_id": 5014,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "recursion-schemes package",
            "submessages": [],
            "timestamp": 1561650744,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/612c7c2a108d7850c62d1d2293a481aa42855408?x=x&version=2",
            "client": "website",
            "content": "<p><code>s/a/(f a)/g</code> over the type of <code>ana</code> <img alt=\":smiley_hacker:\" class=\"emoji\" src=\"https://zulip-avatars.s3.amazonaws.com/13/emoji/images/2410.jpg\" title=\"smiley hacker\"></p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 169149196,
            "is_me_message": false,
            "last_edit_timestamp": 1561652073,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "PLRedmond@gmail.com",
            "sender_full_name": "Patrick Redmond (W'14)",
            "sender_id": 5014,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "recursion-schemes package",
            "submessages": [],
            "timestamp": 1561652038,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/612c7c2a108d7850c62d1d2293a481aa42855408?x=x&version=2",
            "client": "website",
            "content": "<p>aaaand i'm out of time and need to go to a meeting.. be back later maybe</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 169149341,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "PLRedmond@gmail.com",
            "sender_full_name": "Patrick Redmond (W'14)",
            "sender_id": 5014,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "recursion-schemes package",
            "submessages": [],
            "timestamp": 1561652155,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/612c7c2a108d7850c62d1d2293a481aa42855408?x=x&version=2",
            "client": "website",
            "content": "<p>or maybe I need to do more than the cata to cataA transformation to ana</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 169179088,
            "is_me_message": false,
            "last_edit_timestamp": 1561672586,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "PLRedmond@gmail.com",
            "sender_full_name": "Patrick Redmond (W'14)",
            "sender_id": 5014,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "recursion-schemes package",
            "submessages": [],
            "timestamp": 1561672367,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/612c7c2a108d7850c62d1d2293a481aa42855408?x=x&version=2",
            "client": "website",
            "content": "<p>here's another example of a potentially top-down recursion scheme: longest common prefix of a pair of lists ... i'm pretty sure you could implement this with cata if you reversed the lists first, but reversing the lists before and after the operation kind of defeats the point</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 169191479,
            "is_me_message": false,
            "last_edit_timestamp": 1561686554,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "PLRedmond@gmail.com",
            "sender_full_name": "Patrick Redmond (W'14)",
            "sender_id": 5014,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "recursion-schemes package",
            "submessages": [],
            "timestamp": 1561686506,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/612c7c2a108d7850c62d1d2293a481aa42855408?x=x&version=2",
            "client": "website",
            "content": "<p>oh, this one was easy to do with ana</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 169192153,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "PLRedmond@gmail.com",
            "sender_full_name": "Patrick Redmond (W'14)",
            "sender_id": 5014,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "recursion-schemes package",
            "submessages": [],
            "timestamp": 1561687416,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/612c7c2a108d7850c62d1d2293a481aa42855408?x=x&version=2",
            "client": "website",
            "content": "<div class=\"codehilite\"><pre><span></span><span class=\"c1\">-- |</span>\n<span class=\"c1\">--</span>\n<span class=\"c1\">-- &gt;&gt;&gt; commonPrefix &quot;foobar&quot; &quot;bloops&quot;</span>\n<span class=\"c1\">-- &quot;&quot;</span>\n<span class=\"c1\">-- &gt;&gt;&gt; commonPrefix &quot;foobar&quot; &quot;foobar&quot;</span>\n<span class=\"c1\">-- &quot;foobar&quot;</span>\n<span class=\"c1\">-- &gt;&gt;&gt; commonPrefix &quot;foobar&quot; &quot;fooz&quot;</span>\n<span class=\"c1\">-- &quot;foo&quot;</span>\n<span class=\"c1\">-- &gt;&gt;&gt; commonPrefix &quot;fooz&quot; &quot;foobar&quot;</span>\n<span class=\"c1\">-- &quot;foo&quot;</span>\n<span class=\"nf\">commonPrefix</span> <span class=\"ow\">::</span> <span class=\"kt\">Eq</span> <span class=\"n\">a</span> <span class=\"ow\">=&gt;</span> <span class=\"p\">[</span><span class=\"n\">a</span><span class=\"p\">]</span> <span class=\"ow\">-&gt;</span> <span class=\"p\">[</span><span class=\"n\">a</span><span class=\"p\">]</span> <span class=\"ow\">-&gt;</span> <span class=\"p\">[</span><span class=\"n\">a</span><span class=\"p\">]</span>\n<span class=\"nf\">commonPrefix</span> <span class=\"ow\">=</span> <span class=\"n\">curry</span> <span class=\"o\">$</span> <span class=\"kt\">F</span><span class=\"o\">.</span><span class=\"n\">ana</span> <span class=\"n\">commonPrefixOne</span>\n\n<span class=\"nf\">commonPrefixOne</span> <span class=\"ow\">::</span> <span class=\"kt\">Eq</span> <span class=\"n\">a</span> <span class=\"ow\">=&gt;</span> <span class=\"p\">([</span><span class=\"n\">a</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"n\">a</span><span class=\"p\">])</span> <span class=\"ow\">-&gt;</span> <span class=\"kt\">F</span><span class=\"o\">.</span><span class=\"kt\">ListF</span> <span class=\"n\">a</span> <span class=\"p\">([</span><span class=\"n\">a</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"n\">a</span><span class=\"p\">])</span>\n<span class=\"nf\">commonPrefixOne</span> <span class=\"ow\">=</span> <span class=\"nf\">\\</span><span class=\"kr\">case</span>\n    <span class=\"p\">(</span><span class=\"n\">a</span><span class=\"kt\">:</span><span class=\"n\">as</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"kt\">:</span><span class=\"n\">bs</span><span class=\"p\">)</span>\n        <span class=\"o\">|</span> <span class=\"n\">a</span> <span class=\"o\">==</span> <span class=\"n\">b</span> <span class=\"ow\">-&gt;</span> <span class=\"kt\">F</span><span class=\"o\">.</span><span class=\"kt\">Cons</span> <span class=\"n\">a</span> <span class=\"p\">(</span><span class=\"n\">as</span><span class=\"p\">,</span> <span class=\"n\">bs</span><span class=\"p\">)</span>\n        <span class=\"o\">|</span> <span class=\"n\">otherwise</span> <span class=\"ow\">-&gt;</span> <span class=\"kt\">F</span><span class=\"o\">.</span><span class=\"kt\">Nil</span>\n    <span class=\"kr\">_</span> <span class=\"ow\">-&gt;</span> <span class=\"kt\">F</span><span class=\"o\">.</span><span class=\"kt\">Nil</span>\n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 169192226,
            "is_me_message": false,
            "last_edit_timestamp": 1561687829,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "PLRedmond@gmail.com",
            "sender_full_name": "Patrick Redmond (W'14)",
            "sender_id": 5014,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "recursion-schemes package",
            "submessages": [],
            "timestamp": 1561687528,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/612c7c2a108d7850c62d1d2293a481aa42855408?x=x&version=2",
            "client": "website",
            "content": "<p><span aria-label=\"happy\" class=\"emoji emoji-1f600\" role=\"img\" title=\"happy\">:happy:</span></p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 169192230,
            "is_me_message": false,
            "last_edit_timestamp": 1561687841,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "PLRedmond@gmail.com",
            "sender_full_name": "Patrick Redmond (W'14)",
            "sender_id": 5014,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "recursion-schemes package",
            "submessages": [],
            "timestamp": 1561687541,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/612c7c2a108d7850c62d1d2293a481aa42855408?x=x&version=2",
            "client": "website",
            "content": "<p>ok, i got the <code>FilePath -&gt; IO Tree</code> anamorphism to work..</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 169194590,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "PLRedmond@gmail.com",
            "sender_full_name": "Patrick Redmond (W'14)",
            "sender_id": 5014,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "recursion-schemes package",
            "submessages": [],
            "timestamp": 1561691234,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/612c7c2a108d7850c62d1d2293a481aa42855408?x=x&version=2",
            "client": "website",
            "content": "<p>it's kind of long</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 169194591,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "PLRedmond@gmail.com",
            "sender_full_name": "Patrick Redmond (W'14)",
            "sender_id": 5014,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "recursion-schemes package",
            "submessages": [],
            "timestamp": 1561691241,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/612c7c2a108d7850c62d1d2293a481aa42855408?x=x&version=2",
            "client": "website",
            "content": "<div class=\"codehilite\"><pre><span></span><span class=\"c1\">-- | Non-recursive tree functor</span>\n<span class=\"kr\">data</span> <span class=\"kt\">TreeF</span> <span class=\"n\">a</span>\n    <span class=\"ow\">=</span> <span class=\"kt\">Dir</span> <span class=\"kt\">FilePath</span> <span class=\"p\">[</span><span class=\"n\">a</span><span class=\"p\">]</span>\n    <span class=\"o\">|</span> <span class=\"kt\">File</span> <span class=\"kt\">FilePath</span>\n    <span class=\"kr\">deriving</span> <span class=\"p\">(</span><span class=\"kt\">Functor</span><span class=\"p\">,</span> <span class=\"kt\">Foldable</span><span class=\"p\">,</span> <span class=\"kt\">Traversable</span><span class=\"p\">)</span>\n\n<span class=\"c1\">-- | Recursive tree</span>\n<span class=\"kr\">type</span> <span class=\"kt\">Tree</span> <span class=\"ow\">=</span> <span class=\"kt\">F</span><span class=\"o\">.</span><span class=\"kt\">Fix</span> <span class=\"kt\">TreeF</span>\n\n<span class=\"c1\">-- | Convert recursive tree to a flat list of paths</span>\n<span class=\"nf\">toList</span> <span class=\"ow\">::</span> <span class=\"kt\">Tree</span> <span class=\"ow\">-&gt;</span> <span class=\"p\">[</span><span class=\"kt\">FilePath</span><span class=\"p\">]</span>\n<span class=\"nf\">toList</span> <span class=\"ow\">=</span> <span class=\"kt\">F</span><span class=\"o\">.</span><span class=\"n\">cata</span> <span class=\"n\">toListOne</span>\n\n<span class=\"c1\">-- | Important part of &#39;toList&#39;</span>\n<span class=\"nf\">toListOne</span> <span class=\"ow\">::</span> <span class=\"kt\">TreeF</span> <span class=\"p\">[</span><span class=\"kt\">FilePath</span><span class=\"p\">]</span> <span class=\"ow\">-&gt;</span> <span class=\"p\">[</span><span class=\"kt\">FilePath</span><span class=\"p\">]</span>\n<span class=\"nf\">toListOne</span> <span class=\"ow\">=</span> <span class=\"nf\">\\</span><span class=\"kr\">case</span>\n    <span class=\"kt\">Dir</span> <span class=\"n\">name</span> <span class=\"n\">sub</span> <span class=\"ow\">-&gt;</span> <span class=\"p\">(</span><span class=\"n\">name</span> <span class=\"o\">&lt;/&gt;</span><span class=\"p\">)</span> <span class=\"o\">&lt;$&gt;</span> <span class=\"n\">concat</span> <span class=\"n\">sub</span>\n    <span class=\"kt\">File</span> <span class=\"n\">name</span> <span class=\"ow\">-&gt;</span> <span class=\"n\">name</span> <span class=\"kt\">:</span> <span class=\"kt\">[]</span>\n\n<span class=\"c1\">-- | Load up recursive tree from a directory using effects</span>\n<span class=\"nf\">fromDir</span> <span class=\"ow\">::</span> <span class=\"kt\">FilePath</span> <span class=\"ow\">-&gt;</span> <span class=\"kt\">IO</span> <span class=\"kt\">Tree</span>\n<span class=\"nf\">fromDir</span> <span class=\"ow\">=</span> <span class=\"kt\">F</span><span class=\"o\">.</span><span class=\"n\">ana</span> <span class=\"n\">fromDirOne</span>\n\n<span class=\"c1\">-- | Writing &#39;fromDir&#39; complained that this intstance doesn&#39;t exist</span>\n<span class=\"c1\">--instance F.Corecursive (IO Tree) where</span>\n<span class=\"c1\">-- (can&#39;t write this instance yet because i don&#39;t have a &#39;Functor (Base (IO Tree))&#39;)</span>\n\n<span class=\"c1\">-- | Make a functor containing IO and a TreeF (since i can&#39;t make a @Functor (IO TreeF)@ directly, i use a newtype)</span>\n<span class=\"kr\">newtype</span> <span class=\"kt\">IOTreeF</span> <span class=\"n\">a</span> <span class=\"ow\">=</span> <span class=\"kt\">IOTreeF</span> <span class=\"p\">(</span><span class=\"kt\">IO</span> <span class=\"p\">(</span><span class=\"kt\">TreeF</span> <span class=\"n\">a</span><span class=\"p\">))</span>\n    <span class=\"kr\">deriving</span> <span class=\"kt\">Functor</span>\n\n<span class=\"c1\">-- | State that the weird functor i just made &#39;IOTreeF&#39; is the &#39;Base&#39; of  &#39;IO Tree&#39;</span>\n<span class=\"kr\">type</span> <span class=\"kr\">instance</span> <span class=\"kt\">F</span><span class=\"o\">.</span><span class=\"kt\">Base</span> <span class=\"p\">(</span><span class=\"kt\">IO</span> <span class=\"kt\">Tree</span><span class=\"p\">)</span> <span class=\"ow\">=</span> <span class=\"kt\">IOTreeF</span>\n\n<span class=\"c1\">-- | Okay, *now* we can write this instance...</span>\n<span class=\"kr\">instance</span> <span class=\"kt\">F</span><span class=\"o\">.</span><span class=\"kt\">Corecursive</span> <span class=\"p\">(</span><span class=\"kt\">IO</span> <span class=\"kt\">Tree</span><span class=\"p\">)</span> <span class=\"kr\">where</span>\n    <span class=\"c1\">-- | Embed is supposed to return the type in the instance head given its base,</span>\n    <span class=\"c1\">-- which i just defined it above /shrug/</span>\n    <span class=\"n\">embed</span> <span class=\"p\">(</span><span class=\"kt\">IOTreeF</span> <span class=\"n\">get</span><span class=\"p\">)</span> <span class=\"ow\">=</span> <span class=\"n\">get</span> <span class=\"o\">&gt;&gt;=</span> <span class=\"n\">sequence</span> <span class=\"o\">&gt;&gt;=</span> <span class=\"n\">return</span> <span class=\"o\">.</span> <span class=\"kt\">F</span><span class=\"o\">.</span><span class=\"kt\">Fix</span>\n    <span class=\"c1\">-- I have no idea what this function does.. I wrote it by using type-holes</span>\n    <span class=\"c1\">-- ...</span>\n    <span class=\"c1\">-- what is even code</span>\n\n<span class=\"c1\">-- | Important part of &#39;fromDir&#39; which I can finally write because I have that base thingy</span>\n<span class=\"nf\">fromDirOne</span> <span class=\"ow\">::</span> <span class=\"kt\">FilePath</span> <span class=\"ow\">-&gt;</span> <span class=\"kt\">F</span><span class=\"o\">.</span><span class=\"kt\">Base</span> <span class=\"p\">(</span><span class=\"kt\">IO</span> <span class=\"kt\">Tree</span><span class=\"p\">)</span> <span class=\"kt\">FilePath</span>\n<span class=\"nf\">fromDirOne</span> <span class=\"n\">path</span> <span class=\"ow\">=</span> <span class=\"kt\">IOTreeF</span> <span class=\"o\">$</span> <span class=\"kr\">do</span> <span class=\"c1\">-- Oh hey, magically this lets me hide IO inside the anamorphism</span>\n    <span class=\"n\">isF</span> <span class=\"ow\">&lt;-</span> <span class=\"kt\">D</span><span class=\"o\">.</span><span class=\"n\">doesFileExist</span> <span class=\"n\">path</span>\n    <span class=\"n\">isD</span> <span class=\"ow\">&lt;-</span> <span class=\"kt\">D</span><span class=\"o\">.</span><span class=\"n\">doesDirectoryExist</span> <span class=\"n\">path</span>\n    <span class=\"n\">isS</span> <span class=\"ow\">&lt;-</span> <span class=\"kt\">D</span><span class=\"o\">.</span><span class=\"n\">pathIsSymbolicLink</span> <span class=\"n\">path</span>\n    <span class=\"kr\">case</span> <span class=\"p\">(</span><span class=\"n\">isF</span><span class=\"p\">,</span> <span class=\"n\">isD</span><span class=\"p\">,</span> <span class=\"n\">isS</span><span class=\"p\">)</span> <span class=\"kr\">of</span>\n        <span class=\"p\">(</span><span class=\"kt\">True</span><span class=\"p\">,</span> <span class=\"kt\">False</span><span class=\"p\">,</span> <span class=\"kt\">False</span><span class=\"p\">)</span> <span class=\"ow\">-&gt;</span>\n            <span class=\"n\">return</span> <span class=\"o\">$</span> <span class=\"kt\">File</span>\n                <span class=\"p\">(</span><span class=\"kt\">P</span><span class=\"o\">.</span><span class=\"n\">takeFileName</span> <span class=\"n\">path</span><span class=\"p\">)</span>\n        <span class=\"p\">(</span><span class=\"kt\">False</span><span class=\"p\">,</span> <span class=\"kt\">True</span><span class=\"p\">,</span> <span class=\"kt\">False</span><span class=\"p\">)</span> <span class=\"ow\">-&gt;</span> <span class=\"kr\">do</span>\n            <span class=\"n\">content</span> <span class=\"ow\">&lt;-</span> <span class=\"kt\">D</span><span class=\"o\">.</span><span class=\"n\">listDirectory</span> <span class=\"n\">path</span> <span class=\"c1\">-- returns only immediate components</span>\n            <span class=\"n\">return</span> <span class=\"o\">$</span> <span class=\"kt\">Dir</span>\n                <span class=\"p\">(</span><span class=\"kt\">P</span><span class=\"o\">.</span><span class=\"n\">takeFileName</span> <span class=\"n\">path</span><span class=\"p\">)</span>\n                <span class=\"p\">(</span><span class=\"n\">fmap</span> <span class=\"p\">(</span><span class=\"n\">path</span> <span class=\"o\">&lt;/&gt;</span><span class=\"p\">)</span> <span class=\"n\">content</span><span class=\"p\">)</span>\n        <span class=\"kr\">_</span> <span class=\"ow\">-&gt;</span> <span class=\"ne\">error</span> <span class=\"o\">$</span> <span class=\"s\">&quot;something happened: &quot;</span> <span class=\"o\">++</span> <span class=\"n\">show</span> <span class=\"p\">(</span><span class=\"n\">isF</span><span class=\"p\">,</span> <span class=\"n\">isD</span><span class=\"p\">,</span> <span class=\"n\">isS</span><span class=\"p\">)</span>\n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 169194633,
            "is_me_message": false,
            "last_edit_timestamp": 1561692189,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "PLRedmond@gmail.com",
            "sender_full_name": "Patrick Redmond (W'14)",
            "sender_id": 5014,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "recursion-schemes package",
            "submessages": [],
            "timestamp": 1561691295,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/612c7c2a108d7850c62d1d2293a481aa42855408?x=x&version=2",
            "client": "website",
            "content": "<p>it works (ish) ... it doesn't handle errors and i'm unsure if i'm handling symbolic links the way i want to (by refusing to recurse on them) ..</p>\n<p>this way of coding is weird because i wrote a code that works but i mostly didn't design it</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 169195157,
            "is_me_message": false,
            "last_edit_timestamp": 1561737811,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "PLRedmond@gmail.com",
            "sender_full_name": "Patrick Redmond (W'14)",
            "sender_id": 5014,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "recursion-schemes package",
            "submessages": [],
            "timestamp": 1561692287,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/612c7c2a108d7850c62d1d2293a481aa42855408?x=x&version=2",
            "client": "ZulipMobile",
            "content": "<p>Could probably abstract IOTreeF our and generalize effectful anamorphism</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 169195675,
            "is_me_message": false,
            "last_edit_timestamp": 1561737782,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "PLRedmond@gmail.com",
            "sender_full_name": "Patrick Redmond (W'14)",
            "sender_id": 5014,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "recursion-schemes package",
            "submessages": [],
            "timestamp": 1561693303,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/57ad6b289d2b066f6497c2c7a542f246?d=identicon&version=1",
            "client": "website",
            "content": "<p>Thanks, <span class=\"user-mention\" data-user-id=\"100041\">@Vaibhav Sagar (he) (F1'16)</span> <span class=\"user-mention\" data-user-id=\"5014\">@Patrick Redmond (W'14)</span>.  Let me ping you a bit later on in July when I start up this project again in earnest.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 169284541,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "lindsey@composition.al",
            "sender_full_name": "Lindsey Kuper (she)",
            "sender_id": 2170,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "anyone want to pair on a tiny Servant project?",
            "submessages": [],
            "timestamp": 1561789479,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4d074af6cc341ef51b25bb2f738cdb11?d=identicon&version=1",
            "client": "website",
            "content": "<p>My talk is up: <a href=\"https://www.youtube.com/watch?v=nYBW4ExtNvo\" target=\"_blank\" title=\"https://www.youtube.com/watch?v=nYBW4ExtNvo\">Yes, IHaskell Can Do That!</a></p>\n<div class=\"youtube-video message_inline_image\"><a data-id=\"nYBW4ExtNvo\" href=\"https://www.youtube.com/watch?v=nYBW4ExtNvo\" target=\"_blank\" title=\"https://www.youtube.com/watch?v=nYBW4ExtNvo\"><img src=\"https://i.ytimg.com/vi/nYBW4ExtNvo/default.jpg\"></a></div>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 169316189,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f419",
                    "emoji_name": "octopus",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "debugsteven@gmail.com",
                        "full_name": "Steven J Haigh (they/he) (W1'18)",
                        "id": 134314
                    },
                    "user_id": 134314
                },
                {
                    "emoji_code": "1104",
                    "emoji_name": "haskell",
                    "reaction_type": "realm_emoji",
                    "user": {
                        "email": "debugsteven@gmail.com",
                        "full_name": "Steven J Haigh (they/he) (W1'18)",
                        "id": 134314
                    },
                    "user_id": 134314
                },
                {
                    "emoji_code": "1104",
                    "emoji_name": "haskell",
                    "reaction_type": "realm_emoji",
                    "user": {
                        "email": "jacquin.mininger@gmail.com",
                        "full_name": "Jacquin Mininger (F2'17)",
                        "id": 102005
                    },
                    "user_id": 102005
                },
                {
                    "emoji_code": "1f419",
                    "emoji_name": "octopus",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "ark.email@gmail.com",
                        "full_name": "Adam Bratschi-Kaye (he) (SP1'17)",
                        "id": 100532
                    },
                    "user_id": 100532
                },
                {
                    "emoji_code": "1104",
                    "emoji_name": "haskell",
                    "reaction_type": "realm_emoji",
                    "user": {
                        "email": "ark.email@gmail.com",
                        "full_name": "Adam Bratschi-Kaye (he) (SP1'17)",
                        "id": 100532
                    },
                    "user_id": 100532
                },
                {
                    "emoji_code": "1f419",
                    "emoji_name": "octopus",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "eha@posteo.de",
                        "full_name": "Eugene Ha (he) (S1'18)",
                        "id": 116366
                    },
                    "user_id": 116366
                },
                {
                    "emoji_code": "1f419",
                    "emoji_name": "octopus",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "shae.erisson@gmail.com",
                        "full_name": "Shae Matijs Erisson (he) (F1'19)",
                        "id": 221819
                    },
                    "user_id": 221819
                },
                {
                    "emoji_code": "1f419",
                    "emoji_name": "octopus",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "iain@mccoy.id.au",
                        "full_name": "Iain McCoy (he) (SP2'17)",
                        "id": 100806
                    },
                    "user_id": 100806
                }
            ],
            "recipient_id": 22667,
            "sender_email": "vaibhavsagar@gmail.com",
            "sender_full_name": "Vaibhav Sagar (he) (F1'16)",
            "sender_id": 100041,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "compose conf",
            "submessages": [],
            "timestamp": 1561850892,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/57ad6b289d2b066f6497c2c7a542f246?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-id=\"5014\">@Patrick Redmond (W'14)</span> <span class=\"user-mention\" data-user-id=\"100041\">@Vaibhav Sagar (he) (F1'16)</span> I'm back working on this project again, but the thing I'm having the most trouble with right now is Docker.  Is that something that either of you feel like helping with, or should I find someone else? :)</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 170499574,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "lindsey@composition.al",
            "sender_full_name": "Lindsey Kuper (she)",
            "sender_id": 2170,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "anyone want to pair on a tiny Servant project?",
            "submessages": [],
            "timestamp": 1562715417,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4d074af6cc341ef51b25bb2f738cdb11?d=identicon&version=1",
            "client": "ZulipMobile",
            "content": "<p><span class=\"user-mention\" data-user-id=\"2170\">@Lindsey Kuper (she)</span> I'm happy to help! What are you having trouble with?</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 170501165,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "vaibhavsagar@gmail.com",
            "sender_full_name": "Vaibhav Sagar (he) (F1'16)",
            "sender_id": 100041,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "anyone want to pair on a tiny Servant project?",
            "submessages": [],
            "timestamp": 1562717431,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/57ad6b289d2b066f6497c2c7a542f246?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-id=\"100041\">@Vaibhav Sagar (he) (F1'16)</span> I guess I just want some general advice on whether my Dockerfile is sensible.  My builds were taking forever, so I added a .dockerignore with .stack-work in it and that helped a lot, so I don't feel desperate for help.  But I wish I had a more principled understanding of what I'm doing with Docker.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 170501461,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "lindsey@composition.al",
            "sender_full_name": "Lindsey Kuper (she)",
            "sender_id": 2170,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "anyone want to pair on a tiny Servant project?",
            "submessages": [],
            "timestamp": 1562717774,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4d074af6cc341ef51b25bb2f738cdb11?d=identicon&version=1",
            "client": "ZulipMobile",
            "content": "<p>I'm happy to have a look, is it up on your repo?</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 170501593,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "vaibhavsagar@gmail.com",
            "sender_full_name": "Vaibhav Sagar (he) (F1'16)",
            "sender_id": 100041,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "anyone want to pair on a tiny Servant project?",
            "submessages": [],
            "timestamp": 1562717961,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/57ad6b289d2b066f6497c2c7a542f246?d=identicon&version=1",
            "client": "website",
            "content": "<p>Yep!  I'll DM you.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 170501789,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "lindsey@composition.al",
            "sender_full_name": "Lindsey Kuper (she)",
            "sender_id": 2170,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "anyone want to pair on a tiny Servant project?",
            "submessages": [],
            "timestamp": 1562718200,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/612c7c2a108d7850c62d1d2293a481aa42855408?x=x&version=2",
            "client": "website",
            "content": "<p>I'm also available if need be</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 170505404,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "PLRedmond@gmail.com",
            "sender_full_name": "Patrick Redmond (W'14)",
            "sender_id": 5014,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "anyone want to pair on a tiny Servant project?",
            "submessages": [],
            "timestamp": 1562723023,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/57ad6b289d2b066f6497c2c7a542f246?d=identicon&version=1",
            "client": "website",
            "content": "<p>OK, with my Docker question sort of answered, I'm back to having Haskell questions!  </p>\n<p>So I have this little Servant app, and now I'm trying to tweak it so that it runs on multiple containers.  There's the \"main\" container, which actually handles requests, and there are potentially many \"forwarding\" containers.  The forwarding containers forward client requests to the main container, get a response back from it, and then relay that response to the client.</p>\n<p>When I write it out like that, it sounds simple, but it's turning out to be a mess.  For context, the Servant API type and implementation look like this:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"c1\">-- Servant API type.  Three kinds of requests are possible: GET, PUT, and DELETE.</span>\n<span class=\"kr\">type</span> <span class=\"kt\">ServerAPI</span>\n  <span class=\"ow\">=</span>    <span class=\"s\">&quot;key-value-store&quot;</span> <span class=\"kt\">:&gt;</span> <span class=\"kt\">Capture</span> <span class=\"s\">&quot;key&quot;</span> <span class=\"kt\">String</span> <span class=\"kt\">:&gt;</span> <span class=\"kt\">Get</span> <span class=\"kt\">&#39;[JSON]</span> <span class=\"kt\">GetResponse</span>\n  <span class=\"kt\">:&lt;|&gt;</span> <span class=\"s\">&quot;key-value-store&quot;</span> <span class=\"kt\">:&gt;</span> <span class=\"kt\">Capture</span> <span class=\"s\">&quot;key&quot;</span> <span class=\"kt\">String</span> <span class=\"kt\">:&gt;</span> <span class=\"kt\">ReqBody</span> <span class=\"kt\">&#39;[JSON]</span> <span class=\"kt\">PutData</span> <span class=\"kt\">:&gt;</span> <span class=\"kt\">Put</span> <span class=\"kt\">&#39;[JSON]</span> <span class=\"kt\">PutResponse</span>\n  <span class=\"kt\">:&lt;|&gt;</span> <span class=\"s\">&quot;key-value-store&quot;</span> <span class=\"kt\">:&gt;</span> <span class=\"kt\">Capture</span> <span class=\"s\">&quot;key&quot;</span> <span class=\"kt\">String</span> <span class=\"kt\">:&gt;</span> <span class=\"kt\">Delete</span> <span class=\"kt\">&#39;[JSON]</span> <span class=\"kt\">DeleteResponse</span>\n\n<span class=\"c1\">-- Server implementation.</span>\n<span class=\"nf\">server</span> <span class=\"ow\">::</span> <span class=\"kt\">KVS</span> <span class=\"ow\">-&gt;</span> <span class=\"kt\">Maybe</span> <span class=\"kt\">String</span> <span class=\"ow\">-&gt;</span> <span class=\"kt\">Server</span> <span class=\"kt\">ServerAPI</span>\n<span class=\"nf\">server</span> <span class=\"n\">kvs</span> <span class=\"n\">maybeFA</span> <span class=\"ow\">=</span> <span class=\"n\">getValue</span> <span class=\"n\">kvs</span> <span class=\"n\">maybeFA</span>\n  <span class=\"kt\">:&lt;|&gt;</span> <span class=\"n\">putKVPair</span> <span class=\"n\">kvs</span> <span class=\"n\">maybeFA</span>\n  <span class=\"kt\">:&lt;|&gt;</span> <span class=\"n\">deleteKVPair</span> <span class=\"n\">kvs</span> <span class=\"n\">maybeFA</span>\n</pre></div>\n\n\n<p>The code for each server API function now has two cases, one for if it's the main instance and one for if it's the forwarding instance.  It looks like this. for <code>getValue</code>, for instance (<code>maybeFA</code> is an environment variable that's only set if we're a forwarding instance):</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"nf\">getValue</span> <span class=\"ow\">::</span> <span class=\"kt\">KVS</span> <span class=\"ow\">-&gt;</span> <span class=\"kt\">Maybe</span> <span class=\"kt\">String</span> <span class=\"ow\">-&gt;</span> <span class=\"kt\">String</span> <span class=\"ow\">-&gt;</span> <span class=\"kt\">Handler</span> <span class=\"kt\">GetResponse</span>\n<span class=\"nf\">getValue</span> <span class=\"n\">kvs</span> <span class=\"n\">maybeFA</span> <span class=\"n\">k</span> <span class=\"ow\">=</span>\n  <span class=\"c1\">-- Am I the main instance or the forwarding instance?</span>\n  <span class=\"kr\">case</span> <span class=\"n\">maybeFA</span> <span class=\"kr\">of</span>\n    <span class=\"kt\">Nothing</span> <span class=\"ow\">-&gt;</span> <span class=\"kr\">do</span>\n    <span class=\"c1\">-- I&#39;m the main instance, so execute the operation right here.</span>\n    <span class=\"c1\">-- ... original code here, not too bad ...</span>\n    <span class=\"kt\">Just</span> <span class=\"n\">forwardingAddress</span> <span class=\"ow\">-&gt;</span> <span class=\"kr\">do</span>\n    <span class=\"c1\">-- I&#39;m a forwarding instance, so forward this request elsewhere.</span>\n    <span class=\"c1\">-- ... HUGE MESS here ...</span>\n</pre></div>\n\n\n<p>The reason why it's a huge mess for the forwarding instance case is that, in order to make things match the Servant API type, I can't just send my request to the main instance, get the JSON response back, and give that back to the client.  I have to instead <code>decode</code> the JSON response string into a data structure, pick it apart, check for errors (all the same stuff that already happened on the main instance!), and assemble something of the appropriate type (in this case, <code>GetResponse</code>).  Which will, of course, then just be serialized right back out to a string by Servant!  It all seems really silly and I think I must be going about this in entirely the wrong way.  So, what do I do in Servant if I already have a canned piece of JSON (that I know is well-formed, because my Servant app on the main instance was what produced it) and I just want the client to have it?  It occurs to me that perhaps I shouldn't be handling the forwarding instances in Servant at all and instead have some, uh, \"middleware\" (in the sense that <a href=\"https://stackoverflow.com/questions/41753516/custom-json-errors-for-servant-server\" target=\"_blank\" title=\"https://stackoverflow.com/questions/41753516/custom-json-errors-for-servant-server\">these people</a> are using the word) that does it.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 171117286,
            "is_me_message": false,
            "last_edit_timestamp": 1563409424,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "lindsey@composition.al",
            "sender_full_name": "Lindsey Kuper (she)",
            "sender_id": 2170,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "anyone want to pair on a tiny Servant project?",
            "submessages": [],
            "timestamp": 1563397392,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/612c7c2a108d7850c62d1d2293a481aa42855408?x=x&version=2",
            "client": "website",
            "content": "<p>There's definitely a general class of software that does the kind of request forwarding that you seem to be implementing. I think they're called \"reverse proxies\". Haproxy and Varnish are tools that can do that for you. Maybe nginx too. We use haproxy and varnish at work, and I'm somewhat familiar with varnish's administration and configuration. If you want to go that route, let me know.</p>\n<p>That said, I think implementing it with servant shouldn't require much in the way of boilerplate. I'll see if I can get something that compiles and I'll paste it here.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 171130385,
            "is_me_message": false,
            "last_edit_timestamp": 1563412028,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "PLRedmond@gmail.com",
            "sender_full_name": "Patrick Redmond (W'14)",
            "sender_id": 5014,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "anyone want to pair on a tiny Servant project?",
            "submessages": [],
            "timestamp": 1563411883,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/612c7c2a108d7850c62d1d2293a481aa42855408?x=x&version=2",
            "client": "website",
            "content": "<p>Oh, are you familiar with Servant's ability to generate client functions? Maybe that's the missing piece that made your \"forwarding\" implementations messy. I'm implementing my example with this functionality, but here are the docs if that's helpful: <a href=\"https://docs.servant.dev/en/stable/tutorial/Client.html\" target=\"_blank\" title=\"https://docs.servant.dev/en/stable/tutorial/Client.html\">https://docs.servant.dev/en/stable/tutorial/Client.html</a></p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 171131976,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "PLRedmond@gmail.com",
            "sender_full_name": "Patrick Redmond (W'14)",
            "sender_id": 5014,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "anyone want to pair on a tiny Servant project?",
            "submessages": [],
            "timestamp": 1563414446,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/57ad6b289d2b066f6497c2c7a542f246?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-id=\"5014\">@Patrick Redmond (W'14)</span> Thanks!  In this case I really want to implement the request forwarding myself rather than use something like varnish; that is the point of this project -- the goal is to learn how to do it.  (If I just wanted to use off-the-shelf software, I would, like, just use Redis or something instead of implementing this KVS.)</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 171133275,
            "is_me_message": false,
            "last_edit_timestamp": 1563416929,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "lindsey@composition.al",
            "sender_full_name": "Lindsey Kuper (she)",
            "sender_id": 2170,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "anyone want to pair on a tiny Servant project?",
            "submessages": [],
            "timestamp": 1563416909,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/57ad6b289d2b066f6497c2c7a542f246?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-id=\"5014\">@Patrick Redmond (W'14)</span> Ooh, I didn't know about the client functions stuff.  This would be good for me to look at; thanks!</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 171133470,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "lindsey@composition.al",
            "sender_full_name": "Lindsey Kuper (she)",
            "sender_id": 2170,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "anyone want to pair on a tiny Servant project?",
            "submessages": [],
            "timestamp": 1563417314,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/612c7c2a108d7850c62d1d2293a481aa42855408?x=x&version=2",
            "client": "website",
            "content": "<p><a href=\"https://github.com/plredmond/kv\" target=\"_blank\" title=\"https://github.com/plredmond/kv\">https://github.com/plredmond/kv</a> <span class=\"user-mention\" data-user-id=\"2170\">@Lindsey Kuper (she)</span> here's a complete example</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 171136876,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "PLRedmond@gmail.com",
            "sender_full_name": "Patrick Redmond (W'14)",
            "sender_id": 5014,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "anyone want to pair on a tiny Servant project?",
            "submessages": [],
            "timestamp": 1563423347,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/612c7c2a108d7850c62d1d2293a481aa42855408?x=x&version=2",
            "client": "website",
            "content": "<p>i implemented the api you pasted above, with some guesses for the return types from each endpoint</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 171136931,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "PLRedmond@gmail.com",
            "sender_full_name": "Patrick Redmond (W'14)",
            "sender_id": 5014,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "anyone want to pair on a tiny Servant project?",
            "submessages": [],
            "timestamp": 1563423428,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/612c7c2a108d7850c62d1d2293a481aa42855408?x=x&version=2",
            "client": "website",
            "content": "<p>to implement the \"forwarding\" endpoints i used servant's derived client functions.. prior to generating the client functions i use <code>hoistClient</code> to change the monad the client functions run under.. i change the monad from <code>ClientM a</code> to <code>Handler a</code>, which allows the endpoint implementations to use the client functions directly</p>\n<p>(implementation is here: <a href=\"https://github.com/plredmond/kv/blob/74835667c41f22437f19abf01253abb9df1c8172/src/Forwarder.hs#L29-L48\" target=\"_blank\" title=\"https://github.com/plredmond/kv/blob/74835667c41f22437f19abf01253abb9df1c8172/src/Forwarder.hs#L29-L48\">https://github.com/plredmond/kv/blob/74835667c41f22437f19abf01253abb9df1c8172/src/Forwarder.hs#L29-L48</a>)</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 171136993,
            "is_me_message": false,
            "last_edit_timestamp": 1563423610,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "PLRedmond@gmail.com",
            "sender_full_name": "Patrick Redmond (W'14)",
            "sender_id": 5014,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "anyone want to pair on a tiny Servant project?",
            "submessages": [],
            "timestamp": 1563423546,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/612c7c2a108d7850c62d1d2293a481aa42855408?x=x&version=2",
            "client": "website",
            "content": "<p>there's also an example script in that repo that starts up three servers and makes some requests to demonstrate the behavior is as expected</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 171137054,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "PLRedmond@gmail.com",
            "sender_full_name": "Patrick Redmond (W'14)",
            "sender_id": 5014,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "anyone want to pair on a tiny Servant project?",
            "submessages": [],
            "timestamp": 1563423643,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/612c7c2a108d7850c62d1d2293a481aa42855408?x=x&version=2",
            "client": "website",
            "content": "<p>hope that helps!</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 171137055,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "PLRedmond@gmail.com",
            "sender_full_name": "Patrick Redmond (W'14)",
            "sender_id": 5014,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "anyone want to pair on a tiny Servant project?",
            "submessages": [],
            "timestamp": 1563423653,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/57ad6b289d2b066f6497c2c7a542f246?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-id=\"5014\">@Patrick Redmond (W'14)</span> Wow, thanks!  I'm going to have to look more closely at this tomorrow.  I don't think I'll be able to use your code directly, but it's nevertheless a big help and suggests that I should indeed have two separate things, analogous to your <code>Receiver</code> and <code>Forwarder</code>.  (One thing I know I'll have to do differently is that if, for instance, a forwarder is up and accepting requests but it finds that the receiver is down when it tries to forward them, it needs to respond to the client with a special \"the receiver is down!\" error message.)</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 171140992,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "lindsey@composition.al",
            "sender_full_name": "Lindsey Kuper (she)",
            "sender_id": 2170,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "anyone want to pair on a tiny Servant project?",
            "submessages": [],
            "timestamp": 1563430590,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/612c7c2a108d7850c62d1d2293a481aa42855408?x=x&version=2",
            "client": "website",
            "content": "<p>Ah yeah, so in the <code>src/Forwarder.hs</code> there's a <code>transformError</code> function which allows the forwarding server to respond with any errors thrown by the upstream server. The current implementation of <code>transformError</code> is very lazy; it <code>show</code>s the upstream error and wraps it in an <code>err500</code>. Among other things, this makes error messages very difficult to read and it means that error messages will be bigger (more wrapped layers) depending on the number of forwarders in the chain. I can help with handling the errors differently if you have questions.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 171163012,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "PLRedmond@gmail.com",
            "sender_full_name": "Patrick Redmond (W'14)",
            "sender_id": 5014,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "anyone want to pair on a tiny Servant project?",
            "submessages": [],
            "timestamp": 1563451629,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/57ad6b289d2b066f6497c2c7a542f246?d=identicon&version=1",
            "client": "website",
            "content": "<p>Yeah, so what I want to have happen is that the forwarder gets responses from the upstream server (there are various ones, including various kinds of 4xx errors) and somehow passes them directly to the client, unless the forwarder determines that the upstream server is down, in which case the forwarder should respond with status code 503 and a particular error message as the body.</p>\n<p>What I was trying to do before was have the forwarder make HTTP requests to the receiver (to use your terminology, which I like) and when it got a response, it was actually parsing the JSON to figure out what the response was and reconstruct the Servant response type that the receiver must have used internally, so that my functions could return the appropriate type (e.g., <code>GetResponse</code>), or short-circuit with an error response using Servant's <code>throwError</code>.  But that seems absurd.  I'm already getting from the receiver the exact thing that I want the client to get, so I want to skip reconstructing the <code>GetResponse</code>and just forward the thing to the client.  Does what I'm trying to do make sense?</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 171188339,
            "is_me_message": false,
            "last_edit_timestamp": 1563469541,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "lindsey@composition.al",
            "sender_full_name": "Lindsey Kuper (she)",
            "sender_id": 2170,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "anyone want to pair on a tiny Servant project?",
            "submessages": [],
            "timestamp": 1563468671,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4d074af6cc341ef51b25bb2f738cdb11?d=identicon&version=1",
            "client": "website",
            "content": "<p>How are you expecting to distinguish between a successful response and an error without parsing it?</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 171188554,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "vaibhavsagar@gmail.com",
            "sender_full_name": "Vaibhav Sagar (he) (F1'16)",
            "sender_id": 100041,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "anyone want to pair on a tiny Servant project?",
            "submessages": [],
            "timestamp": 1563468812,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/57ad6b289d2b066f6497c2c7a542f246?d=identicon&version=1",
            "client": "website",
            "content": "<p>If I get any response at all from the receiver, I just want to send it to the client; it makes no difference to me if it's an error response or a successful response.  If I don't get a response from the receiver, then I want to construct a 503 error and send it to the client.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 171189394,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "lindsey@composition.al",
            "sender_full_name": "Lindsey Kuper (she)",
            "sender_id": 2170,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "anyone want to pair on a tiny Servant project?",
            "submessages": [],
            "timestamp": 1563469413,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4d074af6cc341ef51b25bb2f738cdb11?d=identicon&version=1",
            "client": "website",
            "content": "<p>Servant handles the JSON parsing and serialising for you, which I think is usually what you want, but this is one case in which I don't think it fits your use case</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 171190087,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "vaibhavsagar@gmail.com",
            "sender_full_name": "Vaibhav Sagar (he) (F1'16)",
            "sender_id": 100041,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "anyone want to pair on a tiny Servant project?",
            "submessages": [],
            "timestamp": 1563469938,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/57ad6b289d2b066f6497c2c7a542f246?d=identicon&version=1",
            "client": "website",
            "content": "<p>Right, yeah, I definitely want to continue to use Servant to implement the receiver, but Servant kind of seems to be getting in my way for implementing the forwarder</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 171190168,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "lindsey@composition.al",
            "sender_full_name": "Lindsey Kuper (she)",
            "sender_id": 2170,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "anyone want to pair on a tiny Servant project?",
            "submessages": [],
            "timestamp": 1563469997,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4d074af6cc341ef51b25bb2f738cdb11?d=identicon&version=1",
            "client": "website",
            "content": "<p>If you worked with raw Aeson <code>Value</code>s for this particular endpoint, you might be able to avoid unnecessary parsing/serialising</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 171190195,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "vaibhavsagar@gmail.com",
            "sender_full_name": "Vaibhav Sagar (he) (F1'16)",
            "sender_id": 100041,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "anyone want to pair on a tiny Servant project?",
            "submessages": [],
            "timestamp": 1563470017,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4d074af6cc341ef51b25bb2f738cdb11?d=identicon&version=1",
            "client": "website",
            "content": "<p>(although it would still parse a raw bytestring to a <code>Value</code>)</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 171190266,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "vaibhavsagar@gmail.com",
            "sender_full_name": "Vaibhav Sagar (he) (F1'16)",
            "sender_id": 100041,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "anyone want to pair on a tiny Servant project?",
            "submessages": [],
            "timestamp": 1563470050,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4d074af6cc341ef51b25bb2f738cdb11?d=identicon&version=1",
            "client": "website",
            "content": "<p>I don't know if that helps <span aria-label=\"frown\" class=\"emoji emoji-1f641\" role=\"img\" title=\"frown\">:frown:</span></p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 171190282,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "vaibhavsagar@gmail.com",
            "sender_full_name": "Vaibhav Sagar (he) (F1'16)",
            "sender_id": 100041,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "anyone want to pair on a tiny Servant project?",
            "submessages": [],
            "timestamp": 1563470062,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/612c7c2a108d7850c62d1d2293a481aa42855408?x=x&version=2",
            "client": "website",
            "content": "<p>So, in the forwarder that I linked above, I use the raw servant-derived client functions as the endpoint implementations.. so each \"forwarder\" endpoint is one line.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 171190514,
            "is_me_message": false,
            "last_edit_timestamp": 1563470261,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "PLRedmond@gmail.com",
            "sender_full_name": "Patrick Redmond (W'14)",
            "sender_id": 5014,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "anyone want to pair on a tiny Servant project?",
            "submessages": [],
            "timestamp": 1563470255,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/612c7c2a108d7850c62d1d2293a481aa42855408?x=x&version=2",
            "client": "website",
            "content": "<p>Unfortunately, <code>Servant.ServantErr</code> isn't the same as <code>Servant.Client.ServantError</code>.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 171190615,
            "is_me_message": false,
            "last_edit_timestamp": 1563470333,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "PLRedmond@gmail.com",
            "sender_full_name": "Patrick Redmond (W'14)",
            "sender_id": 5014,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "anyone want to pair on a tiny Servant project?",
            "submessages": [],
            "timestamp": 1563470317,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/612c7c2a108d7850c62d1d2293a481aa42855408?x=x&version=2",
            "client": "website",
            "content": "<p><code>Servant.ServantErr</code> is the type returned by endpoints to indicate a failure in a server.<br>\n<code>Servant.Client.ServantError</code> is the type that executing a client function against a server may return to indicate a failure.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 171190698,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "PLRedmond@gmail.com",
            "sender_full_name": "Patrick Redmond (W'14)",
            "sender_id": 5014,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "anyone want to pair on a tiny Servant project?",
            "submessages": [],
            "timestamp": 1563470388,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/612c7c2a108d7850c62d1d2293a481aa42855408?x=x&version=2",
            "client": "website",
            "content": "<p>So if you're using servant's derived client functions in the \"forwarder\" to talk to an upstream server, it's unavoidable that you'll have to do some translation of <code>Servant.Client.ServantError</code> to <code>Servant.ServantErr</code>.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 171190810,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "PLRedmond@gmail.com",
            "sender_full_name": "Patrick Redmond (W'14)",
            "sender_id": 5014,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "anyone want to pair on a tiny Servant project?",
            "submessages": [],
            "timestamp": 1563470463,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/612c7c2a108d7850c62d1d2293a481aa42855408?x=x&version=2",
            "client": "website",
            "content": "<p>Since, as V points out, servant takes care of all of the json parsing and serialization, I think it's easier (less code) to use servant's client functions and define an appropriate error transformation.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 171190864,
            "is_me_message": false,
            "last_edit_timestamp": 1563470540,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "PLRedmond@gmail.com",
            "sender_full_name": "Patrick Redmond (W'14)",
            "sender_id": 5014,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "anyone want to pair on a tiny Servant project?",
            "submessages": [],
            "timestamp": 1563470512,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/612c7c2a108d7850c62d1d2293a481aa42855408?x=x&version=2",
            "client": "website",
            "content": "<p>I'll try to update the repo to show what I mean.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 171190941,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "PLRedmond@gmail.com",
            "sender_full_name": "Patrick Redmond (W'14)",
            "sender_id": 5014,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "anyone want to pair on a tiny Servant project?",
            "submessages": [],
            "timestamp": 1563470547,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/612c7c2a108d7850c62d1d2293a481aa42855408?x=x&version=2",
            "client": "website",
            "content": "<p>But, if what you want is the \"exact\" response from the upstream server to be returned downstream.. then maybe you would be better off using a lower-level request, so that you can just copy the bytes from upstream to the downstream... This kind of defeats the point of using servant for the \"forwarder\" though.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 171191334,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "PLRedmond@gmail.com",
            "sender_full_name": "Patrick Redmond (W'14)",
            "sender_id": 5014,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "anyone want to pair on a tiny Servant project?",
            "submessages": [],
            "timestamp": 1563470864,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/57ad6b289d2b066f6497c2c7a542f246?d=identicon&version=1",
            "client": "website",
            "content": "<p>Yeah, I'm not convinced that using Servant's derived client functions is actually the right thing for what I want to do.  And yes, I was beginning to come to the conclusion that Servant is getting in my way for the forwarder, but I don't really know how to implement a web service without it!</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 171191507,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "lindsey@composition.al",
            "sender_full_name": "Lindsey Kuper (she)",
            "sender_id": 2170,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "anyone want to pair on a tiny Servant project?",
            "submessages": [],
            "timestamp": 1563470992,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/57ad6b289d2b066f6497c2c7a542f246?d=identicon&version=1",
            "client": "website",
            "content": "<p>(this Servant KVS is the first \"web service\" I've implemented, ever, in any language)</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 171191585,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "lindsey@composition.al",
            "sender_full_name": "Lindsey Kuper (she)",
            "sender_id": 2170,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "anyone want to pair on a tiny Servant project?",
            "submessages": [],
            "timestamp": 1563471028,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/57ad6b289d2b066f6497c2c7a542f246?d=identicon&version=1",
            "client": "website",
            "content": "<p>I think I could still use Servant to write the forwarder, but I'm imagining that I would manually write an HTTP call to pass the request to the receiver, and if it fails because the receiver is down, return the 503 I mentioned in the normal Servant way with <code>err503</code> or whatever.  I don't know how to do the \"copy the bytes from upstream to the downstream\" part, though -- that's the part that is causing me so much trouble.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 171191806,
            "is_me_message": false,
            "last_edit_timestamp": 1563471216,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "lindsey@composition.al",
            "sender_full_name": "Lindsey Kuper (she)",
            "sender_id": 2170,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "anyone want to pair on a tiny Servant project?",
            "submessages": [],
            "timestamp": 1563471204,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4d074af6cc341ef51b25bb2f738cdb11?d=identicon&version=1",
            "client": "website",
            "content": "<p>alternatives that come to mind are <a href=\"http://hackage.haskell.org/package/scotty\" target=\"_blank\" title=\"http://hackage.haskell.org/package/scotty\"><code>scotty</code></a>, which is a lot like Flask, and <a href=\"http://hackage.haskell.org/package/snap\" target=\"_blank\" title=\"http://hackage.haskell.org/package/snap\"><code>snap</code></a>, which does a lot less for you than Servant does</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 171191847,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "vaibhavsagar@gmail.com",
            "sender_full_name": "Vaibhav Sagar (he) (F1'16)",
            "sender_id": 100041,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "anyone want to pair on a tiny Servant project?",
            "submessages": [],
            "timestamp": 1563471236,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/612c7c2a108d7850c62d1d2293a481aa42855408?x=x&version=2",
            "client": "website",
            "content": "<p>Before considering another framework, which is going to have its own abstractions that might get in the way, I'd recommend using the lower-level interfaces provided by <code>Warp</code> to just \"copy the bytes\" as it were.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 171191917,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "PLRedmond@gmail.com",
            "sender_full_name": "Patrick Redmond (W'14)",
            "sender_id": 5014,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "anyone want to pair on a tiny Servant project?",
            "submessages": [],
            "timestamp": 1563471288,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/57ad6b289d2b066f6497c2c7a542f246?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-id=\"5014\">@Patrick Redmond (W'14)</span> Yeah, that's closer to what I had in mind.  Especially because I want to keep using Servant for the receiver.  I like it fine for that.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 171191964,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "lindsey@composition.al",
            "sender_full_name": "Lindsey Kuper (she)",
            "sender_id": 2170,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "anyone want to pair on a tiny Servant project?",
            "submessages": [],
            "timestamp": 1563471324,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/612c7c2a108d7850c62d1d2293a481aa42855408?x=x&version=2",
            "client": "website",
            "content": "<p>Warp sits underneath Servant, and so you can use it like an escape hatch when Servant is in the way.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 171191971,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "PLRedmond@gmail.com",
            "sender_full_name": "Patrick Redmond (W'14)",
            "sender_id": 5014,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "anyone want to pair on a tiny Servant project?",
            "submessages": [],
            "timestamp": 1563471334,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4d074af6cc341ef51b25bb2f738cdb11?d=identicon&version=1",
            "client": "website",
            "content": "<p>have you looked at <a href=\"https://functor.tokyo/blog/2017-10-15-servant-rawm\" target=\"_blank\" title=\"https://functor.tokyo/blog/2017-10-15-servant-rawm\">https://functor.tokyo/blog/2017-10-15-servant-rawm</a>?</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 171191979,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "vaibhavsagar@gmail.com",
            "sender_full_name": "Vaibhav Sagar (he) (F1'16)",
            "sender_id": 100041,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "anyone want to pair on a tiny Servant project?",
            "submessages": [],
            "timestamp": 1563471343,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/612c7c2a108d7850c62d1d2293a481aa42855408?x=x&version=2",
            "client": "website",
            "content": "<p>I think that's actually built into servant. There's no need for another package. <a href=\"https://hackage.haskell.org/package/servant-0.16.1/docs/Servant-API-Raw.html\" target=\"_blank\" title=\"https://hackage.haskell.org/package/servant-0.16.1/docs/Servant-API-Raw.html\">https://hackage.haskell.org/package/servant-0.16.1/docs/Servant-API-Raw.html</a></p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 171192045,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "+1",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "vaibhavsagar@gmail.com",
                        "full_name": "Vaibhav Sagar (he) (F1'16)",
                        "id": 100041
                    },
                    "user_id": 100041
                }
            ],
            "recipient_id": 22667,
            "sender_email": "PLRedmond@gmail.com",
            "sender_full_name": "Patrick Redmond (W'14)",
            "sender_id": 5014,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "anyone want to pair on a tiny Servant project?",
            "submessages": [],
            "timestamp": 1563471389,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4d074af6cc341ef51b25bb2f738cdb11?d=identicon&version=1",
            "client": "website",
            "content": "<p>I see there is also <a href=\"https://hackage.haskell.org/package/servant-0.16.1/docs/Servant-API-Raw.html#t:Raw\" target=\"_blank\" title=\"https://hackage.haskell.org/package/servant-0.16.1/docs/Servant-API-Raw.html#t:Raw\">https://hackage.haskell.org/package/servant-0.16.1/docs/Servant-API-Raw.html#t:Raw</a></p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 171192046,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f609",
                    "emoji_name": "wink",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "PLRedmond@gmail.com",
                        "full_name": "Patrick Redmond (W'14)",
                        "id": 5014
                    },
                    "user_id": 5014
                }
            ],
            "recipient_id": 22667,
            "sender_email": "vaibhavsagar@gmail.com",
            "sender_full_name": "Vaibhav Sagar (he) (F1'16)",
            "sender_id": 100041,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "anyone want to pair on a tiny Servant project?",
            "submessages": [],
            "timestamp": 1563471391,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/57ad6b289d2b066f6497c2c7a542f246?d=identicon&version=1",
            "client": "website",
            "content": "<p>Yeah, I just found the same thing! <a href=\"https://haskell-servant.readthedocs.io/en/stable/tutorial/ApiType.html#interoperability-with-wai-raw\" target=\"_blank\" title=\"https://haskell-servant.readthedocs.io/en/stable/tutorial/ApiType.html#interoperability-with-wai-raw\">https://haskell-servant.readthedocs.io/en/stable/tutorial/ApiType.html#interoperability-with-wai-raw</a></p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 171192124,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "lindsey@composition.al",
            "sender_full_name": "Lindsey Kuper (she)",
            "sender_id": 2170,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "anyone want to pair on a tiny Servant project?",
            "submessages": [],
            "timestamp": 1563471470,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/57ad6b289d2b066f6497c2c7a542f246?d=identicon&version=1",
            "client": "website",
            "content": "<p>I'm confused about how exactly I would use this, though.  Do I want to define a different Servant API for the forwarder that has <code>Raw</code> for all the response types?</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 171192727,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "lindsey@composition.al",
            "sender_full_name": "Lindsey Kuper (she)",
            "sender_id": 2170,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "anyone want to pair on a tiny Servant project?",
            "submessages": [],
            "timestamp": 1563471905,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/57ad6b289d2b066f6497c2c7a542f246?d=identicon&version=1",
            "client": "website",
            "content": "<p>Another thing I could do: in the <code>main</code> function of my app, I check to see whether I'm the receiver or the forwarder.  If I'm the receiver, I run my existing Servant app; if I'm the forwarder, then I run a WAI app that I'll write.  In this case I don't see why I need the Servant-escape-hatch-to-WAI at all.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 171192836,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "lindsey@composition.al",
            "sender_full_name": "Lindsey Kuper (she)",
            "sender_id": 2170,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "anyone want to pair on a tiny Servant project?",
            "submessages": [],
            "timestamp": 1563471977,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/612c7c2a108d7850c62d1d2293a481aa42855408?x=x&version=2",
            "client": "website",
            "content": "<p>There's a couple approaches you could take, but they're all a little wonky because we have two conflicting desires:</p>\n<ul>\n<li>We want to implement the API specified in servant.</li>\n<li>We want to fulfill that API without using survant.</li>\n</ul>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 171192846,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "PLRedmond@gmail.com",
            "sender_full_name": "Patrick Redmond (W'14)",
            "sender_id": 5014,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "anyone want to pair on a tiny Servant project?",
            "submessages": [],
            "timestamp": 1563471996,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/612c7c2a108d7850c62d1d2293a481aa42855408?x=x&version=2",
            "client": "website",
            "content": "<p>Yeah, so, you're right: One approach is to ditch servant and just have a wai application that takes any request and forwards it upstream byte for byte. The problem there is the \"any request\" part means that it forwards requests that don't even match your Servant-defined API.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 171192913,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "PLRedmond@gmail.com",
            "sender_full_name": "Patrick Redmond (W'14)",
            "sender_id": 5014,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "anyone want to pair on a tiny Servant project?",
            "submessages": [],
            "timestamp": 1563472061,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/57ad6b289d2b066f6497c2c7a542f246?d=identicon&version=1",
            "client": "website",
            "content": "<p>That doesn't seem like such a big problem, though -- if the Servant app receives a request that it can't handle, then it will just produce an error response and I'll send the error response back to the client.  It would be the same behavior that I'd get had the request been made directly to the receiver.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 171193227,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "lindsey@composition.al",
            "sender_full_name": "Lindsey Kuper (she)",
            "sender_id": 2170,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "anyone want to pair on a tiny Servant project?",
            "submessages": [],
            "timestamp": 1563472257,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/612c7c2a108d7850c62d1d2293a481aa42855408?x=x&version=2",
            "client": "website",
            "content": "<p>Yes, if that's satisfactory, then a simple wai application should fulfill your requirements.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 171193553,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "PLRedmond@gmail.com",
            "sender_full_name": "Patrick Redmond (W'14)",
            "sender_id": 5014,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "anyone want to pair on a tiny Servant project?",
            "submessages": [],
            "timestamp": 1563472472,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/612c7c2a108d7850c62d1d2293a481aa42855408?x=x&version=2",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-id=\"2170\">@Lindsey Kuper (she)</span> this diff shows how you can do what i described above; handle the error in servant and convert a servant client error to a servant server error... <a href=\"https://github.com/plredmond/kv/commit/e94e1aa808a69838e41808e0e64ba15ff9d39f61\" target=\"_blank\" title=\"https://github.com/plredmond/kv/commit/e94e1aa808a69838e41808e0e64ba15ff9d39f61\">https://github.com/plredmond/kv/commit/e94e1aa808a69838e41808e0e64ba15ff9d39f61</a></p>\n<p>it uses more CPU but is \"cleaner\" in some sense (it doesn't accept and forward arbitrary requests)</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 171194427,
            "is_me_message": false,
            "last_edit_timestamp": 1563473476,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "PLRedmond@gmail.com",
            "sender_full_name": "Patrick Redmond (W'14)",
            "sender_id": 5014,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "anyone want to pair on a tiny Servant project?",
            "submessages": [],
            "timestamp": 1563473061,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/612c7c2a108d7850c62d1d2293a481aa42855408?x=x&version=2",
            "client": "website",
            "content": "<p>I'll try to make an example of a wai application that copies bytes.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 171194451,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "PLRedmond@gmail.com",
            "sender_full_name": "Patrick Redmond (W'14)",
            "sender_id": 5014,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "anyone want to pair on a tiny Servant project?",
            "submessages": [],
            "timestamp": 1563473078,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/612c7c2a108d7850c62d1d2293a481aa42855408?x=x&version=2",
            "client": "website",
            "content": "<p>Battery is dying, but I've got an example almost worked. I'll complete it after I get back to home and and can charge up.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 171197746,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "PLRedmond@gmail.com",
            "sender_full_name": "Patrick Redmond (W'14)",
            "sender_id": 5014,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "anyone want to pair on a tiny Servant project?",
            "submessages": [],
            "timestamp": 1563475364,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/57ad6b289d2b066f6497c2c7a542f246?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-id=\"5014\">@Patrick Redmond (W'14)</span> Thanks, I really appreciate you going to all this work on my behalf!</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 171204863,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "lindsey@composition.al",
            "sender_full_name": "Lindsey Kuper (she)",
            "sender_id": 2170,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "anyone want to pair on a tiny Servant project?",
            "submessages": [],
            "timestamp": 1563480612,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/612c7c2a108d7850c62d1d2293a481aa42855408?x=x&version=2",
            "client": "website",
            "content": "<p>No prob! Having somebody give me requirements and then implementing them in haskell has been like my dream for five or more years now. I took the day off work because I didn't get enough sleep, and this is great fun. :))</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 171206641,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "PLRedmond@gmail.com",
            "sender_full_name": "Patrick Redmond (W'14)",
            "sender_id": 5014,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "anyone want to pair on a tiny Servant project?",
            "submessages": [],
            "timestamp": 1563482011,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/612c7c2a108d7850c62d1d2293a481aa42855408?x=x&version=2",
            "client": "website",
            "content": "<p>Here's the diff for the \"bytes copying\" forwarder <a href=\"https://github.com/plredmond/kv/commit/de0b9119313d91f48e7da6bc48fd0393faa524cc\" target=\"_blank\" title=\"https://github.com/plredmond/kv/commit/de0b9119313d91f48e7da6bc48fd0393faa524cc\">https://github.com/plredmond/kv/commit/de0b9119313d91f48e7da6bc48fd0393faa524cc</a></p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 171206650,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "PLRedmond@gmail.com",
            "sender_full_name": "Patrick Redmond (W'14)",
            "sender_id": 5014,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "anyone want to pair on a tiny Servant project?",
            "submessages": [],
            "timestamp": 1563482022,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/612c7c2a108d7850c62d1d2293a481aa42855408?x=x&version=2",
            "client": "website",
            "content": "<p>It converts a <code>Network.Wai.Request</code> to a <code>Network.HTTP.Client.Request</code>, executes it, and then converts the resulting <code>Network.HTTP.Client.Response</code> to a <code>Network.Wai.Response</code>. </p>\n<p>If I had access to the underlying sockets, it might be simpler. Maybe I should try another implementation with the <code>Network.Socket</code> library.. <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 171206778,
            "is_me_message": false,
            "last_edit_timestamp": 1563482217,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "PLRedmond@gmail.com",
            "sender_full_name": "Patrick Redmond (W'14)",
            "sender_id": 5014,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "anyone want to pair on a tiny Servant project?",
            "submessages": [],
            "timestamp": 1563482150,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/612c7c2a108d7850c62d1d2293a481aa42855408?x=x&version=2",
            "client": "website",
            "content": "<p>I'm making a small diff to clean up the naming.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 171207205,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "PLRedmond@gmail.com",
            "sender_full_name": "Patrick Redmond (W'14)",
            "sender_id": 5014,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "anyone want to pair on a tiny Servant project?",
            "submessages": [],
            "timestamp": 1563482503,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/57ad6b289d2b066f6497c2c7a542f246?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-id=\"5014\">@Patrick Redmond (W'14)</span> Thanks again!  I have questions and I'm gonna take this to DM...</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 171207208,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "lindsey@composition.al",
            "sender_full_name": "Lindsey Kuper (she)",
            "sender_id": 2170,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "anyone want to pair on a tiny Servant project?",
            "submessages": [],
            "timestamp": 1563482512,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/612c7c2a108d7850c62d1d2293a481aa42855408?x=x&version=2",
            "client": "website",
            "content": "<p>ok, glad to help!</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 171207443,
            "is_me_message": false,
            "last_edit_timestamp": 1563482847,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "PLRedmond@gmail.com",
            "sender_full_name": "Patrick Redmond (W'14)",
            "sender_id": 5014,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "anyone want to pair on a tiny Servant project?",
            "submessages": [],
            "timestamp": 1563482695,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/8776bd2d19cdb1399c4e9589d9397d57290e5729?x=x&version=2",
            "client": "website",
            "content": "<p>I've never gotten started with ghcid, it seems to be a ghci that automatically reloads modules.<br>\nIs there something related for webapps?<br>\nI'm using scotty for a simple webserver but I'd like to kill the existing process and re-run cabal new-run when my file is saved.<br>\nAny useful tools for that?</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 174251903,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "shae.erisson@gmail.com",
            "sender_full_name": "Shae Matijs Erisson (he) (F1'19)",
            "sender_id": 221819,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "ghcid for webapps?",
            "submessages": [],
            "timestamp": 1566927689,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4d074af6cc341ef51b25bb2f738cdb11?d=identicon&version=1",
            "client": "website",
            "content": "<p><code>ghcid</code> can do that!</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 174253114,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "vaibhavsagar@gmail.com",
            "sender_full_name": "Vaibhav Sagar (he) (F1'16)",
            "sender_id": 100041,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "ghcid for webapps?",
            "submessages": [],
            "timestamp": 1566928523,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4d074af6cc341ef51b25bb2f738cdb11?d=identicon&version=1",
            "client": "website",
            "content": "<p>e.g. <a href=\"https://binarin.ru/post/auto-reload-threepenny-gui/\" target=\"_blank\" title=\"https://binarin.ru/post/auto-reload-threepenny-gui/\">https://binarin.ru/post/auto-reload-threepenny-gui/</a></p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 174253199,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "vaibhavsagar@gmail.com",
            "sender_full_name": "Vaibhav Sagar (he) (F1'16)",
            "sender_id": 100041,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "ghcid for webapps?",
            "submessages": [],
            "timestamp": 1566928566,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4d074af6cc341ef51b25bb2f738cdb11?d=identicon&version=1",
            "client": "website",
            "content": "<p>tl;dr use the <code>--test</code> (now also aliased to <code>--run</code>) flag to provide a function name that you want to run upon successful compilation</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 174253742,
            "is_me_message": false,
            "last_edit_timestamp": 1566928985,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "vaibhavsagar@gmail.com",
            "sender_full_name": "Vaibhav Sagar (he) (F1'16)",
            "sender_id": 100041,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "ghcid for webapps?",
            "submessages": [],
            "timestamp": 1566928977,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/fe405bbed728ab0b6fcef148e8c65a8b?d=identicon&version=1",
            "client": "website",
            "content": "<p>There's also <a href=\"https://github.com/sol/reserve\" target=\"_blank\" title=\"https://github.com/sol/reserve\">https://github.com/sol/reserve</a>, which is specifically meant for web applications. But I'm not sure whether it does anything better/different than <code>ghcid</code>.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 174269033,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "soenkehahn@gmail.com",
            "sender_full_name": "S\u00f6nke Hahn (he) (S1'18)",
            "sender_id": 116583,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "ghcid for webapps?",
            "submessages": [],
            "timestamp": 1566938108,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/612c7c2a108d7850c62d1d2293a481aa42855408?x=x&version=2",
            "client": "website",
            "content": "<p>i use <code>entr</code> for this .. something like <code>git ls-files | entr -cr bash -c 'stack build &amp;&amp; stack run my-executable'</code></p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 174989947,
            "is_me_message": false,
            "last_edit_timestamp": 1567700458,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "PLRedmond@gmail.com",
            "sender_full_name": "Patrick Redmond (W'14)",
            "sender_id": 5014,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "ghcid for webapps?",
            "submessages": [],
            "timestamp": 1567700308,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/612c7c2a108d7850c62d1d2293a481aa42855408?x=x&version=2",
            "client": "website",
            "content": "<p>entr takes a list of files to watch on stdin, and runs a command whenever any file changes</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 174990005,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "PLRedmond@gmail.com",
            "sender_full_name": "Patrick Redmond (W'14)",
            "sender_id": 5014,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "ghcid for webapps?",
            "submessages": [],
            "timestamp": 1567700364,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/8776bd2d19cdb1399c4e9589d9397d57290e5729?x=x&version=2",
            "client": "website",
            "content": "<p>I ended up using <code>ls src/*.hs *cabal static/* |entr -c -r cabal new-run</code></p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 174990025,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f389",
                    "emoji_name": "tada",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "PLRedmond@gmail.com",
                        "full_name": "Patrick Redmond (W'14)",
                        "id": 5014
                    },
                    "user_id": 5014
                }
            ],
            "recipient_id": 22667,
            "sender_email": "shae.erisson@gmail.com",
            "sender_full_name": "Shae Matijs Erisson (he) (F1'19)",
            "sender_id": 221819,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "ghcid for webapps?",
            "submessages": [],
            "timestamp": 1567700379,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/612c7c2a108d7850c62d1d2293a481aa42855408?x=x&version=2",
            "client": "website",
            "content": "<p>yeah! :)</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 174990034,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "PLRedmond@gmail.com",
            "sender_full_name": "Patrick Redmond (W'14)",
            "sender_id": 5014,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "ghcid for webapps?",
            "submessages": [],
            "timestamp": 1567700388,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/8776bd2d19cdb1399c4e9589d9397d57290e5729?x=x&version=2",
            "client": "website",
            "content": "<p>I like your idea of using git ls-files, that's an improvement over what I figured out.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 174990109,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f601",
                    "emoji_name": "grinning_face_with_smiling_eyes",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "PLRedmond@gmail.com",
                        "full_name": "Patrick Redmond (W'14)",
                        "id": 5014
                    },
                    "user_id": 5014
                }
            ],
            "recipient_id": 22667,
            "sender_email": "shae.erisson@gmail.com",
            "sender_full_name": "Shae Matijs Erisson (he) (F1'19)",
            "sender_id": 221819,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "ghcid for webapps?",
            "submessages": [],
            "timestamp": 1567700412,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/612c7c2a108d7850c62d1d2293a481aa42855408?x=x&version=2",
            "client": "website",
            "content": "<p>i like entr because i can use it with all the things ... haskell, go, pandoc, dotgraph</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 174990112,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "PLRedmond@gmail.com",
            "sender_full_name": "Patrick Redmond (W'14)",
            "sender_id": 5014,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "ghcid for webapps?",
            "submessages": [],
            "timestamp": 1567700414,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/fe405bbed728ab0b6fcef148e8c65a8b?d=identicon&version=1",
            "client": "website",
            "content": "<p><code>ghcid</code> and <code>reserve</code> will run the web application via <code>ghci</code>, the haskell interpreter. While <code>stack run</code> and <code>cabal new-run</code> (as far as I know) will generate native bytecode and link a new executable and then run that. Which will make reloading your web app much slower. Especially the link times can get pretty bad when using a lot of dependencies in my experience.</p>\n<p>I love <code>entr</code> though. :)</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 175001061,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "soenkehahn@gmail.com",
            "sender_full_name": "S\u00f6nke Hahn (he) (S1'18)",
            "sender_id": 116583,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "ghcid for webapps?",
            "submessages": [],
            "timestamp": 1567707512,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/5c76b2c555785c8a87577bc81fe538bc03a8b463?x=x&version=2",
            "client": "website",
            "content": "<p>Hello. New to #haskell, and also Haskell. How do I parse a string into an Int? Do I use <code>read</code>? I get an exception when I do. <code>Prelude.read: no parse</code></p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 175361471,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "c@chirag.io",
            "sender_full_name": "Chirag Dav\u00e9 (he) (F1'19)",
            "sender_id": 234049,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "parse string to integer",
            "submessages": [],
            "timestamp": 1568137879,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/ff123cc045318f1a4b52b2bbe9926d27cf04bbf5?x=x&version=2",
            "client": "ZulipElectron",
            "content": "<p><code>read</code> is the right function to use. <code>Prelude.read: no parse</code> means the string you are trying to parse into an Int is not formatted correctly</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 175361677,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "lthyde@gmail.com",
            "sender_full_name": "Meg Koch-Hyde (she/they) (F1'19)",
            "sender_id": 234280,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "parse string to integer",
            "submessages": [],
            "timestamp": 1568138033,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/5c76b2c555785c8a87577bc81fe538bc03a8b463?x=x&version=2",
            "client": "website",
            "content": "<p>Ahh, you're right. My strings are formatted as \"+123\" or \"-123\" and that isn't OK according to read. So I would have to read the sign, and remove it from the string to decide whether or not to negate it or not. </p>\n<p>does this make sense, or is there are more idiomatic approach?</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 175361830,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "c@chirag.io",
            "sender_full_name": "Chirag Dav\u00e9 (he) (F1'19)",
            "sender_id": 234049,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "parse string to integer",
            "submessages": [],
            "timestamp": 1568138139,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/5c76b2c555785c8a87577bc81fe538bc03a8b463?x=x&version=2",
            "client": "website",
            "content": "<p>(thanks <span class=\"user-mention\" data-user-id=\"234280\">@Louis Hyde (he/they) (F1'19)</span> )</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 175361854,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "c@chirag.io",
            "sender_full_name": "Chirag Dav\u00e9 (he) (F1'19)",
            "sender_id": 234049,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "parse string to integer",
            "submessages": [],
            "timestamp": 1568138154,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/edf8c8e78f184bdc167fe0575aa89ba3?d=identicon&version=1",
            "client": "website",
            "content": "<p>read is a partial function - <code>read \"1\" :: Bool</code> throws an exception. a more idiomatic approach is to use a parser, which would represent the error as data.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 175362231,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "maxhallinan@gmail.com",
            "sender_full_name": "Max Hallinan (he/they) (W1'19)",
            "sender_id": 233917,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "parse string to integer",
            "submessages": [],
            "timestamp": 1568138389,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/edf8c8e78f184bdc167fe0575aa89ba3?d=identicon&version=1",
            "client": "website",
            "content": "<p>oh i see you already ran into the exceptions. a big part of the game you play when you write haskell is expressing all possible outcomes of calling a function in the type of the function. partial functions are not completely typed and are really to be avoided because they can easily blow up your program.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 175362427,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "maxhallinan@gmail.com",
            "sender_full_name": "Max Hallinan (he/they) (W1'19)",
            "sender_id": 233917,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "parse string to integer",
            "submessages": [],
            "timestamp": 1568138484,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/ff123cc045318f1a4b52b2bbe9926d27cf04bbf5?x=x&version=2",
            "client": "ZulipElectron",
            "content": "<p><a href=\"https://hackage.haskell.org/package/base-4.12.0.0/docs/Text-Read.html#v:readMaybe\" target=\"_blank\" title=\"https://hackage.haskell.org/package/base-4.12.0.0/docs/Text-Read.html#v:readMaybe\"><code>readMaybe</code></a> from the <code>Read.Text</code> module is probably the simplest of the functions that implement <code>read</code>'s behavior without the risk of generating an exception.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 175363540,
            "is_me_message": false,
            "last_edit_timestamp": 1568139182,
            "reactions": [
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "+1",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "maxhallinan@gmail.com",
                        "full_name": "Max Hallinan (he/they) (W1'19)",
                        "id": 233917
                    },
                    "user_id": 233917
                }
            ],
            "recipient_id": 22667,
            "sender_email": "lthyde@gmail.com",
            "sender_full_name": "Meg Koch-Hyde (she/they) (F1'19)",
            "sender_id": 234280,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "parse string to integer",
            "submessages": [],
            "timestamp": 1568139158,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4d074af6cc341ef51b25bb2f738cdb11?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-id=\"234049\">@Chirag Dav\u00e9 (he) (F1'19)</span> <code>read</code> will work with negative integers:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"o\">&gt;</span> <span class=\"n\">read</span> <span class=\"s\">&quot;-123&quot;</span> <span class=\"ow\">::</span> <span class=\"kt\">Int</span>\n<span class=\"o\">-</span><span class=\"mi\">123</span>\n</pre></div>\n\n\n<p>but for positive integers you will want to strip the leading <code>+</code>, which you can do with <code>tail</code>:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"o\">&gt;</span> <span class=\"n\">read</span> <span class=\"p\">(</span><span class=\"n\">tail</span> <span class=\"s\">&quot;+123&quot;</span><span class=\"p\">)</span> <span class=\"ow\">::</span> <span class=\"kt\">Int</span>\n<span class=\"mi\">123</span>\n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 175364164,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "vaibhavsagar@gmail.com",
            "sender_full_name": "Vaibhav Sagar (he) (F1'16)",
            "sender_id": 100041,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "parse string to integer",
            "submessages": [],
            "timestamp": 1568139535,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4d074af6cc341ef51b25bb2f738cdb11?d=identicon&version=1",
            "client": "website",
            "content": "<p>so you could do something like</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"nf\">parseSigned</span> <span class=\"ow\">::</span> <span class=\"kt\">String</span> <span class=\"ow\">-&gt;</span> <span class=\"kt\">Int</span>\n<span class=\"nf\">parseSigned</span> <span class=\"n\">s</span> <span class=\"ow\">=</span> <span class=\"kr\">case</span> <span class=\"p\">(</span><span class=\"n\">head</span> <span class=\"n\">s</span><span class=\"p\">)</span> <span class=\"kr\">of</span>\n  <span class=\"sc\">&#39;+&#39;</span> <span class=\"ow\">-&gt;</span> <span class=\"n\">read</span> <span class=\"p\">(</span><span class=\"n\">tail</span> <span class=\"n\">s</span><span class=\"p\">)</span>\n  <span class=\"sc\">&#39;-&#39;</span> <span class=\"ow\">-&gt;</span> <span class=\"o\">-</span><span class=\"mi\">1</span> <span class=\"o\">*</span> <span class=\"n\">read</span> <span class=\"p\">(</span><span class=\"n\">tail</span> <span class=\"n\">s</span><span class=\"p\">)</span>\n</pre></div>\n\n\n<p>You don't need the <code>:: Int</code> if your function is properly type-annotated. Here it is in action:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"o\">&gt;</span> <span class=\"n\">parseSigned</span> <span class=\"s\">&quot;+123&quot;</span>\n<span class=\"mi\">123</span>\n<span class=\"o\">&gt;</span> <span class=\"n\">parseSigned</span> <span class=\"s\">&quot;-123&quot;</span>\n<span class=\"o\">-</span><span class=\"mi\">123</span>\n</pre></div>\n\n\n<p>I'm assuming you want this for an Advent of Code problem, where you can safely expect the input to be well-formed, otherwise the above function will break on e.g. an empty string, a string that doesn't start with <code>-</code> or <code>+</code>, etc etc.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 175364576,
            "is_me_message": false,
            "last_edit_timestamp": 1568140008,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "vaibhavsagar@gmail.com",
            "sender_full_name": "Vaibhav Sagar (he) (F1'16)",
            "sender_id": 100041,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "parse string to integer",
            "submessages": [],
            "timestamp": 1568139796,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/5c76b2c555785c8a87577bc81fe538bc03a8b463?x=x&version=2",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-id=\"100041\">@Vaibhav Sagar (he) (F1'16)</span> ahhh you gave me the answer! :X but i appreciate it! that was really helpful, and I learned something!</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 175371115,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "c@chirag.io",
            "sender_full_name": "Chirag Dav\u00e9 (he) (F1'19)",
            "sender_id": 234049,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "parse string to integer",
            "submessages": [],
            "timestamp": 1568144148,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4d074af6cc341ef51b25bb2f738cdb11?d=identicon&version=1",
            "client": "website",
            "content": "<p>IIRC parsing the integers isn't what's hard about the problem, so I don't feel too bad <span aria-label=\"smiley\" class=\"emoji emoji-1f603\" role=\"img\" title=\"smiley\">:smiley:</span></p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 175371605,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "vaibhavsagar@gmail.com",
            "sender_full_name": "Vaibhav Sagar (he) (F1'16)",
            "sender_id": 100041,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "parse string to integer",
            "submessages": [],
            "timestamp": 1568144586,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/5c76b2c555785c8a87577bc81fe538bc03a8b463?x=x&version=2",
            "client": "website",
            "content": "<p>buaha oh yeah definitely don't feel bad :) i'm on part two of this problem, which you clearly recognize, and the real learning is beginning.... o_o</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 175372449,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "c@chirag.io",
            "sender_full_name": "Chirag Dav\u00e9 (he) (F1'19)",
            "sender_id": 234049,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "parse string to integer",
            "submessages": [],
            "timestamp": 1568145279,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/edf8c8e78f184bdc167fe0575aa89ba3?d=identicon&version=1",
            "client": "website",
            "content": "<p>I'm interested in any feedback on this introduction to datatype-generic programming: <a href=\"https://maxhallinan.com/drafts/2019/09/12/what-is-datatype-generic-programming\" target=\"_blank\" title=\"https://maxhallinan.com/drafts/2019/09/12/what-is-datatype-generic-programming\">https://maxhallinan.com/drafts/2019/09/12/what-is-datatype-generic-programming</a>. I still need to conclude with something. Was considering an implementation of a generic function but understanding Symbols is a prerequisite. Instead, might briefly cover some interesting uses of generic like Servant.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 175540463,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "maxhallinan@gmail.com",
            "sender_full_name": "Max Hallinan (he/they) (W1'19)",
            "sender_id": 233917,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Draft: \"What is datatype-generic programming?\"",
            "submessages": [],
            "timestamp": 1568302306,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4d074af6cc341ef51b25bb2f738cdb11?d=identicon&version=1",
            "client": "website",
            "content": "<p>I think it might help to show how a data type is represented in generic form, e.g. representing <code>Maybe</code> in terms of <code>U1</code>, <code>K1</code>, etc.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 175542477,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "vaibhavsagar@gmail.com",
            "sender_full_name": "Vaibhav Sagar (he) (F1'16)",
            "sender_id": 100041,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Draft: \"What is datatype-generic programming?\"",
            "submessages": [],
            "timestamp": 1568303550,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/edf8c8e78f184bdc167fe0575aa89ba3?d=identicon&version=1",
            "client": "website",
            "content": "<p>I think you're right. Maybe I should conclude with a generic show function. I was trying to avoid technical, language-specific details but maybe it's too abstract without them.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 175547099,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "maxhallinan@gmail.com",
            "sender_full_name": "Max Hallinan (he/they) (W1'19)",
            "sender_id": 233917,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Draft: \"What is datatype-generic programming?\"",
            "submessages": [],
            "timestamp": 1568306647,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4d074af6cc341ef51b25bb2f738cdb11?d=identicon&version=1",
            "client": "website",
            "content": "<p>I think the idea of representing almost any data type with sums and products is language-agnostic, you could come up with a simplified representation if that would suit your purposes better.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 175551737,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "vaibhavsagar@gmail.com",
            "sender_full_name": "Vaibhav Sagar (he) (F1'16)",
            "sender_id": 100041,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Draft: \"What is datatype-generic programming?\"",
            "submessages": [],
            "timestamp": 1568309704,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/fe405bbed728ab0b6fcef148e8c65a8b?d=identicon&version=1",
            "client": "website",
            "content": "<p>Shameless plug: <a href=\"https://generics-eot.readthedocs.io/en/stable/\" target=\"_blank\" title=\"https://generics-eot.readthedocs.io/en/stable/\">https://generics-eot.readthedocs.io/en/stable/</a></p>\n<p>This library tries to make datatype generic programming as easy as possible. Mainly by using a very simple generic representation that just consists of <code>Either</code>s and tuples. (Well, and <code>Void</code> and <code>()</code>.)</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 175592724,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "soenkehahn@gmail.com",
            "sender_full_name": "S\u00f6nke Hahn (he) (S1'18)",
            "sender_id": 116583,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Draft: \"What is datatype-generic programming?\"",
            "submessages": [],
            "timestamp": 1568348576,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/8776bd2d19cdb1399c4e9589d9397d57290e5729?x=x&version=2",
            "client": "website",
            "content": "<p>I'm accustomed to using <a href=\"http://hackage.haskell.org/package/lucid\" target=\"_blank\" title=\"http://hackage.haskell.org/package/lucid\">Lucid</a> for html templating, any other options I should consider?</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 175645081,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "shae.erisson@gmail.com",
            "sender_full_name": "Shae Matijs Erisson (he) (F1'19)",
            "sender_id": 221819,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "preferred html templating library?",
            "submessages": [],
            "timestamp": 1568395093,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/ff123cc045318f1a4b52b2bbe9926d27cf04bbf5?x=x&version=2",
            "client": "ZulipElectron",
            "content": "<p>I've been helping <span class=\"user-mention\" data-user-id=\"234256\">@Ryan Prior (he) (F1'19)</span> with work on a table of common data structures in Haskell and their interfaces. It's still very much a work in progress but here is what we have so far: <a href=\"https://gitlab.com/1000000000/how-data/blob/develop/tables/haskell.org\" target=\"_blank\" title=\"https://gitlab.com/1000000000/how-data/blob/develop/tables/haskell.org\">https://gitlab.com/1000000000/how-data/blob/develop/tables/haskell.org</a></p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 175964918,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "lthyde@gmail.com",
            "sender_full_name": "Meg Koch-Hyde (she/they) (F1'19)",
            "sender_id": 234280,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "common data structures and their operations",
            "submessages": [],
            "timestamp": 1568771955,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/ff123cc045318f1a4b52b2bbe9926d27cf04bbf5?x=x&version=2",
            "client": "ZulipElectron",
            "content": "<p>We'd also be very interested in hearing anyone's two cents on what are important data structures and operations</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 175964991,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "lthyde@gmail.com",
            "sender_full_name": "Meg Koch-Hyde (she/they) (F1'19)",
            "sender_id": 234280,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "common data structures and their operations",
            "submessages": [],
            "timestamp": 1568772028,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/edf8c8e78f184bdc167fe0575aa89ba3?d=identicon&version=1",
            "client": "website",
            "content": "<p>This reminds me a little bit of the <a href=\"https://wiki.haskell.org/Typeclassopedia\" target=\"_blank\" title=\"https://wiki.haskell.org/Typeclassopedia\">Typeclassopedia</a>.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 175966726,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f60e",
                    "emoji_name": "sunglasses",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "shae.erisson@gmail.com",
                        "full_name": "Shae Matijs Erisson (he) (F1'19)",
                        "id": 221819
                    },
                    "user_id": 221819
                },
                {
                    "emoji_code": "1f60e",
                    "emoji_name": "sunglasses",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "rprior@protonmail.com",
                        "full_name": "Ryan Prior (he) (F1'19)",
                        "id": 234256
                    },
                    "user_id": 234256
                }
            ],
            "recipient_id": 22667,
            "sender_email": "maxhallinan@gmail.com",
            "sender_full_name": "Max Hallinan (he/they) (W1'19)",
            "sender_id": 233917,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "common data structures and their operations",
            "submessages": [],
            "timestamp": 1568775169,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/efe57f0998df065470ff42c938f781cf?d=identicon&version=1",
            "client": "website",
            "content": "<p>maybe add Monoid and Semigroup?</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 175967120,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "libby@daydrea.me",
            "sender_full_name": "Libby Horacek (she) (SP1'15)",
            "sender_id": 7081,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "common data structures and their operations",
            "submessages": [],
            "timestamp": 1568775960,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/097edbae0d41f8a5149c6ada6fd5c4941e572159?x=x&version=2",
            "client": "ZulipElectron",
            "content": "<p>Cool I will look more at typeclassopedia, it might be a good resource to link to &amp; to do further research.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 175969467,
            "is_me_message": false,
            "last_edit_timestamp": 1568780345,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "rprior@protonmail.com",
            "sender_full_name": "Ryan Prior (he) (F1'19)",
            "sender_id": 234256,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "common data structures and their operations",
            "submessages": [],
            "timestamp": 1568780337,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/8776bd2d19cdb1399c4e9589d9397d57290e5729?x=x&version=2",
            "client": "website",
            "content": "<p>I'm starting a Haskell intro series for Fall 2, should be exciting and fun!</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 176403094,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f389",
                    "emoji_name": "tada",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "louisk@gmail.com",
                        "full_name": "Louis Kruger (he) (F1'19)",
                        "id": 234671
                    },
                    "user_id": 234671
                }
            ],
            "recipient_id": 22667,
            "sender_email": "shae.erisson@gmail.com",
            "sender_full_name": "Shae Matijs Erisson (he) (F1'19)",
            "sender_id": 221819,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Haskell Intro for Fall 2 2019",
            "submessages": [],
            "timestamp": 1569268444,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4d074af6cc341ef51b25bb2f738cdb11?d=identicon&version=1",
            "client": "website",
            "content": "<p>what's haskell</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 176403146,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1104",
                    "emoji_name": "haskell",
                    "reaction_type": "realm_emoji",
                    "user": {
                        "email": "c@chirag.io",
                        "full_name": "Chirag Dav\u00e9 (he) (F1'19)",
                        "id": 234049
                    },
                    "user_id": 234049
                },
                {
                    "emoji_code": "1104",
                    "emoji_name": "haskell",
                    "reaction_type": "realm_emoji",
                    "user": {
                        "email": "louisk@gmail.com",
                        "full_name": "Louis Kruger (he) (F1'19)",
                        "id": 234671
                    },
                    "user_id": 234671
                },
                {
                    "emoji_code": "1104",
                    "emoji_name": "haskell",
                    "reaction_type": "realm_emoji",
                    "user": {
                        "email": "libby@daydrea.me",
                        "full_name": "Libby Horacek (she) (SP1'15)",
                        "id": 7081
                    },
                    "user_id": 7081
                },
                {
                    "emoji_code": "1104",
                    "emoji_name": "haskell",
                    "reaction_type": "realm_emoji",
                    "user": {
                        "email": "shae.erisson@gmail.com",
                        "full_name": "Shae Matijs Erisson (he) (F1'19)",
                        "id": 221819
                    },
                    "user_id": 221819
                },
                {
                    "emoji_code": "1104",
                    "emoji_name": "haskell",
                    "reaction_type": "realm_emoji",
                    "user": {
                        "email": "me@carlosdominguez.com",
                        "full_name": "Carlos Dominguez (he) (S1'19)",
                        "id": 221953
                    },
                    "user_id": 221953
                }
            ],
            "recipient_id": 22667,
            "sender_email": "vaibhavsagar@gmail.com",
            "sender_full_name": "Vaibhav Sagar (he) (F1'16)",
            "sender_id": 100041,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Haskell Intro for Fall 2 2019",
            "submessages": [],
            "timestamp": 1569268472,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/5c76b2c555785c8a87577bc81fe538bc03a8b463?x=x&version=2",
            "client": "website",
            "content": "<p>yay!</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 176466091,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "c@chirag.io",
            "sender_full_name": "Chirag Dav\u00e9 (he) (F1'19)",
            "sender_id": 234049,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Haskell Intro for Fall 2 2019",
            "submessages": [],
            "timestamp": 1569333608,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/09b7283e227e05f229fd6b6b70bcdba7?d=identicon&version=1",
            "client": "website",
            "content": "<p>With some time wasted debugging dependency hell, I was eventually able to get the IHaskell kernel running in Jupyter lab.  I'm been using Jupyter more and more lately for exploratory and interactive coding and I'm finding this a really nice way to experimentally play with Haskell ideas (and other supported languages) in the notebook format.</p>\n<p>I (mostly) just followed the directions at <a href=\"https://github.com/gibiansky/IHaskell\" target=\"_blank\" title=\"https://github.com/gibiansky/IHaskell\">https://github.com/gibiansky/IHaskell</a>  if anyone wants a demo or ask questions, let me know.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 176497841,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "louisk@gmail.com",
            "sender_full_name": "Louis Kruger (he) (F1'19)",
            "sender_id": 234671,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "using Haskell in Jupyter lab",
            "submessages": [],
            "timestamp": 1569353654,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/efe57f0998df065470ff42c938f781cf?d=identicon&version=1",
            "client": "website",
            "content": "<p>you should chat with <span class=\"user-mention\" data-user-id=\"100041\">@Vaibhav Sagar (he) (F1'16)</span> about it too</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 176498138,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f642",
                    "emoji_name": "slight_smile",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "c@chirag.io",
                        "full_name": "Chirag Dav\u00e9 (he) (F1'19)",
                        "id": 234049
                    },
                    "user_id": 234049
                },
                {
                    "emoji_code": "1f642",
                    "emoji_name": "slight_smile",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "vaibhavsagar@gmail.com",
                        "full_name": "Vaibhav Sagar (he) (F1'16)",
                        "id": 100041
                    },
                    "user_id": 100041
                }
            ],
            "recipient_id": 22667,
            "sender_email": "libby@daydrea.me",
            "sender_full_name": "Libby Horacek (she) (SP1'15)",
            "sender_id": 7081,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "using Haskell in Jupyter lab",
            "submessages": [],
            "timestamp": 1569353879,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4d074af6cc341ef51b25bb2f738cdb11?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-id=\"234671\">@Louis Kruger (he) (F1'19)</span> I am the current maintainer of IHaskell, happy to take questions!</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 176501287,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "vaibhavsagar@gmail.com",
            "sender_full_name": "Vaibhav Sagar (he) (F1'16)",
            "sender_id": 100041,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "using Haskell in Jupyter lab",
            "submessages": [],
            "timestamp": 1569356013,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4d074af6cc341ef51b25bb2f738cdb11?d=identicon&version=1",
            "client": "website",
            "content": "<p>I find the JupyterLab stuff pretty finicky, but the older notebooks work great and I use them often.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 176501359,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "vaibhavsagar@gmail.com",
            "sender_full_name": "Vaibhav Sagar (he) (F1'16)",
            "sender_id": 100041,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "using Haskell in Jupyter lab",
            "submessages": [],
            "timestamp": 1569356059,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4d074af6cc341ef51b25bb2f738cdb11?d=identicon&version=1",
            "client": "website",
            "content": "<p>My notebooks repo is here: <a href=\"https://github.com/vaibhavsagar/notebooks/\" target=\"_blank\" title=\"https://github.com/vaibhavsagar/notebooks/\">https://github.com/vaibhavsagar/notebooks/</a></p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 176501381,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "vaibhavsagar@gmail.com",
            "sender_full_name": "Vaibhav Sagar (he) (F1'16)",
            "sender_id": 100041,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "using Haskell in Jupyter lab",
            "submessages": [],
            "timestamp": 1569356082,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/7580ab83ada9265285a940c5a1098204?d=identicon&version=1",
            "client": "website",
            "content": "<p>Here is a repo for the CIS194 haskell course with unit tests added: <a href=\"https://github.com/laser/cis-194-summer-2018\" target=\"_blank\" title=\"https://github.com/laser/cis-194-summer-2018\">https://github.com/laser/cis-194-summer-2018</a></p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 176580057,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "ssbothwell@gmail.com",
            "sender_full_name": "Solomon Bothwell (he) (F2'19)",
            "sender_id": 240589,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "CIS 194",
            "submessages": [],
            "timestamp": 1569427482,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/7580ab83ada9265285a940c5a1098204?d=identicon&version=1",
            "client": "ZulipElectron",
            "content": "<p>Here is the blog post I mentioned on Zippers. Its written by an RC alum in Los Angeles: <a href=\"https://codewords.recurse.com/issues/three/algebra-and-calculus-of-algebraic-data-types\" target=\"_blank\" title=\"https://codewords.recurse.com/issues/three/algebra-and-calculus-of-algebraic-data-types\">https://codewords.recurse.com/issues/three/algebra-and-calculus-of-algebraic-data-types</a></p>\n<p>The intro touches on the Curry-Howard Isomorphism too.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 176755313,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1104",
                    "emoji_name": "haskell",
                    "reaction_type": "realm_emoji",
                    "user": {
                        "email": "PLRedmond@gmail.com",
                        "full_name": "Patrick Redmond (W'14)",
                        "id": 5014
                    },
                    "user_id": 5014
                },
                {
                    "emoji_code": "1104",
                    "emoji_name": "haskell",
                    "reaction_type": "realm_emoji",
                    "user": {
                        "email": "shae.erisson@gmail.com",
                        "full_name": "Shae Matijs Erisson (he) (F1'19)",
                        "id": 221819
                    },
                    "user_id": 221819
                },
                {
                    "emoji_code": "1104",
                    "emoji_name": "haskell",
                    "reaction_type": "realm_emoji",
                    "user": {
                        "email": "shon.feder@gmail.com",
                        "full_name": "Shon Feder (he) (F2'19)",
                        "id": 240588
                    },
                    "user_id": 240588
                },
                {
                    "emoji_code": "1104",
                    "emoji_name": "haskell",
                    "reaction_type": "realm_emoji",
                    "user": {
                        "email": "vaibhavsagar@gmail.com",
                        "full_name": "Vaibhav Sagar (he) (F1'16)",
                        "id": 100041
                    },
                    "user_id": 100041
                }
            ],
            "recipient_id": 22667,
            "sender_email": "ssbothwell@gmail.com",
            "sender_full_name": "Solomon Bothwell (he) (F2'19)",
            "sender_id": 240589,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Zippers and ADTs",
            "submessages": [],
            "timestamp": 1569597346,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4d074af6cc341ef51b25bb2f738cdb11?d=identicon&version=1",
            "client": "website",
            "content": "<p>I love sharing this article with people. Calculus on data types, what a great idea!</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 176755872,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "vaibhavsagar@gmail.com",
            "sender_full_name": "Vaibhav Sagar (he) (F1'16)",
            "sender_id": 100041,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Zippers and ADTs",
            "submessages": [],
            "timestamp": 1569597710,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/7580ab83ada9265285a940c5a1098204?d=identicon&version=1",
            "client": "ZulipElectron",
            "content": "<p>Yeah its amazing!</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 176759223,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "ssbothwell@gmail.com",
            "sender_full_name": "Solomon Bothwell (he) (F2'19)",
            "sender_id": 240589,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Zippers and ADTs",
            "submessages": [],
            "timestamp": 1569599874,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/7580ab83ada9265285a940c5a1098204?d=identicon&version=1",
            "client": "ZulipElectron",
            "content": "<p>Any interest in starting a reading group for Functional Pearls ++ other choice papers?</p>\n<p><a href=\"https://wiki.haskell.org/Research_papers/Functional_pearls\" target=\"_blank\" title=\"https://wiki.haskell.org/Research_papers/Functional_pearls\">https://wiki.haskell.org/Research_papers/Functional_pearls</a></p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 176886208,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "+1",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "shae.erisson@gmail.com",
                        "full_name": "Shae Matijs Erisson (he) (F1'19)",
                        "id": 221819
                    },
                    "user_id": 221819
                },
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "+1",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "vaibhavsagar@gmail.com",
                        "full_name": "Vaibhav Sagar (he) (F1'16)",
                        "id": 100041
                    },
                    "user_id": 100041
                }
            ],
            "recipient_id": 22667,
            "sender_email": "ssbothwell@gmail.com",
            "sender_full_name": "Solomon Bothwell (he) (F2'19)",
            "sender_id": 240589,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Functional Pearls",
            "submessages": [],
            "timestamp": 1569787981,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4d074af6cc341ef51b25bb2f738cdb11?d=identicon&version=1",
            "client": "website",
            "content": "<p>This is a great idea! I especially like the functional pearls from the late 90s, I find many of those pretty straightforward to follow and implement.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 176899367,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "vaibhavsagar@gmail.com",
            "sender_full_name": "Vaibhav Sagar (he) (F1'16)",
            "sender_id": 100041,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Functional Pearls",
            "submessages": [],
            "timestamp": 1569812320,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/7580ab83ada9265285a940c5a1098204?d=identicon&version=1",
            "client": "ZulipElectron",
            "content": "<p>yes i agree. How should we pick a time to meetup and decide the first paper?</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 176936240,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "ssbothwell@gmail.com",
            "sender_full_name": "Solomon Bothwell (he) (F2'19)",
            "sender_id": 240589,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Functional Pearls",
            "submessages": [],
            "timestamp": 1569853151,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/7580ab83ada9265285a940c5a1098204?d=identicon&version=1",
            "client": "ZulipElectron",
            "content": "<p>Here a list of papers I am most interested in reading right now:</p>\n<div class=\"codehilite\"><pre><span></span>*** Typed Tagless Final Interpreters - Oleg Kiselyov\n*** Generalising Monads to Arrows - John Hughes\n*** Push Push Functional Reactive Programming - Conal Elliot\n*** A Real-World Application with a Comonadic User Interface - Arthur Xavier\n*** What We Talk About When We Talk About Monads - Tomas Petricek\n*** Profunctor Optics: Modular Data Accessors - Mathew Pickering, Jeremy Gibbons, Nicolas Wu\n*** Data Types A La Carte - Wouter Swierstra\n*** Better Data Types a la Carte - Sandy Maguire\n*** Freer Monads, More Extensible Effects - Oleg Kiselyov\n*** Free and Freer Monads: Putting Monads Back into Closet - Oleg Kiselyov\n*** Why Free Monads Matter - Gabriel Gonzalez\n</pre></div>\n\n\n<p>Not all are technically Functional Pearls.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 176937807,
            "is_me_message": false,
            "last_edit_timestamp": 1569854155,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "ssbothwell@gmail.com",
            "sender_full_name": "Solomon Bothwell (he) (F2'19)",
            "sender_id": 240589,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Functional Pearls",
            "submessages": [],
            "timestamp": 1569854117,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/09b7283e227e05f229fd6b6b70bcdba7?d=identicon&version=1",
            "client": "ZulipElectron",
            "content": "<p>I used \"cabal install --lib hxt\" to get access to the ArrowIO module.<br>\nThis works fine in ghci</p>\n<div class=\"codehilite\"><pre><span></span>Louiss-Air:harrow louis$ ghci\nGHCi, version 8.6.5: http://www.haskell.org/ghc/  :? for help\nLoaded package environment from /Users/louis/.ghc/x86_64-darwin-8.6.5/environments/default\nPrelude&gt; import Control.Arrow.ArrowIO\nPrelude Control.Arrow.ArrowIO&gt; testA = arrIO putStrLn\nPrelude Control.Arrow.ArrowIO&gt; :t arrIO putStrLn\narrIO putStrLn :: ArrowIO a =&gt; a String ()\n</pre></div>\n\n\n<p>but a pretty much identical snippet of code is failing to compile in the compiler with a \"no instance for ArrowIO\" error message which I don't understand.  It's choking on the same expression (arrIO putStrLn) that worked fine in ghci.  Any ideas?</p>\n<div class=\"codehilite\"><pre><span></span>Louiss-Air:harrow louis$ ghc -c hello.hs\nLoaded package environment from /Users/louis/.ghc/x86_64-darwin-8.6.5/environments/default\n\nhello.hs:6:10: error:\n    \u2022 No instance for (ArrowIO a0) arising from a use of \u2018arrIO\u2019\n    \u2022 In the expression: (arrIO putStrLn)\n      In an equation for \u2018mainA\u2019: mainA = (arrIO putStrLn)\n  |\n6 | mainA = (arrIO putStrLn)\n  |          ^^^^^^^^^^^^^^\nLouiss-Air:harrow louis$ cat hello.hs\n{-# LANGUAGE Arrows #-}\n\nimport Control.Arrow\nimport Control.Arrow.ArrowIO\n\nmainA = (arrIO putStrLn)\n\nmain = putStrLn &quot;hello world&quot;\n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 176954560,
            "is_me_message": false,
            "last_edit_timestamp": 1569865085,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "louisk@gmail.com",
            "sender_full_name": "Louis Kruger (he) (F1'19)",
            "sender_id": 234671,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Help me understand a simple compile error?",
            "submessages": [],
            "timestamp": 1569865060,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/09b7283e227e05f229fd6b6b70bcdba7?d=identicon&version=1",
            "client": "ZulipElectron",
            "content": "<p>Bit of progress - ghc accepts it if I annotate with an explicit signature.  But - why is this necessary?  Can't it be inferred?</p>\n<div class=\"codehilite\"><pre><span></span>mainA :: ArrowIO a =&gt; a String ()\nmainA = (arrIO putStrLn)\n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 176956745,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "louisk@gmail.com",
            "sender_full_name": "Louis Kruger (he) (F1'19)",
            "sender_id": 234671,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Help me understand a simple compile error?",
            "submessages": [],
            "timestamp": 1569866387,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/ff123cc045318f1a4b52b2bbe9926d27cf04bbf5?x=x&version=2",
            "client": "ZulipElectron",
            "content": "<p>I prodded a bit and the issue seems related to Haskell's monomorphism restriction. Namely it compiles if you add the <code>NoMonomorphismRestriction</code> language extension.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 176959743,
            "is_me_message": false,
            "last_edit_timestamp": 1569868174,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "lthyde@gmail.com",
            "sender_full_name": "Meg Koch-Hyde (she/they) (F1'19)",
            "sender_id": 234280,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Help me understand a simple compile error?",
            "submessages": [],
            "timestamp": 1569868157,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4d074af6cc341ef51b25bb2f738cdb11?d=identicon&version=1",
            "client": "website",
            "content": "<p>I was just about to link to <a href=\"https://typeclasses.com/monomorphism-restriction\" target=\"_blank\" title=\"https://typeclasses.com/monomorphism-restriction\">https://typeclasses.com/monomorphism-restriction</a></p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 176959756,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "vaibhavsagar@gmail.com",
            "sender_full_name": "Vaibhav Sagar (he) (F1'16)",
            "sender_id": 100041,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Help me understand a simple compile error?",
            "submessages": [],
            "timestamp": 1569868171,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4d074af6cc341ef51b25bb2f738cdb11?d=identicon&version=1",
            "client": "website",
            "content": "<p>it's disabled in GHCi, which is why it behaves differently there</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 176959784,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "vaibhavsagar@gmail.com",
            "sender_full_name": "Vaibhav Sagar (he) (F1'16)",
            "sender_id": 100041,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Help me understand a simple compile error?",
            "submessages": [],
            "timestamp": 1569868199,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/09b7283e227e05f229fd6b6b70bcdba7?d=identicon&version=1",
            "client": "ZulipElectron",
            "content": "<p>ahh ... I do tend to forget about the monomorphism restriction, not using Haskell that often.  :)</p>\n<p>Also turns out the ArrowIO typeclass was way overkill for what I was trying to figure out.  I just wanted to write hello world with arrows.  This is what I ended up with, I think I'm satisfied.  </p>\n<div class=\"codehilite\"><pre><span></span>import Control.Arrow\n\nwrite_string :: Kleisli IO String ()\nwrite_string = Kleisli putStrLn\n\nmainA :: Kleisli IO () ()\nmainA = (proc x -&gt; write_string -&lt; &quot;hello world&quot;)\n\nmain = runKleisli mainA ()\n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 176960779,
            "is_me_message": false,
            "last_edit_timestamp": 1569869234,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "louisk@gmail.com",
            "sender_full_name": "Louis Kruger (he) (F1'19)",
            "sender_id": 234671,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Help me understand a simple compile error?",
            "submessages": [],
            "timestamp": 1569868831,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/5c76b2c555785c8a87577bc81fe538bc03a8b463?x=x&version=2",
            "client": "website",
            "content": "<p>I'm interested!</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 177073258,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "c@chirag.io",
            "sender_full_name": "Chirag Dav\u00e9 (he) (F1'19)",
            "sender_id": 234049,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Functional Pearls",
            "submessages": [],
            "timestamp": 1569947903,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/e4646754f063094f39466a566be289082e138af5?x=x&version=2",
            "client": "website",
            "content": "<p>+1</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 177077654,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "perezv815@gmail.com",
            "sender_full_name": "Vincent Perez (F2'19)",
            "sender_id": 240629,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Functional Pearls",
            "submessages": [],
            "timestamp": 1569950707,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/9c42d0ccee4e9835cde7dcf4ddf7f6a399d852f5?x=x&version=2",
            "client": "website",
            "content": "<p>hi all <span class=\"user-mention\" data-user-id=\"240589\">@Solomon Bothwell (he) (F2'19)</span> and I will be talking about type holes tomorrow at 2pm! <a href=\"https://www.recurse.com/calendar/7593\" target=\"_blank\" title=\"https://www.recurse.com/calendar/7593\">https://www.recurse.com/calendar/7593</a><br>\nI am very beginner to haskell so it'll be an introductory conversation. Any and all of any haskell level are welcome to come join in and talk about haskell and type holes!</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 177098598,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "lainedkendall@gmail.com",
            "sender_full_name": "Laine Kendall (she/they) (F2'19)",
            "sender_id": 240732,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "type holes session",
            "submessages": [],
            "timestamp": 1569964343,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4d074af6cc341ef51b25bb2f738cdb11?d=identicon&version=1",
            "client": "website",
            "content": "<p>Typed holes are great! I did a presentation on them once: <a href=\"https://www.youtube.com/watch?v=0oo8wIi2qBE\" target=\"_blank\" title=\"https://www.youtube.com/watch?v=0oo8wIi2qBE\">https://www.youtube.com/watch?v=0oo8wIi2qBE</a></p>\n<div class=\"youtube-video message_inline_image\"><a data-id=\"0oo8wIi2qBE\" href=\"https://www.youtube.com/watch?v=0oo8wIi2qBE\" target=\"_blank\" title=\"https://www.youtube.com/watch?v=0oo8wIi2qBE\"><img src=\"https://i.ytimg.com/vi/0oo8wIi2qBE/default.jpg\"></a></div>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 177098854,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "+1",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "ssbothwell@gmail.com",
                        "full_name": "Solomon Bothwell (he) (F2'19)",
                        "id": 240589
                    },
                    "user_id": 240589
                },
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "+1",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "c@chirag.io",
                        "full_name": "Chirag Dav\u00e9 (he) (F1'19)",
                        "id": 234049
                    },
                    "user_id": 234049
                },
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "+1",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "lainedkendall@gmail.com",
                        "full_name": "Laine Kendall (she/they) (F2'19)",
                        "id": 240732
                    },
                    "user_id": 240732
                }
            ],
            "recipient_id": 22667,
            "sender_email": "vaibhavsagar@gmail.com",
            "sender_full_name": "Vaibhav Sagar (he) (F1'16)",
            "sender_id": 100041,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "type holes session",
            "submessages": [],
            "timestamp": 1569964536,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/5c76b2c555785c8a87577bc81fe538bc03a8b463?x=x&version=2",
            "client": "website",
            "content": "<p>good talk! -- i hope i can make the 2pm. it sounds really interesting</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 177161390,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "2764",
                    "emoji_name": "heart",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "vaibhavsagar@gmail.com",
                        "full_name": "Vaibhav Sagar (he) (F1'16)",
                        "id": 100041
                    },
                    "user_id": 100041
                }
            ],
            "recipient_id": 22667,
            "sender_email": "c@chirag.io",
            "sender_full_name": "Chirag Dav\u00e9 (he) (F1'19)",
            "sender_id": 234049,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "type holes session",
            "submessages": [],
            "timestamp": 1570030176,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/7580ab83ada9265285a940c5a1098204?d=identicon&version=1",
            "client": "ZulipElectron",
            "content": "<p>Heres a nice blog post on the curry Howard Correspondance:<br>\n<a href=\"http://www.haskellforall.com/2017/02/the-curry-howard-correspondence-between.html\" target=\"_blank\" title=\"http://www.haskellforall.com/2017/02/the-curry-howard-correspondence-between.html\">http://www.haskellforall.com/2017/02/the-curry-howard-correspondence-between.html</a></p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 177347929,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "+1",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "shon.feder@gmail.com",
                        "full_name": "Shon Feder (he) (F2'19)",
                        "id": 240588
                    },
                    "user_id": 240588
                },
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "+1",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "perezv815@gmail.com",
                        "full_name": "Vincent Perez (F2'19)",
                        "id": 240629
                    },
                    "user_id": 240629
                }
            ],
            "recipient_id": 22667,
            "sender_email": "ssbothwell@gmail.com",
            "sender_full_name": "Solomon Bothwell (he) (F2'19)",
            "sender_id": 240589,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Curry Howard Correspondance",
            "submessages": [],
            "timestamp": 1570201683,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/7580ab83ada9265285a940c5a1098204?d=identicon&version=1",
            "client": "ZulipElectron",
            "content": "<p>Here is an article on Continuation Passing Style and the <code>Cont</code> type: <a href=\"http://www.haskellforall.com/2012/12/the-continuation-monad.html\" target=\"_blank\" title=\"http://www.haskellforall.com/2012/12/the-continuation-monad.html\">http://www.haskellforall.com/2012/12/the-continuation-monad.html</a></p>\n<p><span class=\"user-mention\" data-user-id=\"240732\">@Laine Kendall (she/they) (F2'19)</span> <span class=\"user-mention\" data-user-id=\"240629\">@Vincent Perez (F2'19)</span> <span class=\"user-mention\" data-user-id=\"234049\">@Chirag Dav\u00e9 (he) (F1'19)</span></p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 177348130,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f600",
                    "emoji_name": "grinning",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "lainedkendall@gmail.com",
                        "full_name": "Laine Kendall (she/they) (F2'19)",
                        "id": 240732
                    },
                    "user_id": 240732
                }
            ],
            "recipient_id": 22667,
            "sender_email": "ssbothwell@gmail.com",
            "sender_full_name": "Solomon Bothwell (he) (F2'19)",
            "sender_id": 240589,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "type holes session",
            "submessages": [],
            "timestamp": 1570201791,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/e4646754f063094f39466a566be289082e138af5?x=x&version=2",
            "client": "website",
            "content": "<p>Cool, thanks! I was actually thinking about writing an article on the same... might need to change my plans :)</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 177348492,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "perezv815@gmail.com",
            "sender_full_name": "Vincent Perez (F2'19)",
            "sender_id": 240629,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "type holes session",
            "submessages": [],
            "timestamp": 1570201968,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/5c76b2c555785c8a87577bc81fe538bc03a8b463?x=x&version=2",
            "client": "website",
            "content": "<p>tahnk you!</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 177348564,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "c@chirag.io",
            "sender_full_name": "Chirag Dav\u00e9 (he) (F1'19)",
            "sender_id": 234049,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "type holes session",
            "submessages": [],
            "timestamp": 1570202023,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/7580ab83ada9265285a940c5a1098204?d=identicon&version=1",
            "client": "ZulipElectron",
            "content": "<p><span class=\"user-mention\" data-user-id=\"240629\">@Vincent Perez (F2'19)</span> you can still write an article on the topic!</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 177348779,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "ssbothwell@gmail.com",
            "sender_full_name": "Solomon Bothwell (he) (F2'19)",
            "sender_id": 240589,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "type holes session",
            "submessages": [],
            "timestamp": 1570202144,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/e4646754f063094f39466a566be289082e138af5?x=x&version=2",
            "client": "website",
            "content": "<p>Yep, will see to what extent the article overlaps with what I had in mind.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 177348937,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "perezv815@gmail.com",
            "sender_full_name": "Vincent Perez (F2'19)",
            "sender_id": 240629,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "type holes session",
            "submessages": [],
            "timestamp": 1570202235,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/9c42d0ccee4e9835cde7dcf4ddf7f6a399d852f5?x=x&version=2",
            "client": "ZulipElectron",
            "content": "<p>yay thanks solomon!</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 177353093,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "lainedkendall@gmail.com",
            "sender_full_name": "Laine Kendall (she/they) (F2'19)",
            "sender_id": 240732,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "type holes session",
            "submessages": [],
            "timestamp": 1570204903,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/9c42d0ccee4e9835cde7dcf4ddf7f6a399d852f5?x=x&version=2",
            "client": "ZulipElectron",
            "content": "<p>hi haskell friends!<br>\nI have two requests<br>\n(1) anyone have any good project ideas for a beginner? i completed game of life and am kinda looking for something else. i was told parsers are good in haskell...was thinking a yaml parser...?<br>\n(2) does anyone (or everyone) want to pair with me in haskell on a specific project/topic for a bit (maybe the project i pick in part 1 of this)? I feel like i could really benefit from getting some ideas/influence from hwo other ppl think about haskell. maybe beginning of next week?</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 177353471,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "lainedkendall@gmail.com",
            "sender_full_name": "Laine Kendall (she/they) (F2'19)",
            "sender_id": 240732,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "beginner project ideas / pair with me?",
            "submessages": [],
            "timestamp": 1570205091,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/efe57f0998df065470ff42c938f781cf?d=identicon&version=1",
            "client": "website",
            "content": "<p>hi, I'm not at RC but I like pairing with beginners :D My project I started at RC might be fun to work on together - it's parser-based too <a href=\"https://github.com/emhoracek/explora\" target=\"_blank\" title=\"https://github.com/emhoracek/explora\">https://github.com/emhoracek/explora</a></p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 177358817,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "libby@daydrea.me",
            "sender_full_name": "Libby Horacek (she) (SP1'15)",
            "sender_id": 7081,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "beginner project ideas / pair with me?",
            "submessages": [],
            "timestamp": 1570208532,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/8776bd2d19cdb1399c4e9589d9397d57290e5729?x=x&version=2",
            "client": "ZulipMobile",
            "content": "<p>I want to make a lunch bot where recursers can create a lunch event and others can join in. I like to think it will be simple, but no plan survives contact with lunch.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 177359847,
            "is_me_message": false,
            "last_edit_timestamp": 1570209222,
            "reactions": [
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "+1",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "ssbothwell@gmail.com",
                        "full_name": "Solomon Bothwell (he) (F2'19)",
                        "id": 240589
                    },
                    "user_id": 240589
                },
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "+1",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "libby@daydrea.me",
                        "full_name": "Libby Horacek (she) (SP1'15)",
                        "id": 7081
                    },
                    "user_id": 7081
                }
            ],
            "recipient_id": 22667,
            "sender_email": "shae.erisson@gmail.com",
            "sender_full_name": "Shae Matijs Erisson (he) (F1'19)",
            "sender_id": 221819,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "beginner project ideas / pair with me?",
            "submessages": [],
            "timestamp": 1570209156,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/f8c35ea9a9a7aac7d2cf73f5158445c0b1d80281?x=x&version=2",
            "client": "ZulipMobile",
            "content": "<p>I'm always happy to pair on fp projects, if you can use auxiliary pairing people in the RC. :)</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 177365761,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "+1",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "lainedkendall@gmail.com",
                        "full_name": "Laine Kendall (she/they) (F2'19)",
                        "id": 240732
                    },
                    "user_id": 240732
                }
            ],
            "recipient_id": 22667,
            "sender_email": "shon.feder@gmail.com",
            "sender_full_name": "Shon Feder (he) (F2'19)",
            "sender_id": 240588,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "beginner project ideas / pair with me?",
            "submessages": [],
            "timestamp": 1570213257,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4d074af6cc341ef51b25bb2f738cdb11?d=identicon&version=1",
            "client": "website",
            "content": "<p>continuations + typed holes: <a href=\"http://vaibhavsagar.com/blog/2017/05/22/discovering-continuations/\" target=\"_blank\" title=\"http://vaibhavsagar.com/blog/2017/05/22/discovering-continuations/\">http://vaibhavsagar.com/blog/2017/05/22/discovering-continuations/</a></p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 177367440,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "vaibhavsagar@gmail.com",
            "sender_full_name": "Vaibhav Sagar (he) (F1'16)",
            "sender_id": 100041,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "type holes session",
            "submessages": [],
            "timestamp": 1570214385,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4d074af6cc341ef51b25bb2f738cdb11?d=identicon&version=1",
            "client": "website",
            "content": "<p>I'm not in batch but happy to pair at a mutually agreeable time!</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 177367548,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "vaibhavsagar@gmail.com",
            "sender_full_name": "Vaibhav Sagar (he) (F1'16)",
            "sender_id": 100041,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "beginner project ideas / pair with me?",
            "submessages": [],
            "timestamp": 1570214440,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4d074af6cc341ef51b25bb2f738cdb11?d=identicon&version=1",
            "client": "website",
            "content": "<p>My RC project was a binary parser for the <code>.git</code> directory with <code>attoparsec</code>: <a href=\"https://github.com/vaibhavsagar/duffer\" target=\"_blank\" title=\"https://github.com/vaibhavsagar/duffer\">https://github.com/vaibhavsagar/duffer</a></p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 177367600,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "vaibhavsagar@gmail.com",
            "sender_full_name": "Vaibhav Sagar (he) (F1'16)",
            "sender_id": 100041,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "beginner project ideas / pair with me?",
            "submessages": [],
            "timestamp": 1570214480,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4d074af6cc341ef51b25bb2f738cdb11?d=identicon&version=1",
            "client": "website",
            "content": "<p>I also like this other explanation by Gabriel Gonzalez: <a href=\"http://www.haskellforall.com/2014/04/how-continuation-monad-works.html\" target=\"_blank\" title=\"http://www.haskellforall.com/2014/04/how-continuation-monad-works.html\">http://www.haskellforall.com/2014/04/how-continuation-monad-works.html</a></p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 177368394,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "vaibhavsagar@gmail.com",
            "sender_full_name": "Vaibhav Sagar (he) (F1'16)",
            "sender_id": 100041,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "type holes session",
            "submessages": [],
            "timestamp": 1570214995,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/e4646754f063094f39466a566be289082e138af5?x=x&version=2",
            "client": "website",
            "content": "<p>After trying to wrap my head for a while around continuations, I have to say that I didn't really grok the first article that <span class=\"user-mention\" data-user-id=\"240589\">@Solomon Bothwell (he) (F2'19)</span> (sorry <span aria-label=\"grimacing\" class=\"emoji emoji-1f62c\" role=\"img\" title=\"grimacing\">:grimacing:</span> ) shared. On the other hand found I found <span class=\"user-mention\" data-user-id=\"100041\">@Vaibhav Sagar (he) (F1'16)</span>'s article much more legible (great job!). This led me to think that:<br>\n&lt;rant&gt;<br>\nWith all due respect to Gabriel Gonzales, having to know the Keisli Category (and more generally any bit of category theory) in an article of a blog named \"Haskell for all\" is a bit misleading, and I don't think it will help solving Haskell's accessibility problems. I also disagree with the claim that resorting to category theory is necessary to understand monads.<br>\n&lt;/rant&gt;</p>\n<p>On the other hand, I definitely agree with this article (posted Yesterday):  <a href=\"https://williamyaoh.com/posts/2019-10-05-you-are-already-smart-enough.html\" target=\"_blank\" title=\"https://williamyaoh.com/posts/2019-10-05-you-are-already-smart-enough.html\">https://williamyaoh.com/posts/2019-10-05-you-are-already-smart-enough.html</a></p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 177467231,
            "is_me_message": false,
            "last_edit_timestamp": 1570379898,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "perezv815@gmail.com",
            "sender_full_name": "Vincent Perez (F2'19)",
            "sender_id": 240629,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "type holes session",
            "submessages": [],
            "timestamp": 1570379405,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/9c42d0ccee4e9835cde7dcf4ddf7f6a399d852f5?x=x&version=2",
            "client": "website",
            "content": "<p>yay thank you everyone for responding<br>\n<span class=\"user-mention\" data-user-id=\"7081\">@Libby Horacek (she) (SP1'15)</span> and <span class=\"user-mention\" data-user-id=\"100041\">@Vaibhav Sagar (he) (F1'16)</span>  if you are ever at RC on Thursdays or Fridays I would love to pair! Please let me know if you are here and have time. gonna look at both your projects for inspiration<br>\n<span class=\"user-mention\" data-user-id=\"221819\">@Shae Matijs Erisson (he) (F1'19)</span> that sounds very fun. i have no idea the dificulty level of that but would love to talk further :)</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 177524092,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "lainedkendall@gmail.com",
            "sender_full_name": "Laine Kendall (she/they) (F2'19)",
            "sender_id": 240732,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "beginner project ideas / pair with me?",
            "submessages": [],
            "timestamp": 1570458391,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/5c76b2c555785c8a87577bc81fe538bc03a8b463?x=x&version=2",
            "client": "website",
            "content": "<p>I should also pair at some point. I'm starting to think of small projects. :) Ugh why is RC almost finished?</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 177624918,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "c@chirag.io",
            "sender_full_name": "Chirag Dav\u00e9 (he) (F1'19)",
            "sender_id": 234049,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "beginner project ideas / pair with me?",
            "submessages": [],
            "timestamp": 1570547147,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/9c42d0ccee4e9835cde7dcf4ddf7f6a399d852f5?x=x&version=2",
            "client": "ZulipElectron",
            "content": "<p><span class=\"user-mention\" data-user-id=\"234049\">@Chirag Dav\u00e9 (he) (F1'19)</span> let's pair together :)</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 177625729,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "lainedkendall@gmail.com",
            "sender_full_name": "Laine Kendall (she/they) (F2'19)",
            "sender_id": 240732,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "beginner project ideas / pair with me?",
            "submessages": [],
            "timestamp": 1570547679,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/09b7283e227e05f229fd6b6b70bcdba7?d=identicon&version=1",
            "client": "website",
            "content": "<p>Did multiple folks mention Haskell oriented pairings?  I'd be down for that.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 177635268,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "louisk@gmail.com",
            "sender_full_name": "Louis Kruger (he) (F1'19)",
            "sender_id": 234671,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "beginner project ideas / pair with me?",
            "submessages": [],
            "timestamp": 1570553628,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/ff123cc045318f1a4b52b2bbe9926d27cf04bbf5?x=x&version=2",
            "client": "ZulipElectron",
            "content": "<p>I was busy this weekend, but I am always up for pairing on Haskell projects.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 177635785,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "lthyde@gmail.com",
            "sender_full_name": "Meg Koch-Hyde (she/they) (F1'19)",
            "sender_id": 234280,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "beginner project ideas / pair with me?",
            "submessages": [],
            "timestamp": 1570553949,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/09b7283e227e05f229fd6b6b70bcdba7?d=identicon&version=1",
            "client": "website",
            "content": "<p>One thing I've noticed about trying to choose Haskell for projects, is that if I already have an intuition of how to write something in a non-FP language, translating that approach to Haskell can be done straightforwardly (e.g. by writing a whole program in IO) but leads to code that is cumbersome, inefficient, and not very Haskell-ish.  The next step would be to refactor pure computations out from stuff that really needs IO, that's usually not so difficult at least for smallish programs.  But Haskell provides so many different abstractions for so many different kind of computational structures, and I have very little intuition for how to effectively use all these abstractions, or when to create my own.</p>\n<p>So, my sticking point is the following, I usually do one of two things<br>\n1)  Decide I want to write something \"useful\" in Haskell.  Start with (main :: IO), work down.<br>\n2)  Decide I want to explore some Haskell concept or other, maybe from a blog post, or something in category theory, or a library, or whatever.  To do that requires coming up with an example of something to write that \"fits\" the particular abstraction.  For example, I spent a couple of days last week exploring co-monads and their laws and producing and instance for generators that I think is correct.  It was instructive and educational, but didn't feel very \"productive\".<br>\n3) ???  How do good Haskell progammers get good at building usefull stuff _and_ using the language effectively?</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 177639518,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "louisk@gmail.com",
            "sender_full_name": "Louis Kruger (he) (F1'19)",
            "sender_id": 234671,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "beginner project ideas / pair with me?",
            "submessages": [],
            "timestamp": 1570556238,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/edf8c8e78f184bdc167fe0575aa89ba3?d=identicon&version=1",
            "client": "website",
            "content": "<p>Just my two cents:</p>\n<p>- Remember that the essence of Haskell is function composition. You can go very far with just functions. Don't feel obligated to use more powerful abstractions.<br>\n- At some point, as you write functions, you will start to notice pain points. When something feels clunky, that's the right time to look for a more powerful abstraction. One example is replacing an explicit function parameter with Reader.<br>\n- Discover useful abstractions by looking at how other people solved the problem you're solving. Reading code relevant to what you're working on is a good way to pick up idioms.<br>\n- Don't think of conceptual Haskell and useful Haskell as separate. The concepts exist to enable you to write useful programs. However, they can be entertaining to learn about for no practical purpose.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 177643588,
            "is_me_message": false,
            "last_edit_timestamp": 1570558967,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "maxhallinan@gmail.com",
            "sender_full_name": "Max Hallinan (he/they) (W1'19)",
            "sender_id": 233917,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "beginner project ideas / pair with me?",
            "submessages": [],
            "timestamp": 1570558866,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4d074af6cc341ef51b25bb2f738cdb11?d=identicon&version=1",
            "client": "website",
            "content": "<ol>\n<li>There's nothing wrong with code that \"isn't very Haskelly\" as long as it works correctly. A lot of the most frustrating code I see at work was written by people who treated it as a navel-gazing exercise. We've started calling these people \"type astronauts\" and the code they produce \"nerd skateboarding\".</li>\n<li>I think this comes with experience, i.e. using the most popular libraries, spending more time with the language, and looking at how other people solve the same problems. Same as with every other language IMHO.</li>\n</ol>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 177643801,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "vaibhavsagar@gmail.com",
            "sender_full_name": "Vaibhav Sagar (he) (F1'16)",
            "sender_id": 100041,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "beginner project ideas / pair with me?",
            "submessages": [],
            "timestamp": 1570559004,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4d074af6cc341ef51b25bb2f738cdb11?d=identicon&version=1",
            "client": "website",
            "content": "<p>I personally think I learned a lot from e.g. doing the Advent of Code challenges in Haskell, and looking at other solutions by people like <a href=\"https://github.com/glguy\" target=\"_blank\" title=\"https://github.com/glguy\">Eric Mertens</a> and <a href=\"https://github.com/mstksg/\" target=\"_blank\" title=\"https://github.com/mstksg/\">Justin Le</a> when I got stuck.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 177643983,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "vaibhavsagar@gmail.com",
            "sender_full_name": "Vaibhav Sagar (he) (F1'16)",
            "sender_id": 100041,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "beginner project ideas / pair with me?",
            "submessages": [],
            "timestamp": 1570559126,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/5c76b2c555785c8a87577bc81fe538bc03a8b463?x=x&version=2",
            "client": "website",
            "content": "<p>totes! i wonder when is good. thursday? wednesday?</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 177656744,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "c@chirag.io",
            "sender_full_name": "Chirag Dav\u00e9 (he) (F1'19)",
            "sender_id": 234049,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "beginner project ideas / pair with me?",
            "submessages": [],
            "timestamp": 1570567224,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/7580ab83ada9265285a940c5a1098204?d=identicon&version=1",
            "client": "ZulipElectron",
            "content": "<p>To add on to what <span class=\"user-mention\" data-user-id=\"100041\">@Vaibhav Sagar (he) (F1'16)</span>  and <span class=\"user-mention\" data-user-id=\"233917\">@Max Hallinan (he/they) (F1'19)</span> have said..</p>\n<p>The cost/benefit ratio drastically reduces as you scale up into Galaxy Brain territory (essentially anything more advanced then Monads). Its really fun to explore more advanced topics but its totally not necessary in order to produce great quality code. </p>\n<p>I learned haskell through reading the haskell book (<a href=\"http://haskellbook.com\" target=\"_blank\" title=\"http://haskellbook.com\">haskellbook.com</a>) and then writing lots of little toy projects. I'm definitely still learning and consider myself \"intermediate.\" Every time I start a new project I try to pick one new feature, library, or concept that I want to try to use in addition to what I already know. Then I try to make the project as small as possible so that I have a real chance of completing it.</p>\n<p>Some possible project ideas:<br>\n- using a parsing library to parse text<br>\n- a CLI game such as hangman or tic-tac-toe<br>\n- writing a simple interpreter, maybe for a calculator<br>\n- reimplementing functions and typeclasses from the haskell prelude (try implementing functor instances for all the common types plus some you make up)<br>\n- setup a webserver with Scotty. If you aren't familiar with Monads yet, then don't worry too much about what is going on behind the scenes with <code>&gt;&gt;=</code> and <code>do</code> notation, just take them as given and follow the docs.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 177656925,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "+1",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "lainedkendall@gmail.com",
                        "full_name": "Laine Kendall (she/they) (F2'19)",
                        "id": 240732
                    },
                    "user_id": 240732
                }
            ],
            "recipient_id": 22667,
            "sender_email": "ssbothwell@gmail.com",
            "sender_full_name": "Solomon Bothwell (he) (F2'19)",
            "sender_id": 240589,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "beginner project ideas / pair with me?",
            "submessages": [],
            "timestamp": 1570567297,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4d074af6cc341ef51b25bb2f738cdb11?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-id=\"240629\">@Vincent Perez (F2'19)</span> and I looked at reimplementing <code>State</code> the other day, it's not a lot of code and pretty instructive to see how it all fits together. This is the approach <a href=\"https://github.com/data61/fp-course/\" target=\"_blank\" title=\"https://github.com/data61/fp-course/\">fp-course</a> takes and I learned a lot from that too.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 177658341,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "+1",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "perezv815@gmail.com",
                        "full_name": "Vincent Perez (F2'19)",
                        "id": 240629
                    },
                    "user_id": 240629
                }
            ],
            "recipient_id": 22667,
            "sender_email": "vaibhavsagar@gmail.com",
            "sender_full_name": "Vaibhav Sagar (he) (F1'16)",
            "sender_id": 100041,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "beginner project ideas / pair with me?",
            "submessages": [],
            "timestamp": 1570568167,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/9c42d0ccee4e9835cde7dcf4ddf7f6a399d852f5?x=x&version=2",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-id=\"234049\">@Chirag Dav\u00e9 (he) (F1'19)</span> want to pair thursday? after lunch? anyone else is welcome to join!</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 177732416,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "lainedkendall@gmail.com",
            "sender_full_name": "Laine Kendall (she/they) (F2'19)",
            "sender_id": 240732,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "beginner project ideas / pair with me?",
            "submessages": [],
            "timestamp": 1570639411,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/5c76b2c555785c8a87577bc81fe538bc03a8b463?x=x&version=2",
            "client": "website",
            "content": "<p>sounds good!</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 177732874,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "c@chirag.io",
            "sender_full_name": "Chirag Dav\u00e9 (he) (F1'19)",
            "sender_id": 234049,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "beginner project ideas / pair with me?",
            "submessages": [],
            "timestamp": 1570639713,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/09b7283e227e05f229fd6b6b70bcdba7?d=identicon&version=1",
            "client": "ZulipMobile",
            "content": "<p>Can I join too?  We could do a swarm coding session using Atom in a conference room with someone projecting.  There's a cool Atom extension somebody showed me that makes collaboratiive editing really straightforward, it takes like 30 seconds to install.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 177735379,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "louisk@gmail.com",
            "sender_full_name": "Louis Kruger (he) (F1'19)",
            "sender_id": 234671,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "beginner project ideas / pair with me?",
            "submessages": [],
            "timestamp": 1570641266,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/edf8c8e78f184bdc167fe0575aa89ba3?d=identicon&version=1",
            "client": "website",
            "content": "<p>I'm also interested in joining if it's not too overwhelming.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 177736040,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "maxhallinan@gmail.com",
            "sender_full_name": "Max Hallinan (he/they) (W1'19)",
            "sender_id": 233917,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "beginner project ideas / pair with me?",
            "submessages": [],
            "timestamp": 1570641713,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/ff123cc045318f1a4b52b2bbe9926d27cf04bbf5?x=x&version=2",
            "client": "ZulipElectron",
            "content": "<p>I'd be down for a haskell swarm</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 177743045,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "lthyde@gmail.com",
            "sender_full_name": "Meg Koch-Hyde (she/they) (F1'19)",
            "sender_id": 234280,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "beginner project ideas / pair with me?",
            "submessages": [],
            "timestamp": 1570646183,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/5c76b2c555785c8a87577bc81fe538bc03a8b463?x=x&version=2",
            "client": "website",
            "content": "<p>yaay! i think this will be great :)</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 177743110,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "c@chirag.io",
            "sender_full_name": "Chirag Dav\u00e9 (he) (F1'19)",
            "sender_id": 234049,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "beginner project ideas / pair with me?",
            "submessages": [],
            "timestamp": 1570646239,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/9c42d0ccee4e9835cde7dcf4ddf7f6a399d852f5?x=x&version=2",
            "client": "ZulipElectron",
            "content": "<p>amazing! here is our event: <a href=\"https://www.recurse.com/calendar/7716\" target=\"_blank\" title=\"https://www.recurse.com/calendar/7716\">https://www.recurse.com/calendar/7716</a></p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 177750116,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "lainedkendall@gmail.com",
            "sender_full_name": "Laine Kendall (she/they) (F2'19)",
            "sender_id": 240732,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "beginner project ideas / pair with me?",
            "submessages": [],
            "timestamp": 1570651122,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/ff123cc045318f1a4b52b2bbe9926d27cf04bbf5?x=x&version=2",
            "client": "ZulipElectron",
            "content": "<p>Would it be possible to have it at another time, since I'll be at the music production interest group meeting (3-4) for most of it? If not, no worries, I'll see about catching the tail end of it.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 177761657,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "lthyde@gmail.com",
            "sender_full_name": "Meg Koch-Hyde (she/they) (F1'19)",
            "sender_id": 234280,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "beginner project ideas / pair with me?",
            "submessages": [],
            "timestamp": 1570660001,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/e4646754f063094f39466a566be289082e138af5?x=x&version=2",
            "client": "website",
            "content": "<p>(will be absent for the next couple of days, distressed to miss this event! Have fun)</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 177762010,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "perezv815@gmail.com",
            "sender_full_name": "Vincent Perez (F2'19)",
            "sender_id": 240629,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "beginner project ideas / pair with me?",
            "submessages": [],
            "timestamp": 1570660380,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/9c42d0ccee4e9835cde7dcf4ddf7f6a399d852f5?x=x&version=2",
            "client": "ZulipElectron",
            "content": "<p><span class=\"user-mention\" data-user-id=\"234280\">@Louis Hyde (he/they) (F1'19)</span> great point i also realized it's during other group meetings so maybe i should move it to 4pm - 5:30pm? how do ppl feel about that? <span class=\"user-mention\" data-user-id=\"234049\">@Chirag Dav\u00e9 (he) (F1'19)</span> <span class=\"user-mention\" data-user-id=\"233917\">@Max Hallinan (he/they) (F1'19)</span> <span class=\"user-mention\" data-user-id=\"234671\">@Louis Kruger (he) (F1'19)</span> and anyone else who wants to come</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 177827997,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "lainedkendall@gmail.com",
            "sender_full_name": "Laine Kendall (she/they) (F2'19)",
            "sender_id": 240732,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "beginner project ideas / pair with me?",
            "submessages": [],
            "timestamp": 1570725256,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/ff123cc045318f1a4b52b2bbe9926d27cf04bbf5?x=x&version=2",
            "client": "ZulipElectron",
            "content": "<p>That time would work for me!</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 177831233,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "lthyde@gmail.com",
            "sender_full_name": "Meg Koch-Hyde (she/they) (F1'19)",
            "sender_id": 234280,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "beginner project ideas / pair with me?",
            "submessages": [],
            "timestamp": 1570727293,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/5c76b2c555785c8a87577bc81fe538bc03a8b463?x=x&version=2",
            "client": "website",
            "content": "<p>that works for me as well : )</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 177832569,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "c@chirag.io",
            "sender_full_name": "Chirag Dav\u00e9 (he) (F1'19)",
            "sender_id": 234049,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "beginner project ideas / pair with me?",
            "submessages": [],
            "timestamp": 1570728231,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/edf8c8e78f184bdc167fe0575aa89ba3?d=identicon&version=1",
            "client": "website",
            "content": "<p>Good for me :)</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 177835040,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "maxhallinan@gmail.com",
            "sender_full_name": "Max Hallinan (he/they) (W1'19)",
            "sender_id": 233917,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "beginner project ideas / pair with me?",
            "submessages": [],
            "timestamp": 1570729874,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/9c42d0ccee4e9835cde7dcf4ddf7f6a399d852f5?x=x&version=2",
            "client": "ZulipElectron",
            "content": "<p>woooo! changing on calendar event!</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 177835397,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "lainedkendall@gmail.com",
            "sender_full_name": "Laine Kendall (she/they) (F2'19)",
            "sender_id": 240732,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "beginner project ideas / pair with me?",
            "submessages": [],
            "timestamp": 1570730076,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/9c42d0ccee4e9835cde7dcf4ddf7f6a399d852f5?x=x&version=2",
            "client": "ZulipElectron",
            "content": "<p>reminder everyone: we are meeting in sammet at 4pm. feel free to come and go until 5:30</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 177846819,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "lainedkendall@gmail.com",
            "sender_full_name": "Laine Kendall (she/they) (F2'19)",
            "sender_id": 240732,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "beginner project ideas / pair with me?",
            "submessages": [],
            "timestamp": 1570736817,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/09b7283e227e05f229fd6b6b70bcdba7?d=identicon&version=1",
            "client": "ZulipElectron",
            "content": "<p>atom://teletype/portal/45524420-bd93-421d-a272-fe2627456779</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 177848994,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "louisk@gmail.com",
            "sender_full_name": "Louis Kruger (he) (F1'19)",
            "sender_id": 234671,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "beginner project ideas / pair with me?",
            "submessages": [],
            "timestamp": 1570738305,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/7580ab83ada9265285a940c5a1098204?d=identicon&version=1",
            "client": "ZulipElectron",
            "content": "<p>I'm just going to leave this here...<br>\n<a href=\"https://aphyr.com/posts/342-typing-the-technical-interview\" target=\"_blank\" title=\"https://aphyr.com/posts/342-typing-the-technical-interview\">https://aphyr.com/posts/342-typing-the-technical-interview</a></p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 177954794,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1104",
                    "emoji_name": "haskell",
                    "reaction_type": "realm_emoji",
                    "user": {
                        "email": "c@chirag.io",
                        "full_name": "Chirag Dav\u00e9 (he) (F1'19)",
                        "id": 234049
                    },
                    "user_id": 234049
                },
                {
                    "emoji_code": "1104",
                    "emoji_name": "haskell",
                    "reaction_type": "realm_emoji",
                    "user": {
                        "email": "shae.erisson@gmail.com",
                        "full_name": "Shae Matijs Erisson (he) (F1'19)",
                        "id": 221819
                    },
                    "user_id": 221819
                }
            ],
            "recipient_id": 22667,
            "sender_email": "ssbothwell@gmail.com",
            "sender_full_name": "Solomon Bothwell (he) (F2'19)",
            "sender_id": 240589,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "beginner project ideas / pair with me?",
            "submessages": [],
            "timestamp": 1570832498,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/5c76b2c555785c8a87577bc81fe538bc03a8b463?x=x&version=2",
            "client": "website",
            "content": "<p>(deleted)</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 178139056,
            "is_me_message": false,
            "last_edit_timestamp": 1571086987,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "c@chirag.io",
            "sender_full_name": "Chirag Dav\u00e9 (he) (F1'19)",
            "sender_id": 234049,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "beginner project ideas / pair with me?",
            "submessages": [],
            "timestamp": 1571086982,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/5c76b2c555785c8a87577bc81fe538bc03a8b463?x=x&version=2",
            "client": "website",
            "content": "<blockquote>\n<p>I'm just going to leave this here...<br>\n<a href=\"https://aphyr.com/posts/342-typing-the-technical-interview\" target=\"_blank\" title=\"https://aphyr.com/posts/342-typing-the-technical-interview\">https://aphyr.com/posts/342-typing-the-technical-interview</a></p>\n</blockquote>\n<p>Hask is not a category.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 178139078,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "c@chirag.io",
            "sender_full_name": "Chirag Dav\u00e9 (he) (F1'19)",
            "sender_id": 234049,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "beginner project ideas / pair with me?",
            "submessages": [],
            "timestamp": 1571087002,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/7580ab83ada9265285a940c5a1098204?d=identicon&version=1",
            "client": "ZulipElectron",
            "content": "<p><code>You smile kindly. \u201cHaskell is a dynamically-typed, interpreted language.\u201d</code></p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 178139205,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "ssbothwell@gmail.com",
            "sender_full_name": "Solomon Bothwell (he) (F2'19)",
            "sender_id": 240589,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "beginner project ideas / pair with me?",
            "submessages": [],
            "timestamp": 1571087091,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/5c76b2c555785c8a87577bc81fe538bc03a8b463?x=x&version=2",
            "client": "website",
            "content": "<p>ugh this was literally so amazing to read. thanks hahah</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 178139700,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "c@chirag.io",
            "sender_full_name": "Chirag Dav\u00e9 (he) (F1'19)",
            "sender_id": 234049,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "beginner project ideas / pair with me?",
            "submessages": [],
            "timestamp": 1571087498,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/5c76b2c555785c8a87577bc81fe538bc03a8b463?x=x&version=2",
            "client": "website",
            "content": "<p><a href=\"https://leanpub.com/finding-success-in-haskell\" target=\"_blank\" title=\"https://leanpub.com/finding-success-in-haskell\">https://leanpub.com/finding-success-in-haskell</a></p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 178139723,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "+1",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "perezv815@gmail.com",
                        "full_name": "Vincent Perez (F2'19)",
                        "id": 240629
                    },
                    "user_id": 240629
                }
            ],
            "recipient_id": 22667,
            "sender_email": "c@chirag.io",
            "sender_full_name": "Chirag Dav\u00e9 (he) (F1'19)",
            "sender_id": 234049,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "this book looks interesting",
            "submessages": [],
            "timestamp": 1571087515,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/8776bd2d19cdb1399c4e9589d9397d57290e5729?x=x&version=2",
            "client": "website",
            "content": "<p>This got long enough for me to remove it and dump my incoherent thoughts into a draft blog post</p>\n<p>But in summary, I wanted to know why I can fmap over any Functor, but I can only filter a list. <br>\nI asked about Foldable and Traversable.<br>\nFoldable can reduce a bunch of values to one single value, but not more than one.<br>\nTraversable is required to preserve the entire original structure.</p>\n<p>My question now has two IRC channels arguing about whether non-standard typeclasses such as Witherable and MonoFoldable are principled or just ad-hoc, and some people are now saying Foldable is equally ad-hoc and needs a saner basis.</p>\n<blockquote>\n<p>Foldable is what's left of a Traversable on some category of algebras when you forget everything but the carrier, it's the things you can do that still make sense even with the wrong maps</p>\n</blockquote>\n<p>Whew, exciting!</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 178141510,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "shae.erisson@gmail.com",
            "sender_full_name": "Shae Matijs Erisson (he) (F1'19)",
            "sender_id": 221819,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Why can I only filter a list?",
            "submessages": [],
            "timestamp": 1571089109,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/8776bd2d19cdb1399c4e9589d9397d57290e5729?x=x&version=2",
            "client": "website",
            "content": "<p>I think the real answer is that I need to make time before end of batch to read through all of the <a href=\"https://wiki.haskell.org/Typeclassopedia\" target=\"_blank\" title=\"https://wiki.haskell.org/Typeclassopedia\">Typeclassopedia</a> and implement as many instances as I can for a few data types.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 178141558,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "shae.erisson@gmail.com",
            "sender_full_name": "Shae Matijs Erisson (he) (F1'19)",
            "sender_id": 221819,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Why can I only filter a list?",
            "submessages": [],
            "timestamp": 1571089185,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/ff123cc045318f1a4b52b2bbe9926d27cf04bbf5?x=x&version=2",
            "client": "ZulipElectron",
            "content": "<p>I've also been meaning to read through typeclassopedia sometime, so if you would like to pair on any of those instance implementations, let me know!</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 178142185,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "+1",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "shae.erisson@gmail.com",
                        "full_name": "Shae Matijs Erisson (he) (F1'19)",
                        "id": 221819
                    },
                    "user_id": 221819
                }
            ],
            "recipient_id": 22667,
            "sender_email": "lthyde@gmail.com",
            "sender_full_name": "Meg Koch-Hyde (she/they) (F1'19)",
            "sender_id": 234280,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Why can I only filter a list?",
            "submessages": [],
            "timestamp": 1571089797,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/7580ab83ada9265285a940c5a1098204?d=identicon&version=1",
            "client": "ZulipElectron",
            "content": "<p>I'm happy to pair on this as well!</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 178146141,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "ssbothwell@gmail.com",
            "sender_full_name": "Solomon Bothwell (he) (F2'19)",
            "sender_id": 240589,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Why can I only filter a list?",
            "submessages": [],
            "timestamp": 1571093993,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/7580ab83ada9265285a940c5a1098204?d=identicon&version=1",
            "client": "ZulipElectron",
            "content": "<p>I've got a Stack project with multiple executables. My Main modules are organized like:</p>\n<div class=\"codehilite\"><pre><span></span>app/UntypedLCI/Main.hs\napp/TypedLCI/Main.hs\n...\n</pre></div>\n\n\n<p>In <code>package.yaml</code> I have:</p>\n<div class=\"codehilite\"><pre><span></span>executables:\n  untypedLCI:\n    main:                Main.hs\n    source-dirs:         app/UntypedLCI\n...\n</pre></div>\n\n\n<p>The Main modules are named:</p>\n<div class=\"codehilite\"><pre><span></span>Module UntypedLCI.Main where\n...\n</pre></div>\n\n\n<p>When I build i get:</p>\n<div class=\"codehilite\"><pre><span></span>output was redirected with -o, but no output will be generated because there is no Main module.\n</pre></div>\n\n\n<p>Any ideas whats going on?</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 178217331,
            "is_me_message": false,
            "last_edit_timestamp": 1571162154,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "ssbothwell@gmail.com",
            "sender_full_name": "Solomon Bothwell (he) (F2'19)",
            "sender_id": 240589,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Stack project with a nested Main module",
            "submessages": [],
            "timestamp": 1571161854,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/7580ab83ada9265285a940c5a1098204?d=identicon&version=1",
            "client": "ZulipElectron",
            "content": "<p>nevermind i resolved it!</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 178218249,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "ssbothwell@gmail.com",
            "sender_full_name": "Solomon Bothwell (he) (F2'19)",
            "sender_id": 240589,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Stack project with a nested Main module",
            "submessages": [],
            "timestamp": 1571162551,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/8776bd2d19cdb1399c4e9589d9397d57290e5729?x=x&version=2",
            "client": "ZulipMobile",
            "content": "<p>What was it?</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 178220696,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "shae.erisson@gmail.com",
            "sender_full_name": "Shae Matijs Erisson (he) (F1'19)",
            "sender_id": 221819,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Stack project with a nested Main module",
            "submessages": [],
            "timestamp": 1571164016,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/7580ab83ada9265285a940c5a1098204?d=identicon&version=1",
            "client": "ZulipElectron",
            "content": "<p>I had two executables in the project one in <code>app/</code> and one in <code>app/UntypedLCI/</code>. Stack doens't like this and needed them both to be nested.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 178223306,
            "is_me_message": false,
            "last_edit_timestamp": 1571165812,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "ssbothwell@gmail.com",
            "sender_full_name": "Solomon Bothwell (he) (F2'19)",
            "sender_id": 240589,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Stack project with a nested Main module",
            "submessages": [],
            "timestamp": 1571165802,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/edf8c8e78f184bdc167fe0575aa89ba3?d=identicon&version=1",
            "client": "website",
            "content": "<p>I try to import filter from Foldable on a regular basis :) I think the intuition is that filter involves a fold of f. The problem is that filter also involves an unfold. As you're tearing down one f, you're building up another f. The Foldable interface only gives you one part of that equation: the fold for any f but not the unfold. I think a (contrived) approach like adding Applicative and Monoid constraints would give you a generalized filter: <code>filter :: forall f. Applicative f =&gt; Foldable f =&gt; Monoid f a =&gt; (a -&gt; Boolean) -&gt; f a -&gt; f a</code>. I'd also interested to see if you could do this without so many constraints for any <code>Recursive</code> instance, since there you do have an interface for both building up and tearing down structure (project and cata). <a href=\"https://hackage.haskell.org/package/recursion-schemes-5.1.3/docs/Data-Functor-Foldable.html#t:Recursive\" target=\"_blank\" title=\"https://hackage.haskell.org/package/recursion-schemes-5.1.3/docs/Data-Functor-Foldable.html#t:Recursive\">https://hackage.haskell.org/package/recursion-schemes-5.1.3/docs/Data-Functor-Foldable.html#t:Recursive</a></p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 178320081,
            "is_me_message": false,
            "last_edit_timestamp": 1571253560,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "maxhallinan@gmail.com",
            "sender_full_name": "Max Hallinan (he/they) (W1'19)",
            "sender_id": 233917,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Why can I only filter a list?",
            "submessages": [],
            "timestamp": 1571253500,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/6485c74622306264ff53449c6f0ca540?d=identicon&version=1",
            "client": "ZulipMobile",
            "content": "<p>I'd be interested to hear the highlights of the IRC arguments you kicked off!</p>\n<p>The (very informal) way I think of it is that map is structure-preserving, and you can't preserve structure while also removing elements. My hunch is that Foldable and Monoid are sufficient to do some sort of filter implementation, but it gets a bit weird when I think about associative data structures (ie HashMap)</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 178349095,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "iain@mccoy.id.au",
            "sender_full_name": "Iain McCoy (he) (SP2'17)",
            "sender_id": 100806,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Why can I only filter a list?",
            "submessages": [],
            "timestamp": 1571285939,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/e4646754f063094f39466a566be289082e138af5?x=x&version=2",
            "client": "website",
            "content": "<p>Hi! I'm struggling with this syntax error:</p>\n<div class=\"codehilite\"><pre><span></span>    Unexpected case expression in function application:\n        case nbPaddingChars of { 0 -&gt; Just 0 }\n    You could write it with parentheses\n    Or perhaps you meant to enable BlockArguments?\n</pre></div>\n\n\n<p>The pb comes from the <code>case</code> expression in the code below:</p>\n<div class=\"codehilite\"><pre><span></span>base64ToWord8 :: String -&gt; Maybe [Word8]\nbase64ToWord8 base64Input =\n  let cleanedBase64Input = takeWhile (/= &#39;=&#39;) base64Input\n      nbPaddingChars = length base64Input - length cleanedBase64Input\n      bits :: Maybe [Bool]\n      bits = concat &lt;$&gt; mapM singleBase64To6Bits cleanedBase64Input\n      nbBitsToRemove =\n         case nbPaddingChars of\n            0 -&gt; Just 0\n            1 -&gt; Just 2\n            2 -&gt; Just 4\n            _ -&gt; Nothing\n       cleanedBits = (\\n l -&gt; take (length l - n)) &lt;$&gt; nbPaddingChars &lt;*&gt; bits\n   in undefined\n</pre></div>\n\n\n<p>I don't understand what's going on, what function expression is the compiler talking about ? Many thanks</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 178901192,
            "is_me_message": false,
            "last_edit_timestamp": 1571868282,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "perezv815@gmail.com",
            "sender_full_name": "Vincent Perez (F2'19)",
            "sender_id": 240629,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Unexpected case expression in function application",
            "submessages": [],
            "timestamp": 1571868139,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/e4646754f063094f39466a566be289082e138af5?x=x&version=2",
            "client": "website",
            "content": "<p>Ok, got it, it's because the line <code>cleanedBits = ..</code> is wrongly indented (it should be aligned with the other assignments in the <code>let</code> block), so I guess the compiler thinks that I want to apply the result of the case to some value.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 178901556,
            "is_me_message": false,
            "last_edit_timestamp": 1571868551,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "perezv815@gmail.com",
            "sender_full_name": "Vincent Perez (F2'19)",
            "sender_id": 240629,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Unexpected case expression in function application",
            "submessages": [],
            "timestamp": 1571868512,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/7580ab83ada9265285a940c5a1098204?d=identicon&version=1",
            "client": "ZulipElectron",
            "content": "<p>the joys of white space syntax</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 178958979,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "ssbothwell@gmail.com",
            "sender_full_name": "Solomon Bothwell (he) (F2'19)",
            "sender_id": 240589,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Unexpected case expression in function application",
            "submessages": [],
            "timestamp": 1571928182,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4d074af6cc341ef51b25bb2f738cdb11?d=identicon&version=1",
            "client": "website",
            "content": "<p><a href=\"https://twitter.com/vbhvsgr/status/1187052647456628740\" target=\"_blank\" title=\"https://twitter.com/vbhvsgr/status/1187052647456628740\">https://twitter.com/vbhvsgr/status/1187052647456628740</a></p>\n<div class=\"inline-preview-twitter\"><div class=\"twitter-tweet\"><a href=\"https://twitter.com/vbhvsgr/status/1187052647456628740\" target=\"_blank\"><img class=\"twitter-avatar\" src=\"https://pbs.twimg.com/profile_images/1176157084817272832/7E5A9KeN_normal.jpg\"></a><p>what people think haskell programmers are like:\n\"Bifunctor Functor Applicative Traversable Comonad!!\"\n\nwhat haskell programmers are actually like:\n\"Anyone else think the off-side rule is weird and confusing?\" *colleagues nod in agreement*</p><span>- \u2620\ufe0faccursedUnutterablePerformIO\u2620\ufe0f (@vbhvsgr)</span></div></div>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 178959643,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "vaibhavsagar@gmail.com",
            "sender_full_name": "Vaibhav Sagar (he) (F1'16)",
            "sender_id": 100041,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Unexpected case expression in function application",
            "submessages": [],
            "timestamp": 1571928560,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/8776bd2d19cdb1399c4e9589d9397d57290e5729?x=x&version=2",
            "client": "website",
            "content": "<p>There's a Haskell CoHack event this weekend, if you want to attend you'll need to join the event: <a href=\"https://www.meetup.com/NY-Haskell/events/261277368/\" target=\"_blank\" title=\"https://www.meetup.com/NY-Haskell/events/261277368/\">https://www.meetup.com/NY-Haskell/events/261277368/</a><br>\nI'm on the waitlist, not sure if I can convince the organizers to open up a few more spots.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 179260535,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "shae.erisson@gmail.com",
            "sender_full_name": "Shae Matijs Erisson (he) (F1'19)",
            "sender_id": 221819,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Haskell CoHack this weekend",
            "submessages": [],
            "timestamp": 1572287317,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/e4646754f063094f39466a566be289082e138af5?x=x&version=2",
            "client": "website",
            "content": "<p>I think I took the last non waiting list spot this morning</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 179273293,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "perezv815@gmail.com",
            "sender_full_name": "Vincent Perez (F2'19)",
            "sender_id": 240629,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Haskell CoHack this weekend",
            "submessages": [],
            "timestamp": 1572295165,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/edf8c8e78f184bdc167fe0575aa89ba3?d=identicon&version=1",
            "client": "website",
            "content": "<p>I think there was some talk about De Bruijn indexing at some point. This is an interesting post (x-posting from /r/haskell) about using a mix of indexes and names, with Haskell implementation. <a href=\"https://boarders.github.io/posts/locally-nameless/\" target=\"_blank\" title=\"https://boarders.github.io/posts/locally-nameless/\">https://boarders.github.io/posts/locally-nameless/</a></p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 179287636,
            "is_me_message": false,
            "last_edit_timestamp": 1572306333,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "maxhallinan@gmail.com",
            "sender_full_name": "Max Hallinan (he/they) (W1'19)",
            "sender_id": 233917,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Hybrid de Bruijn index approach",
            "submessages": [],
            "timestamp": 1572306312,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/7580ab83ada9265285a940c5a1098204?d=identicon&version=1",
            "client": "ZulipElectron",
            "content": "<p>yeah! I might try this technique out when I do <code>system F</code>in a week or two</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 179385879,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "ssbothwell@gmail.com",
            "sender_full_name": "Solomon Bothwell (he) (F2'19)",
            "sender_id": 240589,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Hybrid de Bruijn index approach",
            "submessages": [],
            "timestamp": 1572390660,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/09b7283e227e05f229fd6b6b70bcdba7?d=identicon&version=1",
            "client": "website",
            "content": "<p>Curly braces and Semicolons forever.  And props to the Haskell language devs for supporting good clear syntax, even the \"community\" prefers the other.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 179563753,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "louisk@gmail.com",
            "sender_full_name": "Louis Kruger (he) (F1'19)",
            "sender_id": 234671,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Unexpected case expression in function application",
            "submessages": [],
            "timestamp": 1572547656,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/09b7283e227e05f229fd6b6b70bcdba7?d=identicon&version=1",
            "client": "website",
            "content": "<p>There was once a production bug in a Python codebase I was working on that was caused by \"successful\" auto-merge-conflict resolution.  Two pieces of code (with different indentation levels) auto-merged in the wrong order and there was nary a clue about any potential problem.</p>\n<p>This could not have happened in a language without whitespace as syntax - the mismatched braces would have caused a build break (and most likely would failed auto-merge resolution as well)</p>\n<p>(To be fair to Haskell, a merge resolution like this in Haskell is also likely to cause a build break for other reasons)</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 179564233,
            "is_me_message": false,
            "last_edit_timestamp": 1572548022,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "louisk@gmail.com",
            "sender_full_name": "Louis Kruger (he) (F1'19)",
            "sender_id": 234671,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Unexpected case expression in function application",
            "submessages": [],
            "timestamp": 1572547971,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/9c42d0ccee4e9835cde7dcf4ddf7f6a399d852f5?x=x&version=2",
            "client": "ZulipElectron",
            "content": "<p>I am building a project right now with stack and I want to have two things happen:</p>\n<ol>\n<li>Automatic discovery and testing of all spec files</li>\n<li>Automatic hlint testing when running <code>stack test</code></li>\n</ol>\n<p>I know how to achieve each of these separately:</p>\n<ol>\n<li>Put <code>{-# OPTIONS_GHC -F -pgmF hspec-discover #-}</code> into <code>test/Spec.hs</code> (<a href=\"https://hspec.github.io/hspec-discover.html\" target=\"_blank\" title=\"https://hspec.github.io/hspec-discover.html\">https://hspec.github.io/hspec-discover.html</a>)</li>\n<li>Put <code>{-# OPTIONS_GHC -F -pgmF hlint-test #-}</code> into <code>test/Main.hs</code> (<a href=\"https://github.com/Siprj/hlint-test/tree/master\" target=\"_blank\" title=\"https://github.com/Siprj/hlint-test/tree/master\">https://github.com/Siprj/hlint-test/tree/master</a>)</li>\n</ol>\n<p>And then if you run <code>stack test</code> with ONE of these it works successfully but i cannot figure out how to combine them! I've tried two different test suites, putting these lines in the same file, combining them into one <code>options_ghc</code> pragma but I can't figure out how to make it work. <br>\nHas anyone done something similar to this before?</p>\n<p>my code: <a href=\"https://github.com/lainekendall/calculator\" target=\"_blank\" title=\"https://github.com/lainekendall/calculator\">https://github.com/lainekendall/calculator</a></p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 179568107,
            "is_me_message": false,
            "last_edit_timestamp": 1572902886,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "lainedkendall@gmail.com",
            "sender_full_name": "Laine Kendall (she/they) (F2'19)",
            "sender_id": 240732,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "ghc_options question",
            "submessages": [],
            "timestamp": 1572550627,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4d074af6cc341ef51b25bb2f738cdb11?d=identicon&version=1",
            "client": "website",
            "content": "<p>What was the issue with two different test suites?</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 179570961,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "vaibhavsagar@gmail.com",
            "sender_full_name": "Vaibhav Sagar (he) (F1'16)",
            "sender_id": 100041,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "ghc_options question",
            "submessages": [],
            "timestamp": 1572552426,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/e4646754f063094f39466a566be289082e138af5?x=x&version=2",
            "client": "website",
            "content": "<p><a href=\"http://reasonablypolymorphic.com/blog/haskell202x/\" target=\"_blank\" title=\"http://reasonablypolymorphic.com/blog/haskell202x/\">http://reasonablypolymorphic.com/blog/haskell202x/</a></p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 179755506,
            "is_me_message": false,
            "last_edit_timestamp": 1572802101,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "perezv815@gmail.com",
            "sender_full_name": "Vincent Perez (F2'19)",
            "sender_id": 240629,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Is Haskell 2020 dead?",
            "submessages": [],
            "timestamp": 1572802082,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/661412d42ecbf0c0bd354116859a5af3562f8e5f?x=x&version=4",
            "client": "website",
            "content": "<p>hey, i think the author misstated the results of the analysis they cited. namely that analysis concluded \u201cSo, you can only 10 extensions show up in more than 10% of the Haskell files on GitHub, and 20 show up in more than 5%!\u201d, from which the author concluded \u201c an analysis shows that 10% of Haskell files in the wild enable 10 or more extensions\u201d, which is not the same thing. the analysis does not say whether those extensions overlap at all!</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 179755723,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "veit@veitheller.de",
            "sender_full_name": "Veit Heller (he) (S1'17)",
            "sender_id": 101103,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Is Haskell 2020 dead?",
            "submessages": [],
            "timestamp": 1572802425,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/661412d42ecbf0c0bd354116859a5af3562f8e5f?x=x&version=4",
            "client": "website",
            "content": "<p>(i wrote them an email)</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 179755906,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "veit@veitheller.de",
            "sender_full_name": "Veit Heller (he) (S1'17)",
            "sender_id": 101103,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Is Haskell 2020 dead?",
            "submessages": [],
            "timestamp": 1572802727,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/661412d42ecbf0c0bd354116859a5af3562f8e5f?x=x&version=4",
            "client": "website",
            "content": "<p>i really hope a new haskell standard emerges, though!</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 179755911,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "veit@veitheller.de",
            "sender_full_name": "Veit Heller (he) (S1'17)",
            "sender_id": 101103,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Is Haskell 2020 dead?",
            "submessages": [],
            "timestamp": 1572802735,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/9c42d0ccee4e9835cde7dcf4ddf7f6a399d852f5?x=x&version=2",
            "client": "website",
            "content": "<p>hi all! I am going to start a Haskell learning group that will meet weekly at RC. The goal is to have a space for people interested in learning haskell at ANY stage of skill. I think I will structure the meeting by putting 3-4 haskell questions on a tv. The questions will be of various levels, starting with absolute beginner. the higher level ones will be leetcode or 99 haskell problems or something like that. And then you can pair off of people in your level or higher or lower and try and solve together.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 179868013,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f389",
                    "emoji_name": "tada",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "jamesv@riseup.net",
                        "full_name": "James Vaughan (he) (SP1'20)",
                        "id": 248082
                    },
                    "user_id": 248082
                },
                {
                    "emoji_code": "1104",
                    "emoji_name": "haskell",
                    "reaction_type": "realm_emoji",
                    "user": {
                        "email": "ssbothwell@gmail.com",
                        "full_name": "Solomon Bothwell (he) (F2'19)",
                        "id": 240589
                    },
                    "user_id": 240589
                },
                {
                    "emoji_code": "1f389",
                    "emoji_name": "tada",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "ssbothwell@gmail.com",
                        "full_name": "Solomon Bothwell (he) (F2'19)",
                        "id": 240589
                    },
                    "user_id": 240589
                },
                {
                    "emoji_code": "1104",
                    "emoji_name": "haskell",
                    "reaction_type": "realm_emoji",
                    "user": {
                        "email": "vaibhavsagar@gmail.com",
                        "full_name": "Vaibhav Sagar (he) (F1'16)",
                        "id": 100041
                    },
                    "user_id": 100041
                },
                {
                    "emoji_code": "1f389",
                    "emoji_name": "tada",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "shon.feder@gmail.com",
                        "full_name": "Shon Feder (he) (F2'19)",
                        "id": 240588
                    },
                    "user_id": 240588
                }
            ],
            "recipient_id": 22667,
            "sender_email": "lainedkendall@gmail.com",
            "sender_full_name": "Laine Kendall (she/they) (F2'19)",
            "sender_id": 240732,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Let's Learn Haskell (weekly)",
            "submessages": [],
            "timestamp": 1572896656,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/9c42d0ccee4e9835cde7dcf4ddf7f6a399d852f5?x=x&version=2",
            "client": "website",
            "content": "<ol>\n<li>Here is the event ( please come): <a href=\"https://www.recurse.com/calendar/7986\" target=\"_blank\" title=\"https://www.recurse.com/calendar/7986\">https://www.recurse.com/calendar/7986</a></li>\n</ol>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 179868039,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "lainedkendall@gmail.com",
            "sender_full_name": "Laine Kendall (she/they) (F2'19)",
            "sender_id": 240732,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Let's Learn Haskell (weekly)",
            "submessages": [],
            "timestamp": 1572896677,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/9c42d0ccee4e9835cde7dcf4ddf7f6a399d852f5?x=x&version=2",
            "client": "website",
            "content": "<ol start=\"2\">\n<li>Do you have question ideas? lmk!</li>\n</ol>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 179868059,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "lainedkendall@gmail.com",
            "sender_full_name": "Laine Kendall (she/they) (F2'19)",
            "sender_id": 240732,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Let's Learn Haskell (weekly)",
            "submessages": [],
            "timestamp": 1572896689,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/9c42d0ccee4e9835cde7dcf4ddf7f6a399d852f5?x=x&version=2",
            "client": "website",
            "content": "<p><code>test/Spec.hs:2:8: error:\n    File name does not match module name:\n    Saw: \u2018Main\u2019\n    Expected: \u2018Spec\u2019</code></p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 179878390,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "lainedkendall@gmail.com",
            "sender_full_name": "Laine Kendall (she/they) (F2'19)",
            "sender_id": 240732,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "ghc_options question",
            "submessages": [],
            "timestamp": 1572902820,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/9c42d0ccee4e9835cde7dcf4ddf7f6a399d852f5?x=x&version=2",
            "client": "website",
            "content": "<p>This is with exactly what i said and then the following in the <code>package.yaml</code></p>\n<p><code>\ntests:\n  calculator-hspec-test:\n    main:                Spec.hs\n    source-dirs:         test\n    ghc-options:\n    - -threaded\n    - -rtsopts\n    - -with-rtsopts=-N\n    dependencies:\n    - calculator\n    - hlint\n    - hlint-test\n    - hspec\n    - QuickCheck\n  calculator-hlint-test:\n    main:                Main.hs\n    source-dirs:         test\n    ghc-options:\n    - -threaded\n    - -rtsopts\n    - -with-rtsopts=-N\n    dependencies:\n    - calculator\n    - hlint\n    - hlint-test\n    - hspec\n    - QuickCheck\n</code></p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 179878427,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "lainedkendall@gmail.com",
            "sender_full_name": "Laine Kendall (she/they) (F2'19)",
            "sender_id": 240732,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "ghc_options question",
            "submessages": [],
            "timestamp": 1572902859,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4d074af6cc341ef51b25bb2f738cdb11?d=identicon&version=1",
            "client": "website",
            "content": "<p>Did you try renaming <code>Main.hs</code> to <code>Spec.hs</code>? You might have to move it to a separate directory so it doesn't conflict with your regular tests.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 179881691,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "vaibhavsagar@gmail.com",
            "sender_full_name": "Vaibhav Sagar (he) (F1'16)",
            "sender_id": 100041,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "ghc_options question",
            "submessages": [],
            "timestamp": 1572904959,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/7580ab83ada9265285a940c5a1098204?d=identicon&version=1",
            "client": "ZulipElectron",
            "content": "<p>That feeling when you are chasing a bug in your typechecker for several days until you arrive at this piece of code you vaguely remember writing:</p>\n<div class=\"codehilite\"><pre><span></span>typecheck (Let _ t1 t2) = typecheck t1 &gt;&gt; typecheck t2 -- Is this suspect?\n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 179886747,
            "is_me_message": false,
            "last_edit_timestamp": 1572908932,
            "reactions": [
                {
                    "emoji_code": "1f923",
                    "emoji_name": "rolling_on_the_floor_laughing",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "annie.cherk@gmail.com",
                        "full_name": "Annie Cherkaev (she/they) (m4'18)",
                        "id": 9502
                    },
                    "user_id": 9502
                },
                {
                    "emoji_code": "1f923",
                    "emoji_name": "rolling_on_the_floor_laughing",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "lainedkendall@gmail.com",
                        "full_name": "Laine Kendall (she/they) (F2'19)",
                        "id": 240732
                    },
                    "user_id": 240732
                },
                {
                    "emoji_code": "1f636",
                    "emoji_name": "speechless",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "lainedkendall@gmail.com",
                        "full_name": "Laine Kendall (she/they) (F2'19)",
                        "id": 240732
                    },
                    "user_id": 240732
                }
            ],
            "recipient_id": 22667,
            "sender_email": "ssbothwell@gmail.com",
            "sender_full_name": "Solomon Bothwell (he) (F2'19)",
            "sender_id": 240589,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Ooops",
            "submessages": [],
            "timestamp": 1572908886,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/9c42d0ccee4e9835cde7dcf4ddf7f6a399d852f5?x=x&version=2",
            "client": "website",
            "content": "<p>I finally figured it out! the most recent code on master has it working <a href=\"https://github.com/lainekendall/calculator\" target=\"_blank\" title=\"https://github.com/lainekendall/calculator\">https://github.com/lainekendall/calculator</a></p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 179941652,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f389",
                    "emoji_name": "tada",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "vaibhavsagar@gmail.com",
                        "full_name": "Vaibhav Sagar (he) (F1'16)",
                        "id": 100041
                    },
                    "user_id": 100041
                }
            ],
            "recipient_id": 22667,
            "sender_email": "lainedkendall@gmail.com",
            "sender_full_name": "Laine Kendall (she/they) (F2'19)",
            "sender_id": 240732,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "ghc_options question",
            "submessages": [],
            "timestamp": 1572967168,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/5e17a07d87aeb04a4fef4e8cab1bc688008c2118?x=x&version=2",
            "client": "ZulipElectron",
            "content": "<p>Anyone working on any Haskell stuff today that I could pair with?</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 179955532,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "jamesv@riseup.net",
            "sender_full_name": "James Vaughan (he) (SP1'20)",
            "sender_id": 248082,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Pairing today?",
            "submessages": [],
            "timestamp": 1572975227,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/c6b498637f2c21e0e1c65b724f63465d?d=identicon&version=1",
            "client": "ZulipElectron",
            "content": "<p>I am! Happy to work on anything with you!</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 179956429,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "mpinkham3@gmail.com",
            "sender_full_name": "Michael Pinkham (he) (W1'19)",
            "sender_id": 248084,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Pairing today?",
            "submessages": [],
            "timestamp": 1572975668,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/e4646754f063094f39466a566be289082e138af5?x=x&version=2",
            "client": "website",
            "content": "<p>At the risk of looking stupid, I'm not sure to get the joke here? Is the bug related to the fact that the first argument of <code>Let</code> is not typechecked ?</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 179960801,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "perezv815@gmail.com",
            "sender_full_name": "Vincent Perez (F2'19)",
            "sender_id": 240629,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Ooops",
            "submessages": [],
            "timestamp": 1572978410,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/e4646754f063094f39466a566be289082e138af5?x=x&version=2",
            "client": "website",
            "content": "<p>Hey, not sure to see where is the fault in the author's reasoning. About extensions overlapping, that might be a good point, though I don't know extensions well enough to assess to what extent it is being a factor.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 179961244,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "perezv815@gmail.com",
            "sender_full_name": "Vincent Perez (F2'19)",
            "sender_id": 240629,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Is Haskell 2020 dead?",
            "submessages": [],
            "timestamp": 1572978619,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/661412d42ecbf0c0bd354116859a5af3562f8e5f?x=x&version=4",
            "client": "website",
            "content": "<p>they claimed that 10% of haskell files use 10 or more extensions, while the original analysis said that \"these 10 extensions are each used by 10% of haskell source files\"</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 180034581,
            "is_me_message": false,
            "last_edit_timestamp": 1573048942,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "veit@veitheller.de",
            "sender_full_name": "Veit Heller (he) (S1'17)",
            "sender_id": 101103,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Is Haskell 2020 dead?",
            "submessages": [],
            "timestamp": 1573048835,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/661412d42ecbf0c0bd354116859a5af3562f8e5f?x=x&version=4",
            "client": "website",
            "content": "<p>i don\u2019t know how helpful of a comment that is, but i don\u2019t think i have a good way of explaining this in text, sorry!</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 180034708,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "veit@veitheller.de",
            "sender_full_name": "Veit Heller (he) (S1'17)",
            "sender_id": 101103,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Is Haskell 2020 dead?",
            "submessages": [],
            "timestamp": 1573048915,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/661412d42ecbf0c0bd354116859a5af3562f8e5f?x=x&version=4",
            "client": "website",
            "content": "<p>basically that might mean that across the 10 extensions, there might be no overlap, and each source file only uses one of them (resulting in 100% of source files using one of the 10 extensions). this is definitely not the case (and unreasonable, because 10% was only the lower cutoff), and the truth probably lies somewhere in between those percentages overlapping completely and those percentages coming from completely disparate files</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 180034980,
            "is_me_message": false,
            "last_edit_timestamp": 1573049097,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "veit@veitheller.de",
            "sender_full_name": "Veit Heller (he) (S1'17)",
            "sender_id": 101103,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Is Haskell 2020 dead?",
            "submessages": [],
            "timestamp": 1573049083,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/661412d42ecbf0c0bd354116859a5af3562f8e5f?x=x&version=4",
            "client": "website",
            "content": "<p>does that help at all?</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 180035121,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "veit@veitheller.de",
            "sender_full_name": "Veit Heller (he) (S1'17)",
            "sender_id": 101103,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Is Haskell 2020 dead?",
            "submessages": [],
            "timestamp": 1573049174,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/e4646754f063094f39466a566be289082e138af5?x=x&version=2",
            "client": "website",
            "content": "<blockquote>\n<p>they claimed that 10% of haskell files use 10 or more extensions, while the original analysis said that \"these 10 extensions are each used by 10% of haskell source files\"</p>\n</blockquote>\n<p>Ah yes indeed it's clearer this way. This seems to be a mistake indeed. Thanks for the clarification!</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 180041489,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "perezv815@gmail.com",
            "sender_full_name": "Vincent Perez (F2'19)",
            "sender_id": 240629,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Is Haskell 2020 dead?",
            "submessages": [],
            "timestamp": 1573053152,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/7580ab83ada9265285a940c5a1098204?d=identicon&version=1",
            "client": "ZulipElectron",
            "content": "<p>Oh, the joke is about the comment <code>-- Is this suspect?</code>. I spent all this time looking for a bug in the typechecker and the whole time i had a line with that comment on it that i hadn't noticed.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 180046391,
            "is_me_message": false,
            "last_edit_timestamp": 1573055953,
            "reactions": [
                {
                    "emoji_code": "1f638",
                    "emoji_name": "smile_cat",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "perezv815@gmail.com",
                        "full_name": "Vincent Perez (F2'19)",
                        "id": 240629
                    },
                    "user_id": 240629
                },
                {
                    "emoji_code": "11847",
                    "emoji_name": "ok",
                    "reaction_type": "realm_emoji",
                    "user": {
                        "email": "perezv815@gmail.com",
                        "full_name": "Vincent Perez (F2'19)",
                        "id": 240629
                    },
                    "user_id": 240629
                }
            ],
            "recipient_id": 22667,
            "sender_email": "ssbothwell@gmail.com",
            "sender_full_name": "Solomon Bothwell (he) (F2'19)",
            "sender_id": 240589,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Ooops",
            "submessages": [],
            "timestamp": 1573055926,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/9c42d0ccee4e9835cde7dcf4ddf7f6a399d852f5?x=x&version=2",
            "client": "website",
            "content": "<p>does anyone have more \"advanced\" question ideas? I remember <span class=\"user-mention\" data-user-id=\"240589\">@Solomon Bothwell (he) (F2'19)</span> in one of our sessions you were talking about redefining some function that was kinda fun....?</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 180047935,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "lainedkendall@gmail.com",
            "sender_full_name": "Laine Kendall (she/they) (F2'19)",
            "sender_id": 240732,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Let's Learn Haskell (weekly)",
            "submessages": [],
            "timestamp": 1573056738,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/9c42d0ccee4e9835cde7dcf4ddf7f6a399d852f5?x=x&version=2",
            "client": "ZulipElectron",
            "content": "<p>level 0: <a href=\"https://gist.github.com/lainekendall/8b7038da2216ed3ae25353727d78188b\" target=\"_blank\" title=\"https://gist.github.com/lainekendall/8b7038da2216ed3ae25353727d78188b\">https://gist.github.com/lainekendall/8b7038da2216ed3ae25353727d78188b</a><br>\nlevel 1: <a href=\"https://gist.github.com/lainekendall/d969a128c71af047f6beb62f01ba2007\" target=\"_blank\" title=\"https://gist.github.com/lainekendall/d969a128c71af047f6beb62f01ba2007\">https://gist.github.com/lainekendall/d969a128c71af047f6beb62f01ba2007</a><br>\nlevel 2: <a href=\"https://gist.github.com/lainekendall/ad4120a28327de4dd9671824fdde87e2\" target=\"_blank\" title=\"https://gist.github.com/lainekendall/ad4120a28327de4dd9671824fdde87e2\">https://gist.github.com/lainekendall/ad4120a28327de4dd9671824fdde87e2</a><br>\nlevel 3: <a href=\"https://gist.github.com/lainekendall/02195095fb1f88faea88a8f0d68ee23f\" target=\"_blank\" title=\"https://gist.github.com/lainekendall/02195095fb1f88faea88a8f0d68ee23f\">https://gist.github.com/lainekendall/02195095fb1f88faea88a8f0d68ee23f</a><br>\nlevel 4: <a href=\"https://gist.github.com/lainekendall/2bcb07464c3924aa548fd7bc3c3fa9f7\" target=\"_blank\" title=\"https://gist.github.com/lainekendall/2bcb07464c3924aa548fd7bc3c3fa9f7\">https://gist.github.com/lainekendall/2bcb07464c3924aa548fd7bc3c3fa9f7</a></p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 180063755,
            "is_me_message": false,
            "last_edit_timestamp": 1573069779,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "lainedkendall@gmail.com",
            "sender_full_name": "Laine Kendall (she/they) (F2'19)",
            "sender_id": 240732,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Let's Learn Haskell (weekly)",
            "submessages": [],
            "timestamp": 1573065835,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4d074af6cc341ef51b25bb2f738cdb11?d=identicon&version=1",
            "client": "website",
            "content": "<p>question idea: define <code>foldl</code> in terms of <code>foldr</code></p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 180067935,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "vaibhavsagar@gmail.com",
            "sender_full_name": "Vaibhav Sagar (he) (F1'16)",
            "sender_id": 100041,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Let's Learn Haskell (weekly)",
            "submessages": [],
            "timestamp": 1573068399,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/9c42d0ccee4e9835cde7dcf4ddf7f6a399d852f5?x=x&version=2",
            "client": "ZulipElectron",
            "content": "<p><a href=\"https://wiki.haskell.org/H-99:_Ninety-Nine_Haskell_Problems\" target=\"_blank\" title=\"https://wiki.haskell.org/H-99:_Ninety-Nine_Haskell_Problems\">https://wiki.haskell.org/H-99:_Ninety-Nine_Haskell_Problems</a></p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 180070259,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "lainedkendall@gmail.com",
            "sender_full_name": "Laine Kendall (she/they) (F2'19)",
            "sender_id": 240732,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Let's Learn Haskell (weekly)",
            "submessages": [],
            "timestamp": 1573069851,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/aa95f44c56874cbf678c428b73aeb3bd?d=identicon&version=1",
            "client": "website",
            "content": "<p>Does anyone have a moment to help me with some scotty/http-conduit stuff? I'm trying to make an http request inside one of my route handlers and the types aren't quite lining up</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 180082586,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "eugene@eugene4.com",
            "sender_full_name": "Eugene Butler (he) (m7'19)",
            "sender_id": 248083,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Scotty/http-conduit",
            "submessages": [],
            "timestamp": 1573078955,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/c6b498637f2c21e0e1c65b724f63465d?d=identicon&version=1",
            "client": "ZulipElectron",
            "content": "<p>Happy to take a look with you!</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 180082837,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "mpinkham3@gmail.com",
            "sender_full_name": "Michael Pinkham (he) (W1'19)",
            "sender_id": 248084,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Scotty/http-conduit",
            "submessages": [],
            "timestamp": 1573079154,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/aa95f44c56874cbf678c428b73aeb3bd?d=identicon&version=1",
            "client": "website",
            "content": "<p>Ah, cool. Where are you?</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 180082977,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "eugene@eugene4.com",
            "sender_full_name": "Eugene Butler (he) (m7'19)",
            "sender_id": 248083,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Scotty/http-conduit",
            "submessages": [],
            "timestamp": 1573079254,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/c6b498637f2c21e0e1c65b724f63465d?d=identicon&version=1",
            "client": "ZulipElectron",
            "content": "<p>I'm on 4 in the food area! Where are you?</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 180083079,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "mpinkham3@gmail.com",
            "sender_full_name": "Michael Pinkham (he) (W1'19)",
            "sender_id": 248084,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Scotty/http-conduit",
            "submessages": [],
            "timestamp": 1573079315,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/aa95f44c56874cbf678c428b73aeb3bd?d=identicon&version=1",
            "client": "website",
            "content": "<p>Upstairs, but I can come down</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 180083125,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "eugene@eugene4.com",
            "sender_full_name": "Eugene Butler (he) (m7'19)",
            "sender_id": 248083,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Scotty/http-conduit",
            "submessages": [],
            "timestamp": 1573079356,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/aa95f44c56874cbf678c428b73aeb3bd?d=identicon&version=1",
            "client": "website",
            "content": "<p>I'm trying to <code>toJSON</code> a variable of type Hash ByteString (of <code>newtype Hash a = MkHash {getHash :: a} deriving (Show, Eq, Ord, Generic)</code>) but something about doing that pegs my cpu and bogs down everything, whether I use a derived ToJSON instance or write one by hand. Does anybody know what I'm doing wrong?</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 180155544,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "eugene@eugene4.com",
            "sender_full_name": "Eugene Butler (he) (m7'19)",
            "sender_id": 248083,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Aeson toJSON troubles",
            "submessages": [],
            "timestamp": 1573148528,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/8776bd2d19cdb1399c4e9589d9397d57290e5729?x=x&version=2",
            "client": "website",
            "content": "<p>Does it work without a parameterized type?</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 180156394,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "shae.erisson@gmail.com",
            "sender_full_name": "Shae Matijs Erisson (he) (F1'19)",
            "sender_id": 221819,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Aeson toJSON troubles",
            "submessages": [],
            "timestamp": 1573149106,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/aa95f44c56874cbf678c428b73aeb3bd?d=identicon&version=1",
            "client": "website",
            "content": "<p>I think that's impossible, right? (Unless I don't understand what you mean)</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 180159158,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "eugene@eugene4.com",
            "sender_full_name": "Eugene Butler (he) (m7'19)",
            "sender_id": 248083,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Aeson toJSON troubles",
            "submessages": [],
            "timestamp": 1573150847,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4d074af6cc341ef51b25bb2f738cdb11?d=identicon&version=1",
            "client": "website",
            "content": "<p>This was something that bit me during my batch: you can't encode an arbitrary ByteString as JSON. Consider converting back and forth from <code>Text</code> and base64-encoding if you need to.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 180166177,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "vaibhavsagar@gmail.com",
            "sender_full_name": "Vaibhav Sagar (he) (F1'16)",
            "sender_id": 100041,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Aeson toJSON troubles",
            "submessages": [],
            "timestamp": 1573154784,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/e4646754f063094f39466a566be289082e138af5?x=x&version=2",
            "client": "website",
            "content": "<p>The following usage of <code>interact</code> is not working as I would expect to. <code>fullParser</code> is a function <code>String -&gt; Either ParseError Tree</code>. When I launch the code below, it's exiting whenever the parsing has an error(ie returns a <code>Left</code>), and printing nothing when the parsing is successful, while I would expect it to simply print the corresponding results of the case block:</p>\n<div class=\"codehilite\"><pre><span></span>processInput :: String -&gt; String\nprocessInput s =\n  let parseResult = fullParser s\n   in case parseResult of\n        Left err -&gt; show err\n        Right t -&gt; show $ eval t\n\nmain :: IO ()\nmain = do\n  putStrLn &quot;Arith REPL&quot;\n  interact processInput\n</pre></div>\n\n\n<p>Any idea of what's going on ? Thanks!</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 180468067,
            "is_me_message": false,
            "last_edit_timestamp": 1573514078,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "perezv815@gmail.com",
            "sender_full_name": "Vincent Perez (F2'19)",
            "sender_id": 240629,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "interact call not working",
            "submessages": [],
            "timestamp": 1573513910,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4d074af6cc341ef51b25bb2f738cdb11?d=identicon&version=1",
            "client": "website",
            "content": "<p>I suspect that <code>interact</code> isn't behaving quite the way you want. Have you tried replacing it with <code>getLine</code> and <code>putStrLn</code> and seeing if that works as you expect?</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 180468286,
            "is_me_message": false,
            "last_edit_timestamp": 1573514214,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "vaibhavsagar@gmail.com",
            "sender_full_name": "Vaibhav Sagar (he) (F1'16)",
            "sender_id": 100041,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "interact call not working",
            "submessages": [],
            "timestamp": 1573514175,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/e4646754f063094f39466a566be289082e138af5?x=x&version=2",
            "client": "website",
            "content": "<p>Yes, it works this way. So indeed, the pb comes with <code>interact</code>, what am I missing here?</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 180468386,
            "is_me_message": false,
            "last_edit_timestamp": 1573514308,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "perezv815@gmail.com",
            "sender_full_name": "Vincent Perez (F2'19)",
            "sender_id": 240629,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "interact call not working",
            "submessages": [],
            "timestamp": 1573514292,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4d074af6cc341ef51b25bb2f738cdb11?d=identicon&version=1",
            "client": "website",
            "content": "<p><code>interact</code> uses <code>getContents</code>, which I think might be slightly different to <code>getLine</code>: <a href=\"http://hackage.haskell.org/package/base-4.12.0.0/docs/src/System.IO.html#interact\" target=\"_blank\" title=\"http://hackage.haskell.org/package/base-4.12.0.0/docs/src/System.IO.html#interact\">http://hackage.haskell.org/package/base-4.12.0.0/docs/src/System.IO.html#interact</a></p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 180468403,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "vaibhavsagar@gmail.com",
            "sender_full_name": "Vaibhav Sagar (he) (F1'16)",
            "sender_id": 100041,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "interact call not working",
            "submessages": [],
            "timestamp": 1573514335,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4d074af6cc341ef51b25bb2f738cdb11?d=identicon&version=1",
            "client": "website",
            "content": "<p>i.e. it doesn't look like it stops at newlines, which I assume you want for a REPL: <a href=\"http://hackage.haskell.org/package/base-4.12.0.0/docs/src/GHC.IO.Handle.Text.html#hGetContents\" target=\"_blank\" title=\"http://hackage.haskell.org/package/base-4.12.0.0/docs/src/GHC.IO.Handle.Text.html#hGetContents\">http://hackage.haskell.org/package/base-4.12.0.0/docs/src/GHC.IO.Handle.Text.html#hGetContents</a></p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 180468486,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "vaibhavsagar@gmail.com",
            "sender_full_name": "Vaibhav Sagar (he) (F1'16)",
            "sender_id": 100041,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "interact call not working",
            "submessages": [],
            "timestamp": 1573514416,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/e4646754f063094f39466a566be289082e138af5?x=x&version=2",
            "client": "website",
            "content": "<p>I see. I'll just stick with <code>getLine</code> in this case. Thank you!</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 180468506,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "+1",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "vaibhavsagar@gmail.com",
                        "full_name": "Vaibhav Sagar (he) (F1'16)",
                        "id": 100041
                    },
                    "user_id": 100041
                }
            ],
            "recipient_id": 22667,
            "sender_email": "perezv815@gmail.com",
            "sender_full_name": "Vincent Perez (F2'19)",
            "sender_id": 240629,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "interact call not working",
            "submessages": [],
            "timestamp": 1573514456,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/7580ab83ada9265285a940c5a1098204?d=identicon&version=1",
            "client": "website",
            "content": "<p>You might be interested in checking out <code>haskeline</code> for your repl.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 180469966,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "+1",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "mpinkham3@gmail.com",
                        "full_name": "Michael Pinkham (he) (W1'19)",
                        "id": 248084
                    },
                    "user_id": 248084
                },
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "+1",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "perezv815@gmail.com",
                        "full_name": "Vincent Perez (F2'19)",
                        "id": 240629
                    },
                    "user_id": 240629
                }
            ],
            "recipient_id": 22667,
            "sender_email": "ssbothwell@gmail.com",
            "sender_full_name": "Solomon Bothwell (he) (F2'19)",
            "sender_id": 240589,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "interact call not working",
            "submessages": [],
            "timestamp": 1573516421,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/c6b498637f2c21e0e1c65b724f63465d?d=identicon&version=1",
            "client": "ZulipElectron",
            "content": "<p>does your parser need to examine multiple lines at a time? if not, what happens if you do:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"nf\">main</span> <span class=\"ow\">::</span> <span class=\"kt\">IO</span> <span class=\"nb\">()</span>\n<span class=\"nf\">main</span> <span class=\"ow\">=</span> <span class=\"kr\">do</span>\n  <span class=\"n\">putStrLn</span> <span class=\"s\">&quot;Arith REPL&quot;</span>\n  <span class=\"n\">interact</span> <span class=\"p\">(</span><span class=\"n\">unlines</span> <span class=\"o\">.</span> <span class=\"n\">map</span> <span class=\"n\">processInput</span> <span class=\"o\">.</span> <span class=\"n\">lines</span><span class=\"p\">)</span>\n</pre></div>\n\n\n<p>?</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 180538807,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "mpinkham3@gmail.com",
            "sender_full_name": "Michael Pinkham (he) (W1'19)",
            "sender_id": 248084,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "interact call not working",
            "submessages": [],
            "timestamp": 1573578933,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/e4646754f063094f39466a566be289082e138af5?x=x&version=2",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-id=\"248084\">@Michael Pinkham (he) (W1'19)</span> it does not need to examine multiple line at a time. This way it <em>does</em> indeed work the way I intended to. I still have trouble wrapping my head around this behaviour, but thanks for this suggestion!</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 180551165,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "perezv815@gmail.com",
            "sender_full_name": "Vincent Perez (F2'19)",
            "sender_id": 240629,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "interact call not working",
            "submessages": [],
            "timestamp": 1573586524,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/edf8c8e78f184bdc167fe0575aa89ba3?d=identicon&version=1",
            "client": "website",
            "content": "<p>Was also curious - I think this explains the behavior: <a href=\"https://stackoverflow.com/questions/16799755/haskell-interact-function\" target=\"_blank\" title=\"https://stackoverflow.com/questions/16799755/haskell-interact-function\">https://stackoverflow.com/questions/16799755/haskell-interact-function</a> , though I'm not sure why it exits when parsing fails. Might be related to an EOF error.</p>\n<p>tl;dr <code>String -&gt; String</code> is a function of the entire stdin content to the entire stdout content. The stream is lazy, so you can read from it as you need it before the entire stream is available (e.g. the process ends). That's why <code>lines</code> works. It's similar to the way you can read the first item in an infinite list without having to compute the entire list. Your original program was parsing the entire stream. I'm guessing that accounts for the unexpected behavior.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 180560473,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "+1",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "perezv815@gmail.com",
                        "full_name": "Vincent Perez (F2'19)",
                        "id": 240629
                    },
                    "user_id": 240629
                },
                {
                    "emoji_code": "1f389",
                    "emoji_name": "tada",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "mpinkham3@gmail.com",
                        "full_name": "Michael Pinkham (he) (W1'19)",
                        "id": 248084
                    },
                    "user_id": 248084
                }
            ],
            "recipient_id": 22667,
            "sender_email": "maxhallinan@gmail.com",
            "sender_full_name": "Max Hallinan (he/they) (W1'19)",
            "sender_id": 233917,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "interact call not working",
            "submessages": [],
            "timestamp": 1573591979,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/9c42d0ccee4e9835cde7dcf4ddf7f6a399d852f5?x=x&version=2",
            "client": "website",
            "content": "<p>Hi All! <br>\n<strong> Let's Learn Haskell Together will be meeting in Church today because Sammet is under construction. </strong></p>\n<p>This week I will encourage people to find problems either from (1) the haskell book, (2) 99 haskell problems (<a href=\"https://wiki.haskell.org/H-99:_Ninety-Nine_Haskell_Problems\" target=\"_blank\" title=\"https://wiki.haskell.org/H-99:_Ninety-Nine_Haskell_Problems\">https://wiki.haskell.org/H-99:_Ninety-Nine_Haskell_Problems</a>), or (3) for more beginners we will install stack and get <a href=\"https://github.com/opqdonut/haskell-exercises\" target=\"_blank\" title=\"https://github.com/opqdonut/haskell-exercises\">https://github.com/opqdonut/haskell-exercises</a> up and running and we can continue going through those exercises.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 180634711,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "26ea",
                    "emoji_name": "church",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "mpinkham3@gmail.com",
                        "full_name": "Michael Pinkham (he) (W1'19)",
                        "id": 248084
                    },
                    "user_id": 248084
                },
                {
                    "emoji_code": "26ea",
                    "emoji_name": "church",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "vaibhavsagar@gmail.com",
                        "full_name": "Vaibhav Sagar (he) (F1'16)",
                        "id": 100041
                    },
                    "user_id": 100041
                },
                {
                    "emoji_code": "26ea",
                    "emoji_name": "church",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "perezv815@gmail.com",
                        "full_name": "Vincent Perez (F2'19)",
                        "id": 240629
                    },
                    "user_id": 240629
                }
            ],
            "recipient_id": 22667,
            "sender_email": "lainedkendall@gmail.com",
            "sender_full_name": "Laine Kendall (she/they) (F2'19)",
            "sender_id": 240732,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Let's Learn Haskell (weekly)",
            "submessages": [],
            "timestamp": 1573657554,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/e4646754f063094f39466a566be289082e138af5?x=x&version=2",
            "client": "website",
            "content": "<p>Thanks <span class=\"user-mention\" data-user-id=\"233917\">@Max Hallinan (he/they) (W1'19)</span> for the clarification!</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 180637957,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "+1",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "maxhallinan@gmail.com",
                        "full_name": "Max Hallinan (he/they) (W1'19)",
                        "id": 233917
                    },
                    "user_id": 233917
                }
            ],
            "recipient_id": 22667,
            "sender_email": "perezv815@gmail.com",
            "sender_full_name": "Vincent Perez (F2'19)",
            "sender_id": 240629,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "interact call not working",
            "submessages": [],
            "timestamp": 1573659294,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/9c42d0ccee4e9835cde7dcf4ddf7f6a399d852f5?x=x&version=2",
            "client": "website",
            "content": "<p><a href=\"https://repl.it/languages/haskell\" target=\"_blank\" title=\"https://repl.it/languages/haskell\">https://repl.it/languages/haskell</a></p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 180658086,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "lainedkendall@gmail.com",
            "sender_full_name": "Laine Kendall (she/they) (F2'19)",
            "sender_id": 240732,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Let's Learn Haskell (weekly)",
            "submessages": [],
            "timestamp": 1573670688,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/e4646754f063094f39466a566be289082e138af5?x=x&version=2",
            "client": "website",
            "content": "<p>Does anyone know if it is possible (and if yes, how) to configure Nix an alternative  location to the Nix store ? The default one being <code>/nix</code>. The reason why I need this is my root partition is full, and I'd like to put Nix stuff in my home partition. Note: I'm on Arch.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 181575832,
            "is_me_message": false,
            "last_edit_timestamp": 1574364854,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "perezv815@gmail.com",
            "sender_full_name": "Vincent Perez (F2'19)",
            "sender_id": 240629,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Change nix store location",
            "submessages": [],
            "timestamp": 1574364753,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/661412d42ecbf0c0bd354116859a5af3562f8e5f?x=x&version=4",
            "client": "website",
            "content": "<p><a href=\"https://nixos.org/nix/manual/#sec-building-source\" target=\"_blank\" title=\"https://nixos.org/nix/manual/#sec-building-source\">section 5.3</a> of the manual says the following (quoting it because i haven\u2019t tried it in a while and probably won\u2019t ever again):</p>\n<div class=\"codehilite\"><pre><span></span>Nix keeps its store (the place where packages are stored) in /nix/store by default. This can be changed using --with-store-dir=path.\n\nWarning: It is best not to change the Nix store from its default, since doing so makes it impossible to use pre-built binaries from the standard Nixpkgs channels \u2014 that is, all packages will need to be built from source.\n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 181576140,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "veit@veitheller.de",
            "sender_full_name": "Veit Heller (he) (S1'17)",
            "sender_id": 101103,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Change nix store location",
            "submessages": [],
            "timestamp": 1574364907,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/661412d42ecbf0c0bd354116859a5af3562f8e5f?x=x&version=4",
            "client": "website",
            "content": "<p>this has to be done during compilation of nix</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 181576185,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "veit@veitheller.de",
            "sender_full_name": "Veit Heller (he) (S1'17)",
            "sender_id": 101103,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Change nix store location",
            "submessages": [],
            "timestamp": 1574364947,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/661412d42ecbf0c0bd354116859a5af3562f8e5f?x=x&version=4",
            "client": "website",
            "content": "<p>i dont know whether pacman lets you customize this? haven\u2019t used arch in a while either</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 181576188,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "veit@veitheller.de",
            "sender_full_name": "Veit Heller (he) (S1'17)",
            "sender_id": 101103,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Change nix store location",
            "submessages": [],
            "timestamp": 1574364948,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/661412d42ecbf0c0bd354116859a5af3562f8e5f?x=x&version=4",
            "client": "website",
            "content": "<p>(and never with nix)</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 181576485,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "veit@veitheller.de",
            "sender_full_name": "Veit Heller (he) (S1'17)",
            "sender_id": 101103,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Change nix store location",
            "submessages": [],
            "timestamp": 1574365099,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/e4646754f063094f39466a566be289082e138af5?x=x&version=2",
            "client": "website",
            "content": "<p>Hmm I see, thanks! However the warning seems pretty annoying, looks like I'm good for resizing my partition..</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 181576493,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "perezv815@gmail.com",
            "sender_full_name": "Vincent Perez (F2'19)",
            "sender_id": 240629,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Change nix store location",
            "submessages": [],
            "timestamp": 1574365107,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/661412d42ecbf0c0bd354116859a5af3562f8e5f?x=x&version=4",
            "client": "website",
            "content": "<p>yeah, it seems discouraging to say the least, and i don\u2019t fully understand why changing the path requires building from source, but then again i\u2019m not super informed about how nix works actually</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 181576557,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "veit@veitheller.de",
            "sender_full_name": "Veit Heller (he) (S1'17)",
            "sender_id": 101103,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Change nix store location",
            "submessages": [],
            "timestamp": 1574365167,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/661412d42ecbf0c0bd354116859a5af3562f8e5f?x=x&version=4",
            "client": "website",
            "content": "<p>(as in, why packages have to be built from source when the path changes)</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 181576683,
            "is_me_message": false,
            "last_edit_timestamp": 1574365228,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "veit@veitheller.de",
            "sender_full_name": "Veit Heller (he) (S1'17)",
            "sender_id": 101103,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Change nix store location",
            "submessages": [],
            "timestamp": 1574365222,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/661412d42ecbf0c0bd354116859a5af3562f8e5f?x=x&version=4",
            "client": "website",
            "content": "<p>good luck!</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 181576728,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "veit@veitheller.de",
            "sender_full_name": "Veit Heller (he) (S1'17)",
            "sender_id": 101103,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Change nix store location",
            "submessages": [],
            "timestamp": 1574365247,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/e4646754f063094f39466a566be289082e138af5?x=x&version=2",
            "client": "website",
            "content": "<p>I don't understand either. Thanks!</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 181577263,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "perezv815@gmail.com",
            "sender_full_name": "Vincent Perez (F2'19)",
            "sender_id": 240629,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Change nix store location",
            "submessages": [],
            "timestamp": 1574365607,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4d074af6cc341ef51b25bb2f738cdb11?d=identicon&version=1",
            "client": "website",
            "content": "<p>FYI there is a <a class=\"stream\" data-stream-id=\"100724\" href=\"/#narrow/stream/100724-nix\">#nix</a> stream</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 181588434,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "vaibhavsagar@gmail.com",
            "sender_full_name": "Vaibhav Sagar (he) (F1'16)",
            "sender_id": 100041,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Change nix store location",
            "submessages": [],
            "timestamp": 1574373348,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4d074af6cc341ef51b25bb2f738cdb11?d=identicon&version=1",
            "client": "website",
            "content": "<p>The reason you have to rebuild everything from source is that all the binaries are built on the assumption that the store is at <code>/nix/store</code>, and if you change it then that means the binary substitution doesn't work anymore</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 181588525,
            "is_me_message": false,
            "last_edit_timestamp": 1574373444,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "vaibhavsagar@gmail.com",
            "sender_full_name": "Vaibhav Sagar (he) (F1'16)",
            "sender_id": 100041,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Change nix store location",
            "submessages": [],
            "timestamp": 1574373398,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4d074af6cc341ef51b25bb2f738cdb11?d=identicon&version=1",
            "client": "website",
            "content": "<p>I would highly highly recommend against changing the store location if there's any other way to achieve what you want</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 181588563,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "+1",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "perezv815@gmail.com",
                        "full_name": "Vincent Perez (F2'19)",
                        "id": 240629
                    },
                    "user_id": 240629
                }
            ],
            "recipient_id": 22667,
            "sender_email": "vaibhavsagar@gmail.com",
            "sender_full_name": "Vaibhav Sagar (he) (F1'16)",
            "sender_id": 100041,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Change nix store location",
            "submessages": [],
            "timestamp": 1574373425,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/e4646754f063094f39466a566be289082e138af5?x=x&version=2",
            "client": "website",
            "content": "<p>I have been using JSaddle-warp recently, and getting this error when browsing my local server in Firefox: <code>Unexpected Duplicate</code>. This seems to be a <a href=\"https://github.com/ghcjs/jsaddle/issues/64\" target=\"_blank\" title=\"https://github.com/ghcjs/jsaddle/issues/64\">firefox specific bug</a>. And indeed, it seems to work on other browsers. Has anyone encountered this issue, and make it work for Firefox? Thanks!</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 181843096,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "perezv815@gmail.com",
            "sender_full_name": "Vincent Perez (F2'19)",
            "sender_id": 240629,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "jsaddle: Unexpected duplicate in Firefox",
            "submessages": [],
            "timestamp": 1574702293,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4d074af6cc341ef51b25bb2f738cdb11?d=identicon&version=1",
            "client": "website",
            "content": "<p>JSaddle doesn't work correctly on any browser except Chrome/Chromium</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 181845867,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "vaibhavsagar@gmail.com",
            "sender_full_name": "Vaibhav Sagar (he) (F1'16)",
            "sender_id": 100041,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "jsaddle: Unexpected duplicate in Firefox",
            "submessages": [],
            "timestamp": 1574704265,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4d074af6cc341ef51b25bb2f738cdb11?d=identicon&version=1",
            "client": "website",
            "content": "<p>the generated JavaScript should work, just not JSaddle</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 181845904,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "vaibhavsagar@gmail.com",
            "sender_full_name": "Vaibhav Sagar (he) (F1'16)",
            "sender_id": 100041,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "jsaddle: Unexpected duplicate in Firefox",
            "submessages": [],
            "timestamp": 1574704291,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/e4646754f063094f39466a566be289082e138af5?x=x&version=2",
            "client": "website",
            "content": "<p>Hmm okay. That's annoying, since I don't want to use Chrome or Chromium. Thanks!</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 181849280,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "perezv815@gmail.com",
            "sender_full_name": "Vincent Perez (F2'19)",
            "sender_id": 240629,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "jsaddle: Unexpected duplicate in Firefox",
            "submessages": [],
            "timestamp": 1574706531,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/e4646754f063094f39466a566be289082e138af5?x=x&version=2",
            "client": "website",
            "content": "<p>(it seems to work on the Gnome web browser though)</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 181849349,
            "is_me_message": false,
            "last_edit_timestamp": 1574706676,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "perezv815@gmail.com",
            "sender_full_name": "Vincent Perez (F2'19)",
            "sender_id": 240629,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "jsaddle: Unexpected duplicate in Firefox",
            "submessages": [],
            "timestamp": 1574706577,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/612c7c2a108d7850c62d1d2293a481aa42855408?x=x&version=2",
            "client": "ZulipMobile",
            "content": "<p><a href=\"https://www.srid.ca/haskell-nix.html\" target=\"_blank\" title=\"https://www.srid.ca/haskell-nix.html\">https://www.srid.ca/haskell-nix.html</a></p>\n<p>This is inspiring and makes me want to try nix again</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 182013636,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "PLRedmond@gmail.com",
            "sender_full_name": "Patrick Redmond (W'14)",
            "sender_id": 5014,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Nix",
            "submessages": [],
            "timestamp": 1574857614,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/d6fda466a076d48c1d65edc5fb456d027e2b9d4f?x=x&version=2",
            "client": "website",
            "content": "<p>Hey guys! I found this interesting thing happening next summer that people might be interested in.</p>\n<p><a href=\"http://www.appliedcategorytheory.org\" target=\"_blank\" title=\"http://www.appliedcategorytheory.org\">http://www.appliedcategorytheory.org</a></p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 182668791,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "+1",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "lainedkendall@gmail.com",
                        "full_name": "Laine Kendall (she/they) (F2'19)",
                        "id": 240732
                    },
                    "user_id": 240732
                }
            ],
            "recipient_id": 22667,
            "sender_email": "noorganti@gmail.com",
            "sender_full_name": "Noor Ganti (they) (SP1'20)",
            "sender_id": 248098,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "category theory",
            "submessages": [],
            "timestamp": 1575559120,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4d074af6cc341ef51b25bb2f738cdb11?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-id=\"8474\">@Jasdev Singh (he) (F1'15)</span> went this year <span aria-label=\"smiley\" class=\"emoji emoji-1f603\" role=\"img\" title=\"smiley\">:smiley:</span></p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 182670796,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "vaibhavsagar@gmail.com",
            "sender_full_name": "Vaibhav Sagar (he) (F1'16)",
            "sender_id": 100041,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "category theory",
            "submessages": [],
            "timestamp": 1575560183,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4d074af6cc341ef51b25bb2f738cdb11?d=identicon&version=1",
            "client": "website",
            "content": "<p>actually he went to a different thing in Utrecht IIRC</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 182671142,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "vaibhavsagar@gmail.com",
            "sender_full_name": "Vaibhav Sagar (he) (F1'16)",
            "sender_id": 100041,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "category theory",
            "submessages": [],
            "timestamp": 1575560385,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/21287dfce6dddb90a8ed414cc54a27e57eb3ed09?x=x&version=2",
            "client": "website",
            "content": "<blockquote>\n<p>in Utrecht IIRC</p>\n</blockquote>\n<p>Yep! I\u2019m gonna try and make it out to ACT \u201920 and apply for the adjoint school \ud83e\udd1e\ud83c\udffd It\u2019s my dream at the moment to do research with those folks</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 182712049,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f606",
                    "emoji_name": "laughing",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "noorganti@gmail.com",
                        "full_name": "Noor Ganti (they) (SP1'20)",
                        "id": 248098
                    },
                    "user_id": 248098
                }
            ],
            "recipient_id": 22667,
            "sender_email": "jasdev@jasdev.me",
            "sender_full_name": "Jasdev Singh (he) (SP2'20)",
            "sender_id": 8474,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "category theory",
            "submessages": [],
            "timestamp": 1575585091,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/e4646754f063094f39466a566be289082e138af5?x=x&version=2",
            "client": "website",
            "content": "<p>Anyone going tomorrow ? <a href=\"https://www.meetup.com/NY-Haskell/events/265750056/\" target=\"_blank\" title=\"https://www.meetup.com/NY-Haskell/events/265750056/\">https://www.meetup.com/NY-Haskell/events/265750056/</a></p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 182778100,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "perezv815@gmail.com",
            "sender_full_name": "Vincent Perez (F2'19)",
            "sender_id": 240629,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Haskell CoHack this weekend",
            "submessages": [],
            "timestamp": 1575650091,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/7580ab83ada9265285a940c5a1098204?d=identicon&version=1",
            "client": "website",
            "content": "<p>I'm trying to use <code>cabal2nix</code> to make a nix derivation for use with <code>nix-shell</code> and <code>nix-build</code>. The deriivation _looks_ okay, but this is the result I get from <code>nix-shell</code>:</p>\n<div class=\"codehilite\"><pre><span></span>hmud (feature/inventories)X \u03bb cabal2nix . &gt; default.nix\n*** found package.yaml. Using hpack...\nhmud (feature/inventories)X \u03bb nix-shell\nerror: cannot auto-call a function that has an argument without a default value (&#39;mkDerivation&#39;)\n</pre></div>\n\n\n<p>Any ideas how to fix this? I'm not having a lot of luck googling for solutions</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 184036408,
            "is_me_message": false,
            "last_edit_timestamp": 1576983616,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "ssbothwell@gmail.com",
            "sender_full_name": "Solomon Bothwell (he) (F2'19)",
            "sender_id": 240589,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Trouble using cabal2nix",
            "submessages": [],
            "timestamp": 1576983581,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/7580ab83ada9265285a940c5a1098204?d=identicon&version=1",
            "client": "website",
            "content": "<p><code>--shell</code> seemed to do the trick. Now I can use <code>nix-shell</code> to drop into a shell but im not sure how to import my project into ghci for debugging. Using <code>stack ghci</code> I would have all my package's libraries in scope but that isnt the case with <code>nix-shell</code> currently</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 184036968,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "ssbothwell@gmail.com",
            "sender_full_name": "Solomon Bothwell (he) (F2'19)",
            "sender_id": 240589,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Trouble using cabal2nix",
            "submessages": [],
            "timestamp": 1576984690,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/7580ab83ada9265285a940c5a1098204?d=identicon&version=1",
            "client": "website",
            "content": "<p>derp. i want <code>cabal repl</code>. i've never used cabal on its own before <span aria-label=\"upside down\" class=\"emoji emoji-1f643\" role=\"img\" title=\"upside down\">:upside_down:</span></p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 184037058,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "ssbothwell@gmail.com",
            "sender_full_name": "Solomon Bothwell (he) (F2'19)",
            "sender_id": 240589,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Trouble using cabal2nix",
            "submessages": [],
            "timestamp": 1576984895,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/3919cea3a42c84ebd524864a4f242513317a5302?x=x&version=2",
            "client": "ZulipMobile",
            "content": "<p>I found this tricky to set up too! It seems like the intended use is to generate a release.nix and call it from default or shell.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 184037582,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "brian@brianthicks.com",
            "sender_full_name": "Brian Hicks (he) (m1'20)",
            "sender_id": 255038,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Trouble using cabal2nix",
            "submessages": [],
            "timestamp": 1576986011,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/3919cea3a42c84ebd524864a4f242513317a5302?x=x&version=2",
            "client": "ZulipMobile",
            "content": "<p>At least that\u2019s what the nixpkgs manual says.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 184037585,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "brian@brianthicks.com",
            "sender_full_name": "Brian Hicks (he) (m1'20)",
            "sender_id": 255038,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Trouble using cabal2nix",
            "submessages": [],
            "timestamp": 1576986039,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/c6b498637f2c21e0e1c65b724f63465d?d=identicon&version=1",
            "client": "website",
            "content": "<p>Curious about Haskell? Seasoned pro? Come join us in Sammet today from 2:30-4 to work on your functional programming skills, ask any questions you have, and learn about this fun language and community.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 185134645,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1104",
                    "emoji_name": "haskell",
                    "reaction_type": "realm_emoji",
                    "user": {
                        "email": "catwind7+recursecenter@gmail.com",
                        "full_name": "Alan Lin (he) (W1'19)",
                        "id": 247176
                    },
                    "user_id": 247176
                },
                {
                    "emoji_code": "1104",
                    "emoji_name": "haskell",
                    "reaction_type": "realm_emoji",
                    "user": {
                        "email": "shae.erisson@gmail.com",
                        "full_name": "Shae Matijs Erisson (he) (F1'19)",
                        "id": 221819
                    },
                    "user_id": 221819
                },
                {
                    "emoji_code": "1104",
                    "emoji_name": "haskell",
                    "reaction_type": "realm_emoji",
                    "user": {
                        "email": "ssbothwell@gmail.com",
                        "full_name": "Solomon Bothwell (he) (F2'19)",
                        "id": 240589
                    },
                    "user_id": 240589
                },
                {
                    "emoji_code": "1104",
                    "emoji_name": "haskell",
                    "reaction_type": "realm_emoji",
                    "user": {
                        "email": "vaibhavsagar@gmail.com",
                        "full_name": "Vaibhav Sagar (he) (F1'16)",
                        "id": 100041
                    },
                    "user_id": 100041
                }
            ],
            "recipient_id": 22667,
            "sender_email": "mpinkham3@gmail.com",
            "sender_full_name": "Michael Pinkham (he) (W1'19)",
            "sender_id": 248084,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Let's Learn Haskell (weekly)",
            "submessages": [],
            "timestamp": 1578503701,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/c6b498637f2c21e0e1c65b724f63465d?d=identicon&version=1",
            "client": "ZulipElectron",
            "content": "<p><span class=\"user-group-mention\" data-user-group-id=\"41\">@Currently at RC</span> this will be happening again today at 2:30pm in Sammet, welcome to all! Feel free to show up late and/or leave early. All levels and topics are fair game, including but not limited to:</p>\n<ul>\n<li>Setting up a Haskell environment</li>\n<li>Haskell practice problems</li>\n<li>Why would you want to use it?</li>\n<li>Haskell-adjacent communities and similar problems. Looking at you, Elm, Agda, OCaml, Rust, Idris, etc folks</li>\n<li>Tidalcycles, parsers, compilers, yes even guis</li>\n</ul>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 185725832,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "mpinkham3@gmail.com",
            "sender_full_name": "Michael Pinkham (he) (W1'19)",
            "sender_id": 248084,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Let's Learn Haskell (weekly)",
            "submessages": [],
            "timestamp": 1579111756,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/e863ed0b1d0b6d53a9fd9bd0de8916afdb2a2038?x=x&version=5",
            "client": "ZulipElectron",
            "content": "<p><a href=\"/user_uploads/13/mNop9HwL4k5tQTzbDwoVArg7/Will-Kurt-Get-Programming-with-Haskell-Manning-Publications-2018.pdf\" target=\"_blank\" title=\"Will-Kurt-Get-Programming-with-Haskell-Manning-Publications-2018.pdf\">Will-Kurt-Get-Programming-with-Haskell-Manning-Publications-2018.pdf</a></p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 185736325,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "+1",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "joseph@good-idea.studio",
                        "full_name": "Joseph Thomas (he) (W2'20)",
                        "id": 255208
                    },
                    "user_id": 255208
                }
            ],
            "recipient_id": 22667,
            "sender_email": "pseuyi@gmail.com",
            "sender_full_name": "freda suyi (they) (W1'19)",
            "sender_id": 247147,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Let's Learn Haskell (weekly)",
            "submessages": [],
            "timestamp": 1579117600,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/e863ed0b1d0b6d53a9fd9bd0de8916afdb2a2038?x=x&version=5",
            "client": "ZulipElectron",
            "content": "<p><span class=\"user-mention\" data-user-id=\"255208\">@Joseph Thomas (he) (W2'20)</span> <span class=\"user-mention\" data-user-id=\"247176\">@Alan Lin (he) (W1'19)</span> <span class=\"user-mention\" data-user-id=\"248098\">@Noor Ganti (they) (W1'19)</span> <span class=\"user-mention\" data-user-id=\"248084\">@Michael Pinkham (he) (W1'19)</span></p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 185736382,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "+1",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "joseph@good-idea.studio",
                        "full_name": "Joseph Thomas (he) (W2'20)",
                        "id": 255208
                    },
                    "user_id": 255208
                }
            ],
            "recipient_id": 22667,
            "sender_email": "pseuyi@gmail.com",
            "sender_full_name": "freda suyi (they) (W1'19)",
            "sender_id": 247147,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Let's Learn Haskell (weekly)",
            "submessages": [],
            "timestamp": 1579117640,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/c6b498637f2c21e0e1c65b724f63465d?d=identicon&version=1",
            "client": "ZulipElectron",
            "content": "<p>This is happening now in Sammet!</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 186322308,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "mpinkham3@gmail.com",
            "sender_full_name": "Michael Pinkham (he) (W1'19)",
            "sender_id": 248084,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Let's Learn Haskell (weekly)",
            "submessages": [],
            "timestamp": 1579721746,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/d6fda466a076d48c1d65edc5fb456d027e2b9d4f?x=x&version=2",
            "client": "website",
            "content": "<p>Hey! I just found this YouTube playlist of talks on various aspects of functional programming, category theory, Haskell, design patterns, DSLs etc. I was thinking about taking over a room at some point and projecting it. Would this be something people are interested in watching? If so, when's a good time?</p>\n<p><a href=\"https://www.youtube.com/playlist?list=PLDeKTT8-g48ElyF2LjusAn75uqy-tJFbA\" target=\"_blank\" title=\"https://www.youtube.com/playlist?list=PLDeKTT8-g48ElyF2LjusAn75uqy-tJFbA\">https://www.youtube.com/playlist?list=PLDeKTT8-g48ElyF2LjusAn75uqy-tJFbA</a></p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 186356782,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "noorganti@gmail.com",
            "sender_full_name": "Noor Ganti (they) (SP1'20)",
            "sender_id": 248098,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Screening talks",
            "submessages": [],
            "timestamp": 1579753997,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/e863ed0b1d0b6d53a9fd9bd0de8916afdb2a2038?x=x&version=5",
            "client": "website",
            "content": "<p>got a janky implementation of problem 55 from yesterday in a repl. was anyone else still working on it?</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 186433765,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "pseuyi@gmail.com",
            "sender_full_name": "freda suyi (they) (W1'19)",
            "sender_id": 247147,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Let's Learn Haskell (weekly)",
            "submessages": [],
            "timestamp": 1579812614,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/f9d912077b06a90128c9e07b1f5026ec0c3613b2?x=x&version=2",
            "client": "ZulipElectron",
            "content": "<p>!!!!  i stopped working on it but would love to see what you have</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 186439002,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "catwind7+recursecenter@gmail.com",
            "sender_full_name": "Alan Lin (he) (W1'19)",
            "sender_id": 247176,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Let's Learn Haskell (weekly)",
            "submessages": [],
            "timestamp": 1579815647,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/f9d912077b06a90128c9e07b1f5026ec0c3613b2?x=x&version=2",
            "client": "ZulipElectron",
            "content": "<p>on 4th floor pairing station</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 186439012,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "catwind7+recursecenter@gmail.com",
            "sender_full_name": "Alan Lin (he) (W1'19)",
            "sender_id": 247176,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Let's Learn Haskell (weekly)",
            "submessages": [],
            "timestamp": 1579815657,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/f9d912077b06a90128c9e07b1f5026ec0c3613b2?x=x&version=2",
            "client": "ZulipElectron",
            "content": "<p><span class=\"user-mention\" data-user-id=\"247147\">@freda suyi ding (they) (W1'19)</span></p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 186439015,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "catwind7+recursecenter@gmail.com",
            "sender_full_name": "Alan Lin (he) (W1'19)",
            "sender_id": 247176,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Let's Learn Haskell (weekly)",
            "submessages": [],
            "timestamp": 1579815660,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/e863ed0b1d0b6d53a9fd9bd0de8916afdb2a2038?x=x&version=5",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-id=\"247176\">@Alan Lin (he) (W1'19)</span> yea! are you still over there?</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 186443619,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "pseuyi@gmail.com",
            "sender_full_name": "freda suyi (they) (W1'19)",
            "sender_id": 247147,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Let's Learn Haskell (weekly)",
            "submessages": [],
            "timestamp": 1579818760,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/7580ab83ada9265285a940c5a1098204?d=identicon&version=1",
            "client": "website",
            "content": "<p>post it here!</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 186501417,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "ssbothwell@gmail.com",
            "sender_full_name": "Solomon Bothwell (he) (F2'19)",
            "sender_id": 240589,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Let's Learn Haskell (weekly)",
            "submessages": [],
            "timestamp": 1579879461,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/e863ed0b1d0b6d53a9fd9bd0de8916afdb2a2038?x=x&version=5",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-id=\"240589\">@Solomon Bothwell (he) (F2'19)</span> <br>\n<a href=\"https://repl.it/@FredaDing/balanced-tree-permutations\" target=\"_blank\" title=\"https://repl.it/@FredaDing/balanced-tree-permutations\">problem 55</a></p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 186648342,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "pseuyi@gmail.com",
            "sender_full_name": "freda suyi (they) (W1'19)",
            "sender_id": 247147,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Let's Learn Haskell (weekly)",
            "submessages": [],
            "timestamp": 1580091611,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/7580ab83ada9265285a940c5a1098204?d=identicon&version=1",
            "client": "website",
            "content": "<p>neat. Can you explain how you are representing the trees as list of strings? I don't know how to interpret it.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 186790335,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "ssbothwell@gmail.com",
            "sender_full_name": "Solomon Bothwell (he) (F2'19)",
            "sender_id": 240589,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Let's Learn Haskell (weekly)",
            "submessages": [],
            "timestamp": 1580223617,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/e863ed0b1d0b6d53a9fd9bd0de8916afdb2a2038?x=x&version=5",
            "client": "website",
            "content": "<p>ah yeah, it's fairly idiosyncratic but the string \"XXXEEXE\" would be the result of doing a breadth first traversal and printing out each node where X is a value and E is empty. so \"XXXEEXE\" is this tree: <br>\nBranch 'x' (Branch 'x' Empty Empty) <br>\n           (Branch 'x' (Branch 'x' Empty Empty) <br>\n                       Empty),</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 186798399,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "pseuyi@gmail.com",
            "sender_full_name": "freda suyi (they) (W1'19)",
            "sender_id": 247147,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Let's Learn Haskell (weekly)",
            "submessages": [],
            "timestamp": 1580228554,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/e5845e045f9bcd4c95b82b01366893ed8b219f00?x=x&version=1",
            "client": "website",
            "content": "<p>I want to have a typeclass <code>Printable</code> for things that can be printed but that may not be instances of <code>Show</code>.  For example, even though <code>MVar Bool</code> is not an instance of <code>Show</code>, I want it to be an instance of <code>Printable</code>, because its value can be printed like this:</p>\n<div class=\"codehilite\"><pre><span></span>    print_it :: Show a =&gt; MVar a -&gt; IO ()\n    print_it mv = readMVar mv &gt;&gt;= print\n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 187672365,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "mjd@plover.com",
            "sender_full_name": "Mark Dominus (indifferent)",
            "sender_id": 7912,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Subclassing Show",
            "submessages": [],
            "timestamp": 1581103581,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/e5845e045f9bcd4c95b82b01366893ed8b219f00?x=x&version=1",
            "client": "website",
            "content": "<p>I also want to say that anything that is <code>Show</code> is also <code>Printable</code>:</p>\n<div class=\"codehilite\"><pre><span></span>    instance Show a =&gt; Printable a   where\n      print_it = print\n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 187672421,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "mjd@plover.com",
            "sender_full_name": "Mark Dominus (indifferent)",
            "sender_id": 7912,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Subclassing Show",
            "submessages": [],
            "timestamp": 1581103631,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/e5845e045f9bcd4c95b82b01366893ed8b219f00?x=x&version=1",
            "client": "website",
            "content": "<p>This doesn't compile.  GHCi suggests FlexibleInstances, and then if I add that, it suggests UndecidableInstances, which makes me worry.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 187672462,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "mjd@plover.com",
            "sender_full_name": "Mark Dominus (indifferent)",
            "sender_id": 7912,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Subclassing Show",
            "submessages": [],
            "timestamp": 1581103664,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4d074af6cc341ef51b25bb2f738cdb11?d=identicon&version=1",
            "client": "website",
            "content": "<p>What is the type signature of <code>print_it</code>? Is it <code>Printable a =&gt; a -&gt; IO ()</code>?</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 187672471,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "vaibhavsagar@gmail.com",
            "sender_full_name": "Vaibhav Sagar (he) (F1'16)",
            "sender_id": 100041,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Subclassing Show",
            "submessages": [],
            "timestamp": 1581103668,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/e5845e045f9bcd4c95b82b01366893ed8b219f00?x=x&version=1",
            "client": "website",
            "content": "<p>Yes, just so.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 187672485,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "mjd@plover.com",
            "sender_full_name": "Mark Dominus (indifferent)",
            "sender_id": 7912,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Subclassing Show",
            "submessages": [],
            "timestamp": 1581103675,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/e5845e045f9bcd4c95b82b01366893ed8b219f00?x=x&version=1",
            "client": "website",
            "content": "<p>UndecidableInstances sounds like something I should not enable without understanding what the real problem is.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 187672550,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "mjd@plover.com",
            "sender_full_name": "Mark Dominus (indifferent)",
            "sender_id": 7912,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Subclassing Show",
            "submessages": [],
            "timestamp": 1581103704,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/e5845e045f9bcd4c95b82b01366893ed8b219f00?x=x&version=1",
            "client": "website",
            "content": "<p>I don't understand why <code>Show a =&gt; Printable a</code> should present a problem.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 187672569,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "mjd@plover.com",
            "sender_full_name": "Mark Dominus (indifferent)",
            "sender_id": 7912,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Subclassing Show",
            "submessages": [],
            "timestamp": 1581103719,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4d074af6cc341ef51b25bb2f738cdb11?d=identicon&version=1",
            "client": "website",
            "content": "<p>yeah, that's not immediately obvious to me either</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 187672606,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "vaibhavsagar@gmail.com",
            "sender_full_name": "Vaibhav Sagar (he) (F1'16)",
            "sender_id": 100041,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Subclassing Show",
            "submessages": [],
            "timestamp": 1581103762,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/e5845e045f9bcd4c95b82b01366893ed8b219f00?x=x&version=1",
            "client": "website",
            "content": "<p>I think:</p>\n<div class=\"codehilite\"><pre><span></span>   class Printable a  where\n      print_it :: a -&gt; IO ()\n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 187672612,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "mjd@plover.com",
            "sender_full_name": "Mark Dominus (indifferent)",
            "sender_id": 7912,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Subclassing Show",
            "submessages": [],
            "timestamp": 1581103773,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/e5845e045f9bcd4c95b82b01366893ed8b219f00?x=x&version=1",
            "client": "website",
            "content": "<p><a href=\"https://stackoverflow.com/questions/29931647/declaring-a-subclass-in-haskell\" target=\"_blank\" title=\"https://stackoverflow.com/questions/29931647/declaring-a-subclass-in-haskell\">https://stackoverflow.com/questions/29931647/declaring-a-subclass-in-haskell</a> seems pertinent.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 187672766,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "mjd@plover.com",
            "sender_full_name": "Mark Dominus (indifferent)",
            "sender_id": 7912,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Subclassing Show",
            "submessages": [],
            "timestamp": 1581103879,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/fe405bbed728ab0b6fcef148e8c65a8b?d=identicon&version=1",
            "client": "website",
            "content": "<p>I was toying around with this just now. When not enabling <code>UndecidableInstances</code> <code>ghc</code> also says <code>The constraint \u2018Show a\u2019 is no smaller than the instance head \u2018Printable a\u2019</code>. I think <code>ghc</code> has fairly conservative rules to ensure that instance resolution terminates. And one of them is that the instance constraints have to be smaller than the so-called instance head (the <code>Printable a</code>). It's one of the so-called Paterson conditions described here: <a href=\"https://downloads.haskell.org/ghc/latest/docs/html/users_guide/glasgow_exts.html#extension-UndecidableInstances\" target=\"_blank\" title=\"https://downloads.haskell.org/ghc/latest/docs/html/users_guide/glasgow_exts.html#extension-UndecidableInstances\">https://downloads.haskell.org/ghc/latest/docs/html/users_guide/glasgow_exts.html#extension-UndecidableInstances</a></p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 187724388,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "soenkehahn@gmail.com",
            "sender_full_name": "S\u00f6nke Hahn (he) (S1'18)",
            "sender_id": 116583,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Subclassing Show",
            "submessages": [],
            "timestamp": 1581182453,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/fe405bbed728ab0b6fcef148e8c65a8b?d=identicon&version=1",
            "client": "website",
            "content": "<p>Personally I usually don't worry about non-termination of instance resolution that much. Because it's very easy to verify that your compilation terminates. :) And this instance doesn't look too crazy.</p>\n<p>Here's a working version:</p>\n<div class=\"codehilite\"><pre><span></span>{-# LANGUAGE FlexibleInstances #-}\n{-# LANGUAGE UndecidableInstances #-}\n\nimport Data.IORef\n\nmain = do\n  ref &lt;- newIORef (42 :: Int)\n  printIt ref\n  printIt (42 :: Int)\n\nclass Printable a where\n  printIt :: a -&gt; IO ()\n\ninstance Show a =&gt; Printable (IORef a) where\n  printIt ref = do\n    print =&lt;&lt; readIORef ref\n\ninstance {-# OVERLAPS #-} Show a =&gt; Printable a where\n  printIt = print\n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 187724578,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "soenkehahn@gmail.com",
            "sender_full_name": "S\u00f6nke Hahn (he) (S1'18)",
            "sender_id": 116583,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Subclassing Show",
            "submessages": [],
            "timestamp": 1581182839,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/afcff71a280c619fe7f45af5df2f66b9617479fc?x=x&version=4",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-id=\"264903\">@Cole Krumbholz (he) (m2'20)</span>  Apart from the books (learn you a haskell, haskell programming etc.), here's a really nice course by Tony Morris and co at the (recently dissolved) Queensland FP labs. I've taken an all-day workshop by Tony, following this course, and think it's a pretty good way to get productive with Haskell on the fast track <a href=\"https://github.com/data61/fp-course\" target=\"_blank\" title=\"https://github.com/data61/fp-course\">https://github.com/data61/fp-course</a></p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 188555125,
            "is_me_message": false,
            "last_edit_timestamp": 1582126722,
            "reactions": [
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "+1",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "mauricio@collares.org",
                        "full_name": "Mauricio Collares (he) (W2'19)",
                        "id": 158563
                    },
                    "user_id": 158563
                }
            ],
            "recipient_id": 22667,
            "sender_email": "aditya.athalye@gmail.com",
            "sender_full_name": "Aditya Athalye (he) (SP1'20)",
            "sender_id": 263547,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Let's Learn Haskell (weekly)",
            "submessages": [],
            "timestamp": 1582126657,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/85b47a44bea29e304874f4862e0a738d7ba05325?x=x&version=5",
            "client": "website",
            "content": "<p>A package manager for Haskell: <a href=\"https://docs.haskellstack.org/en/stable/README/\" target=\"_blank\" title=\"https://docs.haskellstack.org/en/stable/README/\">https://docs.haskellstack.org/en/stable/README/</a></p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 188555375,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "daniellem.hoo@gmail.com",
            "sender_full_name": "Danielle Hoo (she) (S1'20)",
            "sender_id": 263852,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Let's Learn Haskell (weekly)",
            "submessages": [],
            "timestamp": 1582126811,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/b2a6b06ba040fd7f7c2acd4d1440e7de?d=identicon&version=1",
            "client": "ZulipMobile",
            "content": "<p>During my batch I paired with <span class=\"user-mention\" data-user-id=\"134184\">@Billy Kaplan (he) (W1'18)</span> for doing the data61 fp-course and it was extremely rewarding. Highly recommended.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 188560015,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1104",
                    "emoji_name": "haskell",
                    "reaction_type": "realm_emoji",
                    "user": {
                        "email": "billy1kaplan@gmail.com",
                        "full_name": "Billy Kaplan (he) (W1'18)",
                        "id": 134184
                    },
                    "user_id": 134184
                }
            ],
            "recipient_id": 22667,
            "sender_email": "mauricio@collares.org",
            "sender_full_name": "Mauricio Collares (he) (W2'19)",
            "sender_id": 158563,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Let's Learn Haskell (weekly)",
            "submessages": [],
            "timestamp": 1582129822,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4d074af6cc341ef51b25bb2f738cdb11?d=identicon&version=1",
            "client": "website",
            "content": "<p>+1 for <code>fp-course</code>, I learned a lot from the exercises</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 188560119,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "vaibhavsagar@gmail.com",
            "sender_full_name": "Vaibhav Sagar (he) (F1'16)",
            "sender_id": 100041,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Let's Learn Haskell (weekly)",
            "submessages": [],
            "timestamp": 1582129907,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/85b47a44bea29e304874f4862e0a738d7ba05325?x=x&version=5",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-id=\"263712\">@Rachel (rfong) Fong (they) (m2'20)</span> <span class=\"user-mention\" data-user-id=\"264901\">@Jacob Lev Goldman-Wetlzer (he) (m2'20)</span> <span class=\"user-mention\" data-user-id=\"263528\">@Sam Lazarus (he) (SP1'20)</span> <span class=\"user-mention\" data-user-id=\"264903\">@Cole Krumbholz (he) (m2'20)</span> <span class=\"user-mention\" data-user-id=\"263956\">@aya charaf (she/they) (SP1'20)</span> <span class=\"user-mention\" data-user-id=\"264905\">@Ksenia Rose Lake (she) (m2'20)</span> <span class=\"user-mention\" data-user-id=\"264095\">@Alex Chen (he) (SP1'20)</span> <span class=\"user-mention\" data-user-id=\"264477\">@Daniel Keriazis (SP1'20)</span> <span class=\"user-mention\" data-user-id=\"263533\">@Ifenna Ozoekwe-Awagu (he) (SP1'20)</span> </p>\n<p>Welcome!<br>\nSome Haskell docs: <a href=\"https://hackage.haskell.org/package/base-4.12.0.0/docs/Prelude.html\" target=\"_blank\" title=\"https://hackage.haskell.org/package/base-4.12.0.0/docs/Prelude.html\">https://hackage.haskell.org/package/base-4.12.0.0/docs/Prelude.html</a><br>\nThe hello-haskell file: <a href=\"/user_uploads/13/gBPE6K_WBHj95pGf4u-ukuIl/Main.hs\" target=\"_blank\" title=\"Main.hs\">Main.hs</a></p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 188653398,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f389",
                    "emoji_name": "tada",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "aya@charaf.xyz",
                        "full_name": "aya charaf (she/they) (SP1'20)",
                        "id": 263956
                    },
                    "user_id": 263956
                },
                {
                    "emoji_code": "1f389",
                    "emoji_name": "tada",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "libby@daydrea.me",
                        "full_name": "Libby Horacek (she) (SP1'15)",
                        "id": 7081
                    },
                    "user_id": 7081
                },
                {
                    "emoji_code": "1f389",
                    "emoji_name": "tada",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "rhotic@alum.mit.edu",
                        "full_name": "Rachel (rfong) Fong (they) (m2'20)",
                        "id": 263712
                    },
                    "user_id": 263712
                }
            ],
            "recipient_id": 22667,
            "sender_email": "daniellem.hoo@gmail.com",
            "sender_full_name": "Danielle Hoo (she) (S1'20)",
            "sender_id": 263852,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Level 1 Haskell",
            "submessages": [],
            "timestamp": 1582216096,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/872a7d0f187f76cfd0f434b8f60d34a1?d=identicon&version=1",
            "client": "ZulipMobile",
            "content": "<p><a href=\"/user_uploads/13/wKgNAydcXDP-EYWIoNiE_bnT/20200221_160028.jpg\" target=\"_blank\" title=\"20200221_160028.jpg\">20200221_160028.jpg</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/13/wKgNAydcXDP-EYWIoNiE_bnT/20200221_160028.jpg\" target=\"_blank\" title=\"20200221_160028.jpg\"><img src=\"/user_uploads/13/wKgNAydcXDP-EYWIoNiE_bnT/20200221_160028.jpg\"></a></div>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 188835839,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f603",
                    "emoji_name": "smiley",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "kseniaroselake@gmail.com",
                        "full_name": "Ksenia Rose Lake (she) (m2'20)",
                        "id": 264905
                    },
                    "user_id": 264905
                }
            ],
            "recipient_id": 22667,
            "sender_email": "aya@charaf.xyz",
            "sender_full_name": "aya charaf (she/they) (SP1'20)",
            "sender_id": 263956,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Level 1 Haskell",
            "submessages": [],
            "timestamp": 1582410582,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/833ed696bb4b9faaa8adbba9e8a2d9a8?d=identicon&version=1",
            "client": "website",
            "content": "<p>Sorry for posting the assignment so late!</p>\n<p>Chapter 8<br>\nSections: 8.1-8.6<br>\nExercises: 1, 2, 3</p>\n<p>Note: In section 8.6, they first introduce a complicated of <code>bools</code>, then introduce a simpler version. You don't need to read the complicated version.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 188850008,
            "is_me_message": false,
            "last_edit_timestamp": 1582434418,
            "reactions": [
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "+1",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "daniellem.hoo@gmail.com",
                        "full_name": "Danielle Hoo (she) (S1'20)",
                        "id": 263852
                    },
                    "user_id": 263852
                }
            ],
            "recipient_id": 22667,
            "sender_email": "awchen@fastmail.com",
            "sender_full_name": "Alex Chen (he) (SP1'20)",
            "sender_id": 264095,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Level 1 Haskell",
            "submessages": [],
            "timestamp": 1582434139,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/7580ab83ada9265285a940c5a1098204?d=identicon&version=1",
            "client": "website",
            "content": "<p>I've been having this error recently for various cabal projects:</p>\n<div class=\"codehilite\"><pre><span></span>Could not resolve dependencies:\n[__0] trying: fermatslastmargin-0.1.0.0 (user goal)\n[__1] next goal: base (dependency of fermatslastmargin)\n[__1] rejecting: base-4.12.0.0/installed-4.1... (conflict: fermatslastmargin\n=&gt; base&gt;=4.13 &amp;&amp; &lt;=4.14)\n[__1] fail (backjumping, conflict set: base, fermatslastmargin)\n</pre></div>\n\n\n<p>I've tried updating my system with:</p>\n<div class=\"codehilite\"><pre><span></span>$ sudo nix-channel --update\n$ sudo nixos-rebuild switch\n</pre></div>\n\n\n<p>But no luck. I cant generally relax the version constraints cause this is happening with a variety of projects, not all of which are mine.</p>\n<p>Any idea whats going on and how to fix it?</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 188854206,
            "is_me_message": false,
            "last_edit_timestamp": 1582441199,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "ssbothwell@gmail.com",
            "sender_full_name": "Solomon Bothwell (he) (F2'19)",
            "sender_id": 240589,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Nix failing to resolve dependency for base",
            "submessages": [],
            "timestamp": 1582441149,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/570b5294859a4650f5c6c4f866b6fba3e34af02b?x=x&version=2",
            "client": "website",
            "content": "<p>Paging <span class=\"user-mention\" data-user-id=\"100041\">@Vaibhav Sagar (he) (F1'16)</span></p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 188871083,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "tobinyehle@gmail.com",
            "sender_full_name": "Tobin Yehle (he) (SP1'20)",
            "sender_id": 105607,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Nix failing to resolve dependency for base",
            "submessages": [],
            "timestamp": 1582468075,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4d074af6cc341ef51b25bb2f738cdb11?d=identicon&version=1",
            "client": "ZulipMobile",
            "content": "<p>It looks like your system is using a newer version of GHC than the projects specify? Are you pinning the version of <code>nixpkgs</code>?</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 188871131,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "vaibhavsagar@gmail.com",
            "sender_full_name": "Vaibhav Sagar (he) (F1'16)",
            "sender_id": 100041,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Nix failing to resolve dependency for base",
            "submessages": [],
            "timestamp": 1582468194,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/8776bd2d19cdb1399c4e9589d9397d57290e5729?x=x&version=2",
            "client": "website",
            "content": "<p>Oh, it's probably because I upgraded the dependecies to ghc 8.8.2 ?</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 188874506,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "shae.erisson@gmail.com",
            "sender_full_name": "Shae Matijs Erisson (he) (F1'19)",
            "sender_id": 221819,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Nix failing to resolve dependency for base",
            "submessages": [],
            "timestamp": 1582474712,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/7580ab83ada9265285a940c5a1098204?d=identicon&version=1",
            "client": "website",
            "content": "<p>Ahhh that must be the issue. Nix is trying to use <code>8.6.4</code>. Perhaps something needs to get updated in <code>default.nix</code>?</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 188888550,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "ssbothwell@gmail.com",
            "sender_full_name": "Solomon Bothwell (he) (F2'19)",
            "sender_id": 240589,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Nix failing to resolve dependency for base",
            "submessages": [],
            "timestamp": 1582499631,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/7580ab83ada9265285a940c5a1098204?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-id=\"221819\">@Shae Matijs Erisson (he) (F1'19)</span> I think the problem is that <code>nix/default.nix</code> references <code>8.6.4</code>:</p>\n<p><a href=\"https://github.com/shapr/fermatslastmargin/blob/master/nix/default.nix#L28\" target=\"_blank\" title=\"https://github.com/shapr/fermatslastmargin/blob/master/nix/default.nix#L28\">https://github.com/shapr/fermatslastmargin/blob/master/nix/default.nix#L28</a></p>\n<p>But I don't know enough about writing nix expressions to know how to get it to load <code>8.8.2</code>. Simply changing line 28 to say <code>ghc882</code> doesn't work.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 188898614,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "ssbothwell@gmail.com",
            "sender_full_name": "Solomon Bothwell (he) (F2'19)",
            "sender_id": 240589,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Nix failing to resolve dependency for base",
            "submessages": [],
            "timestamp": 1582518824,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/0c9bf03a6cdea0391ccc6ad588e250ca?d=identicon&version=1",
            "client": "website",
            "content": "<p>My understanding is <code>ghc882</code> is not in stable channels yet. But <a href=\"https://github.com/NixOS/nixpkgs-channels/blob/nixos-unstable/pkgs/top-level/haskell-packages.nix#L135\" target=\"_blank\" title=\"https://github.com/NixOS/nixpkgs-channels/blob/nixos-unstable/pkgs/top-level/haskell-packages.nix#L135\">its in unstable</a></p>\n<p>You should be able to get <code>ghc882</code> by getting it from unstable</p>\n<ol>\n<li>Add unstable channel to your system (it doesn't touch any other packages, just exposes the namespace to nixos</li>\n<li>you can write shell.nix something like (I just quickly hacked something, that can be improved)</li>\n</ol>\n<div class=\"codehilite\"><pre><span></span><span class=\"p\">{</span> pkgs <span class=\"o\">?</span> <span class=\"nb\">import</span> <span class=\"l\">&lt;unstable&gt;</span> <span class=\"p\">{}</span>\n<span class=\"p\">,</span> ghc <span class=\"o\">?</span> <span class=\"s2\">&quot;ghc882&quot;</span>\n<span class=\"p\">}:</span>\n\npkgs<span class=\"o\">.</span>stdenv<span class=\"o\">.</span>mkDerivation <span class=\"k\">rec</span> <span class=\"p\">{</span>\n  <span class=\"ss\">name =</span> <span class=\"s2\">&quot;project&quot;</span><span class=\"p\">;</span>\n\n  <span class=\"ss\">buildInputs =</span> <span class=\"p\">[</span>\n    pkgs<span class=\"o\">.</span>zlib\n    pkgs<span class=\"o\">.</span>haskell<span class=\"o\">.</span>compiler<span class=\"o\">.</span><span class=\"err\">$</span><span class=\"p\">{</span>ghc<span class=\"p\">}</span>\n    pkgs<span class=\"o\">.</span>which\n    pkgs<span class=\"o\">.</span>libargon2\n    pkgs<span class=\"o\">.</span>cabal-install\n    pkgs<span class=\"o\">.</span>haskellPackages<span class=\"o\">.</span>ghcid\n  <span class=\"p\">];</span>\n<span class=\"p\">}</span>\n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 188916612,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "recurse@dbalan.in",
            "sender_full_name": "Dhananjay Balan (he) (W2'19)",
            "sender_id": 158692,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Nix failing to resolve dependency for base",
            "submessages": [],
            "timestamp": 1582542286,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/0c9bf03a6cdea0391ccc6ad588e250ca?d=identicon&version=1",
            "client": "website",
            "content": "<p>oh and this is the documentation to add / change channels <a href=\"https://nixos.wiki/wiki/Nix_channels\" target=\"_blank\" title=\"https://nixos.wiki/wiki/Nix_channels\">https://nixos.wiki/wiki/Nix_channels</a></p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 188916647,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "recurse@dbalan.in",
            "sender_full_name": "Dhananjay Balan (he) (W2'19)",
            "sender_id": 158692,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Nix failing to resolve dependency for base",
            "submessages": [],
            "timestamp": 1582542336,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4d074af6cc341ef51b25bb2f738cdb11?d=identicon&version=1",
            "client": "website",
            "content": "<p>New book coming out on September 30: <a href=\"https://www.amazon.com/Algorithm-Design-Haskell-Richard-Bird/dp/1108491618\" target=\"_blank\" title=\"https://www.amazon.com/Algorithm-Design-Haskell-Richard-Bird/dp/1108491618\">https://www.amazon.com/Algorithm-Design-Haskell-Richard-Bird/dp/1108491618</a></p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 188988075,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f440",
                    "emoji_name": "eyes",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "shae.erisson@gmail.com",
                        "full_name": "Shae Matijs Erisson (he) (F1'19)",
                        "id": 221819
                    },
                    "user_id": 221819
                },
                {
                    "emoji_code": "1f389",
                    "emoji_name": "tada",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "heneli@kailahi.com",
                        "full_name": "Heneli Ta'angafala Kailahi (SP2'17)",
                        "id": 100771
                    },
                    "user_id": 100771
                },
                {
                    "emoji_code": "1f440",
                    "emoji_name": "eyes",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "heneli@kailahi.com",
                        "full_name": "Heneli Ta'angafala Kailahi (SP2'17)",
                        "id": 100771
                    },
                    "user_id": 100771
                },
                {
                    "emoji_code": "1f440",
                    "emoji_name": "eyes",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "ark.email@gmail.com",
                        "full_name": "Adam Bratschi-Kaye (he) (SP1'17)",
                        "id": 100532
                    },
                    "user_id": 100532
                },
                {
                    "emoji_code": "1f440",
                    "emoji_name": "eyes",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "alan.m.odonnell@gmail.com",
                        "full_name": "Alan O'Donnell (he) (S1'19)",
                        "id": 813
                    },
                    "user_id": 813
                }
            ],
            "recipient_id": 22667,
            "sender_email": "vaibhavsagar@gmail.com",
            "sender_full_name": "Vaibhav Sagar (he) (F1'16)",
            "sender_id": 100041,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Algorithm Design with Haskell",
            "submessages": [],
            "timestamp": 1582600577,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/d6fda466a076d48c1d65edc5fb456d027e2b9d4f?x=x&version=2",
            "client": "ZulipMobile",
            "content": "<p>Hey guys! Some family stuff\u2019s come up and I don\u2019t think I\u2019ll be able to make it today! Hope the group goes well and it\u2019s be awesome if you could post a little about what you cover</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 189152205,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "noorganti@gmail.com",
            "sender_full_name": "Noor Ganti (they) (SP1'20)",
            "sender_id": 248098,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Spring 1 Haskell study group",
            "submessages": [],
            "timestamp": 1582746878,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/3919cea3a42c84ebd524864a4f242513317a5302?x=x&version=2",
            "client": "website",
            "content": "<p>Manning has a sale on \"Get Programming with Haskell\" today. It's buy-one-get-one if you use the code <code>ctwbob10020</code>.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 189323676,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "brian@brianthicks.com",
            "sender_full_name": "Brian Hicks (he) (m1'20)",
            "sender_id": 255038,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Get Programming with Haskell BOGO",
            "submessages": [],
            "timestamp": 1582906142,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/009427e1b56c85d4a70a091905cf7a305c109dc6?x=x&version=5",
            "client": "ZulipElectron",
            "content": "<p>Fantastic!! I've been struggling through \"Algebra of Programming\" for a while</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 189343503,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "heneli@kailahi.com",
            "sender_full_name": "Heneli Ta'angafala Kailahi (SP2'17)",
            "sender_id": 100771,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Algorithm Design with Haskell",
            "submessages": [],
            "timestamp": 1582918765,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/009427e1b56c85d4a70a091905cf7a305c109dc6?x=x&version=5",
            "client": "ZulipElectron",
            "content": "<p>From the description, this seems like a more approachable version of the material</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 189343534,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "heneli@kailahi.com",
            "sender_full_name": "Heneli Ta'angafala Kailahi (SP2'17)",
            "sender_id": 100771,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Algorithm Design with Haskell",
            "submessages": [],
            "timestamp": 1582918791,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/3924d372b2e62f5d77caffb3c653c6ecde63ada7?x=x&version=2",
            "client": "website",
            "content": "<p>Hey y'all, don't know if you're still meeting, but I've been following along on the assignments (on my own slower pace!) and just caught up on working through Chapter 8 up through 8.6. The tautology checker was very cool!</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 189606234,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1104",
                    "emoji_name": "haskell",
                    "reaction_type": "realm_emoji",
                    "user": {
                        "email": "tobinyehle@gmail.com",
                        "full_name": "Tobin Yehle (he) (SP1'20)",
                        "id": 105607
                    },
                    "user_id": 105607
                },
                {
                    "emoji_code": "1f389",
                    "emoji_name": "tada",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "tobinyehle@gmail.com",
                        "full_name": "Tobin Yehle (he) (SP1'20)",
                        "id": 105607
                    },
                    "user_id": 105607
                },
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "thumbs_up",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "azymi@azymi.dev",
                        "full_name": "Daniel Keriazis (SP1'20)",
                        "id": 264477
                    },
                    "user_id": 264477
                }
            ],
            "recipient_id": 22667,
            "sender_email": "kseniaroselake@gmail.com",
            "sender_full_name": "Ksenia Rose Lake (she) (m2'20)",
            "sender_id": 264905,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Level 1 Haskell",
            "submessages": [],
            "timestamp": 1583251198,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/833ed696bb4b9faaa8adbba9e8a2d9a8?d=identicon&version=1",
            "client": "website",
            "content": "<p>Let's learn about writing interactive programs in Haskell! The textbook gives a nice explanation of how Haskell does IO (input/output) in Chapter 10. I propose we read through it and do some exercises for our next meeting on Monday</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 190297048,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "awchen@fastmail.com",
            "sender_full_name": "Alex Chen (he) (SP1'20)",
            "sender_id": 264095,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Level 1 Haskell",
            "submessages": [],
            "timestamp": 1583941738,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/833ed696bb4b9faaa8adbba9e8a2d9a8?d=identicon&version=1",
            "client": "website",
            "content": "<p>Chapter 10</p>\n<p>Sections: 10.1-10.6<br>\nOptional sections: 10.7-10.9</p>\n<p>Exercises: 1, 4<br>\nOptional exercises: 5, 6</p>\n<p>Note on exercise 1:<br>\nSince we haven't covered \"list comprehensions\", you can use <code>map</code> instead.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 190297114,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "awchen@fastmail.com",
            "sender_full_name": "Alex Chen (he) (SP1'20)",
            "sender_id": 264095,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Level 1 Haskell",
            "submessages": [],
            "timestamp": 1583941764,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/7580ab83ada9265285a940c5a1098204?d=identicon&version=1",
            "client": "website",
            "content": "<p>My work computer is a mac. I installed <code>nix</code> and have used it to manage everything Haskell related in-order to try to have a consistent development environment with my personal computer, which runs <code>nixos</code>. I had been using spacemacs and Haskell IDE Engine without trouble until a few weeks ago when it started failing to resolve <code>base</code>. </p>\n<p>Around when it stopped working, I realized I had a global install of GHC 8.8.2 (and Stack) on my computer from <code>homebrew</code>. I think was part of the problem, but I don't really know. I guessed that HIE was trying to use GHC 8.8.2, but only supports up to 8.6.5. </p>\n<p>So I erased the homebrew copy GHC, pulled the latest version of HIE from github and reinstalled it via <code>nix</code> for all supported GHC versions. I now have hie, hie-8.4.2. hie-8.4.3, hie-8.4.4, hie-8.6.4, hie-8.6.5, hie-8.8.1, hie-8.8.2, hie-bios, and hie-wrapper all installed globally via <code>nix</code>. I have no global GHC install.</p>\n<p>I then followed <a href=\"https://blog.latukha.com/NixOS-HIE-Emacs/\" target=\"_blank\" title=\"https://blog.latukha.com/NixOS-HIE-Emacs/\">these instructions</a> to get HIE, Nix, and Spacemacs working together. I had to install <code>direnv</code> and <code>nix-sandbox</code> then update my haskell and lsp modes as described.</p>\n<p>Now when I load a haskell file there is no haskell LSP server launched and I'm not in LSP Mode. If I try to enable LSP mode I get the error <code>There are no language servers supporting current mode haskell-mode registered with 'lsp-mode'</code>. </p>\n<p>Any ideas whats going on or how to fix HIE?</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 190348752,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "ssbothwell@gmail.com",
            "sender_full_name": "Solomon Bothwell (he) (F2'19)",
            "sender_id": 240589,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Haskell, Nix, MacOS, and HIE",
            "submessages": [],
            "timestamp": 1583975223,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/7580ab83ada9265285a940c5a1098204?d=identicon&version=1",
            "client": "website",
            "content": "<p>Looks like I resolved it following this gist: <a href=\"https://gist.github.com/sevanspowell/23b0135dae2834e59904a502b8a0eb5d\" target=\"_blank\" title=\"https://gist.github.com/sevanspowell/23b0135dae2834e59904a502b8a0eb5d\">https://gist.github.com/sevanspowell/23b0135dae2834e59904a502b8a0eb5d</a></p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 190353662,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "ssbothwell@gmail.com",
            "sender_full_name": "Solomon Bothwell (he) (F2'19)",
            "sender_id": 240589,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Haskell, Nix, MacOS, and HIE",
            "submessages": [],
            "timestamp": 1583983085,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/7580ab83ada9265285a940c5a1098204?d=identicon&version=1",
            "client": "website",
            "content": "<p>in the process i learned about <code>lorri</code> and want to test it out now. :)</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 190353663,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "ssbothwell@gmail.com",
            "sender_full_name": "Solomon Bothwell (he) (F2'19)",
            "sender_id": 240589,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Haskell, Nix, MacOS, and HIE",
            "submessages": [],
            "timestamp": 1583983103,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/7580ab83ada9265285a940c5a1098204?d=identicon&version=1",
            "client": "website",
            "content": "<p><del>No nevermind, its not working yet. Emacs is connecting to a HIE LSP server but i'm not getting any information from HIE. hrmm</del> actually it is working. Just needed to finish building some packages in the background : )</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 190353829,
            "is_me_message": false,
            "last_edit_timestamp": 1583983903,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "ssbothwell@gmail.com",
            "sender_full_name": "Solomon Bothwell (he) (F2'19)",
            "sender_id": 240589,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Haskell, Nix, MacOS, and HIE",
            "submessages": [],
            "timestamp": 1583983376,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/8776bd2d19cdb1399c4e9589d9397d57290e5729?x=x&version=2",
            "client": "ZulipMobile",
            "content": "<p>My coworkers don't seem to believe ghcide can work with our codebase, so this is a good push on the right direction for me! <br>\nWe have a branch for trying out nix but that's as close as we've gotten.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 190384912,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "shae.erisson@gmail.com",
            "sender_full_name": "Shae Matijs Erisson (he) (F1'19)",
            "sender_id": 221819,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Haskell, Nix, MacOS, and HIE",
            "submessages": [],
            "timestamp": 1584017229,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/7580ab83ada9265285a940c5a1098204?d=identicon&version=1",
            "client": "website",
            "content": "<p>I haven't tried using GHCIDE in a while, but it should just be a few additional steps beyond getting HIE working. I recommend following that last gist I pasted to get HIE working correctly then try adding GHCIDE afterwards.</p>\n<p>Other then being newer, what are the advantages of GHCIDE over regular HIE?</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 190401686,
            "is_me_message": false,
            "last_edit_timestamp": 1584026329,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "ssbothwell@gmail.com",
            "sender_full_name": "Solomon Bothwell (he) (F2'19)",
            "sender_id": 240589,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Haskell, Nix, MacOS, and HIE",
            "submessages": [],
            "timestamp": 1584026287,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/8776bd2d19cdb1399c4e9589d9397d57290e5729?x=x&version=2",
            "client": "ZulipMobile",
            "content": "<p>I think ghcide does less, but is much easier to setup</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 190402572,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "shae.erisson@gmail.com",
            "sender_full_name": "Shae Matijs Erisson (he) (F1'19)",
            "sender_id": 221819,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Haskell, Nix, MacOS, and HIE",
            "submessages": [],
            "timestamp": 1584026685,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/8776bd2d19cdb1399c4e9589d9397d57290e5729?x=x&version=2",
            "client": "ZulipMobile",
            "content": "<p>Last I tried HIE, I got refactoring and other impressive functionality.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 190402645,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "shae.erisson@gmail.com",
            "sender_full_name": "Shae Matijs Erisson (he) (F1'19)",
            "sender_id": 221819,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Haskell, Nix, MacOS, and HIE",
            "submessages": [],
            "timestamp": 1584026718,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/872a7d0f187f76cfd0f434b8f60d34a1?d=identicon&version=1",
            "client": "website",
            "content": "<p>hi frens, how should we go about this: im ok with finding a coffee shop or something to meet in person tomorrow morning, but also fine w strictly relying on a zoom call</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 190683137,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "aya@charaf.xyz",
            "sender_full_name": "aya charaf (she/they) (SP1'20)",
            "sender_id": 263956,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Level 1 Haskell",
            "submessages": [],
            "timestamp": 1584332688,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/872a7d0f187f76cfd0f434b8f60d34a1?d=identicon&version=1",
            "client": "website",
            "content": "<p><a href=\"/user_uploads/13/gV05DEagPz469JUo-R3Riiqs/game.hs\" target=\"_blank\" title=\"game.hs\">game.hs</a> <span class=\"user-mention\" data-user-id=\"263533\">@Ifenna Ozoekwe-Awagu (he) (SP1'20)</span> <span class=\"user-mention\" data-user-id=\"264905\">@Ksenia Rose Lake (she) (m2'20)</span> <span aria-label=\"eyes\" class=\"emoji emoji-1f440\" role=\"img\" title=\"eyes\">:eyes:</span> <span aria-label=\"rock on\" class=\"emoji emoji-1f918\" role=\"img\" title=\"rock on\">:rock_on:</span></p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 190784649,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "+1",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "kseniaroselake@gmail.com",
                        "full_name": "Ksenia Rose Lake (she) (m2'20)",
                        "id": 264905
                    },
                    "user_id": 264905
                },
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "+1",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "jawagu@gmail.com",
                        "full_name": "Ifenna Ozoekwe-Awagu (he) (SP1'20)",
                        "id": 263533
                    },
                    "user_id": 263533
                }
            ],
            "recipient_id": 22667,
            "sender_email": "aya@charaf.xyz",
            "sender_full_name": "aya charaf (she/they) (SP1'20)",
            "sender_id": 263956,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Level 1 Haskell",
            "submessages": [],
            "timestamp": 1584395576,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/3924d372b2e62f5d77caffb3c653c6ecde63ada7?x=x&version=2",
            "client": "website",
            "content": "<p>Thanks for posting the code, aya <span class=\"user-mention\" data-user-id=\"263956\">@aya charaf (she/they) (SP1'20)</span> ! Thanks for teaching us, Alex <span class=\"user-mention\" data-user-id=\"264095\">@Alex Chen (he) (SP1'20)</span>  :-)  Always learn so much in these group formats!!</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 190798639,
            "is_me_message": false,
            "last_edit_timestamp": 1584407010,
            "reactions": [
                {
                    "emoji_code": "1f419",
                    "emoji_name": "octopus",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "aya@charaf.xyz",
                        "full_name": "aya charaf (she/they) (SP1'20)",
                        "id": 263956
                    },
                    "user_id": 263956
                }
            ],
            "recipient_id": 22667,
            "sender_email": "kseniaroselake@gmail.com",
            "sender_full_name": "Ksenia Rose Lake (she) (m2'20)",
            "sender_id": 264905,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Level 1 Haskell",
            "submessages": [],
            "timestamp": 1584406987,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/872a7d0f187f76cfd0f434b8f60d34a1?d=identicon&version=1",
            "client": "website",
            "content": "<p>hey folx let's meet tm at 1 instead of 10, i think that is the best option for this week</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 190938802,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "+1",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "kseniaroselake@gmail.com",
                        "full_name": "Ksenia Rose Lake (she) (m2'20)",
                        "id": 264905
                    },
                    "user_id": 264905
                }
            ],
            "recipient_id": 22667,
            "sender_email": "aya@charaf.xyz",
            "sender_full_name": "aya charaf (she/they) (SP1'20)",
            "sender_id": 263956,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Level 1 Haskell",
            "submessages": [],
            "timestamp": 1584506373,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/688d4d1b3c25a74c664cf6c3954b8d03a02e2a32?x=x&version=2",
            "client": "ZulipMobile",
            "content": "<p>Um 1pm won't work for my right now, but 12 does.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 190974555,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "jawagu@gmail.com",
            "sender_full_name": "Ifenna Ozoekwe-Awagu (he) (SP1'20)",
            "sender_id": 263533,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Level 1 Haskell",
            "submessages": [],
            "timestamp": 1584535606,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/3924d372b2e62f5d77caffb3c653c6ecde63ada7?x=x&version=2",
            "client": "ZulipMobile",
            "content": "<p>I\u2019ll come to our group meeting any time today ;) ! So whatever works for you all.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 190974759,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "kseniaroselake@gmail.com",
            "sender_full_name": "Ksenia Rose Lake (she) (m2'20)",
            "sender_id": 264905,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Level 1 Haskell",
            "submessages": [],
            "timestamp": 1584535747,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/833ed696bb4b9faaa8adbba9e8a2d9a8?d=identicon&version=1",
            "client": "website",
            "content": "<p>Ok, I'll be around at 12!</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 190994856,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "awchen@fastmail.com",
            "sender_full_name": "Alex Chen (he) (SP1'20)",
            "sender_id": 264095,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Level 1 Haskell",
            "submessages": [],
            "timestamp": 1584544595,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/833ed696bb4b9faaa8adbba9e8a2d9a8?d=identicon&version=1",
            "client": "website",
            "content": "<p>Vim golf is happening in sammet at 12 (right now), let's meet in hopper instead?</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 191000840,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "awchen@fastmail.com",
            "sender_full_name": "Alex Chen (he) (SP1'20)",
            "sender_id": 264095,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Level 1 Haskell",
            "submessages": [],
            "timestamp": 1584546945,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/688d4d1b3c25a74c664cf6c3954b8d03a02e2a32?x=x&version=2",
            "client": "website",
            "content": "<p>I was just going to type that. Good idea.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 191001113,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "jawagu@gmail.com",
            "sender_full_name": "Ifenna Ozoekwe-Awagu (he) (SP1'20)",
            "sender_id": 263533,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Level 1 Haskell",
            "submessages": [],
            "timestamp": 1584547023,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/3924d372b2e62f5d77caffb3c653c6ecde63ada7?x=x&version=2",
            "client": "website",
            "content": "<p>I'll join at 12:15ish. Sorry. Lost track of time!</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 191001384,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "kseniaroselake@gmail.com",
            "sender_full_name": "Ksenia Rose Lake (she) (m2'20)",
            "sender_id": 264905,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Level 1 Haskell",
            "submessages": [],
            "timestamp": 1584547124,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/688d4d1b3c25a74c664cf6c3954b8d03a02e2a32?x=x&version=2",
            "client": "website",
            "content": "<p><a href=\"/user_uploads/13/ka0W71uG817ma_vNLUJekEVE/Main.hs\" target=\"_blank\" title=\"Main.hs\">Main.hs</a></p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 191004826,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "jawagu@gmail.com",
            "sender_full_name": "Ifenna Ozoekwe-Awagu (he) (SP1'20)",
            "sender_id": 263533,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Level 1 Haskell",
            "submessages": [],
            "timestamp": 1584548433,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/833ed696bb4b9faaa8adbba9e8a2d9a8?d=identicon&version=1",
            "client": "website",
            "content": "<p>Today's haskell code <a href=\"/user_uploads/13/WI1u4gLXODPOI7JlL-dFzHlI/Main.hs\" target=\"_blank\" title=\"Main.hs\">Main.hs</a></p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 191049093,
            "is_me_message": false,
            "last_edit_timestamp": 1584569359,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "awchen@fastmail.com",
            "sender_full_name": "Alex Chen (he) (SP1'20)",
            "sender_id": 264095,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Level 1 Haskell",
            "submessages": [],
            "timestamp": 1584569301,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/833ed696bb4b9faaa8adbba9e8a2d9a8?d=identicon&version=1",
            "client": "website",
            "content": "<p>For Monday's meeting, either do the exercises for chapter 10 (listed somewhere above) OR write any interactive program you want!</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 191049325,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "awchen@fastmail.com",
            "sender_full_name": "Alex Chen (he) (SP1'20)",
            "sender_id": 264095,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Level 1 Haskell",
            "submessages": [],
            "timestamp": 1584569441,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/833ed696bb4b9faaa8adbba9e8a2d9a8?d=identicon&version=1",
            "client": "website",
            "content": "<p>If you need library recommendations or any other help, you can ask here -- you can also ping me</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 191049460,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "awchen@fastmail.com",
            "sender_full_name": "Alex Chen (he) (SP1'20)",
            "sender_id": 264095,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Level 1 Haskell",
            "submessages": [],
            "timestamp": 1584569530,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/833ed696bb4b9faaa8adbba9e8a2d9a8?d=identicon&version=1",
            "client": "website",
            "content": "<p>Also for Monday's meeting, read chapter 12</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 191049493,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "awchen@fastmail.com",
            "sender_full_name": "Alex Chen (he) (SP1'20)",
            "sender_id": 264095,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Level 1 Haskell",
            "submessages": [],
            "timestamp": 1584569567,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/833ed696bb4b9faaa8adbba9e8a2d9a8?d=identicon&version=1",
            "client": "website",
            "content": "<p>An example in chapter 12 uses list comprehensions, so you might need to read about them in section 5.1</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 191049881,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "awchen@fastmail.com",
            "sender_full_name": "Alex Chen (he) (SP1'20)",
            "sender_id": 264095,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Level 1 Haskell",
            "submessages": [],
            "timestamp": 1584569850,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/833ed696bb4b9faaa8adbba9e8a2d9a8?d=identicon&version=1",
            "client": "website",
            "content": "<p>This chapter is the hardest yet, so take your time and just get as far as you can. We can help each other out on Monday</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 191050358,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "2764",
                    "emoji_name": "heart",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "aya@charaf.xyz",
                        "full_name": "aya charaf (she/they) (SP1'20)",
                        "id": 263956
                    },
                    "user_id": 263956
                }
            ],
            "recipient_id": 22667,
            "sender_email": "awchen@fastmail.com",
            "sender_full_name": "Alex Chen (he) (SP1'20)",
            "sender_id": 264095,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Level 1 Haskell",
            "submessages": [],
            "timestamp": 1584570204,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/fb06eebdc29fac364d9ff5c7c97f88c6?d=identicon&version=1",
            "client": "website",
            "content": "<p>Do we have plans for this week?</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 192103499,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "+1",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "aya@charaf.xyz",
                        "full_name": "aya charaf (she/they) (SP1'20)",
                        "id": 263956
                    },
                    "user_id": 263956
                }
            ],
            "recipient_id": 22667,
            "sender_email": "lazarus.sam@gmail.com",
            "sender_full_name": "Sam Lazarus (he) (SP1'20)",
            "sender_id": 263528,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Level 1 Haskell",
            "submessages": [],
            "timestamp": 1585366853,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/fb06eebdc29fac364d9ff5c7c97f88c6?d=identicon&version=1",
            "client": "website",
            "content": "<p>(Monday)</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 192103502,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "lazarus.sam@gmail.com",
            "sender_full_name": "Sam Lazarus (he) (SP1'20)",
            "sender_id": 263528,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Level 1 Haskell",
            "submessages": [],
            "timestamp": 1585366862,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/3924d372b2e62f5d77caffb3c653c6ecde63ada7?x=x&version=2",
            "client": "ZulipMobile",
            "content": "<p>Well, tbh, we\u2019re still trying to wrap our understanding around Ch 12 ;)  Basically, it\u2019s try the exercises! I\u2019m still wanting to write a fun little IO game so my personal \u201cto do\u201d list has that on it, too.</p>\n<p>However, it occurs to me we might not be meeting Monday due to it being first day of batch for Spring2 and Mini3...</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 192104541,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "+1",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "aya@charaf.xyz",
                        "full_name": "aya charaf (she/they) (SP1'20)",
                        "id": 263956
                    },
                    "user_id": 263956
                }
            ],
            "recipient_id": 22667,
            "sender_email": "kseniaroselake@gmail.com",
            "sender_full_name": "Ksenia Rose Lake (she) (m2'20)",
            "sender_id": 264905,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Level 1 Haskell",
            "submessages": [],
            "timestamp": 1585368968,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/833ed696bb4b9faaa8adbba9e8a2d9a8?d=identicon&version=1",
            "client": "website",
            "content": "<p>Yeah, I think we should cancel Monday's meeting, being the first day of the batch</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 192202641,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "awchen@fastmail.com",
            "sender_full_name": "Alex Chen (he) (SP1'20)",
            "sender_id": 264095,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Level 1 Haskell",
            "submessages": [],
            "timestamp": 1585530056,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/833ed696bb4b9faaa8adbba9e8a2d9a8?d=identicon&version=1",
            "client": "website",
            "content": "<p>I've deleted it from the calendar</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 192202737,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "+1",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "aya@charaf.xyz",
                        "full_name": "aya charaf (she/they) (SP1'20)",
                        "id": 263956
                    },
                    "user_id": 263956
                }
            ],
            "recipient_id": 22667,
            "sender_email": "awchen@fastmail.com",
            "sender_full_name": "Alex Chen (he) (SP1'20)",
            "sender_id": 264095,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Level 1 Haskell",
            "submessages": [],
            "timestamp": 1585530202,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/7580ab83ada9265285a940c5a1098204?d=identicon&version=1",
            "client": "ZulipMobile",
            "content": "<p>What book are you working through?</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 192288459,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "ssbothwell@gmail.com",
            "sender_full_name": "Solomon Bothwell (he) (F2'19)",
            "sender_id": 240589,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Level 1 Haskell",
            "submessages": [],
            "timestamp": 1585588871,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/833ed696bb4b9faaa8adbba9e8a2d9a8?d=identicon&version=1",
            "client": "website",
            "content": "<p>We've been using \"Programming in Haskell - Graham Hutton\", though sometimes it's a bit dense and intimidating. So I also started to look at \"Haskell Programming from first principles - Christopher Allen, Julie Moronuki\", which seems friendlier, but is also much longer</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 192289620,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "+1",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "kseniaroselake@gmail.com",
                        "full_name": "Ksenia Rose Lake (she) (m2'20)",
                        "id": 264905
                    },
                    "user_id": 264905
                },
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "+1",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "gnusosa.mx@gmail.com",
                        "full_name": "Carlos Sosa (he) (SP2'20)",
                        "id": 276586
                    },
                    "user_id": 276586
                }
            ],
            "recipient_id": 22667,
            "sender_email": "awchen@fastmail.com",
            "sender_full_name": "Alex Chen (he) (SP1'20)",
            "sender_id": 264095,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Level 1 Haskell",
            "submessages": [],
            "timestamp": 1585589353,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/c820158f867b70bed5e4d5ed84954ff9b49fceb2?x=x&version=4",
            "client": "ZulipElectron",
            "content": "<p>howdy haskell friends! i was unsubscribed from this stream until recently, i've been spending the last few weeks of unemployment/quarantine learning haskell! i started with <a href=\"https://leanpub.com/finding-success-in-haskell\" title=\"https://leanpub.com/finding-success-in-haskell\">\"Finding Success (And Failure) in Haskell\"</a>, which was a nice (if accelerated) introduction to some of the basics.</p>\n<p>i then decided to do something a little more outlandish and follow the book <a href=\"https://shop.jcoglan.com/building-git/\" title=\"https://shop.jcoglan.com/building-git/\">\"Building Git\"</a>, but instead of using the book's native Ruby, i wanted to reimplement the code in haskell, to practice writing something more substantial. it's been a lot of fun, even when i ran against hurdles that i had to design my way around. has anyone else read this book (regardless of the language you followed along with)? i think i might start to ask some of my haskell questions here instead of on twitter. &gt;_&gt;</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 192570875,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "grey@quietmisdreavus.net",
            "sender_full_name": "Victoria Mitchell (she) (F2'19)",
            "sender_id": 240569,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "\"Building Git\" in haskell",
            "submessages": [],
            "timestamp": 1585765089,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/c820158f867b70bed5e4d5ed84954ff9b49fceb2?x=x&version=4",
            "client": "ZulipElectron",
            "content": "<p>i've been gradually posting some of my progress on twitter in screenshots. once i get to the point where i can sync it with a remote, i'm definitely going to push it to github!</p>\n<p><a href=\"https://twitter.com/QuietMisdreavus/status/1243321562628935680\" title=\"https://twitter.com/QuietMisdreavus/status/1243321562628935680\">https://twitter.com/QuietMisdreavus/status/1243321562628935680</a><br>\n<a href=\"https://twitter.com/QuietMisdreavus/status/1243744409910251520\" title=\"https://twitter.com/QuietMisdreavus/status/1243744409910251520\">https://twitter.com/QuietMisdreavus/status/1243744409910251520</a><br>\n<a href=\"https://twitter.com/QuietMisdreavus/status/1245076026163511296\" title=\"https://twitter.com/QuietMisdreavus/status/1245076026163511296\">https://twitter.com/QuietMisdreavus/status/1245076026163511296</a></p>\n<div class=\"inline-preview-twitter\"><div class=\"twitter-tweet\"><a href=\"https://twitter.com/QuietMisdreavus/status/1243321562628935680\"><img class=\"twitter-avatar\" src=\"https://pbs.twimg.com/profile_images/1141061925859713024/0ZLRcuDV_normal.png\"></a><p>today i started going through the book \"Building Git\" (<a href=\"https://t.co/NassvJiPKq\" title=\"https://t.co/NassvJiPKq\">https://shop.jcoglan.com/building-git/</a>) but instead of following it in the book's actual language (ruby) or using a language i already know (rust, vbnet, etc) i'm using a language i barely know: haskell! it's pretty fun so far <a href=\"https://t.co/pwmKyeOGej\" title=\"https://t.co/pwmKyeOGej\">https://twitter.com/QuietMisdreavus/status/1243321562628935680/photo/1</a></p><span>- a quiet misdreavus (@QuietMisdreavus)</span><div class=\"twitter-image\"><a href=\"https://t.co/pwmKyeOGej\" title=\"https://t.co/pwmKyeOGej\"><img src=\"https://pbs.twimg.com/media/EUEqE01UcAAQXZU.jpg:thumb\"></a></div></div></div><div class=\"inline-preview-twitter\"><div class=\"twitter-tweet\"><a href=\"https://twitter.com/QuietMisdreavus/status/1243744409910251520\"><img class=\"twitter-avatar\" src=\"https://pbs.twimg.com/profile_images/1141061925859713024/0ZLRcuDV_normal.png\"></a><p>\"Building Git\" haskell update: i'm having a lot of fun putting this together! something about the way haskell makes me think and model things, combined with the code doing something \"practical\", is very exciting and engaging <a href=\"https://t.co/QvZ6rW3tv0\" title=\"https://t.co/QvZ6rW3tv0\">https://twitter.com/QuietMisdreavus/status/1243744409910251520/photo/1</a></p><span>- a quiet misdreavus (@QuietMisdreavus)</span><div class=\"twitter-image\"><a href=\"https://t.co/QvZ6rW3tv0\" title=\"https://t.co/QvZ6rW3tv0\"><img src=\"https://pbs.twimg.com/media/EUKpT4fU8AAyj5G.jpg:small\"></a></div></div></div><div class=\"inline-preview-twitter\"><div class=\"twitter-tweet\"><a href=\"https://twitter.com/QuietMisdreavus/status/1245076026163511296\"><img class=\"twitter-avatar\" src=\"https://pbs.twimg.com/profile_images/1141061925859713024/0ZLRcuDV_normal.png\"></a><p>oh wait i realized i had some screenshots saved in my friends' discord <a href=\"https://t.co/B8xSOtZJNb\" title=\"https://t.co/B8xSOtZJNb\">https://twitter.com/QuietMisdreavus/status/1245076026163511296/photo/1</a></p><span>- a quiet misdreavus (@QuietMisdreavus)</span><div class=\"twitter-image\"><a href=\"https://t.co/B8xSOtZJNb\" title=\"https://t.co/B8xSOtZJNb\"><img src=\"https://pbs.twimg.com/media/EUdl9vwUEAA-2uq.jpg:thumb\"></a></div><div class=\"twitter-image\"><a href=\"https://t.co/B8xSOtZJNb\" title=\"https://t.co/B8xSOtZJNb\"><img src=\"https://pbs.twimg.com/media/EUdmAF5UcAEfKcx.jpg:thumb\"></a></div></div></div>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 192571063,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "grey@quietmisdreavus.net",
            "sender_full_name": "Victoria Mitchell (she) (F2'19)",
            "sender_id": 240569,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "\"Building Git\" in haskell",
            "submessages": [],
            "timestamp": 1585765180,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/c820158f867b70bed5e4d5ed84954ff9b49fceb2?x=x&version=4",
            "client": "ZulipElectron",
            "content": "<p>one notable thing that happened as a result of my tinkering is that i posted a patch to the haskell libraries mailing list, because there was a file API that the book made a big deal out of that the base library didn't support (and i couldn't find an alternative in a cursory search) <a href=\"https://mail.haskell.org/pipermail/libraries/2020-March/030340.html\" title=\"https://mail.haskell.org/pipermail/libraries/2020-March/030340.html\">https://mail.haskell.org/pipermail/libraries/2020-March/030340.html</a></p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 192571316,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "grey@quietmisdreavus.net",
            "sender_full_name": "Victoria Mitchell (she) (F2'19)",
            "sender_id": 240569,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "\"Building Git\" in haskell",
            "submessages": [],
            "timestamp": 1585765292,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/6640d94860cd540ca4ab88d3314293376b89197d?x=x&version=2",
            "client": "ZulipElectron",
            "content": "<p>Hi Grey, I started doing the same thing you did with Building Git, but I never ended it. The last thing I remember doing was chapter 2.3 and something resembling <code>cat-file</code>. All of your screenshots look great.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 192571876,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "gnusosa.mx@gmail.com",
            "sender_full_name": "Carlos Sosa (he) (SP2'20)",
            "sender_id": 276586,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "\"Building Git\" in haskell",
            "submessages": [],
            "timestamp": 1585765530,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/c820158f867b70bed5e4d5ed84954ff9b49fceb2?x=x&version=4",
            "client": "ZulipElectron",
            "content": "<p>i've made it all the way to chapter 6.3! i've got a basic commit history working, and the ability to store nested trees (i.e. subdirectories) in a commit. i've got quite a bit more to go (the calibre reader says i'm only 14% through) but it's been fun. right now i'm working on writing the index, which is turning into a bit of an adventure as i start figuring out things like ByteString builders and incremental hashing.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 192592366,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "grey@quietmisdreavus.net",
            "sender_full_name": "Victoria Mitchell (she) (F2'19)",
            "sender_id": 240569,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "\"Building Git\" in haskell",
            "submessages": [],
            "timestamp": 1585774822,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/6640d94860cd540ca4ab88d3314293376b89197d?x=x&version=2",
            "client": "ZulipElectron",
            "content": "<p>That's awesome. I should get back to it. Btw, great finding on the IO Writemode.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 192594730,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "gnusosa.mx@gmail.com",
            "sender_full_name": "Carlos Sosa (he) (SP2'20)",
            "sender_id": 276586,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "\"Building Git\" in haskell",
            "submessages": [],
            "timestamp": 1585776223,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/6640d94860cd540ca4ab88d3314293376b89197d?x=x&version=2",
            "client": "ZulipElectron",
            "content": "<p>I don't know if anybody out there has already posted this, but check out the <a href=\"http://www.haskellcast.com/\" title=\"http://www.haskellcast.com/\">http://www.haskellcast.com/</a>  Well known Haskellers have been interviewed, and showcased their work. There's a fun episode talking about <code>Conduit</code> <a href=\"http://www.haskellcast.com/episode/006-gabriel-gonzalez-and-michael-snoyman-on-pipes-and-conduit\" title=\"http://www.haskellcast.com/episode/006-gabriel-gonzalez-and-michael-snoyman-on-pipes-and-conduit\">http://www.haskellcast.com/episode/006-gabriel-gonzalez-and-michael-snoyman-on-pipes-and-conduit</a></p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 192709819,
            "is_me_message": false,
            "last_edit_timestamp": 1585853622,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "gnusosa.mx@gmail.com",
            "sender_full_name": "Carlos Sosa (he) (SP2'20)",
            "sender_id": 276586,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Podcasts",
            "submessages": [],
            "timestamp": 1585853607,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/6640d94860cd540ca4ab88d3314293376b89197d?x=x&version=2",
            "client": "website",
            "content": "<p>...And my xmonad + gnome session keeps on crashing. Story of my life.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 192823208,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "gnusosa.mx@gmail.com",
            "sender_full_name": "Carlos Sosa (he) (SP2'20)",
            "sender_id": 276586,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "xmonad",
            "submessages": [],
            "timestamp": 1585928579,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/833ed696bb4b9faaa8adbba9e8a2d9a8?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-id=\"276586\">@Carlos Sosa (he) (SP2'20)</span> <span class=\"user-mention\" data-user-id=\"105607\">@Tobin Yehle (he) (SP1'20)</span> <span class=\"user-mention\" data-user-id=\"279671\">@Harrison Katz (he) (SP2'20)</span> <span class=\"user-mention\" data-user-id=\"276140\">@Jimmy Tang (he) (SP2'20)</span> <span class=\"user-mention\" data-user-id=\"264905\">@Ksenia Rose Lake (she) (m2'20)</span> <span class=\"user-mention\" data-user-id=\"276158\">@Neil Liu (he) (SP2'20)</span> <span class=\"user-mention\" data-user-id=\"276197\">@Roland Crosby (he) (SP2'20)</span> <span class=\"user-mention\" data-user-id=\"276196\">@Jake Araujo-Simon (he/they) (SP2'20)</span> <span class=\"user-mention\" data-user-id=\"276132\">@Jesen Tanadi (he) (m3'20)</span> <span class=\"user-mention\" data-user-id=\"276142\">@Jesse Evers (he) (SP2'20)</span> <span class=\"user-mention\" data-user-id=\"263528\">@Sam Lazarus (he) (SP1'20)</span> <span class=\"user-mention\" data-user-id=\"263494\">@Raymond Akornor (he) (SP2'20)</span> </p>\n<p>Hey everyone, let's use this topic for us to discuss things related to the study group</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 192864454,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "+1",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "harrison@hkatz.dev",
                        "full_name": "Harrison Katz (he) (SP2'20)",
                        "id": 279671
                    },
                    "user_id": 279671
                },
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "+1",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "jaraujosim@gmail.com",
                        "full_name": "Jake Araujo-Simon (he/they) (SP2'20)",
                        "id": 276196
                    },
                    "user_id": 276196
                },
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "+1",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "roland@rolandcrosby.com",
                        "full_name": "Roland Crosby (he) (SP2'20)",
                        "id": 276197
                    },
                    "user_id": 276197
                },
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "+1",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "gnusosa.mx@gmail.com",
                        "full_name": "Carlos Sosa (he) (SP2'20)",
                        "id": 276586
                    },
                    "user_id": 276586
                },
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "+1",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "mail@jesentanadi.com",
                        "full_name": "Jesen Tanadi (he) (m3'20)",
                        "id": 276132
                    },
                    "user_id": 276132
                },
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "+1",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "talyian@gmail.com",
                        "full_name": "Jimmy Tang (he) (SP2'20)",
                        "id": 276140
                    },
                    "user_id": 276140
                },
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "+1",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "tobinyehle@gmail.com",
                        "full_name": "Tobin Yehle (he) (SP1'20)",
                        "id": 105607
                    },
                    "user_id": 105607
                },
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "+1",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "lazarus.sam@gmail.com",
                        "full_name": "Sam Lazarus (he) (SP1'20)",
                        "id": 263528
                    },
                    "user_id": 263528
                },
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "+1",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "jesse@jesseevers.com",
                        "full_name": "Jesse Evers (he) (SP2'20)",
                        "id": 276142
                    },
                    "user_id": 276142
                },
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "+1",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "kseniaroselake@gmail.com",
                        "full_name": "Ksenia Rose Lake (she) (m2'20)",
                        "id": 264905
                    },
                    "user_id": 264905
                }
            ],
            "recipient_id": 22667,
            "sender_email": "awchen@fastmail.com",
            "sender_full_name": "Alex Chen (he) (SP1'20)",
            "sender_id": 264095,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Haskell Study Group",
            "submessages": [],
            "timestamp": 1585948283,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/833ed696bb4b9faaa8adbba9e8a2d9a8?d=identicon&version=1",
            "client": "website",
            "content": "<p>Based on the poll, I've scheduled a session every Friday from 1pm-2pm EDT</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 192864778,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "awchen@fastmail.com",
            "sender_full_name": "Alex Chen (he) (SP1'20)",
            "sender_id": 264095,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Haskell Study Group",
            "submessages": [],
            "timestamp": 1585948463,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/a4f4aae4ac0511a81096ff3552f609aff93bd3e0?x=x&version=4",
            "client": "website",
            "content": "<p>Sounds good! I just got started with Haskell from First Principles today and I'm loving it, thanks for the rec :)</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 192864799,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "+1",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "kseniaroselake@gmail.com",
                        "full_name": "Ksenia Rose Lake (she) (m2'20)",
                        "id": 264905
                    },
                    "user_id": 264905
                },
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "+1",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "awchen@fastmail.com",
                        "full_name": "Alex Chen (he) (SP1'20)",
                        "id": 264095
                    },
                    "user_id": 264095
                }
            ],
            "recipient_id": 22667,
            "sender_email": "jesse@jesseevers.com",
            "sender_full_name": "Jesse Evers (he) (SP2'20)",
            "sender_id": 276142,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Haskell Study Group",
            "submessages": [],
            "timestamp": 1585948476,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/833ed696bb4b9faaa8adbba9e8a2d9a8?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-id=\"276586\">@Carlos Sosa (he) (SP2'20)</span> <span class=\"user-mention\" data-user-id=\"105607\">@Tobin Yehle (he) (SP1'20)</span> <span class=\"user-mention\" data-user-id=\"279671\">@Harrison Katz (he) (SP2'20)</span> <span class=\"user-mention\" data-user-id=\"276140\">@Jimmy Tang (he) (SP2'20)</span> <span class=\"user-mention\" data-user-id=\"264905\">@Ksenia Rose Lake (she) (m2'20)</span> <span class=\"user-mention\" data-user-id=\"276158\">@Neil Liu (he) (SP2'20)</span> <span class=\"user-mention\" data-user-id=\"276197\">@Roland Crosby (he) (SP2'20)</span> <span class=\"user-mention\" data-user-id=\"276196\">@Jake Araujo-Simon (he/they) (SP2'20)</span> <span class=\"user-mention\" data-user-id=\"276132\">@Jesen Tanadi (he) (m3'20)</span> <span class=\"user-mention\" data-user-id=\"276142\">@Jesse Evers (he) (SP2'20)</span> <span class=\"user-mention\" data-user-id=\"263528\">@Sam Lazarus (he) (SP1'20)</span> <span class=\"user-mention\" data-user-id=\"263494\">@Raymond Akornor (he) (SP2'20)</span> </p>\n<p>Hi everyone,</p>\n<p>Let's use \"Programming in Haskell - Graham Hutton\" (Hutton) as a primary text and \"Haskell Programming from First Principles - Christopher Allen, Julie Moronuki\" (HPFP) as a support/reference. I've sent emails to everyone about these books. Let me know if you haven't gotten one.</p>\n<p>Let's start out by reading Chapters 1, 2, 3, and 4 of Hutton by the Week 2 session (more details to follow).</p>\n<p>These chapters introduce the basic syntax and concepts of Haskell. Knowing those will be super helpful for the demo.</p>\n<p>Does that sound good?</p>\n<p>Also, sorry for pinging again, this will be the last time.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 192876919,
            "is_me_message": false,
            "last_edit_timestamp": 1585957472,
            "reactions": [
                {
                    "emoji_code": "1104",
                    "emoji_name": "haskell",
                    "reaction_type": "realm_emoji",
                    "user": {
                        "email": "tobinyehle@gmail.com",
                        "full_name": "Tobin Yehle (he) (SP1'20)",
                        "id": 105607
                    },
                    "user_id": 105607
                },
                {
                    "emoji_code": "1104",
                    "emoji_name": "haskell",
                    "reaction_type": "realm_emoji",
                    "user": {
                        "email": "jesse@jesseevers.com",
                        "full_name": "Jesse Evers (he) (SP2'20)",
                        "id": 276142
                    },
                    "user_id": 276142
                },
                {
                    "emoji_code": "1104",
                    "emoji_name": "haskell",
                    "reaction_type": "realm_emoji",
                    "user": {
                        "email": "kseniaroselake@gmail.com",
                        "full_name": "Ksenia Rose Lake (she) (m2'20)",
                        "id": 264905
                    },
                    "user_id": 264905
                },
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "+1",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "neil.liu16@gmail.com",
                        "full_name": "Neil Liu (he) (SP2'20)",
                        "id": 276158
                    },
                    "user_id": 276158
                },
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "+1",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "talyian@gmail.com",
                        "full_name": "Jimmy Tang (he) (SP2'20)",
                        "id": 276140
                    },
                    "user_id": 276140
                },
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "+1",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "roland@rolandcrosby.com",
                        "full_name": "Roland Crosby (he) (SP2'20)",
                        "id": 276197
                    },
                    "user_id": 276197
                }
            ],
            "recipient_id": 22667,
            "sender_email": "awchen@fastmail.com",
            "sender_full_name": "Alex Chen (he) (SP1'20)",
            "sender_id": 264095,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Haskell Study Group",
            "submessages": [],
            "timestamp": 1585957409,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/833ed696bb4b9faaa8adbba9e8a2d9a8?d=identicon&version=1",
            "client": "website",
            "content": "<p>In order to setup Haskell, let's use the <code>stack</code> package manager. So, disregard section 2.2 of Hutton and instead use sections 2.1 and 2.2 of HPFP</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 192877266,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "+1",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "kseniaroselake@gmail.com",
                        "full_name": "Ksenia Rose Lake (she) (m2'20)",
                        "id": 264905
                    },
                    "user_id": 264905
                },
                {
                    "emoji_code": "1240",
                    "emoji_name": "parrot",
                    "reaction_type": "realm_emoji",
                    "user": {
                        "email": "kseniaroselake@gmail.com",
                        "full_name": "Ksenia Rose Lake (she) (m2'20)",
                        "id": 264905
                    },
                    "user_id": 264905
                },
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "+1",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "gnusosa.mx@gmail.com",
                        "full_name": "Carlos Sosa (he) (SP2'20)",
                        "id": 276586
                    },
                    "user_id": 276586
                }
            ],
            "recipient_id": 22667,
            "sender_email": "awchen@fastmail.com",
            "sender_full_name": "Alex Chen (he) (SP1'20)",
            "sender_id": 264095,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Haskell Study Group",
            "submessages": [],
            "timestamp": 1585957770,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/833ed696bb4b9faaa8adbba9e8a2d9a8?d=identicon&version=1",
            "client": "website",
            "content": "<p>HPFP supplements to Hutton sections</p>\n<p>Ch 3: Types and classes</p>\n<ul>\n<li>3.5 Function types<ul>\n<li>HPFP: 1.3</li>\n</ul>\n</li>\n<li>3.6 Curried functions<ul>\n<li>HPFP: 5.4</li>\n</ul>\n</li>\n<li>3.7 Polymorphic types<ul>\n<li>HPFP: 5.5</li>\n</ul>\n</li>\n<li>3.8 Overloaded types<ul>\n<li>HPFP: 6.2</li>\n</ul>\n</li>\n</ul>\n<p>Ch 4: Defining functions</p>\n<ul>\n<li>4.4 Pattern matching<ul>\n<li>HPFP: 7.4 (stop before 'Pattern matching against data constructors' for now)</li>\n</ul>\n</li>\n<li><strong>Also read HPFP: 2.10</strong> to learn the <code>let .. in</code> syntax</li>\n</ul>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 192877628,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1104",
                    "emoji_name": "haskell",
                    "reaction_type": "realm_emoji",
                    "user": {
                        "email": "kseniaroselake@gmail.com",
                        "full_name": "Ksenia Rose Lake (she) (m2'20)",
                        "id": 264905
                    },
                    "user_id": 264905
                }
            ],
            "recipient_id": 22667,
            "sender_email": "awchen@fastmail.com",
            "sender_full_name": "Alex Chen (he) (SP1'20)",
            "sender_id": 264095,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Haskell Study Group",
            "submessages": [],
            "timestamp": 1585958061,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/700775c1b9679bb74bd97d4ced91fadf9cc2ed17?x=x&version=2",
            "client": "website",
            "content": "<p>is the week 2 session this coming friday?</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 193065248,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "roland@rolandcrosby.com",
            "sender_full_name": "Roland Crosby (he) (SP2'20)",
            "sender_id": 276197,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Haskell Study Group",
            "submessages": [],
            "timestamp": 1586189766,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/833ed696bb4b9faaa8adbba9e8a2d9a8?d=identicon&version=1",
            "client": "website",
            "content": "<p>Yes, that's what I intended to say, sorry if it was unclear</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 193068321,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "+1",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "roland@rolandcrosby.com",
                        "full_name": "Roland Crosby (he) (SP2'20)",
                        "id": 276197
                    },
                    "user_id": 276197
                }
            ],
            "recipient_id": 22667,
            "sender_email": "awchen@fastmail.com",
            "sender_full_name": "Alex Chen (he) (SP1'20)",
            "sender_id": 264095,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Haskell Study Group",
            "submessages": [],
            "timestamp": 1586191264,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/833ed696bb4b9faaa8adbba9e8a2d9a8?d=identicon&version=1",
            "client": "website",
            "content": "<p>Also, I've been thinking about how the group should work. Maybe the group should be less of a course or lecture, and more self-directed, in the spirit of RC. Well, there's the introductory reading group and beginner-level demos. But apart from those, maybe the group should operate as an interest group where people share things that they've recently learned about Haskell, Haskell projects they're working on, or anything remotely Haskell-related that they're enthusiastic about.</p>\n<p>What does everyone think?</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 193069519,
            "is_me_message": false,
            "last_edit_timestamp": 1586191974,
            "reactions": [
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "+1",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "lazarus.sam@gmail.com",
                        "full_name": "Sam Lazarus (he) (SP1'20)",
                        "id": 263528
                    },
                    "user_id": 263528
                },
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "+1",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "gnusosa.mx@gmail.com",
                        "full_name": "Carlos Sosa (he) (SP2'20)",
                        "id": 276586
                    },
                    "user_id": 276586
                },
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "+1",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "jesse@jesseevers.com",
                        "full_name": "Jesse Evers (he) (SP2'20)",
                        "id": 276142
                    },
                    "user_id": 276142
                },
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "+1",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "kseniaroselake@gmail.com",
                        "full_name": "Ksenia Rose Lake (she) (m2'20)",
                        "id": 264905
                    },
                    "user_id": 264905
                },
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "+1",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "tobinyehle@gmail.com",
                        "full_name": "Tobin Yehle (he) (SP1'20)",
                        "id": 105607
                    },
                    "user_id": 105607
                }
            ],
            "recipient_id": 22667,
            "sender_email": "awchen@fastmail.com",
            "sender_full_name": "Alex Chen (he) (SP1'20)",
            "sender_id": 264095,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Haskell Study Group",
            "submessages": [],
            "timestamp": 1586191806,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/570b5294859a4650f5c6c4f866b6fba3e34af02b?x=x&version=2",
            "client": "website",
            "content": "<p>I like that! I was thinking maybe kinda like the algorithms group, but for Haskell things?</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 193075722,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "tobinyehle@gmail.com",
            "sender_full_name": "Tobin Yehle (he) (SP1'20)",
            "sender_id": 105607,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Haskell Study Group",
            "submessages": [],
            "timestamp": 1586194781,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/3924d372b2e62f5d77caffb3c653c6ecde63ada7?x=x&version=2",
            "client": "ZulipElectron",
            "content": "<p>Ditto! That'd be very cool for me as a relative beginner -- algorithms in Haskell as a focus for our \"part 1\" sessions.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 193077777,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "kseniaroselake@gmail.com",
            "sender_full_name": "Ksenia Rose Lake (she) (m2'20)",
            "sender_id": 264905,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Haskell Study Group",
            "submessages": [],
            "timestamp": 1586195659,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/3924d372b2e62f5d77caffb3c653c6ecde63ada7?x=x&version=2",
            "client": "ZulipElectron",
            "content": "<p>Also excited to see what people might bring to share for our \"part 2\" sections... :-)</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 193077952,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "kseniaroselake@gmail.com",
            "sender_full_name": "Ksenia Rose Lake (she) (m2'20)",
            "sender_id": 264905,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Haskell Study Group",
            "submessages": [],
            "timestamp": 1586195749,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/833ed696bb4b9faaa8adbba9e8a2d9a8?d=identicon&version=1",
            "client": "website",
            "content": "<p>I don't think I can prepare anything for part 2 this week, since I'm trying to hunker down on OpenGL in time for the game jam. But next week I could do something. Maybe about concurrent programming in Haskell, since I've done that before.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 193125127,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "awchen@fastmail.com",
            "sender_full_name": "Alex Chen (he) (SP1'20)",
            "sender_id": 264095,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Haskell Study Group",
            "submessages": [],
            "timestamp": 1586225774,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/833ed696bb4b9faaa8adbba9e8a2d9a8?d=identicon&version=1",
            "client": "website",
            "content": "<p>For part 1 this week, maybe we could have the experienced folks solve hackerrank/algorithms problems in Haskell? We could take requests</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 193125159,
            "is_me_message": false,
            "last_edit_timestamp": 1586225851,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "awchen@fastmail.com",
            "sender_full_name": "Alex Chen (he) (SP1'20)",
            "sender_id": 264095,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Haskell Study Group",
            "submessages": [],
            "timestamp": 1586225835,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/833ed696bb4b9faaa8adbba9e8a2d9a8?d=identicon&version=1",
            "client": "website",
            "content": "<p>How is everyone doing with the reading?</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 193262538,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "awchen@fastmail.com",
            "sender_full_name": "Alex Chen (he) (SP1'20)",
            "sender_id": 264095,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Haskell Study Group",
            "submessages": [],
            "timestamp": 1586303548,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/15f1d27c330f216d0d1722411c39ef187d2b5943?x=x&version=2",
            "client": "ZulipElectron",
            "content": "<p>I just joined the study group - what is the reading? - I have been going through this sporadically for the past year - <a href=\"https://www.cs.yale.edu/homes/hudak/Papers/HSoM.pdf\" title=\"https://www.cs.yale.edu/homes/hudak/Papers/HSoM.pdf\">https://www.cs.yale.edu/homes/hudak/Papers/HSoM.pdf</a></p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 193325699,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "meredith@paom.com",
            "sender_full_name": "Meredith Finkelstein (W2'19)",
            "sender_id": 198453,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Haskell Study Group",
            "submessages": [],
            "timestamp": 1586355208,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/c63485a13c31d9a2e63b4906486ee18c?d=identicon&version=1",
            "client": "ZulipElectron",
            "content": "<p><span class=\"user-mention\" data-user-id=\"264095\">@Alex Chen (he) (SP1'20)</span> I liked the first chapter of HPFP! <span class=\"user-mention\" data-user-id=\"198453\">@Meredith Finkelstein (W2'19)</span> We were taking a look at the sections of the books by Hutton and also Moronuki referenced above, and also maybe doing something more freeform. <br>\nAlso, re: part 2 of this Friday's meeting, I might have ~a few minutes worth of material I could present on defining a category in just a few lines of Haskell, if people have interest? It might not be immediately useful for anything.. just a beautiful abstraction. Would also personally really appreciate an intro to any one of the libraries we discussed last week (especially lens), if anyone feels up to it.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 193337187,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "+1",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "awchen@fastmail.com",
                        "full_name": "Alex Chen (he) (SP1'20)",
                        "id": 264095
                    },
                    "user_id": 264095
                },
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "+1",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "kseniaroselake@gmail.com",
                        "full_name": "Ksenia Rose Lake (she) (m2'20)",
                        "id": 264905
                    },
                    "user_id": 264905
                },
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "+1",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "meredith@paom.com",
                        "full_name": "Meredith Finkelstein (W2'19)",
                        "id": 198453
                    },
                    "user_id": 198453
                }
            ],
            "recipient_id": 22667,
            "sender_email": "jaraujosim@gmail.com",
            "sender_full_name": "Jake Araujo-Simon (he/they) (SP2'20)",
            "sender_id": 276196,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Haskell Study Group",
            "submessages": [],
            "timestamp": 1586360083,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/3924d372b2e62f5d77caffb3c653c6ecde63ada7?x=x&version=2",
            "client": "ZulipElectron",
            "content": "<p><span class=\"user-mention\" data-user-id=\"276196\">@Jake Araujo-Simon (he/they) (SP2'20)</span> that sounds awesome! Do you have a section in <a href=\"https://bartoszmilewski.com/2014/10/28/category-theory-for-programmers-the-preface/\" title=\"https://bartoszmilewski.com/2014/10/28/category-theory-for-programmers-the-preface/\">https://bartoszmilewski.com/2014/10/28/category-theory-for-programmers-the-preface/</a> that you'd recommend we take a look at beforehand?</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 193350451,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "kseniaroselake@gmail.com",
            "sender_full_name": "Ksenia Rose Lake (she) (m2'20)",
            "sender_id": 264905,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Haskell Study Group",
            "submessages": [],
            "timestamp": 1586365861,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/3924d372b2e62f5d77caffb3c653c6ecde63ada7?x=x&version=2",
            "client": "ZulipElectron",
            "content": "<p><span class=\"user-mention\" data-user-id=\"264095\">@Alex Chen (he) (SP1'20)</span> I, too, am enjoying HPFP! I'm going back and building up some of my basics, working on types Ch.4 and thoroughly enjoyed Ch.1 intro to lambda calculus. I'm working on implementing a tictactoe in Haskell but got a little stuck, hence going back to build up foundations. Will also look at assigned Hutton Chapters before Friday.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 193350955,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "+1",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "awchen@fastmail.com",
                        "full_name": "Alex Chen (he) (SP1'20)",
                        "id": 264095
                    },
                    "user_id": 264095
                }
            ],
            "recipient_id": 22667,
            "sender_email": "kseniaroselake@gmail.com",
            "sender_full_name": "Ksenia Rose Lake (she) (m2'20)",
            "sender_id": 264905,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Haskell Study Group",
            "submessages": [],
            "timestamp": 1586366113,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/c63485a13c31d9a2e63b4906486ee18c?d=identicon&version=1",
            "client": "ZulipElectron",
            "content": "<p><span class=\"user-mention\" data-user-id=\"264905\">@Ksenia Rose Lake (she) (m2'20)</span>  hm, I just glanced at the (amazing) content there, and it doesn't appear to have something analogous to what I'd show, which is roughly taken from the Data.Category package, <a href=\"https://hackage.haskell.org/package/data-category\" title=\"https://hackage.haskell.org/package/data-category\">https://hackage.haskell.org/package/data-category</a>. Gershom Bazerman (who co-organizes a number of NYC Haskell/CT-related meetups) once shared with me his interpretation of some of the definitions there, in what felt like a slightly simpler form.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 193362937,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "jaraujosim@gmail.com",
            "sender_full_name": "Jake Araujo-Simon (he/they) (SP2'20)",
            "sender_id": 276196,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Haskell Study Group",
            "submessages": [],
            "timestamp": 1586371909,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/833ed696bb4b9faaa8adbba9e8a2d9a8?d=identicon&version=1",
            "client": "website",
            "content": "<p>Yeah, getting introduced to data-category would be cool.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 193385328,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "awchen@fastmail.com",
            "sender_full_name": "Alex Chen (he) (SP1'20)",
            "sender_id": 264095,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Haskell Study Group",
            "submessages": [],
            "timestamp": 1586384223,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/833ed696bb4b9faaa8adbba9e8a2d9a8?d=identicon&version=1",
            "client": "website",
            "content": "<p>It seems that everyone is liking HPFP, I wonder if we should focus more on it rather than Hutton</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 193385376,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "awchen@fastmail.com",
            "sender_full_name": "Alex Chen (he) (SP1'20)",
            "sender_id": 264095,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Haskell Study Group",
            "submessages": [],
            "timestamp": 1586384270,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/a4f4aae4ac0511a81096ff3552f609aff93bd3e0?x=x&version=4",
            "client": "website",
            "content": "<p>I have a question on one of the exercises from the Type Arguments section of Chapter 5 in HPFP...if anyone's willing to hop on a call with me for a minute or two to try and explain it, I'd super appreciate it :) if not it can definitely wait till our meeting tomorrow!</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 193498144,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "jesse@jesseevers.com",
            "sender_full_name": "Jesse Evers (he) (SP2'20)",
            "sender_id": 276142,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Haskell Study Group",
            "submessages": [],
            "timestamp": 1586460457,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/a4f4aae4ac0511a81096ff3552f609aff93bd3e0?x=x&version=4",
            "client": "website",
            "content": "<p>(Nevermind just figured it out)</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 193502102,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "jesse@jesseevers.com",
            "sender_full_name": "Jesse Evers (he) (SP2'20)",
            "sender_id": 276142,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Haskell Study Group",
            "submessages": [],
            "timestamp": 1586462544,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/1bd49962ff0f7e7f3ee603f8243a1015bb6690bd?x=x&version=7",
            "client": "website",
            "content": "<p>On the homework, I have a question for Sutton Chapter 3 Question 1: <code>:t [tail, init, reverse]</code> shows me <code>[[a] -&gt; [a]]</code> in Haskell, which seems ambiguous as to where the scope of <code>a</code> begins and ends, i.e. does the free variable <code>a</code> need to match in each element of the list?</p>\n<p>(edit: some googling seems to indicate Haskell calls this \"quantification\" and also that \"both universal and existential quantification are expressed with <code>forall</code>\". This second statement raises more alarming questions, and doesn't seem to answer why the quantifier is not part of the type signature)</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 193539826,
            "is_me_message": false,
            "last_edit_timestamp": 1586498163,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "talyian@gmail.com",
            "sender_full_name": "Jimmy Tang (he) (SP2'20)",
            "sender_id": 276140,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Haskell Study Group",
            "submessages": [],
            "timestamp": 1586497311,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/1bd49962ff0f7e7f3ee603f8243a1015bb6690bd?x=x&version=7",
            "client": "website",
            "content": "<p>continued investigation : \"In Haskell 98, all type signatures are implicitly universally quantified at the outer level\" -- this also doesn't seem to answer the question, since <code>\u2200 a : [[a] -&gt; [a]]</code> seems like it should only instantiate <code>a</code> once, but in ghci I just tried</p>\n<div class=\"codehilite\"><pre><span></span>\u03bb&gt; b = [tail, init, reverse]\n\u03bb&gt; :t b\nb :: [[a] -&gt; [a]]\n\u03bb&gt; ((b !! 0) [3,4], (b !! 1) &quot;foobar&quot;)\n([4],&quot;fooba&quot;)\n</pre></div>\n\n\n<p>so it seems like the type would look like <code>[\u2200 a : [a] -&gt; [a]]</code></p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 193540314,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "talyian@gmail.com",
            "sender_full_name": "Jimmy Tang (he) (SP2'20)",
            "sender_id": 276140,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Haskell Study Group",
            "submessages": [],
            "timestamp": 1586498116,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4d074af6cc341ef51b25bb2f738cdb11?d=identicon&version=1",
            "client": "website",
            "content": "<p>I wonder if the monomorphism restriction is confusing you here, it's turned off in GHCi but present if you use a source file.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 193540473,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "vaibhavsagar@gmail.com",
            "sender_full_name": "Vaibhav Sagar (he) (F1'16)",
            "sender_id": 100041,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Haskell Study Group",
            "submessages": [],
            "timestamp": 1586498294,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4d074af6cc341ef51b25bb2f738cdb11?d=identicon&version=1",
            "client": "website",
            "content": "<p>oh, nevermind, it works the same way in a file</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 193540555,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "vaibhavsagar@gmail.com",
            "sender_full_name": "Vaibhav Sagar (he) (F1'16)",
            "sender_id": 100041,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Haskell Study Group",
            "submessages": [],
            "timestamp": 1586498412,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4d074af6cc341ef51b25bb2f738cdb11?d=identicon&version=1",
            "client": "website",
            "content": "<p><em>Main.hs</em>:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"cm\">{-# LANGUAGE ExplicitForAll #-}</span>\n\n<span class=\"nf\">b</span> <span class=\"ow\">::</span> <span class=\"n\">forall</span> <span class=\"n\">a</span><span class=\"o\">.</span> <span class=\"p\">[[</span><span class=\"n\">a</span><span class=\"p\">]</span> <span class=\"ow\">-&gt;</span> <span class=\"p\">[</span><span class=\"n\">a</span><span class=\"p\">]]</span>\n<span class=\"nf\">b</span> <span class=\"ow\">=</span> <span class=\"p\">[</span><span class=\"n\">tail</span><span class=\"p\">,</span> <span class=\"n\">init</span><span class=\"p\">,</span> <span class=\"n\">reverse</span><span class=\"p\">]</span>\n\n<span class=\"nf\">main</span> <span class=\"ow\">=</span> <span class=\"kr\">do</span>\n    <span class=\"n\">print</span> <span class=\"o\">$</span> <span class=\"p\">((</span><span class=\"n\">b</span> <span class=\"o\">!!</span> <span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">,</span><span class=\"mi\">4</span><span class=\"p\">],</span> <span class=\"p\">(</span><span class=\"n\">b</span> <span class=\"o\">!!</span> <span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"s\">&quot;foobar&quot;</span><span class=\"p\">)</span>\n</pre></div>\n\n\n<p>Output:</p>\n<div class=\"codehilite\"><pre><span></span>$ runghc Main.hs\n<span class=\"o\">([</span><span class=\"m\">4</span><span class=\"o\">]</span>,<span class=\"s2\">&quot;fooba&quot;</span><span class=\"o\">)</span>\n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 193540639,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "vaibhavsagar@gmail.com",
            "sender_full_name": "Vaibhav Sagar (he) (F1'16)",
            "sender_id": 100041,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Haskell Study Group",
            "submessages": [],
            "timestamp": 1586498571,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/1bd49962ff0f7e7f3ee603f8243a1015bb6690bd?x=x&version=7",
            "client": "website",
            "content": "<p><span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span> </p>\n<div class=\"codehilite\"><pre><span></span>wat.hs:6:6-27: error:\n    \u2022 Illegal polymorphic type: forall a. [a] -&gt; [a]\n      GHC doesn&#39;t yet support impredicative polymorphism\n    \u2022 In the type signature:\n        c :: [forall a. [a] -&gt; [a]]\n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 193541262,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "talyian@gmail.com",
            "sender_full_name": "Jimmy Tang (he) (SP2'20)",
            "sender_id": 276140,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Haskell Study Group",
            "submessages": [],
            "timestamp": 1586499437,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/6485c74622306264ff53449c6f0ca540?d=identicon&version=1",
            "client": "ZulipMobile",
            "content": "<p>I like V's theory - that the first use of b is instantiating a at Integer and the second at Char -  but I also wonder if it might just be a rendering thing. The values in the array are all of type <code>forall a. [a] -&gt; [a]</code>, and since there are no free type variables there's no need for a forall outside the list.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 193541398,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "iain@mccoy.id.au",
            "sender_full_name": "Iain McCoy (he) (SP2'17)",
            "sender_id": 100806,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Haskell Study Group",
            "submessages": [],
            "timestamp": 1586499721,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/6485c74622306264ff53449c6f0ca540?d=identicon&version=1",
            "client": "ZulipMobile",
            "content": "<p>This would contradict the text you quoted about haskell98, but I'd want to be sure that the environment you were in was actually set up to be haskell98 before putting too much stock in it.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 193541454,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "iain@mccoy.id.au",
            "sender_full_name": "Iain McCoy (he) (SP2'17)",
            "sender_id": 100806,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Haskell Study Group",
            "submessages": [],
            "timestamp": 1586499784,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/1bd49962ff0f7e7f3ee603f8243a1015bb6690bd?x=x&version=7",
            "client": "website",
            "content": "<p><span class=\"user-mention silent\" data-user-id=\"100806\">Iain McCoy (he) (SP2'17)</span> <a href=\"#narrow/stream/20298-haskell/topic/Haskell.20Study.20Group/near/193541398\" title=\"#narrow/stream/20298-haskell/topic/Haskell.20Study.20Group/near/193541398\">said</a>:</p>\n<blockquote>\n<p>I like V's theory - that the first use of b is instantiating a at Integer and the second at Char -  but I also wonder if it might just be a rendering thing. The values in the array are all of type <code>forall a. [a] -&gt; [a]</code>, and since there are no free type variables there's no need for a forall outside the list.</p>\n</blockquote>\n<p>This would make sense and describe the observed behavior. Going to sleep now, thanks for the input. <span aria-label=\"zzz\" class=\"emoji emoji-1f4a4\" role=\"img\" title=\"zzz\">:zzz:</span> <img alt=\":haskell:\" class=\"emoji\" src=\"https://zulip-avatars.s3.amazonaws.com/13/emoji/images/1104.png\" title=\"haskell\"> <span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span></p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 193542436,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "talyian@gmail.com",
            "sender_full_name": "Jimmy Tang (he) (SP2'20)",
            "sender_id": 276140,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Haskell Study Group",
            "submessages": [],
            "timestamp": 1586501189,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/7580ab83ada9265285a940c5a1098204?d=identicon&version=1",
            "client": "website",
            "content": "<p>So theres two things going on here. </p>\n<p>1) Why are the <code>a</code>s unified in the list of functions?</p>\n<p>Each function in the list is quantified individually. That means they each have the type `forall a. [a] -&gt; [a].</p>\n<p>The reason they all get unified is that they are in a <code>[]</code> which has type:</p>\n<div class=\"codehilite\"><pre><span></span>data [] a = [] | a : ([] a)\n</pre></div>\n\n\n<p>So in order for the expression to be well typed, all 3 functions must take the same <code>a</code>. GHC is smart enough to figure this out.</p>\n<p>2) Why can I call functions from that list with two different concrete types for <code>a</code> even after they were unified?</p>\n<p>The caller gets to pick the concrete type for <code>a</code>. So the first caller picks a<code>Num a =&gt; a</code> and the second picks <code>Char</code>.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 193638832,
            "is_me_message": false,
            "last_edit_timestamp": 1586580111,
            "reactions": [
                {
                    "emoji_code": "1f389",
                    "emoji_name": "tada",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "talyian@gmail.com",
                        "full_name": "Jimmy Tang (he) (SP2'20)",
                        "id": 276140
                    },
                    "user_id": 276140
                }
            ],
            "recipient_id": 22667,
            "sender_email": "ssbothwell@gmail.com",
            "sender_full_name": "Solomon Bothwell (he) (F2'19)",
            "sender_id": 240589,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Haskell Study Group",
            "submessages": [],
            "timestamp": 1586573427,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/1bd49962ff0f7e7f3ee603f8243a1015bb6690bd?x=x&version=7",
            "client": "website",
            "content": "<p>thanks, that's an understandable explanation</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 193639706,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "talyian@gmail.com",
            "sender_full_name": "Jimmy Tang (he) (SP2'20)",
            "sender_id": 276140,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Haskell Study Group",
            "submessages": [],
            "timestamp": 1586575305,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/7580ab83ada9265285a940c5a1098204?d=identicon&version=1",
            "client": "website",
            "content": "<p>No problem! There was also a few other questions about universal and existential quantification. Universal quantification means \"forall values of a, this function must hold true.\" Existential quantification states \"there is _some_ a where this function holds true.\"</p>\n<p>You can define each form of quantification in terms of the other. In haskell they implemented universal quantification and allow you to use it to implicitly define existentials. You do this like so:</p>\n<div class=\"codehilite\"><pre><span></span>data MyType = forall a. MyType a\n</pre></div>\n\n\n<p>By shifting the <code>forall</code> to the right hand side of the definition, we have existentially quantified the <code>a</code>. GHC now has no idea what type is 'inside' <code>MyType</code>. This has some interesting effects. </p>\n<p>Functions that call <code>MyType</code>, don't get to specify the type for <code>a</code>.  This puts some pretty severe limits on what functions can do with <code>MyType</code>. In fact, you can't really do anything other then return the value as is. However, you now don't need to deal with the <code>a</code> when deriving typeclass instances. </p>\n<p>If you want to do anything with the existential type then you need to put a typeclass instance on it.</p>\n<p>For example:</p>\n<div class=\"codehilite\"><pre><span></span>data Printable = forall a. Show a =&gt; Printable a\n</pre></div>\n\n\n<p>Now a function that takes a <code>Printable</code> can call <code>show</code> on it. This is cool because you can have a heterogenous list of <code>Printable</code> values:</p>\n<div class=\"codehilite\"><pre><span></span>printables :: [Printable]\nprintables = [Printable (), Printable True, Printable &quot;foo&quot;]\n</pre></div>\n\n\n<p>Which you can print like this:</p>\n<div class=\"codehilite\"><pre><span></span>printThem :: [Printable] -&gt; IO ()\nprintThem xs = mapM_ (\\(Printable a) -&gt; print a) xs\n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 193642948,
            "is_me_message": false,
            "last_edit_timestamp": 1586625653,
            "reactions": [
                {
                    "emoji_code": "1104",
                    "emoji_name": "haskell",
                    "reaction_type": "realm_emoji",
                    "user": {
                        "email": "gnusosa.mx@gmail.com",
                        "full_name": "Carlos Sosa (he) (SP2'20)",
                        "id": 276586
                    },
                    "user_id": 276586
                },
                {
                    "emoji_code": "1104",
                    "emoji_name": "haskell",
                    "reaction_type": "realm_emoji",
                    "user": {
                        "email": "talyian@gmail.com",
                        "full_name": "Jimmy Tang (he) (SP2'20)",
                        "id": 276140
                    },
                    "user_id": 276140
                }
            ],
            "recipient_id": 22667,
            "sender_email": "ssbothwell@gmail.com",
            "sender_full_name": "Solomon Bothwell (he) (F2'19)",
            "sender_id": 240589,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Haskell Study Group",
            "submessages": [],
            "timestamp": 1586581587,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/3924d372b2e62f5d77caffb3c653c6ecde63ada7?x=x&version=2",
            "client": "ZulipElectron",
            "content": "<p>Hey there Study Group,<br>\nI added a file to our Remote RC Google Drive:<br>\n/Study Groups/Haskell/<a href=\"https://docs.google.com/document/d/1cM2BD3BnlW0qs5tQJl5D-yHmKgnyE3naXaOxCwhy6CM/edit\" title=\"https://docs.google.com/document/d/1cM2BD3BnlW0qs5tQJl5D-yHmKgnyE3naXaOxCwhy6CM/edit\">Haskell Study Group Meetings</a><br>\nThis is something I saw under another group somewhere, just a place for us to log what we cover at our meetings. I also posted the reading there, so it's easy to find.<br>\nHope this is helpful!</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 193773774,
            "is_me_message": false,
            "last_edit_timestamp": 1586786759,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "kseniaroselake@gmail.com",
            "sender_full_name": "Ksenia Rose Lake (she) (m2'20)",
            "sender_id": 264905,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Haskell Study Group",
            "submessages": [],
            "timestamp": 1586786064,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/700775c1b9679bb74bd97d4ced91fadf9cc2ed17?x=x&version=2",
            "client": "website",
            "content": "<p>thanks for note taking <span class=\"user-mention\" data-user-id=\"264905\">@Ksenia Rose Lake (she) (m2'20)</span> !<br>\nhas anyone suggested what the reading should be this week?</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 193972150,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "roland@rolandcrosby.com",
            "sender_full_name": "Roland Crosby (he) (SP2'20)",
            "sender_id": 276197,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Haskell Study Group",
            "submessages": [],
            "timestamp": 1586910112,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/833ed696bb4b9faaa8adbba9e8a2d9a8?d=identicon&version=1",
            "client": "website",
            "content": "<p>How about we try to read chapters 5, 6, 7, 8, and 9 of Hutton by Friday? I'm not sure if that's too much, but it would have us finishing up the \"basic concepts\" section of the book. That way we can start reading about monads next week, which we'll need for writing interactive, medium-sized programs.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 194212571,
            "is_me_message": false,
            "last_edit_timestamp": 1586977480,
            "reactions": [
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "+1",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "roland@rolandcrosby.com",
                        "full_name": "Roland Crosby (he) (SP2'20)",
                        "id": 276197
                    },
                    "user_id": 276197
                },
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "+1",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "gnusosa.mx@gmail.com",
                        "full_name": "Carlos Sosa (he) (SP2'20)",
                        "id": 276586
                    },
                    "user_id": 276586
                },
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "+1",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "talyian@gmail.com",
                        "full_name": "Jimmy Tang (he) (SP2'20)",
                        "id": 276140
                    },
                    "user_id": 276140
                }
            ],
            "recipient_id": 22667,
            "sender_email": "awchen@fastmail.com",
            "sender_full_name": "Alex Chen (he) (SP1'20)",
            "sender_id": 264095,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Haskell Study Group",
            "submessages": [],
            "timestamp": 1586977445,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/833ed696bb4b9faaa8adbba9e8a2d9a8?d=identicon&version=1",
            "client": "website",
            "content": "<p>HPFP supplements to Hutton</p>\n<p>Ch 5: List comprehensions</p>\n<ul>\n<li>HPFP: 9.7</li>\n</ul>\n<p>Ch 6: Recursive functions</p>\n<ul>\n<li>HPFP: 8 (in particular, 8.1)</li>\n</ul>\n<p>Ch 7: Higher-order functions</p>\n<ul>\n<li>7.3, 7.4: <code>foldr</code> and <code>foldl</code><ul>\n<li>HPFP: 10</li>\n</ul>\n</li>\n</ul>\n<p>Ch 8: Declaring types and classes</p>\n<ul>\n<li>HPFP: 5.1, 5.2 (What are types for?)</li>\n<li>HPFP: 11 (in particular, 11.1, 11.8, 11.14)</li>\n</ul>\n<p>Ch 9: The countdown problem</p>\n<p>Also read</p>\n<ul>\n<li>HPFP: 7.5 (Case expressions)</li>\n<li>HPFP: 7.9 (Point-free style)</li>\n</ul>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 194219359,
            "is_me_message": false,
            "last_edit_timestamp": 1586980843,
            "reactions": [
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "+1",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "kseniaroselake@gmail.com",
                        "full_name": "Ksenia Rose Lake (she) (m2'20)",
                        "id": 264905
                    },
                    "user_id": 264905
                }
            ],
            "recipient_id": 22667,
            "sender_email": "awchen@fastmail.com",
            "sender_full_name": "Alex Chen (he) (SP1'20)",
            "sender_id": 264095,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Haskell Study Group",
            "submessages": [],
            "timestamp": 1586980761,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/700775c1b9679bb74bd97d4ced91fadf9cc2ed17?x=x&version=2",
            "client": "website",
            "content": "<p>Does anyone have recommendations on getting started with editor tooling for Haskell development in VS Code (in my case on macOS)? Somehow I ended up with both stack and cabal (ghcup?) installed, multiple versions of GHC (automatically?) installed (and frequently giving me warnings/errors about using the wrong versions), plus a Haskell language server extension that informs me that it crashed every time I open a Haskell project. Plus there's a bunch of crap that's been added to my $PATH and various hidden folders in my home directory that I'm not even going to pretend to understand. I would love to just delete all the Haskell tools I have installed and start again, but I hesitate to do that without having a known-good configuration to work towards.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 194385947,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "roland@rolandcrosby.com",
            "sender_full_name": "Roland Crosby (he) (SP2'20)",
            "sender_id": 276197,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Dev setup on MacOS with VS Code",
            "submessages": [],
            "timestamp": 1587085159,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4d074af6cc341ef51b25bb2f738cdb11?d=identicon&version=1",
            "client": "website",
            "content": "<p>wow, that sounds like a mess</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 194385956,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "vaibhavsagar@gmail.com",
            "sender_full_name": "Vaibhav Sagar (he) (F1'16)",
            "sender_id": 100041,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Dev setup on MacOS with VS Code",
            "submessages": [],
            "timestamp": 1587085191,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4d074af6cc341ef51b25bb2f738cdb11?d=identicon&version=1",
            "client": "website",
            "content": "<p>AFAICT the current best IDE integration is provided by <a href=\"https://github.com/haskell/haskell-ide-engine\" title=\"https://github.com/haskell/haskell-ide-engine\"><code>haskell-ide-engine</code></a></p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 194386040,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "vaibhavsagar@gmail.com",
            "sender_full_name": "Vaibhav Sagar (he) (F1'16)",
            "sender_id": 100041,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Dev setup on MacOS with VS Code",
            "submessages": [],
            "timestamp": 1587085257,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4d074af6cc341ef51b25bb2f738cdb11?d=identicon&version=1",
            "client": "website",
            "content": "<p>I've always found it too confusing to set up correctly, so I just use <a href=\"https://github.com/ndmitchell/ghcid\" title=\"https://github.com/ndmitchell/ghcid\"><code>ghcid</code></a>, which is extremely easy to install and pretty much works wherever GHC does</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 194386075,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "vaibhavsagar@gmail.com",
            "sender_full_name": "Vaibhav Sagar (he) (F1'16)",
            "sender_id": 100041,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Dev setup on MacOS with VS Code",
            "submessages": [],
            "timestamp": 1587085305,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/6640d94860cd540ca4ab88d3314293376b89197d?x=x&version=2",
            "client": "ZulipElectron",
            "content": "<p>From what I know, haskell-ide-engine does have an LSP client for VS Code.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 194386134,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "gnusosa.mx@gmail.com",
            "sender_full_name": "Carlos Sosa (he) (SP2'20)",
            "sender_id": 276586,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Dev setup on MacOS with VS Code",
            "submessages": [],
            "timestamp": 1587085352,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4d074af6cc341ef51b25bb2f738cdb11?d=identicon&version=1",
            "client": "website",
            "content": "<p>many haskell programmers have stockholm syndromed themselves into saying that you don't <em>actually</em> need good IDE integration, because until recently the available options have been such a huge pain in the butt to get working</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 194386160,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "vaibhavsagar@gmail.com",
            "sender_full_name": "Vaibhav Sagar (he) (F1'16)",
            "sender_id": 100041,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Dev setup on MacOS with VS Code",
            "submessages": [],
            "timestamp": 1587085394,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/6640d94860cd540ca4ab88d3314293376b89197d?x=x&version=2",
            "client": "ZulipElectron",
            "content": "<p><span class=\"user-mention\" data-user-id=\"276197\">@Roland Crosby (he) (SP2'20)</span> my friend suggest to follow this blog post - <a href=\"https://medium.com/@dogwith1eye/setting-up-haskell-in-vs-code-with-stack-and-the-ide-engine-81d49eda3ecf\" title=\"https://medium.com/@dogwith1eye/setting-up-haskell-in-vs-code-with-stack-and-the-ide-engine-81d49eda3ecf\">https://medium.com/@dogwith1eye/setting-up-haskell-in-vs-code-with-stack-and-the-ide-engine-81d49eda3ecf</a>. Sorry I can't provide much help given that I use Emacs with haskell-ide-engine.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 194386168,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "gnusosa.mx@gmail.com",
            "sender_full_name": "Carlos Sosa (he) (SP2'20)",
            "sender_id": 276586,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Dev setup on MacOS with VS Code",
            "submessages": [],
            "timestamp": 1587085418,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/700775c1b9679bb74bd97d4ced91fadf9cc2ed17?x=x&version=2",
            "client": "website",
            "content": "<p>awesome. thanks!</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 194386183,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "roland@rolandcrosby.com",
            "sender_full_name": "Roland Crosby (he) (SP2'20)",
            "sender_id": 276197,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Dev setup on MacOS with VS Code",
            "submessages": [],
            "timestamp": 1587085442,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/700775c1b9679bb74bd97d4ced91fadf9cc2ed17?x=x&version=2",
            "client": "website",
            "content": "<p>this guide seems explicit enough and i like that it relies on homebrew; gonna try it</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 194386245,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "roland@rolandcrosby.com",
            "sender_full_name": "Roland Crosby (he) (SP2'20)",
            "sender_id": 276197,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Dev setup on MacOS with VS Code",
            "submessages": [],
            "timestamp": 1587085509,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/700775c1b9679bb74bd97d4ced91fadf9cc2ed17?x=x&version=2",
            "client": "website",
            "content": "<p>whoa hlint is incredible <a href=\"/user_uploads/13/ZkwQ6NY1lq6KxXbszOIKNaWl/hlint.mov\" title=\"hlint.mov\">hlint.mov</a></p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 194395611,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f600",
                    "emoji_name": "grinning",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "vaibhavsagar@gmail.com",
                        "full_name": "Vaibhav Sagar (he) (F1'16)",
                        "id": 100041
                    },
                    "user_id": 100041
                },
                {
                    "emoji_code": "1f600",
                    "emoji_name": "grinning",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "awchen@fastmail.com",
                        "full_name": "Alex Chen (he) (SP1'20)",
                        "id": 264095
                    },
                    "user_id": 264095
                }
            ],
            "recipient_id": 22667,
            "sender_email": "roland@rolandcrosby.com",
            "sender_full_name": "Roland Crosby (he) (SP2'20)",
            "sender_id": 276197,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Dev setup on MacOS with VS Code",
            "submessages": [],
            "timestamp": 1587098569,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4d074af6cc341ef51b25bb2f738cdb11?d=identicon&version=1",
            "client": "website",
            "content": "<p>HLint is the best argument for equational reasoning that I am aware of</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 194396383,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f643",
                    "emoji_name": "upside_down",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "ssbothwell@gmail.com",
                        "full_name": "Solomon Bothwell (he) (F2'19)",
                        "id": 240589
                    },
                    "user_id": 240589
                }
            ],
            "recipient_id": 22667,
            "sender_email": "vaibhavsagar@gmail.com",
            "sender_full_name": "Vaibhav Sagar (he) (F1'16)",
            "sender_id": 100041,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Dev setup on MacOS with VS Code",
            "submessages": [],
            "timestamp": 1587100747,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/700775c1b9679bb74bd97d4ced91fadf9cc2ed17?x=x&version=2",
            "client": "website",
            "content": "<p>ok I think I mostly have everything working the way it should based on the post that Carlos linked. Notes for myself/anyone else who comes across this in the future (corrections/explanations welcome):</p>\n<ul>\n<li>Haskell projects and tools seem to be strongly tied to GHC minor versions (e.g. 8.6 vs 8.8). You choose what GHC version you want on a per-project basis by specifying the resolver in the project's stack.yaml (and in ~/.stack/global-project/stack.yaml for global stuff). By default Stack will use the most recent version (8.8) which it refers to as \"lts-15.something\". <a href=\"http://stackage.org\" title=\"http://stackage.org\">stackage.org</a> will tell you the \"LTS\" name for the version you want. I ended up specifying \"lts-14.27\" everywhere to get GHC 8.6.5, and nothing seems to be complaining about mismatched versions yet.</li>\n<li><code>stack install packagename</code> is what you use to install packages that include executables</li>\n<li>the Phoityne debugger referenced in the above post has been renamed. The VS Code extension is now called <a href=\"https://marketplace.visualstudio.com/items?itemName=phoityne.phoityne-vscode\" title=\"https://marketplace.visualstudio.com/items?itemName=phoityne.phoityne-vscode\">Haskell GHCi Debug Adapter Phoityne</a> and the tools you need to install with Stack are now called <code>haskell-dap</code>, <code>ghci-dap</code>, and <code>haskell-debug-adapter</code>.</li>\n</ul>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 194441777,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "roland@rolandcrosby.com",
            "sender_full_name": "Roland Crosby (he) (SP2'20)",
            "sender_id": 276197,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Dev setup on MacOS with VS Code",
            "submessages": [],
            "timestamp": 1587131020,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/3924d372b2e62f5d77caffb3c653c6ecde63ada7?x=x&version=2",
            "client": "ZulipElectron",
            "content": "<p>Wow, thanks <span class=\"user-mention\" data-user-id=\"276197\">@Roland Crosby (he) (SP2'20)</span> ! I'm pretty happy using Atom for now, but I'd like to migrate over to VSCode sometime if only for the live coding pairing capabilities... So this is great information to have for future! :-) Really appreciate it.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 194445965,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "kseniaroselake@gmail.com",
            "sender_full_name": "Ksenia Rose Lake (she) (m2'20)",
            "sender_id": 264905,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Dev setup on MacOS with VS Code",
            "submessages": [],
            "timestamp": 1587132819,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/c820158f867b70bed5e4d5ed84954ff9b49fceb2?x=x&version=4",
            "client": "ZulipElectron",
            "content": "<p>bumping this thread to post about how i managed to upload an early WIP of my code to github. this was a day-and-a-half-long saga, because i had a couple bugs that prevented me from uploading the original commits. i wound up having to manually replay all my commits after fixing the bug so that i could have a working repo that git/github would accept. anyway, if you're interested in seeing my learning project as of like monday, here you go <a href=\"https://github.com/QuietMisdreavus/haskgit\" title=\"https://github.com/QuietMisdreavus/haskgit\">https://github.com/QuietMisdreavus/haskgit</a></p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 194970104,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "grey@quietmisdreavus.net",
            "sender_full_name": "Victoria Mitchell (she) (F2'19)",
            "sender_id": 240569,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "\"Building Git\" in haskell",
            "submessages": [],
            "timestamp": 1587578952,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/700775c1b9679bb74bd97d4ced91fadf9cc2ed17?x=x&version=2",
            "client": "website",
            "content": "<p>nice!</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 194971055,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "roland@rolandcrosby.com",
            "sender_full_name": "Roland Crosby (he) (SP2'20)",
            "sender_id": 276197,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "\"Building Git\" in haskell",
            "submessages": [],
            "timestamp": 1587579438,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/833ed696bb4b9faaa8adbba9e8a2d9a8?d=identicon&version=1",
            "client": "website",
            "content": "<p>Hey, how about we read up to Monads for Friday? (Chapters 10, 11, and 12 of Hutton)</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 195013177,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f32f",
                    "emoji_name": "burrito",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "talyian@gmail.com",
                        "full_name": "Jimmy Tang (he) (SP2'20)",
                        "id": 276140
                    },
                    "user_id": 276140
                },
                {
                    "emoji_code": "1f419",
                    "emoji_name": "octopus",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "tobinyehle@gmail.com",
                        "full_name": "Tobin Yehle (he) (SP1'20)",
                        "id": 105607
                    },
                    "user_id": 105607
                },
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "+1",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "gnusosa.mx@gmail.com",
                        "full_name": "Carlos Sosa (he) (SP2'20)",
                        "id": 276586
                    },
                    "user_id": 276586
                },
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "+1",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "kseniaroselake@gmail.com",
                        "full_name": "Ksenia Rose Lake (she) (m2'20)",
                        "id": 264905
                    },
                    "user_id": 264905
                }
            ],
            "recipient_id": 22667,
            "sender_email": "awchen@fastmail.com",
            "sender_full_name": "Alex Chen (he) (SP1'20)",
            "sender_id": 264095,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Haskell Study Group",
            "submessages": [],
            "timestamp": 1587608952,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/6640d94860cd540ca4ab88d3314293376b89197d?x=x&version=2",
            "client": "ZulipElectron",
            "content": "<p>I just made a utility to create a directory layout based on the metadata of music files. I will upload it to Hackage soon, after I add actual documentation to it. Also add it as a Github mirror. I hope you enjoy it. For now <code>request-pull</code> are welcome</p>\n<p><a href=\"https://git.rodere.systems/mds/\" title=\"https://git.rodere.systems/mds/\">https://git.rodere.systems/mds/</a><br>\n<a href=\"https://git.rodere.systems/mds/tree/README.md\" title=\"https://git.rodere.systems/mds/tree/README.md\">https://git.rodere.systems/mds/tree/README.md</a></p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 195099352,
            "is_me_message": false,
            "last_edit_timestamp": 1587665771,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "gnusosa.mx@gmail.com",
            "sender_full_name": "Carlos Sosa (he) (SP2'20)",
            "sender_id": 276586,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "packages, utilities, libraries made by recursers",
            "submessages": [],
            "timestamp": 1587665640,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/6640d94860cd540ca4ab88d3314293376b89197d?x=x&version=2",
            "client": "ZulipElectron",
            "content": "<p>A great resource to learn about parser combinators  is Stephen Diehl parsers guide:<br>\n<a href=\"http://dev.stephendiehl.com/fun/002_parsers.html\" title=\"http://dev.stephendiehl.com/fun/002_parsers.html\">http://dev.stephendiehl.com/fun/002_parsers.html</a></p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 195226359,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "+1",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "awchen@fastmail.com",
                        "full_name": "Alex Chen (he) (SP1'20)",
                        "id": 264095
                    },
                    "user_id": 264095
                }
            ],
            "recipient_id": 22667,
            "sender_email": "gnusosa.mx@gmail.com",
            "sender_full_name": "Carlos Sosa (he) (SP2'20)",
            "sender_id": 276586,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Haskell Study Group",
            "submessages": [],
            "timestamp": 1587752522,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/833ed696bb4b9faaa8adbba9e8a2d9a8?d=identicon&version=1",
            "client": "website",
            "content": "<p>The data61 course: <a href=\"https://github.com/system-f/fp-course\" title=\"https://github.com/system-f/fp-course\">https://github.com/system-f/fp-course</a><br>\nThe \"Theorems for Free\" paper: <a href=\"/user_uploads/13/OMwPvMFKKuyNtkt-HuwA_8wN/99370.99404.pdf\" title=\"99370.99404.pdf\">99370.99404.pdf</a></p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 195232167,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "awchen@fastmail.com",
            "sender_full_name": "Alex Chen (he) (SP1'20)",
            "sender_id": 264095,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Haskell Study Group",
            "submessages": [],
            "timestamp": 1587755569,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/833ed696bb4b9faaa8adbba9e8a2d9a8?d=identicon&version=1",
            "client": "website",
            "content": "<p>I suggest going through the <code>fp-course</code> following the progression suggested in the README. Based on what we've covered from Hutton, we should be able to work through everything up to and including <code>Course.State</code></p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 195233136,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "+1",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "gnusosa.mx@gmail.com",
                        "full_name": "Carlos Sosa (he) (SP2'20)",
                        "id": 276586
                    },
                    "user_id": 276586
                }
            ],
            "recipient_id": 22667,
            "sender_email": "awchen@fastmail.com",
            "sender_full_name": "Alex Chen (he) (SP1'20)",
            "sender_id": 264095,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Haskell Study Group",
            "submessages": [],
            "timestamp": 1587756051,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/833ed696bb4b9faaa8adbba9e8a2d9a8?d=identicon&version=1",
            "client": "website",
            "content": "<p>Of course, you can go as far as you like! If you get to the end of <code>Course.Traversable</code>, you may also be interested in Chapter 14 of Hutton</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 195234201,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "awchen@fastmail.com",
            "sender_full_name": "Alex Chen (he) (SP1'20)",
            "sender_id": 264095,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Haskell Study Group",
            "submessages": [],
            "timestamp": 1587756575,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/833ed696bb4b9faaa8adbba9e8a2d9a8?d=identicon&version=1",
            "client": "website",
            "content": "<p>Oh, one more thing: Now that we know about monads, we should now read Carlos' parser combinator link or Chapter 13 of Hutton (from which I stole last week's presentation) to get an unobfuscated view of <em>monadic</em> parser combinators</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 195235137,
            "is_me_message": false,
            "last_edit_timestamp": 1587757053,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "awchen@fastmail.com",
            "sender_full_name": "Alex Chen (he) (SP1'20)",
            "sender_id": 264095,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Haskell Study Group",
            "submessages": [],
            "timestamp": 1587757020,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/1bd49962ff0f7e7f3ee603f8243a1015bb6690bd?x=x&version=7",
            "client": "website",
            "content": "<p>I was also interested in playing around with opengl and Haskell. Is GPipe the recommended binding?</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 195235241,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "talyian@gmail.com",
            "sender_full_name": "Jimmy Tang (he) (SP2'20)",
            "sender_id": 276140,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Haskell Study Group",
            "submessages": [],
            "timestamp": 1587757060,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/833ed696bb4b9faaa8adbba9e8a2d9a8?d=identicon&version=1",
            "client": "website",
            "content": "<p>Hmm, I don't know what people usually use in Haskell, sorry.</p>\n<p>For the sake of learning OpenGL itself, I've been using <a href=\"http://hackage.haskell.org/package/gl\" title=\"http://hackage.haskell.org/package/gl\">hackage.haskell.org/package/gl</a>, which is almost a direct mapping of the OpenGL API. To get started with it, I used <a href=\"https://lokathor.gitbooks.io/using-haskell/opengl/\" title=\"https://lokathor.gitbooks.io/using-haskell/opengl/\">https://lokathor.gitbooks.io/using-haskell/opengl/</a>, which is a translation into Haskell of the \"Getting Started\" tutorial of <a href=\"http://learnopengl.com\" title=\"http://learnopengl.com\">learnopengl.com</a>.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 195235507,
            "is_me_message": false,
            "last_edit_timestamp": 1587757513,
            "reactions": [
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "+1",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "gnusosa.mx@gmail.com",
                        "full_name": "Carlos Sosa (he) (SP2'20)",
                        "id": 276586
                    },
                    "user_id": 276586
                }
            ],
            "recipient_id": 22667,
            "sender_email": "awchen@fastmail.com",
            "sender_full_name": "Alex Chen (he) (SP1'20)",
            "sender_id": 264095,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Haskell Study Group",
            "submessages": [],
            "timestamp": 1587757202,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/6640d94860cd540ca4ab88d3314293376b89197d?x=x&version=2",
            "client": "ZulipElectron",
            "content": "<p>It depends on what you're doing. For something small and compact you can use <code>HGL</code>. For most things on 2D, the most popular modules are <code>gloss</code> and <code>SDL</code>. For 3D, the modules <code>GLUT</code>, <code>OpenGLRaw</code>,<code> OpenGL</code>, and <code>gl</code> are the most common. It depends on which API you prefer. Regarding, <code>GPipe</code> I wouldn't say a lot of people use it, but it's quite popular. With that said, GPipe changed a lot from version 1 to 2. So it would be worth using GPipe 2, and sticking to it.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 195236047,
            "is_me_message": false,
            "last_edit_timestamp": 1587757521,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "gnusosa.mx@gmail.com",
            "sender_full_name": "Carlos Sosa (he) (SP2'20)",
            "sender_id": 276586,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Haskell Study Group",
            "submessages": [],
            "timestamp": 1587757472,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/6640d94860cd540ca4ab88d3314293376b89197d?x=x&version=2",
            "client": "ZulipElectron",
            "content": "<p><a href=\"https://github.com/haskell-opengl/\" title=\"https://github.com/haskell-opengl/\">https://github.com/haskell-opengl/</a></p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 195236758,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "gnusosa.mx@gmail.com",
            "sender_full_name": "Carlos Sosa (he) (SP2'20)",
            "sender_id": 276586,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Haskell Study Group",
            "submessages": [],
            "timestamp": 1587757910,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/c63485a13c31d9a2e63b4906486ee18c?d=identicon&version=1",
            "client": "ZulipElectron",
            "content": "<p>I\u2019m tentatively choosing Gpipe 2 to work with for awhile since it seems like a relatively new, relatively thin wrapper around the modern OpenGL pipeline (e.g. uses vertex arrays/buffers, shaders, etc. as opposed to fixed pipeline) and a bit easier to use than kmett\u2019s direct ogl bindings, although it does omit support for some features, like geometry shaders.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 195242163,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "+1",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "gnusosa.mx@gmail.com",
                        "full_name": "Carlos Sosa (he) (SP2'20)",
                        "id": 276586
                    },
                    "user_id": 276586
                }
            ],
            "recipient_id": 22667,
            "sender_email": "jaraujosim@gmail.com",
            "sender_full_name": "Jake Araujo-Simon (he/they) (SP2'20)",
            "sender_id": 276196,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Haskell Study Group",
            "submessages": [],
            "timestamp": 1587760992,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/833ed696bb4b9faaa8adbba9e8a2d9a8?d=identicon&version=1",
            "client": "website",
            "content": "<p>I'd be willing to pair on a Haskell project using Gpipe 2! Maybe we could all work together on something?</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 195243168,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f419",
                    "emoji_name": "octopus",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "jaraujosim@gmail.com",
                        "full_name": "Jake Araujo-Simon (he/they) (SP2'20)",
                        "id": 276196
                    },
                    "user_id": 276196
                }
            ],
            "recipient_id": 22667,
            "sender_email": "awchen@fastmail.com",
            "sender_full_name": "Alex Chen (he) (SP1'20)",
            "sender_id": 264095,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Haskell Study Group",
            "submessages": [],
            "timestamp": 1587761623,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/6640d94860cd540ca4ab88d3314293376b89197d?x=x&version=2",
            "client": "ZulipElectron",
            "content": "<p>That sounds great, I've never worked with GPipe 2 <span aria-label=\"thumbs up\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"thumbs up\">:thumbs_up:</span></p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 195243258,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "gnusosa.mx@gmail.com",
            "sender_full_name": "Carlos Sosa (he) (SP2'20)",
            "sender_id": 276586,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Haskell Study Group",
            "submessages": [],
            "timestamp": 1587761658,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/c63485a13c31d9a2e63b4906486ee18c?d=identicon&version=1",
            "client": "ZulipElectron",
            "content": "<p>having some issues with/currently migrating my dev environment, but very down to pair on this.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 195292531,
            "is_me_message": false,
            "last_edit_timestamp": 1587855824,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "jaraujosim@gmail.com",
            "sender_full_name": "Jake Araujo-Simon (he/they) (SP2'20)",
            "sender_id": 276196,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Haskell Study Group",
            "submessages": [],
            "timestamp": 1587833041,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/3924d372b2e62f5d77caffb3c653c6ecde63ada7?x=x&version=2",
            "client": "ZulipElectron",
            "content": "<p>Hello Study Group! Here is the updated 'log' of our meetings and readings: <a href=\"https://docs.google.com/document/d/1cM2BD3BnlW0qs5tQJl5D-yHmKgnyE3naXaOxCwhy6CM/edit\" title=\"https://docs.google.com/document/d/1cM2BD3BnlW0qs5tQJl5D-yHmKgnyE3naXaOxCwhy6CM/edit\">google-doc</a></p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 195580351,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "kseniaroselake@gmail.com",
            "sender_full_name": "Ksenia Rose Lake (she) (m2'20)",
            "sender_id": 264905,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Haskell Study Group",
            "submessages": [],
            "timestamp": 1588087515,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4d074af6cc341ef51b25bb2f738cdb11?d=identicon&version=1",
            "client": "website",
            "content": "<p>A new online seminar series in Functional Programming, open to the public, starts on Monday with Simon Peyton Jones: <a href=\"http://chalmersfp.org\" title=\"http://chalmersfp.org\">http://chalmersfp.org</a></p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 196654877,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "+1",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "c@chirag.io",
                        "full_name": "Chirag Dav\u00e9 (he) (F1'19)",
                        "id": 234049
                    },
                    "user_id": 234049
                },
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "+1",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "jacquin.mininger@gmail.com",
                        "full_name": "Jacquin Mininger (F2'17)",
                        "id": 102005
                    },
                    "user_id": 102005
                },
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "+1",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "mauricio@collares.org",
                        "full_name": "Mauricio Collares (he) (W2'19)",
                        "id": 158563
                    },
                    "user_id": 158563
                },
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "+1",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "awchen@fastmail.com",
                        "full_name": "Alex Chen (he) (SP1'20)",
                        "id": 264095
                    },
                    "user_id": 264095
                },
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "+1",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "gnusosa.mx@gmail.com",
                        "full_name": "Carlos Sosa (he) (SP2'20)",
                        "id": 276586
                    },
                    "user_id": 276586
                },
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "+1",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "clample@crimson.ua.edu",
                        "full_name": "Chris Lample (he) (W2'17)",
                        "id": 100452
                    },
                    "user_id": 100452
                }
            ],
            "recipient_id": 22667,
            "sender_email": "vaibhavsagar@gmail.com",
            "sender_full_name": "Vaibhav Sagar (he) (F1'16)",
            "sender_id": 100041,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Chalmers FP",
            "submessages": [],
            "timestamp": 1588780335,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/833ed696bb4b9faaa8adbba9e8a2d9a8?d=identicon&version=1",
            "client": "website",
            "content": "<p>Hey Haskell people, is there anything anyone wants to share for Friday's meeting? Maybe you've come across some code that's cool, or have written something you'd like some more eyes on?</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 196670176,
            "is_me_message": false,
            "last_edit_timestamp": 1588786771,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "awchen@fastmail.com",
            "sender_full_name": "Alex Chen (he) (SP1'20)",
            "sender_id": 264095,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Haskell Study Group",
            "submessages": [],
            "timestamp": 1588786604,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/c63485a13c31d9a2e63b4906486ee18c?d=identicon&version=1",
            "client": "ZulipElectron",
            "content": "<p>maybe something related to optics, e.g. lenses, could be nice to take a look at? <a href=\"https://hackage.haskell.org/package/optics-0.1/docs/Optics.html\" title=\"https://hackage.haskell.org/package/optics-0.1/docs/Optics.html\">https://hackage.haskell.org/package/optics-0.1/docs/Optics.html</a><br>\nI don't understand them at all well enough to present, but would love to learn if someone else does, or even do a 'concerted inspection' of the package</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 196849665,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f50d",
                    "emoji_name": "magnifying_glass",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "vaibhavsagar@gmail.com",
                        "full_name": "Vaibhav Sagar (he) (F1'16)",
                        "id": 100041
                    },
                    "user_id": 100041
                },
                {
                    "emoji_code": "1f52d",
                    "emoji_name": "telescope",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "vaibhavsagar@gmail.com",
                        "full_name": "Vaibhav Sagar (he) (F1'16)",
                        "id": 100041
                    },
                    "user_id": 100041
                },
                {
                    "emoji_code": "1f453",
                    "emoji_name": "glasses",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "vaibhavsagar@gmail.com",
                        "full_name": "Vaibhav Sagar (he) (F1'16)",
                        "id": 100041
                    },
                    "user_id": 100041
                },
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "+1",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "kseniaroselake@gmail.com",
                        "full_name": "Ksenia Rose Lake (she) (m2'20)",
                        "id": 264905
                    },
                    "user_id": 264905
                }
            ],
            "recipient_id": 22667,
            "sender_email": "jaraujosim@gmail.com",
            "sender_full_name": "Jake Araujo-Simon (he/they) (SP2'20)",
            "sender_id": 276196,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Haskell Study Group",
            "submessages": [],
            "timestamp": 1588900851,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/833ed696bb4b9faaa8adbba9e8a2d9a8?d=identicon&version=1",
            "client": "website",
            "content": "<p>I'm not confident that I could understand lenses, but the package you linked has generous documentation, so maybe it could be fun to try to figure it out!</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 196859611,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f419",
                    "emoji_name": "octopus",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "jaraujosim@gmail.com",
                        "full_name": "Jake Araujo-Simon (he/they) (SP2'20)",
                        "id": 276196
                    },
                    "user_id": 276196
                }
            ],
            "recipient_id": 22667,
            "sender_email": "awchen@fastmail.com",
            "sender_full_name": "Alex Chen (he) (SP1'20)",
            "sender_id": 264095,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Haskell Study Group",
            "submessages": [],
            "timestamp": 1588916387,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p>By the way, if you haven't seen it yet, Gabriel Gonzalez (very prolific Haskell person) wrote a nice lens tutorial a while back: <a href=\"https://hackage.haskell.org/package/lens-tutorial-1.0.4/docs/Control-Lens-Tutorial.html\" title=\"https://hackage.haskell.org/package/lens-tutorial-1.0.4/docs/Control-Lens-Tutorial.html\">https://hackage.haskell.org/package/lens-tutorial-1.0.4/docs/Control-Lens-Tutorial.html</a>.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 196888097,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "+1",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "shae.erisson@gmail.com",
                        "full_name": "Shae Matijs Erisson (he) (F1'19)",
                        "id": 221819
                    },
                    "user_id": 221819
                },
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "+1",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "gnusosa.mx@gmail.com",
                        "full_name": "Carlos Sosa (he) (SP2'20)",
                        "id": 276586
                    },
                    "user_id": 276586
                },
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "+1",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "awchen@fastmail.com",
                        "full_name": "Alex Chen (he) (SP1'20)",
                        "id": 264095
                    },
                    "user_id": 264095
                },
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "+1",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "jaraujosim@gmail.com",
                        "full_name": "Jake Araujo-Simon (he/they) (SP2'20)",
                        "id": 276196
                    },
                    "user_id": 276196
                }
            ],
            "recipient_id": 22667,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Haskell Study Group",
            "submessages": [],
            "timestamp": 1588940401,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/3924d372b2e62f5d77caffb3c653c6ecde63ada7?x=x&version=2",
            "client": "ZulipElectron",
            "content": "<p>Hi group,<br>\nA quick search on my initial question led to:<br>\n<a href=\"https://stackoverflow.com/questions/10548170/what-characters-are-permitted-for-haskell-operators\" title=\"https://stackoverflow.com/questions/10548170/what-characters-are-permitted-for-haskell-operators\">https://stackoverflow.com/questions/10548170/what-characters-are-permitted-for-haskell-operators</a><br>\n...as complete an answer as one could hope for! ;-)</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 196936570,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "kseniaroselake@gmail.com",
            "sender_full_name": "Ksenia Rose Lake (she) (m2'20)",
            "sender_id": 264905,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Haskell Study Group",
            "submessages": [],
            "timestamp": 1588964405,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/3924d372b2e62f5d77caffb3c653c6ecde63ada7?x=x&version=2",
            "client": "ZulipElectron",
            "content": "<p>(deleted)</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 196936714,
            "is_me_message": false,
            "last_edit_timestamp": 1588966881,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "kseniaroselake@gmail.com",
            "sender_full_name": "Ksenia Rose Lake (she) (m2'20)",
            "sender_id": 264905,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Haskell Study Group",
            "submessages": [],
            "timestamp": 1588964501,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/570b5294859a4650f5c6c4f866b6fba3e34af02b?x=x&version=2",
            "client": "website",
            "content": "<p>... I think this means you can use emoji as infix operators</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 196963512,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f602",
                    "emoji_name": "joy",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "kseniaroselake@gmail.com",
                        "full_name": "Ksenia Rose Lake (she) (m2'20)",
                        "id": 264905
                    },
                    "user_id": 264905
                }
            ],
            "recipient_id": 22667,
            "sender_email": "tobinyehle@gmail.com",
            "sender_full_name": "Tobin Yehle (he) (SP1'20)",
            "sender_id": 105607,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Haskell Study Group",
            "submessages": [],
            "timestamp": 1588982788,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/c63485a13c31d9a2e63b4906486ee18c?d=identicon&version=1",
            "client": "ZulipElectron",
            "content": "<p>hi all, per mention earlier today of interest in Category Theory, these notes from a course by Spivak, Fong, and Milewski, called Programming with Categories, came to mind: <a href=\"http://brendanfong.com/programmingcats_files/cats4progs-DRAFT.pdf\" title=\"http://brendanfong.com/programmingcats_files/cats4progs-DRAFT.pdf\">http://brendanfong.com/programmingcats_files/cats4progs-DRAFT.pdf</a>. There are also associated video lectures online. It is a curated selection of topics, so may not perfectly match peoples' interests, but I think is a good resource to consider.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 196970017,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "+1",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "awchen@fastmail.com",
                        "full_name": "Alex Chen (he) (SP1'20)",
                        "id": 264095
                    },
                    "user_id": 264095
                },
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "+1",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "gnusosa.mx@gmail.com",
                        "full_name": "Carlos Sosa (he) (SP2'20)",
                        "id": 276586
                    },
                    "user_id": 276586
                }
            ],
            "recipient_id": 22667,
            "sender_email": "jaraujosim@gmail.com",
            "sender_full_name": "Jake Araujo-Simon (he/they) (SP2'20)",
            "sender_id": 276196,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Haskell Study Group",
            "submessages": [],
            "timestamp": 1588992989,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/6640d94860cd540ca4ab88d3314293376b89197d?x=x&version=2",
            "client": "ZulipElectron",
            "content": "<p>Hey guys, did something happen to the calendar event of the Study Group for this week's session?</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 197183560,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "gnusosa.mx@gmail.com",
            "sender_full_name": "Carlos Sosa (he) (SP2'20)",
            "sender_id": 276586,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Haskell Study Group",
            "submessages": [],
            "timestamp": 1589220606,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/1bd49962ff0f7e7f3ee603f8243a1015bb6690bd?x=x&version=7",
            "client": "website",
            "content": "<p>I think the recurring calendar events are off during NGW, unless you want to specifically add a session anyways. If we run study group anyways, the time slot should probably change as there's NGW presentations on Friday</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 197184856,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "+1",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "gnusosa.mx@gmail.com",
                        "full_name": "Carlos Sosa (he) (SP2'20)",
                        "id": 276586
                    },
                    "user_id": 276586
                }
            ],
            "recipient_id": 22667,
            "sender_email": "talyian@gmail.com",
            "sender_full_name": "Jimmy Tang (he) (SP2'20)",
            "sender_id": 276140,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Haskell Study Group",
            "submessages": [],
            "timestamp": 1589221286,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/6640d94860cd540ca4ab88d3314293376b89197d?x=x&version=2",
            "client": "ZulipElectron",
            "content": "<p>Oh ok that makes sense.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 197184884,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "gnusosa.mx@gmail.com",
            "sender_full_name": "Carlos Sosa (he) (SP2'20)",
            "sender_id": 276586,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Haskell Study Group",
            "submessages": [],
            "timestamp": 1589221307,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/c63485a13c31d9a2e63b4906486ee18c?d=identicon&version=1",
            "client": "ZulipElectron",
            "content": "<p>i'd be down to meet informally if we can find a time, e.g. to just talk haskell and/or ct, look at the course notes or another text, etc. i'd like to catch the sci-fi talk tmrw, idris and lyupanov talks thurs, and presentations fri, but am otherwise pretty flexible time-wise</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 197304883,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "jaraujosim@gmail.com",
            "sender_full_name": "Jake Araujo-Simon (he/they) (SP2'20)",
            "sender_id": 276196,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Haskell Study Group",
            "submessages": [],
            "timestamp": 1589302257,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/3924d372b2e62f5d77caffb3c653c6ecde63ada7?x=x&version=2",
            "client": "ZulipElectron",
            "content": "<p>I had to leave our last meeting a bit early; I'm wondering if we decided one way or another re: going forward with a category theory study theme? I did order the book Carlos has recommended multiple times, and it should arrive towards the end of NGW :-)  <span aria-label=\"smile\" class=\"emoji emoji-263a\" role=\"img\" title=\"smile\">:smile:</span></p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 197328102,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f389",
                    "emoji_name": "tada",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "gnusosa.mx@gmail.com",
                        "full_name": "Carlos Sosa (he) (SP2'20)",
                        "id": 276586
                    },
                    "user_id": 276586
                }
            ],
            "recipient_id": 22667,
            "sender_email": "kseniaroselake@gmail.com",
            "sender_full_name": "Ksenia Rose Lake (she) (m2'20)",
            "sender_id": 264905,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Haskell Study Group",
            "submessages": [],
            "timestamp": 1589312584,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/c63485a13c31d9a2e63b4906486ee18c?d=identicon&version=1",
            "client": "ZulipElectron",
            "content": "<p>I think there was a soft consensus, that that would be fun/useful? with maybe some variety of opinion about whether a focus on applications or theory would be best. for the basics (categories, functors, natural transformations, (co)limits, basic Yoneda, ...) it may not matter too much. after which point, there would be lots of paths to take: the text I linked above focuses, e.g., on things like (co)algebras of monads, which relate to recursion schemes (ana/cata/hylo-morphisms, which do seem powerful in practice, esp. in FP); other topics to potentially cover could include (and this is just my sense) sheaves, which are perhaps less used atm in practice, but seem to be emerging as an <em>extremely</em> powerful tool; and monoidal categories, sometimes identified as the essence of applied ct, with their syntactic/graphical representations, string diagrams.<br>\nI'd honestly be excited to study any of these, or other topics related to ct.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 197414695,
            "is_me_message": false,
            "last_edit_timestamp": 1589377937,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "jaraujosim@gmail.com",
            "sender_full_name": "Jake Araujo-Simon (he/they) (SP2'20)",
            "sender_id": 276196,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Haskell Study Group",
            "submessages": [],
            "timestamp": 1589377666,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/833ed696bb4b9faaa8adbba9e8a2d9a8?d=identicon&version=1",
            "client": "website",
            "content": "<p>I'd be down to chat about haskell (and ct) this week! Just throwing a time out there: does today at 5:30pm EDT work for anyone? I'm also free now until 2pm EDT</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 197427737,
            "is_me_message": false,
            "last_edit_timestamp": 1589383239,
            "reactions": [
                {
                    "emoji_code": "9157",
                    "emoji_name": "5-train",
                    "reaction_type": "realm_emoji",
                    "user": {
                        "email": "tobinyehle@gmail.com",
                        "full_name": "Tobin Yehle (he) (SP1'20)",
                        "id": 105607
                    },
                    "user_id": 105607
                }
            ],
            "recipient_id": 22667,
            "sender_email": "awchen@fastmail.com",
            "sender_full_name": "Alex Chen (he) (SP1'20)",
            "sender_id": 264095,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Haskell Study Group",
            "submessages": [],
            "timestamp": 1589383183,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/570b5294859a4650f5c6c4f866b6fba3e34af02b?x=x&version=2",
            "client": "website",
            "content": "<p>I'm down for 5:30</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 197429995,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "tobinyehle@gmail.com",
            "sender_full_name": "Tobin Yehle (he) (SP1'20)",
            "sender_id": 105607,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Haskell Study Group",
            "submessages": [],
            "timestamp": 1589384019,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/c63485a13c31d9a2e63b4906486ee18c?d=identicon&version=1",
            "client": "ZulipElectron",
            "content": "<p>likewise!</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 197430024,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "jaraujosim@gmail.com",
            "sender_full_name": "Jake Araujo-Simon (he/they) (SP2'20)",
            "sender_id": 276196,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Haskell Study Group",
            "submessages": [],
            "timestamp": 1589384031,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/833ed696bb4b9faaa8adbba9e8a2d9a8?d=identicon&version=1",
            "client": "website",
            "content": "<p>Ok! Made a calendar event</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 197430832,
            "is_me_message": false,
            "last_edit_timestamp": 1589384525,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "awchen@fastmail.com",
            "sender_full_name": "Alex Chen (he) (SP1'20)",
            "sender_id": 264095,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Haskell Study Group",
            "submessages": [],
            "timestamp": 1589384317,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/570b5294859a4650f5c6c4f866b6fba3e34af02b?x=x&version=2",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-id=\"276586\">@Carlos Sosa (he) (SP2'20)</span> Does this work for you? I know I wanted to hear about conduit from you, but this may be a bit sooner than you were planning on telling us about it :)</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 197436298,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "tobinyehle@gmail.com",
            "sender_full_name": "Tobin Yehle (he) (SP1'20)",
            "sender_id": 105607,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Haskell Study Group",
            "submessages": [],
            "timestamp": 1589386313,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/6640d94860cd540ca4ab88d3314293376b89197d?x=x&version=2",
            "client": "ZulipElectron",
            "content": "<p>Yeah this works for me.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 197447704,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "gnusosa.mx@gmail.com",
            "sender_full_name": "Carlos Sosa (he) (SP2'20)",
            "sender_id": 276586,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Haskell Study Group",
            "submessages": [],
            "timestamp": 1589390857,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/6640d94860cd540ca4ab88d3314293376b89197d?x=x&version=2",
            "client": "ZulipElectron",
            "content": "<p>There's a podcast that talks about Pipes and Conduit from the authors check it out. cc <span class=\"user-mention\" data-user-id=\"276196\">@Jake Araujo-Simon (he/they) (SP2'20)</span> <br>\n<a href=\"https://www.haskellcast.com/episode/006-gabriel-gonzalez-and-michael-snoyman-on-pipes-and-conduit\">https://www.haskellcast.com/episode/006-gabriel-gonzalez-and-michael-snoyman-on-pipes-and-conduit</a></p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 197491166,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f3a7",
                    "emoji_name": "headphones",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "jaraujosim@gmail.com",
                        "full_name": "Jake Araujo-Simon (he/they) (SP2'20)",
                        "id": 276196
                    },
                    "user_id": 276196
                }
            ],
            "recipient_id": 22667,
            "sender_email": "gnusosa.mx@gmail.com",
            "sender_full_name": "Carlos Sosa (he) (SP2'20)",
            "sender_id": 276586,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Haskell Study Group",
            "submessages": [],
            "timestamp": 1589413251,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/c63485a13c31d9a2e63b4906486ee18c?d=identicon&version=1",
            "client": "ZulipElectron",
            "content": "<p>a super interesting talk, <span class=\"user-mention\" data-user-id=\"276586\">@Carlos Sosa (he) (SP2'20)</span>! I really wanted Gabriel Gonzalez to go into more detail on using equational reasoning and category laws to rewrite and optimize parts of Pipes.. at one point he mentioned Kleisli Categories and my ears perked up ^.^</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 197577157,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "jaraujosim@gmail.com",
            "sender_full_name": "Jake Araujo-Simon (he/they) (SP2'20)",
            "sender_id": 276196,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Haskell Study Group",
            "submessages": [],
            "timestamp": 1589472108,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/c63485a13c31d9a2e63b4906486ee18c?d=identicon&version=1",
            "client": "ZulipElectron",
            "content": "<p>also, I tried to understand Codensity Monads a bit after yesterday's meeting (as <span class=\"user-mention\" data-user-id=\"264095\">@Alex Chen (he) (SP1'20)</span> noticed, the ConduitT type docs mention using the codensity transform, and I assume they're related), but didn't quite grok things.. something about right adjoint functors and Kan extensions.. more reason to learn CT? :)</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 197577625,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "+1",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "gnusosa.mx@gmail.com",
                        "full_name": "Carlos Sosa (he) (SP2'20)",
                        "id": 276586
                    },
                    "user_id": 276586
                }
            ],
            "recipient_id": 22667,
            "sender_email": "jaraujosim@gmail.com",
            "sender_full_name": "Jake Araujo-Simon (he/they) (SP2'20)",
            "sender_id": 276196,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Haskell Study Group",
            "submessages": [],
            "timestamp": 1589472278,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/6640d94860cd540ca4ab88d3314293376b89197d?x=x&version=2",
            "client": "ZulipElectron",
            "content": "<p>Yeah I agree, I was expecting him to give a layout in form of equations of the reason behind the rewrite. But overall, a great talk.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 197584431,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "gnusosa.mx@gmail.com",
            "sender_full_name": "Carlos Sosa (he) (SP2'20)",
            "sender_id": 276586,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Haskell Study Group",
            "submessages": [],
            "timestamp": 1589475075,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4d074af6cc341ef51b25bb2f738cdb11?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-id=\"276196\">@Jake Araujo-Simon (he/they) (SP2'20)</span> my favourite resources for making a little more sense of the Codensity transformation are the <a href=\"http://www.janis-voigtlaender.eu/papers/AsymptoticImprovementOfComputationsOverFreeMonads.pdf\">Asymptotic Improvement of Computations over Free Monads</a> paper and <a href=\"http://blog.ezyang.com/2012/01/problem-set-the-codensity-transformation/\">these exercises</a> by ezyang</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 197585545,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f419",
                    "emoji_name": "octopus",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "jaraujosim@gmail.com",
                        "full_name": "Jake Araujo-Simon (he/they) (SP2'20)",
                        "id": 276196
                    },
                    "user_id": 276196
                }
            ],
            "recipient_id": 22667,
            "sender_email": "vaibhavsagar@gmail.com",
            "sender_full_name": "Vaibhav Sagar (he) (F1'16)",
            "sender_id": 100041,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Haskell Study Group",
            "submessages": [],
            "timestamp": 1589475559,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4d074af6cc341ef51b25bb2f738cdb11?d=identicon&version=1",
            "client": "website",
            "content": "<p>I found Ed Kmett's blog post series easier to follow afterwards: <a href=\"http://comonad.com/reader/2011/free-monads-for-less/\">http://comonad.com/reader/2011/free-monads-for-less/</a></p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 197585622,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "vaibhavsagar@gmail.com",
            "sender_full_name": "Vaibhav Sagar (he) (F1'16)",
            "sender_id": 100041,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Haskell Study Group",
            "submessages": [],
            "timestamp": 1589475596,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4d074af6cc341ef51b25bb2f738cdb11?d=identicon&version=1",
            "client": "website",
            "content": "<p>I have a slow and sloppy proof-of-concept up for running HLint in your browser: <a href=\"https://lively-opaque-snipe.glitch.me/\">https://lively-opaque-snipe.glitch.me/</a>. More details available <a href=\"https://github.com/ndmitchell/hlint/issues/144#issuecomment-629968247\">here</a>.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 197893324,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f419",
                    "emoji_name": "octopus",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "awchen@fastmail.com",
                        "full_name": "Alex Chen (he) (SP1'20)",
                        "id": 264095
                    },
                    "user_id": 264095
                },
                {
                    "emoji_code": "1f419",
                    "emoji_name": "octopus",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "gnusosa.mx@gmail.com",
                        "full_name": "Carlos Sosa (he) (SP2'20)",
                        "id": 276586
                    },
                    "user_id": 276586
                },
                {
                    "emoji_code": "1f419",
                    "emoji_name": "octopus",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "veit@veitheller.de",
                        "full_name": "Veit Heller (he) (S1'17)",
                        "id": 101103
                    },
                    "user_id": 101103
                },
                {
                    "emoji_code": "1f419",
                    "emoji_name": "octopus",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "recurse@dbalan.in",
                        "full_name": "Dhananjay Balan (he) (W2'19)",
                        "id": 158692
                    },
                    "user_id": 158692
                }
            ],
            "recipient_id": 22667,
            "sender_email": "vaibhavsagar@gmail.com",
            "sender_full_name": "Vaibhav Sagar (he) (F1'16)",
            "sender_id": 100041,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "HLint in your browser",
            "submessages": [],
            "timestamp": 1589783139,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/6485c74622306264ff53449c6f0ca540?d=identicon&version=1",
            "client": "ZulipMobile",
            "content": "<p>What a wholesome pull request discussion!</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 198027457,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f642",
                    "emoji_name": "slight_smile",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "vaibhavsagar@gmail.com",
                        "full_name": "Vaibhav Sagar (he) (F1'16)",
                        "id": 100041
                    },
                    "user_id": 100041
                }
            ],
            "recipient_id": 22667,
            "sender_email": "iain@mccoy.id.au",
            "sender_full_name": "Iain McCoy (he) (SP2'17)",
            "sender_id": 100806,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "HLint in your browser",
            "submessages": [],
            "timestamp": 1589871234,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/3924d372b2e62f5d77caffb3c653c6ecde63ada7?x=x&version=2",
            "client": "ZulipElectron",
            "content": "<p>Hi group, </p>\n<p>Here are some useful links into our group's Google Drive folder and links. We haven't necessarily kept it super up-to-date but it gives a nice overview of an \"initial ramp-up into learning Haskell\" track, using Graham Hutton's text as well as referencing into Haskell Programming from First Principles.</p>\n<ul>\n<li>Haskell root folder : <a href=\"https://drive.google.com/drive/u/1/folders/17HKtfA_KUwteOYNIebTU9AQqOT0PIe95\">https://drive.google.com/drive/u/1/folders/17HKtfA_KUwteOYNIebTU9AQqOT0PIe95</a></li>\n<li>our meetings log (not up to date) : <a href=\"https://docs.google.com/document/d/1cM2BD3BnlW0qs5tQJl5D-yHmKgnyE3naXaOxCwhy6CM/edit\">https://docs.google.com/document/d/1cM2BD3BnlW0qs5tQJl5D-yHmKgnyE3naXaOxCwhy6CM/edit</a></li>\n<li>our initial thoughts re: the group, such as topics we might be interested in.... also lists resources : <a href=\"https://docs.google.com/document/d/1dIOvmYzayck4Zlx8Yz5AcX79uWOIhmJrbc5pT-GVE18/edit\">https://docs.google.com/document/d/1dIOvmYzayck4Zlx8Yz5AcX79uWOIhmJrbc5pT-GVE18/edit</a></li>\n</ul>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 198470397,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "kseniaroselake@gmail.com",
            "sender_full_name": "Ksenia Rose Lake (she) (m2'20)",
            "sender_id": 264905,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Haskell Study Group",
            "submessages": [],
            "timestamp": 1590168605,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/c63485a13c31d9a2e63b4906486ee18c?d=identicon&version=1",
            "client": "ZulipElectron",
            "content": "<p>for anyone interested in learning Category Theory: <a href=\"#narrow/stream/26833-category-theory/topic/study.20group.20-.20S1.20-.202020/near/198495225\">https://recurse.zulipchat.com/#narrow/stream/26833-category-theory/topic/study.20group.20-.20S1.20-.202020/near/198495225</a><br>\nwe may schedule something.. I think it makes sense to treat CT separately as its own subject, and also study it's use in Haskell. if there's interest in one/the other/both, hopefully there can be synergy between the topics</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 198496320,
            "is_me_message": false,
            "last_edit_timestamp": 1590182628,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "jaraujosim@gmail.com",
            "sender_full_name": "Jake Araujo-Simon (he/they) (SP2'20)",
            "sender_id": 276196,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Haskell Study Group",
            "submessages": [],
            "timestamp": 1590182453,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/833ed696bb4b9faaa8adbba9e8a2d9a8?d=identicon&version=1",
            "client": "website",
            "content": "<p>These are some of the resources I used to learn about reading GHC Core (an intermediate representation of your code inside GHC, the Haskell compiler), and about speeding up Haskell programs in general. Sorry about the delay! I forgot about posting these.</p>\n<p><a href=\"http://blog.johantibell.com/2010/09/slides-from-my-high-performance-haskell.html\">http://blog.johantibell.com/2010/09/slides-from-my-high-performance-haskell.html</a><br>\n<a href=\"https://gitlab.haskell.org/ghc/ghc/-/wikis/commentary/compiler/demand\">https://gitlab.haskell.org/ghc/ghc/-/wikis/commentary/compiler/demand</a><br>\n<a href=\"https://downloads.haskell.org/~ghc/6.12.2/docs/core.pdf\">https://downloads.haskell.org/~ghc/6.12.2/docs/core.pdf</a><br>\n<a href=\"https://wiki.haskell.org/Inlining_and_Specialisation\">https://wiki.haskell.org/Inlining_and_Specialisation</a></p>\n<p>Also, the command I've been using to dump the GHC Core (assuming the use of the <code>stack</code> build tool):<br>\n<code>stack build --ghc-options=\"-ddump-simpl -ddump-to-file -dsuppress-coercions -dsuppress-module-prefixes\"</code></p>\n<p>Which writes <code>.dump-simpl</code> files to the <code>.stack-work/dist/x86_64-linux-nix/Cabal-3.0.1.0/build</code> subdirectory of the project (for my project at least).</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 198720457,
            "is_me_message": false,
            "last_edit_timestamp": 1590468958,
            "reactions": [
                {
                    "emoji_code": "1f419",
                    "emoji_name": "octopus",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "gnusosa.mx@gmail.com",
                        "full_name": "Carlos Sosa (he) (SP2'20)",
                        "id": 276586
                    },
                    "user_id": 276586
                },
                {
                    "emoji_code": "1f419",
                    "emoji_name": "octopus",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "kseniaroselake@gmail.com",
                        "full_name": "Ksenia Rose Lake (she) (m2'20)",
                        "id": 264905
                    },
                    "user_id": 264905
                },
                {
                    "emoji_code": "1f419",
                    "emoji_name": "octopus",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "talyian@gmail.com",
                        "full_name": "Jimmy Tang (he) (SP2'20)",
                        "id": 276140
                    },
                    "user_id": 276140
                }
            ],
            "recipient_id": 22667,
            "sender_email": "awchen@fastmail.com",
            "sender_full_name": "Alex Chen (he) (SP1'20)",
            "sender_id": 264095,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Haskell Study Group",
            "submessages": [],
            "timestamp": 1590468633,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/3924d372b2e62f5d77caffb3c653c6ecde63ada7?x=x&version=2",
            "client": "ZulipElectron",
            "content": "<p>Hello Haskell Study Group!</p>\n<p>Alex and I have an idea to make a \"Haskell Support Group\" of sorts, which would be geared towards helping people new to Haskell find their way forward. We're wondering (1) if you have any further ideas or recommendations for how to structure or organize a group like this, or (2) whether you'd be interested in participating as a helper for the group.</p>\n<p>We are currently imagining the group as a regularly-scheduled free-form space where people can get help with whatever they're currently learning or working on, providing support as they learn at their own pace. We could potentially accommodate check-ins, co-working, Q&amp;A, and resource suggestions. This would be distinct from the Friday 1-2pm Haskell Interest Group, which is more geared towards presentations and/or discussions on various (often more advanced) Haskell topics.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 198945474,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "kseniaroselake@gmail.com",
            "sender_full_name": "Ksenia Rose Lake (she) (m2'20)",
            "sender_id": 264905,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Haskell Study Group",
            "submessages": [],
            "timestamp": 1590609884,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/833ed696bb4b9faaa8adbba9e8a2d9a8?d=identicon&version=1",
            "client": "website",
            "content": "<p>We haven't settled on a name, though \"Haskell Support Group\" has some humour potential ;-)  Possible other names included...</p>\n<ul>\n<li>Haskell Dabblers Group</li>\n<li>Haskell Beginner Support Group</li>\n<li>Learn You a Haskell Support Group</li>\n<li>Getting Into Haskell Support Group</li>\n</ul>\n<p>After some feedback from you all we're planning to post this on 397 Bridge to see if people are interested... If no one shows up, that's fine too, we'll just use it as a Haskell co-working time! We're thinking Monday 1-2pm or Tuesday 1-2pm might work.</p>\n<p>Let us know by responding to this thread! Thanks!</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 198945618,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "awchen@fastmail.com",
            "sender_full_name": "Alex Chen (he) (SP1'20)",
            "sender_id": 264095,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Haskell Study Group",
            "submessages": [],
            "timestamp": 1590609943,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/3924d372b2e62f5d77caffb3c653c6ecde63ada7?x=x&version=2",
            "client": "ZulipElectron",
            "content": "<p>Written collaboratively! <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 198945731,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "kseniaroselake@gmail.com",
            "sender_full_name": "Ksenia Rose Lake (she) (m2'20)",
            "sender_id": 264905,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Haskell Study Group",
            "submessages": [],
            "timestamp": 1590609986,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/c63485a13c31d9a2e63b4906486ee18c?d=identicon&version=1",
            "client": "ZulipElectron",
            "content": "<p>i think this sounds great, more of a forum for shorter q&amp;a's if I understand correctly. count me in!</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 198961293,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f389",
                    "emoji_name": "tada",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "raunaksingh2.718@gmail.com",
                        "full_name": "Raunak Singh (he) (S1'20)",
                        "id": 302754
                    },
                    "user_id": 302754
                },
                {
                    "emoji_code": "1f389",
                    "emoji_name": "tada",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "awchen@fastmail.com",
                        "full_name": "Alex Chen (he) (SP1'20)",
                        "id": 264095
                    },
                    "user_id": 264095
                }
            ],
            "recipient_id": 22667,
            "sender_email": "jaraujosim@gmail.com",
            "sender_full_name": "Jake Araujo-Simon (he/they) (SP2'20)",
            "sender_id": 276196,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Haskell Study Group",
            "submessages": [],
            "timestamp": 1590618264,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/700775c1b9679bb74bd97d4ced91fadf9cc2ed17?x=x&version=2",
            "client": "website",
            "content": "<p>I really enjoyed the exercises we worked on today (<a href=\"https://github.com/system-f/fp-course\">https://github.com/system-f/fp-course</a>)! I finished the List and Optional exercises but I have a couple of questions for the group about the List exercises:</p>\n<ul>\n<li>for the <code>reverse</code> implementation, I came up with the following code, which eventually passed the tests but took quite a long time on the <code>List.reverse.reverse . reverse on largeList</code> test case. Is there an obvious/simple optimization that can be made here?</li>\n</ul>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"nf\">reverse</span> <span class=\"ow\">::</span>\n  <span class=\"kt\">List</span> <span class=\"n\">a</span>\n  <span class=\"ow\">-&gt;</span> <span class=\"kt\">List</span> <span class=\"n\">a</span>\n<span class=\"nf\">reverse</span> <span class=\"kt\">Nil</span> <span class=\"ow\">=</span> <span class=\"kt\">Nil</span>\n<span class=\"nf\">reverse</span> <span class=\"p\">(</span><span class=\"n\">h</span> <span class=\"kt\">:.</span> <span class=\"n\">t</span><span class=\"p\">)</span> <span class=\"ow\">=</span> <span class=\"n\">reverse</span> <span class=\"n\">t</span> <span class=\"o\">++</span> <span class=\"p\">(</span><span class=\"n\">h</span> <span class=\"kt\">:.</span> <span class=\"kt\">Nil</span><span class=\"p\">)</span>\n</code></pre></div>\n\n\n<ul>\n<li>what is <code>notReverse</code> asking for? and are there tests for it? even though I haven't implemented it, I don't see anything failing when I run <code>:test Test.Loader.test_List</code>...</li>\n</ul>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 199196269,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "12795",
                    "emoji_name": "plus1",
                    "reaction_type": "realm_emoji",
                    "user": {
                        "email": "talyian@gmail.com",
                        "full_name": "Jimmy Tang (he) (SP2'20)",
                        "id": 276140
                    },
                    "user_id": 276140
                },
                {
                    "emoji_code": "12795",
                    "emoji_name": "plus1",
                    "reaction_type": "realm_emoji",
                    "user": {
                        "email": "kseniaroselake@gmail.com",
                        "full_name": "Ksenia Rose Lake (she) (m2'20)",
                        "id": 264905
                    },
                    "user_id": 264905
                }
            ],
            "recipient_id": 22667,
            "sender_email": "roland@rolandcrosby.com",
            "sender_full_name": "Roland Crosby (he) (SP2'20)",
            "sender_id": 276197,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Haskell Study Group",
            "submessages": [],
            "timestamp": 1590778341,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/f3e838bb3578a1bfb7d808f17602e4456f954f4f?x=x&version=3",
            "client": "website",
            "content": "<p>What does your <code>(++)</code> look like?</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 199198011,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "adam@cthulahoops.org",
            "sender_full_name": "Adam Kelly (they/he) (S1'20)",
            "sender_id": 301014,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Haskell Study Group",
            "submessages": [],
            "timestamp": 1590779196,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/700775c1b9679bb74bd97d4ced91fadf9cc2ed17?x=x&version=2",
            "client": "website",
            "content": "<p>oh yeah should have posted that too in case there are better options --</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"p\">(</span><span class=\"o\">++</span><span class=\"p\">)</span> <span class=\"ow\">::</span>\n  <span class=\"kt\">List</span> <span class=\"n\">a</span>\n  <span class=\"ow\">-&gt;</span> <span class=\"kt\">List</span> <span class=\"n\">a</span>\n  <span class=\"ow\">-&gt;</span> <span class=\"kt\">List</span> <span class=\"n\">a</span>\n<span class=\"p\">(</span><span class=\"o\">++</span><span class=\"p\">)</span> <span class=\"kt\">Nil</span> <span class=\"n\">b</span> <span class=\"ow\">=</span> <span class=\"n\">b</span>\n<span class=\"p\">(</span><span class=\"o\">++</span><span class=\"p\">)</span> <span class=\"n\">a</span> <span class=\"kt\">Nil</span> <span class=\"ow\">=</span> <span class=\"n\">a</span>\n<span class=\"p\">(</span><span class=\"o\">++</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"n\">a_head</span> <span class=\"kt\">:.</span> <span class=\"n\">a_tail</span><span class=\"p\">)</span> <span class=\"n\">b</span> <span class=\"ow\">=</span>\n  <span class=\"n\">a_head</span> <span class=\"kt\">:.</span> <span class=\"n\">a_tail</span> <span class=\"o\">++</span> <span class=\"n\">b</span>\n</code></pre></div>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 199198829,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "roland@rolandcrosby.com",
            "sender_full_name": "Roland Crosby (he) (SP2'20)",
            "sender_id": 276197,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Haskell Study Group",
            "submessages": [],
            "timestamp": 1590779606,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/833ed696bb4b9faaa8adbba9e8a2d9a8?d=identicon&version=1",
            "client": "website",
            "content": "<p>If <code>(++)</code> is defined similarly to one from the prelude, I think the problem is that we are appending lists in a left-associative manner. <code>xs ++ ys</code> makes a new copy of <code>xs</code> and attaches it to the head of <code>ys</code>, which takes time linear in the length of <code>xs</code>. So repeated left-associative appends repeatedly copy the initial portions of the list, which takes quadratic time in the length of the list to be reversed.</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"nf\">reverse</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"mi\">3</span><span class=\"p\">]</span>\n<span class=\"ow\">=</span> <span class=\"n\">reverse</span> <span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"mi\">3</span><span class=\"p\">]</span> <span class=\"o\">++</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span>\n<span class=\"ow\">=</span> <span class=\"p\">(</span><span class=\"n\">reverse</span> <span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">]</span> <span class=\"o\">++</span> <span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">])</span> <span class=\"o\">++</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span>\n<span class=\"ow\">=</span> <span class=\"p\">((</span><span class=\"n\">reverse</span> <span class=\"kt\">[]</span> <span class=\"o\">++</span> <span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">])</span> <span class=\"o\">++</span> <span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">])</span> <span class=\"o\">++</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span>\n<span class=\"ow\">=</span> <span class=\"p\">((</span><span class=\"kt\">[]</span> <span class=\"o\">++</span> <span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">])</span> <span class=\"o\">++</span> <span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">])</span> <span class=\"o\">++</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span>\n<span class=\"ow\">=</span> <span class=\"p\">([</span><span class=\"mi\">3</span><span class=\"p\">]</span> <span class=\"o\">++</span> <span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">])</span> <span class=\"o\">++</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"c1\">-- copied []</span>\n<span class=\"ow\">=</span> <span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">]</span> <span class=\"o\">++</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"c1\">-- copied [3]</span>\n<span class=\"ow\">=</span> <span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"c1\">-- copied [3, 2]</span>\n</code></pre></div>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 199198931,
            "is_me_message": false,
            "last_edit_timestamp": 1590779892,
            "reactions": [
                {
                    "emoji_code": "1f419",
                    "emoji_name": "octopus",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "adam@cthulahoops.org",
                        "full_name": "Adam Kelly (they/he) (S1'20)",
                        "id": 301014
                    },
                    "user_id": 301014
                }
            ],
            "recipient_id": 22667,
            "sender_email": "awchen@fastmail.com",
            "sender_full_name": "Alex Chen (he) (SP1'20)",
            "sender_id": 264095,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Haskell Study Group",
            "submessages": [],
            "timestamp": 1590779652,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/f3e838bb3578a1bfb7d808f17602e4456f954f4f?x=x&version=3",
            "client": "website",
            "content": "<p>Rewriting with an accumulator solves the performance issue:</p>\n<div class=\"codehilite\"><pre><span></span><code>reverse ::\n  List a\n  -&gt; List a\nreverse xs = reverse&#39; xs Nil\n  where reverse&#39; Nil acc = acc\n        reverse&#39; (h :. t) acc = reverse&#39; t (h :. acc)\n</code></pre></div>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 199199967,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "adam@cthulahoops.org",
            "sender_full_name": "Adam Kelly (they/he) (S1'20)",
            "sender_id": 301014,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Haskell Study Group",
            "submessages": [],
            "timestamp": 1590780147,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/700775c1b9679bb74bd97d4ced91fadf9cc2ed17?x=x&version=2",
            "client": "website",
            "content": "<p>ah nice. thanks for the explanations!</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 199200201,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "roland@rolandcrosby.com",
            "sender_full_name": "Roland Crosby (he) (SP2'20)",
            "sender_id": 276197,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Haskell Study Group",
            "submessages": [],
            "timestamp": 1590780278,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/f3e838bb3578a1bfb7d808f17602e4456f954f4f?x=x&version=3",
            "client": "website",
            "content": "<p>It's always so hard to tell what's going to help with haskell performance.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 199200214,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "adam@cthulahoops.org",
            "sender_full_name": "Adam Kelly (they/he) (S1'20)",
            "sender_id": 301014,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Haskell Study Group",
            "submessages": [],
            "timestamp": 1590780283,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/700775c1b9679bb74bd97d4ced91fadf9cc2ed17?x=x&version=2",
            "client": "website",
            "content": "<p>yeah haha i almost get offended when my completely naive implementation doesn't get optimized into something fast</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 199200310,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "roland@rolandcrosby.com",
            "sender_full_name": "Roland Crosby (he) (SP2'20)",
            "sender_id": 276197,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Haskell Study Group",
            "submessages": [],
            "timestamp": 1590780334,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/f3e838bb3578a1bfb7d808f17602e4456f954f4f?x=x&version=3",
            "client": "website",
            "content": "<p>Too used to rust? :)</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 199200698,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "adam@cthulahoops.org",
            "sender_full_name": "Adam Kelly (they/he) (S1'20)",
            "sender_id": 301014,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Haskell Study Group",
            "submessages": [],
            "timestamp": 1590780520,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4d074af6cc341ef51b25bb2f738cdb11?d=identicon&version=1",
            "client": "website",
            "content": "<p>This technique comes up a lot and I found out recently that it is known as <a href=\"https://wiki.haskell.org/Worker_wrapper\">the worker/wrapper transformation</a>, additional resources <a href=\"https://ku-fpg.github.io/practice/workerwrapper/\">here</a>.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 199236447,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "+1",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "shae.erisson@gmail.com",
                        "full_name": "Shae Matijs Erisson (he) (F1'19)",
                        "id": 221819
                    },
                    "user_id": 221819
                },
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "+1",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "awchen@fastmail.com",
                        "full_name": "Alex Chen (he) (SP1'20)",
                        "id": 264095
                    },
                    "user_id": 264095
                }
            ],
            "recipient_id": 22667,
            "sender_email": "vaibhavsagar@gmail.com",
            "sender_full_name": "Vaibhav Sagar (he) (F1'16)",
            "sender_id": 100041,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Haskell Study Group",
            "submessages": [],
            "timestamp": 1590810527,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/3924d372b2e62f5d77caffb3c653c6ecde63ada7?x=x&version=2",
            "client": "ZulipElectron",
            "content": "<p>Hello fellow Haskellians,</p>\n<p>Here's the message just posted to 397 Bridge about our new event. It's meant to be a space geared towards supporting beginners, and distinct from Friday's <a href=\"https://www.recurse.com/calendar/10352\">Haskell Interest Group</a> which will continue as before.</p>\n<hr>\n<p>Hello Currently at RC, we are starting a new event: <a href=\"https://www.recurse.com/calendar/10596\">Haskell Dabble and Learn</a>!</p>\n<p>If you've ever wanted to get into functional programming (in Haskell), drop on by :)</p>\n<p>This is a time where you can get help with setting up Haskell or get some guidance or have your questions answered by slightly more experienced Haskell folk. Dabble and learn at your own pace and come to us whenever you need help! We'll just be co-working on Haskell stuff and waiting for people to show up. There's no curriculum, but we'd be happy to provide resource suggestions.</p>\n<p>This week we'll be dabbling on Monday from 1-2pm.<br>\n<a href=\"https://www.recurse.com/calendar/10596\">https://www.recurse.com/calendar/10596</a></p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 199270828,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "kseniaroselake@gmail.com",
            "sender_full_name": "Ksenia Rose Lake (she) (m2'20)",
            "sender_id": 264905,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Haskell Dabble and Learn",
            "submessages": [],
            "timestamp": 1590865152,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/833ed696bb4b9faaa8adbba9e8a2d9a8?d=identicon&version=1",
            "client": "website",
            "content": "<p>Hi Haskell Study Group, for our next session I thought we could try to do some mob programming, where we would all work together on someone's Haskell project. Does anyone have a project they'd like to work on with the group?</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 200612175,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "awchen@fastmail.com",
            "sender_full_name": "Alex Chen (he) (SP1'20)",
            "sender_id": 264095,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Haskell Study Group",
            "submessages": [],
            "timestamp": 1591912624,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/833ed696bb4b9faaa8adbba9e8a2d9a8?d=identicon&version=1",
            "client": "website",
            "content": "<p>Hmm, maybe the project doesn't even have to be well suited for mob programming -- a sort of live stream coding session could be nice too?</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 200612619,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "awchen@fastmail.com",
            "sender_full_name": "Alex Chen (he) (SP1'20)",
            "sender_id": 264095,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Haskell Study Group",
            "submessages": [],
            "timestamp": 1591912830,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/612c7c2a108d7850c62d1d2293a481aa42855408?x=x&version=2",
            "client": "website",
            "content": "<p>trying nix again.. what a <span aria-label=\"roller coaster\" class=\"emoji emoji-1f3a2\" role=\"img\" title=\"roller coaster\">:roller_coaster:</span></p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 200843541,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "PLRedmond@gmail.com",
            "sender_full_name": "Patrick Redmond (W'14)",
            "sender_id": 5014,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Nix",
            "submessages": [],
            "timestamp": 1592186694,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/612c7c2a108d7850c62d1d2293a481aa42855408?x=x&version=2",
            "client": "website",
            "content": "<ul>\n<li>trying to get  the package <code>wx</code> to work, but it hasn't been updated since 2017..</li>\n<li><code>wx</code> depends on <code>wxcore</code>, <code>`wxc</code>, <code>wxdirect</code></li>\n<li><code>wxc</code> uses a <code>Setup.hs</code> which requires an outdated type for <code>Cabal:Distribution.Simpl.Utils.rawSystemStdInOut</code> ... that means the latest version of <code>wxc:setup.Cabal</code> which can be used is <code>2.0.1.1</code></li>\n<li><code>nixos.cabal-install</code> is cabal 3, which requires <code>setup.Cabal</code> to be <code>&gt;= 2.4</code> ... that means that i can't use cabal 3 to compile <code>wxc</code> without rewriting some of its <code>Setup.hs</code> (but it's hosted on sourceforge, which i don't know how to use <span aria-label=\"fear\" class=\"emoji emoji-1f628\" role=\"img\" title=\"fear\">:fear:</span>)</li>\n<li>rather than going back and fixing upstream, i'm just going to see if i can get it all to work by swapping out <code>nixos.cabal-install</code> (cabal 3) for <code>nixos.Cabal_2_4_1_0</code></li>\n</ul>\n<p><em>to be continued..</em></p>\n<p>[edit: ok, <code>nixos.Cabal_2_4_1_0</code> is just the library and contains no executable.. i'm going to stop for tonight]</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 200843746,
            "is_me_message": false,
            "last_edit_timestamp": 1592187656,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "PLRedmond@gmail.com",
            "sender_full_name": "Patrick Redmond (W'14)",
            "sender_id": 5014,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Nix",
            "submessages": [],
            "timestamp": 1592187086,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/612c7c2a108d7850c62d1d2293a481aa42855408?x=x&version=2",
            "client": "website",
            "content": "<p>along the way i've learned about <code>&lt;nixpkgs&gt;/pkgs/development/haskell-modules</code>:</p>\n<ul>\n<li><code>haskell-packages.nix</code> is a 10mb file containing brief translations of all of hackage's cabal files into nix expressions</li>\n<li><code>configuration-*.nix</code> files overrides for packages which are broken, scoped to the <code>*</code> (eg. <code>configuration-ghc-8.2.x.nix</code> are overrides to packages which are applied only when using ghc-8.2.x compilers, whereas <code>configuration-common.nix</code> are overrides which are applied when using any compiler)</li>\n<li><code>lib.nix</code> is where the override functions are defined</li>\n<li><code>generic-builder.nix</code> is where haskell's variation on <code>mkDerivation</code> is defined, which is used in <code>haskell-packages.nix</code> to describe how to build those packages, and overridden in the <code>configuration-*.nix</code> files</li>\n</ul>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 200844098,
            "is_me_message": false,
            "last_edit_timestamp": 1592187782,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "PLRedmond@gmail.com",
            "sender_full_name": "Patrick Redmond (W'14)",
            "sender_id": 5014,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Nix",
            "submessages": [],
            "timestamp": 1592187680,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/612c7c2a108d7850c62d1d2293a481aa42855408?x=x&version=2",
            "client": "website",
            "content": "<p>what gui libraries have you used? i've tried the following</p>\n<ul>\n<li><code>fltkhs</code> -- easy to use haskell library, responsive maintainer, but the underlying c++ library seems idiosyncratic (i have intermediate to deep experience here)</li>\n<li><code>wx</code> -- somewhat outdated haskell library making it a bit harder to use, underlying c++ library works (i don't have deep experience here)</li>\n</ul>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 200845430,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "PLRedmond@gmail.com",
            "sender_full_name": "Patrick Redmond (W'14)",
            "sender_id": 5014,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "gui libraries",
            "submessages": [],
            "timestamp": 1592190030,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/612c7c2a108d7850c62d1d2293a481aa42855408?x=x&version=2",
            "client": "website",
            "content": "<p><a href=\"https://github.com/Gabriel439/post-rfc/blob/master/sotu.md#standalone-gui-applications\">state of the haskell ecosystem</a> indicates that <code>gtk</code> is the most mature, if not idiomatic</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 200846352,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "PLRedmond@gmail.com",
            "sender_full_name": "Patrick Redmond (W'14)",
            "sender_id": 5014,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "gui libraries",
            "submessages": [],
            "timestamp": 1592191864,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/8776bd2d19cdb1399c4e9589d9397d57290e5729?x=x&version=2",
            "client": "website",
            "content": "<p>That's been my experience as well, that gtk2hs has the best support of the Haskell GUI libraries.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 201153486,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "shae.erisson@gmail.com",
            "sender_full_name": "Shae Matijs Erisson (he) (F1'19)",
            "sender_id": 221819,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "gui libraries",
            "submessages": [],
            "timestamp": 1592405998,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/612c7c2a108d7850c62d1d2293a481aa42855408?x=x&version=2",
            "client": "website",
            "content": "<p>thanks! i'll try out <code>gtk</code> or <code>gtk2hs</code> next then!</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 201304844,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "PLRedmond@gmail.com",
            "sender_full_name": "Patrick Redmond (W'14)",
            "sender_id": 5014,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "gui libraries",
            "submessages": [],
            "timestamp": 1592503435,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/612c7c2a108d7850c62d1d2293a481aa42855408?x=x&version=2",
            "client": "website",
            "content": "<p>i was eventually pointed by someone to this website: <a href=\"https://lazamar.co.uk/nix-versions/\">https://lazamar.co.uk/nix-versions/</a> and it solved my problem</p>\n<ul>\n<li>i used the website to find the latest version of nix on which my desired <code>cabal</code> and <code>wx</code> versions worked</li>\n<li>i pinned that version in my <code>release.nix</code> following  <span class=\"user-mention\" data-user-id=\"100041\">@Vaibhav Sagar (he) (F1'16)</span> 's pinning strategy from <a href=\"https://vaibhavsagar.com/blog/2018/05/27/quick-easy-nixpkgs-pinning/\">https://vaibhavsagar.com/blog/2018/05/27/quick-easy-nixpkgs-pinning/</a></li>\n<li>i was able to do <code>nix-build</code> and i'm probably able to get a shell environment too</li>\n</ul>\n<p>in the end i've decided that <code>wx</code> is just too old for me to use at this point.. i might spend some time to see if it can easily be brought into the latest hackage, but i might not have time to do that either</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 201305172,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "PLRedmond@gmail.com",
            "sender_full_name": "Patrick Redmond (W'14)",
            "sender_id": 5014,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Nix",
            "submessages": [],
            "timestamp": 1592503617,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/612c7c2a108d7850c62d1d2293a481aa42855408?x=x&version=2",
            "client": "website",
            "content": "<p>why too old?</p>\n<ul>\n<li>it requires that i use an old version of cabal-install, one which doesn't support nix-style local builds..</li>\n<li>since all version of cabal use <code>~/.cabal</code> a bit more than my liking, i'm a little afraid to mix versions of <code>cabal-install</code> lest the old one mess up things for my current projects</li>\n</ul>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 201305334,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "PLRedmond@gmail.com",
            "sender_full_name": "Patrick Redmond (W'14)",
            "sender_id": 5014,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Nix",
            "submessages": [],
            "timestamp": 1592503702,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/5c76b2c555785c8a87577bc81fe538bc03a8b463?x=x&version=2",
            "client": "website",
            "content": "<p><a href=\"https://www.youtube.com/watch?time_continue=1&amp;v=B9_xAixGlmk&amp;feature=emb_logo\">https://www.youtube.com/watch?time_continue=1&amp;v=B9_xAixGlmk&amp;feature=emb_logo</a></p>\n<div class=\"youtube-video message_inline_image\"><a data-id=\"B9_xAixGlmk\" href=\"https://www.youtube.com/watch?time_continue=1&amp;v=B9_xAixGlmk&amp;feature=emb_logo\"><img src=\"https://i.ytimg.com/vi/B9_xAixGlmk/default.jpg\"></a></div>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 201856524,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "c@chirag.io",
            "sender_full_name": "Chirag Dav\u00e9 (he) (F1'19)",
            "sender_id": 234049,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "\"Haskell For  New Decade\"",
            "submessages": [],
            "timestamp": 1593009854,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/5c76b2c555785c8a87577bc81fe538bc03a8b463?x=x&version=2",
            "client": "website",
            "content": "<p>I went over the slides and am only just watching the talk now. Right now I'm really interested in learning C and doing more systems level work. That said, one thing that I refuse to let go of is the idea that that our PLs are still primitive. I really do need to become able in haskell at some point (or maybe idris). But it would be really fun to get involved in improving the tools that help us get to a good future.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 201856814,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "c@chirag.io",
            "sender_full_name": "Chirag Dav\u00e9 (he) (F1'19)",
            "sender_id": 234049,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "\"Haskell For  New Decade\"",
            "submessages": [],
            "timestamp": 1593009968,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/612c7c2a108d7850c62d1d2293a481aa42855408?x=x&version=2",
            "client": "website",
            "content": "<p>A lot of haskell is written in C</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 202267141,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "PLRedmond@gmail.com",
            "sender_full_name": "Patrick Redmond (W'14)",
            "sender_id": 5014,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "\"Haskell For  New Decade\"",
            "submessages": [],
            "timestamp": 1593398265,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/612c7c2a108d7850c62d1d2293a481aa42855408?x=x&version=2",
            "client": "website",
            "content": "<p>So you could use C as a route to Haskell.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 202267143,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "PLRedmond@gmail.com",
            "sender_full_name": "Patrick Redmond (W'14)",
            "sender_id": 5014,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "\"Haskell For  New Decade\"",
            "submessages": [],
            "timestamp": 1593398274,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/612c7c2a108d7850c62d1d2293a481aa42855408?x=x&version=2",
            "client": "website",
            "content": "<p>I've poked around in the runtime code, and it's not exactly straightforward, but it's approachable. Pair with somebody on it! :)</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 202267182,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "PLRedmond@gmail.com",
            "sender_full_name": "Patrick Redmond (W'14)",
            "sender_id": 5014,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "\"Haskell For  New Decade\"",
            "submessages": [],
            "timestamp": 1593398295,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/5c76b2c555785c8a87577bc81fe538bc03a8b463?x=x&version=2",
            "client": "website",
            "content": "<p>cool!</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 202320422,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "c@chirag.io",
            "sender_full_name": "Chirag Dav\u00e9 (he) (F1'19)",
            "sender_id": 234049,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "\"Haskell For  New Decade\"",
            "submessages": [],
            "timestamp": 1593442040,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/612c7c2a108d7850c62d1d2293a481aa42855408?x=x&version=2",
            "client": "website",
            "content": "<p>Continued from the <a href=\"#narrow/stream/100724-nix/topic/broken.20package.20in.20shell.20env\">nix stream</a>, but now more concerned with haskell:</p>\n<p>I tried to build a <em>broken</em> nix package <code>jsaddle-warp</code> to see if I could fix it, but the breakage doesn't make sense to me. The breakage is an error about a missing transitive depenedency (my project uses <code>jsaddle-warp</code> and <code>jsaddle-warp</code> uses <code>warp</code>):</p>\n<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n\n<p>Setup: Encountered missing dependencies: warp &gt;=3.1.2 &amp;&amp; &lt;3.3</p>\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n\n<div class=\"codehilite\"><pre><span></span><code><span class=\"gp\">$</span> nix-shell --arg config <span class=\"s1\">&#39;{ allowBroken = true; }&#39;</span>\n<span class=\"go\">building &#39;/nix/store/9pqcl745pzxpf5qg4iad4k0mmpvx8mj2-cabal2nix-try.drv&#39;...</span>\n<span class=\"go\">installing</span>\n<span class=\"go\">these derivations will be built:</span>\n<span class=\"go\">  /nix/store/4nii3v193v6y52k8nsbf2m5lvfvp6699-jsaddle-warp-0.9.7.0.drv</span>\n<span class=\"go\">  /nix/store/6y3vzkdf6d6myh11vxmr20vpk44413nf-ghc-8.6.5-with-packages.drv</span>\n<span class=\"go\">building &#39;/nix/store/4nii3v193v6y52k8nsbf2m5lvfvp6699-jsaddle-warp-0.9.7.0.drv&#39;...</span>\n<span class=\"go\">setupCompilerEnvironmentPhase</span>\n<span class=\"go\">Build with /nix/store/p0w0kx4s3n8zpdqvl65x7zfj7zwfas6a-ghc-8.6.5.</span>\n<span class=\"go\">unpacking sources</span>\n<span class=\"go\">unpacking source archive /nix/store/bdyjz0jmk8v4hpl1mbl0l2a5k6d60fs2-jsaddle-warp-0.9.7.0.tar.gz</span>\n<span class=\"go\">source root is jsaddle-warp-0.9.7.0</span>\n<span class=\"go\">setting SOURCE_DATE_EPOCH to timestamp 1000000000 of file jsaddle-warp-0.9.7.0/tests/DocTest.hs</span>\n<span class=\"go\">patching sources</span>\n<span class=\"go\">compileBuildDriverPhase</span>\n<span class=\"go\">setupCompileFlags: -package-db=/build/setup-package.conf.d -j4 -threaded</span>\n<span class=\"go\">[1 of 1] Compiling Main             ( Setup.lhs, /build/Main.o )</span>\n<span class=\"go\">Linking Setup ...</span>\n<span class=\"go\">configuring</span>\n<span class=\"go\">configureFlags: --verbose --prefix=/nix/store/j8p2yn26nn8vdcb5j5hbfl3sdjbv4z89-jsaddle-warp-0.9.7.0 --libdir=$prefix/lib/$compiler --libsubdir=$abi/$libname --docdir=/nix/store/mrl29nf44whfszc83skqa4sm91s7js2k-jsaddle-warp-0.9.7.0-doc/share/doc/jsaddle-warp-0.9.7.0 --with-gcc=gcc --package-db=/build/package.conf.d --ghc-option=-j4 --disable-split-objs --enable-library-profiling --profiling-detail=exported-functions --disable-profiling --enable-shared --disable-coverage --enable-static --disable-executable-dynamic --enable-tests --disable-benchmarks --enable-library-vanilla --disable-library-for-ghci --ghc-option=-split-sections --extra-lib-dirs=/nix/store/l3r589zmhwb3jm2r456brdrmwyh07c1g-ncurses-6.1-20190112/lib --extra-lib-dirs=/nix/store/6ihjyc8ylagb4s7mbg02zbazldwwwjzk-libffi-3.3/lib --extra-lib-dirs=/nix/store/vw909fhky273h9waklv0fm7m7bn0j4qy-gmp-6.2.0/lib --extra-lib-dirs=/nix/store/p0w0kx4s3n8zpdqvl65x7zfj7zwfas6a-ghc-8.6.5/lib</span>\n<span class=\"go\">Using Parsec parser</span>\n<span class=\"go\">Configuring jsaddle-warp-0.9.7.0...</span>\n<span class=\"go\">CallStack (from HasCallStack):</span>\n<span class=\"go\">  die&#39;, called at libraries/Cabal/Cabal/Distribution/Simple/Configure.hs:950:20 in Cabal-2.4.0.1:Distribution.Simple.Configure</span>\n<span class=\"go\">  configureFinalizedPackage, called at libraries/Cabal/Cabal/Distribution/Simple/Configure.hs:460:12 in Cabal-2.4.0.1:Distribution.Simple.Configure</span>\n<span class=\"go\">  configure, called at libraries/Cabal/Cabal/Distribution/Simple.hs:596:20 in Cabal-2.4.0.1:Distribution.Simple</span>\n<span class=\"go\">  confHook, called at libraries/Cabal/Cabal/Distribution/Simple/UserHooks.hs:67:5 in Cabal-2.4.0.1:Distribution.Simple.UserHooks</span>\n<span class=\"go\">  configureAction, called at libraries/Cabal/Cabal/Distribution/Simple.hs:178:19 in Cabal-2.4.0.1:Distribution.Simple</span>\n<span class=\"go\">  defaultMainHelper, called at libraries/Cabal/Cabal/Distribution/Simple.hs:115:27 in Cabal-2.4.0.1:Distribution.Simple</span>\n<span class=\"go\">  defaultMain, called at Setup.lhs:5:10 in main:Main</span>\n<span class=\"go\">Setup: Encountered missing dependencies:</span>\n<span class=\"go\">warp &gt;=3.1.2 &amp;&amp; &lt;3.3</span>\n\n<span class=\"go\">builder for &#39;/nix/store/4nii3v193v6y52k8nsbf2m5lvfvp6699-jsaddle-warp-0.9.7.0.drv&#39; failed with exit code 1</span>\n<span class=\"go\">cannot build derivation &#39;/nix/store/6y3vzkdf6d6myh11vxmr20vpk44413nf-ghc-8.6.5-with-packages.drv&#39;: 1 dependencies couldn&#39;t be built</span>\n<span class=\"go\">error: build of &#39;/nix/store/6y3vzkdf6d6myh11vxmr20vpk44413nf-ghc-8.6.5-with-packages.drv&#39; failed</span>\n</code></pre></div>\n\n\n</div></div>\n\n<p>However this dependency is clearly declared in the <a href=\"https://hackage.haskell.org/package/jsaddle-warp-0.9.7.0/jsaddle-warp.cabal\">jsaddle-warp-0.9.7.0 cabal file</a>. I'm not sure why this is happening.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 202608725,
            "is_me_message": false,
            "last_edit_timestamp": 1593629613,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "PLRedmond@gmail.com",
            "sender_full_name": "Patrick Redmond (W'14)",
            "sender_id": 5014,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "broken package in nix",
            "submessages": [],
            "timestamp": 1593629498,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/612c7c2a108d7850c62d1d2293a481aa42855408?x=x&version=2",
            "client": "website",
            "content": "<p>Maybe the problem is that the version of warp present in nixpkgs is wrong. I'll check that.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 202609102,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "PLRedmond@gmail.com",
            "sender_full_name": "Patrick Redmond (W'14)",
            "sender_id": 5014,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "broken package in nix",
            "submessages": [],
            "timestamp": 1593629729,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/612c7c2a108d7850c62d1d2293a481aa42855408?x=x&version=2",
            "client": "website",
            "content": "<p>Yes, this seems to be the problem.</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"gp\">$</span> nix-shell --run <span class=\"s1\">&#39;ghc-pkg list |grep warp&#39;</span> -p <span class=\"s1\">&#39;haskellPackages.ghcWithPackages (p: [p.warp])&#39;</span>\n<span class=\"go\">...</span>\n<span class=\"go\">   warp-3.3.5</span>\n</code></pre></div>\n\n\n<p>So I guess my options are to try to override the <code>warp</code> version pulled into the environment, or to change the version bounds declared by <code>jsaddle-warp</code>.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 202609443,
            "is_me_message": false,
            "last_edit_timestamp": 1593631598,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "PLRedmond@gmail.com",
            "sender_full_name": "Patrick Redmond (W'14)",
            "sender_id": 5014,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "broken package in nix",
            "submessages": [],
            "timestamp": 1593629906,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/612c7c2a108d7850c62d1d2293a481aa42855408?x=x&version=2",
            "client": "website",
            "content": "<p>I tried jailbreaking <code>jsaddle-warp</code> but it didn't work because I didn't look carefully. The dependency on <code>warp</code> is declared in an <code>if ..</code> in <a href=\"https://hackage.haskell.org/package/jsaddle-warp-0.9.7.0/jsaddle-warp.cabal\">jsaddle-warp-0.9.7.0 cabal file</a>, and <a href=\"https://github.com/NixOS/nixpkgs/blob/32c8e793bce08a7ec53c9da4d3924a681173c1e0/pkgs/development/haskell-modules/lib.nix#L79-L95\">doJailbreak</a> currently doesn't lift version bounds within an <code>if ..</code>.</p>\n<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n\n<p>current default.nix</p>\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n\n<div class=\"codehilite\"><pre><span></span><code><span class=\"p\">{</span> config <span class=\"o\">?</span> <span class=\"p\">{},</span> <span class=\"o\">...</span> <span class=\"p\">}:</span>\n<span class=\"c1\"># mostly from https://vaibhavsagar.com/blog/2018/05/27/quick-easy-nixpkgs-pinning/</span>\n<span class=\"k\">let</span>\n  <span class=\"c1\"># fetch a pinned version of nixpkgs</span>\n  <span class=\"ss\">fetcher =</span> <span class=\"p\">{</span> owner<span class=\"p\">,</span> repo<span class=\"p\">,</span> rev<span class=\"p\">,</span> sha256<span class=\"p\">,</span> <span class=\"o\">...</span> <span class=\"p\">}:</span> <span class=\"nb\">builtins</span><span class=\"o\">.</span>fetchTarball <span class=\"p\">{</span>\n    <span class=\"k\">inherit</span> sha256<span class=\"p\">;</span>\n    <span class=\"ss\">url =</span> <span class=\"s2\">&quot;https://github.com/</span><span class=\"si\">${</span>owner<span class=\"si\">}</span><span class=\"s2\">/</span><span class=\"si\">${</span>repo<span class=\"si\">}</span><span class=\"s2\">/archive/</span><span class=\"si\">${</span>rev<span class=\"si\">}</span><span class=\"s2\">.tar.gz&quot;</span><span class=\"p\">;</span>\n  <span class=\"p\">};</span>\n  <span class=\"ss\">nixpkgs =</span> <span class=\"nb\">import</span> <span class=\"p\">(</span>fetcher <span class=\"p\">(</span><span class=\"nb\">builtins</span><span class=\"o\">.</span>fromJSON <span class=\"p\">(</span><span class=\"nb\">builtins</span><span class=\"o\">.</span>readFile <span class=\"o\">.</span><span class=\"l\">/versions.json</span><span class=\"p\">))</span><span class=\"o\">.</span>nixpkgs<span class=\"p\">)</span> <span class=\"p\">{</span> <span class=\"k\">inherit</span> config<span class=\"p\">;</span> <span class=\"p\">};</span> <span class=\"c1\"># file written with: vnixpinupdater versions.json nixpkgs nixos-20.03</span>\n  <span class=\"c1\"># override haskell dependencies in the nixpkgs</span>\n  <span class=\"ss\">haskellPackages =</span> nixpkgs<span class=\"o\">.</span>haskellPackages<span class=\"o\">.</span>override <span class=\"p\">(</span>old<span class=\"p\">:</span> <span class=\"p\">{</span>\n    <span class=\"ss\">overrides =</span> self<span class=\"p\">:</span> super<span class=\"p\">:</span> <span class=\"p\">{</span>\n      <span class=\"ss\">jsaddle-warp =</span> nixpkgs<span class=\"o\">.</span>pkgs<span class=\"o\">.</span>haskell<span class=\"o\">.</span>lib<span class=\"o\">.</span>doJailbreak super<span class=\"o\">.</span>jsaddle-warp<span class=\"p\">;</span>\n    <span class=\"p\">};</span>\n  <span class=\"p\">});</span>\n  <span class=\"c1\"># ignore files specified by gitignore</span>\n  <span class=\"ss\">source =</span> nixpkgs<span class=\"o\">.</span>nix-gitignore<span class=\"o\">.</span>gitignoreSource <span class=\"p\">[]</span> <span class=\"o\">.</span><span class=\"l\">/.</span><span class=\"p\">;</span>\n  <span class=\"c1\"># use overridden-haskellPackages to call gitignored-source and produce either package or env</span>\n  <span class=\"ss\">drv =</span> haskellPackages<span class=\"o\">.</span>callCabal2nix <span class=\"s2\">&quot;try&quot;</span> source <span class=\"p\">{};</span>\n<span class=\"k\">in</span> <span class=\"k\">if</span> nixpkgs<span class=\"o\">.</span>lib<span class=\"o\">.</span>inNixShell <span class=\"k\">then</span> drv<span class=\"o\">.</span>env <span class=\"k\">else</span> drv\n</code></pre></div>\n\n\n</div></div>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 202613349,
            "is_me_message": false,
            "last_edit_timestamp": 1593631800,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "PLRedmond@gmail.com",
            "sender_full_name": "Patrick Redmond (W'14)",
            "sender_id": 5014,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "broken package in nix",
            "submessages": [],
            "timestamp": 1593631730,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/612c7c2a108d7850c62d1d2293a481aa42855408?x=x&version=2",
            "client": "website",
            "content": "<p>I'll try manually selecting a compatible version of warp next.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 202613674,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "PLRedmond@gmail.com",
            "sender_full_name": "Patrick Redmond (W'14)",
            "sender_id": 5014,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "broken package in nix",
            "submessages": [],
            "timestamp": 1593631889,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/612c7c2a108d7850c62d1d2293a481aa42855408?x=x&version=2",
            "client": "website",
            "content": "<p>Ok, so I had to select a specific version of <code>warp</code> and one dependency <code>http2</code>, but it builds, mostly. It fails on some test in the <code>warp</code> package which requires curl to be present in path, but it isn't. I'll need to figure out how to override the package to add that in as a system build dependency.</p>\n<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n\n<p>current default.nix</p>\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n\n<div class=\"codehilite\"><pre><span></span><code><span class=\"p\">{</span> config <span class=\"o\">?</span> <span class=\"p\">{},</span> <span class=\"o\">...</span> <span class=\"p\">}:</span>\n<span class=\"c1\"># mostly from https://vaibhavsagar.com/blog/2018/05/27/quick-easy-nixpkgs-pinning/</span>\n<span class=\"k\">let</span>\n  <span class=\"c1\"># fetch a pinned version of nixpkgs</span>\n  <span class=\"ss\">fetcher =</span> <span class=\"p\">{</span> owner<span class=\"p\">,</span> repo<span class=\"p\">,</span> rev<span class=\"p\">,</span> sha256<span class=\"p\">,</span> <span class=\"o\">...</span> <span class=\"p\">}:</span> <span class=\"nb\">builtins</span><span class=\"o\">.</span>fetchTarball <span class=\"p\">{</span>\n    <span class=\"k\">inherit</span> sha256<span class=\"p\">;</span>\n    <span class=\"ss\">url =</span> <span class=\"s2\">&quot;https://github.com/</span><span class=\"si\">${</span>owner<span class=\"si\">}</span><span class=\"s2\">/</span><span class=\"si\">${</span>repo<span class=\"si\">}</span><span class=\"s2\">/archive/</span><span class=\"si\">${</span>rev<span class=\"si\">}</span><span class=\"s2\">.tar.gz&quot;</span><span class=\"p\">;</span>\n  <span class=\"p\">};</span>\n  <span class=\"ss\">nixpkgs =</span> <span class=\"nb\">import</span> <span class=\"p\">(</span>fetcher <span class=\"p\">(</span><span class=\"nb\">builtins</span><span class=\"o\">.</span>fromJSON <span class=\"p\">(</span><span class=\"nb\">builtins</span><span class=\"o\">.</span>readFile <span class=\"o\">.</span><span class=\"l\">/versions.json</span><span class=\"p\">))</span><span class=\"o\">.</span>nixpkgs<span class=\"p\">)</span> <span class=\"p\">{</span> <span class=\"k\">inherit</span> config<span class=\"p\">;</span> <span class=\"p\">};</span> <span class=\"c1\"># file written with: vnixpinupdater versions.json nixpkgs nixos-20.03</span>\n  <span class=\"c1\"># override haskell dependencies in the nixpkgs</span>\n  <span class=\"ss\">haskellPackages =</span> nixpkgs<span class=\"o\">.</span>haskellPackages<span class=\"o\">.</span>override <span class=\"p\">(</span>old<span class=\"p\">:</span> <span class=\"p\">{</span>\n    <span class=\"ss\">overrides =</span> self<span class=\"p\">:</span> super<span class=\"p\">:</span> <span class=\"p\">{</span>\n      <span class=\"ss\">warp =</span> self<span class=\"o\">.</span>callHackage <span class=\"s2\">&quot;warp&quot;</span> <span class=\"s2\">&quot;3.2.28&quot;</span> <span class=\"p\">{};</span> <span class=\"c1\"># required by jsaddle-warp</span>\n      <span class=\"ss\">http2 =</span> self<span class=\"o\">.</span>callHackage <span class=\"s2\">&quot;http2&quot;</span> <span class=\"s2\">&quot;1.6.5&quot;</span> <span class=\"p\">{};</span> <span class=\"c1\"># required by warp</span>\n    <span class=\"p\">};</span>\n  <span class=\"p\">});</span>\n  <span class=\"c1\"># ignore files specified by gitignore</span>\n  <span class=\"ss\">source =</span> nixpkgs<span class=\"o\">.</span>nix-gitignore<span class=\"o\">.</span>gitignoreSource <span class=\"p\">[]</span> <span class=\"o\">.</span><span class=\"l\">/.</span><span class=\"p\">;</span>\n  <span class=\"c1\"># use overridden-haskellPackages to call gitignored-source and produce either package or env</span>\n  <span class=\"ss\">drv =</span> haskellPackages<span class=\"o\">.</span>callCabal2nix <span class=\"s2\">&quot;try&quot;</span> source <span class=\"p\">{};</span>\n<span class=\"k\">in</span> <span class=\"k\">if</span> nixpkgs<span class=\"o\">.</span>lib<span class=\"o\">.</span>inNixShell <span class=\"k\">then</span> drv<span class=\"o\">.</span>env <span class=\"k\">else</span> drv\n</code></pre></div>\n\n\n</div></div>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 202634355,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "PLRedmond@gmail.com",
            "sender_full_name": "Patrick Redmond (W'14)",
            "sender_id": 5014,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "broken package in nix",
            "submessages": [],
            "timestamp": 1593645104,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/612c7c2a108d7850c62d1d2293a481aa42855408?x=x&version=2",
            "client": "ZulipMobile",
            "content": "<p>Ok, I guess I need to pass <code>{ buildInputs = [ curl ]; }</code> to the <code>warp</code> package.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 202639784,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "PLRedmond@gmail.com",
            "sender_full_name": "Patrick Redmond (W'14)",
            "sender_id": 5014,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "broken package in nix",
            "submessages": [],
            "timestamp": 1593650201,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/612c7c2a108d7850c62d1d2293a481aa42855408?x=x&version=2",
            "client": "ZulipMobile",
            "content": "<p>Guessing based on <a href=\"https://nixos.org/nixpkgs/manual/#sec-using-stdenv\">https://nixos.org/nixpkgs/manual/#sec-using-stdenv</a></p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 202639789,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "PLRedmond@gmail.com",
            "sender_full_name": "Patrick Redmond (W'14)",
            "sender_id": 5014,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "broken package in nix",
            "submessages": [],
            "timestamp": 1593650210,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/612c7c2a108d7850c62d1d2293a481aa42855408?x=x&version=2",
            "client": "website",
            "content": "<p>Hmm, no, I guess not. It's not being passed through to some underlying mkDerivation. It's failing with a new error.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 202641638,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "PLRedmond@gmail.com",
            "sender_full_name": "Patrick Redmond (W'14)",
            "sender_id": 5014,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "broken package in nix",
            "submessages": [],
            "timestamp": 1593652837,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/612c7c2a108d7850c62d1d2293a481aa42855408?x=x&version=2",
            "client": "website",
            "content": "<p>I ended up fixing this with <code>overrideCabal</code>.</p>\n<p>I'll post updates in <a href=\"#narrow/stream/100724-nix/topic/broken.20package.20in.20shell.20env\">the nix stream</a>.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 202648569,
            "is_me_message": false,
            "last_edit_timestamp": 1593663018,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "PLRedmond@gmail.com",
            "sender_full_name": "Patrick Redmond (W'14)",
            "sender_id": 5014,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "broken package in nix",
            "submessages": [],
            "timestamp": 1593663002,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/612c7c2a108d7850c62d1d2293a481aa42855408?x=x&version=2",
            "client": "website",
            "content": "<p>In the style of my favorite short-story podcast(s), I'm going to start posting gems that I find when dredging the vaults of haskell source code. Here's one to start:</p>\n<hr>\n<p>The <code>hsyslog</code> package wraps the posix syslog functionality so you can log straight to journald on modern linux systems. It contains this <a href=\"https://hackage.haskell.org/package/hsyslog-5.0.2/docs/src/System.Posix.Syslog.Functions.html#_syslog\">choice comment</a>:</p>\n<div class=\"codehilite\"><pre><span></span><code>  <span class=\"ow\">-&gt;</span> <span class=\"kt\">CInt</span>       <span class=\"c1\">-- ^ The length of the log message. Yes, this is a signed</span>\n                <span class=\"c1\">-- integer. Yes, an unsigned integer would be better. No, I</span>\n                <span class=\"c1\">-- can&#39;t do anything about it. It&#39;s frickin&#39; C code from one</span>\n                <span class=\"c1\">-- and a half centuries ago; what do you expect? Just don&#39;t</span>\n                <span class=\"c1\">-- pass any negative values here, okay?</span>\n</code></pre></div>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 204827040,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f642",
                    "emoji_name": "slight_smile",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "shae.erisson@gmail.com",
                        "full_name": "Shae Matijs Erisson (he) (F1'19)",
                        "id": 221819
                    },
                    "user_id": 221819
                },
                {
                    "emoji_code": "1f642",
                    "emoji_name": "slight_smile",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "perezv815@gmail.com",
                        "full_name": "Vincent Perez (F2'19)",
                        "id": 240629
                    },
                    "user_id": 240629
                },
                {
                    "emoji_code": "1f642",
                    "emoji_name": "slight_smile",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "awchen@fastmail.com",
                        "full_name": "Alex Chen (he) (SP1'20)",
                        "id": 264095
                    },
                    "user_id": 264095
                }
            ],
            "recipient_id": 22667,
            "sender_email": "PLRedmond@gmail.com",
            "sender_full_name": "Patrick Redmond (W'14)",
            "sender_id": 5014,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "tales from the vault",
            "submessages": [],
            "timestamp": 1595525063,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/612c7c2a108d7850c62d1d2293a481aa42855408?x=x&version=2",
            "client": "ZulipMobile",
            "content": "<p>I am immensely appreciative of Stephen Diehl for saying this: <a href=\"https://www.stephendiehl.com/posts/crypto.html\">The Haskell Elephant in the Room</a></p>\n<p>I experienced a little bit of this first hand over the past couple of years as I've been searching for my place in the Haskell community. Without saying any names, I've worked for and befriended people in the Haskell community that I later found out were a bit unsavory and have had to extricate myself from any relationship to.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 205710874,
            "is_me_message": false,
            "last_edit_timestamp": 1596342149,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "PLRedmond@gmail.com",
            "sender_full_name": "Patrick Redmond (W'14)",
            "sender_id": 5014,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "\"The Haskell Elephant in the Room\"",
            "submessages": [],
            "timestamp": 1596341937,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/612c7c2a108d7850c62d1d2293a481aa42855408?x=x&version=2",
            "client": "ZulipMobile",
            "content": "<p>I really hope the Haskell community sorts this out, because I think it's already started to have a negative effect on the health of Haskell open source projects and new people joining the community.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 205710947,
            "is_me_message": false,
            "last_edit_timestamp": 1596342218,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "PLRedmond@gmail.com",
            "sender_full_name": "Patrick Redmond (W'14)",
            "sender_id": 5014,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "\"The Haskell Elephant in the Room\"",
            "submessages": [],
            "timestamp": 1596342033,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/8776bd2d19cdb1399c4e9589d9397d57290e5729?x=x&version=2",
            "client": "ZulipMobile",
            "content": "<p>I agree, but I don't know what to do about it!</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 205827349,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "shae.erisson@gmail.com",
            "sender_full_name": "Shae Matijs Erisson (he) (F1'19)",
            "sender_id": 221819,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "\"The Haskell Elephant in the Room\"",
            "submessages": [],
            "timestamp": 1596478156,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/833ed696bb4b9faaa8adbba9e8a2d9a8?d=identicon&version=1",
            "client": "website",
            "content": "<p>Man, I had no idea! I'm not involved in the Haskell community, but picture of it I've carried around has been one with many kind and generous people. Though, strictly speaking, I suppose that does not mean that there aren't also a lot of other kinds of people ...</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 205837250,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "awchen@fastmail.com",
            "sender_full_name": "Alex Chen (he) (SP1'20)",
            "sender_id": 264095,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "\"The Haskell Elephant in the Room\"",
            "submessages": [],
            "timestamp": 1596483061,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/5c76b2c555785c8a87577bc81fe538bc03a8b463?x=x&version=2",
            "client": "website",
            "content": "<p>We should start building stuff that is cool and in haskell that makes money and isn't for doing unsavory things. Also \"We\" is YOU. And I need to learn haskell still...</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 205911311,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "c@chirag.io",
            "sender_full_name": "Chirag Dav\u00e9 (he) (F1'19)",
            "sender_id": 234049,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "\"The Haskell Elephant in the Room\"",
            "submessages": [],
            "timestamp": 1596550391,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/5c76b2c555785c8a87577bc81fe538bc03a8b463?x=x&version=2",
            "client": "website",
            "content": "<p>It seems like the only company that does haskell work is Costar.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 205911412,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "c@chirag.io",
            "sender_full_name": "Chirag Dav\u00e9 (he) (F1'19)",
            "sender_id": 234049,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "\"The Haskell Elephant in the Room\"",
            "submessages": [],
            "timestamp": 1596550435,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4d074af6cc341ef51b25bb2f738cdb11?d=identicon&version=1",
            "client": "website",
            "content": "<p>There are a few companies out there! My current workplace has a Haskell codebase and we duplicate physical keys for customers.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 205925246,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "vaibhavsagar@gmail.com",
            "sender_full_name": "Vaibhav Sagar (he) (F1'16)",
            "sender_id": 100041,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "\"The Haskell Elephant in the Room\"",
            "submessages": [],
            "timestamp": 1596556718,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/612c7c2a108d7850c62d1d2293a481aa42855408?x=x&version=2",
            "client": "website",
            "content": "<p>There's also PositionDev, who work on the eCommerce platform for Verso Books</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 205957418,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "PLRedmond@gmail.com",
            "sender_full_name": "Patrick Redmond (W'14)",
            "sender_id": 5014,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "\"The Haskell Elephant in the Room\"",
            "submessages": [],
            "timestamp": 1596573513,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/36ab138e6370dced362b88e9282f0c6579f9eb85?x=x&version=2",
            "client": "ZulipElectron",
            "content": "<p>It doesn't help that all of the posts I've found about \"industrial haskell\" are old graveyards of dead links and stalled projects. However I keep hearing about people workin on haskell projects that never seem to get broader notoriety.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 205959049,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "alee@aaronosaur.us",
            "sender_full_name": "Aaron Lee (he) (S1'20)",
            "sender_id": 301228,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "\"The Haskell Elephant in the Room\"",
            "submessages": [],
            "timestamp": 1596574316,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/5c76b2c555785c8a87577bc81fe538bc03a8b463?x=x&version=2",
            "client": "website",
            "content": "<p>What does haskell consulting look like? Do many people look for freelancers who haskell?</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 205968992,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "c@chirag.io",
            "sender_full_name": "Chirag Dav\u00e9 (he) (F1'19)",
            "sender_id": 234049,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "\"The Haskell Elephant in the Room\"",
            "submessages": [],
            "timestamp": 1596580286,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4d074af6cc341ef51b25bb2f738cdb11?d=identicon&version=1",
            "client": "website",
            "content": "<p>here's some non-cryptocurrency haskell: <a href=\"https://github.blog/2020-08-04-codegen-semantics-improved-language-support-system/\">https://github.blog/2020-08-04-codegen-semantics-improved-language-support-system/</a></p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 206142647,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "vaibhavsagar@gmail.com",
            "sender_full_name": "Vaibhav Sagar (he) (F1'16)",
            "sender_id": 100041,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "\"The Haskell Elephant in the Room\"",
            "submessages": [],
            "timestamp": 1596721571,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4d074af6cc341ef51b25bb2f738cdb11?d=identicon&version=1",
            "client": "website",
            "content": "<p>(accidentally double-posted)</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 206142649,
            "is_me_message": false,
            "last_edit_timestamp": 1596721613,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "vaibhavsagar@gmail.com",
            "sender_full_name": "Vaibhav Sagar (he) (F1'16)",
            "sender_id": 100041,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "\"The Haskell Elephant in the Room\"",
            "submessages": [],
            "timestamp": 1596721572,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/8776bd2d19cdb1399c4e9589d9397d57290e5729?x=x&version=2",
            "client": "ZulipMobile",
            "content": "<p>My company builds info security training platforms for the DoD, I think we have fifty Haskell coders?</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 206278398,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "shae.erisson@gmail.com",
            "sender_full_name": "Shae Matijs Erisson (he) (F1'19)",
            "sender_id": 221819,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "\"The Haskell Elephant in the Room\"",
            "submessages": [],
            "timestamp": 1596817719,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/7580ab83ada9265285a940c5a1098204?d=identicon&version=1",
            "client": "website",
            "content": "<p>I agree with what Stephen says about the crypto space, although I do think there are good actors intermixed. I don't have an opinion one way or the other about IOHK, but I don't find it surprising that startups using Haskell would espouse its beneficial features in their marketing. It seems not different then any other silicon valley startup hype marketing.</p>\n<p>Haskell (and functional programming generally) also has strong connections with traditional banking. Not exactly a shining example of intellectual purity and growth of the human spirit. Yes despite this, I don't think most people see Haskell as some kind of evil language only to be used by bankers.</p>\n<p>If we are going down this rabbit hole, I think it worth considering the ethics of silicon valley and its impacts on humanity more generally then just looking at crypto or Haskell.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 207202458,
            "is_me_message": false,
            "last_edit_timestamp": 1597702067,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "ssbothwell@gmail.com",
            "sender_full_name": "Solomon Bothwell (he) (F2'19)",
            "sender_id": 240589,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "\"The Haskell Elephant in the Room\"",
            "submessages": [],
            "timestamp": 1597702061,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/c820158f867b70bed5e4d5ed84954ff9b49fceb2?x=x&version=4",
            "client": "ZulipMobile",
            "content": "<p>TBH i feel like Rust is an even bigger hit in the cryptocurrency space due to Parity backing it in Etherium. it\u2019s not hard to find blockchain startups hiring for Rust work. i feel like this is an \u201celephant\u201d that\u2019s bigger than just Haskell, and that both Rust and Haskell have more pressing problems at hand than \u201cwho keeps publicizing our language\u201d</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 207204134,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "12795",
                    "emoji_name": "plus1",
                    "reaction_type": "realm_emoji",
                    "user": {
                        "email": "c@chirag.io",
                        "full_name": "Chirag Dav\u00e9 (he) (F1'19)",
                        "id": 234049
                    },
                    "user_id": 234049
                },
                {
                    "emoji_code": "12795",
                    "emoji_name": "plus1",
                    "reaction_type": "realm_emoji",
                    "user": {
                        "email": "ssbothwell@gmail.com",
                        "full_name": "Solomon Bothwell (he) (F2'19)",
                        "id": 240589
                    },
                    "user_id": 240589
                }
            ],
            "recipient_id": 22667,
            "sender_email": "grey@quietmisdreavus.net",
            "sender_full_name": "Victoria Mitchell (she) (F2'19)",
            "sender_id": 240569,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "\"The Haskell Elephant in the Room\"",
            "submessages": [],
            "timestamp": 1597703243,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/5c76b2c555785c8a87577bc81fe538bc03a8b463?x=x&version=2",
            "client": "website",
            "content": "<p><span class=\"user-mention silent\" data-user-id=\"240589\">Solomon Bothwell (he) (F2'19)</span> <a href=\"#narrow/stream/20298-haskell/topic/.22The.20Haskell.20Elephant.20in.20the.20Room.22/near/207202458\">said</a>:</p>\n<blockquote>\n<p>I agree with what Stephen says about the crypto space, although I do think there are good actors intermixed. I don't have an opinion one way or the other about IOHK, but I don't find it surprising that startups using Haskell would espouse its beneficial features in their marketing. It seems not different then any other silicon valley startup hype marketing.</p>\n<p>Haskell (and functional programming generally) also has strong connections with traditional banking. Not exactly a shining example of intellectual purity and growth of the human spirit. Yes despite this, I don't think most people see Haskell as some kind of evil language only to be used by bankers.</p>\n<p>If we are going down this rabbit hole, I think it worth considering the ethics of silicon valley and its impacts on humanity more generally then just looking at crypto or Haskell.</p>\n</blockquote>\n<p>well said</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 207268368,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "c@chirag.io",
            "sender_full_name": "Chirag Dav\u00e9 (he) (F1'19)",
            "sender_id": 234049,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "\"The Haskell Elephant in the Room\"",
            "submessages": [],
            "timestamp": 1597762022,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/612c7c2a108d7850c62d1d2293a481aa42855408?x=x&version=2",
            "client": "website",
            "content": "<p>When do you use STM and when do you use ST? They apply in different circumstances:</p>\n<ul>\n<li>ST can be converted purely to the result type by <code>runST :: (forall s. ST s a) -&gt; a</code></li>\n<li>STM can only be run via IO as in <code>atomically :: STM a -&gt; IO a</code></li>\n</ul>\n<p>If you're ok with the presence of IO, then what are the tradeoffs?</p>\n<ul>\n<li>ST is atomic from the perspective of IO, but could tie up a resource if run strictly</li>\n<li>STM allows safe interleaving of IO, but only if the STM references are fine-grained and/or the STM transactions are small</li>\n</ul>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 207737398,
            "is_me_message": false,
            "last_edit_timestamp": 1598123521,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "PLRedmond@gmail.com",
            "sender_full_name": "Patrick Redmond (W'14)",
            "sender_id": 5014,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "STM and ST",
            "submessages": [],
            "timestamp": 1598122499,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/612c7c2a108d7850c62d1d2293a481aa42855408?x=x&version=2",
            "client": "website",
            "content": "<p>I've never used ST before, and I'm wondering if maybe it's just not the correct tool for what I'm trying to do. I'm trying to leave the door open for concurrent operations, and so maybe I should default to STM</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 207737468,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "PLRedmond@gmail.com",
            "sender_full_name": "Patrick Redmond (W'14)",
            "sender_id": 5014,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "STM and ST",
            "submessages": [],
            "timestamp": 1598122594,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/612c7c2a108d7850c62d1d2293a481aa42855408?x=x&version=2",
            "client": "website",
            "content": "<p>Realistically it might end up being a mix of both, because <code>MVector</code> assumes <code>ST</code></p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 207737480,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "PLRedmond@gmail.com",
            "sender_full_name": "Patrick Redmond (W'14)",
            "sender_id": 5014,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "STM and ST",
            "submessages": [],
            "timestamp": 1598122624,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/6485c74622306264ff53449c6f0ca540?d=identicon&version=1",
            "client": "ZulipMobile",
            "content": "<p>What are you aiming for? I'd reach for ST if I had an algorithm described in terms of mutation that I wanted to do a fairly direct translation of without requiring callers to be in the IO monad, and I'd reach for STM for moderately sophisticated concurrent functionality. Simple concurrent stuff often seems to get away with just using MVars. The similarity in names between ST and STM is unfortunate because the two of them really don't have that much in common.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 207747125,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "iain@mccoy.id.au",
            "sender_full_name": "Iain McCoy (he) (SP2'17)",
            "sender_id": 100806,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "STM and ST",
            "submessages": [],
            "timestamp": 1598139852,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4d074af6cc341ef51b25bb2f738cdb11?d=identicon&version=1",
            "client": "website",
            "content": "<p>For the things that I work on I don't have to use STM at all, but ST is pretty handy, especially when updating mutable vectors in place. If you're okay with the presence of IO then you can use e.g. <code>atomicModifyIORef</code> to get more concurrency guarantees (which I don't you can do in ST, see <a href=\"https://gitlab.haskell.org/ghc/ghc/-/issues/11760\">https://gitlab.haskell.org/ghc/ghc/-/issues/11760</a>)</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 207759191,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "vaibhavsagar@gmail.com",
            "sender_full_name": "Vaibhav Sagar (he) (F1'16)",
            "sender_id": 100041,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "STM and ST",
            "submessages": [],
            "timestamp": 1598164468,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4d074af6cc341ef51b25bb2f738cdb11?d=identicon&version=1",
            "client": "website",
            "content": "<p>I have a blog post about using ST: <a href=\"https://vaibhavsagar.com/blog/2017/05/29/imperative-haskell/\">https://vaibhavsagar.com/blog/2017/05/29/imperative-haskell/</a></p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 207759204,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "vaibhavsagar@gmail.com",
            "sender_full_name": "Vaibhav Sagar (he) (F1'16)",
            "sender_id": 100041,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "STM and ST",
            "submessages": [],
            "timestamp": 1598164500,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/7580ab83ada9265285a940c5a1098204?d=identicon&version=1",
            "client": "website",
            "content": "<p>Last week I read the Servant paper and implemented a server library for Gemini Protocol (<a href=\"https://gemini.circumlunar.space\">https://gemini.circumlunar.space</a>): <br>\n<a href=\"https://github.com/ssbothwell/titan\">https://github.com/ssbothwell/titan</a></p>\n<p>Would love to get feedback from anyone here. I feel like the way I am writing the handlers is a little clunky at the moment. They are <code>ExceptT (ResponseCode, Text) IO (Response a)</code>. I don't want the user to have to manually construct the response. I would rather it be generated based on the mimetype in the request and some typeclass instance for the type in the response.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 207871549,
            "is_me_message": false,
            "last_edit_timestamp": 1598290352,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "ssbothwell@gmail.com",
            "sender_full_name": "Solomon Bothwell (he) (F2'19)",
            "sender_id": 240589,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Gemini Protocol Server",
            "submessages": [],
            "timestamp": 1598290234,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/612c7c2a108d7850c62d1d2293a481aa42855408?x=x&version=2",
            "client": "website",
            "content": "<p>I'm messing with some type-level programming. I want to do mutations over typed columns in a polymorphic \"database\" of sorts. The columns are polymorphic to facilitate dense and sparse storage, and the values themselves are also polymorphic.. it's something like this:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kr\">data</span> <span class=\"n\">col</span> <span class=\"kt\">:::</span> <span class=\"n\">columns</span> <span class=\"ow\">=</span> <span class=\"n\">col</span> <span class=\"kt\">:::</span> <span class=\"n\">columns</span>\n<span class=\"kr\">infixr</span> <span class=\"mi\">5</span> <span class=\"kt\">:::</span>\n<span class=\"kr\">data</span> <span class=\"kt\">Key</span> <span class=\"ow\">=</span> <span class=\"kt\">Key</span> <span class=\"kt\">Int</span>\n<span class=\"kr\">type</span> <span class=\"kt\">EgTable</span> <span class=\"ow\">=</span> <span class=\"kt\">Vector</span> <span class=\"p\">(</span><span class=\"kt\">Maybe</span> <span class=\"kt\">CommonDatum</span><span class=\"p\">)</span> <span class=\"kt\">:::</span> <span class=\"kt\">Map</span> <span class=\"kt\">Key</span> <span class=\"kt\">UncommonDatum</span> <span class=\"kt\">:::</span> <span class=\"nb\">()</span>\n</code></pre></div>\n\n\n<p>Given that setup, I'm thinking of thawing to <code>MVector st v</code> for mutations and then freezing again afterward. If I do that, then the equivalent for the sparse (Map) representation would be to put it in an <code>STRef</code> during the mutation pass.</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kr\">type</span> <span class=\"kt\">EgMutTableST</span> <span class=\"n\">st</span> <span class=\"ow\">=</span> <span class=\"kt\">MVector</span> <span class=\"n\">st</span> <span class=\"p\">(</span><span class=\"kt\">Maybe</span> <span class=\"kt\">CommonDatum</span><span class=\"p\">)</span> <span class=\"kt\">:::</span> <span class=\"kt\">STRef</span> <span class=\"n\">st</span> <span class=\"p\">(</span><span class=\"kt\">Map</span> <span class=\"kt\">Key</span> <span class=\"kt\">UncommonDatum</span><span class=\"p\">)</span> <span class=\"kt\">:::</span> <span class=\"nb\">()</span>\n</code></pre></div>\n\n\n<p>The reason for this question on zulip is because I realized that this arrangement means I'm constrained to doing a linear pass over the space of <code>Key</code>s. IE. the <code>MVector st</code> is constrained to operations occuring in one thread? I'm not sure. I've never used ST and haven't started to experiment with it yet. I thought maybe I'd instead use STM to leave open the door for concurrency:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kr\">type</span> <span class=\"kt\">EgMutTableSTM</span> <span class=\"ow\">=</span> <span class=\"kt\">TVar</span> <span class=\"p\">(</span><span class=\"kt\">Vector</span> <span class=\"p\">(</span><span class=\"kt\">Maybe</span> <span class=\"kt\">CommonDatum</span><span class=\"p\">))</span> <span class=\"kt\">:::</span> <span class=\"kt\">TVar</span> <span class=\"p\">(</span><span class=\"kt\">Map</span> <span class=\"kt\">Key</span> <span class=\"kt\">UncommonDatum</span><span class=\"p\">)</span> <span class=\"kt\">:::</span> <span class=\"nb\">()</span>\n</code></pre></div>\n\n\n<p>But now I'm getting into a use of the <code>Vector a</code> which is maybe not so efficient. If a pass updates most of the entries in the Vector, it'll be very inefficient to accumulate an update list <code>[(Int, a)]</code></p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 207872050,
            "is_me_message": false,
            "last_edit_timestamp": 1598291489,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "PLRedmond@gmail.com",
            "sender_full_name": "Patrick Redmond (W'14)",
            "sender_id": 5014,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "STM and ST",
            "submessages": [],
            "timestamp": 1598290494,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/6485c74622306264ff53449c6f0ca540?d=identicon&version=1",
            "client": "ZulipMobile",
            "content": "<p>It sounds like the point is more to learn about the type-level stuff, so I'd be inclined to either just pick ST and go with it, or to double-down on the type-y stuff and abstract out the monad and the accompanying reference type.</p>\n<p>I haven't really done type-level stuff... Is using type-level lists and maps (dependent-map / HList) on the cards? If the structure in your types is exclusively type-level then it should allow for multiple implementations with different performance / concurrency characteristics at the value level, yeah?</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 207911144,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "iain@mccoy.id.au",
            "sender_full_name": "Iain McCoy (he) (SP2'17)",
            "sender_id": 100806,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "STM and ST",
            "submessages": [],
            "timestamp": 1598313381,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/612c7c2a108d7850c62d1d2293a481aa42855408?x=x&version=2",
            "client": "website",
            "content": "<p>Here's a more recent overview of how the servant library works. The presenter says that things have diverged a bit from the servant paper, and it goes into some detail with three examples, and so it may be worth watching. <a href=\"https://www.youtube.com/watch?v=snOBI8PcbMQ&amp;t=14m\">https://www.youtube.com/watch?v=snOBI8PcbMQ&amp;t=14m</a> (interesting type-level-dsl stuff starts at 14:00)</p>\n<div class=\"youtube-video message_inline_image\"><a data-id=\"snOBI8PcbMQ\" href=\"https://www.youtube.com/watch?v=snOBI8PcbMQ&amp;t=14m\"><img src=\"https://i.ytimg.com/vi/snOBI8PcbMQ/default.jpg\"></a></div>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 207923236,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "PLRedmond@gmail.com",
            "sender_full_name": "Patrick Redmond (W'14)",
            "sender_id": 5014,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Gemini Protocol Server",
            "submessages": [],
            "timestamp": 1598328682,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/612c7c2a108d7850c62d1d2293a481aa42855408?x=x&version=2",
            "client": "website",
            "content": "<p>I'm not familiar with gemini (i just scanned the faq and spec) but I'll take a quick look at your code and see if I can help.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 207923252,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "PLRedmond@gmail.com",
            "sender_full_name": "Patrick Redmond (W'14)",
            "sender_id": 5014,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Gemini Protocol Server",
            "submessages": [],
            "timestamp": 1598328712,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/612c7c2a108d7850c62d1d2293a481aa42855408?x=x&version=2",
            "client": "website",
            "content": "<p>If I'm reading your code correctly, right now the handlers return (as you said) </p>\n<div class=\"codehilite\"><pre><span></span><code>  <span class=\"kr\">type</span> <span class=\"kt\">Server</span> <span class=\"p\">(</span><span class=\"kt\">Get</span> <span class=\"n\">a</span><span class=\"p\">)</span> <span class=\"ow\">=</span> <span class=\"kt\">ExceptT</span> <span class=\"p\">(</span><span class=\"kt\">ResponseCode</span><span class=\"p\">,</span> <span class=\"kt\">Text</span><span class=\"p\">)</span> <span class=\"kt\">IO</span> <span class=\"p\">(</span><span class=\"kt\">Response</span> <span class=\"n\">a</span><span class=\"p\">)</span>\n</code></pre></div>\n\n\n<p>.. but this is clunky because generating a <code>Response a</code> manually requires making a</p>\n<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n\n<p>pasted code</p>\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kr\">data</span> <span class=\"kt\">Response</span> <span class=\"n\">a</span> <span class=\"ow\">=</span> <span class=\"kt\">Response</span>\n  <span class=\"p\">{</span> <span class=\"n\">_header</span> <span class=\"ow\">::</span> <span class=\"kt\">Header</span>\n  <span class=\"p\">,</span> <span class=\"n\">_body</span>   <span class=\"ow\">::</span> <span class=\"kt\">Maybe</span> <span class=\"n\">a</span>\n  <span class=\"p\">}</span> <span class=\"kr\">deriving</span> <span class=\"p\">(</span><span class=\"kt\">Show</span><span class=\"p\">,</span> <span class=\"kt\">Functor</span><span class=\"p\">)</span>\n<span class=\"c1\">-- containing a</span>\n<span class=\"kr\">data</span> <span class=\"kt\">Header</span> <span class=\"ow\">=</span> <span class=\"kt\">Header</span>\n <span class=\"p\">{</span> <span class=\"n\">_status</span> <span class=\"ow\">::</span> <span class=\"kt\">ResponseCode</span>\n <span class=\"p\">,</span> <span class=\"n\">_meta</span>   <span class=\"ow\">::</span> <span class=\"kt\">Text</span>\n <span class=\"p\">}</span> <span class=\"kr\">deriving</span> <span class=\"kt\">Show</span>\n<span class=\"c1\">-- containing a</span>\n<span class=\"kr\">data</span> <span class=\"kt\">ResponseCode</span> <span class=\"ow\">=</span>\n    <span class=\"kt\">One</span>   <span class=\"c1\">-- Input</span>\n  <span class=\"o\">|</span> <span class=\"kt\">Two</span>   <span class=\"c1\">-- Success</span>\n  <span class=\"o\">|</span> <span class=\"kt\">Three</span> <span class=\"c1\">-- Redirect</span>\n  <span class=\"o\">|</span> <span class=\"kt\">Four</span>  <span class=\"c1\">-- Temporary Failure</span>\n  <span class=\"o\">|</span> <span class=\"kt\">Five</span>  <span class=\"c1\">-- Permanent Failure</span>\n  <span class=\"o\">|</span> <span class=\"kt\">Six</span>   <span class=\"c1\">-- Client Certificate Required</span>\n</code></pre></div>\n\n\n</div></div>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 207924185,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "PLRedmond@gmail.com",
            "sender_full_name": "Patrick Redmond (W'14)",
            "sender_id": 5014,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Gemini Protocol Server",
            "submessages": [],
            "timestamp": 1598330164,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/612c7c2a108d7850c62d1d2293a481aa42855408?x=x&version=2",
            "client": "website",
            "content": "<p>An example might be:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"nf\">foo</span> <span class=\"ow\">=</span> <span class=\"kr\">do</span>\n    <span class=\"n\">return</span> <span class=\"kt\">Response</span>\n        <span class=\"p\">{</span> <span class=\"n\">_header</span> <span class=\"ow\">=</span> <span class=\"kt\">Header</span>\n            <span class=\"p\">{</span> <span class=\"n\">_status</span> <span class=\"ow\">=</span> <span class=\"kt\">Two</span> <span class=\"c1\">-- success</span>\n            <span class=\"p\">,</span> <span class=\"n\">_meta</span> <span class=\"ow\">=</span> <span class=\"n\">fromString</span> <span class=\"s\">&quot;&quot;</span> <span class=\"c1\">-- i don&#39;t know if this is required so i&#39;m leaving it blank</span>\n            <span class=\"p\">}</span>\n        <span class=\"p\">,</span> <span class=\"n\">_body</span> <span class=\"ow\">=</span> <span class=\"kt\">Nothing</span> <span class=\"c1\">-- again, arbitrarily leaving it blank</span>\n        <span class=\"p\">}</span>\n</code></pre></div>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 207924212,
            "is_me_message": false,
            "last_edit_timestamp": 1598330295,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "PLRedmond@gmail.com",
            "sender_full_name": "Patrick Redmond (W'14)",
            "sender_id": 5014,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Gemini Protocol Server",
            "submessages": [],
            "timestamp": 1598330275,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/612c7c2a108d7850c62d1d2293a481aa42855408?x=x&version=2",
            "client": "website",
            "content": "<p>Some ideas to make it less clunky (in roughly ascending order of value/complexity):</p>\n<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n\n<h3>Response dsl or response templates</h3>\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n\n<ul>\n<li>You might provide a monad which exposes actions allowing you to set response fields, or groups of response fields. This kind of seems like overkill that diverges from what gemini is.</li>\n<li>Simpler yet, you might just provide several canned functions that return templated <code>Response</code>s for common use cases/mimetypes.</li>\n</ul>\n</div></div>\n\n<p>or..</p>\n<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n\n<h3>Higher level endpoint combinator</h3>\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n\n<ul>\n<li>Currently your instance for <code>(Get a)</code> has the context <code>(Show a) =&gt;</code> and the <code>a</code> eventually finds its way into <code>Text.pack . show $ Response {...}</code>.</li>\n<li>You could make a higher-level instance which produces a <code>Response a</code> and delegates to the instance for <code>Get a</code> for its rendering and routing bookkeeping.</li>\n</ul>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kr\">instance</span> <span class=\"kt\">ToResponse</span> <span class=\"n\">a</span> <span class=\"ow\">=&gt;</span> <span class=\"kt\">HasServer</span> <span class=\"p\">(</span><span class=\"kt\">HigherLevel</span> <span class=\"n\">a</span><span class=\"p\">)</span> <span class=\"kr\">where</span> <span class=\"c1\">-- naming..</span>\n  <span class=\"kr\">type</span> <span class=\"kt\">Server</span> <span class=\"p\">(</span><span class=\"kt\">HigherLevel</span> <span class=\"n\">a</span><span class=\"p\">)</span> <span class=\"ow\">=</span> <span class=\"kt\">ExceptT</span> <span class=\"kt\">YourHigherLevelErrorDatatype</span> <span class=\"kt\">IO</span> <span class=\"n\">a</span>\n</code></pre></div>\n\n\n<p>I might be mixing two solutions here, but then the idea is to implement <code>route</code> to use whatever <code>ToResponse(toResponse)</code> to generate a <code>Response a</code> that can be immediately handed off to the <code>Get a</code> instance.</p>\n</div></div>\n\n<p>or..</p>\n<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n\n<h3>Middleware</h3>\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n\n<p>Instead of modifying your router/server-framework in a way that diverges from the gemini protocol, you could provide a middleware of sorts that wraps handlers to view both their <code>Request</code> and <code>result</code> and uses them (eg. as you said, the mimetype in the <code>Request</code>) to produce an appropriate <code>Response a</code> to be serialized by the existing <code>Get a</code> instance.</p>\n<p>If you check out how middlewares work for<code>wai</code>/ <code>warp</code>, you could probably do something similar for <code>titan</code>: <a href=\"https://hackage.haskell.org/package/wai/docs/Network-Wai.html#t:Middleware\">https://hackage.haskell.org/package/wai/docs/Network-Wai.html#t:Middleware</a></p>\n<p>So, you write a function that takes a <code>Request -&gt; (Response -&gt; IO ResponseReceived) -&gt; IO ResponseReceived</code> and returns a new <code>Request -&gt; (Response -&gt; IO ResponseReceived) -&gt; IO ResponseReceived</code>. There are a bunch of examples here: <a href=\"https://hackage.haskell.org/package/wai-extra\">https://hackage.haskell.org/package/wai-extra</a></p>\n</div></div>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 207924793,
            "is_me_message": false,
            "last_edit_timestamp": 1598331924,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "PLRedmond@gmail.com",
            "sender_full_name": "Patrick Redmond (W'14)",
            "sender_id": 5014,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Gemini Protocol Server",
            "submessages": [],
            "timestamp": 1598331153,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/612c7c2a108d7850c62d1d2293a481aa42855408?x=x&version=2",
            "client": "website",
            "content": "<p>I'm using the type-level-list defined as <code>:::</code> above.</p>\n<p>Things are mostly at the type level, but not entirely. For example, when passing a function over all rows I don't want to repeatedly search through the column-list to extract the next argument for the function. Therefore, I need to be able to extract columns and rearrange the h-list once beforehand. For that purpose, I've had to write some pretty weird typeclasses which combine the type and value level.</p>\n<p>I'm getting to the point where I'll be able to apply a function, and I'm pretty sure that the apply code is going to be heavily coupled to the choice of concurrency &amp; mutability strategy. Maybe I should just pick something, as you say, and then see how it shakes out. I'll probably need to write it multiple times anyway to get the abstraction correct.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 207925164,
            "is_me_message": false,
            "last_edit_timestamp": 1598332073,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "PLRedmond@gmail.com",
            "sender_full_name": "Patrick Redmond (W'14)",
            "sender_id": 5014,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "STM and ST",
            "submessages": [],
            "timestamp": 1598331820,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/7580ab83ada9265285a940c5a1098204?d=identicon&version=1",
            "client": "website",
            "content": "<p>Thank you <span class=\"user-mention\" data-user-id=\"5014\">@Patrick Redmond (W'14)</span> ! I'll read through this carefully after work today.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 207988937,
            "is_me_message": false,
            "last_edit_timestamp": 1598374479,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "ssbothwell@gmail.com",
            "sender_full_name": "Solomon Bothwell (he) (F2'19)",
            "sender_id": 240589,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Gemini Protocol Server",
            "submessages": [],
            "timestamp": 1598374466,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/7580ab83ada9265285a940c5a1098204?d=identicon&version=1",
            "client": "website",
            "content": "<p>I'm not entirely understanding your second idea. Are you suggesting that the <code>HasServer</code> instance for <code>HigherLevel a</code> will pack the <code>a</code> into a <code>Response</code> type before passing it off to the <code>Get</code> instance? The goal here being to make allow the handler function to not require packing into a <code>Response type</code>?</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 208037439,
            "is_me_message": false,
            "last_edit_timestamp": 1598398622,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "ssbothwell@gmail.com",
            "sender_full_name": "Solomon Bothwell (he) (F2'19)",
            "sender_id": 240589,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Gemini Protocol Server",
            "submessages": [],
            "timestamp": 1598398528,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/612c7c2a108d7850c62d1d2293a481aa42855408?x=x&version=2",
            "client": "website",
            "content": "<p>In my second idea, the handler for a <code>HigherLevel a</code> (poor naming) endpoint has type <code>ExceptT YourHigherLevelErrorDataType IO a</code>, meaning the handler returns <code>ToResponse a =&gt; a</code>. The implementation for <code>router</code> can call <code>ToResponse(toResponse)</code> and delegate to the <code>router</code> for <code>Get a</code></p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 208043782,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "PLRedmond@gmail.com",
            "sender_full_name": "Patrick Redmond (W'14)",
            "sender_id": 5014,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Gemini Protocol Server",
            "submessages": [],
            "timestamp": 1598404793,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/612c7c2a108d7850c62d1d2293a481aa42855408?x=x&version=2",
            "client": "website",
            "content": "<p>So the handler doesn't pack into the <code>Response</code> type, it returns an <code>a</code> such that the packing into a <code>Response</code> is abstracted elsewhere, in the instance of <code>ToResponse</code></p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 208043856,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "PLRedmond@gmail.com",
            "sender_full_name": "Patrick Redmond (W'14)",
            "sender_id": 5014,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Gemini Protocol Server",
            "submessages": [],
            "timestamp": 1598404846,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/833ed696bb4b9faaa8adbba9e8a2d9a8?d=identicon&version=1",
            "client": "website",
            "content": "<p>Hi, I've run into an issue with overlapping instances. I've read through <a href=\"https://downloads.haskell.org/ghc/latest/docs/html/users_guide/glasgow_exts.html?highlight=overlapping#overlapping-instances\">https://downloads.haskell.org/ghc/latest/docs/html/users_guide/glasgow_exts.html?highlight=overlapping#overlapping-instances</a>, but I don't really see why my instances are overlapping because the type variables between the two instances have different kinds.</p>\n<p>Here is the error:</p>\n<div class=\"codehilite\"><pre><span></span><code>.../src/Store/EntityID.hs:118:10: error:\n    \u2022 Overlapping instances for Custom.MutableNew.GMutableNew0\n                                  s (GHC.Generics.K1 GHC.Generics.R (STRef s EntityIDPoolSnapshot))\n        arising from a use of \u2018Custom.MutableNew.$dmcopy0\u2019\n      Matching instances:\n        two instances involving out-of-scope types\n          instance MutableNew1 f a =&gt;\n                   Custom.MutableNew.GMutableNew0 s (GHC.Generics.K1 i (f s a))\n            -- Defined at src/Custom/MutableNew.hs:97:10\n          instance MutableNew0 f =&gt;\n                   Custom.MutableNew.GMutableNew0 s (GHC.Generics.K1 i (f s))\n            -- Defined at src/Custom/MutableNew.hs:93:10\n      (The choice depends on the instantiation of \u2018s\u2019\n       To pick the first instance above, use IncoherentInstances\n       when compiling the other instance declarations)\n    \u2022 In the expression: Custom.MutableNew.$dmcopy0 @(EntityIDPool)\n      In an equation for \u2018copy0\u2019:\n          copy0 = Custom.MutableNew.$dmcopy0 @(EntityIDPool)\n      In the instance declaration for \u2018MutableNew0 EntityIDPool\u2019\n    |\n118 | instance MutableNew0 EntityIDPool where\n    |          ^^^^^^^^^^^^^^^^^^^^^^^^\n</code></pre></div>\n\n\n<p>where <code>f :: * -&gt; * -&gt; *</code> in the first listed instance, and <code>f :: * -&gt; *</code> in the second.</p>\n<p>For context, this is the module I'm working on: <a href=\"user_uploads/13/JYHAlG7bJZNcy3Q2bGXpDwDL/MutableNew.hs\">MutableNew.hs</a>. I'm trying to use GHC.Generics to derive instances of a typeclass (it's an ad-hoc typeclass for a specific set of mutable types in my program that can be thawed/frozen/copied).</p>\n<p>I don't really know what I'm doing. Is my approach on the right track?</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 208464683,
            "is_me_message": false,
            "last_edit_timestamp": 1598755483,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "awchen@fastmail.com",
            "sender_full_name": "Alex Chen (he) (SP1'20)",
            "sender_id": 264095,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Overlapping instances",
            "submessages": [],
            "timestamp": 1598754433,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/833ed696bb4b9faaa8adbba9e8a2d9a8?d=identicon&version=1",
            "client": "website",
            "content": "<p>I tried to push through with <code>IncoherentInstances</code>, but now the type families are giving me trouble:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kr\">class</span> <span class=\"kt\">GMutableNew0</span> <span class=\"p\">(</span><span class=\"n\">s</span> <span class=\"ow\">::</span> <span class=\"kt\">Type</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"n\">f</span> <span class=\"ow\">::</span> <span class=\"kt\">Type</span> <span class=\"ow\">-&gt;</span> <span class=\"kt\">Type</span><span class=\"p\">)</span> <span class=\"kr\">where</span>\n  <span class=\"kr\">type</span> <span class=\"kt\">GSnapshot0</span> <span class=\"n\">f</span> <span class=\"ow\">::</span> <span class=\"kt\">Type</span> <span class=\"ow\">-&gt;</span> <span class=\"kt\">Type</span>\n  <span class=\"n\">gCopy</span> <span class=\"ow\">::</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"ow\">-&gt;</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"ow\">-&gt;</span> <span class=\"kt\">ST</span> <span class=\"n\">s</span> <span class=\"nb\">()</span>\n\n<span class=\"kr\">instance</span> <span class=\"cm\">{-# INCOHERENT #-}</span> <span class=\"kt\">MutableNew0</span> <span class=\"n\">f</span> <span class=\"ow\">=&gt;</span> <span class=\"kt\">GMutableNew0</span> <span class=\"n\">s</span> <span class=\"p\">(</span><span class=\"kt\">K1</span> <span class=\"n\">i</span> <span class=\"p\">(</span><span class=\"n\">f</span> <span class=\"n\">s</span><span class=\"p\">))</span> <span class=\"kr\">where</span>\n  <span class=\"kr\">type</span> <span class=\"kt\">GSnapshot0</span> <span class=\"p\">(</span><span class=\"kt\">K1</span> <span class=\"n\">i</span> <span class=\"p\">(</span><span class=\"n\">f</span> <span class=\"n\">s</span><span class=\"p\">))</span> <span class=\"ow\">=</span> <span class=\"kt\">K1</span> <span class=\"n\">i</span> <span class=\"p\">(</span><span class=\"kt\">Snapshot0</span> <span class=\"n\">f</span><span class=\"p\">)</span>\n  <span class=\"n\">gCopy</span> <span class=\"p\">(</span><span class=\"kt\">K1</span> <span class=\"n\">x</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"kt\">K1</span> <span class=\"n\">y</span><span class=\"p\">)</span> <span class=\"ow\">=</span> <span class=\"n\">copy0</span> <span class=\"n\">x</span> <span class=\"n\">y</span>\n\n<span class=\"kr\">instance</span> <span class=\"cm\">{-# INCOHERENT #-}</span> <span class=\"kt\">MutableNew1</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"ow\">=&gt;</span> <span class=\"kt\">GMutableNew0</span> <span class=\"n\">s</span> <span class=\"p\">(</span><span class=\"kt\">K1</span> <span class=\"n\">i</span> <span class=\"p\">(</span><span class=\"n\">f</span> <span class=\"n\">s</span> <span class=\"n\">a</span><span class=\"p\">))</span> <span class=\"kr\">where</span>\n  <span class=\"kr\">type</span> <span class=\"kt\">GSnapshot0</span> <span class=\"p\">(</span><span class=\"kt\">K1</span> <span class=\"n\">i</span> <span class=\"p\">(</span><span class=\"n\">f</span> <span class=\"n\">s</span> <span class=\"n\">a</span><span class=\"p\">))</span> <span class=\"ow\">=</span> <span class=\"kt\">K1</span> <span class=\"n\">i</span> <span class=\"p\">(</span><span class=\"kt\">Snapshot1</span> <span class=\"n\">f</span> <span class=\"n\">a</span><span class=\"p\">)</span>\n  <span class=\"n\">gCopy</span> <span class=\"p\">(</span><span class=\"kt\">K1</span> <span class=\"n\">x</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"kt\">K1</span> <span class=\"n\">y</span><span class=\"p\">)</span> <span class=\"ow\">=</span> <span class=\"n\">copy1</span> <span class=\"n\">x</span> <span class=\"n\">y</span>\n</code></pre></div>\n\n\n<div class=\"codehilite\"><pre><span></span><code>/home/alex/projects/pixelpusher/pixelpusher/src/Custom/MutableNew.hs:97:8-17: error:\n    Conflicting family instance declarations:\n      GSnapshot0 (K1 i (f s)) = K1 i (Snapshot0 f)\n        -- Defined at /home/alex/projects/pixelpusher/pixelpusher/src/Custom/MutableNew.hs:97:8\n      GSnapshot0 (K1 i (f s a)) = K1 i (Snapshot1 f a)\n        -- Defined at /home/alex/projects/pixelpusher/pixelpusher/src/Custom/MutableNew.hs:102:8\n   |\n97 |   type GSnapshot0 (K1 i (f s)) = K1 i (Snapshot0 f)\n   |        ^^^^^^^^^^\n</code></pre></div>\n\n\n<p>Man, this isn't looking good</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 208465580,
            "is_me_message": false,
            "last_edit_timestamp": 1598756768,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "awchen@fastmail.com",
            "sender_full_name": "Alex Chen (he) (SP1'20)",
            "sender_id": 264095,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Overlapping instances",
            "submessages": [],
            "timestamp": 1598756414,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/612c7c2a108d7850c62d1d2293a481aa42855408?x=x&version=2",
            "client": "website",
            "content": "<p>The head of both instances is <code>GMutableNew0 s (K1 i (f s))</code>. AFAIK, that's overlapping. You can't really get far with overlapping/overlaps/incoherent so it's better to distinguish the instance heads.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 208466905,
            "is_me_message": false,
            "last_edit_timestamp": 1598759964,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "PLRedmond@gmail.com",
            "sender_full_name": "Patrick Redmond (W'14)",
            "sender_id": 5014,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Overlapping instances",
            "submessages": [],
            "timestamp": 1598759385,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/612c7c2a108d7850c62d1d2293a481aa42855408?x=x&version=2",
            "client": "website",
            "content": "<p>I've been programming a bunch of stuff which has had this kind of problem recently. My types are identical, but I have some type-level programming that distinguishes them. In your case, you've got some constraints that distinguish them. Same deal.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 208466961,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "PLRedmond@gmail.com",
            "sender_full_name": "Patrick Redmond (W'14)",
            "sender_id": 5014,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Overlapping instances",
            "submessages": [],
            "timestamp": 1598759485,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/612c7c2a108d7850c62d1d2293a481aa42855408?x=x&version=2",
            "client": "website",
            "content": "<p>There are several tricks to avoid this problem. Here are two blog posts which go over some of the tricks.<br>\n<a href=\"https://kseo.github.io/posts/2017-02-05-avoid-overlapping-instances-with-closed-type-families.html\">https://kseo.github.io/posts/2017-02-05-avoid-overlapping-instances-with-closed-type-families.html</a><br>\n<a href=\"https://functional.works-hub.com/learn/heterogeneous-lists-with-dependent-types-in-haskell-922f6\">https://functional.works-hub.com/learn/heterogeneous-lists-with-dependent-types-in-haskell-922f6</a></p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 208467007,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "PLRedmond@gmail.com",
            "sender_full_name": "Patrick Redmond (W'14)",
            "sender_id": 5014,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Overlapping instances",
            "submessages": [],
            "timestamp": 1598759556,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/612c7c2a108d7850c62d1d2293a481aa42855408?x=x&version=2",
            "client": "website",
            "content": "<p>My preferred approach is the one used in the standard library by the <code>Show</code> class. It goes like this:</p>\n<ul>\n<li>Add an extra type variable to your class head.</li>\n<li>Write a closed type family which distinguishes your cases by returning some kind with distinct type inhabitants.</li>\n<li>Instantiate the class once for each of those inhabitants.</li>\n<li>Use an equality constraint in your instance head to constrain the extra type argument to be equal to whatever your type family returns.</li>\n<li>At each of the use-sites of your classes, add the extra equality constraint.</li>\n</ul>\n<p>Bonus:</p>\n<ul>\n<li>Create a second class which doesn't have the extra type variable in the head.</li>\n<li>Create <em>a single instance</em>of the extra class with the necessary constraints to call into your earlier class.</li>\n</ul>\n<p>I'll try to come up with an example and paste it here..</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 208467141,
            "is_me_message": false,
            "last_edit_timestamp": 1598760013,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "PLRedmond@gmail.com",
            "sender_full_name": "Patrick Redmond (W'14)",
            "sender_id": 5014,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Overlapping instances",
            "submessages": [],
            "timestamp": 1598759891,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/612c7c2a108d7850c62d1d2293a481aa42855408?x=x&version=2",
            "client": "website",
            "content": "<p>Oh, I see you included the sourcecode in your question. I'll see what I can do with that file.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 208467297,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "PLRedmond@gmail.com",
            "sender_full_name": "Patrick Redmond (W'14)",
            "sender_id": 5014,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Overlapping instances",
            "submessages": [],
            "timestamp": 1598760245,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/612c7c2a108d7850c62d1d2293a481aa42855408?x=x&version=2",
            "client": "website",
            "content": "<p>Disclaimer: I have no experience with writing Generic/deriving instances in haskell, so I might just be mangling your code in a way that doesn't work for you ..</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 208467407,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "PLRedmond@gmail.com",
            "sender_full_name": "Patrick Redmond (W'14)",
            "sender_id": 5014,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Overlapping instances",
            "submessages": [],
            "timestamp": 1598760506,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/833ed696bb4b9faaa8adbba9e8a2d9a8?d=identicon&version=1",
            "client": "website",
            "content": "<p>Thanks a lot for your help!! This has plagued me for a long time (I tried about a month ago to do this, but gave up). It's good to know that this can be overcome. I'm a bit braindead right now from obsessing over this problem, so I'll take a look at your links tomorrow.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 208467411,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "awchen@fastmail.com",
            "sender_full_name": "Alex Chen (he) (SP1'20)",
            "sender_id": 264095,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Overlapping instances",
            "submessages": [],
            "timestamp": 1598760528,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/612c7c2a108d7850c62d1d2293a481aa42855408?x=x&version=2",
            "client": "website",
            "content": "<p>I hope I can help with this.. Like I said, I've never done generics programming, and so this is actually quite different from what I was doing. <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 208467794,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "PLRedmond@gmail.com",
            "sender_full_name": "Patrick Redmond (W'14)",
            "sender_id": 5014,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Overlapping instances",
            "submessages": [],
            "timestamp": 1598761441,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/612c7c2a108d7850c62d1d2293a481aa42855408?x=x&version=2",
            "client": "website",
            "content": "<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n\n<p>MungedMutableNew.hs</p>\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n\n<div class=\"codehilite\"><pre><span></span><code><span class=\"cm\">{-# LANGUAGE DefaultSignatures #-}</span>\n<span class=\"cm\">{-# LANGUAGE FlexibleContexts #-}</span>\n<span class=\"cm\">{-# LANGUAGE FlexibleInstances #-}</span>\n<span class=\"cm\">{-# LANGUAGE MultiParamTypeClasses #-}</span>\n<span class=\"cm\">{-# LANGUAGE TypeApplications #-}</span>\n<span class=\"cm\">{-# LANGUAGE TypeFamilies #-}</span>\n<span class=\"cm\">{-# LANGUAGE TypeOperators #-}</span>\n<span class=\"cm\">{-# LANGUAGE DataKinds #-}</span>\n<span class=\"cm\">{-# LANGUAGE PolyKinds #-}</span>\n\n<span class=\"kr\">module</span> <span class=\"nn\">MutableNew</span>\n  <span class=\"p\">(</span> <span class=\"kt\">MutableNew0</span> <span class=\"p\">(</span><span class=\"o\">..</span><span class=\"p\">)</span>\n  <span class=\"p\">,</span> <span class=\"kt\">MutableNew1</span> <span class=\"p\">(</span><span class=\"o\">..</span><span class=\"p\">)</span>\n  <span class=\"p\">)</span> <span class=\"kr\">where</span>\n\n<span class=\"c1\">-- I want to do something similar to Data.Mutable</span>\n<span class=\"c1\">-- (http://hackage.haskell.org/package/mutable), but in the opposite direction:</span>\n<span class=\"c1\">-- instead of starting with immutable data types and deriving mutable versions,</span>\n<span class=\"c1\">-- I want to start with mutable data types and derive immutable versions.</span>\n\n<span class=\"kr\">import</span> <span class=\"nn\">Control.Monad.ST</span>\n<span class=\"kr\">import</span> <span class=\"nn\">Data.Kind</span>\n<span class=\"kr\">import</span> <span class=\"nn\">Data.STRef</span>\n<span class=\"kr\">import</span> <span class=\"nn\">Data.Word</span> <span class=\"p\">(</span><span class=\"kt\">Word32</span><span class=\"p\">)</span>\n<span class=\"kr\">import</span> <span class=\"k\">qualified</span> <span class=\"nn\">Data.Vector</span> <span class=\"k\">as</span> <span class=\"n\">V</span>\n<span class=\"kr\">import</span> <span class=\"k\">qualified</span> <span class=\"nn\">Data.Vector.Mutable</span> <span class=\"k\">as</span> <span class=\"n\">VM</span>\n<span class=\"kr\">import</span> <span class=\"k\">qualified</span> <span class=\"nn\">Data.Vector.Storable</span> <span class=\"k\">as</span> <span class=\"n\">VS</span>\n<span class=\"kr\">import</span> <span class=\"k\">qualified</span> <span class=\"nn\">Data.Vector.Storable.Mutable</span> <span class=\"k\">as</span> <span class=\"n\">VSM</span>\n<span class=\"kr\">import</span> <span class=\"k\">qualified</span> <span class=\"nn\">Data.Vector.Unboxed</span> <span class=\"k\">as</span> <span class=\"n\">VU</span>\n<span class=\"kr\">import</span> <span class=\"k\">qualified</span> <span class=\"nn\">Data.Vector.Unboxed.Mutable</span> <span class=\"k\">as</span> <span class=\"n\">VUM</span>\n<span class=\"kr\">import</span> <span class=\"nn\">GHC.Generics</span>\n<span class=\"c1\">--import qualified System.Random.MWC as MWC</span>\n<span class=\"kr\">import</span> <span class=\"nn\">Unsafe.Coerce</span> <span class=\"p\">(</span><span class=\"nf\">unsafeCoerce</span><span class=\"p\">)</span>\n<span class=\"kr\">import</span> <span class=\"nn\">Data.Proxy</span>\n\n<span class=\"c1\">--------------------------------------------------------------------------------</span>\n\n<span class=\"kr\">class</span> <span class=\"kt\">MutableNew0</span> <span class=\"p\">(</span><span class=\"n\">f</span> <span class=\"ow\">::</span> <span class=\"kt\">Type</span> <span class=\"ow\">-&gt;</span> <span class=\"kt\">Type</span><span class=\"p\">)</span> <span class=\"kr\">where</span>\n  <span class=\"kr\">type</span> <span class=\"kt\">Snapshot0</span> <span class=\"n\">f</span> <span class=\"ow\">::</span> <span class=\"kt\">Type</span>\n  <span class=\"n\">freeze0</span> <span class=\"ow\">::</span> <span class=\"n\">f</span> <span class=\"n\">s</span> <span class=\"ow\">-&gt;</span> <span class=\"kt\">ST</span> <span class=\"n\">s</span> <span class=\"p\">(</span><span class=\"kt\">Snapshot0</span> <span class=\"n\">f</span><span class=\"p\">)</span>\n  <span class=\"n\">thaw0</span> <span class=\"ow\">::</span> <span class=\"kt\">Snapshot0</span> <span class=\"n\">f</span> <span class=\"ow\">-&gt;</span> <span class=\"kt\">ST</span> <span class=\"n\">s</span> <span class=\"p\">(</span><span class=\"n\">f</span> <span class=\"n\">s</span><span class=\"p\">)</span>\n  <span class=\"n\">copy0</span> <span class=\"ow\">::</span> <span class=\"n\">f</span> <span class=\"n\">s</span> <span class=\"ow\">-&gt;</span> <span class=\"n\">f</span> <span class=\"n\">s</span> <span class=\"ow\">-&gt;</span> <span class=\"kt\">ST</span> <span class=\"n\">s</span> <span class=\"nb\">()</span>\n\n<span class=\"c1\">--default copy0 :: (Generic (f s), GMutableNew0 s (Rep (f s)))</span>\n<span class=\"c1\">--              =&gt; f s -&gt; f s -&gt; ST s ()</span>\n<span class=\"c1\">--copy0 target source = gCopy (from target) (from source)</span>\n<span class=\"c1\">--{-# INLINE copy0 #-}</span>\n\n\n<span class=\"kr\">class</span> <span class=\"kt\">MutableNew1</span> <span class=\"p\">(</span><span class=\"n\">f</span> <span class=\"ow\">::</span> <span class=\"kt\">Type</span> <span class=\"ow\">-&gt;</span> <span class=\"kt\">Type</span> <span class=\"ow\">-&gt;</span> <span class=\"kt\">Type</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"n\">a</span> <span class=\"ow\">::</span> <span class=\"kt\">Type</span><span class=\"p\">)</span> <span class=\"kr\">where</span>\n  <span class=\"kr\">type</span> <span class=\"kt\">Snapshot1</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"ow\">::</span> <span class=\"kt\">Type</span>\n  <span class=\"n\">freeze1</span> <span class=\"ow\">::</span> <span class=\"n\">f</span> <span class=\"n\">s</span> <span class=\"n\">a</span> <span class=\"ow\">-&gt;</span> <span class=\"kt\">ST</span> <span class=\"n\">s</span> <span class=\"p\">(</span><span class=\"kt\">Snapshot1</span> <span class=\"n\">f</span> <span class=\"n\">a</span><span class=\"p\">)</span>\n  <span class=\"n\">thaw1</span> <span class=\"ow\">::</span> <span class=\"kt\">Snapshot1</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"ow\">-&gt;</span> <span class=\"kt\">ST</span> <span class=\"n\">s</span> <span class=\"p\">(</span><span class=\"n\">f</span> <span class=\"n\">s</span> <span class=\"n\">a</span><span class=\"p\">)</span>\n  <span class=\"n\">copy1</span> <span class=\"ow\">::</span> <span class=\"n\">f</span> <span class=\"n\">s</span> <span class=\"n\">a</span> <span class=\"ow\">-&gt;</span> <span class=\"n\">f</span> <span class=\"n\">s</span> <span class=\"n\">a</span> <span class=\"ow\">-&gt;</span> <span class=\"kt\">ST</span> <span class=\"n\">s</span> <span class=\"nb\">()</span>\n\n<span class=\"c1\">--------------------------------------------------------------------------------</span>\n<span class=\"c1\">-- MutableNew0 instances</span>\n\n<span class=\"c1\">--instance MutableNew0 MWC.Gen where</span>\n<span class=\"c1\">--  type Snapshot0 MWC.Gen = VU.Vector Word32</span>\n<span class=\"c1\">--  freeze0 = fmap MWC.fromSeed . MWC.save</span>\n<span class=\"c1\">--  thaw0 = MWC.restore . MWC.toSeed</span>\n<span class=\"c1\">--  copy0 target source =</span>\n<span class=\"c1\">--    -- Warning: Unsafe! We depend on the internal representation of `MWC.Gen`</span>\n<span class=\"c1\">--    VUM.copy @_ @Word32 (unsafeCoerce target) (unsafeCoerce source)</span>\n\n<span class=\"c1\">--------------------------------------------------------------------------------</span>\n<span class=\"c1\">-- MutableNew1 instances</span>\n\n<span class=\"kr\">instance</span> <span class=\"kt\">MutableNew1</span> <span class=\"kt\">STRef</span> <span class=\"n\">a</span> <span class=\"kr\">where</span>\n  <span class=\"kr\">type</span> <span class=\"kt\">Snapshot1</span> <span class=\"kt\">STRef</span> <span class=\"n\">a</span> <span class=\"ow\">=</span> <span class=\"n\">a</span>\n  <span class=\"n\">freeze1</span> <span class=\"ow\">=</span> <span class=\"n\">readSTRef</span>\n  <span class=\"n\">thaw1</span> <span class=\"ow\">=</span> <span class=\"n\">newSTRef</span>\n  <span class=\"n\">copy1</span> <span class=\"n\">target</span> <span class=\"n\">source</span> <span class=\"ow\">=</span> <span class=\"n\">readSTRef</span> <span class=\"n\">source</span> <span class=\"o\">&gt;&gt;=</span> <span class=\"n\">writeSTRef</span> <span class=\"n\">target</span>\n\n<span class=\"kr\">instance</span> <span class=\"kt\">MutableNew1</span> <span class=\"kt\">VM</span><span class=\"o\">.</span><span class=\"kt\">MVector</span> <span class=\"n\">a</span> <span class=\"kr\">where</span>\n  <span class=\"kr\">type</span> <span class=\"kt\">Snapshot1</span> <span class=\"kt\">VM</span><span class=\"o\">.</span><span class=\"kt\">MVector</span> <span class=\"n\">a</span> <span class=\"ow\">=</span> <span class=\"kt\">V</span><span class=\"o\">.</span><span class=\"kt\">Vector</span> <span class=\"n\">a</span>\n  <span class=\"n\">freeze1</span> <span class=\"ow\">=</span> <span class=\"kt\">V</span><span class=\"o\">.</span><span class=\"n\">freeze</span>\n  <span class=\"n\">thaw1</span> <span class=\"ow\">=</span> <span class=\"kt\">V</span><span class=\"o\">.</span><span class=\"n\">thaw</span>\n  <span class=\"n\">copy1</span> <span class=\"ow\">=</span> <span class=\"kt\">VM</span><span class=\"o\">.</span><span class=\"n\">copy</span>\n\n<span class=\"kr\">instance</span> <span class=\"kt\">VSM</span><span class=\"o\">.</span><span class=\"kt\">Storable</span> <span class=\"n\">a</span> <span class=\"ow\">=&gt;</span> <span class=\"kt\">MutableNew1</span> <span class=\"kt\">VSM</span><span class=\"o\">.</span><span class=\"kt\">MVector</span> <span class=\"n\">a</span> <span class=\"kr\">where</span>\n  <span class=\"kr\">type</span> <span class=\"kt\">Snapshot1</span> <span class=\"kt\">VSM</span><span class=\"o\">.</span><span class=\"kt\">MVector</span> <span class=\"n\">a</span> <span class=\"ow\">=</span> <span class=\"kt\">VS</span><span class=\"o\">.</span><span class=\"kt\">Vector</span> <span class=\"n\">a</span>\n  <span class=\"n\">freeze1</span> <span class=\"ow\">=</span> <span class=\"kt\">VS</span><span class=\"o\">.</span><span class=\"n\">freeze</span>\n  <span class=\"n\">thaw1</span> <span class=\"ow\">=</span> <span class=\"kt\">VS</span><span class=\"o\">.</span><span class=\"n\">thaw</span>\n  <span class=\"n\">copy1</span> <span class=\"ow\">=</span> <span class=\"kt\">VSM</span><span class=\"o\">.</span><span class=\"n\">copy</span>\n\n<span class=\"c1\">--------------------------------------------------------------------------------</span>\n<span class=\"c1\">-- Deriving MutableNew0 instances</span>\n\n<span class=\"c1\">-- A kind and some types</span>\n<span class=\"kr\">data</span> <span class=\"kt\">HasClass</span> <span class=\"ow\">=</span> <span class=\"kt\">HasMutableNew0</span> <span class=\"o\">|</span> <span class=\"kt\">HasMutableNew1</span>\n<span class=\"c1\">-- A function from a constraint to a type</span>\n<span class=\"kr\">type</span> <span class=\"kr\">family</span> <span class=\"kt\">ChooseInstance</span> <span class=\"p\">(</span><span class=\"n\">f</span> <span class=\"ow\">::</span> <span class=\"kt\">Constraint</span><span class=\"p\">)</span> <span class=\"ow\">::</span> <span class=\"kt\">HasClass</span> <span class=\"kr\">where</span>\n    <span class=\"kt\">ChooseInstance</span> <span class=\"p\">(</span><span class=\"kt\">MutableNew0</span> <span class=\"n\">a</span><span class=\"p\">)</span> <span class=\"ow\">=</span> <span class=\"kt\">HasMutableNew0</span>\n    <span class=\"kt\">ChooseInstance</span> <span class=\"p\">(</span><span class=\"kt\">MutableNew1</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"p\">)</span> <span class=\"ow\">=</span> <span class=\"kt\">HasMutableNew1</span>\n\n<span class=\"kr\">class</span> <span class=\"kt\">GMutableNew0</span> <span class=\"p\">(</span><span class=\"n\">disambiguate</span> <span class=\"ow\">::</span> <span class=\"kt\">HasClass</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"n\">s</span> <span class=\"ow\">::</span> <span class=\"kt\">Type</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"n\">f</span> <span class=\"ow\">::</span> <span class=\"kt\">Type</span> <span class=\"ow\">-&gt;</span> <span class=\"kt\">Type</span><span class=\"p\">)</span> <span class=\"kr\">where</span>\n  <span class=\"n\">gCopy</span> <span class=\"ow\">::</span> <span class=\"kt\">Proxy</span> <span class=\"n\">disambiguate</span> <span class=\"ow\">-&gt;</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"ow\">-&gt;</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"ow\">-&gt;</span> <span class=\"kt\">ST</span> <span class=\"n\">s</span> <span class=\"nb\">()</span>\n\n<span class=\"kr\">instance</span> <span class=\"kt\">MutableNew0</span> <span class=\"n\">f</span> <span class=\"ow\">=&gt;</span> <span class=\"kt\">GMutableNew0</span> <span class=\"kt\">HasMutableNew0</span> <span class=\"n\">s</span> <span class=\"p\">(</span><span class=\"kt\">K1</span> <span class=\"n\">i</span> <span class=\"p\">(</span><span class=\"n\">f</span> <span class=\"n\">s</span><span class=\"p\">))</span> <span class=\"kr\">where</span>\n  <span class=\"n\">gCopy</span> <span class=\"kr\">_</span> <span class=\"p\">(</span><span class=\"kt\">K1</span> <span class=\"n\">x</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"kt\">K1</span> <span class=\"n\">y</span><span class=\"p\">)</span> <span class=\"ow\">=</span> <span class=\"n\">copy0</span> <span class=\"n\">x</span> <span class=\"n\">y</span>\n  <span class=\"cm\">{-# INLINE gCopy #-}</span>\n\n<span class=\"kr\">instance</span> <span class=\"kt\">MutableNew1</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"ow\">=&gt;</span> <span class=\"kt\">GMutableNew0</span> <span class=\"kt\">HasMutableNew1</span> <span class=\"n\">s</span> <span class=\"p\">(</span><span class=\"kt\">K1</span> <span class=\"n\">i</span> <span class=\"p\">(</span><span class=\"n\">f</span> <span class=\"n\">s</span> <span class=\"n\">a</span><span class=\"p\">))</span> <span class=\"kr\">where</span>\n  <span class=\"n\">gCopy</span> <span class=\"kr\">_</span> <span class=\"p\">(</span><span class=\"kt\">K1</span> <span class=\"n\">x</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"kt\">K1</span> <span class=\"n\">y</span><span class=\"p\">)</span> <span class=\"ow\">=</span> <span class=\"n\">copy1</span> <span class=\"n\">x</span> <span class=\"n\">y</span>\n  <span class=\"cm\">{-# INLINE gCopy #-}</span>\n\n\n<span class=\"kr\">instance</span> <span class=\"kt\">GMutableNew0</span> <span class=\"n\">ignoreme</span> <span class=\"n\">s</span> <span class=\"kt\">U1</span> <span class=\"kr\">where</span>\n  <span class=\"n\">gCopy</span> <span class=\"kr\">_</span> <span class=\"kr\">_</span> <span class=\"kr\">_</span> <span class=\"ow\">=</span> <span class=\"n\">pure</span> <span class=\"nb\">()</span>\n  <span class=\"cm\">{-# INLINE gCopy #-}</span>\n\n<span class=\"kr\">instance</span> <span class=\"kt\">GMutableNew0</span> <span class=\"n\">ignoreme</span> <span class=\"n\">s</span> <span class=\"n\">f</span> <span class=\"ow\">=&gt;</span> <span class=\"kt\">GMutableNew0</span> <span class=\"n\">ignoreme</span> <span class=\"n\">s</span> <span class=\"p\">(</span><span class=\"kt\">M1</span> <span class=\"n\">i</span> <span class=\"n\">c</span> <span class=\"n\">f</span><span class=\"p\">)</span> <span class=\"kr\">where</span>\n  <span class=\"n\">gCopy</span> <span class=\"n\">p</span> <span class=\"p\">(</span><span class=\"kt\">M1</span> <span class=\"n\">x</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"kt\">M1</span> <span class=\"n\">y</span><span class=\"p\">)</span> <span class=\"ow\">=</span> <span class=\"n\">gCopy</span> <span class=\"n\">p</span> <span class=\"n\">x</span> <span class=\"n\">y</span>\n  <span class=\"cm\">{-# INLINE gCopy #-}</span>\n\n<span class=\"kr\">instance</span> <span class=\"p\">(</span><span class=\"kt\">GMutableNew0</span> <span class=\"n\">ignoreme</span> <span class=\"n\">s</span> <span class=\"n\">f</span><span class=\"p\">,</span> <span class=\"kt\">GMutableNew0</span> <span class=\"n\">ignoreme</span> <span class=\"n\">s</span> <span class=\"n\">g</span><span class=\"p\">)</span> <span class=\"ow\">=&gt;</span> <span class=\"kt\">GMutableNew0</span> <span class=\"n\">ignoreme</span> <span class=\"n\">s</span> <span class=\"p\">(</span><span class=\"n\">f</span> <span class=\"kt\">:*:</span> <span class=\"n\">g</span><span class=\"p\">)</span> <span class=\"kr\">where</span>\n  <span class=\"n\">gCopy</span> <span class=\"n\">p</span> <span class=\"p\">(</span><span class=\"n\">x1</span> <span class=\"kt\">:*:</span> <span class=\"n\">x2</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"n\">y1</span> <span class=\"kt\">:*:</span> <span class=\"n\">y2</span><span class=\"p\">)</span> <span class=\"ow\">=</span> <span class=\"n\">gCopy</span> <span class=\"n\">p</span> <span class=\"n\">x1</span> <span class=\"n\">y1</span> <span class=\"o\">&gt;&gt;</span> <span class=\"n\">gCopy</span> <span class=\"n\">p</span> <span class=\"n\">x2</span> <span class=\"n\">y2</span>\n  <span class=\"cm\">{-# INLINE gCopy #-}</span>\n\n<span class=\"c1\">-- Note: We cannot define a `GMutableNew0` instance for `:+:` unless</span>\n<span class=\"c1\">-- `GMutableNew0` knows how to create mutable references.</span>\n</code></pre></div>\n\n\n</div></div>\n\n<p>I'm not really sure how to <em>use</em> your class, so I'm not sure whether this is actually a helpful change.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 208467890,
            "is_me_message": false,
            "last_edit_timestamp": 1598762750,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "PLRedmond@gmail.com",
            "sender_full_name": "Patrick Redmond (W'14)",
            "sender_id": 5014,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Overlapping instances",
            "submessages": [],
            "timestamp": 1598761660,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/612c7c2a108d7850c62d1d2293a481aa42855408?x=x&version=2",
            "client": "website",
            "content": "<p>The proof of whether this is useful is in the use of the class.. We need to be sure the instance search works, and finds the correct instances..</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 208467929,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "PLRedmond@gmail.com",
            "sender_full_name": "Patrick Redmond (W'14)",
            "sender_id": 5014,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Overlapping instances",
            "submessages": [],
            "timestamp": 1598761699,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/612c7c2a108d7850c62d1d2293a481aa42855408?x=x&version=2",
            "client": "website",
            "content": "<p>So right now, I haven't actually called the <code>ChooseInstance</code> type family anywhere to do the work of disambiguating, because I don't really know how your class is used.. I'll see about uncommenting the <code>gCopy</code> callsite, but that's about all I'd know how to do here..</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 208467939,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "PLRedmond@gmail.com",
            "sender_full_name": "Patrick Redmond (W'14)",
            "sender_id": 5014,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Overlapping instances",
            "submessages": [],
            "timestamp": 1598761761,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/612c7c2a108d7850c62d1d2293a481aa42855408?x=x&version=2",
            "client": "website",
            "content": "<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n\n<p>MungedMutableNew2.hs</p>\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n\n<div class=\"codehilite\"><pre><span></span><code><span class=\"cm\">{-# LANGUAGE DefaultSignatures #-}</span>\n<span class=\"cm\">{-# LANGUAGE FlexibleContexts #-}</span>\n<span class=\"cm\">{-# LANGUAGE FlexibleInstances #-}</span>\n<span class=\"cm\">{-# LANGUAGE MultiParamTypeClasses #-}</span>\n<span class=\"cm\">{-# LANGUAGE TypeApplications #-}</span>\n<span class=\"cm\">{-# LANGUAGE TypeFamilies #-}</span>\n<span class=\"cm\">{-# LANGUAGE TypeOperators #-}</span>\n<span class=\"cm\">{-# LANGUAGE DataKinds #-}</span>\n<span class=\"cm\">{-# LANGUAGE PolyKinds #-}</span>\n<span class=\"cm\">{-# LANGUAGE ScopedTypeVariables #-}</span>\n\n<span class=\"kr\">module</span> <span class=\"nn\">MutableNew</span>\n  <span class=\"p\">(</span> <span class=\"kt\">MutableNew0</span> <span class=\"p\">(</span><span class=\"o\">..</span><span class=\"p\">)</span>\n  <span class=\"p\">,</span> <span class=\"kt\">MutableNew1</span> <span class=\"p\">(</span><span class=\"o\">..</span><span class=\"p\">)</span>\n  <span class=\"p\">)</span> <span class=\"kr\">where</span>\n\n<span class=\"c1\">-- I want to do something similar to Data.Mutable</span>\n<span class=\"c1\">-- (http://hackage.haskell.org/package/mutable), but in the opposite direction:</span>\n<span class=\"c1\">-- instead of starting with immutable data types and deriving mutable versions,</span>\n<span class=\"c1\">-- I want to start with mutable data types and derive immutable versions.</span>\n\n<span class=\"kr\">import</span> <span class=\"nn\">Control.Monad.ST</span>\n<span class=\"kr\">import</span> <span class=\"nn\">Data.Kind</span>\n<span class=\"kr\">import</span> <span class=\"nn\">Data.STRef</span>\n<span class=\"kr\">import</span> <span class=\"nn\">Data.Word</span> <span class=\"p\">(</span><span class=\"kt\">Word32</span><span class=\"p\">)</span>\n<span class=\"kr\">import</span> <span class=\"k\">qualified</span> <span class=\"nn\">Data.Vector</span> <span class=\"k\">as</span> <span class=\"n\">V</span>\n<span class=\"kr\">import</span> <span class=\"k\">qualified</span> <span class=\"nn\">Data.Vector.Mutable</span> <span class=\"k\">as</span> <span class=\"n\">VM</span>\n<span class=\"kr\">import</span> <span class=\"k\">qualified</span> <span class=\"nn\">Data.Vector.Storable</span> <span class=\"k\">as</span> <span class=\"n\">VS</span>\n<span class=\"kr\">import</span> <span class=\"k\">qualified</span> <span class=\"nn\">Data.Vector.Storable.Mutable</span> <span class=\"k\">as</span> <span class=\"n\">VSM</span>\n<span class=\"kr\">import</span> <span class=\"k\">qualified</span> <span class=\"nn\">Data.Vector.Unboxed</span> <span class=\"k\">as</span> <span class=\"n\">VU</span>\n<span class=\"kr\">import</span> <span class=\"k\">qualified</span> <span class=\"nn\">Data.Vector.Unboxed.Mutable</span> <span class=\"k\">as</span> <span class=\"n\">VUM</span>\n<span class=\"kr\">import</span> <span class=\"nn\">GHC.Generics</span>\n<span class=\"c1\">--import qualified System.Random.MWC as MWC</span>\n<span class=\"kr\">import</span> <span class=\"nn\">Unsafe.Coerce</span> <span class=\"p\">(</span><span class=\"nf\">unsafeCoerce</span><span class=\"p\">)</span>\n<span class=\"kr\">import</span> <span class=\"nn\">Data.Proxy</span>\n\n<span class=\"c1\">--------------------------------------------------------------------------------</span>\n\n<span class=\"kr\">class</span> <span class=\"kt\">MutableNew0</span> <span class=\"p\">(</span><span class=\"n\">f</span> <span class=\"ow\">::</span> <span class=\"kt\">Type</span> <span class=\"ow\">-&gt;</span> <span class=\"kt\">Type</span><span class=\"p\">)</span> <span class=\"kr\">where</span>\n  <span class=\"kr\">type</span> <span class=\"kt\">Snapshot0</span> <span class=\"n\">f</span> <span class=\"ow\">::</span> <span class=\"kt\">Type</span>\n  <span class=\"n\">freeze0</span> <span class=\"ow\">::</span> <span class=\"n\">f</span> <span class=\"n\">s</span> <span class=\"ow\">-&gt;</span> <span class=\"kt\">ST</span> <span class=\"n\">s</span> <span class=\"p\">(</span><span class=\"kt\">Snapshot0</span> <span class=\"n\">f</span><span class=\"p\">)</span>\n  <span class=\"n\">thaw0</span> <span class=\"ow\">::</span> <span class=\"kt\">Snapshot0</span> <span class=\"n\">f</span> <span class=\"ow\">-&gt;</span> <span class=\"kt\">ST</span> <span class=\"n\">s</span> <span class=\"p\">(</span><span class=\"n\">f</span> <span class=\"n\">s</span><span class=\"p\">)</span>\n  <span class=\"n\">copy0</span> <span class=\"ow\">::</span> <span class=\"n\">f</span> <span class=\"n\">s</span> <span class=\"ow\">-&gt;</span> <span class=\"n\">f</span> <span class=\"n\">s</span> <span class=\"ow\">-&gt;</span> <span class=\"kt\">ST</span> <span class=\"n\">s</span> <span class=\"nb\">()</span>\n\n  <span class=\"kr\">default</span> <span class=\"n\">copy0</span> <span class=\"ow\">::</span> <span class=\"p\">(</span><span class=\"kt\">Generic</span> <span class=\"p\">(</span><span class=\"n\">f</span> <span class=\"n\">s</span><span class=\"p\">),</span> <span class=\"kt\">GMutableNew0</span> <span class=\"kt\">HasMutableNew0</span> <span class=\"n\">s</span> <span class=\"p\">(</span><span class=\"kt\">Rep</span> <span class=\"p\">(</span><span class=\"n\">f</span> <span class=\"n\">s</span><span class=\"p\">)))</span>\n                <span class=\"ow\">=&gt;</span> <span class=\"n\">f</span> <span class=\"n\">s</span> <span class=\"ow\">-&gt;</span> <span class=\"n\">f</span> <span class=\"n\">s</span> <span class=\"ow\">-&gt;</span> <span class=\"kt\">ST</span> <span class=\"n\">s</span> <span class=\"nb\">()</span>\n  <span class=\"n\">copy0</span> <span class=\"n\">target</span> <span class=\"n\">source</span> <span class=\"ow\">=</span> <span class=\"n\">gCopy</span> <span class=\"p\">(</span><span class=\"kt\">Proxy</span> <span class=\"ow\">::</span> <span class=\"kt\">Proxy</span> <span class=\"kt\">HasMutableNew0</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"n\">from</span> <span class=\"n\">target</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"n\">from</span> <span class=\"n\">source</span><span class=\"p\">)</span>\n  <span class=\"cm\">{-# INLINE copy0 #-}</span>\n\n\n<span class=\"kr\">class</span> <span class=\"kt\">MutableNew1</span> <span class=\"p\">(</span><span class=\"n\">f</span> <span class=\"ow\">::</span> <span class=\"kt\">Type</span> <span class=\"ow\">-&gt;</span> <span class=\"kt\">Type</span> <span class=\"ow\">-&gt;</span> <span class=\"kt\">Type</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"n\">a</span> <span class=\"ow\">::</span> <span class=\"kt\">Type</span><span class=\"p\">)</span> <span class=\"kr\">where</span>\n  <span class=\"kr\">type</span> <span class=\"kt\">Snapshot1</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"ow\">::</span> <span class=\"kt\">Type</span>\n  <span class=\"n\">freeze1</span> <span class=\"ow\">::</span> <span class=\"n\">f</span> <span class=\"n\">s</span> <span class=\"n\">a</span> <span class=\"ow\">-&gt;</span> <span class=\"kt\">ST</span> <span class=\"n\">s</span> <span class=\"p\">(</span><span class=\"kt\">Snapshot1</span> <span class=\"n\">f</span> <span class=\"n\">a</span><span class=\"p\">)</span>\n  <span class=\"n\">thaw1</span> <span class=\"ow\">::</span> <span class=\"kt\">Snapshot1</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"ow\">-&gt;</span> <span class=\"kt\">ST</span> <span class=\"n\">s</span> <span class=\"p\">(</span><span class=\"n\">f</span> <span class=\"n\">s</span> <span class=\"n\">a</span><span class=\"p\">)</span>\n  <span class=\"n\">copy1</span> <span class=\"ow\">::</span> <span class=\"n\">f</span> <span class=\"n\">s</span> <span class=\"n\">a</span> <span class=\"ow\">-&gt;</span> <span class=\"n\">f</span> <span class=\"n\">s</span> <span class=\"n\">a</span> <span class=\"ow\">-&gt;</span> <span class=\"kt\">ST</span> <span class=\"n\">s</span> <span class=\"nb\">()</span>\n\n<span class=\"c1\">--------------------------------------------------------------------------------</span>\n<span class=\"c1\">-- MutableNew0 instances</span>\n\n<span class=\"c1\">--instance MutableNew0 MWC.Gen where</span>\n<span class=\"c1\">--  type Snapshot0 MWC.Gen = VU.Vector Word32</span>\n<span class=\"c1\">--  freeze0 = fmap MWC.fromSeed . MWC.save</span>\n<span class=\"c1\">--  thaw0 = MWC.restore . MWC.toSeed</span>\n<span class=\"c1\">--  copy0 target source =</span>\n<span class=\"c1\">--    -- Warning: Unsafe! We depend on the internal representation of `MWC.Gen`</span>\n<span class=\"c1\">--    VUM.copy @_ @Word32 (unsafeCoerce target) (unsafeCoerce source)</span>\n\n<span class=\"c1\">--------------------------------------------------------------------------------</span>\n<span class=\"c1\">-- MutableNew1 instances</span>\n\n<span class=\"kr\">instance</span> <span class=\"kt\">MutableNew1</span> <span class=\"kt\">STRef</span> <span class=\"n\">a</span> <span class=\"kr\">where</span>\n  <span class=\"kr\">type</span> <span class=\"kt\">Snapshot1</span> <span class=\"kt\">STRef</span> <span class=\"n\">a</span> <span class=\"ow\">=</span> <span class=\"n\">a</span>\n  <span class=\"n\">freeze1</span> <span class=\"ow\">=</span> <span class=\"n\">readSTRef</span>\n  <span class=\"n\">thaw1</span> <span class=\"ow\">=</span> <span class=\"n\">newSTRef</span>\n  <span class=\"n\">copy1</span> <span class=\"n\">target</span> <span class=\"n\">source</span> <span class=\"ow\">=</span> <span class=\"n\">readSTRef</span> <span class=\"n\">source</span> <span class=\"o\">&gt;&gt;=</span> <span class=\"n\">writeSTRef</span> <span class=\"n\">target</span>\n\n<span class=\"kr\">instance</span> <span class=\"kt\">MutableNew1</span> <span class=\"kt\">VM</span><span class=\"o\">.</span><span class=\"kt\">MVector</span> <span class=\"n\">a</span> <span class=\"kr\">where</span>\n  <span class=\"kr\">type</span> <span class=\"kt\">Snapshot1</span> <span class=\"kt\">VM</span><span class=\"o\">.</span><span class=\"kt\">MVector</span> <span class=\"n\">a</span> <span class=\"ow\">=</span> <span class=\"kt\">V</span><span class=\"o\">.</span><span class=\"kt\">Vector</span> <span class=\"n\">a</span>\n  <span class=\"n\">freeze1</span> <span class=\"ow\">=</span> <span class=\"kt\">V</span><span class=\"o\">.</span><span class=\"n\">freeze</span>\n  <span class=\"n\">thaw1</span> <span class=\"ow\">=</span> <span class=\"kt\">V</span><span class=\"o\">.</span><span class=\"n\">thaw</span>\n  <span class=\"n\">copy1</span> <span class=\"ow\">=</span> <span class=\"kt\">VM</span><span class=\"o\">.</span><span class=\"n\">copy</span>\n\n<span class=\"kr\">instance</span> <span class=\"kt\">VSM</span><span class=\"o\">.</span><span class=\"kt\">Storable</span> <span class=\"n\">a</span> <span class=\"ow\">=&gt;</span> <span class=\"kt\">MutableNew1</span> <span class=\"kt\">VSM</span><span class=\"o\">.</span><span class=\"kt\">MVector</span> <span class=\"n\">a</span> <span class=\"kr\">where</span>\n  <span class=\"kr\">type</span> <span class=\"kt\">Snapshot1</span> <span class=\"kt\">VSM</span><span class=\"o\">.</span><span class=\"kt\">MVector</span> <span class=\"n\">a</span> <span class=\"ow\">=</span> <span class=\"kt\">VS</span><span class=\"o\">.</span><span class=\"kt\">Vector</span> <span class=\"n\">a</span>\n  <span class=\"n\">freeze1</span> <span class=\"ow\">=</span> <span class=\"kt\">VS</span><span class=\"o\">.</span><span class=\"n\">freeze</span>\n  <span class=\"n\">thaw1</span> <span class=\"ow\">=</span> <span class=\"kt\">VS</span><span class=\"o\">.</span><span class=\"n\">thaw</span>\n  <span class=\"n\">copy1</span> <span class=\"ow\">=</span> <span class=\"kt\">VSM</span><span class=\"o\">.</span><span class=\"n\">copy</span>\n\n<span class=\"c1\">--------------------------------------------------------------------------------</span>\n<span class=\"c1\">-- Deriving MutableNew0 instances</span>\n\n<span class=\"c1\">-- A kind and some types</span>\n<span class=\"kr\">data</span> <span class=\"kt\">HasClass</span> <span class=\"ow\">=</span> <span class=\"kt\">HasMutableNew0</span> <span class=\"o\">|</span> <span class=\"kt\">HasMutableNew1</span>\n\n<span class=\"kr\">class</span> <span class=\"kt\">GMutableNew0</span> <span class=\"p\">(</span><span class=\"n\">disambiguate</span> <span class=\"ow\">::</span> <span class=\"kt\">HasClass</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"n\">s</span> <span class=\"ow\">::</span> <span class=\"kt\">Type</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"n\">f</span> <span class=\"ow\">::</span> <span class=\"kt\">Type</span> <span class=\"ow\">-&gt;</span> <span class=\"kt\">Type</span><span class=\"p\">)</span> <span class=\"kr\">where</span>\n  <span class=\"n\">gCopy</span> <span class=\"ow\">::</span> <span class=\"kt\">Proxy</span> <span class=\"n\">disambiguate</span> <span class=\"ow\">-&gt;</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"ow\">-&gt;</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"ow\">-&gt;</span> <span class=\"kt\">ST</span> <span class=\"n\">s</span> <span class=\"nb\">()</span>\n\n<span class=\"kr\">instance</span> <span class=\"kt\">MutableNew0</span> <span class=\"n\">f</span> <span class=\"ow\">=&gt;</span> <span class=\"kt\">GMutableNew0</span> <span class=\"kt\">HasMutableNew0</span> <span class=\"n\">s</span> <span class=\"p\">(</span><span class=\"kt\">K1</span> <span class=\"n\">i</span> <span class=\"p\">(</span><span class=\"n\">f</span> <span class=\"n\">s</span><span class=\"p\">))</span> <span class=\"kr\">where</span>\n  <span class=\"n\">gCopy</span> <span class=\"kr\">_</span> <span class=\"p\">(</span><span class=\"kt\">K1</span> <span class=\"n\">x</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"kt\">K1</span> <span class=\"n\">y</span><span class=\"p\">)</span> <span class=\"ow\">=</span> <span class=\"n\">copy0</span> <span class=\"n\">x</span> <span class=\"n\">y</span>\n  <span class=\"cm\">{-# INLINE gCopy #-}</span>\n\n<span class=\"kr\">instance</span> <span class=\"kt\">MutableNew1</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"ow\">=&gt;</span> <span class=\"kt\">GMutableNew0</span> <span class=\"kt\">HasMutableNew1</span> <span class=\"n\">s</span> <span class=\"p\">(</span><span class=\"kt\">K1</span> <span class=\"n\">i</span> <span class=\"p\">(</span><span class=\"n\">f</span> <span class=\"n\">s</span> <span class=\"n\">a</span><span class=\"p\">))</span> <span class=\"kr\">where</span>\n  <span class=\"n\">gCopy</span> <span class=\"kr\">_</span> <span class=\"p\">(</span><span class=\"kt\">K1</span> <span class=\"n\">x</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"kt\">K1</span> <span class=\"n\">y</span><span class=\"p\">)</span> <span class=\"ow\">=</span> <span class=\"n\">copy1</span> <span class=\"n\">x</span> <span class=\"n\">y</span>\n  <span class=\"cm\">{-# INLINE gCopy #-}</span>\n\n\n<span class=\"kr\">instance</span> <span class=\"kt\">GMutableNew0</span> <span class=\"n\">ignoreme</span> <span class=\"n\">s</span> <span class=\"kt\">U1</span> <span class=\"kr\">where</span>\n  <span class=\"n\">gCopy</span> <span class=\"kr\">_</span> <span class=\"kr\">_</span> <span class=\"kr\">_</span> <span class=\"ow\">=</span> <span class=\"n\">pure</span> <span class=\"nb\">()</span>\n  <span class=\"cm\">{-# INLINE gCopy #-}</span>\n\n<span class=\"kr\">instance</span> <span class=\"kt\">GMutableNew0</span> <span class=\"n\">ignoreme</span> <span class=\"n\">s</span> <span class=\"n\">f</span> <span class=\"ow\">=&gt;</span> <span class=\"kt\">GMutableNew0</span> <span class=\"n\">ignoreme</span> <span class=\"n\">s</span> <span class=\"p\">(</span><span class=\"kt\">M1</span> <span class=\"n\">i</span> <span class=\"n\">c</span> <span class=\"n\">f</span><span class=\"p\">)</span> <span class=\"kr\">where</span>\n  <span class=\"n\">gCopy</span> <span class=\"n\">p</span> <span class=\"p\">(</span><span class=\"kt\">M1</span> <span class=\"n\">x</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"kt\">M1</span> <span class=\"n\">y</span><span class=\"p\">)</span> <span class=\"ow\">=</span> <span class=\"n\">gCopy</span> <span class=\"n\">p</span> <span class=\"n\">x</span> <span class=\"n\">y</span>\n  <span class=\"cm\">{-# INLINE gCopy #-}</span>\n\n<span class=\"kr\">instance</span> <span class=\"p\">(</span><span class=\"kt\">GMutableNew0</span> <span class=\"n\">ignoreme</span> <span class=\"n\">s</span> <span class=\"n\">f</span><span class=\"p\">,</span> <span class=\"kt\">GMutableNew0</span> <span class=\"n\">ignoreme</span> <span class=\"n\">s</span> <span class=\"n\">g</span><span class=\"p\">)</span> <span class=\"ow\">=&gt;</span> <span class=\"kt\">GMutableNew0</span> <span class=\"n\">ignoreme</span> <span class=\"n\">s</span> <span class=\"p\">(</span><span class=\"n\">f</span> <span class=\"kt\">:*:</span> <span class=\"n\">g</span><span class=\"p\">)</span> <span class=\"kr\">where</span>\n  <span class=\"n\">gCopy</span> <span class=\"n\">p</span> <span class=\"p\">(</span><span class=\"n\">x1</span> <span class=\"kt\">:*:</span> <span class=\"n\">x2</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"n\">y1</span> <span class=\"kt\">:*:</span> <span class=\"n\">y2</span><span class=\"p\">)</span> <span class=\"ow\">=</span> <span class=\"n\">gCopy</span> <span class=\"n\">p</span> <span class=\"n\">x1</span> <span class=\"n\">y1</span> <span class=\"o\">&gt;&gt;</span> <span class=\"n\">gCopy</span> <span class=\"n\">p</span> <span class=\"n\">x2</span> <span class=\"n\">y2</span>\n  <span class=\"cm\">{-# INLINE gCopy #-}</span>\n\n<span class=\"c1\">-- Note: We cannot define a `GMutableNew0` instance for `:+:` unless</span>\n<span class=\"c1\">-- `GMutableNew0` knows how to create mutable references.</span>\n</code></pre></div>\n\n\n</div></div>\n\n<p>Ok, I managed by get it to compile w/o commenting out anything super important. I ended up removing the <code>ChooseInstance</code> type family because things aren't quite that dynamic.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 208468161,
            "is_me_message": false,
            "last_edit_timestamp": 1598762734,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "PLRedmond@gmail.com",
            "sender_full_name": "Patrick Redmond (W'14)",
            "sender_id": 5014,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Overlapping instances",
            "submessages": [],
            "timestamp": 1598762221,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/612c7c2a108d7850c62d1d2293a481aa42855408?x=x&version=2",
            "client": "website",
            "content": "<p>Instead, in your class <code>MutableNew0</code>, where you define the generic implementation for <code>copy0</code> I just hardcode the disambiguating type <code>HasMutableNew0</code> in both the <code>GMutableNew0</code> constraint and also in the first argument to <code>gCopy</code> (a disambiguating value carrying the type)</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 208468220,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "PLRedmond@gmail.com",
            "sender_full_name": "Patrick Redmond (W'14)",
            "sender_id": 5014,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Overlapping instances",
            "submessages": [],
            "timestamp": 1598762316,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/612c7c2a108d7850c62d1d2293a481aa42855408?x=x&version=2",
            "client": "website",
            "content": "<p>That last paste above includes some unnecessary language extensions. Here's a diff against your original w/o those extra extensions:</p>\n<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n\n<p>diff MutableNew.hs MungedMutableNew2.1.hs</p>\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n\n<div class=\"codehilite\"><pre><span></span><code><span class=\"gd\">--- /home/mote/dl/MutableNew.hs 2020-08-29 21:38:58.485132520 -0700</span>\n<span class=\"gi\">+++ lib/MutableNew.hs   2020-08-29 21:38:50.506027813 -0700</span>\n<span class=\"gu\">@@ -5,8 +5,9 @@</span>\n {-# LANGUAGE TypeApplications #-}\n {-# LANGUAGE TypeFamilies #-}\n {-# LANGUAGE TypeOperators #-}\n<span class=\"gi\">+{-# LANGUAGE DataKinds #-}</span>\n\n<span class=\"gd\">-module Custom.MutableNew</span>\n<span class=\"gi\">+module MutableNew</span>\n   ( MutableNew0 (..)\n   , MutableNew1 (..)\n   ) where\n<span class=\"gu\">@@ -27,8 +28,9 @@</span>\n import qualified Data.Vector.Unboxed as VU\n import qualified Data.Vector.Unboxed.Mutable as VUM\n import GHC.Generics\n<span class=\"gd\">-import qualified System.Random.MWC as MWC</span>\n<span class=\"gi\">+--import qualified System.Random.MWC as MWC</span>\n import Unsafe.Coerce (unsafeCoerce)\n<span class=\"gi\">+import Data.Proxy</span>\n\n --------------------------------------------------------------------------------\n\n<span class=\"gu\">@@ -38,9 +40,9 @@</span>\n   thaw0 :: Snapshot0 f -&gt; ST s (f s)\n   copy0 :: f s -&gt; f s -&gt; ST s ()\n\n<span class=\"gd\">-  default copy0 :: (Generic (f s), GMutableNew0 s (Rep (f s)))</span>\n<span class=\"gi\">+  default copy0 :: (Generic (f s), GMutableNew0 HasMutableNew0 s (Rep (f s)))</span>\n                 =&gt; f s -&gt; f s -&gt; ST s ()\n<span class=\"gd\">-  copy0 target source = gCopy (from target) (from source)</span>\n<span class=\"gi\">+  copy0 target source = gCopy (Proxy :: Proxy HasMutableNew0) (from target) (from source)</span>\n   {-# INLINE copy0 #-}\n\n\n<span class=\"gu\">@@ -53,13 +55,13 @@</span>\n --------------------------------------------------------------------------------\n -- MutableNew0 instances\n\n<span class=\"gd\">-instance MutableNew0 MWC.Gen where</span>\n<span class=\"gd\">-  type Snapshot0 MWC.Gen = VU.Vector Word32</span>\n<span class=\"gd\">-  freeze0 = fmap MWC.fromSeed . MWC.save</span>\n<span class=\"gd\">-  thaw0 = MWC.restore . MWC.toSeed</span>\n<span class=\"gd\">-  copy0 target source =</span>\n<span class=\"gd\">-    -- Warning: Unsafe! We depend on the internal representation of `MWC.Gen`</span>\n<span class=\"gd\">-    VUM.copy @_ @Word32 (unsafeCoerce target) (unsafeCoerce source)</span>\n<span class=\"gi\">+--instance MutableNew0 MWC.Gen where</span>\n<span class=\"gi\">+--  type Snapshot0 MWC.Gen = VU.Vector Word32</span>\n<span class=\"gi\">+--  freeze0 = fmap MWC.fromSeed . MWC.save</span>\n<span class=\"gi\">+--  thaw0 = MWC.restore . MWC.toSeed</span>\n<span class=\"gi\">+--  copy0 target source =</span>\n<span class=\"gi\">+--    -- Warning: Unsafe! We depend on the internal representation of `MWC.Gen`</span>\n<span class=\"gi\">+--    VUM.copy @_ @Word32 (unsafeCoerce target) (unsafeCoerce source)</span>\n\n --------------------------------------------------------------------------------\n -- MutableNew1 instances\n<span class=\"gu\">@@ -85,28 +87,31 @@</span>\n --------------------------------------------------------------------------------\n -- Deriving MutableNew0 instances\n\n<span class=\"gi\">+-- A kind and some types</span>\n<span class=\"gi\">+data HasClass = HasMutableNew0 | HasMutableNew1</span>\n<span class=\"gi\">+</span>\n<span class=\"gd\">-class GMutableNew0 (s :: Type) (f :: Type -&gt; Type) where</span>\n<span class=\"gd\">-  gCopy :: f x -&gt; f x -&gt; ST s ()</span>\n<span class=\"gi\">+class GMutableNew0 (disambiguate :: HasClass) (s :: Type) (f :: Type -&gt; Type) where</span>\n<span class=\"gi\">+  gCopy :: Proxy disambiguate -&gt; f x -&gt; f x -&gt; ST s ()</span>\n\n<span class=\"gd\">-instance {-# INCOHERENT #-} MutableNew0 f =&gt; GMutableNew0 s (K1 i (f s)) where</span>\n<span class=\"gd\">-  gCopy (K1 x) (K1 y) = copy0 x y</span>\n<span class=\"gi\">+instance MutableNew0 f =&gt; GMutableNew0 HasMutableNew0 s (K1 i (f s)) where</span>\n<span class=\"gi\">+  gCopy _ (K1 x) (K1 y) = copy0 x y</span>\n   {-# INLINE gCopy #-}\n\n<span class=\"gd\">-instance {-# INCOHERENT #-} MutableNew1 f a =&gt; GMutableNew0 s (K1 i (f s a)) where</span>\n<span class=\"gd\">-  gCopy (K1 x) (K1 y) = copy1 x y</span>\n<span class=\"gi\">+instance MutableNew1 f a =&gt; GMutableNew0 HasMutableNew1 s (K1 i (f s a)) where</span>\n<span class=\"gi\">+  gCopy _ (K1 x) (K1 y) = copy1 x y</span>\n   {-# INLINE gCopy #-}\n\n\n<span class=\"gd\">-instance GMutableNew0 s U1 where</span>\n<span class=\"gd\">-  gCopy _ _ = pure ()</span>\n<span class=\"gi\">+instance GMutableNew0 ignoreme s U1 where</span>\n<span class=\"gi\">+  gCopy _ _ _ = pure ()</span>\n   {-# INLINE gCopy #-}\n\n<span class=\"gd\">-instance GMutableNew0 s f =&gt; GMutableNew0 s (M1 i c f) where</span>\n<span class=\"gd\">-  gCopy (M1 x) (M1 y) = gCopy x y</span>\n<span class=\"gi\">+instance GMutableNew0 ignoreme s f =&gt; GMutableNew0 ignoreme s (M1 i c f) where</span>\n<span class=\"gi\">+  gCopy p (M1 x) (M1 y) = gCopy p x y</span>\n   {-# INLINE gCopy #-}\n\n<span class=\"gd\">-instance (GMutableNew0 s f, GMutableNew0 s g) =&gt; GMutableNew0 s (f :*: g) where</span>\n<span class=\"gd\">-  gCopy (x1 :*: x2) (y1 :*: y2) = gCopy x1 y1 &gt;&gt; gCopy x2 y2</span>\n<span class=\"gi\">+instance (GMutableNew0 ignoreme s f, GMutableNew0 ignoreme s g) =&gt; GMutableNew0 ignoreme s (f :*: g) where</span>\n<span class=\"gi\">+  gCopy p (x1 :*: x2) (y1 :*: y2) = gCopy p x1 y1 &gt;&gt; gCopy p x2 y2</span>\n   {-# INLINE gCopy #-}\n\n -- Note: We cannot define a `GMutableNew0` instance for `:+:` unless\n</code></pre></div>\n\n\n</div></div>\n\n<p>[Edit: I had to hand-edit that diff because it got confused where I added the <code>HasClass</code> type. It should be mostly readable now]</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 208468303,
            "is_me_message": false,
            "last_edit_timestamp": 1598762713,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "PLRedmond@gmail.com",
            "sender_full_name": "Patrick Redmond (W'14)",
            "sender_id": 5014,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Overlapping instances",
            "submessages": [],
            "timestamp": 1598762521,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/612c7c2a108d7850c62d1d2293a481aa42855408?x=x&version=2",
            "client": "website",
            "content": "<p>Hit f5. I added syntax highlighting to the pastes above.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 208468469,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "PLRedmond@gmail.com",
            "sender_full_name": "Patrick Redmond (W'14)",
            "sender_id": 5014,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Overlapping instances",
            "submessages": [],
            "timestamp": 1598762768,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/612c7c2a108d7850c62d1d2293a481aa42855408?x=x&version=2",
            "client": "website",
            "content": "<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n\n<p>diff MutableNew MungedMutableNew2.2.hs</p>\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n\n<div class=\"codehilite\"><pre><span></span><code><span class=\"gd\">--- /home/mote/dl/MutableNew.hs 2020-08-29 21:38:58.485132520 -0700</span>\n<span class=\"gi\">+++ lib/MutableNew.hs   2020-08-29 21:48:30.640512132 -0700</span>\n<span class=\"gu\">@@ -5,8 +5,9 @@</span>\n {-# LANGUAGE TypeApplications #-}\n {-# LANGUAGE TypeFamilies #-}\n {-# LANGUAGE TypeOperators #-}\n<span class=\"gi\">+{-# LANGUAGE DataKinds #-}</span>\n\n<span class=\"gd\">-module Custom.MutableNew</span>\n<span class=\"gi\">+module MutableNew</span>\n   ( MutableNew0 (..)\n   , MutableNew1 (..)\n   ) where\n<span class=\"gu\">@@ -27,8 +28,9 @@</span>\n import qualified Data.Vector.Unboxed as VU\n import qualified Data.Vector.Unboxed.Mutable as VUM\n import GHC.Generics\n<span class=\"gd\">-import qualified System.Random.MWC as MWC</span>\n<span class=\"gi\">+--import qualified System.Random.MWC as MWC</span>\n import Unsafe.Coerce (unsafeCoerce)\n<span class=\"gi\">+import Data.Proxy</span>\n\n --------------------------------------------------------------------------------\n\n<span class=\"gu\">@@ -38,9 +40,9 @@</span>\n   thaw0 :: Snapshot0 f -&gt; ST s (f s)\n   copy0 :: f s -&gt; f s -&gt; ST s ()\n\n<span class=\"gd\">-  default copy0 :: (Generic (f s), GMutableNew0 s (Rep (f s)))</span>\n<span class=\"gi\">+  default copy0 :: (Generic (f s), GMutableNew0 HasMutableNew0 s (Rep (f s)))</span>\n                 =&gt; f s -&gt; f s -&gt; ST s ()\n<span class=\"gd\">-  copy0 target source = gCopy (from target) (from source)</span>\n<span class=\"gi\">+  copy0 target source = gCopy (Proxy :: Proxy HasMutableNew0) (from target) (from source)</span>\n   {-# INLINE copy0 #-}\n\n\n<span class=\"gu\">@@ -50,16 +52,20 @@</span>\n   thaw1 :: Snapshot1 f a -&gt; ST s (f s a)\n   copy1 :: f s a -&gt; f s a -&gt; ST s ()\n\n<span class=\"gi\">+  default copy1 :: (Generic (f s a), GMutableNew0 HasMutableNew1 s (Rep (f s a)))</span>\n<span class=\"gi\">+                =&gt; f s a -&gt; f s a -&gt; ST s ()</span>\n<span class=\"gi\">+  copy1 target source = gCopy (Proxy :: Proxy HasMutableNew1) (from target) (from source)</span>\n<span class=\"gi\">+</span>\n --------------------------------------------------------------------------------\n -- MutableNew0 instances\n\n<span class=\"gd\">-instance MutableNew0 MWC.Gen where</span>\n<span class=\"gd\">-  type Snapshot0 MWC.Gen = VU.Vector Word32</span>\n<span class=\"gd\">-  freeze0 = fmap MWC.fromSeed . MWC.save</span>\n<span class=\"gd\">-  thaw0 = MWC.restore . MWC.toSeed</span>\n<span class=\"gd\">-  copy0 target source =</span>\n<span class=\"gd\">-    -- Warning: Unsafe! We depend on the internal representation of `MWC.Gen`</span>\n<span class=\"gd\">-    VUM.copy @_ @Word32 (unsafeCoerce target) (unsafeCoerce source)</span>\n<span class=\"gi\">+--instance MutableNew0 MWC.Gen where</span>\n<span class=\"gi\">+--  type Snapshot0 MWC.Gen = VU.Vector Word32</span>\n<span class=\"gi\">+--  freeze0 = fmap MWC.fromSeed . MWC.save</span>\n<span class=\"gi\">+--  thaw0 = MWC.restore . MWC.toSeed</span>\n<span class=\"gi\">+--  copy0 target source =</span>\n<span class=\"gi\">+--    -- Warning: Unsafe! We depend on the internal representation of `MWC.Gen`</span>\n<span class=\"gi\">+--    VUM.copy @_ @Word32 (unsafeCoerce target) (unsafeCoerce source)</span>\n\n --------------------------------------------------------------------------------\n -- MutableNew1 instances\n<span class=\"gu\">@@ -85,28 +91,31 @@</span>\n --------------------------------------------------------------------------------\n -- Deriving MutableNew0 instances\n\n<span class=\"gd\">-class GMutableNew0 (s :: Type) (f :: Type -&gt; Type) where</span>\n<span class=\"gd\">-  gCopy :: f x -&gt; f x -&gt; ST s ()</span>\n<span class=\"gi\">+-- A kind and some types</span>\n<span class=\"gi\">+data HasClass = HasMutableNew0 | HasMutableNew1</span>\n<span class=\"gi\">+</span>\n<span class=\"gi\">+class GMutableNew0 (disambiguate :: HasClass) (s :: Type) (f :: Type -&gt; Type) where</span>\n<span class=\"gi\">+  gCopy :: Proxy disambiguate -&gt; f x -&gt; f x -&gt; ST s ()</span>\n\n<span class=\"gd\">-instance {-# INCOHERENT #-} MutableNew0 f =&gt; GMutableNew0 s (K1 i (f s)) where</span>\n<span class=\"gd\">-  gCopy (K1 x) (K1 y) = copy0 x y</span>\n<span class=\"gi\">+instance MutableNew0 f =&gt; GMutableNew0 HasMutableNew0 s (K1 i (f s)) where</span>\n<span class=\"gi\">+  gCopy _ (K1 x) (K1 y) = copy0 x y</span>\n   {-# INLINE gCopy #-}\n\n<span class=\"gd\">-instance {-# INCOHERENT #-} MutableNew1 f a =&gt; GMutableNew0 s (K1 i (f s a)) where</span>\n<span class=\"gd\">-  gCopy (K1 x) (K1 y) = copy1 x y</span>\n<span class=\"gi\">+instance MutableNew1 f a =&gt; GMutableNew0 HasMutableNew1 s (K1 i (f s a)) where</span>\n<span class=\"gi\">+  gCopy _ (K1 x) (K1 y) = copy1 x y</span>\n   {-# INLINE gCopy #-}\n\n\n<span class=\"gd\">-instance GMutableNew0 s U1 where</span>\n<span class=\"gd\">-  gCopy _ _ = pure ()</span>\n<span class=\"gi\">+instance GMutableNew0 ignoreme s U1 where</span>\n<span class=\"gi\">+  gCopy _ _ _ = pure ()</span>\n   {-# INLINE gCopy #-}\n\n<span class=\"gd\">-instance GMutableNew0 s f =&gt; GMutableNew0 s (M1 i c f) where</span>\n<span class=\"gd\">-  gCopy (M1 x) (M1 y) = gCopy x y</span>\n<span class=\"gi\">+instance GMutableNew0 ignoreme s f =&gt; GMutableNew0 ignoreme s (M1 i c f) where</span>\n<span class=\"gi\">+  gCopy p (M1 x) (M1 y) = gCopy p x y</span>\n   {-# INLINE gCopy #-}\n\n<span class=\"gd\">-instance (GMutableNew0 s f, GMutableNew0 s g) =&gt; GMutableNew0 s (f :*: g) where</span>\n<span class=\"gd\">-  gCopy (x1 :*: x2) (y1 :*: y2) = gCopy x1 y1 &gt;&gt; gCopy x2 y2</span>\n<span class=\"gi\">+instance (GMutableNew0 ignoreme s f, GMutableNew0 ignoreme s g) =&gt; GMutableNew0 ignoreme s (f :*: g) where</span>\n<span class=\"gi\">+  gCopy p (x1 :*: x2) (y1 :*: y2) = gCopy p x1 y1 &gt;&gt; gCopy p x2 y2</span>\n   {-# INLINE gCopy #-}\n\n -- Note: We cannot define a `GMutableNew0` instance for `:+:` unless\n</code></pre></div>\n\n\n</div></div>\n\n<p>I added a default implementation of the <code>copy1</code> method to the <code>MutableNew1</code> class. [Edit: it calls <code>gCopy</code> just like the <code>copy0</code> default implementation on the <code>MutableNew0</code> class]</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 208468534,
            "is_me_message": false,
            "last_edit_timestamp": 1598763113,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "PLRedmond@gmail.com",
            "sender_full_name": "Patrick Redmond (W'14)",
            "sender_id": 5014,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Overlapping instances",
            "submessages": [],
            "timestamp": 1598762959,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/612c7c2a108d7850c62d1d2293a481aa42855408?x=x&version=2",
            "client": "website",
            "content": "<p>I have literally no idea what this code is doing, so I don't know if this is what you wanted...</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 208468538,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "PLRedmond@gmail.com",
            "sender_full_name": "Patrick Redmond (W'14)",
            "sender_id": 5014,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Overlapping instances",
            "submessages": [],
            "timestamp": 1598762999,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/612c7c2a108d7850c62d1d2293a481aa42855408?x=x&version=2",
            "client": "website",
            "content": "<p>The only other weird comment I've found since starting this topic was less funny and more of an exasperated and slightly abelist remark.. <span aria-label=\"confused\" class=\"emoji emoji-1f615\" role=\"img\" title=\"confused\">:confused:</span> </p>\n<p>Feel free to post gems you find. <span aria-label=\"happy\" class=\"emoji emoji-1f600\" role=\"img\" title=\"happy\">:happy:</span></p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 208468637,
            "is_me_message": false,
            "last_edit_timestamp": 1598763211,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "PLRedmond@gmail.com",
            "sender_full_name": "Patrick Redmond (W'14)",
            "sender_id": 5014,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "tales from the vault",
            "submessages": [],
            "timestamp": 1598763188,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/833ed696bb4b9faaa8adbba9e8a2d9a8?d=identicon&version=1",
            "client": "website",
            "content": "<p>I was going to reply last night, but my internet wasn't working (my ISP has been having troubles for a while).</p>\n<p>I adapted your code into my program and it worked! <span aria-label=\"tada\" class=\"emoji emoji-1f389\" role=\"img\" title=\"tada\">:tada:</span> Thanks for showing me some new tricks!</p>\n<p>I want to work on this further to get it working for generic types that have both kinds of fields (right now we're saying that all the fields of a type must be either <code>HasMutableNew0</code> or <code>HasMutableNew1</code>). To do this, I thought of adding a recursive constructor to <code>HasField</code>: <code>And HasField HasField</code>. But that wouldn't be ergonomic with what we currently have because one has to manually specify a type <code>:: HasField</code> to do the deriving, while that type has to mirror a derived generic representation, which isn't so well-defined. At the moment, it looks like I really need the compiler to figure out which type to use on its own -- otherwise it might just be easier to write out the instances by hand.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 208499321,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "awchen@fastmail.com",
            "sender_full_name": "Alex Chen (he) (SP1'20)",
            "sender_id": 264095,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Overlapping instances",
            "submessages": [],
            "timestamp": 1598814172,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/8776bd2d19cdb1399c4e9589d9397d57290e5729?x=x&version=2",
            "client": "ZulipMobile",
            "content": "<p>Now I want to find the Klingon comments that were removed from GHC sources do long ago</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 208511461,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "shae.erisson@gmail.com",
            "sender_full_name": "Shae Matijs Erisson (he) (F1'19)",
            "sender_id": 221819,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "tales from the vault",
            "submessages": [],
            "timestamp": 1598834125,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/612c7c2a108d7850c62d1d2293a481aa42855408?x=x&version=2",
            "client": "website",
            "content": "<p>Could you explain in more detail about exactly which situation should do what? I think you could use a type family (a function that takes a type and returns a type) to distinguish between the cases and return an appropriate disambiguation type to pick the right class</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 208584299,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "PLRedmond@gmail.com",
            "sender_full_name": "Patrick Redmond (W'14)",
            "sender_id": 5014,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Overlapping instances",
            "submessages": [],
            "timestamp": 1598892121,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/612c7c2a108d7850c62d1d2293a481aa42855408?x=x&version=2",
            "client": "website",
            "content": "<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n\n<p>the.. what?</p>\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n\n<div class=\"message_inline_image\"><a href=\"/user_uploads/13/j4kX1vYdp-RZ3mbX6pxuA3W2/image.png\"><img src=\"/user_uploads/13/j4kX1vYdp-RZ3mbX6pxuA3W2/image.png\"></a></div></div></div>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 208584739,
            "is_me_message": false,
            "last_edit_timestamp": 1598892516,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "PLRedmond@gmail.com",
            "sender_full_name": "Patrick Redmond (W'14)",
            "sender_id": 5014,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "tales from the vault",
            "submessages": [],
            "timestamp": 1598892334,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/833ed696bb4b9faaa8adbba9e8a2d9a8?d=identicon&version=1",
            "client": "website",
            "content": "<p>Sure! I've written a more minimal and self-contained file that hopefully explains better what I'm trying to do: <a href=\"/user_uploads/13/FBTfio_JnYJ4yPVNnSmQ72sP/Mutable1.hs\">Mutable1.hs</a></p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 208603661,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "awchen@fastmail.com",
            "sender_full_name": "Alex Chen (he) (SP1'20)",
            "sender_id": 264095,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Overlapping instances",
            "submessages": [],
            "timestamp": 1598901734,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/8776bd2d19cdb1399c4e9589d9397d57290e5729?x=x&version=2",
            "client": "ZulipMobile",
            "content": "<p>Simon Marlow used to sprinkle comments in Klingon in the early days of GHC. I'll see if I can find some, they were entertaining.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 208712040,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "shae.erisson@gmail.com",
            "sender_full_name": "Shae Matijs Erisson (he) (F1'19)",
            "sender_id": 221819,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "tales from the vault",
            "submessages": [],
            "timestamp": 1598977330,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/612c7c2a108d7850c62d1d2293a481aa42855408?x=x&version=2",
            "client": "website",
            "content": "<p>I'm not sure I understand the new example.. Also I'm not sure I'll have time this week. I'll come back to this!</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 208763046,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "PLRedmond@gmail.com",
            "sender_full_name": "Patrick Redmond (W'14)",
            "sender_id": 5014,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Overlapping instances",
            "submessages": [],
            "timestamp": 1599003946,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/833ed696bb4b9faaa8adbba9e8a2d9a8?d=identicon&version=1",
            "client": "website",
            "content": "<p>Ah, sorry about that, maybe I could explain better in a conversation. And no worries, you've already given me a lot of help!</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 208846480,
            "is_me_message": false,
            "last_edit_timestamp": 1599092655,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "awchen@fastmail.com",
            "sender_full_name": "Alex Chen (he) (SP1'20)",
            "sender_id": 264095,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Overlapping instances",
            "submessages": [],
            "timestamp": 1599062106,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/612c7c2a108d7850c62d1d2293a481aa42855408?x=x&version=2",
            "client": "website",
            "content": "<p>If I have a data definition like so</p>\n<div class=\"codehilite\"><pre><span></span><code>data Foo = Bar | Baz\n</code></pre></div>\n\n\n<p>Would you describe <code>Foo</code> as a \"type constructor\"?<br>\nWould you describe <code>Bar</code> and <code>Baz</code> as \"value constructors\"?<br>\nWould you describe <code>Bar</code> and <code>Baz</code> as \"<code>Foo</code> value constructors\"?</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 209048041,
            "is_me_message": false,
            "last_edit_timestamp": 1599184445,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "PLRedmond@gmail.com",
            "sender_full_name": "Patrick Redmond (W'14)",
            "sender_id": 5014,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "terminology",
            "submessages": [],
            "timestamp": 1599184035,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/612c7c2a108d7850c62d1d2293a481aa42855408?x=x&version=2",
            "client": "website",
            "content": "<p>What about in the case of a type constraint family?</p>\n<div class=\"codehilite\"><pre><span></span><code>type family Foo a :: Constraint where\n    Foo Bar = ...\n    Foo Baz = ...\n</code></pre></div>\n\n\n<p>Would you describe <code>Foo</code> as a \"type constructor\"?<br>\nWould you describe <code>Foo</code> as a \"<code>Constraint</code> type constructor\"?<br>\nWould you describe <code>Foo</code> as a \"<code>Constraint</code> constructor\"?</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 209048125,
            "is_me_message": false,
            "last_edit_timestamp": 1599346705,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "PLRedmond@gmail.com",
            "sender_full_name": "Patrick Redmond (W'14)",
            "sender_id": 5014,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "terminology",
            "submessages": [],
            "timestamp": 1599184162,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/612c7c2a108d7850c62d1d2293a481aa42855408?x=x&version=2",
            "client": "website",
            "content": "<p>What about in the case of a typeclass?</p>\n<div class=\"codehilite\"><pre><span></span><code>class Foo a\ninstance Foo Bar\ninstance Foo Baz\n</code></pre></div>\n\n\n<p>Would you describe <code>Foo</code> as a \"type constructor\"?<br>\nWould you describe <code>Foo</code> as a \"constraint type constructor\"?<br>\nWould you describe <code>Foo</code> as a \"constraint constructor\"?</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 209048227,
            "is_me_message": false,
            "last_edit_timestamp": 1599184384,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "PLRedmond@gmail.com",
            "sender_full_name": "Patrick Redmond (W'14)",
            "sender_id": 5014,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "terminology",
            "submessages": [],
            "timestamp": 1599184303,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/612c7c2a108d7850c62d1d2293a481aa42855408?x=x&version=2",
            "client": "website",
            "content": "<p>I ask because I encountered the typeclass example and somebody referred to <code>Foo</code> as a type constructor. They explained that when used in a function's signature it really is a type constructor producing a type of kind constraint. While this is technically correct, it seems misleading to call <code>Foo</code> a type constructor. It leaves out the essential detail, which is that <code>Foo</code> is only ever used in a constraint context. I'm thinking there's an analogy to the value level somewhere, but I'm not sure I found it with the example above.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 209048439,
            "is_me_message": false,
            "last_edit_timestamp": 1599184649,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "PLRedmond@gmail.com",
            "sender_full_name": "Patrick Redmond (W'14)",
            "sender_id": 5014,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "terminology",
            "submessages": [],
            "timestamp": 1599184593,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/612c7c2a108d7850c62d1d2293a481aa42855408?x=x&version=2",
            "client": "website",
            "content": "<p>When would you use the ST monad over the State monad and vice versa?</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 209056658,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "PLRedmond@gmail.com",
            "sender_full_name": "Patrick Redmond (W'14)",
            "sender_id": 5014,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "ST vs State",
            "submessages": [],
            "timestamp": 1599197806,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4d074af6cc341ef51b25bb2f738cdb11?d=identicon&version=1",
            "client": "website",
            "content": "<p>Hmm, I'd refer to <code>Foo</code> as the \"type\", and <code>Bar</code> and <code>Baz</code> as type constructors.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 209081869,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "vaibhavsagar@gmail.com",
            "sender_full_name": "Vaibhav Sagar (he) (F1'16)",
            "sender_id": 100041,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "terminology",
            "submessages": [],
            "timestamp": 1599218769,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/6485c74622306264ff53449c6f0ca540?d=identicon&version=1",
            "client": "ZulipMobile",
            "content": "<p>I would call it a type or a type constructor in the first example. If it was <code>data Fizz a</code> I'd call <code>Fizz Int</code> a type. I'd call <code>Fizz</code> a type constructor if I was being formal or just a type if I was being casual. It's this - the need to add an argument in order to yield a concrete instantiable type - that makes it a type constructor rather than a type.</p>\n<p>In the third example I definitely wouldn't call it a type constructor. A type constructor sorta exists somewhere for the type of the typeclass's dictionary, but that doesn't make the typeclass itself a type constructor.</p>\n<p>I'm not so sure about the second one, because there is a sense in which it satisfies my criteria of \"add an argument to yield a concrete instantiable type\". But the way the argument is being added feels completely different. I think the name of a closed type family might be a type constructor, but the name of an open type family probably isn't?</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 209083413,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "iain@mccoy.id.au",
            "sender_full_name": "Iain McCoy (he) (SP2'17)",
            "sender_id": 100806,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "terminology",
            "submessages": [],
            "timestamp": 1599219884,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4d074af6cc341ef51b25bb2f738cdb11?d=identicon&version=1",
            "client": "website",
            "content": "<p>I'd definitely use <code>ST</code> if I needed to work with libraries like <code>vector</code> and <code>array</code> that require it. I'd also use it when translating imperative code directly into Haskell, or implementing an imperative algorithm, since it performs well.</p>\n<p>I'd use <code>State</code> if I had mostly-functional code that needed to be extended to keep track of some state. This means I usually reach for <code>State</code> more often than <code>ST</code>.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 209091065,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "vaibhavsagar@gmail.com",
            "sender_full_name": "Vaibhav Sagar (he) (F1'16)",
            "sender_id": 100041,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "ST vs State",
            "submessages": [],
            "timestamp": 1599224794,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4d074af6cc341ef51b25bb2f738cdb11?d=identicon&version=1",
            "client": "website",
            "content": "<p>I think of <code>ST</code> as very much like <code>IO</code> except that there is no outside interaction, so it doesn't work well as the middle layer in a monad transformer stack and is generally less versatile than <code>State</code>. However, I have heard of people in production codebases replacing <code>State</code> with <code>Reader ST</code>  because apparently the latter has more predictable performance w.r.t. laziness. I don't think that's a great idea and am only mentioning it for completeness.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 209094628,
            "is_me_message": false,
            "last_edit_timestamp": 1599226892,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "vaibhavsagar@gmail.com",
            "sender_full_name": "Vaibhav Sagar (he) (F1'16)",
            "sender_id": 100041,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "ST vs State",
            "submessages": [],
            "timestamp": 1599226876,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/612c7c2a108d7850c62d1d2293a481aa42855408?x=x&version=2",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-id=\"100041\">@Vaibhav Sagar (he) (F1'16)</span> what about in the typeclass example?</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 209132316,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "PLRedmond@gmail.com",
            "sender_full_name": "Patrick Redmond (W'14)",
            "sender_id": 5014,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "terminology",
            "submessages": [],
            "timestamp": 1599247624,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/612c7c2a108d7850c62d1d2293a481aa42855408?x=x&version=2",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-id=\"100806\">@Iain McCoy (he) (SP2'17)</span> I think you're confirming my suspicion (for the typeclass example) that calling it a type constructor, while technically correct from a haskell implemention details standpoint, is confusing or misleading.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 209132448,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "PLRedmond@gmail.com",
            "sender_full_name": "Patrick Redmond (W'14)",
            "sender_id": 5014,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "terminology",
            "submessages": [],
            "timestamp": 1599247697,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/612c7c2a108d7850c62d1d2293a481aa42855408?x=x&version=2",
            "client": "website",
            "content": "<p>Woah, the idea of replacing <code>State</code> with <code>Reader ST</code> is is a heck of a hack. </p>\n<p>Your point about <code>ST</code> being less versatile because you can't (safely [and without implementing your own transformer or using a hacky library]) use it in the middle of a monad transformer stack is I think the key discriminator.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 209132670,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "PLRedmond@gmail.com",
            "sender_full_name": "Patrick Redmond (W'14)",
            "sender_id": 5014,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "ST vs State",
            "submessages": [],
            "timestamp": 1599247849,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/612c7c2a108d7850c62d1d2293a481aa42855408?x=x&version=2",
            "client": "website",
            "content": "<p>Beyond that, I like the idea that <code>State</code> is for functional code that needs state and <code>ST</code> is better for direct translations of imperative algorithms.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 209132698,
            "is_me_message": false,
            "last_edit_timestamp": 1599247876,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "PLRedmond@gmail.com",
            "sender_full_name": "Patrick Redmond (W'14)",
            "sender_id": 5014,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "ST vs State",
            "submessages": [],
            "timestamp": 1599247871,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/612c7c2a108d7850c62d1d2293a481aa42855408?x=x&version=2",
            "client": "website",
            "content": "<p>Thanks <span class=\"user-mention\" data-user-id=\"100041\">@Vaibhav Sagar (he) (F1'16)</span> !</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 209132729,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "PLRedmond@gmail.com",
            "sender_full_name": "Patrick Redmond (W'14)",
            "sender_id": 5014,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "ST vs State",
            "submessages": [],
            "timestamp": 1599247902,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/7580ab83ada9265285a940c5a1098204?d=identicon&version=1",
            "client": "website",
            "content": "<p>This was somewhat surprising to me as I had never looked it up. In the Haskell 2010 Report: <a href=\"https://www.haskell.org/onlinereport/haskell2010/haskellch4.html#x10-680004.2\">https://www.haskell.org/onlinereport/haskell2010/haskellch4.html#x10-680004.2</a><br>\nYou can see how data declarations are defined:</p>\n<div class=\"codehilite\"><pre><span></span><code>topdecl     \u2192   data [context =&gt;] simpletype [= constrs] [deriving]\n\nsimpletype  \u2192   tycon tyvar1 \u2026 tyvark       (k \u2265 0)\n\nconstrs     \u2192   constr1 | \u2026 | constrn       (n \u2265 1)\nconstr  \u2192   con [!] atype1 \u2026 [!] atypek         (arity con  =  k, k \u2265 0)\n    |   (btype | ! atype) conop (btype | ! atype)       (infix conop)\n    |   con { fielddecl1 , \u2026 , fielddecln }         (n \u2265 0)\nfielddecl   \u2192   vars :: (type | ! atype)\n\nderiving    \u2192   deriving (dclass | (dclass1, \u2026 , dclassn))      (n \u2265 0)\ndclass  \u2192   qtycls\n</code></pre></div>\n\n\n<p>So in the first example <code>data Foo = Bar | Baz</code>, you would call <code>Foo</code> a <code>tycon</code> (type constructor) even tho it has no type variables. <code>Bar</code> and <code>Baz</code> are simply <code>con</code> (constructors?) with arrity 0.</p>\n<p>I would normally refer to <code>Foo</code> as a Type (because it has kind <code>TYPE</code> or <code>*</code>) and <code>Bar</code>/<code>Baz</code> as terms (because because they have arrity 0. With higher arrities i would call them <code>Type Constructors</code> and <code>Data Constructors</code> respectively.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 209162423,
            "is_me_message": false,
            "last_edit_timestamp": 1599282957,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "ssbothwell@gmail.com",
            "sender_full_name": "Solomon Bothwell (he) (F2'19)",
            "sender_id": 240589,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "terminology",
            "submessages": [],
            "timestamp": 1599282895,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/7580ab83ada9265285a940c5a1098204?d=identicon&version=1",
            "client": "website",
            "content": "<p>I'm confused by the body of the where clause in your Type Family example. It looks like you are writing a closed type family, but then it would look like:</p>\n<div class=\"codehilite\"><pre><span></span><code>type family Foo a :: Constraint where\n    Foo T1 = ...\n    Foo T2 = ...\n</code></pre></div>\n\n\n<p><code>Foo</code> here is the <code>Type Family</code>.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 209162668,
            "is_me_message": false,
            "last_edit_timestamp": 1599283353,
            "reactions": [
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "+1",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "PLRedmond@gmail.com",
                        "full_name": "Patrick Redmond (W'14)",
                        "id": 5014
                    },
                    "user_id": 5014
                }
            ],
            "recipient_id": 22667,
            "sender_email": "ssbothwell@gmail.com",
            "sender_full_name": "Solomon Bothwell (he) (F2'19)",
            "sender_id": 240589,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "terminology",
            "submessages": [],
            "timestamp": 1599283332,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/7580ab83ada9265285a940c5a1098204?d=identicon&version=1",
            "client": "website",
            "content": "<p>In the typeclass example, <code>Foo</code> is a typeclass. Not sure why someone would call it a <code>Type Constructor</code> there. This also seems to be confirmed by <code>Haskell 2010</code>:</p>\n<div class=\"codehilite\"><pre><span></span><code>topdecl     \u2192   class [scontext =&gt;] tycls tyvar [where cdecls]\nscontext    \u2192   simpleclass\n    |   ( simpleclass1 , \u2026 , simpleclassn )         (n \u2265 0)\nsimpleclass     \u2192   qtycls tyvar\ncdecls  \u2192   { cdecl1 ; \u2026 ; cdecln }         (n \u2265 0)\ncdecl   \u2192   gendecl\n    |   (funlhs | var) rhs\n</code></pre></div>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 209162685,
            "is_me_message": false,
            "last_edit_timestamp": 1599283487,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "ssbothwell@gmail.com",
            "sender_full_name": "Solomon Bothwell (he) (F2'19)",
            "sender_id": 240589,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "terminology",
            "submessages": [],
            "timestamp": 1599283409,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/7580ab83ada9265285a940c5a1098204?d=identicon&version=1",
            "client": "website",
            "content": "<p>Actually in section 4.1.3 here: <a href=\"https://www.haskell.org/onlinereport/haskell2010/haskellch4.html#x10-630004.1\">https://www.haskell.org/onlinereport/haskell2010/haskellch4.html#x10-630004.1</a></p>\n<div class=\"codehilite\"><pre><span></span><code>context     \u2192   class\n    |   ( class1 , \u2026 , classn )         (n \u2265 0)\nclass   \u2192   qtycls tyvar\n    |   qtycls ( tyvar atype1 \u2026 atypen )        (n \u2265 1)\nqtycls  \u2192   [ modid . ] tycls\ntycls   \u2192   conid\ntyvar   \u2192   varid\n\nA class assertion has form qtycls tyvar, and indicates the membership of the type tyvar in the class qtycls. A class identifier begins with an uppercase letter.\n</code></pre></div>\n\n\n<p>So there they call what we consider <code>CONSTRAINT</code> to be a <code>class assertion</code> which starts with a <code>class</code> and then has some number of <code>tyvar</code>. So maybe it would be right to say <code>Eq a</code> is a <code>class assertion</code> which is of kind <code>CONSTRAINT</code> and <code>Eq</code> to be a <code>class</code>?</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 209162931,
            "is_me_message": false,
            "last_edit_timestamp": 1599283937,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "ssbothwell@gmail.com",
            "sender_full_name": "Solomon Bothwell (he) (F2'19)",
            "sender_id": 240589,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "terminology",
            "submessages": [],
            "timestamp": 1599283914,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/6485c74622306264ff53449c6f0ca540?d=identicon&version=1",
            "client": "ZulipMobile",
            "content": "<p><span class=\"user-mention\" data-user-id=\"5014\">@Patrick Redmond (W'14)</span> not quite... The fact of the type class's existence implies the definition of either a type constructor or something very similar somewhere under the hood, in order to represent the type of the type class's underlying dictionary. But I don't think that means we can accurately call it a type constructor. I'd almost be willing to bet that there's some name munging going on under the hood and there is a name for this implied type constructor, distinct from the typeclass itself.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 209163039,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "iain@mccoy.id.au",
            "sender_full_name": "Iain McCoy (he) (SP2'17)",
            "sender_id": 100806,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "terminology",
            "submessages": [],
            "timestamp": 1599284117,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/6485c74622306264ff53449c6f0ca540?d=identicon&version=1",
            "client": "ZulipMobile",
            "content": "<p>Did something in particular inspire the question?</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 209163097,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "iain@mccoy.id.au",
            "sender_full_name": "Iain McCoy (he) (SP2'17)",
            "sender_id": 100806,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "terminology",
            "submessages": [],
            "timestamp": 1599284231,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/6485c74622306264ff53449c6f0ca540?d=identicon&version=1",
            "client": "ZulipMobile",
            "content": "<p>Did something in particular inspire the question?</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 209164926,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "iain@mccoy.id.au",
            "sender_full_name": "Iain McCoy (he) (SP2'17)",
            "sender_id": 100806,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "terminology",
            "submessages": [],
            "timestamp": 1599288408,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/612c7c2a108d7850c62d1d2293a481aa42855408?x=x&version=2",
            "client": "ZulipMobile",
            "content": "<p>Fixed the type family example. I'll catch up on the rest of the thread in a bit..</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 209199300,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "PLRedmond@gmail.com",
            "sender_full_name": "Patrick Redmond (W'14)",
            "sender_id": 5014,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "terminology",
            "submessages": [],
            "timestamp": 1599346755,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/570b5294859a4650f5c6c4f866b6fba3e34af02b?x=x&version=2",
            "client": "website",
            "content": "<p>For a concrete example, I <a href=\"https://github.com/tyehle/lambda/blob/master/src/Interpreter.hs\">was writing an interpreter</a> and I needed somewhere to store values during execution. If I used <code>State</code> with a Map to to the values I needed at runtime then I would have needed to implement a garbage collection scheme, but using <code>STRef</code>s allowed me to use GHC's garbage collector instead.</p>\n<p>I think this is an example of writing imperative code directly, but that isn't they way it seemed when I started out, so maybe another perspective on that same though is that <code>ST</code> gives you something like <code>State</code>, but at a lower layer of the GHC runtime.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 209210003,
            "is_me_message": false,
            "last_edit_timestamp": 1599369469,
            "reactions": [
                {
                    "emoji_code": "1f62e",
                    "emoji_name": "open_mouth",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "shae.erisson@gmail.com",
                        "full_name": "Shae Matijs Erisson (he) (F1'19)",
                        "id": 221819
                    },
                    "user_id": 221819
                },
                {
                    "emoji_code": "1f62e",
                    "emoji_name": "open_mouth",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "PLRedmond@gmail.com",
                        "full_name": "Patrick Redmond (W'14)",
                        "id": 5014
                    },
                    "user_id": 5014
                }
            ],
            "recipient_id": 22667,
            "sender_email": "tobinyehle@gmail.com",
            "sender_full_name": "Tobin Yehle (he) (SP1'20)",
            "sender_id": 105607,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "ST vs State",
            "submessages": [],
            "timestamp": 1599369323,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/612c7c2a108d7850c62d1d2293a481aa42855408?x=x&version=2",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-id=\"240589\">@Solomon Bothwell (he) (F2'19)</span> thanks for digging through the haskell report! thought to look there but got disracted..</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 209254582,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "PLRedmond@gmail.com",
            "sender_full_name": "Patrick Redmond (W'14)",
            "sender_id": 5014,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "terminology",
            "submessages": [],
            "timestamp": 1599450145,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/612c7c2a108d7850c62d1d2293a481aa42855408?x=x&version=2",
            "client": "website",
            "content": "<p>i agree with your naming for the <code>data</code> example.. i the term <code>class assertion</code> is new to me, but seems accurate :)</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 209254595,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "PLRedmond@gmail.com",
            "sender_full_name": "Patrick Redmond (W'14)",
            "sender_id": 5014,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "terminology",
            "submessages": [],
            "timestamp": 1599450205,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/612c7c2a108d7850c62d1d2293a481aa42855408?x=x&version=2",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-id=\"100806\">@Iain McCoy (he) (SP2'17)</span> i'm helping with a research paper and in the definition of a typeclass they said that it is comprised by a \"type constructor\" and methods .. when i asked about this they explained that a class constraint is a type of kind constraint, meaning that a typeclass is a type constructor definition .. it threw me for a loop</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 209255122,
            "is_me_message": false,
            "last_edit_timestamp": 1599451237,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "PLRedmond@gmail.com",
            "sender_full_name": "Patrick Redmond (W'14)",
            "sender_id": 5014,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "terminology",
            "submessages": [],
            "timestamp": 1599451208,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/6485c74622306264ff53449c6f0ca540?d=identicon&version=1",
            "client": "ZulipMobile",
            "content": "<p>Huh, interesting. Yeah, I don't think that's a good definition of a typeclass. If defining a typeclass like that is important for the rest of the paper, then I think they need to argue for it in the paper. If that conception of typeclasses isn't important then that gloss is just gonna keep throwing folks for a loop and they should get rid of it.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 209291092,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "iain@mccoy.id.au",
            "sender_full_name": "Iain McCoy (he) (SP2'17)",
            "sender_id": 100806,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "terminology",
            "submessages": [],
            "timestamp": 1599482322,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/6485c74622306264ff53449c6f0ca540?d=identicon&version=1",
            "client": "ZulipMobile",
            "content": "<p>It might depend on the venue the paper is intended for, I guess. Will the audience know what type constructors are, in the technical sense that we've been discussing them here? But even if not, using a definition that doesn't overload a technical term would be better.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 209291259,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "iain@mccoy.id.au",
            "sender_full_name": "Iain McCoy (he) (SP2'17)",
            "sender_id": 100806,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "terminology",
            "submessages": [],
            "timestamp": 1599482422,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/5c76b2c555785c8a87577bc81fe538bc03a8b463?x=x&version=2",
            "client": "website",
            "content": "<p><a href=\"https://algebradriven.design/\">https://algebradriven.design/</a></p>\n<p>What are everyone's thoughts on this? The ToC looks pretty cool.<br>\nI'm not sure if I should get this book, but I am strongly considering spending the next 3 months while I'm intentionally between contracts to get up and running with Haskell. </p>\n<p>For that, I won't turn to this book. I'll likely just go back to that UPenn course, and then a book? Or a project or something.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 209790111,
            "is_me_message": false,
            "last_edit_timestamp": 1599835783,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "c@chirag.io",
            "sender_full_name": "Chirag Dav\u00e9 (he) (F1'19)",
            "sender_id": 234049,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Algebra-Driven Design",
            "submessages": [],
            "timestamp": 1599835768,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/7580ab83ada9265285a940c5a1098204?d=identicon&version=1",
            "client": "website",
            "content": "<p>I've started reading this book and its great! However, its a book on Denotational Design that uses Haskell for the examples rather then a book on Haskell.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 209816619,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "ssbothwell@gmail.com",
            "sender_full_name": "Solomon Bothwell (he) (F2'19)",
            "sender_id": 240589,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Algebra-Driven Design",
            "submessages": [],
            "timestamp": 1599848372,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/612c7c2a108d7850c62d1d2293a481aa42855408?x=x&version=2",
            "client": "website",
            "content": "<p>Old wording:</p>\n<blockquote>\n<p>A typeclass definition specifies a type constructor and a collection of method declarations over that type. A typeclass instance defines an implementation of that constructor and those methods.</p>\n</blockquote>\n<p>New wording:</p>\n<blockquote>\n<p>Typeclasses in Haskell are similar to interfaces in Java or traits in Rust. A typeclass definition specifies a collection of method signatures that any type that is an instance of the typeclass must implement.</p>\n</blockquote>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 210215668,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "PLRedmond@gmail.com",
            "sender_full_name": "Patrick Redmond (W'14)",
            "sender_id": 5014,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "terminology",
            "submessages": [],
            "timestamp": 1600223254,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/612c7c2a108d7850c62d1d2293a481aa42855408?x=x&version=2",
            "client": "website",
            "content": "<p>The new wording isn't mine. I think it's a vast improvement.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 210215726,
            "is_me_message": false,
            "last_edit_timestamp": 1600223301,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "PLRedmond@gmail.com",
            "sender_full_name": "Patrick Redmond (W'14)",
            "sender_id": 5014,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "terminology",
            "submessages": [],
            "timestamp": 1600223291,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/612c7c2a108d7850c62d1d2293a481aa42855408?x=x&version=2",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-id=\"105607\">@Tobin Yehle (he) (SP1'20)</span> Yeah, thinking more about it, the advantage of making multiple <code>STRef</code>s over the single reference provided by <code>StateT</code> &amp; co is really important for writing any kind of modular code.</p>\n<p>Eg. If you had multiple separate things implementing an interface such that they can be stacked and reordered and mixed and matched with each other using <code>StateT</code> would require something like <code>StateT XState (StateT YState (StateT ZState)) a</code> whereas with <code>ST</code> you can just mash them together into one big <code>ST a</code> that has as many internal references as is necessary for the task.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 210215983,
            "is_me_message": false,
            "last_edit_timestamp": 1600223656,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "PLRedmond@gmail.com",
            "sender_full_name": "Patrick Redmond (W'14)",
            "sender_id": 5014,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "ST vs State",
            "submessages": [],
            "timestamp": 1600223632,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4d074af6cc341ef51b25bb2f738cdb11?d=identicon&version=1",
            "client": "website",
            "content": "<p>How would this be different from having a single <code>StateT</code> over a record?</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 210219870,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "vaibhavsagar@gmail.com",
            "sender_full_name": "Vaibhav Sagar (he) (F1'16)",
            "sender_id": 100041,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "ST vs State",
            "submessages": [],
            "timestamp": 1600228542,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/6485c74622306264ff53449c6f0ca540?d=identicon&version=1",
            "client": "ZulipMobile",
            "content": "<p>Yes, waaaay better. There's still a bunch of nits I could pick, but it's probably good enough!</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 210257650,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "iain@mccoy.id.au",
            "sender_full_name": "Iain McCoy (he) (SP2'17)",
            "sender_id": 100806,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "terminology",
            "submessages": [],
            "timestamp": 1600261405,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/612c7c2a108d7850c62d1d2293a481aa42855408?x=x&version=2",
            "client": "website",
            "content": "<p>A single <code>StateT RecordWithFields m a</code> would be limited to the number of fields in the record.<br>\nA single <code>StateT (Map RefName RefVal) m a</code> would require that <span class=\"user-mention\" data-user-id=\"105607\">@Tobin Yehle (he) (SP1'20)</span> implement GC for the <code>Map</code> in the interpreter.<br>\nAn <code>ST st a</code> with multiple <code>STRef st a</code> allows a variable number of references and doesn't require any special work to clean them up. Just create them when you need them, and forget about them.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 211029840,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "PLRedmond@gmail.com",
            "sender_full_name": "Patrick Redmond (W'14)",
            "sender_id": 5014,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "ST vs State",
            "submessages": [],
            "timestamp": 1600879413,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/612c7c2a108d7850c62d1d2293a481aa42855408?x=x&version=2",
            "client": "website",
            "content": "<p>That's my interpretation of the advantage described.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 211029854,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "PLRedmond@gmail.com",
            "sender_full_name": "Patrick Redmond (W'14)",
            "sender_id": 5014,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "ST vs State",
            "submessages": [],
            "timestamp": 1600879422,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/9dfae5ecf93c861db337992d2f2f3121?d=identicon&version=1",
            "client": "website",
            "content": "<p>Hello all!  I'm trying to set things up so as to study Stephen Diehl's <a href=\"https://www.stephendiehl.com/llvm/\">Implementing a JIT Compiled Language with Haskell and LLVM</a>. </p>\n<p>Has anyone succeeded in (1) the <code>brew install llvm-hs/homebrew-llvm/llvm-4.0</code> step followed by  (2) <code>stack build</code>?  I'm on the latest Mac OS.  The first step fails. I have succeeded with <code>brew install llvm-hs/llvm/llvm-9</code>, but then there are failures with <code>stack build</code> ... and so on.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 211683954,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "jxxcarlson@gmail.com",
            "sender_full_name": "James Carlson (he) (F2'20)",
            "sender_id": 342488,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "SDiehl, compiler project",
            "submessages": [],
            "timestamp": 1601413457,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/570b5294859a4650f5c6c4f866b6fba3e34af02b?x=x&version=2",
            "client": "website",
            "content": "<p>I have set this up on linux, and remember needing only the llvm binaries, not any haskell bindings from my package manager</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 211698757,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "tobinyehle@gmail.com",
            "sender_full_name": "Tobin Yehle (he) (SP1'20)",
            "sender_id": 105607,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "SDiehl, compiler project",
            "submessages": [],
            "timestamp": 1601422954,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/570b5294859a4650f5c6c4f866b6fba3e34af02b?x=x&version=2",
            "client": "website",
            "content": "<p>I got all the HS stuff from stack</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 211698765,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "tobinyehle@gmail.com",
            "sender_full_name": "Tobin Yehle (he) (SP1'20)",
            "sender_id": 105607,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "SDiehl, compiler project",
            "submessages": [],
            "timestamp": 1601422961,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/570b5294859a4650f5c6c4f866b6fba3e34af02b?x=x&version=2",
            "client": "website",
            "content": "<p>Though idk if that is true on osx, but I feel like it would be</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 211698794,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "tobinyehle@gmail.com",
            "sender_full_name": "Tobin Yehle (he) (SP1'20)",
            "sender_id": 105607,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "SDiehl, compiler project",
            "submessages": [],
            "timestamp": 1601422992,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/570b5294859a4650f5c6c4f866b6fba3e34af02b?x=x&version=2",
            "client": "website",
            "content": "<p>Yep confirmed it works with <code>llvm-9-dev</code> and just stack using lts-16.0. If you want to post what sorts of errors you are getting I can try to make sense of them</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 211699067,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "tobinyehle@gmail.com",
            "sender_full_name": "Tobin Yehle (he) (SP1'20)",
            "sender_id": 105607,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "SDiehl, compiler project",
            "submessages": [],
            "timestamp": 1601423188,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/570b5294859a4650f5c6c4f866b6fba3e34af02b?x=x&version=2",
            "client": "website",
            "content": "<p>confirmed it works on my linux box that is :)</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 211699102,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "tobinyehle@gmail.com",
            "sender_full_name": "Tobin Yehle (he) (SP1'20)",
            "sender_id": 105607,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "SDiehl, compiler project",
            "submessages": [],
            "timestamp": 1601423221,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/9dfae5ecf93c861db337992d2f2f3121?d=identicon&version=1",
            "client": "website",
            "content": "<p>Hmmm ... that is encouraging.  maybe I should put a virtual Linux on my machine and see if I can duplicate what you did that way.  Thanks!!</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 211919758,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "jxxcarlson@gmail.com",
            "sender_full_name": "James Carlson (he) (F2'20)",
            "sender_id": 342488,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "SDiehl, compiler project",
            "submessages": [],
            "timestamp": 1601562929,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/7fe4a9620069ee6245f0c8203ab1500b16e49948?x=x&version=5",
            "client": "website",
            "content": "<p>I've been working on a short presentation to teach folks about functors, applicatives, and monads, and why they are nice to have. I'm trying to come up with a good metaphor that can illustrate the abilities of each, very much inspired by <a href=\"http://adit.io/posts/2013-04-17-functors,_applicatives,_and_monads_in_pictures.html\">this post</a>.</p>\n<p>Let me know if you have thoughts on this or any good resources!</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 212074182,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f419",
                    "emoji_name": "octopus",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "victoria@unconventionaldata.ai",
                        "full_name": "Victoria Levchenko (she) (W2'19)",
                        "id": 198466
                    },
                    "user_id": 198466
                }
            ],
            "recipient_id": 22667,
            "sender_email": "willthefirst@gmail.com",
            "sender_full_name": "Will Moritz (he) (F1'20)",
            "sender_id": 327378,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Functor, applicatives, and monads",
            "submessages": [],
            "timestamp": 1601645421,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/7fe4a9620069ee6245f0c8203ab1500b16e49948?x=x&version=5",
            "client": "website",
            "content": "<p>I'm having trouble explaining how each builds on the last in particular. It almost feels like, for a five minute presentation, I should avoid talking about functors and applicatives altogether and just explain monads. Explaining how one builds on the last seems to confuse things more than necessary.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 212074320,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "willthefirst@gmail.com",
            "sender_full_name": "Will Moritz (he) (F1'20)",
            "sender_id": 327378,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Functor, applicatives, and monads",
            "submessages": [],
            "timestamp": 1601645513,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/7fe4a9620069ee6245f0c8203ab1500b16e49948?x=x&version=5",
            "client": "website",
            "content": "<p>My short explanation, which is said better by example than in words, is the following:</p>\n<p>When working with types, we want to run functions on the information that the type \"contains.\"<br>\n-- Functors: allow us to run a function on the contents of a type, returning something of that type.<br>\n-- Applicatives: allow us take a function out of a type, and run it on the contents of another type, returning something of that type.<br>\n-- Monads: allows us to feed the contents of a type into a function that doesn't accept that type (but returns that type)</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 212074554,
            "is_me_message": false,
            "last_edit_timestamp": 1601645620,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "willthefirst@gmail.com",
            "sender_full_name": "Will Moritz (he) (F1'20)",
            "sender_id": 327378,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Functor, applicatives, and monads",
            "submessages": [],
            "timestamp": 1601645608,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4d074af6cc341ef51b25bb2f738cdb11?d=identicon&version=1",
            "client": "website",
            "content": "<p>You probably already know this but Applicatives came to Haskell much later than Functors and Monads, so for a 5 minute presentation you could consider skipping Applicatives or introducing them at the end as an in-between abstraction</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 212077679,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "vaibhavsagar@gmail.com",
            "sender_full_name": "Vaibhav Sagar (he) (F1'16)",
            "sender_id": 100041,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Functor, applicatives, and monads",
            "submessages": [],
            "timestamp": 1601647008,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/635ab4f3efb5c26f8276373d9767320104538f85?x=x&version=2",
            "client": "ZulipElectron",
            "content": "<p>I think you are running into the reason why folks say \"once you understand what a monad is. . . you can't explain what a monad is\" (or something better than that).</p>\n<p>Here's a few suggestions for teaching these ideas:</p>\n<p>-- Functor: You've maybe used this before when mapping over a list (in fact the underlying function is called <code>fmap</code>!)<br>\n-- Applicative is tough because no analog (that I know of). The one edit I might make is that its all the same type.<br>\n-- Monad: I really like how Elm presents it (calling it an <code>andThen</code>): <a href=\"https://package.elm-lang.org/packages/elm/core/latest/Maybe#andThen\">https://package.elm-lang.org/packages/elm/core/latest/Maybe#andThen</a> once I had used that type for a while is when it started clicking for me.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 212077912,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f6e0",
                    "emoji_name": "working_on_it",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "willthefirst@gmail.com",
                        "full_name": "Will Moritz (he) (F1'20)",
                        "id": 327378
                    },
                    "user_id": 327378
                }
            ],
            "recipient_id": 22667,
            "sender_email": "jpholzmann@gmail.com",
            "sender_full_name": "Justin Holzmann (he) (S2'20)",
            "sender_id": 315058,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Functor, applicatives, and monads",
            "submessages": [],
            "timestamp": 1601647123,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4d074af6cc341ef51b25bb2f738cdb11?d=identicon&version=1",
            "client": "website",
            "content": "<p>Another consideration is that it can be very difficult to motivate + explain monads in 5 minutes in a way that actually clarifies things, hence the abundance of ridiculous burrito, toxic waste, and spacesuit analogies. Think about what you want your audience to get out of this presentation.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 212077996,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f44f",
                    "emoji_name": "clap",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "willthefirst@gmail.com",
                        "full_name": "Will Moritz (he) (F1'20)",
                        "id": 327378
                    },
                    "user_id": 327378
                }
            ],
            "recipient_id": 22667,
            "sender_email": "vaibhavsagar@gmail.com",
            "sender_full_name": "Vaibhav Sagar (he) (F1'16)",
            "sender_id": 100041,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Functor, applicatives, and monads",
            "submessages": [],
            "timestamp": 1601647171,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/7fe4a9620069ee6245f0c8203ab1500b16e49948?x=x&version=5",
            "client": "website",
            "content": "<p><span class=\"user-mention silent\" data-user-id=\"100041\">Vaibhav Sagar (he) (F1'16)</span> <a href=\"#narrow/stream/20298-haskell/topic/Functor.2C.20applicatives.2C.20and.20monads/near/212077996\">said</a>:</p>\n<blockquote>\n<p>Another consideration is that it can be very difficult to motivate + explain monads in 5 minutes in a way that actually clarifies things, hence the abundance of ridiculous burrito, toxic waste, and spacesuit analogies. Think about what you want your audience to get out of this presentation.</p>\n</blockquote>\n<p>My metaphors went from a dog that's either eating or sleeping, to a bar that closes the moment it gets too full, and now we're talking about filling up a cup <img alt=\":facepalm:\" class=\"emoji\" src=\"https://zulip-avatars.s3.amazonaws.com/13/emoji/images/15905.png\" title=\"facepalm\"></p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 212078788,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "willthefirst@gmail.com",
            "sender_full_name": "Will Moritz (he) (F1'20)",
            "sender_id": 327378,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Functor, applicatives, and monads",
            "submessages": [],
            "timestamp": 1601647535,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4d074af6cc341ef51b25bb2f738cdb11?d=identicon&version=1",
            "client": "website",
            "content": "<p>Yeah, this is an anti-pattern: <a href=\"https://byorgey.wordpress.com/2009/01/12/abstraction-intuition-and-the-monad-tutorial-fallacy/\">https://byorgey.wordpress.com/2009/01/12/abstraction-intuition-and-the-monad-tutorial-fallacy/</a></p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 212079370,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "vaibhavsagar@gmail.com",
            "sender_full_name": "Vaibhav Sagar (he) (F1'16)",
            "sender_id": 100041,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Functor, applicatives, and monads",
            "submessages": [],
            "timestamp": 1601647804,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4d074af6cc341ef51b25bb2f738cdb11?d=identicon&version=1",
            "client": "website",
            "content": "<p>A quick look for the nuclear waste post hasn't turned up anything useful, but here's the one with the spacesuits analogy: <a href=\"http://web.archive.org/web/20081206204420/http://www.loria.fr/~kow/monads/index.html\">http://web.archive.org/web/20081206204420/http://www.loria.fr/~kow/monads/index.html</a></p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 212079803,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "vaibhavsagar@gmail.com",
            "sender_full_name": "Vaibhav Sagar (he) (F1'16)",
            "sender_id": 100041,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Functor, applicatives, and monads",
            "submessages": [],
            "timestamp": 1601648029,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4d074af6cc341ef51b25bb2f738cdb11?d=identicon&version=1",
            "client": "website",
            "content": "<p>the frustrating thing is (as <span class=\"user-mention\" data-user-id=\"315058\">@Justin Holzmann (he) (S2'20)</span> alluded to above) that once you have a reasonably good grasp of monads all these explanations make sense:</p>\n<ul>\n<li>a monad is like a burrito in that you can put a filling into a burrito (<code>pure</code>), you can unwrap a burrito and do something with the filling as long as the result is another burrito (<code>&gt;&gt;=</code>), and you can take a burrito of burritos and throw away the extra tortillas to end up with a burrito (<code>join</code>)</li>\n<li>a monad is like a spacesuit in that you can send people out in spacesuits (<code>pure</code>), you can have a robot that knows how to handle spacesuits and operate on the contents of the spacesuit (<code>&gt;&gt;=</code>), and you can get rid of redundant spacesuits (<code>join</code>)</li>\n<li>a monad is like nuclear waste (IIRC this blog post specifically dealt with IO) in that you can taint any value with nuclear waste (<code>pure</code>), you can have nuclear waste handling procedures (<code>&gt;&gt;=</code>), and once something is tainted it doesn't matter how many times it's tainted (<code>join</code>)</li>\n</ul>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 212081167,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "vaibhavsagar@gmail.com",
            "sender_full_name": "Vaibhav Sagar (he) (F1'16)",
            "sender_id": 100041,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Functor, applicatives, and monads",
            "submessages": [],
            "timestamp": 1601648718,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4d074af6cc341ef51b25bb2f738cdb11?d=identicon&version=1",
            "client": "website",
            "content": "<p><a href=\"http://dev.stephendiehl.com/hask/#eightfold-path-to-monad-satori\">http://dev.stephendiehl.com/hask/#eightfold-path-to-monad-satori</a></p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 212081239,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "vaibhavsagar@gmail.com",
            "sender_full_name": "Vaibhav Sagar (he) (F1'16)",
            "sender_id": 100041,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Functor, applicatives, and monads",
            "submessages": [],
            "timestamp": 1601648761,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4d074af6cc341ef51b25bb2f738cdb11?d=identicon&version=1",
            "client": "website",
            "content": "<p>I will admit that I wrote my own monad tutorial, except I tried to be cute and called it an \"anti-tutorial\" instead: <a href=\"https://vaibhavsagar.com/blog/2016/10/12/monad-anti-tutorial/\">https://vaibhavsagar.com/blog/2016/10/12/monad-anti-tutorial/</a></p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 212081389,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "vaibhavsagar@gmail.com",
            "sender_full_name": "Vaibhav Sagar (he) (F1'16)",
            "sender_id": 100041,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Functor, applicatives, and monads",
            "submessages": [],
            "timestamp": 1601648816,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/b2f05ff47bfeb3ef2d5f8690d48a42c4?d=identicon&version=1",
            "client": "ZulipElectron",
            "content": "<p>How's it going! I'm having some trouble understanding why the following does not compile.</p>\n<div class=\"codehilite\" data-code-language=\"Haskell\"><pre><span></span><code><span class=\"kr\">data</span> <span class=\"kt\">OptionalT</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"ow\">=</span> <span class=\"kt\">OptionalT</span> <span class=\"p\">{</span> <span class=\"n\">runOptionalT</span> <span class=\"ow\">::</span> <span class=\"n\">f</span> <span class=\"p\">(</span><span class=\"kt\">Optional</span> <span class=\"n\">a</span><span class=\"p\">)</span> <span class=\"p\">}</span>\n\n<span class=\"kr\">instance</span> <span class=\"kt\">Functor</span> <span class=\"n\">f</span> <span class=\"ow\">=&gt;</span> <span class=\"kt\">Functor</span> <span class=\"p\">(</span><span class=\"kt\">OptionalT</span> <span class=\"n\">f</span><span class=\"p\">)</span> <span class=\"kr\">where</span>\n  <span class=\"p\">(</span><span class=\"o\">&lt;$&gt;</span><span class=\"p\">)</span> <span class=\"n\">ab</span> <span class=\"ow\">=</span> <span class=\"kt\">OptionalT</span> <span class=\"o\">.</span> <span class=\"p\">((</span><span class=\"o\">&lt;$&gt;</span><span class=\"p\">)</span> <span class=\"o\">.</span> <span class=\"p\">(</span><span class=\"o\">&lt;$&gt;</span><span class=\"p\">))</span> <span class=\"n\">ab</span> <span class=\"o\">.</span> <span class=\"n\">runOptionalT</span>\n\n<span class=\"kr\">instance</span> <span class=\"kt\">Monad</span> <span class=\"n\">f</span> <span class=\"ow\">=&gt;</span> <span class=\"kt\">Applicative</span> <span class=\"p\">(</span><span class=\"kt\">OptionalT</span> <span class=\"n\">f</span><span class=\"p\">)</span> <span class=\"kr\">where</span>\n  <span class=\"n\">pure</span> <span class=\"ow\">=</span> <span class=\"kt\">OptionalT</span> <span class=\"o\">.</span> <span class=\"n\">pure</span> <span class=\"o\">.</span> <span class=\"kt\">Full</span>\n  <span class=\"p\">(</span><span class=\"o\">&lt;*&gt;</span><span class=\"p\">)</span> <span class=\"n\">ofab</span> <span class=\"n\">ofa</span> <span class=\"ow\">=</span> <span class=\"p\">(</span><span class=\"n\">runOptionalT</span> <span class=\"n\">ofab</span><span class=\"p\">)</span> <span class=\"o\">&gt;&gt;=</span> <span class=\"nf\">\\</span><span class=\"n\">oab</span> <span class=\"ow\">-&gt;</span>\n                    <span class=\"n\">oab</span>                <span class=\"o\">&gt;&gt;=</span> <span class=\"nf\">\\</span><span class=\"n\">ab</span>  <span class=\"ow\">-&gt;</span>\n                   <span class=\"p\">(</span><span class=\"n\">ab</span> <span class=\"o\">&lt;$&gt;</span> <span class=\"n\">ofa</span><span class=\"p\">)</span>\n</code></pre></div>\n\n<p>Particularly, the <code>`&lt;*&gt;</code> implementation is giving me the following error.</p>\n<div class=\"codehilite\"><pre><span></span><code>Course/StateT.hs:208:21-30: error:\n    \u2022 Couldn&#39;t match type \u2018OptionalT f\u2019 with \u2018Optional\u2019\n      Expected type: Optional b\n        Actual type: OptionalT f b\n    \u2022 In the expression: (ab &lt;$&gt; ofa)\n      In the second argument of \u2018(&gt;&gt;=)\u2019, namely \u2018\\ ab -&gt; (ab &lt;$&gt; ofa)\u2019\n      In the expression: oab &gt;&gt;= \\ ab -&gt; (ab &lt;$&gt; ofa)\n    \u2022 Relevant bindings include\n        ofa :: OptionalT f a (bound at Course/StateT.hs:206:14)\n        ofab :: OptionalT f (a -&gt; b) (bound at Course/StateT.hs:206:9)\n        (&lt;*&gt;) :: OptionalT f (a -&gt; b) -&gt; OptionalT f a -&gt; OptionalT f b\n          (bound at Course/StateT.hs:206:3)\n    |\n208 |                    (ab &lt;$&gt; ofa)\n    |                     ^^^^^^^^^^\n</code></pre></div>\n\n\n<p>My understanding of the types in the implementation are</p>\n<div class=\"codehilite\" data-code-language=\"Haskell\"><pre><span></span><code><span class=\"nf\">ofab</span> <span class=\"ow\">::</span> <span class=\"kt\">OptionalT</span> <span class=\"n\">f</span> <span class=\"p\">(</span><span class=\"n\">a</span> <span class=\"ow\">-&gt;</span> <span class=\"n\">b</span><span class=\"p\">)</span>\n<span class=\"nf\">ofa</span> <span class=\"ow\">::</span> <span class=\"kt\">OptionalT</span> <span class=\"n\">f</span> <span class=\"n\">a</span>\n<span class=\"nf\">oab</span> <span class=\"ow\">::</span> <span class=\"kt\">Optional</span> <span class=\"p\">(</span><span class=\"n\">a</span> <span class=\"ow\">-&gt;</span> <span class=\"n\">b</span><span class=\"p\">)</span>\n<span class=\"nf\">ab</span> <span class=\"ow\">::</span> <span class=\"p\">(</span><span class=\"n\">a</span> <span class=\"ow\">-&gt;</span> <span class=\"n\">b</span><span class=\"p\">)</span>\n</code></pre></div>\n\n<p>Some additional information: Optional is a Monad and as is seen in the initial code sample, OptionalT is implemented as a Functor and has a <code>&lt;$&gt;</code> operation defined on it. My thought on this was that I was striping external types on ofab until we arrive at the type <code>a -&gt; b</code>. With that, I want to apply <code>&lt;$&gt;</code> on the new extracted function onto the <code>OptionalT</code> ofa. To my mind the types are lining up correctly, but that's clearly incorrect. What am I missing?</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 212096427,
            "is_me_message": false,
            "last_edit_timestamp": 1601656710,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "jacob.vartuli.92@gmail.com",
            "sender_full_name": "Jacob Vartuli-Schonberg (he) (F2'20)",
            "sender_id": 314689,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Trouble with OptionalT | MaybeT",
            "submessages": [],
            "timestamp": 1601655513,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4d074af6cc341ef51b25bb2f738cdb11?d=identicon&version=1",
            "client": "website",
            "content": "<p>You want your return type to be an <code>OptionalT</code>, so I think you want</p>\n<div class=\"codehilite\"><pre><span></span><code>OptionalT (ab &lt;$&gt; ofa)\n</code></pre></div>\n\n\n<p>as your last line</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 212098786,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "vaibhavsagar@gmail.com",
            "sender_full_name": "Vaibhav Sagar (he) (F1'16)",
            "sender_id": 100041,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Trouble with OptionalT | MaybeT",
            "submessages": [],
            "timestamp": 1601656698,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4d074af6cc341ef51b25bb2f738cdb11?d=identicon&version=1",
            "client": "website",
            "content": "<p>oh whoops, I misunderstood, nevermind</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 212098853,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "vaibhavsagar@gmail.com",
            "sender_full_name": "Vaibhav Sagar (he) (F1'16)",
            "sender_id": 100041,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Trouble with OptionalT | MaybeT",
            "submessages": [],
            "timestamp": 1601656749,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/b2f05ff47bfeb3ef2d5f8690d48a42c4?d=identicon&version=1",
            "client": "ZulipElectron",
            "content": "<p>Bind is left associative to my mind, so the computation resolves to (with type replacement)</p>\n<div class=\"codehilite\" data-code-language=\"Haskell\"><pre><span></span><code><span class=\"o\">==</span> <span class=\"kt\">Optional</span> <span class=\"p\">(</span><span class=\"n\">a</span><span class=\"ow\">-&gt;</span><span class=\"n\">b</span><span class=\"p\">)</span> <span class=\"o\">&gt;&gt;=</span> <span class=\"nf\">\\</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"ow\">-&gt;</span><span class=\"n\">b</span><span class=\"p\">)</span> <span class=\"ow\">-&gt;</span> <span class=\"p\">(</span><span class=\"n\">a</span> <span class=\"ow\">-&gt;</span> <span class=\"n\">b</span><span class=\"p\">)</span> <span class=\"o\">&lt;$&gt;</span> <span class=\"kt\">OptionalT</span> <span class=\"n\">f</span> <span class=\"n\">a</span>\n<span class=\"o\">==</span> <span class=\"kt\">OptionalT</span> <span class=\"n\">f</span> <span class=\"n\">b</span>\n</code></pre></div>\n\n<p>It's weird, though. The compiler seems to see that as you pointed out. The actual type is OptionalT f b, but it wants an Optional b? Is it because the final bind is accepting an <code>Optional</code> in its first argument?</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 212100315,
            "is_me_message": false,
            "last_edit_timestamp": 1601657817,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "jacob.vartuli.92@gmail.com",
            "sender_full_name": "Jacob Vartuli-Schonberg (he) (F2'20)",
            "sender_id": 314689,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Trouble with OptionalT | MaybeT",
            "submessages": [],
            "timestamp": 1601657540,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4d074af6cc341ef51b25bb2f738cdb11?d=identicon&version=1",
            "client": "website",
            "content": "<p>Another issue I'm running into when trying to execute the code you have above is that I can't define an instance of <code>Functor</code> with <code>&lt;$&gt;</code> instead of <code>fmap</code>. Which version of GHC are you using?</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 212101459,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "vaibhavsagar@gmail.com",
            "sender_full_name": "Vaibhav Sagar (he) (F1'16)",
            "sender_id": 100041,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Trouble with OptionalT | MaybeT",
            "submessages": [],
            "timestamp": 1601658085,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/b2f05ff47bfeb3ef2d5f8690d48a42c4?d=identicon&version=1",
            "client": "ZulipElectron",
            "content": "<p>I'm using GHCS 8.6.5. I'll send you the <code>Optional</code> definitions too</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 212101664,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "jacob.vartuli.92@gmail.com",
            "sender_full_name": "Jacob Vartuli-Schonberg (he) (F2'20)",
            "sender_id": 314689,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Trouble with OptionalT | MaybeT",
            "submessages": [],
            "timestamp": 1601658176,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4d074af6cc341ef51b25bb2f738cdb11?d=identicon&version=1",
            "client": "website",
            "content": "<p>Huh, me too! Maybe it's because I'm using IHaskell instead of GHCi.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 212101895,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "vaibhavsagar@gmail.com",
            "sender_full_name": "Vaibhav Sagar (he) (F1'16)",
            "sender_id": 100041,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Trouble with OptionalT | MaybeT",
            "submessages": [],
            "timestamp": 1601658292,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/b2f05ff47bfeb3ef2d5f8690d48a42c4?d=identicon&version=1",
            "client": "ZulipElectron",
            "content": "<div class=\"codehilite\" data-code-language=\"Haskell\"><pre><span></span><code><span class=\"kr\">import</span> <span class=\"k\">qualified</span> <span class=\"nn\">Control.Monad</span> <span class=\"k\">as</span> <span class=\"n\">M</span>\n<span class=\"kr\">data</span> <span class=\"kt\">Optional</span> <span class=\"n\">a</span> <span class=\"ow\">=</span>\n  <span class=\"kt\">Full</span> <span class=\"n\">a</span>\n  <span class=\"o\">|</span> <span class=\"kt\">Empty</span>\n  <span class=\"kr\">deriving</span> <span class=\"p\">(</span><span class=\"kt\">Eq</span><span class=\"p\">,</span> <span class=\"kt\">Show</span><span class=\"p\">)</span>\n\n<span class=\"nf\">bindOptional</span> <span class=\"ow\">::</span> <span class=\"p\">(</span><span class=\"n\">a</span> <span class=\"ow\">-&gt;</span> <span class=\"kt\">Optional</span> <span class=\"n\">b</span><span class=\"p\">)</span> <span class=\"ow\">-&gt;</span> <span class=\"kt\">Optional</span> <span class=\"n\">a</span> <span class=\"ow\">-&gt;</span> <span class=\"kt\">Optional</span> <span class=\"n\">b</span>\n<span class=\"nf\">bindOptional</span> <span class=\"kr\">_</span> <span class=\"kt\">Empty</span>    <span class=\"ow\">=</span> <span class=\"kt\">Empty</span>\n<span class=\"nf\">bindOptional</span> <span class=\"n\">f</span> <span class=\"p\">(</span><span class=\"kt\">Full</span> <span class=\"n\">x</span><span class=\"p\">)</span> <span class=\"ow\">=</span> <span class=\"n\">f</span> <span class=\"n\">x</span>\n\n<span class=\"kr\">instance</span> <span class=\"kt\">P</span><span class=\"o\">.</span><span class=\"kt\">Functor</span> <span class=\"kt\">Optional</span> <span class=\"kr\">where</span>\n  <span class=\"n\">fmap</span> <span class=\"ow\">=</span>\n    <span class=\"kt\">M</span><span class=\"o\">.</span><span class=\"n\">liftM</span>\n\n<span class=\"kr\">instance</span> <span class=\"kt\">A</span><span class=\"o\">.</span><span class=\"kt\">Applicative</span> <span class=\"kt\">Optional</span> <span class=\"kr\">where</span>\n  <span class=\"p\">(</span><span class=\"o\">&lt;*&gt;</span><span class=\"p\">)</span> <span class=\"ow\">=</span>\n    <span class=\"kt\">M</span><span class=\"o\">.</span><span class=\"n\">ap</span>\n  <span class=\"n\">pure</span> <span class=\"ow\">=</span>\n    <span class=\"kt\">Full</span>\n\n<span class=\"kr\">instance</span> <span class=\"kt\">P</span><span class=\"o\">.</span><span class=\"kt\">Monad</span> <span class=\"kt\">Optional</span> <span class=\"kr\">where</span>\n  <span class=\"p\">(</span><span class=\"o\">&gt;&gt;=</span><span class=\"p\">)</span> <span class=\"ow\">=</span>\n    <span class=\"n\">flip</span> <span class=\"n\">bindOptional</span>\n  <span class=\"n\">return</span> <span class=\"ow\">=</span>\n    <span class=\"kt\">Full</span>\n</code></pre></div>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 212102096,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "jacob.vartuli.92@gmail.com",
            "sender_full_name": "Jacob Vartuli-Schonberg (he) (F2'20)",
            "sender_id": 314689,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Trouble with OptionalT | MaybeT",
            "submessages": [],
            "timestamp": 1601658423,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/b2f05ff47bfeb3ef2d5f8690d48a42c4?d=identicon&version=1",
            "client": "ZulipElectron",
            "content": "<p>I'm in a bizzare repo, fp-course, that hides a lot of the prelude. Let me see if I can find the functor typeclass that we're using in the course.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 212102453,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "jacob.vartuli.92@gmail.com",
            "sender_full_name": "Jacob Vartuli-Schonberg (he) (F2'20)",
            "sender_id": 314689,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Trouble with OptionalT | MaybeT",
            "submessages": [],
            "timestamp": 1601658617,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4d074af6cc341ef51b25bb2f738cdb11?d=identicon&version=1",
            "client": "website",
            "content": "<p>ah, that's what I guessed</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 212102527,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "vaibhavsagar@gmail.com",
            "sender_full_name": "Vaibhav Sagar (he) (F1'16)",
            "sender_id": 100041,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Trouble with OptionalT | MaybeT",
            "submessages": [],
            "timestamp": 1601658675,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4d074af6cc341ef51b25bb2f738cdb11?d=identicon&version=1",
            "client": "website",
            "content": "<p>I have a guess</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 212102555,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "vaibhavsagar@gmail.com",
            "sender_full_name": "Vaibhav Sagar (he) (F1'16)",
            "sender_id": 100041,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Trouble with OptionalT | MaybeT",
            "submessages": [],
            "timestamp": 1601658695,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/b2f05ff47bfeb3ef2d5f8690d48a42c4?d=identicon&version=1",
            "client": "ZulipElectron",
            "content": "<p>Here's part of the context of the Functor file.</p>\n<div class=\"codehilite\" data-code-language=\"Haskell\"><pre><span></span><code><span class=\"cm\">{-# LANGUAGE NoImplicitPrelude #-}</span>\n<span class=\"cm\">{-# LANGUAGE ScopedTypeVariables #-}</span>\n<span class=\"cm\">{-# LANGUAGE InstanceSigs #-}</span>\n\n<span class=\"kr\">module</span> <span class=\"nn\">Course.Functor</span> <span class=\"kr\">where</span>\n\n<span class=\"kr\">import</span> <span class=\"nn\">Course.Core</span>\n<span class=\"kr\">import</span> <span class=\"nn\">Course.ExactlyOne</span>\n<span class=\"kr\">import</span> <span class=\"nn\">Course.Optional</span>\n<span class=\"kr\">import</span> <span class=\"nn\">Course.List</span>\n<span class=\"kr\">import</span> <span class=\"k\">qualified</span> <span class=\"nn\">Prelude</span> <span class=\"k\">as</span> <span class=\"n\">P</span><span class=\"p\">(</span><span class=\"n\">fmap</span><span class=\"p\">)</span>\n\n<span class=\"kr\">class</span> <span class=\"kt\">Functor</span> <span class=\"n\">f</span> <span class=\"kr\">where</span>\n  <span class=\"c1\">-- Pronounced, eff-map.</span>\n  <span class=\"p\">(</span><span class=\"o\">&lt;$&gt;</span><span class=\"p\">)</span> <span class=\"ow\">::</span> <span class=\"p\">(</span><span class=\"n\">a</span> <span class=\"ow\">-&gt;</span> <span class=\"n\">b</span><span class=\"p\">)</span> <span class=\"ow\">-&gt;</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"ow\">-&gt;</span> <span class=\"n\">f</span> <span class=\"n\">b</span>\n\n<span class=\"kr\">infixl</span> <span class=\"mi\">4</span> <span class=\"o\">&lt;$&gt;</span>\n</code></pre></div>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 212102643,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "jacob.vartuli.92@gmail.com",
            "sender_full_name": "Jacob Vartuli-Schonberg (he) (F2'20)",
            "sender_id": 314689,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Trouble with OptionalT | MaybeT",
            "submessages": [],
            "timestamp": 1601658730,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4d074af6cc341ef51b25bb2f738cdb11?d=identicon&version=1",
            "client": "website",
            "content": "<p>I think your expectation of what type <code>oab</code> is is wrong, can you try again to tell me what it should be?</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 212102668,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "vaibhavsagar@gmail.com",
            "sender_full_name": "Vaibhav Sagar (he) (F1'16)",
            "sender_id": 100041,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Trouble with OptionalT | MaybeT",
            "submessages": [],
            "timestamp": 1601658748,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/b2f05ff47bfeb3ef2d5f8690d48a42c4?d=identicon&version=1",
            "client": "ZulipElectron",
            "content": "<p>Yeah! Okay. I pass an <code>OptionalT f (a -&gt; b)</code> to runOptionalT receiving an <code>f Optional (a -&gt; b)</code> which is passed to <code>&gt;&gt;=</code> in the first argument. The catch in the second argument in <code>&gt;&gt;=</code> being oab would be an <code>Optional (a -&gt; b)</code>. That's how I was thinking about it.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 212102958,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "jacob.vartuli.92@gmail.com",
            "sender_full_name": "Jacob Vartuli-Schonberg (he) (F2'20)",
            "sender_id": 314689,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Trouble with OptionalT | MaybeT",
            "submessages": [],
            "timestamp": 1601658936,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4d074af6cc341ef51b25bb2f738cdb11?d=identicon&version=1",
            "client": "website",
            "content": "<p>right, you need to account for the <code>f</code></p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 212103074,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "vaibhavsagar@gmail.com",
            "sender_full_name": "Vaibhav Sagar (he) (F1'16)",
            "sender_id": 100041,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Trouble with OptionalT | MaybeT",
            "submessages": [],
            "timestamp": 1601658988,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/7fe4a9620069ee6245f0c8203ab1500b16e49948?x=x&version=5",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-id=\"100041\">@Vaibhav Sagar (he) (F1'16)</span> Thanks for all this reading!</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 212103105,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "willthefirst@gmail.com",
            "sender_full_name": "Will Moritz (he) (F1'20)",
            "sender_id": 327378,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Functor, applicatives, and monads",
            "submessages": [],
            "timestamp": 1601659006,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/b2f05ff47bfeb3ef2d5f8690d48a42c4?d=identicon&version=1",
            "client": "ZulipElectron",
            "content": "<p>I'm not sure what you mean.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 212103111,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "jacob.vartuli.92@gmail.com",
            "sender_full_name": "Jacob Vartuli-Schonberg (he) (F2'20)",
            "sender_id": 314689,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Trouble with OptionalT | MaybeT",
            "submessages": [],
            "timestamp": 1601659011,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4d074af6cc341ef51b25bb2f738cdb11?d=identicon&version=1",
            "client": "website",
            "content": "<p>anytime <span aria-label=\"smiley\" class=\"emoji emoji-1f603\" role=\"img\" title=\"smiley\">:smiley:</span></p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 212103136,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "vaibhavsagar@gmail.com",
            "sender_full_name": "Vaibhav Sagar (he) (F1'16)",
            "sender_id": 100041,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Functor, applicatives, and monads",
            "submessages": [],
            "timestamp": 1601659024,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4d074af6cc341ef51b25bb2f738cdb11?d=identicon&version=1",
            "client": "website",
            "content": "<p>oh nvm, I misunderstood again</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 212103445,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "vaibhavsagar@gmail.com",
            "sender_full_name": "Vaibhav Sagar (he) (F1'16)",
            "sender_id": 100041,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Trouble with OptionalT | MaybeT",
            "submessages": [],
            "timestamp": 1601659207,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/b2f05ff47bfeb3ef2d5f8690d48a42c4?d=identicon&version=1",
            "client": "ZulipElectron",
            "content": "<p>Darn. If you were tackling this problem, how would you approach it? <span class=\"user-mention\" data-user-id=\"100041\">@Vaibhav Sagar (he) (F1'16)</span></p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 212103687,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "jacob.vartuli.92@gmail.com",
            "sender_full_name": "Jacob Vartuli-Schonberg (he) (F2'20)",
            "sender_id": 314689,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Trouble with OptionalT | MaybeT",
            "submessages": [],
            "timestamp": 1601659349,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4d074af6cc341ef51b25bb2f738cdb11?d=identicon&version=1",
            "client": "website",
            "content": "<p>I'd use do-notation</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 212103706,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "vaibhavsagar@gmail.com",
            "sender_full_name": "Vaibhav Sagar (he) (F1'16)",
            "sender_id": 100041,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Trouble with OptionalT | MaybeT",
            "submessages": [],
            "timestamp": 1601659359,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4d074af6cc341ef51b25bb2f738cdb11?d=identicon&version=1",
            "client": "website",
            "content": "<p>the thing that's tripping me up here is that each use of <code>&gt;&gt;=</code> is at a different layer and I am getting confused</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 212103752,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "vaibhavsagar@gmail.com",
            "sender_full_name": "Vaibhav Sagar (he) (F1'16)",
            "sender_id": 100041,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Trouble with OptionalT | MaybeT",
            "submessages": [],
            "timestamp": 1601659395,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4d074af6cc341ef51b25bb2f738cdb11?d=identicon&version=1",
            "client": "website",
            "content": "<p>also I would use typed holes</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 212103775,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "vaibhavsagar@gmail.com",
            "sender_full_name": "Vaibhav Sagar (he) (F1'16)",
            "sender_id": 100041,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Trouble with OptionalT | MaybeT",
            "submessages": [],
            "timestamp": 1601659409,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4d074af6cc341ef51b25bb2f738cdb11?d=identicon&version=1",
            "client": "website",
            "content": "<p>which is what I am trying right now</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 212103789,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "vaibhavsagar@gmail.com",
            "sender_full_name": "Vaibhav Sagar (he) (F1'16)",
            "sender_id": 100041,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Trouble with OptionalT | MaybeT",
            "submessages": [],
            "timestamp": 1601659418,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/b2f05ff47bfeb3ef2d5f8690d48a42c4?d=identicon&version=1",
            "client": "ZulipElectron",
            "content": "<p>I'm going to give that a shot!</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 212103812,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "jacob.vartuli.92@gmail.com",
            "sender_full_name": "Jacob Vartuli-Schonberg (he) (F2'20)",
            "sender_id": 314689,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Trouble with OptionalT | MaybeT",
            "submessages": [],
            "timestamp": 1601659430,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4d074af6cc341ef51b25bb2f738cdb11?d=identicon&version=1",
            "client": "website",
            "content": "<p>aha, something that seems to have worked is adding an <code>OptionalT $</code> to the front of the RHS</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 212104192,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "vaibhavsagar@gmail.com",
            "sender_full_name": "Vaibhav Sagar (he) (F1'16)",
            "sender_id": 100041,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Trouble with OptionalT | MaybeT",
            "submessages": [],
            "timestamp": 1601659606,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4d074af6cc341ef51b25bb2f738cdb11?d=identicon&version=1",
            "client": "website",
            "content": "<p>so now it looks like</p>\n<div class=\"codehilite\" data-code-language=\"Haskell\"><pre><span></span><code>  <span class=\"p\">(</span><span class=\"o\">&lt;*&gt;</span><span class=\"p\">)</span> <span class=\"n\">ofab</span> <span class=\"n\">ofa</span> <span class=\"ow\">=</span> <span class=\"kt\">OptionalT</span> <span class=\"o\">$</span> <span class=\"n\">runOptionalT</span> <span class=\"n\">ofab</span> <span class=\"o\">&gt;&gt;=</span> <span class=\"nf\">\\</span><span class=\"n\">oab</span> <span class=\"ow\">-&gt;</span>\n                   <span class=\"kr\">_</span>\n</code></pre></div>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 212104259,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "vaibhavsagar@gmail.com",
            "sender_full_name": "Vaibhav Sagar (he) (F1'16)",
            "sender_id": 100041,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Trouble with OptionalT | MaybeT",
            "submessages": [],
            "timestamp": 1601659643,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/b2f05ff47bfeb3ef2d5f8690d48a42c4?d=identicon&version=1",
            "client": "ZulipElectron",
            "content": "<p>That's a proper typehole on thee second line?</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 212104482,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "jacob.vartuli.92@gmail.com",
            "sender_full_name": "Jacob Vartuli-Schonberg (he) (F2'20)",
            "sender_id": 314689,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Trouble with OptionalT | MaybeT",
            "submessages": [],
            "timestamp": 1601659740,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4d074af6cc341ef51b25bb2f738cdb11?d=identicon&version=1",
            "client": "website",
            "content": "<p>yup!</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 212104975,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "vaibhavsagar@gmail.com",
            "sender_full_name": "Vaibhav Sagar (he) (F1'16)",
            "sender_id": 100041,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Trouble with OptionalT | MaybeT",
            "submessages": [],
            "timestamp": 1601659972,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4d074af6cc341ef51b25bb2f738cdb11?d=identicon&version=1",
            "client": "website",
            "content": "<p>actually I got so confused by <code>&gt;&gt;=</code> that I think it would be easier not to use it at first</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 212105053,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "vaibhavsagar@gmail.com",
            "sender_full_name": "Vaibhav Sagar (he) (F1'16)",
            "sender_id": 100041,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Trouble with OptionalT | MaybeT",
            "submessages": [],
            "timestamp": 1601660008,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4d074af6cc341ef51b25bb2f738cdb11?d=identicon&version=1",
            "client": "website",
            "content": "<div class=\"codehilite\" data-code-language=\"Haskell\"><pre><span></span><code>  <span class=\"p\">(</span><span class=\"o\">&lt;*&gt;</span><span class=\"p\">)</span> <span class=\"n\">ofab</span> <span class=\"n\">ofa</span> <span class=\"ow\">=</span> <span class=\"kr\">let</span>\n      <span class=\"n\">foab</span> <span class=\"ow\">=</span> <span class=\"n\">runOptionalT</span> <span class=\"n\">ofab</span>\n      <span class=\"n\">foa</span> <span class=\"ow\">=</span> <span class=\"n\">runOptionalT</span> <span class=\"n\">ofa</span>\n      <span class=\"kr\">in</span> <span class=\"kr\">_</span>\n</code></pre></div>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 212105077,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "vaibhavsagar@gmail.com",
            "sender_full_name": "Vaibhav Sagar (he) (F1'16)",
            "sender_id": 100041,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Trouble with OptionalT | MaybeT",
            "submessages": [],
            "timestamp": 1601660023,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/b2f05ff47bfeb3ef2d5f8690d48a42c4?d=identicon&version=1",
            "client": "ZulipElectron",
            "content": "<p>Same here! I'm going to try out what you have here and a do version. I'll post the results when I get there.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 212105384,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "jacob.vartuli.92@gmail.com",
            "sender_full_name": "Jacob Vartuli-Schonberg (he) (F2'20)",
            "sender_id": 314689,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Trouble with OptionalT | MaybeT",
            "submessages": [],
            "timestamp": 1601660206,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4d074af6cc341ef51b25bb2f738cdb11?d=identicon&version=1",
            "client": "website",
            "content": "<p>I have a solution! Feel free to peek if you get stumped:</p>\n<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n\n<div class=\"codehilite\" data-code-language=\"Haskell\"><pre><span></span><code>  <span class=\"p\">(</span><span class=\"o\">&lt;*&gt;</span><span class=\"p\">)</span> <span class=\"n\">ofab</span> <span class=\"n\">ofa</span> <span class=\"ow\">=</span> <span class=\"kt\">OptionalT</span> <span class=\"o\">$</span> <span class=\"n\">runOptionalT</span> <span class=\"n\">ofab</span> <span class=\"o\">&gt;&gt;=</span> <span class=\"nf\">\\</span><span class=\"n\">oab</span> <span class=\"ow\">-&gt;</span>\n                               <span class=\"n\">runOptionalT</span> <span class=\"n\">ofa</span>  <span class=\"o\">&gt;&gt;=</span> <span class=\"nf\">\\</span><span class=\"n\">oa</span> <span class=\"ow\">-&gt;</span>\n                               <span class=\"n\">pure</span> <span class=\"o\">$</span> <span class=\"n\">oab</span> <span class=\"o\">&lt;*&gt;</span> <span class=\"n\">oa</span>\n</code></pre></div>\n\n</div></div>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 212106244,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "vaibhavsagar@gmail.com",
            "sender_full_name": "Vaibhav Sagar (he) (F1'16)",
            "sender_id": 100041,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Trouble with OptionalT | MaybeT",
            "submessages": [],
            "timestamp": 1601660760,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4d074af6cc341ef51b25bb2f738cdb11?d=identicon&version=1",
            "client": "website",
            "content": "<p>I came up with a do-notation version that used both the insights I had above and worked backwards to replace <code>do</code> with <code>&gt;&gt;=</code></p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 212106366,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "vaibhavsagar@gmail.com",
            "sender_full_name": "Vaibhav Sagar (he) (F1'16)",
            "sender_id": 100041,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Trouble with OptionalT | MaybeT",
            "submessages": [],
            "timestamp": 1601660813,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/b2f05ff47bfeb3ef2d5f8690d48a42c4?d=identicon&version=1",
            "client": "ZulipElectron",
            "content": "<p>I couldn't help myself but to look. Hah! So you're resolving ofab to an <code>Optional (a -&gt; b)</code> and ofa to an <code>Optional a</code>. Then you're using <code>&lt;*&gt;</code> to apply the internal <code>a -&gt; b</code> to <code>a</code> and using pure to contextualize with <code>f</code>.  Finally, you're applying the Value Constructor <code>OptionalT</code> to the result of the aforementioned computation to resolve to an <code>OptionalT f b</code>.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 212108066,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "jacob.vartuli.92@gmail.com",
            "sender_full_name": "Jacob Vartuli-Schonberg (he) (F2'20)",
            "sender_id": 314689,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Trouble with OptionalT | MaybeT",
            "submessages": [],
            "timestamp": 1601661647,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/b2f05ff47bfeb3ef2d5f8690d48a42c4?d=identicon&version=1",
            "client": "ZulipElectron",
            "content": "<p>Thank you so much for your help! <span class=\"user-mention\" data-user-id=\"100041\">@Vaibhav Sagar (he) (F1'16)</span></p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 212108088,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "jacob.vartuli.92@gmail.com",
            "sender_full_name": "Jacob Vartuli-Schonberg (he) (F2'20)",
            "sender_id": 314689,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Trouble with OptionalT | MaybeT",
            "submessages": [],
            "timestamp": 1601661664,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4d074af6cc341ef51b25bb2f738cdb11?d=identicon&version=1",
            "client": "ZulipMobile",
            "content": "<p>Sure thing!</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 212109055,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f419",
                    "emoji_name": "octopus",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "jacob.vartuli.92@gmail.com",
                        "full_name": "Jacob Vartuli-Schonberg (he) (F2'20)",
                        "id": 314689
                    },
                    "user_id": 314689
                }
            ],
            "recipient_id": 22667,
            "sender_email": "vaibhavsagar@gmail.com",
            "sender_full_name": "Vaibhav Sagar (he) (F1'16)",
            "sender_id": 100041,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Trouble with OptionalT | MaybeT",
            "submessages": [],
            "timestamp": 1601662235,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/b2f05ff47bfeb3ef2d5f8690d48a42c4?d=identicon&version=1",
            "client": "ZulipElectron",
            "content": "<p>Here's another way that's in the spirit of your example!</p>\n<div class=\"codehilite\" data-code-language=\"Haskell\"><pre><span></span><code>  <span class=\"p\">(</span><span class=\"o\">&lt;*&gt;</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"kt\">OptionalT</span> <span class=\"n\">foab</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"kt\">OptionalT</span> <span class=\"n\">foa</span><span class=\"p\">)</span> <span class=\"ow\">=</span> <span class=\"kt\">OptionalT</span> <span class=\"o\">$</span> <span class=\"p\">(</span><span class=\"o\">&lt;*&gt;</span><span class=\"p\">)</span> <span class=\"o\">&lt;$&gt;</span> <span class=\"n\">foab</span> <span class=\"o\">&lt;*&gt;</span> <span class=\"n\">foa</span>\n</code></pre></div>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 212110490,
            "is_me_message": false,
            "last_edit_timestamp": 1601663074,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "jacob.vartuli.92@gmail.com",
            "sender_full_name": "Jacob Vartuli-Schonberg (he) (F2'20)",
            "sender_id": 314689,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Trouble with OptionalT | MaybeT",
            "submessages": [],
            "timestamp": 1601663036,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4d074af6cc341ef51b25bb2f738cdb11?d=identicon&version=1",
            "client": "ZulipMobile",
            "content": "<p>That's much nicer!</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 212147922,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "vaibhavsagar@gmail.com",
            "sender_full_name": "Vaibhav Sagar (he) (F1'16)",
            "sender_id": 100041,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Trouble with OptionalT | MaybeT",
            "submessages": [],
            "timestamp": 1601691072,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/612c7c2a108d7850c62d1d2293a481aa42855408?x=x&version=2",
            "client": "website",
            "content": "<p>One thing people haven't mentioned here yet is that monads explicitly set the up dependencies of values to force a specific evaluation ordering. I think that aspect of <code>&gt;&gt;=</code> is more important than the meanings of <code>pure</code> and <code>join</code>.</p>\n<p>In that same thread, applicatives let you do effects without any specified order, which is why we don't use them to model IO. If you did, it would be confusing because we care about the order of IO operations.</p>\n<p>Wheras functors are \"down to earth\" enough that folks can prettymuch understand them as a name for containers which can be mapped over.</p>\n<p>The wrapper functions <code>pure</code> and <code>return</code> and <code>$FUNCTOR_CONSTRUCTOR</code> aren't really helpful for understanding the distinctions between functor, applicative, and monad because they have effectively the same meaning.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 212486302,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "PLRedmond@gmail.com",
            "sender_full_name": "Patrick Redmond (W'14)",
            "sender_id": 5014,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Functor, applicatives, and monads",
            "submessages": [],
            "timestamp": 1602018648,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/612c7c2a108d7850c62d1d2293a481aa42855408?x=x&version=2",
            "client": "website",
            "content": "<p>So maybe you could present things as:</p>\n<ul>\n<li>Functors are containers you map over</li>\n<li>Applicatives are a kind of intermediary between functors and monads that you can map over, but also model unsequenced effects with</li>\n<li>Monads help you to sequence effects, and since they're also functors you can map over the result of the effect while it's still inside</li>\n</ul>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 212486628,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "PLRedmond@gmail.com",
            "sender_full_name": "Patrick Redmond (W'14)",
            "sender_id": 5014,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Functor, applicatives, and monads",
            "submessages": [],
            "timestamp": 1602018812,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/570b5294859a4650f5c6c4f866b6fba3e34af02b?x=x&version=2",
            "client": "website",
            "content": "<p>The reordering of computation in Applicative isn't something I've thought about before! Thanks, <span class=\"user-mention\" data-user-id=\"5014\">@Patrick Redmond (W'14)</span> <span aria-label=\"tada\" class=\"emoji emoji-1f389\" role=\"img\" title=\"tada\">:tada:</span></p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 212507245,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f419",
                    "emoji_name": "octopus",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "PLRedmond@gmail.com",
                        "full_name": "Patrick Redmond (W'14)",
                        "id": 5014
                    },
                    "user_id": 5014
                }
            ],
            "recipient_id": 22667,
            "sender_email": "tobinyehle@gmail.com",
            "sender_full_name": "Tobin Yehle (he) (SP1'20)",
            "sender_id": 105607,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Functor, applicatives, and monads",
            "submessages": [],
            "timestamp": 1602035579,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/8776bd2d19cdb1399c4e9589d9397d57290e5729?x=x&version=2",
            "client": "website",
            "content": "<p>I think: functor applies a function to values in a container, applicative applies functions in a container to values in that same container.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 212576782,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "shae.erisson@gmail.com",
            "sender_full_name": "Shae Matijs Erisson (he) (F1'19)",
            "sender_id": 221819,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Functor, applicatives, and monads",
            "submessages": [],
            "timestamp": 1602084900,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/7580ab83ada9265285a940c5a1098204?d=identicon&version=1",
            "client": "website",
            "content": "<p>For a 5 minute conversation I would maybe just focus on Functor? There is plenty of material there to chew on.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 212591749,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "ssbothwell@gmail.com",
            "sender_full_name": "Solomon Bothwell (he) (F2'19)",
            "sender_id": 240589,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Functor, applicatives, and monads",
            "submessages": [],
            "timestamp": 1602091575,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/7580ab83ada9265285a940c5a1098204?d=identicon&version=1",
            "client": "website",
            "content": "<p>Side note regading <code>Applicative</code>..</p>\n<p><code>Applicatives</code>, <code>Alternative</code>, and their duals are actually each <code>Lax Monoidal Functor</code> with some subset of it's laws.</p>\n<p>You can describe a <code>Lax Monoidal Functor</code> in Haskell like this:</p>\n<div class=\"codehilite\"><pre><span></span><code>class Functor f =&gt; Monoidal f where\n  unit :: f ()\n  (**) :: f a -&gt; f b -&gt; f (a,b)\n</code></pre></div>\n\n\n<p>It has these laws:</p>\n<div class=\"codehilite\"><pre><span></span><code>[naturality] fmap (f *** g) (u ** v) = fmap f u ** fmap g v\n [left identity] unit ** v \u2245 v\n[right identity] u ** unit \u2245 u\n [associativity] u ** (v ** w) \u2245 (u ** v) ** w\nWhere f *** g = \\(x,y) -&gt; (f x, g y)\n</code></pre></div>\n\n\n<p>And then you can define <code>Applicative</code> in terms of it:</p>\n<div class=\"codehilite\"><pre><span></span><code>class Monoidal f =&gt; Applicative&#39; f where\n  pure&#39; :: a -&gt; f a\n  pure&#39; a = const a &lt;$&gt; unit\n  (&lt;*&gt;) :: f (a -&gt; b) -&gt; f a -&gt; f b\n  (&lt;*&gt;) ff fa = (uncurry ($)) &lt;$&gt; (ff ** fa)\n</code></pre></div>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 212592554,
            "is_me_message": false,
            "last_edit_timestamp": 1602109177,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "ssbothwell@gmail.com",
            "sender_full_name": "Solomon Bothwell (he) (F2'19)",
            "sender_id": 240589,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Functor, applicatives, and monads",
            "submessages": [],
            "timestamp": 1602091927,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/7580ab83ada9265285a940c5a1098204?d=identicon&version=1",
            "client": "website",
            "content": "<p>You can see from <code>Monoidal</code> how whats really going on in <code>Applicative</code> is a sort of \"tupling\" of functorial values. This also makes fairly clear that there can be no sequencing, unlike with a monad.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 212593045,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "ssbothwell@gmail.com",
            "sender_full_name": "Solomon Bothwell (he) (F2'19)",
            "sender_id": 240589,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Functor, applicatives, and monads",
            "submessages": [],
            "timestamp": 1602092136,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/7fe4a9620069ee6245f0c8203ab1500b16e49948?x=x&version=5",
            "client": "website",
            "content": "<p>Thanks all for the thoughts!</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 212611283,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "willthefirst@gmail.com",
            "sender_full_name": "Will Moritz (he) (F1'20)",
            "sender_id": 327378,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Functor, applicatives, and monads",
            "submessages": [],
            "timestamp": 1602100668,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/612c7c2a108d7850c62d1d2293a481aa42855408?x=x&version=2",
            "client": "ZulipMobile",
            "content": "<p>Here's the thing about applications as unordered effects</p>\n<p><a href=\"http://strictlypositive.org/Idiom.pdf\">http://strictlypositive.org/Idiom.pdf</a></p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 215204095,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "PLRedmond@gmail.com",
            "sender_full_name": "Patrick Redmond (W'14)",
            "sender_id": 5014,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Functor, applicatives, and monads",
            "submessages": [],
            "timestamp": 1604167877,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/612c7c2a108d7850c62d1d2293a481aa42855408?x=x&version=2",
            "client": "ZulipMobile",
            "content": "<p>Which I think is the most helpful bridge between functor and monad..</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 215204112,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "PLRedmond@gmail.com",
            "sender_full_name": "Patrick Redmond (W'14)",
            "sender_id": 5014,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Functor, applicatives, and monads",
            "submessages": [],
            "timestamp": 1604167912,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/1a1cc60eecad744fd10abfc2700760d0b4397252?x=x&version=2",
            "client": "ZulipElectron",
            "content": "<p>Hey, I'm faced with something along the lines of the following:</p>\n<div class=\"codehilite\" data-code-language=\"import\"><pre><span></span><code>type PitchNum = Int\ntype DurationNum = Rational\n\nhn :: DurationNum\nhn = 1 % 2\n\nfive :: PitchNum\nfive = 5\n</code></pre></div>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 216287897,
            "is_me_message": false,
            "last_edit_timestamp": 1605050049,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "fivehmay@gmail.com",
            "sender_full_name": "Jaime Luis Piedra (he) (W1'20)",
            "sender_id": 361613,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Using an Int value within 2 different newtypes",
            "submessages": [],
            "timestamp": 1605050020,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/1a1cc60eecad744fd10abfc2700760d0b4397252?x=x&version=2",
            "client": "ZulipElectron",
            "content": "<p>As this shows, I can construct either of these by providing ordinary integral-number literals. However, what if I want to write a function such as the following?</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 216288012,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "fivehmay@gmail.com",
            "sender_full_name": "Jaime Luis Piedra (he) (W1'20)",
            "sender_id": 361613,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Using an Int value within 2 different newtypes",
            "submessages": [],
            "timestamp": 1605050095,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/1a1cc60eecad744fd10abfc2700760d0b4397252?x=x&version=2",
            "client": "ZulipElectron",
            "content": "<div class=\"codehilite\"><pre><span></span><code>numPair :: Int -&gt; (PitchNum, DurationNum)\nnumPair n =\n  (n, n % 2)\n</code></pre></div>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 216288052,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "fivehmay@gmail.com",
            "sender_full_name": "Jaime Luis Piedra (he) (W1'20)",
            "sender_id": 361613,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Using an Int value within 2 different newtypes",
            "submessages": [],
            "timestamp": 1605050119,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/1a1cc60eecad744fd10abfc2700760d0b4397252?x=x&version=2",
            "client": "ZulipElectron",
            "content": "<p>This doesn't type-check:</p>\n<div class=\"codehilite\"><pre><span></span><code>&lt;interactive&gt;:50:6: error:\n    \u2022 Couldn&#39;t match type \u2018Int\u2019 with \u2018Integer\u2019\n      Expected type: DurationNum\n        Actual type: Ratio Int\n    \u2022 In the expression: n % 2\n      In the expression: (n, n % 2)\n      In an equation for \u2018numPair\u2019: numPair n = (n, n % 2)\n</code></pre></div>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 216288090,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "fivehmay@gmail.com",
            "sender_full_name": "Jaime Luis Piedra (he) (W1'20)",
            "sender_id": 361613,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Using an Int value within 2 different newtypes",
            "submessages": [],
            "timestamp": 1605050160,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/1a1cc60eecad744fd10abfc2700760d0b4397252?x=x&version=2",
            "client": "ZulipElectron",
            "content": "<p>Oh <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span> on second thought I think this has to do with Rational being built out of Integer, not Int: </p>\n<div class=\"codehilite\"><pre><span></span><code>&gt; (1 :: Int) % 2 :: Rational\n\n&lt;interactive&gt;:65:1: error:\n    \u2022 Couldn&#39;t match type \u2018Int\u2019 with \u2018Integer\u2019\n      Expected type: Rational\n        Actual type: Ratio Int\n    \u2022 In the expression: (1 :: Int) % 2 :: Rational\n      In an equation for \u2018it\u2019: it = (1 :: Int) % 2 :: Rational\n</code></pre></div>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 216288368,
            "is_me_message": false,
            "last_edit_timestamp": 1605050387,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "fivehmay@gmail.com",
            "sender_full_name": "Jaime Luis Piedra (he) (W1'20)",
            "sender_id": 361613,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Using an Int value within 2 different newtypes",
            "submessages": [],
            "timestamp": 1605050374,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/1a1cc60eecad744fd10abfc2700760d0b4397252?x=x&version=2",
            "client": "ZulipElectron",
            "content": "<p>The original context in which this came up is the following. It's interesting because it seems like, using a list comprehension, I can only have the numbers that I select from be resolved into one member of the <code>Num</code> typeclass at a time. For instance, this attempt at casting each number from the range 2 different ways doesn't typecheck:</p>\n<div class=\"codehilite\"><pre><span></span><code> [ transpose (12 * ((n :: Int) `div` 2)) $\n    offset ((n :: Integer) % 2) $\n     forever c_maj_melody | n &lt;- [0..3] ]\n</code></pre></div>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 216288743,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "fivehmay@gmail.com",
            "sender_full_name": "Jaime Luis Piedra (he) (W1'20)",
            "sender_id": 361613,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Using an Int value within 2 different newtypes",
            "submessages": [],
            "timestamp": 1605050694,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/1a1cc60eecad744fd10abfc2700760d0b4397252?x=x&version=2",
            "client": "ZulipElectron",
            "content": "<p>Problem solved! The correct solution is to use <code>fromIntegral</code>:</p>\n<div class=\"codehilite\"><pre><span></span><code>&gt; :t [ (n :: Int, n :: Integer) | n &lt;- [0..3] ]\n\n&lt;interactive&gt;:1:14: error:\n    \u2022 Couldn&#39;t match expected type \u2018Integer\u2019 with actual type \u2018Int\u2019\n    \u2022 In the expression: n :: Integer\n      In the expression: (n :: Int, n :: Integer)\n      In the expression: [(n :: Int, n :: Integer) | n &lt;- [0 .. 3]]\n\n&gt; :t [ (fromIntegral n :: Int, fromIntegral n :: Integer) | n &lt;- [0..3] ]\n[ (fromIntegral n :: Int, fromIntegral n :: Integer) | n &lt;- [0..3] ] :: [(Int, Integer)]\n</code></pre></div>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 216290040,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "fivehmay@gmail.com",
            "sender_full_name": "Jaime Luis Piedra (he) (W1'20)",
            "sender_id": 361613,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Using an Int value within 2 different newtypes",
            "submessages": [],
            "timestamp": 1605051582,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/6485c74622306264ff53449c6f0ca540?d=identicon&version=1",
            "client": "website",
            "content": "<p>Yep! In your initial example you should only need a <code>fromIntegral</code> on the DurationNum, because the <code>n</code> is already an Int and that should make PitchNum happy, and it's only the argument to <code>%</code> that needs to be converted to an Integer</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 216315421,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "iain@mccoy.id.au",
            "sender_full_name": "Iain McCoy (he) (SP2'17)",
            "sender_id": 100806,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Using an Int value within 2 different newtypes",
            "submessages": [],
            "timestamp": 1605080720,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/1a1cc60eecad744fd10abfc2700760d0b4397252?x=x&version=2",
            "client": "ZulipElectron",
            "content": "<p>Today I learned about <code>allow-newer</code> flag for stack YAML configuration &amp; it was good.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 216529784,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "fivehmay@gmail.com",
            "sender_full_name": "Jaime Luis Piedra (he) (W1'20)",
            "sender_id": 361613,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Haskell stack elation",
            "submessages": [],
            "timestamp": 1605215783,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/1a1cc60eecad744fd10abfc2700760d0b4397252?x=x&version=2",
            "client": "ZulipElectron",
            "content": "<p>Obsolete version bounds in the <code>.cabal</code> for your project's external dependency getting you down? <code>allow-newer: true</code> in your project's <code>stack.yaml</code> can take care of it</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 216530030,
            "is_me_message": false,
            "last_edit_timestamp": 1605217480,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "fivehmay@gmail.com",
            "sender_full_name": "Jaime Luis Piedra (he) (W1'20)",
            "sender_id": 361613,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Haskell stack elation",
            "submessages": [],
            "timestamp": 1605215911,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/1a1cc60eecad744fd10abfc2700760d0b4397252?x=x&version=2",
            "client": "ZulipElectron",
            "content": "<p>Hey everyone, I've written up a <a href=\"https://gist.github.com/enlambdment/47d029dd95fc4d32f61005c3d8781cbb\">summary</a> of how I go about using Euterpea in stack projects nowadays. </p>\n<p>When I was just starting to learn Haskell, I was really enthusiastic about the possibility of using a computer-music library as a vehicle to study FP, and vice versa. But I faced some real challenges getting this to work in stack projects. Other work-arounds involved using an older GHC, which felt like a compromise. For any Recursers curious about the intersection of those two topics but who are newer to stack, I hope that this can spare some frustration in case they're curious to try things out.</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 216700740,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "fivehmay@gmail.com",
            "sender_full_name": "Jaime Luis Piedra (he) (W1'20)",
            "sender_id": 361613,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "Using Euterpea (for computer music) in stack projects",
            "submessages": [],
            "timestamp": 1605322123,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/1a1cc60eecad744fd10abfc2700760d0b4397252?x=x&version=2",
            "client": "ZulipElectron",
            "content": "<p>I'm trying to follow along with this <a href=\"https://blog.jle.im/entry/introduction-to-singletons-1.html#prerequisites\">multipart tutorial</a> on <code>singletons</code>(since I'm interested in dependent typing for use in coding neural nets) but this doesn't seem to work with the current version of <code>singletons</code>:</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 217079313,
            "is_me_message": false,
            "last_edit_timestamp": 1605657127,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "fivehmay@gmail.com",
            "sender_full_name": "Jaime Luis Piedra (he) (W1'20)",
            "sender_id": 361613,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "singletons tutorial",
            "submessages": [],
            "timestamp": 1605657116,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/1a1cc60eecad744fd10abfc2700760d0b4397252?x=x&version=2",
            "client": "ZulipElectron",
            "content": "<div class=\"codehilite\"><pre><span></span><code>-- 0. Define the ADT whose values we wish to work with\n--    both at term- and type-level.\ndata DoorState = Opened | Closed | Locked\n deriving (Show, Eq)\n\n-- 1. Leverage Template Haskell for generating our singlestons,\n--    given our type.\ngenSingletons [&#39;&#39;DoorState]\n\n{- ... -}\n\nghci&gt; :t SOpened `SCons` SClosed `SCons` SLocked `SCons` SNil\nSing &#39;[ &#39;Opened, &#39;Closed, &#39;Locked ]\n-- &#39;SCons is the singleton for `:` (cons),\n-- and &#39;SNil is the singleton for `[]` (nil)\n</code></pre></div>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 217079397,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "fivehmay@gmail.com",
            "sender_full_name": "Jaime Luis Piedra (he) (W1'20)",
            "sender_id": 361613,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "singletons tutorial",
            "submessages": [],
            "timestamp": 1605657180,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/1a1cc60eecad744fd10abfc2700760d0b4397252?x=x&version=2",
            "client": "ZulipElectron",
            "content": "<p>(I've elided some imports) Instead when I try this, or something similar invoking <code>SCons</code> / <code>SNil</code>, I get:</p>\n<div class=\"codehilite\"><pre><span></span><code>*Main&gt; :t STrue\nSTrue :: SBool &#39;True\n*Main&gt; :t SNil\n\n&lt;interactive&gt;:1:1: error: Data constructor not in scope: SNil\n*Main&gt; :t SCons\n\n&lt;interactive&gt;:1:1: error: Data constructor not in scope: SCons\n</code></pre></div>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 217079485,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "fivehmay@gmail.com",
            "sender_full_name": "Jaime Luis Piedra (he) (W1'20)",
            "sender_id": 361613,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "singletons tutorial",
            "submessages": [],
            "timestamp": 1605657245,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/1a1cc60eecad744fd10abfc2700760d0b4397252?x=x&version=2",
            "client": "ZulipElectron",
            "content": "<p>Oh. I forgot to import <code>Data.Singletons.Prelude.List</code>, once I do that everything works fine. (<code>SCons</code> / <code>SNil</code> / etc. must have been re-factored out into a separate module since this tutorial was written.) Thanks anyhow!</p>",
            "content_type": "text/html",
            "display_recipient": "haskell",
            "flags": [
                "read",
                "historical"
            ],
            "id": 217079654,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22667,
            "sender_email": "fivehmay@gmail.com",
            "sender_full_name": "Jaime Luis Piedra (he) (W1'20)",
            "sender_id": 361613,
            "sender_realm_str": "recurse",
            "stream_id": 20298,
            "subject": "singletons tutorial",
            "submessages": [],
            "timestamp": 1605657386,
            "topic_links": [],
            "type": "stream"
        }
    ],
    "msg": "",
    "result": "success"
}
