{
    "anchor": 0,
    "found_anchor": false,
    "found_newest": true,
    "found_oldest": true,
    "history_limited": false,
    "messages": [
        {
            "avatar_url": "https://secure.gravatar.com/avatar/f5348e1061215cf50eb1682b5da444ea?d=identicon&version=1",
            "client": "website",
            "content": "<p>while trying to do the YCombinator implementation in Emacs Lisp I learned that without lexical binding you would have kinda awesful code...</p>",
            "content_type": "text/html",
            "display_recipient": "today I learned",
            "flags": [
                "read",
                "historical"
            ],
            "id": 48374723,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 43625,
            "sender_email": "cestdiego@gmail.com",
            "sender_full_name": "Diego Berrocal (m1'17)",
            "sender_id": 8685,
            "sender_realm_str": "recurse",
            "stream_id": 27837,
            "subject": "Lexical Binding is a thing in Emacs Lisp! :O",
            "submessages": [],
            "timestamp": 1444839888,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/f5348e1061215cf50eb1682b5da444ea?d=identicon&version=1",
            "client": "website",
            "content": "<p>before Lexical Binding: </p>\n<div class=\"codehilite\"><pre>(defun YCombinator (f)\n  (lexical-let ((f1 f))\n    (funcall\n     #&#39;(lambda (x)\n         (lexical-let ((x1 x))\n           (funcall f1 #&#39;(lambda (y)\n                           (lexical-let ((y1 y))\n                             (funcall (funcall x1 x1) y))\n                           ))))\n     #&#39;(lambda (x)\n         (lexical-let ((x1 x))\n           (funcall f1 #&#39;(lambda (y)\n                           (lexical-let ((y1 y))\n                             (funcall (funcall x1 x1) y)))))))))\n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "today I learned",
            "flags": [
                "read",
                "historical"
            ],
            "id": 48374730,
            "is_me_message": false,
            "last_edit_timestamp": 1444839911,
            "reactions": [],
            "recipient_id": 43625,
            "sender_email": "cestdiego@gmail.com",
            "sender_full_name": "Diego Berrocal (m1'17)",
            "sender_id": 8685,
            "sender_realm_str": "recurse",
            "stream_id": 27837,
            "subject": "Lexical Binding is a thing in Emacs Lisp! :O",
            "submessages": [],
            "timestamp": 1444839902,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/f5348e1061215cf50eb1682b5da444ea?d=identicon&version=1",
            "client": "website",
            "content": "<p>after lexical binding:</p>\n<div class=\"codehilite\"><pre>  (defun YCombinator (fun)\n    (funcall\n     #&#39;(lambda (r)\n         (funcall fun (funcall r r)))\n     #&#39;(lambda (r)\n         (funcall fun (funcall r r)))))\n#+end_src\n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "today I learned",
            "flags": [
                "read",
                "historical"
            ],
            "id": 48374811,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 43625,
            "sender_email": "cestdiego@gmail.com",
            "sender_full_name": "Diego Berrocal (m1'17)",
            "sender_id": 8685,
            "sender_realm_str": "recurse",
            "stream_id": 27837,
            "subject": "Lexical Binding is a thing in Emacs Lisp! :O",
            "submessages": [],
            "timestamp": 1444840070,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/28427e9335cecebc2d8cadc90c1bd46516bd589f?x=x&version=3",
            "client": "website",
            "content": "<p>wat</p>",
            "content_type": "text/html",
            "display_recipient": "today I learned",
            "flags": [
                "read",
                "historical"
            ],
            "id": 62289550,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 43625,
            "sender_email": "darthmincho@gmail.com",
            "sender_full_name": "Carlos Rey (SP2'15)",
            "sender_id": 7875,
            "sender_realm_str": "recurse",
            "stream_id": 27837,
            "subject": "Lexical Binding is a thing in Emacs Lisp! :O",
            "submessages": [],
            "timestamp": 1469562725,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/f5348e1061215cf50eb1682b5da444ea?d=identicon&version=1",
            "client": "website",
            "content": "<p>wat</p>",
            "content_type": "text/html",
            "display_recipient": "today I learned",
            "flags": [
                "read",
                "historical"
            ],
            "id": 62291561,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 43625,
            "sender_email": "cestdiego@gmail.com",
            "sender_full_name": "Diego Berrocal (m1'17)",
            "sender_id": 8685,
            "sender_realm_str": "recurse",
            "stream_id": 27837,
            "subject": "Lexical Binding is a thing in Emacs Lisp! :O",
            "submessages": [],
            "timestamp": 1469566120,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/8f3e3f13689ac077fe4ae537e33bde345a57cb22?x=x&version=2",
            "client": "website",
            "content": "<p>Might it be NP-easy? <a href=\"https://en.wikipedia.org/wiki/NP-easy\" target=\"_blank\" title=\"https://en.wikipedia.org/wiki/NP-easy\">https://en.wikipedia.org/wiki/NP-easy</a></p>",
            "content_type": "text/html",
            "display_recipient": "today I learned",
            "flags": [
                "read",
                "historical"
            ],
            "id": 62394613,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f606",
                    "emoji_name": "laughing",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "eliasdorneles@gmail.com",
                        "full_name": "Elias Dorneles (he) (SP1'17)",
                        "id": 100512
                    },
                    "user_id": 100512
                }
            ],
            "recipient_id": 43625,
            "sender_email": "recurse@ardent.nebcorp.com",
            "sender_full_name": "Joe Ardent (he) (SP1'17)",
            "sender_id": 9097,
            "sender_realm_str": "recurse",
            "stream_id": 27837,
            "subject": "when it's not np-hard....",
            "submessages": [],
            "timestamp": 1469762373,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/2863327b03645a13df4fa6fdc9ce671b3e88047f?x=x&version=3",
            "client": "website",
            "content": "<p>TIL this thing exists: <a href=\"https://pypi.python.org/pypi/raincoat\" target=\"_blank\" title=\"https://pypi.python.org/pypi/raincoat\">https://pypi.python.org/pypi/raincoat</a></p>\n<p>When you workaround something from a third-party library that it's not implemented as you need, you can add a comment pinpointing the function/class and version of the third-party library that needs the workaround.</p>\n<p>Then, when you run <code>raincoat</code>, it will compare the library version in use with the one in the comments and tell you if it has had an update.</p>",
            "content_type": "text/html",
            "display_recipient": "today I learned",
            "flags": [
                "read",
                "historical"
            ],
            "id": 115166610,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 43625,
            "sender_email": "eliasdorneles@gmail.com",
            "sender_full_name": "Elias Dorneles (he) (SP1'17)",
            "sender_id": 100512,
            "sender_realm_str": "recurse",
            "stream_id": 27837,
            "subject": "tool to know when to stop using a workaround",
            "submessages": [],
            "timestamp": 1503946862,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/5741d3f5ad703c633e2c62e564b1ef0e?d=identicon&version=1",
            "client": "website",
            "content": "<p>TIL that all chrome (and chromium) active incognito windows share a cookie jar! </p>\n<p>There is a long running thread reporting the behavior:<br>\n<a href=\"https://bugs.chromium.org/p/chromium/issues/detail?id=24690\" target=\"_blank\" title=\"https://bugs.chromium.org/p/chromium/issues/detail?id=24690\">https://bugs.chromium.org/p/chromium/issues/detail?id=24690</a></p>\n<p>It was very surprising to me, I expect a new incognito window to not know who I am. I'm imagining how if you could spawn a hidden incognito chrome window on someone's computer you could do nasty things.</p>",
            "content_type": "text/html",
            "display_recipient": "today I learned",
            "flags": [
                "read",
                "historical"
            ],
            "id": 134990442,
            "is_me_message": false,
            "last_edit_timestamp": 1538422676,
            "reactions": [],
            "recipient_id": 43625,
            "sender_email": "connor@cdosborn.com",
            "sender_full_name": "Connor Osborn (F1'14)",
            "sender_id": 6427,
            "sender_realm_str": "recurse",
            "stream_id": 27837,
            "subject": "Chrome incognito woes",
            "submessages": [],
            "timestamp": 1538421121,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/635ab4f3efb5c26f8276373d9767320104538f85?x=x&version=2",
            "client": "ZulipElectron",
            "content": "<p>TIL that one may use the geometric mean to normalize ranges that are dissimilarly scaled: <a href=\"https://en.wikipedia.org/wiki/Geometric_mean\">https://en.wikipedia.org/wiki/Geometric_mean</a></p>",
            "content_type": "text/html",
            "display_recipient": "today I learned",
            "flags": [
                "read",
                "historical"
            ],
            "id": 211201682,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 43625,
            "sender_email": "jpholzmann@gmail.com",
            "sender_full_name": "Justin Holzmann (he) (S2'20)",
            "sender_id": 315058,
            "sender_realm_str": "recurse",
            "stream_id": 27837,
            "subject": "geometric mean",
            "submessages": [],
            "timestamp": 1600989582,
            "topic_links": [],
            "type": "stream"
        }
    ],
    "msg": "",
    "result": "success"
}
