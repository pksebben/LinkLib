{
    "anchor": 0,
    "found_anchor": false,
    "found_newest": true,
    "found_oldest": true,
    "history_limited": false,
    "messages": [
        {
            "avatar_url": "https://secure.gravatar.com/avatar/e9ca87600f9c4b8836d44263e04ed3c7?d=identicon&version=1",
            "client": "website",
            "content": "<p>I'm working on the extension to Martin Odersky's Coursera course at <a href=\"http://lamp.epfl.ch/page-69099-en.html\" target=\"_blank\" title=\"http://lamp.epfl.ch/page-69099-en.html\">http://lamp.epfl.ch/page-69099-en.html</a>, feel free to join.</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 6434536,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "rut216@gmail.com",
            "sender_full_name": "Alex Skryl (S'13)",
            "sender_id": 2167,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "coursera",
            "submessages": [],
            "timestamp": 1370286515,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/0aac726e8ce27b55809824e7f6de77e7?d=identicon&version=1",
            "client": "website",
            "content": "<p>Well, I do have to learn scala by monday...</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 6434545,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "jamie@scattered-thoughts.net",
            "sender_full_name": "Jamie Brandon (he) (W1'20)",
            "sender_id": 863,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "(no subject)",
            "submessages": [],
            "timestamp": 1370286566,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/e9ca87600f9c4b8836d44263e04ed3c7?d=identicon&version=1",
            "client": "website",
            "content": "<p>table by the microwave</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 6434869,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "rut216@gmail.com",
            "sender_full_name": "Alex Skryl (S'13)",
            "sender_id": 2167,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "coursera",
            "submessages": [],
            "timestamp": 1370287282,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4f5279e356a105513701942b5b6af05f?d=identicon&version=1",
            "client": "website",
            "content": "<p>Anyone up to do scala code reviews? I am programming super-un-idiomatic Scala and would like someone to tell me why it's awful.</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 6436317,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "clemmer.alexander@gmail.com",
            "sender_full_name": "Alex Clemmer (S'13)",
            "sender_id": 2132,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "(no subject)",
            "submessages": [],
            "timestamp": 1370290137,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p>@<strong>Alex Clemmer</strong>, if no one shows up, I'm sure @<strong>Alex Payne</strong> could help by email until he gets here for his residency.</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 6436433,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "(no subject)",
            "submessages": [],
            "timestamp": 1370290365,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4f5279e356a105513701942b5b6af05f?d=identicon&version=1",
            "client": "website",
            "content": "<p>@<strong>Alan O'Donnell</strong>, alas, I think I may have already tapped Alex Payne out by asking him to chat with me about my hefty main project.</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 6436494,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "clemmer.alexander@gmail.com",
            "sender_full_name": "Alex Clemmer (S'13)",
            "sender_id": 2132,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "(no subject)",
            "submessages": [],
            "timestamp": 1370290514,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/3fcb27e39d2ff47357a803e91347fee4?d=identicon&version=1",
            "client": "website",
            "content": "<p>Getting to your response, @Alex Clemmer:)</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 6436605,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "al3x@al3x.net",
            "sender_full_name": "Alex Payne",
            "sender_id": 943,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "(no subject)",
            "submessages": [],
            "timestamp": 1370290727,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/3fcb27e39d2ff47357a803e91347fee4?d=identicon&version=1",
            "client": "website",
            "content": "<p>Definitely happy to help via email</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 6436609,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "al3x@al3x.net",
            "sender_full_name": "Alex Payne",
            "sender_id": 943,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "(no subject)",
            "submessages": [],
            "timestamp": 1370290742,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/f6bd929465d6d225def8062d5a9d3f3f?d=identicon&version=1",
            "client": "website",
            "content": "<p>Thanks for posting that link; wish I was still in NYC to discuss weeks 8-14 in person!</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 6437862,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "danluu@gmail.com",
            "sender_full_name": "Dan Luu (W'13)",
            "sender_id": 820,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "coursera",
            "submessages": [],
            "timestamp": 1370293045,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/d495685876a5a195b6ef5fb9a269b6d0dcd5c5fe?x=x&version=1",
            "client": "website",
            "content": "<p>I'd like to sit in on a scala code review to learn from your mistakes as well as my own.</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 6438176,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "pnf@podsnap.com",
            "sender_full_name": "Peter Fraenkel (he) (S'13)",
            "sender_id": 2142,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "(no subject)",
            "submessages": [],
            "timestamp": 1370293502,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/d495685876a5a195b6ef5fb9a269b6d0dcd5c5fe?x=x&version=1",
            "client": "website",
            "content": "<p>I am getting impatient trying to use sbt.  Is this a sign of bad character?</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 6438739,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "pnf@podsnap.com",
            "sender_full_name": "Peter Fraenkel (he) (S'13)",
            "sender_id": 2142,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "(no subject)",
            "submessages": [],
            "timestamp": 1370294635,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/5b65284e717ae0b857be0040ec9649840d256672?x=x&version=1",
            "client": "website",
            "content": "<p>@<strong>Peter Fraenkel</strong> If you figure out some way to speed it up, let me know. It also drives me insane how long it takes to start up, run, or go into the repl</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 6438798,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "veriathon@gmail.com",
            "sender_full_name": "James Wang (S'13)",
            "sender_id": 2103,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "(no subject)",
            "submessages": [],
            "timestamp": 1370294742,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/d495685876a5a195b6ef5fb9a269b6d0dcd5c5fe?x=x&version=1",
            "client": "website",
            "content": "<p>Where are you sitting?</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 6438842,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "pnf@podsnap.com",
            "sender_full_name": "Peter Fraenkel (he) (S'13)",
            "sender_id": 2142,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "(no subject)",
            "submessages": [],
            "timestamp": 1370294793,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/f6bd929465d6d225def8062d5a9d3f3f?d=identicon&version=1",
            "client": "website",
            "content": "<p>If you use emacs you can have ensime run an sbt process and automatically recompile on changes, which saves a bit of time. I believe vim also has ensime support. I get around the repl issue by using tmux and always having one pane that's a scala repl.</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 6440251,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "danluu@gmail.com",
            "sender_full_name": "Dan Luu (W'13)",
            "sender_id": 820,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "(no subject)",
            "submessages": [],
            "timestamp": 1370297431,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/d495685876a5a195b6ef5fb9a269b6d0dcd5c5fe?x=x&version=1",
            "client": "website",
            "content": "<p>I got sbt/ensime/emacs going yesterday.  It appears a bit buggy, but when it works it's gorgeous.  I also use tmux, but with ensime there's pretty easy access to the repl from within emacs.</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 6463672,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "pnf@podsnap.com",
            "sender_full_name": "Peter Fraenkel (he) (S'13)",
            "sender_id": 2142,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "(no subject)",
            "submessages": [],
            "timestamp": 1370353060,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/d495685876a5a195b6ef5fb9a269b6d0dcd5c5fe?x=x&version=1",
            "client": "website",
            "content": "<p>Anybody know of any scala swing apps to crib from?</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 6468210,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "pnf@podsnap.com",
            "sender_full_name": "Peter Fraenkel (he) (S'13)",
            "sender_id": 2142,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "swing",
            "submessages": [],
            "timestamp": 1370362490,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/d495685876a5a195b6ef5fb9a269b6d0dcd5c5fe?x=x&version=1",
            "client": "website",
            "content": "<p>Alternative question: am I an idiot for messing with this?  The documentation isn't very recent.</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 6468566,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "pnf@podsnap.com",
            "sender_full_name": "Peter Fraenkel (he) (S'13)",
            "sender_id": 2142,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "swing",
            "submessages": [],
            "timestamp": 1370363298,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4f5279e356a105513701942b5b6af05f?d=identicon&version=1",
            "client": "website",
            "content": "<p>Swing is definitely unfashionable. Whether you want to deal with it is up to you.</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 6476573,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "clemmer.alexander@gmail.com",
            "sender_full_name": "Alex Clemmer (S'13)",
            "sender_id": 2132,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "swing",
            "submessages": [],
            "timestamp": 1370377565,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/fcd59db6d86365a6fba1ce0f9c7b8102?d=identicon&version=1",
            "client": "website",
            "content": "<p>(If you listen to the call of the dark side, you could use seesaw <a href=\"https://github.com/daveray/seesaw\" target=\"_blank\" title=\"https://github.com/daveray/seesaw\">https://github.com/daveray/seesaw</a>) </p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 6476621,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "zack@zacharymaril.com",
            "sender_full_name": "Zack Maril (S'13)",
            "sender_id": 2130,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "swing",
            "submessages": [],
            "timestamp": 1370377658,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/d495685876a5a195b6ef5fb9a269b6d0dcd5c5fe?x=x&version=1",
            "client": "website",
            "content": "<p>Is this the right combination of idiomatic and efficient?</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 6549288,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "pnf@podsnap.com",
            "sender_full_name": "Peter Fraenkel (he) (S'13)",
            "sender_id": 2142,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "rolling averages",
            "submessages": [],
            "timestamp": 1370536059,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/d495685876a5a195b6ef5fb9a269b6d0dcd5c5fe?x=x&version=1",
            "client": "website",
            "content": "<p>(0 to 10).view.scan( (0,0,Array.ofDim<a href=\"http://4\" target=\"_blank\" title=\"http://4\">Int</a>) )<br>\n                   ( {case ((i:Int,s:Int,a:Array[Int]),v:Int)  =&gt;<br>\n                         (i+1, s + v - a(i%4), a.updated(i%4,v) ) } ).<br>\n       map {case (i:Int,v:Int,a) =&gt; v/4.0}.force</p>\n<p>I want something that is efficient in that it doesn't do unnecessary copies or sums, so the use of updated doesn't bother me.  If this is reasonable,  I'll rewrite my main image averaging loop in this fashion.</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 6549295,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "pnf@podsnap.com",
            "sender_full_name": "Peter Fraenkel (he) (S'13)",
            "sender_id": 2142,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "rolling averages",
            "submessages": [],
            "timestamp": 1370536077,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/d495685876a5a195b6ef5fb9a269b6d0dcd5c5fe?x=x&version=1",
            "client": "website",
            "content": "<p>Hmm.  That seems to have mangled the code somewhat.</p>\n<p>(0 to 10).view.scan( (0,0,Array.ofDim<a href=\"http://4\" target=\"_blank\" title=\"http://4\">Int</a>) )<br>\n                   ( {case ((i:Int,s:Int,a:Array[Int]),v:Int)  =&gt;<br>\n                         (i+1, s + v - a(i%4), a.updated(i%4,v) ) } ).<br>\n       map {case (i:Int,v:Int,a) =&gt; v/4.0}.force</p>\n<p>I want something that is efficient in that it doesn't do unnecessary copies or sums, so the use of updated doesn't bother me.  If this is reasonable,  I'll rewrite my main image averaging loop in this fashion.</p>\n<p>- Peter</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 6549337,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "pnf@podsnap.com",
            "sender_full_name": "Peter Fraenkel (he) (S'13)",
            "sender_id": 2142,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "rolling averages",
            "submessages": [],
            "timestamp": 1370536121,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/b4d94d953db52e1e7cfc3724b95a6dc906fa9d58?x=x&version=2",
            "client": "website",
            "content": "<div class=\"codehilite\"><pre><span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"n\">to</span> <span class=\"mi\">10</span><span class=\"o\">).</span><span class=\"n\">view</span><span class=\"o\">.</span><span class=\"n\">scan</span><span class=\"o\">(</span> <span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">,</span><span class=\"mi\">0</span><span class=\"o\">,</span><span class=\"nc\">Array</span><span class=\"o\">.</span><span class=\"n\">ofDimInt</span><span class=\"o\">)</span> <span class=\"o\">)</span>\n<span class=\"o\">(</span> <span class=\"o\">{</span><span class=\"k\">case</span> <span class=\"o\">((</span><span class=\"n\">i</span><span class=\"k\">:</span><span class=\"kt\">Int</span><span class=\"o\">,</span><span class=\"n\">s</span><span class=\"k\">:</span><span class=\"kt\">Int</span><span class=\"o\">,</span><span class=\"n\">a</span><span class=\"k\">:</span><span class=\"kt\">Array</span><span class=\"o\">[</span><span class=\"kt\">Int</span><span class=\"o\">]),</span><span class=\"n\">v</span><span class=\"k\">:</span><span class=\"kt\">Int</span><span class=\"o\">)</span> <span class=\"k\">=&gt;</span>\n<span class=\"o\">(</span><span class=\"n\">i</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">s</span> <span class=\"o\">+</span> <span class=\"n\">v</span> <span class=\"o\">-</span> <span class=\"n\">a</span><span class=\"o\">(</span><span class=\"n\">i</span><span class=\"o\">%</span><span class=\"mi\">4</span><span class=\"o\">),</span> <span class=\"n\">a</span><span class=\"o\">.</span><span class=\"n\">updated</span><span class=\"o\">(</span><span class=\"n\">i</span><span class=\"o\">%</span><span class=\"mi\">4</span><span class=\"o\">,</span><span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">)</span> <span class=\"o\">}</span> <span class=\"o\">).</span>\n<span class=\"n\">map</span> <span class=\"o\">{</span><span class=\"k\">case</span> <span class=\"o\">(</span><span class=\"n\">i</span><span class=\"k\">:</span><span class=\"kt\">Int</span><span class=\"o\">,</span><span class=\"n\">v</span><span class=\"k\">:</span><span class=\"kt\">Int</span><span class=\"o\">,</span><span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"k\">=&gt;</span> <span class=\"n\">v</span><span class=\"o\">/</span><span class=\"mf\">4.0</span><span class=\"o\">}.</span><span class=\"n\">force</span>\n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 6549350,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "me@ballingt.com",
            "sender_full_name": "Tom Ballinger (he) (W'12)",
            "sender_id": 807,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "rolling averages",
            "submessages": [],
            "timestamp": 1370536182,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/d495685876a5a195b6ef5fb9a269b6d0dcd5c5fe?x=x&version=1",
            "client": "website",
            "content": "<p>Now legibly:</p>\n<div class=\"codehilite\"><pre>(0 to 10).view.scan( (0,0,Array.ofDim[Int](4)) )\n                   ( {case ((i:Int,s:Int,a:Array[Int]),v:Int)  =&gt;\n                         (i+1, s + v - a(i%4), a.updated(i%4,v) ) } ).\n       map {case (i:Int,v:Int,a) =&gt; v/4.0}.force\n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 6549623,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "pnf@podsnap.com",
            "sender_full_name": "Peter Fraenkel (he) (S'13)",
            "sender_id": 2142,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "rolling averages",
            "submessages": [],
            "timestamp": 1370536593,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/d495685876a5a195b6ef5fb9a269b6d0dcd5c5fe?x=x&version=1",
            "client": "website",
            "content": "<p>According to Alex Payne, this \"seems reasonable.\"</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 6550285,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "pnf@podsnap.com",
            "sender_full_name": "Peter Fraenkel (he) (S'13)",
            "sender_id": 2142,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "(no subject)",
            "submessages": [],
            "timestamp": 1370537835,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/d495685876a5a195b6ef5fb9a269b6d0dcd5c5fe?x=x&version=1",
            "client": "website",
            "content": "<p>In my demo app, I need to process pages sequentially in the background, without delaying the startup of the gui.  If we ask for a page that isn't processed yet, we display the raw one.  In the current implementation, I handle this with an AtomicInteger containing the last page processsed, but I've been struggling to think of a way to do it functionally.</p>\n<p>What I came up with is below.  The costly processing here is just a sum with a sleep. The foldLeft call returns immediately with a vector of Future[Int], each element of which can be checked for readiness.  Because the futures are chained together with nested maps, they're guaranteed to be processed sequentially.  You can see that this works from the last two outputs.</p>\n<p>Is this insane?  The procedural/concurrent approach is prone to error, but what I came up with instead seems much harder to understand.</p>\n<div class=\"codehilite\"><pre>scala&gt; def costlyReduction(i:Int,j:Int) = {Thread.sleep(5000); i+j}\ncostlyReduction: (i: Int, j: Int)Int\n\nscala&gt; val y = (1 to 10).scanLeft(future{1})( (f,i)=&gt;f.map(costlyReduction(_,i)) )\ny: scala.collection.immutable.IndexedSeq[scala.concurrent.Future[Int]] = Vector(scala.concurrent.impl.Promise$DefaultPromise@15d330d, scala.concurrent.impl.Promise$DefaultPromise@1c2aa91, scala.concurrent.impl.Promise$DefaultPromise@14c25e1, scala.concurrent.impl.Promise$DefaultPromise@4ae9e8, scala.concurrent.impl.Promise$DefaultPromise@429409, scala.concurrent.impl.Promise$DefaultPromise@104e95d, scala.concurrent.impl.Promise$DefaultPromise@175054d, scala.concurrent.impl.Promise$DefaultPromise@1af0400, scala.concurrent.impl.Promise$DefaultPromise@12fd963, scala.concurrent.impl.Promise$DefaultPromise@68f437, scala.concurrent.impl.Promise$DefaultPromise@7964d6)\n\nscala&gt; y.map(_.value)\nres99: scala.collection.immutable.IndexedSeq[Option[scala.util.Try[Int]]] = Vector(Some(Success(1)), None, None, None, None, None, None, None, None, None, None)\n\nscala&gt; y.map(_.value)\nres100: scala.collection.immutable.IndexedSeq[Option[scala.util.Try[Int]]] = Vector(Some(Success(1)), Some(Success(2)), None, None, None, None, None, None, None, None, None)\n\nscala&gt; y.map(_.value)\nres101: scala.collection.immutable.IndexedSeq[Option[scala.util.Try[Int]]] = Vector(Some(Success(1)), Some(Success(2)), Some(Success(4)), None, None, None, None, None, None, None, None)\n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 6571470,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "pnf@podsnap.com",
            "sender_full_name": "Peter Fraenkel (he) (S'13)",
            "sender_id": 2142,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "Background processing",
            "submessages": [],
            "timestamp": 1370580919,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/f6bd929465d6d225def8062d5a9d3f3f?d=identicon&version=1",
            "client": "website",
            "content": "<p>@<strong>Peter Fraenkel</strong>, I don't know if @<strong>Daniel Schobel</strong> still checks humbug, but this sounds similar to a problem he had, maybe? My natural inclination for what it sounds like you're doing would be to use akka actors, but I may be generally biased towards actors :-).</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 6592641,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "danluu@gmail.com",
            "sender_full_name": "Dan Luu (W'13)",
            "sender_id": 820,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "background processing",
            "submessages": [],
            "timestamp": 1370628599,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/d495685876a5a195b6ef5fb9a269b6d0dcd5c5fe?x=x&version=1",
            "client": "website",
            "content": "<p>It wasn't obvious to me how to use actors, though I'd really like to become biased towards them.  I did come with with a cute way to hide the complexity of the chained futures:</p>\n<div class=\"codehilite\"><pre>class SeqFut[A](s : Seq[A]) {\n    // like scanLeft, but returns sequence of chained futures\n    def scanLeftFut[B](i0:B)(r:(B,A)=&gt;B) : Seq[Future[B]]=\n    s.scanLeft(future{i0})((f,i)=&gt;f.map(j=&gt;r(j,i)))\n}\nobject ImplicitSeq2SeqFut {\n  implicit def Seq2SeqFut[T](s:Seq[T]) = new SeqFut(s)\n}\n</pre></div>\n\n\n<p>after which I can do</p>\n<div class=\"codehilite\"><pre>val z = (1 to 10).scanLeftFut(0)( (i,j)=&gt; whatever )\n</pre></div>\n\n\n<p>and get back a nice vector of future objects that will get resolved in order.</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 6594228,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "pnf@podsnap.com",
            "sender_full_name": "Peter Fraenkel (he) (S'13)",
            "sender_id": 2142,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "(no subject)",
            "submessages": [],
            "timestamp": 1370631530,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/6f583488b0ceaaef4a19844132a81ec9?d=identicon&version=1",
            "client": "website",
            "content": "<p>@<strong>Peter Fraenkel</strong> I think a scanLeft is a reasonable solution for serial processing when you want to produce an aggregate result (the chained future) in a non-blocking manner along with the intermediary futures.</p>\n<p>If performance is a concern I would just break with the church of FP and do something like:</p>\n<div class=\"codehilite\"><pre><span class=\"k\">val</span> <span class=\"n\">proc</span> <span class=\"k\">=</span> <span class=\"o\">(</span><span class=\"n\">do_expensive_page_processing</span> <span class=\"k\">_</span><span class=\"o\">)</span> <span class=\"n\">andThen</span> <span class=\"o\">(</span><span class=\"n\">update_application_state</span> <span class=\"k\">_</span><span class=\"o\">)</span>\n<span class=\"n\">future</span><span class=\"o\">(</span><span class=\"n\">pages</span><span class=\"o\">.</span><span class=\"n\">map</span><span class=\"o\">{</span><span class=\"n\">proc</span><span class=\"o\">(</span><span class=\"k\">_</span><span class=\"o\">)})</span>\n</pre></div>\n\n\n<p>Why?</p>\n<p>1. it's non-blocking<br>\n2. it processes your pages in serial<br>\n3. the code is trivial to understand<br>\n4. it creates significantly fewer objects on the heap (calling map on a future creates a new promise and you're calling map once for each element of your input)</p>\n<p>If scalability or job durability become issues, I would go with @<strong>danluu</strong>'s suggestion and use a simple two actor system for implementing a job queue since Akka gives you guarantees about message ordering between two actors.</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 6611617,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "dschobel@gmail.com",
            "sender_full_name": "Daniel Schobel (W'13)",
            "sender_id": 837,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "background processing",
            "submessages": [],
            "timestamp": 1370670540,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/d495685876a5a195b6ef5fb9a269b6d0dcd5c5fe?x=x&version=1",
            "client": "website",
            "content": "<p>The following is legal scala with an actual meaning!</p>\n<div class=\"codehilite\"><pre>trait GenericFunctor[-&gt;&gt;[_, _], -&gt;&gt;&gt;[_, _], F[_]] {\n\n  def fmap[A, B](f: A -&gt;&gt; B): F[A] -&gt;&gt;&gt; F[B]\n}\n\ntrait Functor[F[_]] extends GenericFunctor[Function, Function, F] {\n   final def fmap[A, B](as: F[A])(f: A =&gt; B): F[B] =\n    fmap(f)(as)\n}\n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 6776002,
            "is_me_message": false,
            "last_edit_timestamp": 1371067235,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "pnf@podsnap.com",
            "sender_full_name": "Peter Fraenkel (he) (S'13)",
            "sender_id": 2142,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "line noise",
            "submessages": [],
            "timestamp": 1371067192,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/8f56292221169ff830d205457d243276?d=identicon&version=1",
            "client": "website",
            "content": "<p>Quick syntax question. What does the @ symbol represent in this example?</p>\n<div class=\"codehilite\"><pre><span class=\"k\">object</span> <span class=\"nc\">P26</span> <span class=\"o\">{</span>\n  <span class=\"c1\">// flatMapSublists is like list.flatMap, but instead of passing each element</span>\n  <span class=\"c1\">// to the function, it passes successive sublists of L.</span>\n  <span class=\"k\">def</span> <span class=\"n\">flatMapSublists</span><span class=\"o\">[</span><span class=\"kt\">A</span>,<span class=\"kt\">B</span><span class=\"o\">](</span><span class=\"n\">ls</span><span class=\"k\">:</span> <span class=\"kt\">List</span><span class=\"o\">[</span><span class=\"kt\">A</span><span class=\"o\">])(</span><span class=\"n\">f</span><span class=\"k\">:</span> <span class=\"o\">(</span><span class=\"kt\">List</span><span class=\"o\">[</span><span class=\"kt\">A</span><span class=\"o\">])</span> <span class=\"k\">=&gt;</span> <span class=\"nc\">List</span><span class=\"o\">[</span><span class=\"kt\">B</span><span class=\"o\">])</span><span class=\"k\">:</span> <span class=\"kt\">List</span><span class=\"o\">[</span><span class=\"kt\">B</span><span class=\"o\">]</span> <span class=\"k\">=</span> \n    <span class=\"n\">ls</span> <span class=\"k\">match</span> <span class=\"o\">{</span>\n      <span class=\"k\">case</span> <span class=\"nc\">Nil</span> <span class=\"k\">=&gt;</span> <span class=\"nc\">Nil</span>\n      <span class=\"k\">case</span> <span class=\"n\">sublist</span><span class=\"o\">@(</span><span class=\"k\">_</span> <span class=\"o\">::</span> <span class=\"n\">tail</span><span class=\"o\">)</span> <span class=\"k\">=&gt;</span> <span class=\"n\">f</span><span class=\"o\">(</span><span class=\"n\">sublist</span><span class=\"o\">)</span> <span class=\"o\">:::</span> <span class=\"n\">flatMapSublists</span><span class=\"o\">(</span><span class=\"n\">tail</span><span class=\"o\">)(</span><span class=\"n\">f</span><span class=\"o\">)</span>\n    <span class=\"o\">}</span>\n\n  <span class=\"k\">def</span> <span class=\"n\">combinations</span><span class=\"o\">[</span><span class=\"kt\">A</span><span class=\"o\">](</span><span class=\"n\">n</span><span class=\"k\">:</span> <span class=\"kt\">Int</span><span class=\"o\">,</span> <span class=\"n\">ls</span><span class=\"k\">:</span> <span class=\"kt\">List</span><span class=\"o\">[</span><span class=\"kt\">A</span><span class=\"o\">])</span><span class=\"k\">:</span> <span class=\"kt\">List</span><span class=\"o\">[</span><span class=\"kt\">List</span><span class=\"o\">[</span><span class=\"kt\">A</span><span class=\"o\">]]</span> <span class=\"k\">=</span>\n    <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"nc\">List</span><span class=\"o\">(</span><span class=\"nc\">Nil</span><span class=\"o\">)</span>\n    <span class=\"k\">else</span> <span class=\"n\">flatMapSublists</span><span class=\"o\">(</span><span class=\"n\">ls</span><span class=\"o\">)</span> <span class=\"o\">{</span> <span class=\"n\">sl</span> <span class=\"k\">=&gt;</span>\n      <span class=\"n\">combinations</span><span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">sl</span><span class=\"o\">.</span><span class=\"n\">tail</span><span class=\"o\">)</span> <span class=\"n\">map</span> <span class=\"o\">{</span><span class=\"n\">sl</span><span class=\"o\">.</span><span class=\"n\">head</span> <span class=\"o\">::</span> <span class=\"k\">_</span><span class=\"o\">}</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 7028848,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "dhbikoff@gmail.com",
            "sender_full_name": "Derek Bikoff (S'13)",
            "sender_id": 2106,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "syntax",
            "submessages": [],
            "timestamp": 1371671573,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/7a59c708d63d6e411127984a042dfe273ce90e04?x=x&version=1",
            "client": "website",
            "content": "<p>@<strong>Derek Bikoff</strong> I thiiiink that means that <code>sublist</code> is bound to the whole list, ie the head and the tail</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 7029032,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "spacemanaki@gmail.com",
            "sender_full_name": "Aki Yamada (S'13)",
            "sender_id": 2118,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "syntax",
            "submessages": [],
            "timestamp": 1371671889,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/7a59c708d63d6e411127984a042dfe273ce90e04?x=x&version=1",
            "client": "website",
            "content": "<p>I assume you meant the <code>@</code> in <code>case sublist@(_ :: tail) =&gt; ...</code></p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 7029042,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "spacemanaki@gmail.com",
            "sender_full_name": "Aki Yamada (S'13)",
            "sender_id": 2118,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "syntax",
            "submessages": [],
            "timestamp": 1371671910,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/8f56292221169ff830d205457d243276?d=identicon&version=1",
            "client": "website",
            "content": "<p>Yeah, that's what I was referring to.</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 7029265,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "dhbikoff@gmail.com",
            "sender_full_name": "Derek Bikoff (S'13)",
            "sender_id": 2106,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "syntax",
            "submessages": [],
            "timestamp": 1371672347,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/6f583488b0ceaaef4a19844132a81ec9?d=identicon&version=1",
            "client": "website",
            "content": "<p>yep, it's a way to bind to the entire matched expression</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 7057752,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "dschobel@gmail.com",
            "sender_full_name": "Daniel Schobel (W'13)",
            "sender_id": 837,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "syntax",
            "submessages": [],
            "timestamp": 1371741790,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/d495685876a5a195b6ef5fb9a269b6d0dcd5c5fe?x=x&version=1",
            "client": "website",
            "content": "<p>I'm confused.  The class C declaration below uses vanilla implicit, but D and E are supposed to be equivalent.  They're not</p>\n<div class=\"codehilite\"><pre>telekhine:~ pnf$ scala\nWelcome to Scala version 2.10.2 (Java HotSpot(TM) 64-Bit Server VM, Java 1.7.0_21).\nType in expressions to have them evaluated.\nType :help for more information.\n\nscala&gt; implicit def strToInt(x:String) = x.toInt\nwarning: there were 1 feature warning(s); re-run with -feature for details\nstrToInt: (x: String)Int\n\nscala&gt; class C[A](v:A){def a(implicit ev:A=&gt;Int)=123+ev(v)}\ndefined class C\n\nscala&gt; class D[A](v:A){def a[A&lt;%Int]=123+v}\n&lt;console&gt;:8: error: overloaded method value + with alternatives:\n  (x: Double)Double &lt;and&gt;\n  (x: Float)Float &lt;and&gt;\n  (x: Long)Long &lt;and&gt;\n  (x: Int)Int &lt;and&gt;\n  (x: Char)Int &lt;and&gt;\n  (x: Short)Int &lt;and&gt;\n  (x: Byte)Int &lt;and&gt;\n  (x: String)String\n cannot be applied to (A)\n       class D[A](v:A){def a[A&lt;%Int]=123+v}\n                                        ^\n\nscala&gt; class E[A](v:A){def a(implicit ev:A&lt;%&lt;Int)=123+v}\n&lt;console&gt;:8: error: not found: type &lt;%&lt;\n       class E[A](v:A){def a(implicit ev:A&lt;%&lt;Int)=123+v}\n                                          ^\n&lt;console&gt;:8: error: overloaded method value + with alternatives:\n  (x: Double)Double &lt;and&gt;\n  (x: Float)Float &lt;and&gt;\n  (x: Long)Long &lt;and&gt;\n  (x: Int)Int &lt;and&gt;\n  (x: Char)Int &lt;and&gt;\n  (x: Short)Int &lt;and&gt;\n  (x: Byte)Int &lt;and&gt;\n  (x: String)String\n cannot be applied to (A)\n       class E[A](v:A){def a(implicit ev:A&lt;%&lt;Int)=123+v}\n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 7098619,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "pnf@podsnap.com",
            "sender_full_name": "Peter Fraenkel (he) (S'13)",
            "sender_id": 2142,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "view constraints",
            "submessages": [],
            "timestamp": 1371835322,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/d84e3106fff0d257cc5a95ca9ea44405?d=identicon&version=1",
            "client": "website",
            "content": "<p>@<strong>Alex Payne</strong> send me those links whenever you get a chance. thanks!</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 7206389,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "george.w.king@gmail.com",
            "sender_full_name": "George King (he) (S'13)",
            "sender_id": 2153,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "design papers?",
            "submessages": [],
            "timestamp": 1372110197,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/3fcb27e39d2ff47357a803e91347fee4?d=identicon&version=1",
            "client": "website",
            "content": "<p><a href=\"http://lampwww.epfl.ch/~odersky/papers/ScalaOverview.html\" target=\"_blank\" title=\"http://lampwww.epfl.ch/~odersky/papers/ScalaOverview.html\">http://lampwww.epfl.ch/~odersky/papers/ScalaOverview.html</a></p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 7206443,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "al3x@al3x.net",
            "sender_full_name": "Alex Payne",
            "sender_id": 943,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "design papers?",
            "submessages": [],
            "timestamp": 1372110352,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/3fcb27e39d2ff47357a803e91347fee4?d=identicon&version=1",
            "client": "website",
            "content": "<p>Others at <a href=\"http://lampwww.epfl.ch/~odersky/papers/\" target=\"_blank\" title=\"http://lampwww.epfl.ch/~odersky/papers/\">http://lampwww.epfl.ch/~odersky/papers/</a> but that's the foundational one</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 7206487,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "al3x@al3x.net",
            "sender_full_name": "Alex Payne",
            "sender_id": 943,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "design papers?",
            "submessages": [],
            "timestamp": 1372110413,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/d84e3106fff0d257cc5a95ca9ea44405?d=identicon&version=1",
            "client": "website",
            "content": "<p>wonderful... plenty of reading there :)</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 7206685,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "george.w.king@gmail.com",
            "sender_full_name": "George King (he) (S'13)",
            "sender_id": 2153,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "design papers?",
            "submessages": [],
            "timestamp": 1372110780,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/ddf79a11b9b2a19ed45394c4fd3167fb?d=identicon&version=1",
            "client": "website",
            "content": "<p>@<strong>Alex Skryl</strong> hey Alex, just wondered how you found this course? Am assuming from the link it is all Scala based? Was it a good thorough introduction for you?</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 7313068,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "ruby.childs1@gmail.com",
            "sender_full_name": "Ruby Childs (she) (F'12)",
            "sender_id": 883,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "coursera",
            "submessages": [],
            "timestamp": 1372355503,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/ddf79a11b9b2a19ed45394c4fd3167fb?d=identicon&version=1",
            "client": "website",
            "content": "<p>Just wondered if anyone had any really great resources for Scala i.e. books, lectures etc. Am thinking of starting the coursera course (saved in my archive) but wanted feedback from people's experience</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 7313349,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "ruby.childs1@gmail.com",
            "sender_full_name": "Ruby Childs (she) (F'12)",
            "sender_id": 883,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "Resource",
            "submessages": [],
            "timestamp": 1372355979,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/7a59c708d63d6e411127984a042dfe273ce90e04?x=x&version=1",
            "client": "website",
            "content": "<p>I really liked that Coursera class, I had always heard that Scala was this huge hairy language like C++, but M Odersky picked a really nice subset of Scala for the class, and he's a great lecturer IMHO. it is a bit slow if you've read SICP or done other functional programming, but not too much hand holding</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 7313468,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "spacemanaki@gmail.com",
            "sender_full_name": "Aki Yamada (S'13)",
            "sender_id": 2118,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "Resource",
            "submessages": [],
            "timestamp": 1372356152,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/d495685876a5a195b6ef5fb9a269b6d0dcd5c5fe?x=x&version=1",
            "client": "website",
            "content": "<p>I really like Scala for the Impatient.   The first chapters are free at <a href=\"http://horstmann.com/scala/\" target=\"_blank\" title=\"http://horstmann.com/scala/\">http://horstmann.com/scala/</a><br>\nI also found <a href=\"http://twitter.github.io/scala_school/\" target=\"_blank\" title=\"http://twitter.github.io/scala_school/\">http://twitter.github.io/scala_school/</a> to be useful.</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 7316901,
            "is_me_message": false,
            "last_edit_timestamp": 1372362353,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "pnf@podsnap.com",
            "sender_full_name": "Peter Fraenkel (he) (S'13)",
            "sender_id": 2142,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "resource",
            "submessages": [],
            "timestamp": 1372362175,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/cbf3df51bfe8fb404d46d0839ec2d6d3?d=identicon&version=1",
            "client": "website",
            "content": "<p>sweet! anyone go through <a href=\"http://www.scalakoans.org/\" target=\"_blank\" title=\"http://www.scalakoans.org/\">http://www.scalakoans.org/</a> ?</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 7317041,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "jeconnol@gmail.com",
            "sender_full_name": "John E. Connolly (he) (W'12)",
            "sender_id": 951,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "resource",
            "submessages": [],
            "timestamp": 1372362454,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/e9ca87600f9c4b8836d44263e04ed3c7?d=identicon&version=1",
            "client": "website",
            "content": "<p>Hi Ruby, the coursera course was great! Highly recommended! As far as being a good intro to Scala... the course is actually more about functional programming and only uses Scala as a teaching language. Scala features are introduced as necessary to ease the implementation of the concepts presented. If you want to learn Scala well, you would need some supplementary material.</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 7318511,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "rut216@gmail.com",
            "sender_full_name": "Alex Skryl (S'13)",
            "sender_id": 2167,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "coursera",
            "submessages": [],
            "timestamp": 1372364993,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/e9ca87600f9c4b8836d44263e04ed3c7?d=identicon&version=1",
            "client": "website",
            "content": "<p>Oh, and I originally found it on Coursera ;) Someone on the discussion forums there linked to the original EPFL course. </p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 7318594,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "rut216@gmail.com",
            "sender_full_name": "Alex Skryl (S'13)",
            "sender_id": 2167,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "coursera",
            "submessages": [],
            "timestamp": 1372365074,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/8f56292221169ff830d205457d243276?d=identicon&version=1",
            "client": "website",
            "content": "<p>I've been sporadically working through the <a href=\"http://aperiodic.net/phil/scala/s-99/\" target=\"_blank\" title=\"http://aperiodic.net/phil/scala/s-99/\">99 Scala Problems</a> </p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 7318828,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "dhbikoff@gmail.com",
            "sender_full_name": "Derek Bikoff (S'13)",
            "sender_id": 2106,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "resource",
            "submessages": [],
            "timestamp": 1372365438,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/ddf79a11b9b2a19ed45394c4fd3167fb?d=identicon&version=1",
            "client": "website",
            "content": "<p>@<strong>Alex Skryl</strong> Thanks Alex, I will most probably use Scala Koans, as well as Twitter Scala tutorials and books! Just thought this would be a great intro :) thanks for your feedback</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 7319353,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "ruby.childs1@gmail.com",
            "sender_full_name": "Ruby Childs (she) (F'12)",
            "sender_id": 883,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "coursera",
            "submessages": [],
            "timestamp": 1372366391,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/6f583488b0ceaaef4a19844132a81ec9?d=identicon&version=1",
            "client": "website",
            "content": "<p>You cannot beat Odersky's Coursera FP course as an intro to Scala.</p>\n<p>Twitter's Scala School (linked by Peter) is really useful for getting productive fast.</p>\n<p>I also really like their \"Effective Scala\" doc (<a href=\"http://twitter.github.io/effectivescala/\" target=\"_blank\" title=\"http://twitter.github.io/effectivescala/\">http://twitter.github.io/effectivescala/</a>) as a reference for more advanced material (concurrency, error handling, etc).</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 7333298,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "dschobel@gmail.com",
            "sender_full_name": "Daniel Schobel (W'13)",
            "sender_id": 837,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "resource",
            "submessages": [],
            "timestamp": 1372398821,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/d495685876a5a195b6ef5fb9a269b6d0dcd5c5fe?x=x&version=1",
            "client": "website",
            "content": "<p>One specific advantage of Impatient is that it gives hints about which parts of the scaladocs (the api web app) you should ignore at first.<br>\nOne specific disadvantage of the twitter pages is that they are a few versions behind, and some of the examples don't work in 2.10.<br>\nOne general disadvantage of all the resources is that none of them give good advice on setting up an environment.  (The exception would be me, though the other resources are better in every other respect.)</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 7342563,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "pnf@podsnap.com",
            "sender_full_name": "Peter Fraenkel (he) (S'13)",
            "sender_id": 2142,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "resource",
            "submessages": [],
            "timestamp": 1372424547,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/ddf79a11b9b2a19ed45394c4fd3167fb?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"pnf@podsnap.com\">@Peter Fraenkel</span> <span class=\"user-mention\" data-user-email=\"dschobel@gmail.com\">@Daniel Schobel</span> <span class=\"user-mention\" data-user-email=\"dhbikoff@gmail.com\">@Derek Bikoff</span> <span class=\"user-mention\" data-user-email=\"spacemanaki@gmail.com\">@Aki Yamada</span> Thanks for all of your help and suggestions! Getting on the Scala boat tomorrow :)</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 7654218,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "ruby.childs1@gmail.com",
            "sender_full_name": "Ruby Childs (she) (F'12)",
            "sender_id": 883,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "resource",
            "submessages": [],
            "timestamp": 1373206895,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/d495685876a5a195b6ef5fb9a269b6d0dcd5c5fe?x=x&version=1",
            "client": "website",
            "content": "<p>Maybe we could have a brief in-person convening of the scala boat? I've been finding it a bit lonely.</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 7656575,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "pnf@podsnap.com",
            "sender_full_name": "Peter Fraenkel (he) (S'13)",
            "sender_id": 2142,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "resource",
            "submessages": [],
            "timestamp": 1373213412,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/ddf79a11b9b2a19ed45394c4fd3167fb?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"pnf@podsnap.com\">@Peter Fraenkel</span> would love too but sadly UK based!</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 7687808,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "ruby.childs1@gmail.com",
            "sender_full_name": "Ruby Childs (she) (F'12)",
            "sender_id": 883,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "resource",
            "submessages": [],
            "timestamp": 1373291042,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/68d290086d937a2aeefbed8b4da8909f?d=identicon&version=1",
            "client": "website",
            "content": "<p>I've found 'Scala for the Impatient' to be a pretty nice intro into learning Scala - <a href=\"http://www.amazon.com/Scala-Impatient-Cay-S-Horstmann/dp/0321774094\" target=\"_blank\" title=\"http://www.amazon.com/Scala-Impatient-Cay-S-Horstmann/dp/0321774094\">http://www.amazon.com/Scala-Impatient-Cay-S-Horstmann/dp/0321774094</a></p>\n<p>It's slightly out of date so it doesn't cover Akka actors or Scala Futures/Promises; these things are also not covered in the official 'Programming in Scala' by Odersky, though.</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 8284816,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "angusb@gmail.com",
            "sender_full_name": "Angus Burton (F'12)",
            "sender_id": 898,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "Resource",
            "submessages": [],
            "timestamp": 1374557361,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/d495685876a5a195b6ef5fb9a269b6d0dcd5c5fe?x=x&version=1",
            "client": "website",
            "content": "<p>I agree.  It really is what the title promises, and it gets you to the point where you can learn the fancy stuff yourself.   The first half of the book is free at <a href=\"http://typesafe.com/resources/free-books\" target=\"_blank\" title=\"http://typesafe.com/resources/free-books\">http://typesafe.com/resources/free-books</a>, btw, and if you value your blind loathing of DRM at more than $12, there's the full ePub/pdf at <a href=\"http://www.informit.com/store/scala-for-the-impatient-9780321774095\" target=\"_blank\" title=\"http://www.informit.com/store/scala-for-the-impatient-9780321774095\">http://www.informit.com/store/scala-for-the-impatient-9780321774095</a>. <br>\n</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 8296295,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "pnf@podsnap.com",
            "sender_full_name": "Peter Fraenkel (he) (S'13)",
            "sender_id": 2142,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "Resource",
            "submessages": [],
            "timestamp": 1374587778,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"nada.amin@gmail.com\">@Nada Amin</span>, halp!</p>\n<p>Let's say you're writing a little GADT-style type-safe evaluator for arithmetic expressions. I don't understand the difference between these two versions. The first fails to typecheck, but the later works fine.</p>\n<p>Plausible but bad:</p>\n<div class=\"codehilite\"><pre><span class=\"k\">trait</span> <span class=\"nc\">Expr</span><span class=\"o\">[</span><span class=\"kt\">T</span><span class=\"o\">]</span> <span class=\"o\">{</span>\n  <span class=\"k\">def</span> <span class=\"n\">eval</span><span class=\"k\">:</span> <span class=\"kt\">T</span> <span class=\"o\">=</span> <span class=\"k\">this</span> <span class=\"k\">match</span> <span class=\"o\">{</span>\n    <span class=\"k\">case</span> <span class=\"nc\">Num</span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"k\">=&gt;</span> <span class=\"n\">n</span>\n    <span class=\"k\">case</span> <span class=\"nc\">Plus</span><span class=\"o\">(</span><span class=\"n\">l</span><span class=\"o\">,</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"k\">=&gt;</span> <span class=\"n\">l</span><span class=\"o\">.</span><span class=\"n\">eval</span> <span class=\"o\">+</span> <span class=\"n\">r</span><span class=\"o\">.</span><span class=\"n\">eval</span>\n    <span class=\"k\">case</span> <span class=\"nc\">IsZero</span><span class=\"o\">(</span><span class=\"n\">e</span><span class=\"o\">)</span> <span class=\"k\">=&gt;</span> <span class=\"n\">e</span><span class=\"o\">.</span><span class=\"n\">eval</span> <span class=\"o\">==</span> <span class=\"mi\">0</span>\n    <span class=\"k\">case</span> <span class=\"nc\">If</span><span class=\"o\">(</span><span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"n\">t</span><span class=\"o\">,</span> <span class=\"n\">e</span><span class=\"o\">)</span> <span class=\"k\">=</span> <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">p</span><span class=\"o\">.</span><span class=\"n\">eval</span><span class=\"o\">)</span> <span class=\"n\">t</span><span class=\"o\">.</span><span class=\"n\">eval</span> <span class=\"k\">else</span> <span class=\"n\">e</span><span class=\"o\">.</span><span class=\"n\">eval</span>\n  <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n\n<span class=\"k\">case</span> <span class=\"k\">class</span> <span class=\"nc\">Num</span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"k\">:</span> <span class=\"kt\">Int</span><span class=\"o\">)</span> <span class=\"k\">extends</span> <span class=\"nc\">Expr</span><span class=\"o\">[</span><span class=\"kt\">Int</span><span class=\"o\">]</span>\n<span class=\"k\">case</span> <span class=\"k\">class</span> <span class=\"nc\">Plus</span><span class=\"o\">(</span><span class=\"n\">l</span><span class=\"k\">:</span> <span class=\"kt\">Expr</span><span class=\"o\">[</span><span class=\"kt\">Int</span><span class=\"o\">],</span> <span class=\"n\">r</span><span class=\"k\">:</span> <span class=\"kt\">Expr</span><span class=\"o\">[</span><span class=\"kt\">Int</span><span class=\"o\">])</span> <span class=\"k\">extends</span> <span class=\"nc\">Expr</span><span class=\"o\">[</span><span class=\"kt\">Int</span><span class=\"o\">]</span>\n<span class=\"k\">case</span> <span class=\"k\">class</span> <span class=\"nc\">IsZero</span><span class=\"o\">(</span><span class=\"n\">e</span><span class=\"k\">:</span> <span class=\"kt\">Expr</span><span class=\"o\">[</span><span class=\"kt\">Int</span><span class=\"o\">])</span> <span class=\"k\">extends</span> <span class=\"nc\">Expr</span><span class=\"o\">[</span><span class=\"kt\">Boolean</span><span class=\"o\">]</span>\n<span class=\"k\">case</span> <span class=\"k\">class</span> <span class=\"nc\">If</span><span class=\"o\">[</span><span class=\"kt\">T</span><span class=\"o\">](</span><span class=\"n\">p</span><span class=\"k\">:</span> <span class=\"kt\">Expr</span><span class=\"o\">[</span><span class=\"kt\">Boolean</span><span class=\"o\">],</span> <span class=\"n\">t</span><span class=\"k\">:</span> <span class=\"kt\">Expr</span><span class=\"o\">[</span><span class=\"kt\">T</span><span class=\"o\">],</span> <span class=\"n\">e</span><span class=\"k\">:</span> <span class=\"kt\">Expr</span><span class=\"o\">[</span><span class=\"kt\">T</span><span class=\"o\">])</span> <span class=\"k\">extends</span> <span class=\"nc\">Expr</span><span class=\"o\">[</span><span class=\"kt\">T</span><span class=\"o\">]</span>\n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 8921794,
            "is_me_message": false,
            "last_edit_timestamp": 1376053601,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "type inference",
            "submessages": [],
            "timestamp": 1376053587,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p>Good:</p>\n<div class=\"codehilite\"><pre><span class=\"k\">trait</span> <span class=\"nc\">Expr</span><span class=\"o\">[</span><span class=\"kt\">T</span><span class=\"o\">]</span> <span class=\"o\">{</span>\n  <span class=\"k\">def</span> <span class=\"n\">eval</span><span class=\"k\">:</span> <span class=\"kt\">T</span> <span class=\"o\">=</span> <span class=\"o\">{</span>\n    <span class=\"k\">def</span> <span class=\"n\">ev</span><span class=\"o\">[</span><span class=\"kt\">U</span><span class=\"o\">](</span><span class=\"n\">e</span><span class=\"k\">:</span> <span class=\"kt\">Expr</span><span class=\"o\">[</span><span class=\"kt\">U</span><span class=\"o\">])</span><span class=\"k\">:</span> <span class=\"kt\">U</span> <span class=\"o\">=</span> <span class=\"n\">e</span> <span class=\"k\">match</span> <span class=\"o\">{</span>\n      <span class=\"k\">case</span> <span class=\"nc\">Num</span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"k\">=&gt;</span> <span class=\"n\">n</span>\n      <span class=\"k\">case</span> <span class=\"nc\">Plus</span><span class=\"o\">(</span><span class=\"n\">l</span><span class=\"o\">,</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"k\">=&gt;</span> <span class=\"n\">l</span><span class=\"o\">.</span><span class=\"n\">eval</span> <span class=\"o\">+</span> <span class=\"n\">r</span><span class=\"o\">.</span><span class=\"n\">eval</span>\n      <span class=\"k\">case</span> <span class=\"nc\">IsZero</span><span class=\"o\">(</span><span class=\"n\">e</span><span class=\"o\">)</span> <span class=\"k\">=&gt;</span> <span class=\"n\">e</span><span class=\"o\">.</span><span class=\"n\">eval</span> <span class=\"o\">==</span> <span class=\"mi\">0</span>\n      <span class=\"k\">case</span> <span class=\"nc\">If</span><span class=\"o\">(</span><span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"n\">t</span><span class=\"o\">,</span> <span class=\"n\">e</span><span class=\"o\">)</span> <span class=\"k\">=&gt;</span> <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">p</span><span class=\"o\">.</span><span class=\"n\">eval</span><span class=\"o\">)</span> <span class=\"n\">t</span><span class=\"o\">.</span><span class=\"n\">eval</span> <span class=\"k\">else</span> <span class=\"n\">e</span><span class=\"o\">.</span><span class=\"n\">eval</span>\n    <span class=\"o\">}</span>\n    <span class=\"n\">ev</span><span class=\"o\">(</span><span class=\"k\">this</span><span class=\"o\">)</span>\n  <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 8921804,
            "is_me_message": false,
            "last_edit_timestamp": 1376053679,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "type inference",
            "submessages": [],
            "timestamp": 1376053632,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p>I don't understand what's happening with typechecking/inference that makes the second version work; it feels like I'm doing the same thing.</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 8921866,
            "is_me_message": false,
            "last_edit_timestamp": 1376053754,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "type inference",
            "submessages": [],
            "timestamp": 1376053744,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/6fcf78ff016b9e89d65cf5108925915a?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"alan@hackerschool.com\">@Alan O'Donnell</span>  Sadly, GADTs in Scala are currently pretty broken/limited... I mentioned your example to Tiark Rompf, and he was actually surprised that the second version even works.  Our guess is the type of 'this' doesn't get refined by pattern matching, but somehow, the type of the argument 'e' does...</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 8922720,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "nada.amin@gmail.com",
            "sender_full_name": "Nada Amin",
            "sender_id": 2178,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "type inference",
            "submessages": [],
            "timestamp": 1376055826,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p>Ha, interesting :)</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 8922829,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "type inference",
            "submessages": [],
            "timestamp": 1376056081,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/d495685876a5a195b6ef5fb9a269b6d0dcd5c5fe?x=x&version=1",
            "client": "website",
            "content": "<p>Which aspect specifically is broken?  This sort of type inference isn't limited to GADT implementaitons.</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 8924955,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "pnf@podsnap.com",
            "sender_full_name": "Peter Fraenkel (he) (S'13)",
            "sender_id": 2142,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "type inference",
            "submessages": [],
            "timestamp": 1376060655,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"pnf@podsnap.com\">@Peter Fraenkel</span>, I'm not really sure--I'm finding that I don't understand type inference all that well in Scala, period. But I don't understand why one version would work while the other doesn't. I mean, they're basically eta-equivalent! (Hopefully I'm using that term correctly.)</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 8932034,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "type inference",
            "submessages": [],
            "timestamp": 1376073990,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/d495685876a5a195b6ef5fb9a269b6d0dcd5c5fe?x=x&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"alan@hackerschool.com\">@Alan O'Donnell</span> Can you paste your code into a gist? For some reason, copy/paste from zulip removes all the \\n's for me.</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 8932870,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "pnf@podsnap.com",
            "sender_full_name": "Peter Fraenkel (he) (S'13)",
            "sender_id": 2142,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "type inference",
            "submessages": [],
            "timestamp": 1376075531,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"pnf@podsnap.com\">@Peter Fraenkel</span>: <a href=\"https://gist.github.com/happy4crazy/6196404\" target=\"_blank\" title=\"https://gist.github.com/happy4crazy/6196404\">https://gist.github.com/happy4crazy/6196404</a></p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 8933299,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "type inference",
            "submessages": [],
            "timestamp": 1376076267,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p>Updated it (forgot a line)</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 8934046,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "type inference",
            "submessages": [],
            "timestamp": 1376077673,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/d495685876a5a195b6ef5fb9a269b6d0dcd5c5fe?x=x&version=1",
            "client": "website",
            "content": "<p>Thanks.  I needed to experience the brokenness.</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 9023117,
            "is_me_message": false,
            "last_edit_timestamp": 1376320301,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "pnf@podsnap.com",
            "sender_full_name": "Peter Fraenkel (he) (S'13)",
            "sender_id": 2142,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "type inference",
            "submessages": [],
            "timestamp": 1376320273,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/aa92b21f4a06f87dae635ed43f9595f5?d=identicon&version=1",
            "client": "website",
            "content": "<p>why are conversion functions not wrapped in an option? for instance, calling <code>\"a\".toInt</code> throws an exception.</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 9074665,
            "is_me_message": false,
            "last_edit_timestamp": 1376431040,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "robert.buonpastore@gmail.com",
            "sender_full_name": "Robert Buonpastore (S'13)",
            "sender_id": 2126,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "(no topic)",
            "submessages": [],
            "timestamp": 1376431024,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/ddf79a11b9b2a19ed45394c4fd3167fb?d=identicon&version=1",
            "client": "website",
            "content": "<p>hi all,</p>\n<p>I have created a scala sheet Expr.scala in my week4 package then in a worksheet created an object as follows:</p>\n<div class=\"codehilite\"><pre>object showExpr{\n\n      def show(e: Expr): String = e match{\n                    ..................\n       }\n      show(Sum(Number(1), Number(44)))\n   }\n</pre></div>\n\n\n<p>The worksheet seems fine acknowledging the Sum and Number, but says the Expr is not found (although it is defined in the same package.) Is this an issue with the Scala Worksheet?</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 9101324,
            "is_me_message": false,
            "last_edit_timestamp": 1376496365,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "ruby.childs1@gmail.com",
            "sender_full_name": "Ruby Childs (she) (F'12)",
            "sender_id": 883,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "Issues with Worksheet",
            "submessages": [],
            "timestamp": 1376496197,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p>I've never used a worksheet, but I'm surprised it would be able to find <code>Sum</code> and <code>Number</code>; presumably they're case classes that extend <code>Expr</code>?</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 9101710,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "Issues with Worksheet",
            "submessages": [],
            "timestamp": 1376496955,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/ddf79a11b9b2a19ed45394c4fd3167fb?d=identicon&version=1",
            "client": "website",
            "content": "<p>yes they are this is what I don't get :/ Any chance you have a mo to view my code?</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 9101812,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "ruby.childs1@gmail.com",
            "sender_full_name": "Ruby Childs (she) (F'12)",
            "sender_id": 883,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "Issues with Worksheet",
            "submessages": [],
            "timestamp": 1376497098,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p>Sure, can you post it somewhere?</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 9101827,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "Issues with Worksheet",
            "submessages": [],
            "timestamp": 1376497135,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/ddf79a11b9b2a19ed45394c4fd3167fb?d=identicon&version=1",
            "client": "website",
            "content": "<p>sent you an email - thanks :)</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 9101998,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "ruby.childs1@gmail.com",
            "sender_full_name": "Ruby Childs (she) (F'12)",
            "sender_id": 883,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "Issues with Worksheet",
            "submessages": [],
            "timestamp": 1376497529,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"ruby.childs1@gmail.com\">@Ruby Childs</span>, could you tell me how you have your directories structured? Your code seems to work fine for me.</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 9102486,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "Issues with Worksheet",
            "submessages": [],
            "timestamp": 1376498493,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p>I just made a new directory plus two scala files, and everything worked fine inside the sbt console.</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 9102509,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "Issues with Worksheet",
            "submessages": [],
            "timestamp": 1376498526,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/ddf79a11b9b2a19ed45394c4fd3167fb?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"alan@hackerschool.com\">@Alan O'Donnell</span>  I have it all in Eclipse and have a main src then packages inside - one for each week. Within week4 this is where the two files are. I decided to try and test them myself so copied them both to a temporary file and it still comes up as the same issue. By using a scala worksheet it should display the results when calling show on the RHS whereas now it is doing nothing - either due to the error or now I am wondering if there is an issue with my eclipse build...</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 9102601,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "ruby.childs1@gmail.com",
            "sender_full_name": "Ruby Childs (she) (F'12)",
            "sender_id": 883,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "Issues with Worksheet",
            "submessages": [],
            "timestamp": 1376498743,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/ddf79a11b9b2a19ed45394c4fd3167fb?d=identicon&version=1",
            "client": "website",
            "content": "<p>I've just tested it by making a new src folder with a new package and only these two folders and it works! Clearly this a really bad eclipse issue - maybe it can't handle my other src folder being that big!</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 9102707,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "ruby.childs1@gmail.com",
            "sender_full_name": "Ruby Childs (she) (F'12)",
            "sender_id": 883,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "Issues with Worksheet",
            "submessages": [],
            "timestamp": 1376498923,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/ddf79a11b9b2a19ed45394c4fd3167fb?d=identicon&version=1",
            "client": "website",
            "content": "<p>Although I have used Eclipse for Java projects on a much bigger scale...</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 9102712,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "ruby.childs1@gmail.com",
            "sender_full_name": "Ruby Childs (she) (F'12)",
            "sender_id": 883,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "Issues with Worksheet",
            "submessages": [],
            "timestamp": 1376498944,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p>Hmm, yeah, I'm not sure what the problem is :/</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 9102723,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "Issues with Worksheet",
            "submessages": [],
            "timestamp": 1376498975,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/ddf79a11b9b2a19ed45394c4fd3167fb?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"alan@hackerschool.com\">@Alan O'Donnell</span>  me neither but thanks so much for helping. I think its just me needing to try and fix eclipse again :/ - I already had to reinstall it once before! Makes me wonder unless you're willing to pay out for IntellJ what IDE is best for Scala...</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 9102788,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "ruby.childs1@gmail.com",
            "sender_full_name": "Ruby Childs (she) (F'12)",
            "sender_id": 883,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "Issues with Worksheet",
            "submessages": [],
            "timestamp": 1376499113,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/f6bd929465d6d225def8062d5a9d3f3f?d=identicon&version=1",
            "client": "website",
            "content": "<p>I gave up on worksheets because they would sometimes randomly start flagging something as an error which clearly wasn't (it had previously worked correctly and I didn't change anything, and evaluated correctly in the REPL). Sometimes restarting would help, and sometimes making a change in a completely unrelated project would help. And sometimes cutting the entire worksheet to make it blank, and then pasting it back in would help.  And sometimes it wouldn't.</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 9108856,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "danluu@gmail.com",
            "sender_full_name": "Dan Luu (W'13)",
            "sender_id": 820,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "Issues with Worksheet",
            "submessages": [],
            "timestamp": 1376509369,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/f6bd929465d6d225def8062d5a9d3f3f?d=identicon&version=1",
            "client": "website",
            "content": "<p>I like emacs + ensime, but I don't know if it's worth the effort if you're not already used to emacs. The free version of intellij seems good enough, too. A handful of people in the last batch used it for scala and seemed happy with it.</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 9108926,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "danluu@gmail.com",
            "sender_full_name": "Dan Luu (W'13)",
            "sender_id": 820,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "Issues with Worksheet",
            "submessages": [],
            "timestamp": 1376509522,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/ddf79a11b9b2a19ed45394c4fd3167fb?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"danluu@gmail.com\">@Dan Luu</span>  ooh there's a free version of Intellij :O will have to check it out! Yes worksheets do seem very buggy. May attempt the emacs solution as used it before, but have to remember how to use it again!</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 9109319,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "ruby.childs1@gmail.com",
            "sender_full_name": "Ruby Childs (she) (F'12)",
            "sender_id": 883,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "Issues with Worksheet",
            "submessages": [],
            "timestamp": 1376510263,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/f6bd929465d6d225def8062d5a9d3f3f?d=identicon&version=1",
            "client": "website",
            "content": "<p>Also, ensime has some way of integrating with vim. I didn't try it, but at least one of the vim people from last batch used it, and it seemed to work as well as the emacs version, at least in terms syntax highlighting, flagging errors, etc. I don't know if it can run REPL inside itself the way emacs can, but it must have some way of communicating to an sbt process, since ensime works.</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 9110162,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "danluu@gmail.com",
            "sender_full_name": "Dan Luu (W'13)",
            "sender_id": 820,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "Issues with Worksheet",
            "submessages": [],
            "timestamp": 1376511764,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/d495685876a5a195b6ef5fb9a269b6d0dcd5c5fe?x=x&version=1",
            "client": "website",
            "content": "<p>FWIW, the free intelliJ includes scala support... but its worksheet support is arguably worse than eclipse's.  IDEA just compiles the worksheet over and over; eclipse tries to do incrementally, but obviously doesn't get it quite right. <br>\nemacs + ensime is great if you're addicted to emacs like me, but its debugging support is considered \"experimental,\" and that's generous.<br>\nI found that there's no one tool that's sufficient, and the best strategy is to maintain a <code>build.sbt</code>, with <code>ensime</code>, <code>idea</code> and <code>eclipse</code> plugins.</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 9120542,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "pnf@podsnap.com",
            "sender_full_name": "Peter Fraenkel (he) (S'13)",
            "sender_id": 2142,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "Issues with Worksheet",
            "submessages": [],
            "timestamp": 1376533885,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"zach@hackerschool.com\">@Zach Allaun</span>: here's a good post on how Scala's type inference works. I'm hoping it will help with the covariant cons thing we were wondering about.</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 9144337,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "type inference",
            "submessages": [],
            "timestamp": 1376590934,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p><a href=\"http://pchiusano.blogspot.com/2011/05/making-most-of-scalas-extremely-limited.html\" target=\"_blank\" title=\"http://pchiusano.blogspot.com/2011/05/making-most-of-scalas-extremely-limited.html\">http://pchiusano.blogspot.com/2011/05/making-most-of-scalas-extremely-limited.html</a></p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 9144358,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "type inference",
            "submessages": [],
            "timestamp": 1376590950,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/aa92b21f4a06f87dae635ed43f9595f5?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"alan@hackerschool.com\">@Alan O'Donnell</span> that blog looks fantastic. any luck finding the free online version of \"functional programming in scala\"? the link off to the right is broken.</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 9145273,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "robert.buonpastore@gmail.com",
            "sender_full_name": "Robert Buonpastore (S'13)",
            "sender_id": 2126,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "type inference",
            "submessages": [],
            "timestamp": 1376592590,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p>No, I haven't tried to find it though.</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 9145338,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "type inference",
            "submessages": [],
            "timestamp": 1376592721,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/7a59c708d63d6e411127984a042dfe273ce90e04?x=x&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"robert.buonpastore@gmail.com\">@Rob Buonpastore</span> I assume it's this: <a href=\"http://www.manning.com/bjarnason/\" target=\"_blank\" title=\"http://www.manning.com/bjarnason/\">http://www.manning.com/bjarnason/</a></p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 9145701,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "spacemanaki@gmail.com",
            "sender_full_name": "Aki Yamada (S'13)",
            "sender_id": 2118,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "type inference",
            "submessages": [],
            "timestamp": 1376593271,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/aa92b21f4a06f87dae635ed43f9595f5?d=identicon&version=1",
            "client": "website",
            "content": "<p>yep that is it, i misread it initially as an free online beta. thanks</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 9145756,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "robert.buonpastore@gmail.com",
            "sender_full_name": "Robert Buonpastore (S'13)",
            "sender_id": 2126,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "type inference",
            "submessages": [],
            "timestamp": 1376593353,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"dave@hackerschool.com\">@David Albert</span>, you might like this: <a href=\"http://parleys.com/play/51c178ece4b0d38b54f46217/chapter0/about\" target=\"_blank\" title=\"http://parleys.com/play/51c178ece4b0d38b54f46217/chapter0/about\">http://parleys.com/play/51c178ece4b0d38b54f46217/chapter0/about</a></p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 9172566,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "for rubyists",
            "submessages": [],
            "timestamp": 1376657189,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p>Lots of fun stuff here: <a href=\"http://www.parleys.com/channel/51ae1022e4b01033a7e4b6ca/presentations\" target=\"_blank\" title=\"http://www.parleys.com/channel/51ae1022e4b01033a7e4b6ca/presentations\">http://www.parleys.com/channel/51ae1022e4b01033a7e4b6ca/presentations</a></p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 9172750,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "more videos",
            "submessages": [],
            "timestamp": 1376657662,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/b4b9e2320f242abf40bf5391ee07269f?d=identicon&version=1",
            "client": "website",
            "content": "<p>I'll tak ea look</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 9175842,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "dave@recurse.com",
            "sender_full_name": "David Albert (he)",
            "sender_id": 810,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "for rubyists",
            "submessages": [],
            "timestamp": 1376664810,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"nada.amin@gmail.com\">@Nada Amin</span>, do you know how I can get sbt to find a dependency at an Ivy-style (with periods, not slashes) URL?</p>\n<p>I want to grab a dependency from here: <a href=\"http://repo.typesafe.com/typesafe/snapshots/com.typesafe.play/sbt-plugin/scala_2.10/sbt_0.13/\" target=\"_blank\" title=\"http://repo.typesafe.com/typesafe/snapshots/com.typesafe.play/sbt-plugin/scala_2.10/sbt_0.13/\">http://repo.typesafe.com/typesafe/snapshots/com.typesafe.play/sbt-plugin/scala_2.10/sbt_0.13/</a></p>\n<p>The play docs suggest <code>addSbtPlugin(\"com.typesafe.play\" % \"sbt-plugin\" % \"2.2-SNAPSHOT\")</code>, but, irritatingly, sbt or maven or whatever converts \"com.typesafe.play\" to \"com/typesafe/play\" in the URL, which breaks the path.</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 9211317,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "sbt wtf",
            "submessages": [],
            "timestamp": 1376749772,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p>To back up a bit, I just want the following to work :)</p>\n<p><a href=\"http://www.playframework.com/documentation/2.2-SNAPSHOT/Migration22\" target=\"_blank\" title=\"http://www.playframework.com/documentation/2.2-SNAPSHOT/Migration22\">http://www.playframework.com/documentation/2.2-SNAPSHOT/Migration22</a></p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 9211350,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "sbt wtf",
            "submessages": [],
            "timestamp": 1376749813,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/6fcf78ff016b9e89d65cf5108925915a?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"alan@hackerschool.com\">@Alan O'Donnell</span> Did you add the resolver <br>\n<code>resolvers += \"Typesafe repository\" at \"http://repo.typesafe.com/typesafe/releases/\"</code><br>\n?</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 9236943,
            "is_me_message": false,
            "last_edit_timestamp": 1376820490,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "nada.amin@gmail.com",
            "sender_full_name": "Nada Amin",
            "sender_id": 2178,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "sbt wtf",
            "submessages": [],
            "timestamp": 1376820472,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/f6bd929465d6d225def8062d5a9d3f3f?d=identicon&version=1",
            "client": "website",
            "content": "<p>There's a new one! Co-taught by Erik Meijer: <a href=\"https://www.coursera.org/course/reactive\" target=\"_blank\" title=\"https://www.coursera.org/course/reactive\">https://www.coursera.org/course/reactive</a></p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 9574430,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "danluu@gmail.com",
            "sender_full_name": "Dan Luu (W'13)",
            "sender_id": 820,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "Odersky coursera course #2",
            "submessages": [],
            "timestamp": 1377629017,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/6f331605bee541a4c2c8da37a297786194212c15?x=x&version=2",
            "client": "website",
            "content": "<p>Cool looking course</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 9574495,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "zach.allaun+recurse-zulip@gmail.com",
            "sender_full_name": "Zach Allaun (he) (S'12)",
            "sender_id": 808,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "Odersky coursera course #2",
            "submessages": [],
            "timestamp": 1377629117,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4f5279e356a105513701942b5b6af05f?d=identicon&version=1",
            "client": "website",
            "content": "<p>Oh, awesome. FRP is a lot of fun.</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 9574503,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "clemmer.alexander@gmail.com",
            "sender_full_name": "Alex Clemmer (S'13)",
            "sender_id": 2132,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "Odersky coursera course #2",
            "submessages": [],
            "timestamp": 1377629133,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/eac0aafb77a926e0ef53779ce873a472?d=identicon&version=1",
            "client": "website",
            "content": "<p>nice reading list :)</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 9574565,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "david.nolen@gmail.com",
            "sender_full_name": "David Nolen",
            "sender_id": 931,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "Odersky coursera course #2",
            "submessages": [],
            "timestamp": 1377629189,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/7b22ad8fae879dc36792aa1391781fa2?d=identicon&version=1",
            "client": "website",
            "content": "<p>I think my team (@Tapad) is on it.  Should be fun.</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 9577763,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "yael@nyu.edu",
            "sender_full_name": "Yael Elmatad (she) (S'12)",
            "sender_id": 862,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "Odersky coursera course #2",
            "submessages": [],
            "timestamp": 1377634223,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/ddf79a11b9b2a19ed45394c4fd3167fb?d=identicon&version=1",
            "client": "website",
            "content": "<p>Good spot!</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 9579156,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "ruby.childs1@gmail.com",
            "sender_full_name": "Ruby Childs (she) (F'12)",
            "sender_id": 883,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "Odersky coursera course #2",
            "submessages": [],
            "timestamp": 1377636296,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/ddf79a11b9b2a19ed45394c4fd3167fb?d=identicon&version=1",
            "client": "website",
            "content": "<p>Hello all,<br>\nJust wondered if anyone had done this and is able to discuss it? A few things I am slightly confused on. I have completed it and it passes all tests but am not convinced I understood some parts properly!<br>\nThanks</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 9813762,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "ruby.childs1@gmail.com",
            "sender_full_name": "Ruby Childs (she) (F'12)",
            "sender_id": 883,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "Functional Principles of Programming - Assignment 4",
            "submessages": [],
            "timestamp": 1378229046,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/f6bd929465d6d225def8062d5a9d3f3f?d=identicon&version=1",
            "client": "website",
            "content": "<p>Is that still Huffman coding, or did they change it in the new iteration of the course? I have a bunch of stuff scheduled during the day, but, if no one gets to it first, I'd be happy to talk about it when I have some free time.</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 9814451,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "danluu@gmail.com",
            "sender_full_name": "Dan Luu (W'13)",
            "sender_id": 820,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "Functional Principles of Programming - Assignment 4",
            "submessages": [],
            "timestamp": 1378230425,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/ddf79a11b9b2a19ed45394c4fd3167fb?d=identicon&version=1",
            "client": "website",
            "content": "<p>yes it is Huffman coding! Will DM you :)</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 9815109,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "ruby.childs1@gmail.com",
            "sender_full_name": "Ruby Childs (she) (F'12)",
            "sender_id": 883,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "Functional Principles of Programming - Assignment 4",
            "submessages": [],
            "timestamp": 1378231718,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p>I installed the Scala IDE eclipse thing a few days ago. It's pretty cool--I'm much more efficient than I was before at playing around with the type system instead of writing actual code :p</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 10585843,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "Scala IDE",
            "submessages": [],
            "timestamp": 1379949911,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/d495685876a5a195b6ef5fb9a269b6d0dcd5c5fe?x=x&version=1",
            "client": "website",
            "content": "<p>Do you use sbt to generate the eclipse config?</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 10586942,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "pnf@podsnap.com",
            "sender_full_name": "Peter Fraenkel (he) (S'13)",
            "sender_id": 2142,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "Scala IDE",
            "submessages": [],
            "timestamp": 1379951556,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p>Yeah.</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 10587779,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "Scala IDE",
            "submessages": [],
            "timestamp": 1379953095,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/d495685876a5a195b6ef5fb9a269b6d0dcd5c5fe?x=x&version=1",
            "client": "website",
            "content": "<p>Have you tried the debugger in eclipse?  Last time I tried this, it was wonky enough that I switched to intellij.  It would be nice to go back.</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 10587987,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "pnf@podsnap.com",
            "sender_full_name": "Peter Fraenkel (he) (S'13)",
            "sender_id": 2142,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "Scala IDE",
            "submessages": [],
            "timestamp": 1379953547,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p>I haven't really. Honestly, I'm mainly using it for the easy hop-to-source/autocomplete/type signatures on hover, which I'm sure you get from IntelliJ too.</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 10588053,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "Scala IDE",
            "submessages": [],
            "timestamp": 1379953661,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/d495685876a5a195b6ef5fb9a269b6d0dcd5c5fe?x=x&version=1",
            "client": "website",
            "content": "<p>For that, ensime worked pretty well for me.<br>\n</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 10588228,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "pnf@podsnap.com",
            "sender_full_name": "Peter Fraenkel (he) (S'13)",
            "sender_id": 2142,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "Scala IDE",
            "submessages": [],
            "timestamp": 1379953951,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/e9f1cc1c1e2c79ae473abfa0ea69a434?d=identicon&version=1",
            "client": "website",
            "content": "<p>Anyone know of a good, as-comprehensive-as-possible introduction/tutorial/language overview that assumes the reader already knows a fair amount about statically typed functional languages, but knows nothing about Java/the JVM/OOP?</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 10875996,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "nabil.hassein@gmail.com",
            "sender_full_name": "Nabil Hassein (he/they) (S2'16)",
            "sender_id": 2143,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "scala for haskell hackers",
            "submessages": [],
            "timestamp": 1380584111,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/7a59c708d63d6e411127984a042dfe273ce90e04?x=x&version=1",
            "client": "website",
            "content": "<p>I've been looking for such a thing for a while :( not necessarily regarding Java/JVM/ but definitely in terms of OOP and statically typed functional languages. most Scala stuff seems to be either targeted towards Java programmers or Python/Ruby/.../etc programmers. not MLers and Haskell folks. so let me know what you find...</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 10876050,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "spacemanaki@gmail.com",
            "sender_full_name": "Aki Yamada (S'13)",
            "sender_id": 2118,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "scala for haskell hackers",
            "submessages": [],
            "timestamp": 1380584223,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/e9f1cc1c1e2c79ae473abfa0ea69a434?d=identicon&version=1",
            "client": "website",
            "content": "<p>Java was actually my first language, and I have used a few other OOPy languages as well, but I have such a strong distaste for Java that it completely poisoned my mind against OOP and led me to becoming a total FP fanboy. So a text which assumes the reader does know something about that stuff would probably work; but I think one that started at the beginning would probably be more persuasive and palatable to someone with my biases.</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 10876052,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "nabil.hassein@gmail.com",
            "sender_full_name": "Nabil Hassein (he/they) (S2'16)",
            "sender_id": 2143,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "scala for haskell hackers",
            "submessages": [],
            "timestamp": 1380584233,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/7a59c708d63d6e411127984a042dfe273ce90e04?x=x&version=1",
            "client": "website",
            "content": "<p>Martin Odersky's Coursera class is really nice, even though it's a bit slow going. it's based partly on SICP but also is just a very tasteful presentation of the language IMHO. made me really like Scala and want to know more. unfortunately, doesn't delve too deep into the type system and so on</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 10876088,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "spacemanaki@gmail.com",
            "sender_full_name": "Aki Yamada (S'13)",
            "sender_id": 2118,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "scala for haskell hackers",
            "submessages": [],
            "timestamp": 1380584289,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"nabil.hassein@gmail.com\">@Nabil Hassein (S'13)</span> <span class=\"user-mention\" data-user-email=\"spacemanaki@gmail.com\">@Aki Yamada (S'13)</span> alumni thursdays pairing with me :)</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 10876100,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "scala for haskell hackers",
            "submessages": [],
            "timestamp": 1380584322,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/e9f1cc1c1e2c79ae473abfa0ea69a434?d=identicon&version=1",
            "client": "website",
            "content": "<p>I've read about half of <a href=\"http://www.scala-lang.org/docu/files/ScalaByExample.pdf\" target=\"_blank\" title=\"http://www.scala-lang.org/docu/files/ScalaByExample.pdf\">Scala by Example</a> and found it decent enough.</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 10876102,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "nabil.hassein@gmail.com",
            "sender_full_name": "Nabil Hassein (he/they) (S2'16)",
            "sender_id": 2143,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "scala for haskell hackers",
            "submessages": [],
            "timestamp": 1380584364,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/e9f1cc1c1e2c79ae473abfa0ea69a434?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"alan@hackerschool.com\">@Alan O'Donnell</span> I probably won't be able to make it ever, but hopefully! What kind of stuff are you working on?</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 10876111,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "nabil.hassein@gmail.com",
            "sender_full_name": "Nabil Hassein (he/they) (S2'16)",
            "sender_id": 2143,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "scala for haskell hackers",
            "submessages": [],
            "timestamp": 1380584384,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p>I was in the same boat and had to get <span class=\"user-mention\" data-user-email=\"nada.amin@gmail.com\">@Nada Amin</span> to do the same Scala-for-Haskeller guide.</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 10876114,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "scala for haskell hackers",
            "submessages": [],
            "timestamp": 1380584399,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p>I'm not 100% sure, but I do think I'm going to try to contribute to the Scala IDE project (eclipse).</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 10876152,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "scala for haskell hackers",
            "submessages": [],
            "timestamp": 1380584428,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p>Maybe a poker server?</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 10876159,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "scala for haskell hackers",
            "submessages": [],
            "timestamp": 1380584440,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p>I want to do something with Akka.</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 10876161,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "scala for haskell hackers",
            "submessages": [],
            "timestamp": 1380584447,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/e9f1cc1c1e2c79ae473abfa0ea69a434?d=identicon&version=1",
            "client": "website",
            "content": "<p>I kind of want to write a compiler. A real compiler, not a fake one like I did for brainfuck.</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 10876163,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "nabil.hassein@gmail.com",
            "sender_full_name": "Nabil Hassein (he/they) (S2'16)",
            "sender_id": 2143,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "scala for haskell hackers",
            "submessages": [],
            "timestamp": 1380584462,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/e9f1cc1c1e2c79ae473abfa0ea69a434?d=identicon&version=1",
            "client": "website",
            "content": "<p>A game server would be cool. Maybe we could do Go, Aki!</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 10876171,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "nabil.hassein@gmail.com",
            "sender_full_name": "Nabil Hassein (he/they) (S2'16)",
            "sender_id": 2143,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "scala for haskell hackers",
            "submessages": [],
            "timestamp": 1380584498,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/7a59c708d63d6e411127984a042dfe273ce90e04?x=x&version=1",
            "client": "website",
            "content": "<p>I would pair on that</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 10876225,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "spacemanaki@gmail.com",
            "sender_full_name": "Aki Yamada (S'13)",
            "sender_id": 2118,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "scala for haskell hackers",
            "submessages": [],
            "timestamp": 1380584607,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/8f56292221169ff830d205457d243276?d=identicon&version=1",
            "client": "website",
            "content": "<p>I don't think there's anything out there from a Haskell/ML perspective, but <span class=\"user-mention\" data-user-email=\"pnf@podsnap.com\">@Peter Fraenkel (S'13)</span> has recommended Scala for the Impatient as a good intro book. </p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 10876522,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "dhbikoff@gmail.com",
            "sender_full_name": "Derek Bikoff (S'13)",
            "sender_id": 2106,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "scala for haskell hackers",
            "submessages": [],
            "timestamp": 1380585130,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/e9f1cc1c1e2c79ae473abfa0ea69a434?d=identicon&version=1",
            "client": "website",
            "content": "<p>Nice, I'll check it out. Good to see encouragement of one of the <a href=\"http://c2.com/cgi/wiki?LazinessImpatienceHubris\" target=\"_blank\" title=\"http://c2.com/cgi/wiki?LazinessImpatienceHubris\">three great virtues of the programmer</a>.</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 10876784,
            "is_me_message": false,
            "last_edit_timestamp": 1380585646,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "nabil.hassein@gmail.com",
            "sender_full_name": "Nabil Hassein (he/they) (S2'16)",
            "sender_id": 2143,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "scala for haskell hackers",
            "submessages": [],
            "timestamp": 1380585626,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/d495685876a5a195b6ef5fb9a269b6d0dcd5c5fe?x=x&version=1",
            "client": "API",
            "content": "<p>More importantly, Odersky also recommends SFTI as an accompanying text for his coursera, uhm, course. <br>\n<span class=\"user-mention\" data-user-email=\"nabil.hassein@gmail.com\">@Nabil Hassein (S'13)</span> , if you keep quoting Larry Wall in public, people will stop thinking you're cool. I think that's what happened to me. </p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 10880410,
            "is_me_message": false,
            "last_edit_timestamp": 1380593152,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "pnf@podsnap.com",
            "sender_full_name": "Peter Fraenkel (he) (S'13)",
            "sender_id": 2142,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "scala for haskell hackers",
            "submessages": [],
            "timestamp": 1380593057,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/e9f1cc1c1e2c79ae473abfa0ea69a434?d=identicon&version=1",
            "client": "website",
            "content": "<p>\"Scala is the second postmodern computer language!\"</p>\n<p>Update: since I'm an advocate of hypertext-all-the-text, <a href=\"http://www.wall.org/~larry/pm.html\" target=\"_blank\" title=\"http://www.wall.org/~larry/pm.html\">here's a link to the reference.</a> I found it an interesting talk. I was paid a pittance to program Perl, once upon a time, but even if you've never used it you might be interested anyway. It's well over a decade old by now, but full of great flavor and character.</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 10880483,
            "is_me_message": false,
            "last_edit_timestamp": 1380595014,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "nabil.hassein@gmail.com",
            "sender_full_name": "Nabil Hassein (he/they) (S2'16)",
            "sender_id": 2143,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "scala for haskell hackers",
            "submessages": [],
            "timestamp": 1380593273,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/d495685876a5a195b6ef5fb9a269b6d0dcd5c5fe?x=x&version=1",
            "client": "website",
            "content": "<p>Now that I look at the start of this thread, I wouldn't actually recommend SFTI as an introduction to OOP and the JVM.   One of the reasons I liked the book is that I already knew those well, and it didn't waste (in my eyes anyway) time explaining them. On the other hand, if you know and despise Java, the emphasis on differences from Java might be appealing.</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 10880644,
            "is_me_message": false,
            "last_edit_timestamp": 1380593793,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "pnf@podsnap.com",
            "sender_full_name": "Peter Fraenkel (he) (S'13)",
            "sender_id": 2142,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "scala for haskell hackers",
            "submessages": [],
            "timestamp": 1380593576,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/e9f1cc1c1e2c79ae473abfa0ea69a434?d=identicon&version=1",
            "client": "website",
            "content": "<p>I think a lot of my contempt for Java may have grown old and outdated. Didn't it finally get lambdas recently?</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 10880746,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "nabil.hassein@gmail.com",
            "sender_full_name": "Nabil Hassein (he/they) (S2'16)",
            "sender_id": 2143,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "scala for haskell hackers",
            "submessages": [],
            "timestamp": 1380593841,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/e9f1cc1c1e2c79ae473abfa0ea69a434?d=identicon&version=1",
            "client": "website",
            "content": "<p>I haven't programmed in Java for years. (It's been a good life.)</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 10880750,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "nabil.hassein@gmail.com",
            "sender_full_name": "Nabil Hassein (he/they) (S2'16)",
            "sender_id": 2143,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "scala for haskell hackers",
            "submessages": [],
            "timestamp": 1380593856,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/e9f1cc1c1e2c79ae473abfa0ea69a434?d=identicon&version=1",
            "client": "website",
            "content": "<p>What kind of basic setup do users of the One True Editor like? <code>scala-mode</code> or <code>scala-mode2</code> or something else entirely?</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 10880791,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "nabil.hassein@gmail.com",
            "sender_full_name": "Nabil Hassein (he/they) (S2'16)",
            "sender_id": 2143,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "emacs",
            "submessages": [],
            "timestamp": 1380593898,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/e9f1cc1c1e2c79ae473abfa0ea69a434?d=identicon&version=1",
            "client": "website",
            "content": "<p>But, I think I remember enough that \"Java does this, Scala does that\" could still work for me. Right now I'm actually doing the exercises from \"Scala by Example\" after having read it on a plane; I'll probably give SFTI a read tomorrow.</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 10880847,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "nabil.hassein@gmail.com",
            "sender_full_name": "Nabil Hassein (he/they) (S2'16)",
            "sender_id": 2143,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "scala for haskell hackers",
            "submessages": [],
            "timestamp": 1380594025,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/d495685876a5a195b6ef5fb9a269b6d0dcd5c5fe?x=x&version=1",
            "client": "website",
            "content": "<p>Certainly  <code>scala-mode2</code>.  You probably also want ensime, which will give you continuous compilation, completion, etc.   The main thing to keep in mind with scala IDEs (including ensime), is that they do not share configuration well, and you will probably want to use more than one of them on the same project at some point. Most people maintain a <code>build.sbt</code> as the configuration of record and then use sbt plugins (in <code>.sbt/plugins</code>) to generate configuration for ensime, IntelliJ and/or eclipse.</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 10897599,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "pnf@podsnap.com",
            "sender_full_name": "Peter Fraenkel (he) (S'13)",
            "sender_id": 2142,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "emacs",
            "submessages": [],
            "timestamp": 1380633873,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/d495685876a5a195b6ef5fb9a269b6d0dcd5c5fe?x=x&version=1",
            "client": "website",
            "content": "<p>Lambdas are coming in java 8 (aka 1.8).  At one point, they were gunning for java 7, but that release was small beer.  I don't think anything really exciting has happened since 5, when we got generics and <code>for</code> candy.   Even with lambdas, it's not going to be a \"fun\" language.<br>\n</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 10897801,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "pnf@podsnap.com",
            "sender_full_name": "Peter Fraenkel (he) (S'13)",
            "sender_id": 2142,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "scala for haskell hackers",
            "submessages": [],
            "timestamp": 1380634312,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p>^ <span class=\"user-mention\" data-user-email=\"marcus@ljungblad.nu\">@Marcus Ljungblad (F'13)</span>: <a href=\"https://github.com/vkostyukov/scalacaster\" target=\"_blank\" title=\"https://github.com/vkostyukov/scalacaster\">https://github.com/vkostyukov/scalacaster</a></p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 10912323,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "okasaki",
            "submessages": [],
            "timestamp": 1380657430,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/17f0b91da5342b9891469be52d28e4b0?d=identicon&version=1",
            "client": "desktop app Mac 0.3.8",
            "content": "<p>That project looks great. Might even reformulate my initial idea and try to contribute an algo-impl and submit to the project. </p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 10913567,
            "is_me_message": false,
            "last_edit_timestamp": 1380659031,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "marcus@ljungblad.nu",
            "sender_full_name": "Marcus Ljungblad (F'13)",
            "sender_id": 2898,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "okasaki",
            "submessages": [],
            "timestamp": 1380658987,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"nada.amin@gmail.com\">@Nada Amin</span> <span class=\"user-mention\" data-user-email=\"katerinab@gmail.com\">@Katerina Barone-Adesi (F'13)</span>: <a href=\"http://www.cs.uwm.edu/~boyland/fool2012/papers/fool2012_submission_3.pdf\" target=\"_blank\" title=\"http://www.cs.uwm.edu/~boyland/fool2012/papers/fool2012_submission_3.pdf\">http://www.cs.uwm.edu/~boyland/fool2012/papers/fool2012_submission_3.pdf</a></p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 10952119,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "dot",
            "submessages": [],
            "timestamp": 1380738377,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"nada.amin@gmail.com\">@Nada Amin</span> Kat and I are probably going to read through your paper :)</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 10952133,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "dot",
            "submessages": [],
            "timestamp": 1380738410,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/ddf79a11b9b2a19ed45394c4fd3167fb?d=identicon&version=1",
            "client": "website",
            "content": "<p>Looks great! Would be great to add this or try write it myself!</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 10967148,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "ruby.childs1@gmail.com",
            "sender_full_name": "Ruby Childs (she) (F'12)",
            "sender_id": 883,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "okasaki",
            "submessages": [],
            "timestamp": 1380766139,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/17f0b91da5342b9891469be52d28e4b0?d=identicon&version=1",
            "client": "desktop app Mac 0.3.8",
            "content": "<p>I reached out to the author of scalacaster and he's more than happy to take contributions to the project. </p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 10968934,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "marcus@ljungblad.nu",
            "sender_full_name": "Marcus Ljungblad (F'13)",
            "sender_id": 2898,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "okasaki",
            "submessages": [],
            "timestamp": 1380770212,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/17f0b91da5342b9891469be52d28e4b0?d=identicon&version=1",
            "client": "desktop app Mac 0.3.8",
            "content": "<p>Is it possible to do a match-case on my tuples arg if I pass them like this: </p>\n<div class=\"codehilite\"><pre>def funny(tuples: (Int, Int)*) = tuples match {\n    case (one, two) :: tail =&gt; // do stuff\n    case Nil =&gt; // return stuff \n}\n</pre></div>\n\n\n<p>Or does that only work on lists? </p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 11151909,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "marcus@ljungblad.nu",
            "sender_full_name": "Marcus Ljungblad (F'13)",
            "sender_id": 2898,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "tuples",
            "submessages": [],
            "timestamp": 1381180194,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/d495685876a5a195b6ef5fb9a269b6d0dcd5c5fe?x=x&version=1",
            "client": "website",
            "content": "<p>The issue here is array vs list, not tuples vs list.  A list of tuples will work just fine, e.g.</p>\n<div class=\"codehilite\"><pre>def funny(tuples: (Int, Int)*) = tuples.toList match {\n    case (one, two) :: tail =&gt; // do stuff\n    case Nil =&gt; // return stuff \n}\n</pre></div>\n\n\n<p>Scala's pattern matching is basically destructuring (ripping apart) of nested constructors, and <br>\nthe  <code>::</code> here is really  an infix constructor for the <a href=\"http://www.scala-lang.org/api/current/#scala.collection.immutable.$colon$colon\" target=\"_blank\" title=\"http://www.scala-lang.org/api/current/#scala.collection.immutable.$colon$colon\">:: class</a>, and scala lists are just arbitrarily nested <code>Lists</code>s.<br>\nFor [my idea of] a good time, try this:</p>\n<div class=\"codehilite\"><pre>scala -Xprint:parser -e &quot;x match {case (a,b)::c =&gt; whatever)}&quot;\n</pre></div>\n\n\n<p>This isn't legal code, so there will be some errors, but the interesting bit is:</p>\n<div class=\"codehilite\"><pre>            case $colon$colon(scala.Tuple2((a @ _), (b @ _)), (c @ _)) =&gt; whatever\n</pre></div>\n\n\n<p>Ignoring the <code>@</code>s for a moment, that's</p>\n<div class=\"codehilite\"><pre>            case $colon$colon(scala.Tuple2( _ , _ ), _ ) =&gt; whatever\n</pre></div>\n\n\n<p>so we're looking for a <code>$colon$colon</code> constructor with arguments that are a <code>Tuple2</code> constructor,  with two arguments of its own, plus another argument.  The <code>@</code> expressions just bind the arguments to local variables.</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 11183725,
            "is_me_message": false,
            "last_edit_timestamp": 1381245653,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "pnf@podsnap.com",
            "sender_full_name": "Peter Fraenkel (he) (S'13)",
            "sender_id": 2142,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "tuples",
            "submessages": [],
            "timestamp": 1381245592,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/17f0b91da5342b9891469be52d28e4b0?d=identicon&version=1",
            "client": "desktop app Mac 0.3.8",
            "content": "<p>So am I understanding it correct that the argument <code>tuples (Int, Int)*</code> is an Array, and Arrays does not have the <code>::</code> constructor? </p>\n<p>Not sure I understand what an infix constructor really means. Googling turns up a lot of Haskell references. Any pointers?</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 11184353,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "marcus@ljungblad.nu",
            "sender_full_name": "Marcus Ljungblad (F'13)",
            "sender_id": 2898,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "tuples",
            "submessages": [],
            "timestamp": 1381246503,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/d495685876a5a195b6ef5fb9a269b6d0dcd5c5fe?x=x&version=1",
            "client": "website",
            "content": "<p>Infix means between the operands.<br>\nIt wouldn't make sense for <code>Array</code> to have such a constructor, since arrays are not built out of nested elements, the way lists are.</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 11185362,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "pnf@podsnap.com",
            "sender_full_name": "Peter Fraenkel (he) (S'13)",
            "sender_id": 2142,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "tuples",
            "submessages": [],
            "timestamp": 1381247972,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/17f0b91da5342b9891469be52d28e4b0?d=identicon&version=1",
            "client": "desktop app Mac 0.3.8",
            "content": "<p>Fair enough. Thanks for awesome details! Helped me understand why. </p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 11185987,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "marcus@ljungblad.nu",
            "sender_full_name": "Marcus Ljungblad (F'13)",
            "sender_id": 2898,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "tuples",
            "submessages": [],
            "timestamp": 1381248951,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/d495685876a5a195b6ef5fb9a269b6d0dcd5c5fe?x=x&version=1",
            "client": "website",
            "content": "<p>Glad to help!</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 11187681,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "pnf@podsnap.com",
            "sender_full_name": "Peter Fraenkel (he) (S'13)",
            "sender_id": 2142,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "tuples",
            "submessages": [],
            "timestamp": 1381251920,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/17f0b91da5342b9891469be52d28e4b0?d=identicon&version=1",
            "client": "desktop app Mac 0.3.8",
            "content": "<p>So in Erlang you can do something like</p>\n<div class=\"codehilite\"><pre>funky([(1,_)=Head|Tail]) -&gt; do_stuff_with(Head)\n</pre></div>\n\n\n<p>Which would match against tuples with the first element being 1 and then creating a variable <code>Head</code> that can be used in the function. Is it possible to do something similar in Scala in a match-case? </p>\n<div class=\"codehilite\"><pre>mylist match {\n  case (1,_) = head :: tail =&gt; doStuffWith(head)\n  case ... \n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 11200556,
            "is_me_message": false,
            "last_edit_timestamp": 1381272003,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "marcus@ljungblad.nu",
            "sender_full_name": "Marcus Ljungblad (F'13)",
            "sender_id": 2898,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "pattern matching",
            "submessages": [],
            "timestamp": 1381271977,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/d495685876a5a195b6ef5fb9a269b6d0dcd5c5fe?x=x&version=1",
            "client": "website",
            "content": "<p>Yes.  Elaborating the previous thread,</p>\n<div class=\"codehilite\"><pre>case (one, two) :: tail =&gt; do_stuff_with(one,two,tail)\n</pre></div>\n\n\n<p>As we saw from the <code>-Xprint parser</code> output, the binding could have been done explicitly with <code>variable @ _</code>.  You can also use <code>@</code> to bind forms that already have subbindings, e.g.</p>\n<div class=\"codehilite\"><pre>scala&gt; List(1,2) match {case all @ head::tail =&gt; println(s&quot;$head +: $tail = $all = ${head +: tail}&quot;); case _ =&gt; Nil}\n1 +: List(2) = List(1, 2) = List(1, 2)\n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 11228256,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "pnf@podsnap.com",
            "sender_full_name": "Peter Fraenkel (he) (S'13)",
            "sender_id": 2142,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "pattern matching",
            "submessages": [],
            "timestamp": 1381333217,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/17f0b91da5342b9891469be52d28e4b0?d=identicon&version=1",
            "client": "desktop app Mac 0.3.8",
            "content": "<p>Thanks again Peter! You keep rocking Scala explanations :) <br>\nSo it didn't work as I expected when <code>@</code> matched the whole expression in the case clause but managed to get what I wanted done. </p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 11242143,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "marcus@ljungblad.nu",
            "sender_full_name": "Marcus Ljungblad (F'13)",
            "sender_id": 2898,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "pattern matching",
            "submessages": [],
            "timestamp": 1381354801,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/17f0b91da5342b9891469be52d28e4b0?d=identicon&version=1",
            "client": "desktop app Mac 0.3.8",
            "content": "<p><span class=\"user-mention\" data-user-email=\"alan@hackerschool.com\">@Alan O'Donnell</span> <span class=\"user-mention\" data-user-email=\"briandignan@gmail.com\">@Brian Dignan (F'13)</span> I found <a href=\"http://www.youtube.com/watch?v=sVMES4RZF-8&amp;feature=youtu.be\" target=\"_blank\" title=\"http://www.youtube.com/watch?v=sVMES4RZF-8&amp;feature=youtu.be\">this video</a> on type classes pretty helpful, and it also shows of some magic with implicits.</p>\n<div class=\"message_inline_image\"><a href=\"http://www.youtube.com/watch?v=sVMES4RZF-8&amp;feature=youtu.be\" target=\"_blank\" title=\"http://www.youtube.com/watch?v=sVMES4RZF-8&amp;feature=youtu.be\"><img src=\"https://i.ytimg.com/vi/sVMES4RZF-8/default.jpg\"></a></div>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 11242204,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "marcus@ljungblad.nu",
            "sender_full_name": "Marcus Ljungblad (F'13)",
            "sender_id": 2898,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "type classes and implicits",
            "submessages": [],
            "timestamp": 1381354910,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/3d8a0205f76df6ec7742292f8635addd71801017?x=x&version=1",
            "client": "desktop app Mac 0.3.8",
            "content": "<p>I saw another Scala video on Youtube by this same guy. Thanks Marcus!</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 11242612,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "briandignan@gmail.com",
            "sender_full_name": "Brian Dignan (F'13)",
            "sender_id": 2886,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "type classes and implicits",
            "submessages": [],
            "timestamp": 1381355631,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/17f0b91da5342b9891469be52d28e4b0?d=identicon&version=1",
            "client": "desktop app Mac 0.3.8",
            "content": "<p><span class=\"user-mention\" data-user-email=\"pnf@podsnap.com\">@Peter Fraenkel (S'13)</span> I tried to summarize scala vs erlang pattern matching in a <a href=\"http://hs.ljungblad.nu/post/63593130149/pattern-matching-scala-vs-erlang\" target=\"_blank\" title=\"http://hs.ljungblad.nu/post/63593130149/pattern-matching-scala-vs-erlang\">blog post</a>. Would be great to have your feedback. </p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 11244493,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "marcus@ljungblad.nu",
            "sender_full_name": "Marcus Ljungblad (F'13)",
            "sender_id": 2898,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "pattern matching",
            "submessages": [],
            "timestamp": 1381358957,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/8f56292221169ff830d205457d243276?d=identicon&version=1",
            "client": "website",
            "content": "<p>I think this is a good example of @ binding in pattern matching:</p>\n<div class=\"codehilite\"><pre><span class=\"k\">def</span> <span class=\"n\">flatMapSublists</span><span class=\"o\">[</span><span class=\"kt\">A</span>,<span class=\"kt\">B</span><span class=\"o\">](</span><span class=\"n\">ls</span><span class=\"k\">:</span> <span class=\"kt\">List</span><span class=\"o\">[</span><span class=\"kt\">A</span><span class=\"o\">])(</span><span class=\"n\">f</span><span class=\"k\">:</span> <span class=\"o\">(</span><span class=\"kt\">List</span><span class=\"o\">[</span><span class=\"kt\">A</span><span class=\"o\">])</span> <span class=\"k\">=&gt;</span> <span class=\"nc\">List</span><span class=\"o\">[</span><span class=\"kt\">B</span><span class=\"o\">])</span><span class=\"k\">:</span> <span class=\"kt\">List</span><span class=\"o\">[</span><span class=\"kt\">B</span><span class=\"o\">]</span> <span class=\"k\">=</span> \n    <span class=\"n\">ls</span> <span class=\"k\">match</span> <span class=\"o\">{</span>\n      <span class=\"k\">case</span> <span class=\"nc\">Nil</span> <span class=\"k\">=&gt;</span> <span class=\"nc\">Nil</span>\n      <span class=\"k\">case</span> <span class=\"n\">sublist</span><span class=\"o\">@(</span><span class=\"k\">_</span> <span class=\"o\">::</span> <span class=\"n\">tail</span><span class=\"o\">)</span> <span class=\"k\">=&gt;</span> <span class=\"n\">f</span><span class=\"o\">(</span><span class=\"n\">sublist</span><span class=\"o\">)</span> <span class=\"o\">:::</span> <span class=\"n\">flatMapSublists</span><span class=\"o\">(</span><span class=\"n\">tail</span><span class=\"o\">)(</span><span class=\"n\">f</span><span class=\"o\">)</span>\n    <span class=\"o\">}</span>\n</pre></div>\n\n\n<p>sublist binds to (_ :: tail), but you can still reference only tail. </p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 11245526,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "dhbikoff@gmail.com",
            "sender_full_name": "Derek Bikoff (S'13)",
            "sender_id": 2106,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "pattern matching",
            "submessages": [],
            "timestamp": 1381361108,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/d495685876a5a195b6ef5fb9a269b6d0dcd5c5fe?x=x&version=1",
            "client": "website",
            "content": "<p>I think you'll find that the <code>@</code> binding allows you to do everything you could in Haskell and possibly more (caveat, I don't know Haskell).  I haven't seen this documented outside of BNF, but you can isolate patterns with parentheses.  For example:</p>\n<div class=\"codehilite\"><pre>scala&gt; List((1,3),&quot;foo&quot;) match {case all @ (head @ (a,b))::tail =&gt; println(s&quot;all=$all, head=$head, a=$a, b=$b, tail=$tail&quot;); case _ =&gt; Nil}\nall=List((1,3), foo), head=(1,3), a=1, b=3, tail=List(foo)\n</pre></div>\n\n\n<p>Here, I've extracted individual elements of the tuple in <code>a</code> and <code>b</code>, just the head in <code>head</code> and the whole thing in <code>all</code>.  The only reason to avoid <code>_</code> is if you don't need to extract the thing it's standing in for.</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 11247891,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "pnf@podsnap.com",
            "sender_full_name": "Peter Fraenkel (he) (S'13)",
            "sender_id": 2142,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "pattern matching",
            "submessages": [],
            "timestamp": 1381365372,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/17f0b91da5342b9891469be52d28e4b0?d=identicon&version=1",
            "client": "desktop app Mac 0.3.8",
            "content": "<p>There you go! Thanks again Peter. Updated the post accordingly. </p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 11272171,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "marcus@ljungblad.nu",
            "sender_full_name": "Marcus Ljungblad (F'13)",
            "sender_id": 2898,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "pattern matching",
            "submessages": [],
            "timestamp": 1381419127,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/d495685876a5a195b6ef5fb9a269b6d0dcd5c5fe?x=x&version=1",
            "client": "website",
            "content": "<p>No problem.  My only complaint about S13 is that there weren't that many people to talk with about Scala, so I'm happy to do it virtually.</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 11279674,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "pnf@podsnap.com",
            "sender_full_name": "Peter Fraenkel (he) (S'13)",
            "sender_id": 2142,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "pattern matching",
            "submessages": [],
            "timestamp": 1381431405,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/17f0b91da5342b9891469be52d28e4b0?d=identicon&version=1",
            "client": "desktop app Mac 0.3.8",
            "content": "<p>I think we're three this batch, and that includes <span class=\"user-mention\" data-user-email=\"alan@hackerschool.com\">@Alan O'Donnell</span> :) </p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 11282316,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "marcus@ljungblad.nu",
            "sender_full_name": "Marcus Ljungblad (F'13)",
            "sender_id": 2898,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "pattern matching",
            "submessages": [],
            "timestamp": 1381435446,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/d495685876a5a195b6ef5fb9a269b6d0dcd5c5fe?x=x&version=1",
            "client": "website",
            "content": "<p>Incomprehensibly, it looks like there's more interest in both java than in scala.<br>\n</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 11285205,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "pnf@podsnap.com",
            "sender_full_name": "Peter Fraenkel (he) (S'13)",
            "sender_id": 2142,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "pattern matching",
            "submessages": [],
            "timestamp": 1381439963,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/eac0aafb77a926e0ef53779ce873a472?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"pnf@podsnap.com\">@Peter Fraenkel (S'13)</span> heh, that's not so strange, Java is pretty popular after all.</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 11285331,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "david.nolen@gmail.com",
            "sender_full_name": "David Nolen",
            "sender_id": 931,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "pattern matching",
            "submessages": [],
            "timestamp": 1381440157,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/3d8a0205f76df6ec7742292f8635addd71801017?x=x&version=1",
            "client": "desktop app Mac 0.3.8",
            "content": "<p>I just finished the Scala Coursera lecture on Pattern Matching... I don't think I've fully internalized it just yet, but it seems like a really powerful feature.<br>\n</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 11398676,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "briandignan@gmail.com",
            "sender_full_name": "Brian Dignan (F'13)",
            "sender_id": 2886,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "pattern matching",
            "submessages": [],
            "timestamp": 1381700533,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p>Two fabulous papers to continue to expand your mind:</p>\n<p><a href=\"http://www.cs.tufts.edu/~nr/cs257/archive/chris-okasaki/breadth-first.pdf\" target=\"_blank\" title=\"http://www.cs.tufts.edu/~nr/cs257/archive/chris-okasaki/breadth-first.pdf\">http://www.cs.tufts.edu/~nr/cs257/archive/chris-okasaki/breadth-first.pdf</a><br>\n<a href=\"http://www.cs.utexas.edu/~wcook/Drafts/2009/essay.pdf\" target=\"_blank\" title=\"http://www.cs.utexas.edu/~wcook/Drafts/2009/essay.pdf\">http://www.cs.utexas.edu/~wcook/Drafts/2009/essay.pdf</a></p>\n<p>Pattern matching is indeed pretty great, but it's not a panacea: it relies fundamentally on exposing concrete details about the data structure you're matching, and (assuming you want your pattern matches to be exhaustive) it relies fundamentally on the data type being closed to ad hoc extensions. The win is that if you're not concerned about exposing concrete details and you don't need to extend the type with ad hoc variations, then pattern matching is incredibly convenient.</p>\n<p>Odersky himself on pattern-matching vs. traditional OO dynamic dispatch:</p>\n<p><a href=\"http://www.youtube.com/watch?v=kkTFx3-duc8&amp;feature=player_detailpage#t=3027\" target=\"_blank\" title=\"http://www.youtube.com/watch?v=kkTFx3-duc8&amp;feature=player_detailpage#t=3027\">http://www.youtube.com/watch?v=kkTFx3-duc8&amp;feature=player_detailpage#t=3027</a></p>\n<div class=\"message_inline_image\"><a href=\"http://www.youtube.com/watch?v=kkTFx3-duc8&amp;feature=player_detailpage#t=3027\" target=\"_blank\" title=\"http://www.youtube.com/watch?v=kkTFx3-duc8&amp;feature=player_detailpage#t=3027\"><img src=\"https://i.ytimg.com/vi/kkTFx3-duc8/default.jpg\"></a></div>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 11421106,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "pattern matching",
            "submessages": [],
            "timestamp": 1381755563,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/eac0aafb77a926e0ef53779ce873a472?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"alan@hackerschool.com\">@Alan O'Donnell</span> it's not quite true that pattern matching requires exposing internal details of a data structure. You can design pattern matching so that this isn't the case. I was pretty sure Scala supports this via unapply? Multimethods of course nicely blur the line between pattern matching and OO dispatch.</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 11425886,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "david.nolen@gmail.com",
            "sender_full_name": "David Nolen",
            "sender_id": 931,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "pattern matching",
            "submessages": [],
            "timestamp": 1381765338,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/6f583488b0ceaaef4a19844132a81ec9?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"alan@hackerschool.com\">@Alan O'Donnell</span>  <span class=\"user-mention\" data-user-email=\"david.nolen@gmail.com\">@David Nolen</span> </p>\n<p>exactly right, Scala's extractor objects let you define how to pattern match against a data type via the unapply method without modifying the type or the match expression.</p>\n<p><a href=\"http://docs.scala-lang.org/tutorials/tour/extractor-objects.html\" target=\"_blank\" title=\"http://docs.scala-lang.org/tutorials/tour/extractor-objects.html\">http://docs.scala-lang.org/tutorials/tour/extractor-objects.html</a></p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 11426699,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "dschobel@gmail.com",
            "sender_full_name": "Daniel Schobel (W'13)",
            "sender_id": 837,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "pattern matching",
            "submessages": [],
            "timestamp": 1381767090,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/eac0aafb77a926e0ef53779ce873a472?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"dschobel@gmail.com\">@Daniel Schobel (W'13)</span> yeah that's what I thought. core.match also matches against Clojure interfaces not concrete types, I believe F# also supports this via Active Patterns.</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 11426750,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "david.nolen@gmail.com",
            "sender_full_name": "David Nolen",
            "sender_id": 931,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "pattern matching",
            "submessages": [],
            "timestamp": 1381767237,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"david.nolen@gmail.com\">@David Nolen</span>, <span class=\"user-mention\" data-user-email=\"dschobel@gmail.com\">@Daniel Schobel (W'13)</span> yeah exactly right about extractors.</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 11426800,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "pattern matching",
            "submessages": [],
            "timestamp": 1381767360,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p>I should have said something about that--I was thinking of Haskell-style pattern matching.</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 11426841,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "pattern matching",
            "submessages": [],
            "timestamp": 1381767396,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"marcus@ljungblad.nu\">@Marcus Ljungblad (F'13)</span>: <a href=\"https://gist.github.com/happy4crazy/6978140\" target=\"_blank\" title=\"https://gist.github.com/happy4crazy/6978140\">https://gist.github.com/happy4crazy/6978140</a></p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 11426900,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "inductive graphs",
            "submessages": [],
            "timestamp": 1381767547,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4f5279e356a105513701942b5b6af05f?d=identicon&version=1",
            "client": "website",
            "content": "<p>Of course, \"exposing concrete details\" means something completely different in Haskell, since there is not really object-style encapsulation in the way that there is in, e.g., SCala.</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 11449464,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "clemmer.alexander@gmail.com",
            "sender_full_name": "Alex Clemmer (S'13)",
            "sender_id": 2132,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "pattern matching",
            "submessages": [],
            "timestamp": 1381812993,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/17f0b91da5342b9891469be52d28e4b0?d=identicon&version=1",
            "client": "desktop app Mac 0.3.8",
            "content": "<p>So I've been tinkering with a purely functional implementation of a graph data structure to (1) learn more Scala, (2) learn more about functional style programming, and (3) learn more about graphs. This is my first attempt (with substantial help from <span class=\"user-mention\" data-user-email=\"alan@hackerschool.com\">@Alan O'Donnell</span> and many more) on such implementation. Would love to hear your feedback on what could be done better. </p>\n<p>The code is available here: <a href=\"https://github.com/archie/scalacaster/blob/master/src/graph/InductiveGraph.scala\" target=\"_blank\" title=\"https://github.com/archie/scalacaster/blob/master/src/graph/InductiveGraph.scala\">https://github.com/archie/scalacaster/blob/master/src/graph/InductiveGraph.scala</a></p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 11468509,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "marcus@ljungblad.nu",
            "sender_full_name": "Marcus Ljungblad (F'13)",
            "sender_id": 2898,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "code review",
            "submessages": [],
            "timestamp": 1381854992,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/17f0b91da5342b9891469be52d28e4b0?d=identicon&version=1",
            "client": "desktop app Mac 0.3.8",
            "content": "<p>Anyone knows how to active read char by char input from a Scala application? </p>\n<p>If I do <code>while (true) println(Console.in.read)</code> in the REPL illustrates what I want. In my application however <a href=\"http://Console.in\" target=\"_blank\" title=\"http://Console.in\">Console.in</a> seems to buffer the chars and process them only after I hit enter. (Trying to build an autocomplete demo) </p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 11517933,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "marcus@ljungblad.nu",
            "sender_full_name": "Marcus Ljungblad (F'13)",
            "sender_id": 2898,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "reading console input",
            "submessages": [],
            "timestamp": 1381950746,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/17f0b91da5342b9891469be52d28e4b0?d=identicon&version=1",
            "client": "desktop app Mac 0.3.8",
            "content": "<p>Found a solution if anyone is interested. Basically need to change the settings of the tty </p>\n<div class=\"codehilite\"><pre>(Seq(&quot;sh&quot;, &quot;-c&quot;, &quot;stty -icanon min 1 &lt; /dev/tty&quot;) !)\n(Seq(&quot;sh&quot;, &quot;-c&quot;, &quot;stty -echo &lt; /dev/tty&quot;) !)\n</pre></div>\n\n\n<p>From here: <a href=\"http://stackoverflow.com/questions/8582018/scala-console-get-keypress\" target=\"_blank\" title=\"http://stackoverflow.com/questions/8582018/scala-console-get-keypress\">http://stackoverflow.com/questions/8582018/scala-console-get-keypress</a></p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 11521758,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "marcus@ljungblad.nu",
            "sender_full_name": "Marcus Ljungblad (F'13)",
            "sender_id": 2898,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "reading console input",
            "submessages": [],
            "timestamp": 1381956478,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/3d8a0205f76df6ec7742292f8635addd71801017?x=x&version=1",
            "client": "desktop app Mac 0.3.8",
            "content": "<p>So I started playing with the Option in scala today. The concept seems pretty straightforward. If a function could return nothing (null in Java), should the function's return type always be Option[Whatever]? </p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 11804726,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "briandignan@gmail.com",
            "sender_full_name": "Brian Dignan (F'13)",
            "sender_id": 2886,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "Option",
            "submessages": [],
            "timestamp": 1382550884,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/6f331605bee541a4c2c8da37a297786194212c15?x=x&version=2",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"alan@hackerschool.com\">@Alan O'Donnell</span> I wonder if you could use <a href=\"https://github.com/technomancy/lein-scalac\" target=\"_blank\" title=\"https://github.com/technomancy/lein-scalac\">this</a> to manage Scala projects/dependencies with leiningen :)</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 11806782,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "zach.allaun+recurse-zulip@gmail.com",
            "sender_full_name": "Zach Allaun (he) (S'12)",
            "sender_id": 808,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "dependency resolution",
            "submessages": [],
            "timestamp": 1382553792,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/6f331605bee541a4c2c8da37a297786194212c15?x=x&version=2",
            "client": "website",
            "content": "<p>Although you probably have that particular bit of trouble worked out by now</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 11806793,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "zach.allaun+recurse-zulip@gmail.com",
            "sender_full_name": "Zach Allaun (he) (S'12)",
            "sender_id": 808,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "dependency resolution",
            "submessages": [],
            "timestamp": 1382553833,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/d495685876a5a195b6ef5fb9a269b6d0dcd5c5fe?x=x&version=1",
            "client": "website",
            "content": "<p>The official answer is yes, but it probably depends on how you intend to use (or envision someone else using) your function.  It's most useful when the result is going to be mapped  through multiple transformations, each of which should gracefully ignore the failure condition, without repeated checks for <code>null</code>.   <br>\nBy the way, I just learned about <code>Validation</code> in <code>scalaz</code>, which takes this a step further, by keeping track of a list of error conditions.</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 11807265,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "pnf@podsnap.com",
            "sender_full_name": "Peter Fraenkel (he) (S'13)",
            "sender_id": 2142,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "Option",
            "submessages": [],
            "timestamp": 1382554511,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/17f0b91da5342b9891469be52d28e4b0?d=identicon&version=1",
            "client": "desktop app Mac 0.3.8",
            "content": "<p>I think the Scala docs on <a href=\"http://www.scala-lang.org/api/current/index.html#scala.Option\" target=\"_blank\" title=\"http://www.scala-lang.org/api/current/index.html#scala.Option\">Option</a> is a pretty useful example of what <span class=\"user-mention\" data-user-email=\"pnf@podsnap.com\">@Peter Fraenkel (S'13)</span> said </p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 11807411,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "marcus@ljungblad.nu",
            "sender_full_name": "Marcus Ljungblad (F'13)",
            "sender_id": 2898,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "Option",
            "submessages": [],
            "timestamp": 1382554747,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"briandignan@gmail.com\">@Brian Dignan (F'13)</span>, another pattern would be to use an Option where you might have thrown an exception. E.g. in Scala getting the head of an empty list throws an exception; they could have instead have head return an <code>Option[A]</code> etc.</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 11808007,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "Option",
            "submessages": [],
            "timestamp": 1382555661,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p>Oh, actually they have that already: <code>List().headOption</code> returns <code>None</code>.</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 11808029,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "Option",
            "submessages": [],
            "timestamp": 1382555705,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/3d8a0205f76df6ec7742292f8635addd71801017?x=x&version=1",
            "client": "desktop app Mac 0.3.8",
            "content": "<p>That's an interesting usage of Option. Thanks Alan</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 11808193,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "briandignan@gmail.com",
            "sender_full_name": "Brian Dignan (F'13)",
            "sender_id": 2886,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "Option",
            "submessages": [],
            "timestamp": 1382555901,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/3d8a0205f76df6ec7742292f8635addd71801017?x=x&version=1",
            "client": "desktop app Mac 0.3.8",
            "content": "<p>And Peter and Marcus :)</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 11808196,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "briandignan@gmail.com",
            "sender_full_name": "Brian Dignan (F'13)",
            "sender_id": 2886,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "Option",
            "submessages": [],
            "timestamp": 1382555909,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p>Per <span class=\"user-mention\" data-user-email=\"yminsky@janestreet.com\">@Yaron Minsky</span>'s advice, I'm now stalking Marius Eriksen's stuff. Fun talk: <a href=\"http://www.youtube.com/watch?v=JZSJ6P6IpWs\" target=\"_blank\" title=\"http://www.youtube.com/watch?v=JZSJ6P6IpWs\">http://www.youtube.com/watch?v=JZSJ6P6IpWs</a></p>\n<div class=\"message_inline_image\"><a href=\"http://www.youtube.com/watch?v=JZSJ6P6IpWs\" target=\"_blank\" title=\"http://www.youtube.com/watch?v=JZSJ6P6IpWs\"><img src=\"https://i.ytimg.com/vi/JZSJ6P6IpWs/default.jpg\"></a></div>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 11841510,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "effective scala talk",
            "submessages": [],
            "timestamp": 1382622337,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/17f0b91da5342b9891469be52d28e4b0?d=identicon&version=1",
            "client": "desktop app Mac 0.3.8",
            "content": "<p>Great talk! Thanks for sharing! </p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 11844984,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "marcus@ljungblad.nu",
            "sender_full_name": "Marcus Ljungblad (F'13)",
            "sender_id": 2898,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "effective scala talk",
            "submessages": [],
            "timestamp": 1382627682,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/6f583488b0ceaaef4a19844132a81ec9?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"alan@hackerschool.com\">@Alan O'Donnell</span> I was sitting 5 ft away from Marius when I was in the SF office last week. I found myself continually peeking at his screen to watch him code as if he were some sort of mystical creature  :)</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 11865190,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "dschobel@gmail.com",
            "sender_full_name": "Daniel Schobel (W'13)",
            "sender_id": 837,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "effective scala talk",
            "submessages": [],
            "timestamp": 1382658876,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/70292d91a79cfd0fb1c8ad4f650480d631a56e9e?x=x&version=1",
            "client": "desktop app Mac 0.3.8",
            "content": "<p><span class=\"user-mention\" data-user-email=\"alan@hackerschool.com\">@Alan O'Donnell</span> That was a pretty cool talk. I like how his loop method was essentially just a functional while(true) infinite loop using flatMap and tail recursion.</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 11880283,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "lawrence.trey@gmail.com",
            "sender_full_name": "Trey Lawrence (F1'16)",
            "sender_id": 911,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "effective scala talk",
            "submessages": [],
            "timestamp": 1382694099,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p>Yeah. I'm a little fuzzy on the tail recursion bit--he mentions that he's working with Philip Haller on porting the tail recursion optimization to the Future implementation in Scala's standard library.</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 11884522,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "effective scala talk",
            "submessages": [],
            "timestamp": 1382704044,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p>(Slides) Doing IO in Akka: <a href=\"https://speakerdeck.com/bwmcadams/o-for-a-more-civilized-age\" target=\"_blank\" title=\"https://speakerdeck.com/bwmcadams/o-for-a-more-civilized-age\">https://speakerdeck.com/bwmcadams/o-for-a-more-civilized-age</a></p>\n<p>Good overview of networking basics in Scala/Akka.</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 11884993,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "more talks",
            "submessages": [],
            "timestamp": 1382705152,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/6f583488b0ceaaef4a19844132a81ec9?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"alan@hackerschool.com\">@Alan O'Donnell</span> imagine you are chaining futures infinitely in a while(true) loop. the twitter future implementation doesn't allocate a new object even though you are producing a new future for each iteration and chaining fx calls. the analogy Marius makes is between Future object allocations and stack frames in the TCO case. </p>\n<p>you can check out the implementation details in <a href=\"https://github.com/twitter/util/blob/master/util-core/src/main/scala/com/twitter/util/Promise.scala\" target=\"_blank\" title=\"https://github.com/twitter/util/blob/master/util-core/src/main/scala/com/twitter/util/Promise.scala\">https://github.com/twitter/util/blob/master/util-core/src/main/scala/com/twitter/util/Promise.scala</a> but it's gnarly looking code. Future.scala in the same package is where the nice abstraction lives.</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 11910190,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "dschobel@gmail.com",
            "sender_full_name": "Daniel Schobel (W'13)",
            "sender_id": 837,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "effective scala talk",
            "submessages": [],
            "timestamp": 1382748077,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p>Cool, I'm going to take a look this weekend.</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 11914653,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "effective scala talk",
            "submessages": [],
            "timestamp": 1382758444,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/d495685876a5a195b6ef5fb9a269b6d0dcd5c5fe?x=x&version=1",
            "client": "API",
            "content": "<p>Is it the twitter future implementation that conserves threads when mapping or scala's?  I hope the latter...</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 11932360,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "pnf@podsnap.com",
            "sender_full_name": "Peter Fraenkel (he) (S'13)",
            "sender_id": 2142,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "effective scala talk",
            "submessages": [],
            "timestamp": 1382804883,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p>Fascinating discussion on why immutable sets in Scala are invariant rather than covariant: <a href=\"https://groups.google.com/forum/#!topic/scala-user/hbxt2TnRii0\" target=\"_blank\" title=\"https://groups.google.com/forum/#!topic/scala-user/hbxt2TnRii0\">https://groups.google.com/forum/#!topic/scala-user/hbxt2TnRii0</a></p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 12025326,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "covariant sets",
            "submessages": [],
            "timestamp": 1383010871,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p>Crossposting from the OCaml channel:</p>\n<p>I spent a bunch of the weekend working through the Real World OCaml book in Scala (as one is wont to do). I'm going to post the code here in case anyone's interested: <a href=\"https://github.com/happy4crazy/tacky\" target=\"_blank\" title=\"https://github.com/happy4crazy/tacky\">https://github.com/happy4crazy/tacky</a></p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 12045238,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "ocaml",
            "submessages": [],
            "timestamp": 1383054397,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/6f583488b0ceaaef4a19844132a81ec9?d=identicon&version=1",
            "client": "website",
            "content": "<p>hey <span class=\"user-mention\" data-user-email=\"alan@hackerschool.com\">@Alan O'Donnell</span> saw this pop up on my $socialnetwork stream and remembered you said you wanted to learn akka / network programming in scala: <a href=\"https://github.com/RayRoestenburg/scala-io-exercise-1\" target=\"_blank\" title=\"https://github.com/RayRoestenburg/scala-io-exercise-1\">https://github.com/RayRoestenburg/scala-io-exercise-1</a></p>\n<p>it's  a series of exercises from an akka workshop at the <a href=\"http://scala.io\" target=\"_blank\" title=\"http://scala.io\">scala.io</a> conf.</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 12069800,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "dschobel@gmail.com",
            "sender_full_name": "Daniel Schobel (W'13)",
            "sender_id": 837,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "akka",
            "submessages": [],
            "timestamp": 1383092096,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"dschobel@gmail.com\">@Daniel Schobel (W'13)</span> cool, thanks!</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 12071848,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "akka",
            "submessages": [],
            "timestamp": 1383096189,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/17f0b91da5342b9891469be52d28e4b0?d=identicon&version=1",
            "client": "desktop app Mac 0.3.8",
            "content": "<p>I'm trying to do something along these lines:</p>\n<div class=\"codehilite\"><pre><span class=\"k\">sealed</span> <span class=\"k\">trait</span> <span class=\"nc\">Message</span>\n<span class=\"k\">case</span> <span class=\"k\">class</span> <span class=\"nc\">Request</span><span class=\"o\">(</span><span class=\"n\">term</span><span class=\"k\">:</span> <span class=\"kt\">Int</span><span class=\"o\">)</span> <span class=\"k\">extends</span> <span class=\"nc\">Message</span>\n<span class=\"k\">case</span> <span class=\"k\">class</span> <span class=\"nc\">RequestVote</span><span class=\"o\">(...)</span> <span class=\"k\">extends</span> <span class=\"nc\">Request</span>\n<span class=\"k\">case</span> <span class=\"k\">class</span> <span class=\"nc\">AppendEntries</span><span class=\"o\">(...)</span> <span class=\"k\">extends</span> <span class=\"nc\">Request</span>\n<span class=\"k\">case</span> <span class=\"k\">object</span> <span class=\"nc\">Timeout</span> <span class=\"k\">extends</span> <span class=\"nc\">Message</span>\n</pre></div>\n\n\n<p>(I need to do some processing on all <code>Request</code> messages but not <code>Timeout</code>)</p>\n<p>But that is not legal and the error says: <code>case class RequestVote has case ancestor raft.Request, but case-to-case inheritance is prohibited. To overcome this limitation, use extractors to pattern match on non-leaf nodes.</code> </p>\n<p>What does that actually mean or is there a better way to achieve similar result?</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 12149633,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "marcus@ljungblad.nu",
            "sender_full_name": "Marcus Ljungblad (F'13)",
            "sender_id": 2898,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "case inheritance",
            "submessages": [],
            "timestamp": 1383242930,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/17f0b91da5342b9891469be52d28e4b0?d=identicon&version=1",
            "client": "desktop app Mac 0.3.8",
            "content": "<p>To give a little more context: I'm using the Akka FSM and for every state I need to check two conditions. </p>\n<div class=\"codehilite\"><pre><span class=\"n\">when</span><span class=\"o\">(</span><span class=\"nc\">Follower</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n    <span class=\"k\">case</span> <span class=\"nc\">Event</span><span class=\"o\">(</span><span class=\"n\">rpc</span><span class=\"k\">:</span> <span class=\"kt\">RequestVote</span><span class=\"o\">,</span> <span class=\"n\">d</span><span class=\"k\">:</span> <span class=\"kt\">Data</span><span class=\"o\">)</span> <span class=\"k\">if</span> <span class=\"n\">rpc</span><span class=\"o\">.</span><span class=\"n\">term</span> <span class=\"o\">&gt;</span> <span class=\"n\">d</span><span class=\"o\">.</span><span class=\"n\">currentTerm</span> <span class=\"k\">=&gt;</span>\n        <span class=\"n\">goto</span><span class=\"o\">(</span><span class=\"nc\">Follower</span><span class=\"o\">)</span> <span class=\"n\">using</span> <span class=\"n\">nextTerm</span><span class=\"o\">(</span><span class=\"n\">d</span><span class=\"o\">,</span> <span class=\"n\">rpc</span><span class=\"o\">.</span><span class=\"n\">term</span><span class=\"o\">)</span>\n    <span class=\"k\">case</span> <span class=\"nc\">Event</span><span class=\"o\">(</span><span class=\"n\">rpc</span><span class=\"k\">:</span> <span class=\"kt\">AppendEntries</span><span class=\"o\">,</span> <span class=\"n\">d</span><span class=\"k\">:</span> <span class=\"kt\">Data</span><span class=\"o\">)</span> <span class=\"k\">if</span> <span class=\"n\">rpc</span><span class=\"o\">.</span><span class=\"n\">term</span> <span class=\"o\">&gt;</span> <span class=\"n\">d</span><span class=\"o\">.</span><span class=\"n\">currentTerm</span> <span class=\"k\">=&gt;</span>\n        <span class=\"n\">goto</span><span class=\"o\">(</span><span class=\"nc\">Follower</span><span class=\"o\">)</span> <span class=\"n\">using</span> <span class=\"n\">nextTerm</span><span class=\"o\">(</span><span class=\"n\">d</span><span class=\"o\">,</span> <span class=\"n\">rpc</span><span class=\"o\">.</span><span class=\"n\">term</span><span class=\"o\">)</span>\n\n   <span class=\"c1\">// other cases</span>\n<span class=\"o\">}</span>\n</pre></div>\n\n\n<p>It's repetitive and doesn't look as nice as it could I think. </p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 12150341,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "marcus@ljungblad.nu",
            "sender_full_name": "Marcus Ljungblad (F'13)",
            "sender_id": 2898,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "case inheritance",
            "submessages": [],
            "timestamp": 1383243945,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p>Huh, I wasn't aware you couldn't do case-to-case inheritance.</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 12150683,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "case inheritance",
            "submessages": [],
            "timestamp": 1383244288,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p>You can do something like this:</p>\n<div class=\"codehilite\"><pre><span class=\"k\">sealed</span> <span class=\"k\">trait</span> <span class=\"nc\">Message</span>\n<span class=\"k\">case</span> <span class=\"k\">object</span> <span class=\"nc\">Timeout</span> <span class=\"k\">extends</span> <span class=\"nc\">Message</span>\n\n<span class=\"k\">sealed</span> <span class=\"k\">trait</span> <span class=\"nc\">Request</span> <span class=\"k\">extends</span> <span class=\"nc\">Message</span>\n<span class=\"k\">case</span> <span class=\"k\">class</span> <span class=\"nc\">RequestVote</span><span class=\"o\">(...)</span> <span class=\"k\">extends</span> <span class=\"nc\">Request</span>\n<span class=\"k\">case</span> <span class=\"k\">class</span> <span class=\"nc\">AppendEntrie</span><span class=\"o\">(...)</span> <span class=\"k\">extends</span> <span class=\"nc\">Request</span>\n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 12150876,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "case inheritance",
            "submessages": [],
            "timestamp": 1383244538,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/17f0b91da5342b9891469be52d28e4b0?d=identicon&version=1",
            "client": "desktop app Mac 0.3.8",
            "content": "<p>True. That won't make it possible to define common parameters of <code>RequestVote</code> and <code>AppendEntries</code> as traits cant have parameters though. </p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 12163866,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "marcus@ljungblad.nu",
            "sender_full_name": "Marcus Ljungblad (F'13)",
            "sender_id": 2898,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "case inheritance",
            "submessages": [],
            "timestamp": 1383266026,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/17f0b91da5342b9891469be52d28e4b0?d=identicon&version=1",
            "client": "desktop app Mac 0.3.8",
            "content": "<p>On a more depressing note, seems I underestimated the corner cases and may have to do this inline anyway... </p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 12163913,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "marcus@ljungblad.nu",
            "sender_full_name": "Marcus Ljungblad (F'13)",
            "sender_id": 2898,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "case inheritance",
            "submessages": [],
            "timestamp": 1383266075,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/d495685876a5a195b6ef5fb9a269b6d0dcd5c5fe?x=x&version=1",
            "client": "website",
            "content": "<p>Fascinating indeed, though I found myself immensely confused at times.  I think I get it now, the distinction betwen</p>\n<div class=\"codehilite\"><pre>scala&gt; ({s:Set[Any] =&gt; s.contains(3)}) (Set(&quot;foo&quot;))\nres54: Boolean = false\n</pre></div>\n\n\n<p>and</p>\n<div class=\"codehilite\"><pre>scala&gt; Set(&quot;foo&quot;) contains 3\n&lt;console&gt;:8: error: type mismatch;\n found   : Int(3)\n required: String\n              Set(&quot;foo&quot;) contains 3\n                                  ^\n</pre></div>\n\n\n<p>still bothers me.</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 12189490,
            "is_me_message": false,
            "last_edit_timestamp": 1383320263,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "pnf@podsnap.com",
            "sender_full_name": "Peter Fraenkel (he) (S'13)",
            "sender_id": 2142,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "covariant sets",
            "submessages": [],
            "timestamp": 1383319931,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p>If anyone would like to chat about stuff from the first week, let me know <img alt=\":thumbsup:\" class=\"emoji\" src=\"static/third/gemoji/images/emoji/thumbsup.png\" title=\":thumbsup:\"> </p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 12362837,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "reactive course",
            "submessages": [],
            "timestamp": 1383677954,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4f5279e356a105513701942b5b6af05f?d=identicon&version=1",
            "client": "website",
            "content": "<p>I'm not in the course but FRP is super cool. I'll be around later this week if anyone wants to have a chat.</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 12363070,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "clemmer.alexander@gmail.com",
            "sender_full_name": "Alex Clemmer (S'13)",
            "sender_id": 2132,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "reactive course",
            "submessages": [],
            "timestamp": 1383678305,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4f5279e356a105513701942b5b6af05f?d=identicon&version=1",
            "client": "website",
            "content": "<p>(By \"later\" I mean Sat morning through Monday evening. So unfortunately the least busy time to catch me will be in the weekend.)</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 12363098,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "clemmer.alexander@gmail.com",
            "sender_full_name": "Alex Clemmer (S'13)",
            "sender_id": 2132,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "reactive course",
            "submessages": [],
            "timestamp": 1383678362,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/3ca604eb0c0cfa22b4a10fc739c056c8?d=identicon&version=1",
            "client": "website",
            "content": "<p>Maybe!</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 12365151,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "lukeadba@gmail.com",
            "sender_full_name": "Luke Barone-Adesi (he) (F'13)",
            "sender_id": 2903,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "reactive course",
            "submessages": [],
            "timestamp": 1383681297,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/70292d91a79cfd0fb1c8ad4f650480d631a56e9e?x=x&version=1",
            "client": "desktop app Mac 0.3.9",
            "content": "<p>I'm signed up, and so are a bunch of people at eBay/hunch. Would love to discuss the coursework.</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 12385962,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "lawrence.trey@gmail.com",
            "sender_full_name": "Trey Lawrence (F1'16)",
            "sender_id": 911,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "reactive course",
            "submessages": [],
            "timestamp": 1383717446,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"lawrence.trey@gmail.com\">@Trey Lawrence (S'12)</span> yay!</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 12397170,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "reactive course",
            "submessages": [],
            "timestamp": 1383743853,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p>I'm hoping this will be the first Coursera course I actually finish...</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 12397274,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "reactive course",
            "submessages": [],
            "timestamp": 1383744075,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/d495685876a5a195b6ef5fb9a269b6d0dcd5c5fe?x=x&version=1",
            "client": "website",
            "content": "<p>Is the course a gentler or a more comprehensive version of the <a href=\"http://lampwww.epfl.ch/~imaier/pub/DeprecatingObserversTR2010.pdf\" target=\"_blank\" title=\"http://lampwww.epfl.ch/~imaier/pub/DeprecatingObserversTR2010.pdf\">deprecating the observer pattern</a> paper?</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 12398363,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "pnf@podsnap.com",
            "sender_full_name": "Peter Fraenkel (he) (S'13)",
            "sender_id": 2142,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "reactive course",
            "submessages": [],
            "timestamp": 1383746427,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p>I think so.</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 12398370,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "reactive course",
            "submessages": [],
            "timestamp": 1383746457,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p>Have you read the paper? I started but got distracted.</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 12398378,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "reactive course",
            "submessages": [],
            "timestamp": 1383746471,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/d495685876a5a195b6ef5fb9a269b6d0dcd5c5fe?x=x&version=1",
            "client": "website",
            "content": "<p>I'm about 1/3 of the way through (having googled for it when you first mentioned the coursera and then being \"busy\").  I'm debating whether I can read it on the corporate dime in the interest of remedying their rather f'd up FRP implementation.</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 12398454,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "pnf@podsnap.com",
            "sender_full_name": "Peter Fraenkel (he) (S'13)",
            "sender_id": 2142,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "reactive course",
            "submessages": [],
            "timestamp": 1383746604,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/d495685876a5a195b6ef5fb9a269b6d0dcd5c5fe?x=x&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"alan@hackerschool.com\">@Alan O'Donnell</span> Does it bother you?  It seems reasonable on some level, but I can't actually elaborate the rules Scala is following.<br>\nI'm generally OK with the argument that Set has to be invariant since it extends the contravariant Function1 (which means I have to dismiss MO's suggestion that it's a historical artifact).</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 12398553,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "pnf@podsnap.com",
            "sender_full_name": "Peter Fraenkel (he) (S'13)",
            "sender_id": 2142,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "covariant sets",
            "submessages": [],
            "timestamp": 1383746774,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"pnf@podsnap.com\">@Peter Fraenkel (S'13)</span> I need to think about it some more. I also want to look into one of the suggestions about using implicit conversions (set --&gt; characteristic function) instead of inheritance. I'm not sure how that effects the variance stuff yet.</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 12402008,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "covariant sets",
            "submessages": [],
            "timestamp": 1383753462,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/d495685876a5a195b6ef5fb9a269b6d0dcd5c5fe?x=x&version=1",
            "client": "API",
            "content": "<p>Have a look at this: <a href=\"https://github.com/clojure/core.typed/blob/master/src/main/clojure/clojure/core/typed/base_env.clj\" target=\"_blank\" title=\"https://github.com/clojure/core.typed/blob/master/src/main/clojure/clojure/core/typed/base_env.clj\">https://github.com/clojure/core.typed/blob/master/src/main/clojure/clojure/core/typed/base_env.clj</a></p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 12404675,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "pnf@podsnap.com",
            "sender_full_name": "Peter Fraenkel (he) (S'13)",
            "sender_id": 2142,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "covariant sets",
            "submessages": [],
            "timestamp": 1383756779,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p>Little example of using ScalaCheck: <a href=\"https://gist.github.com/happy4crazy/7401388\" target=\"_blank\" title=\"https://gist.github.com/happy4crazy/7401388\">https://gist.github.com/happy4crazy/7401388</a></p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 12591865,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "ScalaChecking arithmetic exprs",
            "submessages": [],
            "timestamp": 1384105865,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p>I found it surprisingly hard to get ScalaCheck to not overflow the stack while generating arbitrary arithmetic expressions. Is it obvious why the trees would explode if you generate <code>Num/Plus/Mult</code> terms with equal probability?</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 12591872,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "ScalaChecking arithmetic exprs",
            "submessages": [],
            "timestamp": 1384105915,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"pnf@podsnap.com\">@Peter Fraenkel (S'13)</span>, math question :)</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 12591908,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "ScalaChecking arithmetic exprs",
            "submessages": [],
            "timestamp": 1384105932,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/d495685876a5a195b6ef5fb9a269b6d0dcd5c5fe?x=x&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"alan@hackerschool.com\">@Alan O'Donnell</span>  Unfair.  I'm out of HS, so I'm not supposed to have to think any more.<br>\nAlso, I don't really know much about ScalaCheck, but what I'm presuming is happening is that the <code>frequency</code> call keeps building out the tree, substituting one of the choices whenever it needs a node.  So, suppose that, any some point in the tree-building process, there are exactly <code>n</code> nodes that need to be created (i.e. <code>n/2</code> existing leaf nodes that are <code>Mult</code> or <code>Plus</code>.    rather than <code>Arith</code>). Let's say that the frequencies are such that there's a probability <code>p</code> that we'll choose <code>Arith</code> for any given draw.  Then the expected number of nodes we'll need to create in the next cycle is <code>sum_{i=1..n} (0*p + 2*(1-p)) = 2n*(1-p)</code>.  If <code>p&gt;0.5</code>, then expectation is that <code>n</code> gets smaller, while if <code>p&lt;0.5</code>, the expectation is that <code>n</code> gets bigger.  So my guess would be that <code>n</code> blows up when <code>f_num &lt; f_arith + f_mult</code>, which is not exactly the condition you describe.</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 12594072,
            "is_me_message": false,
            "last_edit_timestamp": 1384111571,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "pnf@podsnap.com",
            "sender_full_name": "Peter Fraenkel (he) (S'13)",
            "sender_id": 2142,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "ScalaChecking arithmetic exprs",
            "submessages": [],
            "timestamp": 1384111184,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/d495685876a5a195b6ef5fb9a269b6d0dcd5c5fe?x=x&version=1",
            "client": "website",
            "content": "<p>The more elaborate way to go about this, which I haven't thought enough about, is to compute the distribution of <code>n_{t+1}</code> contingent on <code>n_t</code>, which I think is </p>\n<div class=\"codehilite\"><pre>P(n<span class=\"nb\">_{</span>t+1<span class=\"nb\">}</span>|n<span class=\"nb\">_</span>t) = p<span class=\"nb\">^{</span>n<span class=\"nb\">_</span>t-n<span class=\"nb\">_{</span>t+1<span class=\"nb\">}</span>/2<span class=\"nb\">}</span> (1-p)<span class=\"nb\">^{</span>n<span class=\"nb\">_{</span>t+1<span class=\"nb\">}</span>/2<span class=\"nb\">}</span> <span class=\"k\">\\binom</span><span class=\"nb\">{</span>n<span class=\"nb\">_</span>t<span class=\"nb\">}{</span>n<span class=\"nb\">_{</span>t+1<span class=\"nb\">}</span>/2<span class=\"nb\">}</span>\n</pre></div>\n\n\n<p>and then evaluating some godawful infinitely nested sum.</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 12594224,
            "is_me_message": false,
            "last_edit_timestamp": 1384115633,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "pnf@podsnap.com",
            "sender_full_name": "Peter Fraenkel (he) (S'13)",
            "sender_id": 2142,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "ScalaChecking arithmetic exprs",
            "submessages": [],
            "timestamp": 1384111480,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p><a href=\"https://speakerdeck.com/agemooij/between-zero-and-hero-scala-tips-and-tricks-for-the-intermediate-scala-developer\" target=\"_blank\" title=\"https://speakerdeck.com/agemooij/between-zero-and-hero-scala-tips-and-tricks-for-the-intermediate-scala-developer\">https://speakerdeck.com/agemooij/between-zero-and-hero-scala-tips-and-tricks-for-the-intermediate-scala-developer</a></p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 12604074,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "tips and tricks",
            "submessages": [],
            "timestamp": 1384128579,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"marcus@ljungblad.nu\">@Marcus Ljungblad (F'13)</span> : <a href=\"https://gist.github.com/happy4crazy/7420102\" target=\"_blank\" title=\"https://gist.github.com/happy4crazy/7420102\">https://gist.github.com/happy4crazy/7420102</a></p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 12646596,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "akka example",
            "submessages": [],
            "timestamp": 1384203035,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"nada.amin@gmail.com\">@Nada Amin</span>, <span class=\"user-mention\" data-user-email=\"pnf@podsnap.com\">@Peter Fraenkel (S'13)</span></p>\n<p>Suppose you want to implement a priority queue in Scala, and you want to statically segregate priority queues that were constructed with different orderings. E.g., you shouldn't be able to meld two priority queues unless they use the same ordering, and in particular, <code>meld</code> is presumably going to need a more complicated type than <code>meld: PrioQueue[A] =&gt; PrioQueue[A] =&gt; PrioQueue[A]</code>.</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 12680007,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "type segregation",
            "submessages": [],
            "timestamp": 1384269858,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p>Jane Street's <code>Core</code> lib in OCaml accomplishes something similar for immutable maps by using phantom types.</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 12680016,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "type segregation",
            "submessages": [],
            "timestamp": 1384269900,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p>So, an OCaml map from ints to strings doesn't have type <code>(int, string) Map.t</code> or whatever; it looks like <code>(int, string, some_phantom_type_tag_derived_from_the_comparison_function) Map.t</code>.</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 12680088,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "type segregation",
            "submessages": [],
            "timestamp": 1384269993,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p>I guess one way to do this in Scala is to just follow ML, like how the Coursera reactive course does it:</p>\n<div class=\"codehilite\"><pre><span class=\"k\">trait</span> <span class=\"nc\">HeapModule</span> <span class=\"o\">{</span>\n  <span class=\"k\">type</span> <span class=\"kt\">Elem</span>\n  <span class=\"k\">val</span> <span class=\"n\">ord</span><span class=\"k\">:</span> <span class=\"kt\">Ordering</span><span class=\"o\">[</span><span class=\"kt\">Elem</span><span class=\"o\">]</span>\n\n  <span class=\"k\">type</span> <span class=\"kt\">H</span>\n  <span class=\"o\">...</span>\n<span class=\"o\">}</span>\n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 12680115,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "type segregation",
            "submessages": [],
            "timestamp": 1384270078,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p>You specify the type of elements, the type of heaps, and an ordering on elements, and then you get a little algebra. You can't mix heaps from different algebras.</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 12680173,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "type segregation",
            "submessages": [],
            "timestamp": 1384270183,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p>Because a heap in the wild has type <code>SomeParticularHeapModuleImplementation.H</code>.</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 12680215,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "type segregation",
            "submessages": [],
            "timestamp": 1384270211,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p>So as long as <code>H</code> stays abstract, you can't mix <code>H</code>s from different concrete <code>HeapModule</code>s.</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 12680248,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "type segregation",
            "submessages": [],
            "timestamp": 1384270253,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/d495685876a5a195b6ef5fb9a269b6d0dcd5c5fe?x=x&version=1",
            "client": "API",
            "content": "<p>After much pecking and erasing I've determined that I cannot have this conversation on Zulip for iOS! I can't even use proper emoji.<br>\nBut the problem doesn't sound so hard in the abstract. Can't you just parametrize the queue type by the comparator type, which has a companion object providing the comparator function? <br>\nOn a related topic, I was wondering, philosophically, whether a scala queue implementation is required to be functionally pure (the double stack, amortized O(1) thing), or whether it's ok to cheat</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 12684230,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "pnf@podsnap.com",
            "sender_full_name": "Peter Fraenkel (he) (S'13)",
            "sender_id": 2142,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "type segregation",
            "submessages": [],
            "timestamp": 1384275900,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"pnf@podsnap.com\">@Peter Fraenkel (S'13)</span>, yeah, I was experimenting with parameterizing by the singleton type of the <code>Ordering[Elem]</code>.</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 12684924,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "type segregation",
            "submessages": [],
            "timestamp": 1384276949,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p>Sketch:</p>\n<div class=\"codehilite\"><pre><span class=\"k\">trait</span> <span class=\"nc\">HeapModule</span> <span class=\"o\">{</span>\n  <span class=\"k\">type</span> <span class=\"kt\">Elem</span>\n  <span class=\"k\">type</span> <span class=\"kt\">Ord</span> <span class=\"k\">&lt;:</span> <span class=\"kt\">Ordering</span><span class=\"o\">[</span><span class=\"kt\">Elem</span><span class=\"o\">]</span>\n  <span class=\"k\">def</span> <span class=\"n\">ord</span><span class=\"k\">:</span> <span class=\"kt\">Ord</span>\n\n  <span class=\"k\">type</span> <span class=\"kt\">T</span><span class=\"o\">[</span><span class=\"kt\">Phantom</span><span class=\"o\">]</span>\n  <span class=\"k\">def</span> <span class=\"n\">empty</span><span class=\"k\">:</span> <span class=\"kt\">T</span><span class=\"o\">[</span><span class=\"kt\">Ord</span><span class=\"o\">]</span>\n  <span class=\"k\">def</span> <span class=\"n\">isEmpty</span><span class=\"o\">(</span><span class=\"n\">t</span><span class=\"k\">:</span> <span class=\"kt\">T</span><span class=\"o\">[</span><span class=\"kt\">Ord</span><span class=\"o\">])</span><span class=\"k\">:</span> <span class=\"kt\">Boolean</span>\n\n  <span class=\"k\">def</span> <span class=\"n\">insert</span><span class=\"o\">(</span><span class=\"n\">t</span><span class=\"k\">:</span> <span class=\"kt\">T</span><span class=\"o\">[</span><span class=\"kt\">Ord</span><span class=\"o\">],</span> <span class=\"n\">e</span><span class=\"k\">:</span> <span class=\"kt\">Elem</span><span class=\"o\">)</span><span class=\"k\">:</span> <span class=\"kt\">T</span><span class=\"o\">[</span><span class=\"kt\">Ord</span><span class=\"o\">]</span>\n  <span class=\"k\">def</span> <span class=\"n\">getMin</span><span class=\"o\">(</span><span class=\"n\">t</span><span class=\"k\">:</span> <span class=\"kt\">T</span><span class=\"o\">[</span><span class=\"kt\">Ord</span><span class=\"o\">])</span><span class=\"k\">:</span> <span class=\"kt\">Option</span><span class=\"o\">[</span><span class=\"kt\">Elem</span><span class=\"o\">]</span>\n  <span class=\"k\">def</span> <span class=\"n\">deleteMin</span><span class=\"o\">(</span><span class=\"n\">t</span><span class=\"k\">:</span> <span class=\"kt\">T</span><span class=\"o\">[</span><span class=\"kt\">Ord</span><span class=\"o\">])</span><span class=\"k\">:</span> <span class=\"kt\">Option</span><span class=\"o\">[</span><span class=\"kt\">T</span><span class=\"o\">[</span><span class=\"kt\">Ord</span><span class=\"o\">]]</span>\n  <span class=\"k\">def</span> <span class=\"n\">meld</span><span class=\"o\">(</span><span class=\"n\">t1</span><span class=\"k\">:</span> <span class=\"kt\">T</span><span class=\"o\">[</span><span class=\"kt\">Ord</span><span class=\"o\">],</span> <span class=\"n\">t2</span><span class=\"k\">:</span> <span class=\"kt\">T</span><span class=\"o\">[</span><span class=\"kt\">Ord</span><span class=\"o\">])</span><span class=\"k\">:</span> <span class=\"kt\">T</span><span class=\"o\">[</span><span class=\"kt\">Ord</span><span class=\"o\">]</span>\n<span class=\"o\">}</span>\n\n<span class=\"k\">trait</span> <span class=\"nc\">ListHeapModule</span> <span class=\"k\">extends</span> <span class=\"nc\">HeapModule</span> <span class=\"o\">{</span>\n  <span class=\"k\">type</span> <span class=\"kt\">T</span><span class=\"o\">[</span><span class=\"kt\">Phantom</span><span class=\"o\">]</span> <span class=\"k\">=</span> <span class=\"nc\">List</span><span class=\"o\">[</span><span class=\"kt\">Elem</span><span class=\"o\">]</span>\n  <span class=\"k\">def</span> <span class=\"n\">empty</span> <span class=\"k\">=</span> <span class=\"nc\">Nil</span>\n  <span class=\"k\">def</span> <span class=\"n\">isEmpty</span><span class=\"o\">(</span><span class=\"n\">t</span><span class=\"k\">:</span> <span class=\"kt\">T</span><span class=\"o\">[</span><span class=\"kt\">Ord</span><span class=\"o\">])</span><span class=\"k\">:</span> <span class=\"kt\">Boolean</span> <span class=\"o\">=</span> <span class=\"n\">t</span><span class=\"o\">.</span><span class=\"n\">isEmpty</span>\n\n  <span class=\"k\">def</span> <span class=\"n\">insert</span><span class=\"o\">(</span><span class=\"n\">t</span><span class=\"k\">:</span> <span class=\"kt\">T</span><span class=\"o\">[</span><span class=\"kt\">Ord</span><span class=\"o\">],</span> <span class=\"n\">e</span><span class=\"k\">:</span> <span class=\"kt\">Elem</span><span class=\"o\">)</span> <span class=\"k\">=</span> <span class=\"n\">e</span> <span class=\"o\">::</span> <span class=\"n\">t</span>\n  <span class=\"k\">def</span> <span class=\"n\">getMin</span><span class=\"o\">(</span><span class=\"n\">t</span><span class=\"k\">:</span> <span class=\"kt\">T</span><span class=\"o\">[</span><span class=\"kt\">Ord</span><span class=\"o\">])</span> <span class=\"k\">=</span> <span class=\"n\">t</span><span class=\"o\">.</span><span class=\"n\">sorted</span><span class=\"o\">(</span><span class=\"n\">ord</span><span class=\"o\">)</span> <span class=\"k\">match</span> <span class=\"o\">{</span>\n    <span class=\"k\">case</span> <span class=\"nc\">Nil</span> <span class=\"k\">=&gt;</span> <span class=\"nc\">None</span>\n    <span class=\"k\">case</span> <span class=\"n\">e</span> <span class=\"o\">::</span> <span class=\"n\">rest</span> <span class=\"k\">=&gt;</span> <span class=\"nc\">Some</span><span class=\"o\">(</span><span class=\"n\">e</span><span class=\"o\">)</span>\n  <span class=\"o\">}</span>\n  <span class=\"k\">def</span> <span class=\"n\">deleteMin</span><span class=\"o\">(</span><span class=\"n\">t</span><span class=\"k\">:</span> <span class=\"kt\">T</span><span class=\"o\">[</span><span class=\"kt\">Ord</span><span class=\"o\">])</span> <span class=\"k\">=</span> <span class=\"n\">t</span><span class=\"o\">.</span><span class=\"n\">sorted</span><span class=\"o\">(</span><span class=\"n\">ord</span><span class=\"o\">)</span> <span class=\"k\">match</span> <span class=\"o\">{</span>\n    <span class=\"k\">case</span> <span class=\"nc\">Nil</span> <span class=\"k\">=&gt;</span> <span class=\"nc\">None</span>\n    <span class=\"k\">case</span> <span class=\"n\">e</span> <span class=\"o\">::</span> <span class=\"n\">rest</span> <span class=\"k\">=&gt;</span> <span class=\"nc\">Some</span><span class=\"o\">(</span><span class=\"n\">rest</span><span class=\"o\">)</span>\n  <span class=\"o\">}</span>\n  <span class=\"k\">def</span> <span class=\"n\">meld</span><span class=\"o\">(</span><span class=\"n\">t1</span><span class=\"k\">:</span> <span class=\"kt\">T</span><span class=\"o\">[</span><span class=\"kt\">Ord</span><span class=\"o\">],</span> <span class=\"n\">t2</span><span class=\"k\">:</span> <span class=\"kt\">T</span><span class=\"o\">[</span><span class=\"kt\">Ord</span><span class=\"o\">])</span> <span class=\"k\">=</span> <span class=\"n\">t1</span> <span class=\"o\">++</span> <span class=\"n\">t2</span>\n<span class=\"o\">}</span>\n\n<span class=\"k\">object</span> <span class=\"nc\">ListHeapModule</span> <span class=\"o\">{</span>\n  <span class=\"k\">def</span> <span class=\"n\">apply</span><span class=\"o\">[</span><span class=\"kt\">E</span><span class=\"o\">](</span><span class=\"k\">implicit</span> <span class=\"n\">ordering</span><span class=\"k\">:</span> <span class=\"kt\">Ordering</span><span class=\"o\">[</span><span class=\"kt\">E</span><span class=\"o\">])</span><span class=\"k\">:</span> <span class=\"kt\">HeapModule</span> <span class=\"o\">{</span>\n    <span class=\"k\">type</span> <span class=\"kt\">Elem</span> <span class=\"o\">=</span> <span class=\"kt\">E</span>\n    <span class=\"k\">type</span> <span class=\"kt\">Ord</span> <span class=\"o\">=</span> <span class=\"n\">ordering</span><span class=\"o\">.</span><span class=\"k\">type</span>\n  <span class=\"o\">}</span> <span class=\"k\">=</span> <span class=\"k\">new</span> <span class=\"nc\">ListHeapModule</span> <span class=\"o\">{</span>\n    <span class=\"k\">type</span> <span class=\"kt\">Elem</span> <span class=\"o\">=</span> <span class=\"n\">E</span>\n    <span class=\"k\">type</span> <span class=\"kt\">Ord</span> <span class=\"o\">=</span> <span class=\"n\">ordering</span><span class=\"o\">.</span><span class=\"k\">type</span>\n    <span class=\"kt\">def</span> <span class=\"kt\">ord</span> <span class=\"o\">=</span> <span class=\"n\">ordering</span>\n  <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 12685008,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "type segregation",
            "submessages": [],
            "timestamp": 1384277067,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p>Then e.g.</p>\n<div class=\"codehilite\"><pre><span class=\"k\">val</span> <span class=\"nc\">AscendingIntHeap</span> <span class=\"k\">=</span> <span class=\"nc\">ListHeapModule</span><span class=\"o\">[</span><span class=\"kt\">Int</span><span class=\"o\">]</span>\n<span class=\"k\">val</span> <span class=\"nc\">DescendingIntHeap</span> <span class=\"k\">=</span> <span class=\"nc\">ListHeapModule</span><span class=\"o\">(</span><span class=\"n\">scala</span><span class=\"o\">.</span><span class=\"n\">math</span><span class=\"o\">.</span><span class=\"nc\">Ordering</span><span class=\"o\">.</span><span class=\"nc\">Int</span><span class=\"o\">.</span><span class=\"n\">reverse</span><span class=\"o\">)</span>\n\n<span class=\"k\">val</span> <span class=\"n\">e1</span> <span class=\"k\">=</span> <span class=\"nc\">AscendingIntHeap</span><span class=\"o\">.</span><span class=\"n\">empty</span>\n<span class=\"k\">val</span> <span class=\"n\">e2</span> <span class=\"k\">=</span> <span class=\"nc\">DescendingIntHeap</span><span class=\"o\">.</span><span class=\"n\">empty</span>\n\n<span class=\"c1\">// (correctly) won&#39;t compile</span>\n<span class=\"nc\">AscendingIntHeap</span><span class=\"o\">.</span><span class=\"n\">meld</span><span class=\"o\">(</span><span class=\"n\">e1</span><span class=\"o\">,</span> <span class=\"n\">e2</span><span class=\"o\">)</span>\n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 12685098,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "type segregation",
            "submessages": [],
            "timestamp": 1384277210,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p>Haha but this seems pretty complicated :)</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 12685203,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "type segregation",
            "submessages": [],
            "timestamp": 1384277338,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/7b22ad8fae879dc36792aa1391781fa2?d=identicon&version=1",
            "client": "desktop app 0.3.6",
            "content": "<p>hey <span class=\"user-mention\" data-user-email=\"alan@hackerschool.com\">@Alan O'Donnell</span> I know i'm late to the party, but a bunch of us at Tapad are working on the course.  I think we're going to set up some kind of \"after work meeting\" to discuss.  you're welcome to join us! some very experienced scala-ers round these parts.</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 12793248,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "yael@nyu.edu",
            "sender_full_name": "Yael Elmatad (she) (S'12)",
            "sender_id": 862,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "coursera",
            "submessages": [],
            "timestamp": 1384462733,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"yael@nyu.edu\">@Yael Elmatad (S'12)</span> yeah I'd love to. When are you meeting?</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 12794894,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "coursera",
            "submessages": [],
            "timestamp": 1384464827,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/7b22ad8fae879dc36792aa1391781fa2?d=identicon&version=1",
            "client": "desktop app 0.3.6",
            "content": "<p>we're working it out... will let you know</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 12794946,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "yael@nyu.edu",
            "sender_full_name": "Yael Elmatad (she) (S'12)",
            "sender_id": 862,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "coursera",
            "submessages": [],
            "timestamp": 1384464853,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/7b22ad8fae879dc36792aa1391781fa2?d=identicon&version=1",
            "client": "desktop app 0.3.6",
            "content": "<p>i think it's looking like prob tuesdays?</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 12794949,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "yael@nyu.edu",
            "sender_full_name": "Yael Elmatad (she) (S'12)",
            "sender_id": 862,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "coursera",
            "submessages": [],
            "timestamp": 1384464859,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/7b22ad8fae879dc36792aa1391781fa2?d=identicon&version=1",
            "client": "desktop app 0.3.6",
            "content": "<p>If you guys are interested, our engineering team at Tapad will be hosting weekly meetings to discuss the course/homework/etc... We're holding them Tuesday @ 7:30 in our office -- 307 7th Ave (bet 27th &amp; 28th), 20th Floor - Suite 2001.  I was instructed to say that we will have beer &amp; pizza &amp; scala.</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 12795566,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "yael@nyu.edu",
            "sender_full_name": "Yael Elmatad (she) (S'12)",
            "sender_id": 862,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "Class Discussion @ Tapad",
            "submessages": [],
            "timestamp": 1384465628,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/7b22ad8fae879dc36792aa1391781fa2?d=identicon&version=1",
            "client": "desktop app 0.3.6",
            "content": "<p>[I should add this is the reactive programming course, and you should email me <a href=\"mailto:yael@tapad.com\" title=\"mailto:yael@tapad.com\">yael@tapad.com</a> if you want to join in!]</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 12795831,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "yael@nyu.edu",
            "sender_full_name": "Yael Elmatad (she) (S'12)",
            "sender_id": 862,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "Class Discussion @ Tapad",
            "submessages": [],
            "timestamp": 1384465968,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/17f0b91da5342b9891469be52d28e4b0?d=identicon&version=1",
            "client": "desktop app Mac 0.3.10",
            "content": "<p>This definitely sounds intersting! I'm taking the course as well and already bouncing ideas of <span class=\"user-mention\" data-user-email=\"alan@hackerschool.com\">@Alan O'Donnell</span> once in a while. Would be fun to do it with a larger group! (sending you an e-mail)</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 12796046,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "marcus@ljungblad.nu",
            "sender_full_name": "Marcus Ljungblad (F'13)",
            "sender_id": 2898,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "Class Discussion @ Tapad",
            "submessages": [],
            "timestamp": 1384466181,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/d495685876a5a195b6ef5fb9a269b6d0dcd5c5fe?x=x&version=1",
            "client": "website",
            "content": "<p>I've suffered all day.  Now it's your turn:</p>\n<div class=\"codehilite\"><pre><span class=\"k\">class</span> <span class=\"nc\">A</span><span class=\"o\">(</span><span class=\"k\">val</span> <span class=\"n\">i</span> <span class=\"k\">:</span> <span class=\"kt\">Int</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"k\">override</span> <span class=\"k\">def</span> <span class=\"n\">equals</span><span class=\"o\">(</span><span class=\"n\">o</span> <span class=\"k\">:</span> <span class=\"kt\">Any</span><span class=\"o\">)</span> <span class=\"k\">=</span> <span class=\"n\">o</span> <span class=\"k\">match</span> <span class=\"o\">{</span><span class=\"k\">case</span> <span class=\"n\">a</span> <span class=\"k\">:</span> <span class=\"kt\">A</span> <span class=\"o\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">i</span><span class=\"o\">==</span><span class=\"n\">a</span><span class=\"o\">.</span><span class=\"n\">i</span><span class=\"o\">);</span> <span class=\"k\">case</span> <span class=\"k\">_</span> <span class=\"k\">=&gt;</span> <span class=\"kc\">false</span><span class=\"o\">}}</span>\n<span class=\"k\">class</span> <span class=\"nc\">B</span><span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"k\">:</span> <span class=\"kt\">Int</span><span class=\"o\">)</span> <span class=\"k\">extends</span> <span class=\"n\">A</span><span class=\"o\">(</span><span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">{}</span>\n\n<span class=\"k\">def</span> <span class=\"n\">useAsFnA</span><span class=\"o\">(</span><span class=\"n\">f</span><span class=\"k\">:</span><span class=\"kt\">A</span><span class=\"o\">=&gt;</span><span class=\"nc\">Boolean</span><span class=\"o\">)</span> <span class=\"k\">:</span> <span class=\"kt\">Boolean</span> <span class=\"o\">=</span> <span class=\"n\">f</span><span class=\"o\">(</span><span class=\"k\">new</span> <span class=\"n\">A</span><span class=\"o\">(</span><span class=\"mi\">42</span><span class=\"o\">))</span>\n<span class=\"k\">def</span> <span class=\"n\">useAsFnB</span><span class=\"o\">(</span><span class=\"n\">f</span><span class=\"k\">:</span><span class=\"kt\">B</span><span class=\"o\">=&gt;</span><span class=\"nc\">Boolean</span><span class=\"o\">)</span> <span class=\"k\">:</span> <span class=\"kt\">Boolean</span> <span class=\"o\">=</span> <span class=\"n\">f</span><span class=\"o\">(</span><span class=\"k\">new</span> <span class=\"n\">B</span><span class=\"o\">(</span><span class=\"mi\">42</span><span class=\"o\">))</span>\n<span class=\"k\">def</span> <span class=\"n\">useAsSetA</span><span class=\"o\">(</span><span class=\"n\">as</span> <span class=\"k\">:</span> <span class=\"kt\">Set</span><span class=\"o\">[</span><span class=\"kt\">A</span><span class=\"o\">])</span> <span class=\"k\">=</span> <span class=\"n\">as</span><span class=\"o\">.</span><span class=\"n\">foldLeft</span><span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">)(</span><span class=\"k\">_</span><span class=\"o\">+</span><span class=\"k\">_</span><span class=\"o\">.</span><span class=\"n\">i</span><span class=\"o\">)</span>\n<span class=\"k\">def</span> <span class=\"n\">useAsSetB</span><span class=\"o\">(</span><span class=\"n\">bs</span> <span class=\"k\">:</span> <span class=\"kt\">Set</span><span class=\"o\">[</span><span class=\"kt\">B</span><span class=\"o\">])</span> <span class=\"k\">=</span> <span class=\"n\">bs</span><span class=\"o\">.</span><span class=\"n\">foldLeft</span><span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">)(</span><span class=\"k\">_</span><span class=\"o\">+</span><span class=\"k\">_</span><span class=\"o\">.</span><span class=\"n\">i</span><span class=\"o\">)</span>\n<span class=\"k\">def</span> <span class=\"n\">useAsTravA</span><span class=\"o\">(</span><span class=\"n\">as</span> <span class=\"k\">:</span> <span class=\"kt\">TraversableOnce</span><span class=\"o\">[</span><span class=\"kt\">A</span><span class=\"o\">])</span> <span class=\"k\">=</span> <span class=\"n\">as</span><span class=\"o\">.</span><span class=\"n\">foldLeft</span><span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">)(</span><span class=\"k\">_</span><span class=\"o\">+</span><span class=\"k\">_</span><span class=\"o\">.</span><span class=\"n\">i</span><span class=\"o\">)</span>\n<span class=\"k\">def</span> <span class=\"n\">useAsTravB</span><span class=\"o\">(</span><span class=\"n\">bs</span> <span class=\"k\">:</span> <span class=\"kt\">TraversableOnce</span><span class=\"o\">[</span><span class=\"kt\">B</span><span class=\"o\">])</span> <span class=\"k\">=</span> <span class=\"n\">as</span><span class=\"o\">.</span><span class=\"n\">foldLeft</span><span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">)(</span><span class=\"k\">_</span><span class=\"o\">+</span><span class=\"k\">_</span><span class=\"o\">.</span><span class=\"n\">i</span><span class=\"o\">)</span>\n<span class=\"k\">def</span> <span class=\"n\">useAsListA</span><span class=\"o\">(</span><span class=\"n\">as</span> <span class=\"k\">:</span> <span class=\"kt\">List</span><span class=\"o\">[</span><span class=\"kt\">A</span><span class=\"o\">])</span> <span class=\"k\">=</span> <span class=\"n\">as</span><span class=\"o\">.</span><span class=\"n\">foldLeft</span><span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">)(</span><span class=\"k\">_</span><span class=\"o\">+</span><span class=\"k\">_</span><span class=\"o\">.</span><span class=\"n\">i</span><span class=\"o\">)</span>\n<span class=\"k\">def</span> <span class=\"n\">useAsListB</span><span class=\"o\">(</span><span class=\"n\">bs</span> <span class=\"k\">:</span> <span class=\"kt\">List</span><span class=\"o\">[</span><span class=\"kt\">B</span><span class=\"o\">])</span> <span class=\"k\">=</span> <span class=\"n\">bs</span><span class=\"o\">.</span><span class=\"n\">foldLeft</span><span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">)(</span><span class=\"k\">_</span><span class=\"o\">+</span><span class=\"k\">_</span><span class=\"o\">.</span><span class=\"n\">i</span><span class=\"o\">)</span>\n\n<span class=\"k\">val</span> <span class=\"n\">as</span> <span class=\"k\">=</span> <span class=\"nc\">Set</span><span class=\"o\">(</span><span class=\"k\">new</span> <span class=\"n\">A</span><span class=\"o\">(</span><span class=\"mi\">42</span><span class=\"o\">))</span>\n<span class=\"k\">val</span> <span class=\"n\">bs</span> <span class=\"k\">=</span> <span class=\"nc\">Set</span><span class=\"o\">(</span><span class=\"k\">new</span> <span class=\"n\">B</span><span class=\"o\">(</span><span class=\"mi\">42</span><span class=\"o\">))</span>\n<span class=\"k\">val</span> <span class=\"n\">al</span> <span class=\"k\">=</span> <span class=\"nc\">List</span><span class=\"o\">(</span><span class=\"k\">new</span> <span class=\"n\">A</span><span class=\"o\">(</span><span class=\"mi\">42</span><span class=\"o\">))</span>\n<span class=\"k\">val</span> <span class=\"n\">bl</span> <span class=\"k\">=</span> <span class=\"nc\">List</span><span class=\"o\">(</span><span class=\"k\">new</span> <span class=\"n\">B</span><span class=\"o\">(</span><span class=\"mi\">42</span><span class=\"o\">))</span>\n<span class=\"k\">val</span> <span class=\"n\">a</span> <span class=\"k\">=</span> <span class=\"k\">new</span> <span class=\"n\">A</span><span class=\"o\">(</span><span class=\"mi\">42</span><span class=\"o\">)</span>\n<span class=\"k\">val</span> <span class=\"n\">b</span> <span class=\"k\">=</span> <span class=\"k\">new</span> <span class=\"n\">B</span><span class=\"o\">(</span><span class=\"mi\">42</span><span class=\"o\">)</span>\n<span class=\"k\">def</span> <span class=\"n\">fa</span><span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"k\">:</span><span class=\"kt\">A</span><span class=\"o\">)</span> <span class=\"k\">=</span> <span class=\"n\">a</span><span class=\"o\">.</span><span class=\"n\">i</span><span class=\"o\">==</span><span class=\"mi\">42</span>\n<span class=\"k\">def</span> <span class=\"n\">fb</span><span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"k\">:</span><span class=\"kt\">B</span><span class=\"o\">)</span> <span class=\"k\">=</span> <span class=\"n\">b</span><span class=\"o\">.</span><span class=\"n\">i</span><span class=\"o\">==</span><span class=\"mi\">42</span>\n\n<span class=\"n\">as</span><span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">)</span>\n<span class=\"n\">as</span><span class=\"o\">(</span><span class=\"n\">b</span><span class=\"o\">)</span>\n<span class=\"n\">bs</span><span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"c1\">// Conventional error</span>\n<span class=\"n\">bs</span><span class=\"o\">(</span><span class=\"n\">b</span><span class=\"o\">)</span>\n\n<span class=\"n\">fa</span><span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">)</span>\n<span class=\"n\">fa</span><span class=\"o\">(</span><span class=\"n\">b</span><span class=\"o\">)</span>\n<span class=\"n\">fb</span><span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">)</span>  <span class=\"c1\">// conventional error</span>\n<span class=\"n\">fb</span><span class=\"o\">(</span><span class=\"n\">b</span><span class=\"o\">)</span>\n\n<span class=\"n\">useAsSetA</span><span class=\"o\">(</span><span class=\"n\">as</span><span class=\"o\">)</span> \n<span class=\"n\">useAsSetA</span><span class=\"o\">(</span><span class=\"n\">bs</span><span class=\"o\">)</span> <span class=\"c1\">// error due to invariance</span>\n<span class=\"n\">useAsSetB</span><span class=\"o\">(</span><span class=\"n\">as</span><span class=\"o\">)</span> <span class=\"c1\">// error due to invariance</span>\n<span class=\"n\">useAsSetB</span><span class=\"o\">(</span><span class=\"n\">bs</span><span class=\"o\">)</span>\n\n<span class=\"n\">useAsTravA</span><span class=\"o\">(</span><span class=\"n\">as</span><span class=\"o\">)</span>\n<span class=\"n\">useAsTravB</span><span class=\"o\">(</span><span class=\"n\">bs</span><span class=\"o\">)</span>\n<span class=\"n\">useAsTravB</span><span class=\"o\">(</span><span class=\"n\">as</span><span class=\"o\">)</span>  <span class=\"c1\">// error due to covariance</span>\n<span class=\"n\">useAsTravB</span><span class=\"o\">(</span><span class=\"n\">bs</span><span class=\"o\">)</span>\n\n<span class=\"n\">useAsListA</span><span class=\"o\">(</span><span class=\"n\">al</span><span class=\"o\">)</span>\n<span class=\"n\">useAsListA</span><span class=\"o\">(</span><span class=\"n\">bl</span><span class=\"o\">)</span>\n<span class=\"n\">useAsListB</span><span class=\"o\">(</span><span class=\"n\">al</span><span class=\"o\">)</span>  <span class=\"c1\">// error due to covariance</span>\n<span class=\"n\">useAsListB</span><span class=\"o\">(</span><span class=\"n\">bl</span><span class=\"o\">)</span>\n\n<span class=\"n\">useAsFnA</span><span class=\"o\">(</span><span class=\"n\">as</span><span class=\"o\">)</span>\n<span class=\"n\">useAsFnA</span><span class=\"o\">(</span><span class=\"n\">bs</span><span class=\"o\">)</span> <span class=\"c1\">// error due to contravariance </span>\n<span class=\"n\">useAsFnB</span><span class=\"o\">(</span><span class=\"n\">as</span><span class=\"o\">)</span>\n<span class=\"n\">useAsFnB</span><span class=\"o\">(</span><span class=\"n\">bs</span><span class=\"o\">)</span>\n\n<span class=\"n\">useAsFnA</span><span class=\"o\">(</span><span class=\"n\">fa</span><span class=\"o\">)</span>\n<span class=\"n\">useAsFnA</span><span class=\"o\">(</span><span class=\"n\">fb</span><span class=\"o\">)</span> <span class=\"c1\">// error due to contravariance</span>\n<span class=\"n\">useAsFnB</span><span class=\"o\">(</span><span class=\"n\">fa</span><span class=\"o\">)</span>\n<span class=\"n\">useAsFnB</span><span class=\"o\">(</span><span class=\"n\">fb</span><span class=\"o\">)</span>\n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 12798094,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "pnf@podsnap.com",
            "sender_full_name": "Peter Fraenkel (he) (S'13)",
            "sender_id": 2142,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "covariant sets",
            "submessages": [],
            "timestamp": 1384468591,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/7b22ad8fae879dc36792aa1391781fa2?d=identicon&version=1",
            "client": "desktop app 0.3.6",
            "content": "<p><span class=\"user-mention\" data-user-email=\"marcus@ljungblad.nu\">@Marcus Ljungblad (F'13)</span> awesome! you should totally come join us at tapad on tuesday!</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 12832118,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "yael@nyu.edu",
            "sender_full_name": "Yael Elmatad (she) (S'12)",
            "sender_id": 862,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "Class Discussion @ Tapad",
            "submessages": [],
            "timestamp": 1384530787,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/7b22ad8fae879dc36792aa1391781fa2?d=identicon&version=1",
            "client": "desktop app 0.3.6",
            "content": "<p>FYI, toby created a meetup.  <a href=\"http://www.meetup.com/Principles-of-Reactive-Programming-Scala-Study-Group/\" target=\"_blank\" title=\"http://www.meetup.com/Principles-of-Reactive-Programming-Scala-Study-Group/\">http://www.meetup.com/Principles-of-Reactive-Programming-Scala-Study-Group/</a>  <span class=\"user-mention\" data-user-email=\"alan@hackerschool.com\">@Alan O'Donnell</span> <span class=\"user-mention\" data-user-email=\"marcus@ljungblad.nu\">@Marcus Ljungblad (F'13)</span> </p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 12842946,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "yael@nyu.edu",
            "sender_full_name": "Yael Elmatad (she) (S'12)",
            "sender_id": 862,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "Class Discussion @ Tapad",
            "submessages": [],
            "timestamp": 1384544275,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p>Cool, registering.</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 12843142,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "Class Discussion @ Tapad",
            "submessages": [],
            "timestamp": 1384544508,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/17f0b91da5342b9891469be52d28e4b0?d=identicon&version=1",
            "client": "desktop app Mac 0.3.10",
            "content": "<p>Registered</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 12863264,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "marcus@ljungblad.nu",
            "sender_full_name": "Marcus Ljungblad (F'13)",
            "sender_id": 2898,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "Class Discussion @ Tapad",
            "submessages": [],
            "timestamp": 1384578063,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p>I woke up super early today to watch the new videos but they're not posted yet <img alt=\":scream:\" class=\"emoji\" src=\"static/third/gemoji/images/emoji/scream.png\" title=\":scream:\"></p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 12946874,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "reactive",
            "submessages": [],
            "timestamp": 1384775458,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p>\"monads are types with operators that guide you through the happy path\"</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 12948592,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "reactive",
            "submessages": [],
            "timestamp": 1384779236,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/17f0b91da5342b9891469be52d28e4b0?d=identicon&version=1",
            "client": "desktop app Mac 0.3.10",
            "content": "<p>Better than last week's videos?</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 12952673,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "marcus@ljungblad.nu",
            "sender_full_name": "Marcus Ljungblad (F'13)",
            "sender_id": 2898,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "reactive",
            "submessages": [],
            "timestamp": 1384787281,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"marcus@ljungblad.nu\">@Marcus Ljungblad (F'13)</span> I've only watched one video, but it was pretty good. Dumb code example, but Meijer makes a cool point about the analogy between T/Iterable[T] and Future[T]/Observable[T] (one/many/async/sync).</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 12953491,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "reactive",
            "submessages": [],
            "timestamp": 1384788481,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p>Plus the assignment looks pretty awesome.</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 12953529,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "reactive",
            "submessages": [],
            "timestamp": 1384788491,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p>Build an async Node-style HTTP server.</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 12953534,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "reactive",
            "submessages": [],
            "timestamp": 1384788502,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p>Can't handle how goofy Meijer's accent is.</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 12954437,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "reactive",
            "submessages": [],
            "timestamp": 1384789969,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p>Haha his code examples are so bad, but the ideas are really fun.</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 12954518,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "reactive",
            "submessages": [],
            "timestamp": 1384790091,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/17f0b91da5342b9891469be52d28e4b0?d=identicon&version=1",
            "client": "desktop app Mac 0.3.10",
            "content": "<p>Haha :) At least the assignment sounds a lot more fun than this week's. I still didn't get around starting it. Maybe I'll spend some time this afternoon... lets see. </p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 12955181,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "marcus@ljungblad.nu",
            "sender_full_name": "Marcus Ljungblad (F'13)",
            "sender_id": 2898,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "reactive",
            "submessages": [],
            "timestamp": 1384790775,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p><code>val fiveYears = 1826 minutes</code>... um, I guess that's close enough Erik Meijer.</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 12957134,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "reactive",
            "submessages": [],
            "timestamp": 1384793068,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p>Mmm, this async/await stuff is pretty cool. I need to let that sink in for a bit.</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 12957705,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "reactive",
            "submessages": [],
            "timestamp": 1384793811,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p>My first attempt at using async/await:</p>\n<div class=\"codehilite\"><pre>xception during macro expansion: java.lang.NullPointerException at scala.tools.nsc.interactive.ContextTrees$class.addContext(ContextTrees.scala:78) at \n scala.tools.nsc.interactive.Global.addContext(Global.scala:28) at scala.tools.nsc.interactive.Global.registerContext(Global.scala:268) at scala.tools.nsc.typechecker.Contexts\n $Context.make(Contexts.scala:295) at scala.tools.nsc.typechecker.Contexts$Context.make0(Contexts.scala:320) at scala.tools.nsc.typechecker.Contexts$Context.make(Contexts.scala:327) at \n scala.tools.nsc.typechecker.Typers$Typer.atOwner(Typers.scala:5662) at scala.tools.nsc.transform.TypingTransformers$TypingTransformer.atOwner(TypingTransformers.scala:33) at \n scala.tools.nsc.transform.TypingTransformers$TypingTransformer.atOwner(TypingTransformers.scala:28) at scala.async.internal.AsyncTransform$class.fixup$1(AsyncTransform.scala:191) at \n scala.async.internal.AsyncTransform$$anonfun$2$$anonfun$applyOrElse$3.apply(AsyncTransform.scala:213) at scala.async.internal.AsyncTransform$$anonfun$2$$anonfun$applyOrElse\n $3.apply(AsyncTransform.scala:211) at scala.async.internal.TransformUtils$trans$2$.transform(TransformUtils.scala:216) at scala.async.internal.TransformUtils$trans\n $2$.transform(TransformUtils.scala:213) at scala.reflect.api.Trees$Transformer$$anonfun$transformStats$1.apply(Trees.scala:2927) at scala.reflect.api.Trees$Transformer$$anonfun\n $transformStats$1.apply(Trees.scala:2925) at scala.collection.immutable.List.loop$1(List.scala:170) at scala.collection.immutable.List.mapConserve(List.scala:186) at scala.reflect.api.Trees\n $Transformer.transformStats(Trees.scala:2925) at scala.reflect.internal.Trees$class.itransform(Trees.scala:1276) at scala.reflect.internal.SymbolTable.itransform(SymbolTable.scala:13) at \n scala.reflect.internal.SymbolTable.itransform(SymbolTable.scala:13) at scala.reflect.api.Trees$Transformer.transform(Trees.scala:2897) at scala.tools.nsc.transform.TypingTransformers\n $TypingTransformer.scala$tools$nsc$transform$TypingTransformers$TypingTransformer$$super$transform(TypingTransformers.scala:44) at scala.tools.nsc.transform.TypingTransformers\n $TypingTransformer$$anonfun$transform$1.apply(TypingTransformers.scala:44) at scala.tools.nsc.transform.TypingTransformers$TypingTransformer$$anonfun$transform\n $1.apply(TypingTransformers.scala:44) at scala.reflect.api.Trees$Transformer.atOwner(Trees.scala:2936) at scala.tools.nsc.transform.TypingTransformers\n $TypingTransformer.atOwner(TypingTransformers.scala:34) at scala.tools.nsc.transform.TypingTransformers$TypingTransformer.transform(TypingTransformers.scala:44) at \n scala.async.internal.TransformUtils$trans$2$.transform(TransformUtils.scala:217) at scala.async.internal.TransformUtils$trans$2$.transform(TransformUtils.scala:213) at \n scala.reflect.api.Trees$Transformer.transformTemplate(Trees.scala:2904) at scala.reflect.internal.Trees$$anonfun$itransform$4.apply(Trees.scala:1280) at scala.reflect.internal.Trees$\n $anonfun$itransform$4.apply(Trees.scala:1279) at scala.reflect.api.Trees$Transformer.atOwner(Trees.scala:2936) at scala.tools.nsc.transform.TypingTransformers\n $TypingTransformer.atOwner(TypingTransformers.scala:34) at scala.tools.nsc.transform.TypingTransformers$TypingTransformer.atOwner(TypingTransformers.scala:28) at \n scala.tools.nsc.transform.TypingTransformers$TypingTransformer.atOwner(TypingTransformers.scala:19) at scala.reflect.internal.Trees$class.itransform(Trees.scala:1278) at \n scala.reflect.internal.SymbolTable.itransform(SymbolTable.scala:13) at scala.reflect.internal.SymbolTable.itransform(SymbolTable.scala:13) at scala.reflect.api.Trees\n $Transformer.transform(Trees.scala:2897) at scala.tools.nsc.transform.TypingTransformers$TypingTransformer.transform(TypingTransformers.scala:48) at scala.async.internal.TransformUtils\n $trans$2$.transform(TransformUtils.scala:217) at scala.async.internal.TransformUtils$class.transformAt(TransformUtils.scala:220) at scala.async.internal.AsyncMacro$$anon\n $1.transformAt(AsyncMacro.scala:10) at scala.async.internal.AsyncTransform$class.spliceMethodBodies(AsyncTransform.scala:204) at scala.async.internal.AsyncMacro$$anon\n $1.spliceMethodBodies(AsyncMacro.scala:10) at scala.async.internal.AsyncTransform$class.startStateMachine$1(AsyncTransform.scala:88) at scala.async.internal.AsyncTransform\n $class.asyncTransform(AsyncTransform.scala:109) at scala.async.internal.AsyncMacro$$anon$1.asyncTransform(AsyncMacro.scala:10) at \n scala.async.internal.AsyncBase.asyncImpl(AsyncBase.scala:52) at scala.async.internal.ScalaConcurrentAsync$.asyncImpl(ScalaConcurrentAsync.scala:16) at \n sun.reflect.GeneratedMethodAccessor78.invoke(Unknown Source) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) at \n java.lang.reflect.Method.invoke(Method.java:601) at scala.tools.nsc.typechecker.Macros$$anonfun$scala$tools$nsc$typechecker$Macros$$macroRuntime$3$$anonfun$apply\n $8.apply(Macros.scala:544) at scala.tools.nsc.typechecker.Macros$$anonfun$scala$tools$nsc$typechecker$Macros$$macroRuntime$3$$anonfun$apply$8.apply(Macros.scala:544) at \n scala.tools.nsc.typechecker.Macros$class.scala$tools$nsc$typechecker$Macros$$macroExpandWithRuntime(Macros.scala:830) at scala.tools.nsc.typechecker.Macros$$anonfun$scala$tools\n $nsc$typechecker$Macros$$macroExpand1$1.apply(Macros.scala:796) at scala.tools.nsc.typechecker.Macros$$anonfun$scala$tools$nsc$typechecker$Macros$\n $macroExpand1$1.apply(Macros.scala:787) at scala.tools.nsc.Global.withInfoLevel(Global.scala:190) at scala.tools.nsc.typechecker.Macros$class.scala$tools$nsc$typechecker$Macros$\n $macroExpand1(Macros.scala:787)\n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 12958416,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "reactive",
            "submessages": [],
            "timestamp": 1384794835,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/17f0b91da5342b9891469be52d28e4b0?d=identicon&version=1",
            "client": "desktop app Mac 0.3.10",
            "content": "<p>:D I just had a similarly long stack trace in a test that I was running. Scarily long! </p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 12958589,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "marcus@ljungblad.nu",
            "sender_full_name": "Marcus Ljungblad (F'13)",
            "sender_id": 2898,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "reactive",
            "submessages": [],
            "timestamp": 1384795048,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p>Urgh, this seems to be a bug in the Scala IDE or something. Really annoying.</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 12958958,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "reactive",
            "submessages": [],
            "timestamp": 1384795576,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/6f331605bee541a4c2c8da37a297786194212c15?x=x&version=2",
            "client": "website",
            "content": "<p>So much data, so little information</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 12958984,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "zach.allaun+recurse-zulip@gmail.com",
            "sender_full_name": "Zach Allaun (he) (S'12)",
            "sender_id": 808,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "reactive",
            "submessages": [],
            "timestamp": 1384795669,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p>I'm going to try randomly restarting Eclipse several times until I get sufficiently hangry.</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 12959060,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "reactive",
            "submessages": [],
            "timestamp": 1384795799,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p>Ugh, incomprehensible programming bugs outside of your control are such a bummer.</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 12963052,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "reactive",
            "submessages": [],
            "timestamp": 1384800845,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p><img alt=\":rage4:\" class=\"emoji\" src=\"static/third/gemoji/images/emoji/rage4.png\" title=\":rage4:\"> ing so hard right now</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 12968294,
            "is_me_message": false,
            "last_edit_timestamp": 1384807716,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "reactive",
            "submessages": [],
            "timestamp": 1384807708,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/17f0b91da5342b9891469be52d28e4b0?d=identicon&version=1",
            "client": "desktop app Mac 0.3.10",
            "content": "<p>Want to pair on it? </p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 12968662,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "marcus@ljungblad.nu",
            "sender_full_name": "Marcus Ljungblad (F'13)",
            "sender_id": 2898,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "reactive",
            "submessages": [],
            "timestamp": 1384808172,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p>Cool, I'm a community TA now :)</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 12976706,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "reactive",
            "submessages": [],
            "timestamp": 1384818999,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p>All I want to do is write straight-line code that magically doesn't block and that magically has seamless IDE integration with effortless macro elision, is this really so much to ask.</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 13069555,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "ffs",
            "submessages": [],
            "timestamp": 1384980906,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/d495685876a5a195b6ef5fb9a269b6d0dcd5c5fe?x=x&version=1",
            "client": "API",
            "content": "<p>The threatened blog posts are finally up at <a href=\"http://podsnap.com\" target=\"_blank\" title=\"http://podsnap.com\">podsnap.com</a>. <br>\nThis work business is slowing me down. </p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 13197989,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "pnf@podsnap.com",
            "sender_full_name": "Peter Fraenkel (he) (S'13)",
            "sender_id": 2142,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "covariant sets",
            "submessages": [],
            "timestamp": 1385220307,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/21aeae1f260365557523718bc19640f7?d=identicon&version=1",
            "client": "desktop app Mac 0.3.10",
            "content": "<p>This is why the only correct variance for mutable collections is invariance. Although my impression was that in Scala you could get things to mostly work by carefully choosing variance annotations on each method argument.</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 13199908,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "stefan@karpinski.org",
            "sender_full_name": "Stefan Karpinski",
            "sender_id": 892,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "covariant sets",
            "submessages": [],
            "timestamp": 1385225470,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/d495685876a5a195b6ef5fb9a269b6d0dcd5c5fe?x=x&version=1",
            "client": "API",
            "content": "<p>For <strong>any</strong> mutable collection, you need invariance. The controversy, such as it is, surrounds immutable sets. </p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 13203296,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "pnf@podsnap.com",
            "sender_full_name": "Peter Fraenkel (he) (S'13)",
            "sender_id": 2142,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "covariant sets",
            "submessages": [],
            "timestamp": 1385234360,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/17f0b91da5342b9891469be52d28e4b0?d=identicon&version=1",
            "client": "desktop app Mac 0.3.10",
            "content": "<p>In week 3's assignment I got stuck on implementing the cancellation feature:</p>\n<div class=\"codehilite\"><pre><span class=\"k\">def</span> <span class=\"n\">run</span><span class=\"o\">()(</span><span class=\"n\">f</span><span class=\"k\">:</span> <span class=\"kt\">CancellationToken</span> <span class=\"o\">=&gt;</span> <span class=\"nc\">Future</span><span class=\"o\">[</span><span class=\"kt\">Unit</span><span class=\"o\">])</span><span class=\"k\">:</span> <span class=\"kt\">Subscription</span> <span class=\"o\">=</span> <span class=\"o\">???</span>\n</pre></div>\n\n\n<p>I think I don't understand what they are asking for and the <a href=\"https://class.coursera.org/reactive-001/wiki/view?page=assignment_3_faq\" target=\"_blank\" title=\"https://class.coursera.org/reactive-001/wiki/view?page=assignment_3_faq\">faq</a> doesn't really say anything either. <span class=\"user-mention\" data-user-email=\"alan@hackerschool.com\">@Alan O'Donnell</span> /  <span class=\"user-mention\" data-user-email=\"yael@nyu.edu\">@Yael Elmatad (S'12)</span>  did anyone of you get it?  </p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 13207866,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "marcus@ljungblad.nu",
            "sender_full_name": "Marcus Ljungblad (F'13)",
            "sender_id": 2898,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "cancelling futures",
            "submessages": [],
            "timestamp": 1385246056,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"marcus@ljungblad.nu\">@Marcus Ljungblad (F'13)</span>, I think I know how to do it, but let me submit my code to see what the grader says :)</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 13210111,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "cancelling futures",
            "submessages": [],
            "timestamp": 1385251722,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p>Ok, tests passed. The idea is that <code>run</code> will a) take a function that, given a <code>CancellationToken</code>, runs some <code>Future[Unit]</code> computation, and b) return a <code>Subscription</code> object, something you can call <code>unsubscribe</code> on.</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 13210940,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "cancelling futures",
            "submessages": [],
            "timestamp": 1385253760,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p>The <code>f</code> function lets you construct a <code>Future[Unit]</code> computation that holds a reference to a <code>CancellationToken</code>, e.g. something that can report if it's been cancelled.</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 13210977,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "cancelling futures",
            "submessages": [],
            "timestamp": 1385253848,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p>So inside <code>run</code>, you just need to make a <code>CancellationTokenSource</code> (so many names...), which they provide for us, feed its inner <code>CancellationToken</code> to <code>f</code> to kick of the <code>Future[Unit]</code>, and then return the <code>CancellationTokenSource</code>, since it's already a <code>Subscription</code>.</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 13211026,
            "is_me_message": false,
            "last_edit_timestamp": 1385256177,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "cancelling futures",
            "submessages": [],
            "timestamp": 1385253967,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p>Honestly, it's going to seem anticlimactic.</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 13211040,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "cancelling futures",
            "submessages": [],
            "timestamp": 1385253977,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p>Stated a different way, <code>run</code> kicks off a <code>Future[Unit]</code> computation in the background and gives you a <code>Subscription</code> to unsubscribe/cancel it.</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 13211120,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "cancelling futures",
            "submessages": [],
            "timestamp": 1385254209,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p>It took me forever to realize you have to *start* the listeners. Ugh.</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 13217729,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "reactive",
            "submessages": [],
            "timestamp": 1385271189,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/17f0b91da5342b9891469be52d28e4b0?d=identicon&version=1",
            "client": "desktop app Mac 0.3.10",
            "content": "<p>Hm, I'm probably making it more complicated than it should be. Can we pair a bit on it tomorrow? <br>\nThis is what I came up with but not sure I undertand it still, haha. Seems to pass their submission tests though. </p>\n<div class=\"codehilite\"><pre><span class=\"k\">def</span> <span class=\"n\">run</span><span class=\"o\">()(</span><span class=\"n\">f</span><span class=\"k\">:</span> <span class=\"kt\">CancellationToken</span> <span class=\"o\">=&gt;</span> <span class=\"nc\">Future</span><span class=\"o\">[</span><span class=\"kt\">Unit</span><span class=\"o\">])</span><span class=\"k\">:</span> <span class=\"kt\">Subscription</span> <span class=\"o\">=</span> <span class=\"o\">{</span>\n      <span class=\"k\">val</span> <span class=\"n\">cts</span> <span class=\"k\">=</span> <span class=\"nc\">CancellationTokenSource</span><span class=\"o\">()</span>\n      <span class=\"n\">f</span><span class=\"o\">(</span><span class=\"n\">cts</span><span class=\"o\">.</span><span class=\"n\">cancellationToken</span><span class=\"o\">)</span>\n      <span class=\"n\">cts</span>\n <span class=\"o\">}</span>\n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 13236627,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "marcus@ljungblad.nu",
            "sender_full_name": "Marcus Ljungblad (F'13)",
            "sender_id": 2898,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "cancelling futures",
            "submessages": [],
            "timestamp": 1385321184,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"marcus@ljungblad.nu\">@Marcus Ljungblad (F'13)</span>, yeah, that's what I did too. Anticlimactic :)</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 13237990,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "cancelling futures",
            "submessages": [],
            "timestamp": 1385324745,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/17f0b91da5342b9891469be52d28e4b0?d=identicon&version=1",
            "client": "desktop app Mac 0.3.10",
            "content": "<p>Very! </p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 13266105,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "marcus@ljungblad.nu",
            "sender_full_name": "Marcus Ljungblad (F'13)",
            "sender_id": 2898,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "cancelling futures",
            "submessages": [],
            "timestamp": 1385391326,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"marcus@ljungblad.nu\">@Marcus Ljungblad (F'13)</span>, want to go over reactive stuff later today?</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 13272461,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "reactive",
            "submessages": [],
            "timestamp": 1385400217,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/17f0b91da5342b9891469be52d28e4b0?d=identicon&version=1",
            "client": "desktop app Mac 0.3.10",
            "content": "<p>Yeah, that sounds like a plan. In the middle of a refactor right now, after lunch maybe?</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 13272469,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "marcus@ljungblad.nu",
            "sender_full_name": "Marcus Ljungblad (F'13)",
            "sender_id": 2898,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "reactive",
            "submessages": [],
            "timestamp": 1385400241,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p>Sure.</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 13272502,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "reactive",
            "submessages": [],
            "timestamp": 1385400248,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p>Wat (my attempt at encoding the state monad in Scala), chapter 11 of the Fp in Scala book:</p>\n<div class=\"codehilite\"><pre><span class=\"k\">type</span> <span class=\"kt\">State</span><span class=\"o\">[</span><span class=\"kt\">S</span>, <span class=\"kt\">+A</span><span class=\"o\">]</span> <span class=\"k\">=</span> <span class=\"n\">S</span> <span class=\"k\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">A</span><span class=\"o\">,</span> <span class=\"n\">S</span><span class=\"o\">)</span>\n\n<span class=\"k\">trait</span> <span class=\"nc\">St</span><span class=\"o\">[</span><span class=\"kt\">S</span><span class=\"o\">]</span> <span class=\"o\">{</span>\n  <span class=\"k\">type</span> <span class=\"kt\">Ate</span><span class=\"o\">[</span><span class=\"kt\">+A</span><span class=\"o\">]</span> <span class=\"k\">=</span> <span class=\"n\">S</span> <span class=\"k\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">A</span><span class=\"o\">,</span> <span class=\"n\">S</span><span class=\"o\">)</span>\n<span class=\"o\">}</span>\n<span class=\"k\">object</span> <span class=\"nc\">St</span> <span class=\"o\">{</span>\n  <span class=\"k\">implicit</span> <span class=\"k\">def</span> <span class=\"n\">i</span><span class=\"o\">[</span><span class=\"kt\">S</span><span class=\"o\">]</span> <span class=\"k\">=</span> <span class=\"k\">new</span> <span class=\"nc\">St</span><span class=\"o\">[</span><span class=\"kt\">S</span><span class=\"o\">]</span> <span class=\"o\">{}</span>\n<span class=\"o\">}</span>\n\n<span class=\"k\">def</span> <span class=\"nc\">StateMonad</span><span class=\"o\">[</span><span class=\"kt\">S</span><span class=\"o\">](</span><span class=\"k\">implicit</span> <span class=\"n\">st</span><span class=\"k\">:</span> <span class=\"kt\">St</span><span class=\"o\">[</span><span class=\"kt\">S</span><span class=\"o\">])</span> <span class=\"k\">=</span> <span class=\"k\">new</span> <span class=\"nc\">Monad</span><span class=\"o\">[</span><span class=\"kt\">st.Ate</span><span class=\"o\">]</span> <span class=\"o\">{</span>\n  <span class=\"k\">def</span> <span class=\"n\">unit</span><span class=\"o\">[</span><span class=\"kt\">A</span><span class=\"o\">](</span><span class=\"n\">a</span><span class=\"k\">:</span> <span class=\"kt\">A</span><span class=\"o\">)</span> <span class=\"k\">=</span> <span class=\"o\">{</span> <span class=\"n\">s</span> <span class=\"k\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">}</span>\n  <span class=\"k\">def</span> <span class=\"n\">flatMap</span><span class=\"o\">[</span><span class=\"kt\">A</span>, <span class=\"kt\">B</span><span class=\"o\">](</span><span class=\"n\">ma</span><span class=\"k\">:</span> <span class=\"kt\">st.Ate</span><span class=\"o\">[</span><span class=\"kt\">A</span><span class=\"o\">])(</span><span class=\"n\">f</span><span class=\"k\">:</span> <span class=\"kt\">A</span> <span class=\"o\">=&gt;</span> <span class=\"n\">st</span><span class=\"o\">.</span><span class=\"nc\">Ate</span><span class=\"o\">[</span><span class=\"kt\">B</span><span class=\"o\">])</span><span class=\"k\">:</span> <span class=\"kt\">st.Ate</span><span class=\"o\">[</span><span class=\"kt\">B</span><span class=\"o\">]</span> <span class=\"k\">=</span> <span class=\"o\">{</span> <span class=\"n\">s</span> <span class=\"k\">=&gt;</span>\n    <span class=\"k\">val</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">s2</span><span class=\"o\">)</span> <span class=\"k\">=</span> <span class=\"n\">ma</span><span class=\"o\">(</span><span class=\"n\">s</span><span class=\"o\">)</span>\n    <span class=\"n\">f</span><span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">)(</span><span class=\"n\">s2</span><span class=\"o\">)</span>\n  <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 13489220,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "fp in scala",
            "submessages": [],
            "timestamp": 1385848376,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<div class=\"codehilite\"><pre><span class=\"k\">trait</span> <span class=\"nc\">Monad</span><span class=\"o\">[</span><span class=\"kt\">M</span><span class=\"o\">[</span><span class=\"k\">_</span><span class=\"o\">]]</span> <span class=\"nc\">extends</span> <span class=\"nc\">Functor</span><span class=\"o\">[</span><span class=\"kt\">M</span><span class=\"o\">]</span> <span class=\"o\">{</span>\n  <span class=\"k\">def</span> <span class=\"n\">unit</span><span class=\"o\">[</span><span class=\"kt\">A</span><span class=\"o\">](</span><span class=\"n\">a</span><span class=\"k\">:</span> <span class=\"kt\">A</span><span class=\"o\">)</span><span class=\"k\">:</span> <span class=\"kt\">M</span><span class=\"o\">[</span><span class=\"kt\">A</span><span class=\"o\">]</span>\n  <span class=\"k\">def</span> <span class=\"n\">flatMap</span><span class=\"o\">[</span><span class=\"kt\">A</span>, <span class=\"kt\">B</span><span class=\"o\">](</span><span class=\"n\">ma</span><span class=\"k\">:</span> <span class=\"kt\">M</span><span class=\"o\">[</span><span class=\"kt\">A</span><span class=\"o\">])(</span><span class=\"n\">f</span><span class=\"k\">:</span> <span class=\"kt\">A</span> <span class=\"o\">=&gt;</span> <span class=\"n\">M</span><span class=\"o\">[</span><span class=\"kt\">B</span><span class=\"o\">])</span><span class=\"k\">:</span> <span class=\"kt\">M</span><span class=\"o\">[</span><span class=\"kt\">B</span><span class=\"o\">]</span>\n\n  <span class=\"k\">def</span> <span class=\"n\">map</span><span class=\"o\">[</span><span class=\"kt\">A</span>, <span class=\"kt\">B</span><span class=\"o\">](</span><span class=\"n\">ma</span><span class=\"k\">:</span> <span class=\"kt\">M</span><span class=\"o\">[</span><span class=\"kt\">A</span><span class=\"o\">])(</span><span class=\"n\">f</span><span class=\"k\">:</span> <span class=\"kt\">A</span> <span class=\"o\">=&gt;</span> <span class=\"n\">B</span><span class=\"o\">)</span><span class=\"k\">:</span> <span class=\"kt\">M</span><span class=\"o\">[</span><span class=\"kt\">B</span><span class=\"o\">]</span> <span class=\"k\">=</span> <span class=\"n\">flatMap</span><span class=\"o\">(</span><span class=\"n\">ma</span><span class=\"o\">)(</span><span class=\"n\">f</span> <span class=\"n\">andThen</span> <span class=\"n\">unit</span><span class=\"o\">)</span>\n  <span class=\"k\">def</span> <span class=\"n\">join</span><span class=\"o\">[</span><span class=\"kt\">A</span><span class=\"o\">](</span><span class=\"n\">mma</span><span class=\"k\">:</span> <span class=\"kt\">M</span><span class=\"o\">[</span><span class=\"kt\">M</span><span class=\"o\">[</span><span class=\"kt\">A</span><span class=\"o\">]])</span><span class=\"k\">:</span> <span class=\"kt\">M</span><span class=\"o\">[</span><span class=\"kt\">A</span><span class=\"o\">]</span> <span class=\"k\">=</span> <span class=\"n\">flatMap</span><span class=\"o\">(</span><span class=\"n\">mma</span><span class=\"o\">)(</span><span class=\"n\">ma</span> <span class=\"k\">=&gt;</span> <span class=\"n\">ma</span><span class=\"o\">)</span>\n<span class=\"o\">}</span>\n\n<span class=\"k\">trait</span> <span class=\"nc\">Functor</span><span class=\"o\">[</span><span class=\"kt\">F</span><span class=\"o\">[</span><span class=\"k\">_</span><span class=\"o\">]]</span> <span class=\"o\">{</span>\n  <span class=\"k\">def</span> <span class=\"n\">map</span><span class=\"o\">[</span><span class=\"kt\">A</span>, <span class=\"kt\">B</span><span class=\"o\">](</span><span class=\"n\">fa</span><span class=\"k\">:</span> <span class=\"kt\">F</span><span class=\"o\">[</span><span class=\"kt\">A</span><span class=\"o\">])(</span><span class=\"n\">f</span><span class=\"k\">:</span> <span class=\"kt\">A</span> <span class=\"o\">=&gt;</span> <span class=\"n\">B</span><span class=\"o\">)</span><span class=\"k\">:</span> <span class=\"kt\">F</span><span class=\"o\">[</span><span class=\"kt\">B</span><span class=\"o\">]</span>\n<span class=\"o\">}</span>\n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 13489331,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "fp in scala",
            "submessages": [],
            "timestamp": 1385848591,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p>Whoa, weird, the book shows how to do this with \"type lambdas\":</p>\n<div class=\"codehilite\"><pre><span class=\"k\">class</span> <span class=\"nc\">StateMonad</span><span class=\"o\">[</span><span class=\"kt\">S</span><span class=\"o\">]</span> <span class=\"nc\">extends</span> <span class=\"nc\">Monad</span><span class=\"o\">[({</span><span class=\"k\">type</span> <span class=\"kt\">s</span><span class=\"o\">[</span><span class=\"kt\">A</span><span class=\"o\">]</span> <span class=\"kt\">=</span> <span class=\"kt\">State</span><span class=\"o\">[</span><span class=\"kt\">S</span>, <span class=\"kt\">A</span><span class=\"o\">]})</span><span class=\"k\">#</span><span class=\"kt\">s</span><span class=\"o\">]</span> <span class=\"o\">{</span>\n  <span class=\"k\">def</span> <span class=\"n\">unit</span><span class=\"o\">[</span><span class=\"kt\">A</span><span class=\"o\">](</span><span class=\"n\">a</span><span class=\"k\">:</span> <span class=\"kt\">A</span><span class=\"o\">)</span><span class=\"k\">:</span> <span class=\"kt\">State</span><span class=\"o\">[</span><span class=\"kt\">S</span>, <span class=\"kt\">A</span><span class=\"o\">]</span> <span class=\"k\">=</span> <span class=\"o\">{</span> <span class=\"n\">s</span> <span class=\"k\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">}</span>\n  <span class=\"k\">def</span> <span class=\"n\">flatMap</span><span class=\"o\">[</span><span class=\"kt\">A</span>, <span class=\"kt\">B</span><span class=\"o\">](</span><span class=\"n\">ma</span><span class=\"k\">:</span> <span class=\"kt\">State</span><span class=\"o\">[</span><span class=\"kt\">S</span>, <span class=\"kt\">A</span><span class=\"o\">])(</span><span class=\"n\">f</span><span class=\"k\">:</span> <span class=\"kt\">A</span> <span class=\"o\">=&gt;</span> <span class=\"nc\">State</span><span class=\"o\">[</span><span class=\"kt\">S</span>, <span class=\"kt\">B</span><span class=\"o\">])</span><span class=\"k\">:</span> <span class=\"kt\">State</span><span class=\"o\">[</span><span class=\"kt\">S</span>, <span class=\"kt\">B</span><span class=\"o\">]</span> <span class=\"k\">=</span> <span class=\"o\">{</span> <span class=\"n\">s</span> <span class=\"k\">=&gt;</span>\n    <span class=\"k\">val</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">s2</span><span class=\"o\">)</span> <span class=\"k\">=</span> <span class=\"n\">ma</span><span class=\"o\">(</span><span class=\"n\">s</span><span class=\"o\">)</span>\n    <span class=\"n\">f</span><span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">)(</span><span class=\"n\">s2</span><span class=\"o\">)</span>\n  <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 13489783,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "fp in scala",
            "submessages": [],
            "timestamp": 1385849711,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p>Gross :(</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 13489836,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "fp in scala",
            "submessages": [],
            "timestamp": 1385849790,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/17f0b91da5342b9891469be52d28e4b0?d=identicon&version=1",
            "client": "desktop app Mac 0.4.0",
            "content": "<p>I'm working through week 4's assignment and stumbled on this one: \"Your next task is to implement the general method apply in ObservableEx.scala that converts any Future into an Observable\" They say use the <code>ReplaySubject</code> to do this but I'm not. Is this wrong? Not sure how to test it.  </p>\n<div class=\"codehilite\"><pre><span class=\"k\">def</span> <span class=\"n\">apply</span><span class=\"o\">[</span><span class=\"kt\">T</span><span class=\"o\">](</span><span class=\"n\">f</span><span class=\"k\">:</span> <span class=\"kt\">Future</span><span class=\"o\">[</span><span class=\"kt\">T</span><span class=\"o\">])(</span><span class=\"k\">implicit</span> <span class=\"n\">execContext</span><span class=\"k\">:</span> <span class=\"kt\">ExecutionContext</span><span class=\"o\">)</span><span class=\"k\">:</span> <span class=\"kt\">Observable</span><span class=\"o\">[</span><span class=\"kt\">T</span><span class=\"o\">]</span> <span class=\"k\">=</span> <span class=\"o\">{</span>\n    <span class=\"nc\">Observable</span><span class=\"o\">(</span><span class=\"n\">observer</span> <span class=\"k\">=&gt;</span> <span class=\"o\">{</span>\n      <span class=\"n\">f</span><span class=\"o\">.</span><span class=\"n\">onComplete</span> <span class=\"o\">{</span>\n        <span class=\"k\">case</span> <span class=\"nc\">Success</span><span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"k\">=&gt;</span> \n          <span class=\"n\">observer</span><span class=\"o\">.</span><span class=\"n\">onNext</span><span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">)</span>\n          <span class=\"n\">observer</span><span class=\"o\">.</span><span class=\"n\">onCompleted</span>\n        <span class=\"k\">case</span> <span class=\"nc\">Failure</span><span class=\"o\">(</span><span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"k\">=&gt;</span> <span class=\"n\">observer</span><span class=\"o\">.</span><span class=\"n\">onError</span><span class=\"o\">(</span><span class=\"n\">t</span><span class=\"o\">)</span>\n      <span class=\"o\">}</span>\n      <span class=\"nc\">Subscription</span> <span class=\"o\">{}</span>\n    <span class=\"o\">})</span>\n  <span class=\"o\">}</span>\n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 13518479,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "marcus@ljungblad.nu",
            "sender_full_name": "Marcus Ljungblad (F'13)",
            "sender_id": 2898,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "reactive",
            "submessages": [],
            "timestamp": 1385921347,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p>Not sure, I haven't started this week's HW yet.</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 13518572,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "reactive",
            "submessages": [],
            "timestamp": 1385921636,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/17f0b91da5342b9891469be52d28e4b0?d=identicon&version=1",
            "client": "desktop app Mac 0.4.0",
            "content": "<p>I think I know what the problem is though. If you subscribe after the <code>onCompleted</code> you'll never the see the last value. <code>ReplaySubject</code> buffers the last val making it more Future-like. </p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 13518695,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "marcus@ljungblad.nu",
            "sender_full_name": "Marcus Ljungblad (F'13)",
            "sender_id": 2898,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "reactive",
            "submessages": [],
            "timestamp": 1385921912,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/17f0b91da5342b9891469be52d28e4b0?d=identicon&version=1",
            "client": "desktop app Mac 0.4.0",
            "content": "<p><span class=\"user-mention\" data-user-email=\"alan@hackerschool.com\">@Alan O'Donnell</span> have you worked on the <code>timedOut(t: Long)</code> implementation or want to pair on it a bit?</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 13560174,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "marcus@ljungblad.nu",
            "sender_full_name": "Marcus Ljungblad (F'13)",
            "sender_id": 2898,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "reactive",
            "submessages": [],
            "timestamp": 1386003503,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/17f0b91da5342b9891469be52d28e4b0?d=identicon&version=1",
            "client": "desktop app Mac 0.4.0",
            "content": "<p>Oh, nm :) I completed it successfully now. The <code>concatRecovered</code> and <code>timedOut</code> killed me in the first submission. Second time around: \\o/ </p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 13560763,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "marcus@ljungblad.nu",
            "sender_full_name": "Marcus Ljungblad (F'13)",
            "sender_id": 2898,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "reactive",
            "submessages": [],
            "timestamp": 1386004434,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"nada.amin@gmail.com\">@Nada Amin</span>, I ran into a surprising type situation yesterday while reading through Runar Bjarnason's paper on \"Stackless Scala\": <a href=\"http://blog.higher-order.com/assets/trampolines.pdf\" target=\"_blank\" title=\"http://blog.higher-order.com/assets/trampolines.pdf\">http://blog.higher-order.com/assets/trampolines.pdf</a></p>\n<p>There's a data type for trampolined computations:</p>\n<div class=\"codehilite\"><pre><span class=\"k\">trait</span> <span class=\"nc\">Trampoline</span><span class=\"o\">[</span><span class=\"kt\">+A</span><span class=\"o\">]</span>\n<span class=\"nc\">case</span> <span class=\"k\">class</span> <span class=\"nc\">Done</span><span class=\"o\">[</span><span class=\"kt\">+A</span><span class=\"o\">](</span><span class=\"n\">a</span><span class=\"k\">:</span> <span class=\"kt\">A</span><span class=\"o\">)</span> <span class=\"k\">extends</span> <span class=\"nc\">Trampoline</span><span class=\"o\">[</span><span class=\"kt\">A</span><span class=\"o\">]</span>\n<span class=\"k\">case</span> <span class=\"k\">class</span> <span class=\"nc\">More</span><span class=\"o\">[</span><span class=\"kt\">+A</span><span class=\"o\">](</span><span class=\"n\">t</span><span class=\"k\">:</span> <span class=\"o\">()</span> <span class=\"o\">=&gt;</span> <span class=\"nc\">Trampoline</span><span class=\"o\">[</span><span class=\"kt\">A</span><span class=\"o\">])</span> <span class=\"k\">extends</span> <span class=\"nc\">Trampoline</span><span class=\"o\">[</span><span class=\"kt\">A</span><span class=\"o\">]</span>\n<span class=\"k\">case</span> <span class=\"k\">class</span> <span class=\"nc\">Bind</span><span class=\"o\">[</span><span class=\"kt\">A</span>, <span class=\"kt\">+B</span><span class=\"o\">](</span><span class=\"n\">t</span><span class=\"k\">:</span> <span class=\"o\">()</span> <span class=\"o\">=&gt;</span> <span class=\"nc\">Trampoline</span><span class=\"o\">[</span><span class=\"kt\">A</span><span class=\"o\">],</span> <span class=\"n\">k</span><span class=\"k\">:</span> <span class=\"kt\">A</span> <span class=\"o\">=&gt;</span> <span class=\"nc\">Trampoline</span><span class=\"o\">[</span><span class=\"kt\">B</span><span class=\"o\">])</span> <span class=\"k\">extends</span> <span class=\"nc\">Trampoline</span><span class=\"o\">[</span><span class=\"kt\">B</span><span class=\"o\">]</span>\n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 13602725,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "gulp, type safety?",
            "submessages": [],
            "timestamp": 1386080788,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p>The idea is to write a tail-recursive <code>run</code> function:</p>\n<div class=\"codehilite\"><pre>    <span class=\"nd\">@annotation</span><span class=\"o\">.</span><span class=\"n\">tailrec</span>\n    <span class=\"k\">def</span> <span class=\"n\">run</span><span class=\"o\">[</span><span class=\"kt\">A</span><span class=\"o\">](</span><span class=\"n\">ta</span><span class=\"k\">:</span> <span class=\"kt\">Trampoline</span><span class=\"o\">[</span><span class=\"kt\">A</span><span class=\"o\">])</span><span class=\"k\">:</span> <span class=\"kt\">A</span> <span class=\"o\">=</span> <span class=\"n\">ta</span> <span class=\"k\">match</span> <span class=\"o\">{</span>\n      <span class=\"k\">case</span> <span class=\"nc\">Done</span><span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"k\">=&gt;</span> <span class=\"n\">a</span>\n      <span class=\"k\">case</span> <span class=\"nc\">More</span><span class=\"o\">(</span><span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"k\">=&gt;</span> <span class=\"n\">run</span><span class=\"o\">(</span><span class=\"n\">t</span><span class=\"o\">())</span>\n      <span class=\"k\">case</span> <span class=\"nc\">Bind</span><span class=\"o\">(</span><span class=\"n\">t</span><span class=\"o\">,</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"k\">=&gt;</span> <span class=\"n\">t</span><span class=\"o\">()</span> <span class=\"k\">match</span> <span class=\"o\">{</span>\n        <span class=\"k\">case</span> <span class=\"nc\">Done</span><span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"k\">=&gt;</span> <span class=\"n\">run</span><span class=\"o\">(</span><span class=\"n\">k</span><span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">))</span>\n        <span class=\"k\">case</span> <span class=\"nc\">More</span><span class=\"o\">(</span><span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"k\">=&gt;</span> <span class=\"n\">run</span><span class=\"o\">(</span><span class=\"nc\">Bind</span><span class=\"o\">(</span><span class=\"n\">t</span><span class=\"o\">,</span> <span class=\"n\">k</span><span class=\"o\">))</span>\n        <span class=\"k\">case</span> <span class=\"nc\">Bind</span><span class=\"o\">(</span><span class=\"n\">t2</span><span class=\"o\">,</span> <span class=\"n\">k2</span><span class=\"o\">)</span> <span class=\"k\">=&gt;</span> <span class=\"n\">run</span><span class=\"o\">(</span><span class=\"nc\">Bind</span><span class=\"o\">(</span><span class=\"n\">t2</span><span class=\"o\">,</span> <span class=\"o\">{</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"k\">:</span> <span class=\"kt\">Any</span><span class=\"o\">)</span> <span class=\"k\">=&gt;</span>\n          <span class=\"k\">val</span> <span class=\"n\">t3</span> <span class=\"k\">=</span> <span class=\"o\">()</span> <span class=\"k\">=&gt;</span> <span class=\"n\">k2</span><span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">)</span>\n          <span class=\"nc\">Bind</span><span class=\"o\">(</span><span class=\"n\">t3</span><span class=\"o\">,</span> <span class=\"n\">k</span><span class=\"o\">)</span>\n        <span class=\"o\">}))</span>\n      <span class=\"o\">}</span>\n    <span class=\"o\">}</span>\n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 13602739,
            "is_me_message": false,
            "last_edit_timestamp": 1386080866,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "gulp, type safety?",
            "submessages": [],
            "timestamp": 1386080848,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p>The thing that really surprised me is how the type checker handles the <code>Bind</code> cases. When you pattern match on <code>ta: Trampoline[A]</code> and get a <code>Bind[..., A]</code>, Scala decides the <code>...</code> should be <code>Any</code>.</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 13602853,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "gulp, type safety?",
            "submessages": [],
            "timestamp": 1386081019,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p>I guess I'm not sure what Scala should do instead, but that kind of sucks--it really ought to be <code>T</code> for some unknown <code>T</code>.</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 13602878,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "gulp, type safety?",
            "submessages": [],
            "timestamp": 1386081062,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p>You wind up with overly loose types on the <code>t: () =&gt; Trampoline[Any]</code> and <code>k: Any =&gt; Trampoline[A]</code>; in particular, the <code>k</code> function takes <code>Any</code>!</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 13602925,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "gulp, type safety?",
            "submessages": [],
            "timestamp": 1386081131,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p>Haha I figured out a way on the train to make this work the way I want, although it's hacky:</p>\n<div class=\"codehilite\"><pre><span class=\"k\">trait</span> <span class=\"nc\">Trampoline</span><span class=\"o\">[</span><span class=\"kt\">A</span><span class=\"o\">]</span>\n\n<span class=\"nc\">case</span> <span class=\"k\">class</span> <span class=\"nc\">Done</span><span class=\"o\">[</span><span class=\"kt\">+A</span><span class=\"o\">](</span><span class=\"n\">a</span><span class=\"k\">:</span> <span class=\"kt\">A</span><span class=\"o\">)</span> <span class=\"k\">extends</span> <span class=\"nc\">Trampoline</span><span class=\"o\">[</span><span class=\"kt\">A</span><span class=\"o\">]</span>\n<span class=\"k\">case</span> <span class=\"k\">class</span> <span class=\"nc\">More</span><span class=\"o\">[</span><span class=\"kt\">+A</span><span class=\"o\">](</span><span class=\"n\">t</span><span class=\"k\">:</span> <span class=\"o\">()</span> <span class=\"o\">=&gt;</span> <span class=\"nc\">Trampoline</span><span class=\"o\">[</span><span class=\"kt\">A</span><span class=\"o\">])</span> <span class=\"k\">extends</span> <span class=\"nc\">Trampoline</span><span class=\"o\">[</span><span class=\"kt\">A</span><span class=\"o\">]</span>\n\n<span class=\"k\">abstract</span> <span class=\"k\">class</span> <span class=\"nc\">Bind</span><span class=\"o\">[</span><span class=\"kt\">+A</span><span class=\"o\">]</span> <span class=\"nc\">extends</span> <span class=\"nc\">Trampoline</span><span class=\"o\">[</span><span class=\"kt\">A</span><span class=\"o\">]</span> <span class=\"o\">{</span>\n  <span class=\"k\">type</span> <span class=\"kt\">V</span>\n  <span class=\"k\">def</span> <span class=\"n\">t</span><span class=\"o\">()</span><span class=\"k\">:</span> <span class=\"kt\">Trampoline</span><span class=\"o\">[</span><span class=\"kt\">V</span><span class=\"o\">]</span>\n  <span class=\"k\">def</span> <span class=\"n\">k</span><span class=\"o\">(</span><span class=\"n\">v</span><span class=\"k\">:</span> <span class=\"kt\">V</span><span class=\"o\">)</span><span class=\"k\">:</span> <span class=\"kt\">Trampoline</span><span class=\"o\">[</span><span class=\"kt\">A</span><span class=\"o\">]</span>\n<span class=\"o\">}</span>\n\n<span class=\"k\">object</span> <span class=\"nc\">Bind</span> <span class=\"o\">{</span>\n  <span class=\"k\">def</span> <span class=\"n\">apply</span><span class=\"o\">[</span><span class=\"kt\">Vv</span>, <span class=\"kt\">A</span><span class=\"o\">](</span><span class=\"n\">tt</span><span class=\"k\">:</span> <span class=\"o\">()</span> <span class=\"o\">=&gt;</span> <span class=\"nc\">Trampoline</span><span class=\"o\">[</span><span class=\"kt\">Vv</span><span class=\"o\">])(</span><span class=\"n\">kk</span><span class=\"k\">:</span> <span class=\"kt\">Vv</span> <span class=\"o\">=&gt;</span> <span class=\"nc\">Trampoline</span><span class=\"o\">[</span><span class=\"kt\">A</span><span class=\"o\">])</span><span class=\"k\">:</span> <span class=\"kt\">Bind</span><span class=\"o\">[</span><span class=\"kt\">A</span><span class=\"o\">]</span> <span class=\"k\">=</span> <span class=\"k\">new</span> <span class=\"nc\">Bind</span><span class=\"o\">[</span><span class=\"kt\">A</span><span class=\"o\">]</span> <span class=\"o\">{</span>\n    <span class=\"k\">type</span> <span class=\"kt\">V</span> <span class=\"o\">=</span> <span class=\"nc\">Vv</span>\n    <span class=\"k\">def</span> <span class=\"n\">t</span><span class=\"o\">()</span><span class=\"k\">:</span> <span class=\"kt\">Trampoline</span><span class=\"o\">[</span><span class=\"kt\">V</span><span class=\"o\">]</span> <span class=\"k\">=</span> <span class=\"n\">tt</span><span class=\"o\">()</span>\n    <span class=\"k\">def</span> <span class=\"n\">k</span><span class=\"o\">(</span><span class=\"n\">v</span><span class=\"k\">:</span> <span class=\"kt\">V</span><span class=\"o\">)</span><span class=\"k\">:</span> <span class=\"kt\">Trampoline</span><span class=\"o\">[</span><span class=\"kt\">A</span><span class=\"o\">]</span> <span class=\"k\">=</span> <span class=\"n\">kk</span><span class=\"o\">(</span><span class=\"n\">v</span><span class=\"o\">)</span>\n  <span class=\"o\">}</span>\n  <span class=\"k\">def</span> <span class=\"n\">unapply</span><span class=\"o\">[</span><span class=\"kt\">A</span><span class=\"o\">](</span><span class=\"n\">ta</span><span class=\"k\">:</span> <span class=\"kt\">Trampoline</span><span class=\"o\">[</span><span class=\"kt\">A</span><span class=\"o\">])</span><span class=\"k\">:</span> <span class=\"kt\">Option</span><span class=\"o\">[(()</span> <span class=\"k\">=&gt;</span> <span class=\"kt\">Trampoline</span><span class=\"o\">[</span><span class=\"kt\">V</span><span class=\"o\">]</span>, <span class=\"kt\">V</span> <span class=\"k\">=&gt;</span> <span class=\"kt\">Trampoline</span><span class=\"o\">[</span><span class=\"kt\">A</span><span class=\"o\">])]</span> <span class=\"k\">forSome</span> <span class=\"o\">{</span> <span class=\"k\">type</span> <span class=\"kt\">V</span> <span class=\"o\">}</span> <span class=\"k\">=</span> <span class=\"o\">{</span>\n    <span class=\"n\">ta</span> <span class=\"k\">match</span> <span class=\"o\">{</span>\n      <span class=\"k\">case</span> <span class=\"nc\">Done</span><span class=\"o\">(</span><span class=\"k\">_</span><span class=\"o\">)</span> <span class=\"k\">=&gt;</span> <span class=\"nc\">None</span>\n      <span class=\"k\">case</span> <span class=\"nc\">More</span><span class=\"o\">(</span><span class=\"k\">_</span><span class=\"o\">)</span> <span class=\"k\">=&gt;</span> <span class=\"nc\">None</span>\n      <span class=\"k\">case</span> <span class=\"n\">b</span><span class=\"k\">:</span> <span class=\"kt\">Bind</span><span class=\"o\">[</span><span class=\"kt\">A</span><span class=\"o\">]</span> <span class=\"k\">=&gt;</span> <span class=\"nc\">Some</span><span class=\"o\">((</span><span class=\"n\">b</span><span class=\"o\">.</span><span class=\"n\">t</span> <span class=\"k\">_</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">.</span><span class=\"n\">k</span> <span class=\"k\">_</span><span class=\"o\">))</span>\n    <span class=\"o\">}</span>\n  <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n\n<span class=\"nd\">@annotation</span><span class=\"o\">.</span><span class=\"n\">tailrec</span>\n<span class=\"k\">def</span> <span class=\"n\">run</span><span class=\"o\">[</span><span class=\"kt\">A</span><span class=\"o\">](</span><span class=\"n\">ta</span><span class=\"k\">:</span> <span class=\"kt\">Trampoline</span><span class=\"o\">[</span><span class=\"kt\">A</span><span class=\"o\">])</span><span class=\"k\">:</span> <span class=\"kt\">A</span> <span class=\"o\">=</span> <span class=\"n\">ta</span> <span class=\"k\">match</span> <span class=\"o\">{</span>\n  <span class=\"k\">case</span> <span class=\"nc\">Done</span><span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"k\">=&gt;</span> <span class=\"n\">a</span>\n  <span class=\"k\">case</span> <span class=\"nc\">More</span><span class=\"o\">(</span><span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"k\">=&gt;</span> <span class=\"n\">run</span><span class=\"o\">(</span><span class=\"n\">t</span><span class=\"o\">())</span>\n  <span class=\"k\">case</span> <span class=\"nc\">Bind</span><span class=\"o\">(</span><span class=\"n\">t</span><span class=\"o\">,</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"k\">=&gt;</span> <span class=\"n\">t</span><span class=\"o\">()</span> <span class=\"k\">match</span> <span class=\"o\">{</span>\n    <span class=\"k\">case</span> <span class=\"nc\">Done</span><span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"k\">=&gt;</span> <span class=\"n\">run</span><span class=\"o\">(</span><span class=\"n\">k</span><span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">))</span>\n    <span class=\"k\">case</span> <span class=\"nc\">More</span><span class=\"o\">(</span><span class=\"n\">t2</span><span class=\"o\">)</span> <span class=\"k\">=&gt;</span> <span class=\"n\">run</span><span class=\"o\">(</span><span class=\"nc\">Bind</span><span class=\"o\">(</span><span class=\"n\">t2</span><span class=\"o\">)(</span><span class=\"n\">k</span><span class=\"o\">))</span>\n    <span class=\"k\">case</span> <span class=\"nc\">Bind</span><span class=\"o\">(</span><span class=\"n\">t2</span><span class=\"o\">,</span> <span class=\"n\">k2</span><span class=\"o\">)</span> <span class=\"k\">=&gt;</span> <span class=\"o\">{</span>\n      <span class=\"k\">val</span> <span class=\"n\">b</span> <span class=\"k\">=</span> <span class=\"nc\">Bind</span><span class=\"o\">(</span><span class=\"n\">t2</span><span class=\"o\">)</span> <span class=\"o\">{</span> <span class=\"n\">v2</span> <span class=\"k\">=&gt;</span>\n        <span class=\"k\">val</span> <span class=\"n\">t3</span> <span class=\"k\">=</span> <span class=\"o\">()</span> <span class=\"k\">=&gt;</span> <span class=\"n\">k2</span><span class=\"o\">(</span><span class=\"n\">v2</span><span class=\"o\">)</span>\n        <span class=\"nc\">Bind</span><span class=\"o\">(</span><span class=\"n\">t3</span><span class=\"o\">)(</span><span class=\"n\">k</span><span class=\"o\">)</span>\n      <span class=\"o\">}</span>\n      <span class=\"n\">run</span><span class=\"o\">(</span><span class=\"n\">b</span><span class=\"o\">)</span>\n    <span class=\"o\">}</span>\n  <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 13605468,
            "is_me_message": false,
            "last_edit_timestamp": 1386089536,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "gulp, type safety?",
            "submessages": [],
            "timestamp": 1386085504,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p>But I feel like I shouldn't have to manually specify an existential type for <code>Bind.unapply</code>. If I use the regular case class version of <code>Bind[A, +B]</code>, its <code>unapply</code> method should match existentially on <code>A</code>--giving up and saying <code>Any</code> doesn't make sense to me.</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 13605575,
            "is_me_message": false,
            "last_edit_timestamp": 1386085690,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "gulp, type safety?",
            "submessages": [],
            "timestamp": 1386085655,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p>I posted a StackOverflow question about this: <a href=\"http://stackoverflow.com/questions/20359696/scala-pattern-match-infers-any-instead-of-an-existential-type-breaks-type-saf\" target=\"_blank\" title=\"http://stackoverflow.com/questions/20359696/scala-pattern-match-infers-any-instead-of-an-existential-type-breaks-type-saf\">http://stackoverflow.com/questions/20359696/scala-pattern-match-infers-any-instead-of-an-existential-type-breaks-type-saf</a></p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 13615467,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "gulp, type safety?",
            "submessages": [],
            "timestamp": 1386098205,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p>Yep, bug in the compiler :(</p>\n<p><a href=\"https://issues.scala-lang.org/browse/SI-6680\" target=\"_blank\" title=\"https://issues.scala-lang.org/browse/SI-6680\">https://issues.scala-lang.org/browse/SI-6680</a></p>\n<p>That's actually pretty annoying :(</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 13631332,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "gulp, type safety?",
            "submessages": [],
            "timestamp": 1386119501,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/17f0b91da5342b9891469be52d28e4b0?d=identicon&version=1",
            "client": "desktop app Mac 0.4.1",
            "content": "<p>Not entirely sure about all of the changes involved yet, but this <a href=\"https://github.com/kevinwright/RxScala\" target=\"_blank\" title=\"https://github.com/kevinwright/RxScala\">updated idiomatic scala api</a> for RxScala looks interesting. </p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 13682235,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "marcus@ljungblad.nu",
            "sender_full_name": "Marcus Ljungblad (F'13)",
            "sender_id": 2898,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "RxScala",
            "submessages": [],
            "timestamp": 1386212509,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4f5279e356a105513701942b5b6af05f?d=identicon&version=1",
            "client": "website",
            "content": "<p>How in the world are they going to do this without expression trees?</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 13685670,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "clemmer.alexander@gmail.com",
            "sender_full_name": "Alex Clemmer (S'13)",
            "sender_id": 2132,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "RxScala",
            "submessages": [],
            "timestamp": 1386219494,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4f5279e356a105513701942b5b6af05f?d=identicon&version=1",
            "client": "website",
            "content": "<p>The C# implementation depends VEEERRRYYY much on the use of expression trees.</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 13685676,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "clemmer.alexander@gmail.com",
            "sender_full_name": "Alex Clemmer (S'13)",
            "sender_id": 2132,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "RxScala",
            "submessages": [],
            "timestamp": 1386219520,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"pnf@podsnap.com\">@Peter Fraenkel (S'13)</span>, here's a minimal example of the bug:</p>\n<div class=\"codehilite\"><pre><span class=\"k\">trait</span> <span class=\"nc\">T</span>\n<span class=\"k\">case</span> <span class=\"k\">class</span> <span class=\"nc\">App</span><span class=\"o\">[</span><span class=\"kt\">A</span>, <span class=\"kt\">B</span><span class=\"o\">](</span><span class=\"n\">f</span><span class=\"k\">:</span> <span class=\"kt\">A</span> <span class=\"o\">=&gt;</span> <span class=\"n\">B</span><span class=\"o\">,</span> <span class=\"n\">x</span><span class=\"k\">:</span> <span class=\"kt\">A</span><span class=\"o\">)</span> <span class=\"k\">extends</span> <span class=\"n\">T</span>\n\n<span class=\"k\">def</span> <span class=\"n\">hmm</span><span class=\"o\">(</span><span class=\"n\">t</span><span class=\"k\">:</span> <span class=\"kt\">T</span><span class=\"o\">)</span> <span class=\"k\">=</span> <span class=\"n\">t</span> <span class=\"k\">match</span> <span class=\"o\">{</span>\n  <span class=\"k\">case</span> <span class=\"nc\">App</span><span class=\"o\">(</span><span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"k\">=</span> <span class=\"n\">f</span><span class=\"o\">(</span><span class=\"s\">&quot;this should definitely not typecheck&quot;</span><span class=\"o\">)</span>\n<span class=\"o\">}</span>\n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 13703727,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "gulp, type safety?",
            "submessages": [],
            "timestamp": 1386258766,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p>This is as wrong as possible, in a sense: the compiler says you can feed *anything* to <code>f</code>, when in fact you can only feed it *one thing*, <code>x</code>.</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 13703784,
            "is_me_message": false,
            "last_edit_timestamp": 1386258852,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "gulp, type safety?",
            "submessages": [],
            "timestamp": 1386258823,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/17f0b91da5342b9891469be52d28e4b0?d=identicon&version=1",
            "client": "desktop app Mac 0.4.1",
            "content": "<p><a href=\"http://skipoleschris.blogspot.com/2013/12/scalas-maturing-community.html\" target=\"_blank\" title=\"http://skipoleschris.blogspot.com/2013/12/scalas-maturing-community.html\">This</a> on HN right now. No coincidence the Coursera course has the focus it has. </p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 13842396,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "marcus@ljungblad.nu",
            "sender_full_name": "Marcus Ljungblad (F'13)",
            "sender_id": 2898,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "maturing community",
            "submessages": [],
            "timestamp": 1386550496,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p><a href=\"https://groups.google.com/forum/#!msg/scalaz/-PuakIf-g_4/7ydrU5VIfDQJ\" target=\"_blank\" title=\"https://groups.google.com/forum/#!msg/scalaz/-PuakIf-g_4/7ydrU5VIfDQJ\">https://groups.google.com/forum/#!msg/scalaz/-PuakIf-g_4/7ydrU5VIfDQJ</a></p>\n<p>Scalaz version of the built-in futures.</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 13886312,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "futurez",
            "submessages": [],
            "timestamp": 1386629439,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p>I was actually wondering about some of the issues they raise while reading the FP in Scala book.</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 13886411,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "futurez",
            "submessages": [],
            "timestamp": 1386629562,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/d495685876a5a195b6ef5fb9a269b6d0dcd5c5fe?x=x&version=1",
            "client": "website",
            "content": "<p>The thread-conservation really should be rolled into the standard library - there's nothing particularly <code>z</code>-ish about it.<br>\n<span class=\"user-mention\" data-user-email=\"alan@hackerschool.com\">@Alan O'Donnell</span> Do you understand <code>scalaz.Nondeterminism</code> or how it's used in/with <code>scalaz.Future</code>?  The former doesn't show up anywhere in the interface of the latter, and I can't yet figure out the role it plays in implementation either.<br>\nAs a self-congratulatory aside, my idiotically named but otherwise lovely <a href=\"https://github.com/pnf/clojure-playground/blob/master/src/clj/playground/parallel.clj#L95\" target=\"_blank\" title=\"https://github.com/pnf/clojure-playground/blob/master/src/clj/playground/parallel.clj#L95\">avenir</a> implementation of mappable futures in Clojure conserved threads too. </p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 13914603,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "pnf@podsnap.com",
            "sender_full_name": "Peter Fraenkel (he) (S'13)",
            "sender_id": 2142,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "futurez",
            "submessages": [],
            "timestamp": 1386687393,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"marcus@ljungblad.nu\">@Marcus Ljungblad (F'13)</span> <a href=\"http://www.parleys.com/play/51c3790ae4b0d38b54f46259\" target=\"_blank\" title=\"http://www.parleys.com/play/51c3790ae4b0d38b54f46259\">http://www.parleys.com/play/51c3790ae4b0d38b54f46259</a></p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 13966736,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "sbt",
            "submessages": [],
            "timestamp": 1386776856,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/d495685876a5a195b6ef5fb9a269b6d0dcd5c5fe?x=x&version=1",
            "client": "website",
            "content": "<p>It's a bit lame to ask here, since, if I were a better person, I'd probably know the answer from the coursera class, but I did read the \"deprecating\" paper.   Briefly, I don't understand how frp can really be considered functional, as there's a giant DAG in the background, keeping track of who's listening to what and whether they've reacted to it.  One of Odersky's examples in the paper is something like this:</p>\n<div class=\"codehilite\"><pre><span class=\"k\">val</span> <span class=\"n\">a</span> <span class=\"k\">=</span> <span class=\"k\">new</span> <span class=\"nc\">Var</span><span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"o\">)</span>\n<span class=\"k\">val</span> <span class=\"n\">b</span> <span class=\"k\">=</span> <span class=\"k\">new</span> <span class=\"nc\">Var</span><span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"o\">)</span>\n<span class=\"k\">val</span> <span class=\"n\">sum</span> <span class=\"k\">=</span> <span class=\"nc\">Signal</span><span class=\"o\">{</span> <span class=\"n\">a</span><span class=\"o\">()+</span><span class=\"n\">b</span><span class=\"o\">()</span> <span class=\"o\">}</span> \n<span class=\"n\">observe</span><span class=\"o\">(</span><span class=\"n\">sum</span><span class=\"o\">)</span> <span class=\"o\">{</span> <span class=\"n\">x</span> <span class=\"k\">=&gt;</span> <span class=\"n\">println</span><span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">}</span> \n<span class=\"n\">a</span><span class=\"o\">()</span><span class=\"k\">=</span> <span class=\"mi\">7</span>   <span class=\"c1\">// prints 9</span>\n<span class=\"n\">b</span><span class=\"o\">()</span><span class=\"k\">=</span> <span class=\"mi\">35</span>  <span class=\"c1\">// prints 42</span>\n</pre></div>\n\n\n<p>It seems like this about as referentially opaque as it gets, since anyone with a reference to <code>a</code> can cause <code>sum</code> to behave differently.  I imagined something like</p>\n<div class=\"codehilite\"><pre>val dag = Dag().(leaf(&#39;a&#39;,1).leaf(&#39;b&#39;,2).\n                             node(&#39;sum&#39;,d =&gt; d(&#39;a&#39;)+d(&#39;b&#39;)).\n                             obs(d=&gt;println(d(&#39;sum&#39;))\nval dag2 = dag.set(&#39;a&#39;,7)  // =&gt; 9\ndag2.set(&#39;b&#39;,35)  // prints 42\ndag.set(&#39;b&#39;,35) // prints 36\n</pre></div>\n\n\n<p>where each of the <code>Dag</code> methods return  another immutable <code>Dag</code>.   (Then I thought about using a StateMonad and decided I really didn't understand  what those were.)</p>\n<p>Anyway, does anything like this come up in the course?  Is it silly?</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 14112880,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "pnf@podsnap.com",
            "sender_full_name": "Peter Fraenkel (he) (S'13)",
            "sender_id": 2142,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "ffrp",
            "submessages": [],
            "timestamp": 1387048589,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/17f0b91da5342b9891469be52d28e4b0?d=identicon&version=1",
            "client": "desktop app Mac 0.4.1",
            "content": "<p>The Scala repl does give some funny error messages: </p>\n<blockquote>\n<p>That entry seems to have slain the compiler.  Shall I replay your session? I can re-run each line except the last one.</p>\n</blockquote>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 14290016,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "marcus@ljungblad.nu",
            "sender_full_name": "Marcus Ljungblad (F'13)",
            "sender_id": 2898,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "repl",
            "submessages": [],
            "timestamp": 1387399108,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/7b22ad8fae879dc36792aa1391781fa2?d=identicon&version=1",
            "client": "desktop app Mac 0.4.2",
            "content": "<p><a href=\"http://www.meetup.com/nescala/events/160217402/?a=ea1_grp&amp;rv=ea1\" target=\"_blank\" title=\"http://www.meetup.com/nescala/events/160217402/?a=ea1_grp&amp;rv=ea1\">http://www.meetup.com/nescala/events/160217402/?a=ea1_grp&amp;rv=ea1</a> <span class=\"user-mention\" data-user-email=\"dschobel@gmail.com\">@Daniel Schobel (W'13)</span>  <span class=\"user-mention\" data-user-email=\"marcus@ljungblad.nu\">@Marcus Ljungblad (F'13)</span> <span class=\"user-mention\" data-user-email=\"alan@hackerschool.com\">@Alan O'Donnell</span> </p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 15424765,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "yael@nyu.edu",
            "sender_full_name": "Yael Elmatad (she) (S'12)",
            "sender_id": 862,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "nescala",
            "submessages": [],
            "timestamp": 1389804192,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/ddf79a11b9b2a19ed45394c4fd3167fb?d=identicon&version=1",
            "client": "website",
            "content": "<p>looks fairly cool - shame attendance has already been filled</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 15426172,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "ruby.childs1@gmail.com",
            "sender_full_name": "Ruby Childs (she) (F'12)",
            "sender_id": 883,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "nescala",
            "submessages": [],
            "timestamp": 1389806053,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/7b22ad8fae879dc36792aa1391781fa2?d=identicon&version=1",
            "client": "desktop app Mac 0.4.2",
            "content": "<p>there will be another round of ~50 slots i think.</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 15429657,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "yael@nyu.edu",
            "sender_full_name": "Yael Elmatad (she) (S'12)",
            "sender_id": 862,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "nescala",
            "submessages": [],
            "timestamp": 1389811047,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/d495685876a5a195b6ef5fb9a269b6d0dcd5c5fe?x=x&version=1",
            "client": "website",
            "content": "<p>Just noticed Miles Sabin's tweet from Dec 30.  To take my concerns to a hysterical extreme, should we be abandoning Scala for Idris?</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 15703510,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "pnf@podsnap.com",
            "sender_full_name": "Peter Fraenkel (he) (S'13)",
            "sender_id": 2142,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "idris",
            "submessages": [],
            "timestamp": 1390321946,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/d495685876a5a195b6ef5fb9a269b6d0dcd5c5fe?x=x&version=1",
            "client": "ZulipiOS",
            "content": "<p>I've continued to worry about whether FRP is actually functional:<br>\n<a href=\"http://blog.podsnap.com/reactive.html\" target=\"_blank\" title=\"http://blog.podsnap.com/reactive.html\">http://blog.podsnap.com/reactive.html</a></p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 15828230,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "pnf@podsnap.com",
            "sender_full_name": "Peter Fraenkel (he) (S'13)",
            "sender_id": 2142,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "blog post: functional functional reactive programming",
            "submessages": [],
            "timestamp": 1390505265,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/f0ec11be62f8c5fefb9ffe4497c81bac?d=identicon&version=1",
            "client": "website",
            "content": "<p>Can someone explain to me what the <code>!!</code> function does in Scala? It's ungoogleable for me :(</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 15851390,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "lfranchi@kde.org",
            "sender_full_name": "Leo Franchi (he) (F'12)",
            "sender_id": 806,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "help",
            "submessages": [],
            "timestamp": 1390534767,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/f0ec11be62f8c5fefb9ffe4497c81bac?d=identicon&version=1",
            "client": "website",
            "content": "<p>context: stripe ctf has a bunch of code in scala (which I do not know) and am trying to understand it</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 15851393,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "lfranchi@kde.org",
            "sender_full_name": "Leo Franchi (he) (F'12)",
            "sender_id": 806,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "help",
            "submessages": [],
            "timestamp": 1390534786,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/f0ec11be62f8c5fefb9ffe4497c81bac?d=identicon&version=1",
            "client": "website",
            "content": "<p>It looks like it's used for something like <code>b !! m</code> where <code>b</code> is a twitter <code>Broker</code> object</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 15851439,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "lfranchi@kde.org",
            "sender_full_name": "Leo Franchi (he) (F'12)",
            "sender_id": 806,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "help",
            "submessages": [],
            "timestamp": 1390534846,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/f0ec11be62f8c5fefb9ffe4497c81bac?d=identicon&version=1",
            "client": "website",
            "content": "<p>ahhh ok found it</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 15851443,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "lfranchi@kde.org",
            "sender_full_name": "Leo Franchi (he) (F'12)",
            "sender_id": 806,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "help",
            "submessages": [],
            "timestamp": 1390534869,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/f0ec11be62f8c5fefb9ffe4497c81bac?d=identicon&version=1",
            "client": "website",
            "content": "<p>it's a blocking send</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 15851447,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "lfranchi@kde.org",
            "sender_full_name": "Leo Franchi (he) (F'12)",
            "sender_id": 806,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "help",
            "submessages": [],
            "timestamp": 1390534879,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/d495685876a5a195b6ef5fb9a269b6d0dcd5c5fe?x=x&version=1",
            "client": "website",
            "content": "<p>After much head banging, I realize that when Miles does</p>\n<div class=\"codehilite\"><pre>    val nt = HMap[(Set ~?&gt; Option)#\u03bb](Set(&quot;foo&quot;) -&gt; Option(&quot;bar&quot;), Set(23) -&gt; Option(13))\n</pre></div>\n\n\n<p>this is not a type lambda expression, but rather a reference to the inner class defined in</p>\n<div class=\"codehilite\"><pre>class ~?&gt;[K[_], V[_]] {\n  class \u03bb[K, V]\n}\n</pre></div>\n\n\n<p>Have any of you actually used this?  Given that his HMap implementation contains an <code>asInstanceOf</code> cast that we just happen to know will succeed, is the whole thing in some way cheating?</p>\n<p>I'm confused.</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 16073626,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "pnf@podsnap.com",
            "sender_full_name": "Peter Fraenkel (he) (S'13)",
            "sender_id": 2142,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "type lambdas and hmaps for natural transformations",
            "submessages": [],
            "timestamp": 1390947571,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/17f0b91da5342b9891469be52d28e4b0?d=identicon&version=1",
            "client": "desktop app Mac 0.4.2",
            "content": "<p><span class=\"user-mention\" data-user-email=\"lfranchi@kde.org\">@Leo Franchi (F'12)</span>  Hm, late to the game, but I'd never seen this before. Is this from the scala actors?</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 16094090,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "marcus@ljungblad.nu",
            "sender_full_name": "Marcus Ljungblad (F'13)",
            "sender_id": 2898,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "help",
            "submessages": [],
            "timestamp": 1390980175,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/17f0b91da5342b9891469be52d28e4b0?d=identicon&version=1",
            "client": "desktop app Mac 0.4.2",
            "content": "<p>curious</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 16094098,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "marcus@ljungblad.nu",
            "sender_full_name": "Marcus Ljungblad (F'13)",
            "sender_id": 2898,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "help",
            "submessages": [],
            "timestamp": 1390980192,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/17f0b91da5342b9891469be52d28e4b0?d=identicon&version=1",
            "client": "desktop app Mac 0.4.2",
            "content": "<p>I'm thinking about submitting a talk proposal to <a href=\"http://scaladays.org/\" target=\"_blank\" title=\"http://scaladays.org/\">ScalaDays</a> in Berlin about learning Scala and I'm looking for more ideas. Since I expect that people attending the conf are already well familiar with Scala (and I classify myself as a beginner still) I wanted to highlight things that the Scala community can do to improve the situation for people beginning to learn Scala. </p>\n<p>Current ideas include: </p>\n<ul>\n<li>a getting started kit which runs out of the box with a few good example applications</li>\n<li>build tools (sbt exists in like a gazillion versions and are often not interoperable) </li>\n<li>the one-way of doing things</li>\n<li>ungoogleable operands (like <span class=\"user-mention\" data-user-email=\"lfranchi@kde.org\">@Leo Franchi (F'12)</span> mentioned <code>!!</code>)</li>\n<li>the risk of over-complicating a lot of things (lazy vals and stackable traits (thanks to <a href=\"https://twitter.com/tobym\" target=\"_blank\" title=\"https://twitter.com/tobym\">@tobym</a>)</li>\n</ul>\n<p>What more?   </p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 16094396,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "marcus@ljungblad.nu",
            "sender_full_name": "Marcus Ljungblad (F'13)",
            "sender_id": 2898,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "scaladays talk",
            "submessages": [],
            "timestamp": 1390980775,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/17f0b91da5342b9891469be52d28e4b0?d=identicon&version=1",
            "client": "desktop app Mac 0.4.2",
            "content": "<p>^ <span class=\"user-mention\" data-user-email=\"alan@hackerschool.com\">@Alan O'Donnell</span> <span class=\"user-mention\" data-user-email=\"yael@nyu.edu\">@Yael Elmatad (S'12)</span> <span class=\"user-mention\" data-user-email=\"pnf@podsnap.com\">@Peter Fraenkel (S'13)</span> </p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 16094406,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "marcus@ljungblad.nu",
            "sender_full_name": "Marcus Ljungblad (F'13)",
            "sender_id": 2898,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "scaladays talk",
            "submessages": [],
            "timestamp": 1390980823,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/d495685876a5a195b6ef5fb9a269b6d0dcd5c5fe?x=x&version=1",
            "client": "website",
            "content": "<p>Build tools is a really good idea.   Nobody actually tells you that you need to start with sbt and use that as the golden source for ensime/eclipse/intellij.  </p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 16108239,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "pnf@podsnap.com",
            "sender_full_name": "Peter Fraenkel (he) (S'13)",
            "sender_id": 2142,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "scaladays talk",
            "submessages": [],
            "timestamp": 1391009375,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/d495685876a5a195b6ef5fb9a269b6d0dcd5c5fe?x=x&version=1",
            "client": "website",
            "content": "<p>Persistent data structures.  Clojure makes a huge deal of its immutables being functionally persistent, but Scala barely mentions it.  As a functional neophyte, I nearly gave up in disgust when I got to the part of Odersky's book where he advises you to use immutable hashmaps, because they seemed to be utterly useless.  Of course they're not....</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 16108402,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "pnf@podsnap.com",
            "sender_full_name": "Peter Fraenkel (he) (S'13)",
            "sender_id": 2142,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "scaladays talk",
            "submessages": [],
            "timestamp": 1391009619,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/d495685876a5a195b6ef5fb9a269b6d0dcd5c5fe?x=x&version=1",
            "client": "website",
            "content": "<p>Advertise <code>scala -Xprint:parser</code> so you can unravel the magic.   Better yet, <code>scala - Xshow-phases</code>, which tells you all the things you can <code>-Xprint</code>.</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 16108605,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "pnf@podsnap.com",
            "sender_full_name": "Peter Fraenkel (he) (S'13)",
            "sender_id": 2142,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "scaladays talk",
            "submessages": [],
            "timestamp": 1391009925,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/d495685876a5a195b6ef5fb9a269b6d0dcd5c5fe?x=x&version=1",
            "client": "website",
            "content": "<p>Find and then point people towards a decent tutorial on the more incomprehensible aspects of typing.  <a href=\"http://twitter.github.io/scala_school/advanced-types.html\" target=\"_blank\" title=\"http://twitter.github.io/scala_school/advanced-types.html\">This</a> is practically essential, but it's not enough.  </p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 16108733,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "pnf@podsnap.com",
            "sender_full_name": "Peter Fraenkel (he) (S'13)",
            "sender_id": 2142,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "scaladays talk",
            "submessages": [],
            "timestamp": 1391010111,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/d495685876a5a195b6ef5fb9a269b6d0dcd5c5fe?x=x&version=1",
            "client": "website",
            "content": "<p>Frontload learning about pattern matching.  With nearly everything returning <code>Option</code>s,  you need as soon as possible to be not confused by this.</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 16109058,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "pnf@podsnap.com",
            "sender_full_name": "Peter Fraenkel (he) (S'13)",
            "sender_id": 2142,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "scaladays talk",
            "submessages": [],
            "timestamp": 1391010556,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/d495685876a5a195b6ef5fb9a269b6d0dcd5c5fe?x=x&version=1",
            "client": "website",
            "content": "<p>I'm not sure about the following, because it risks sounding discouraging, but I'd advise staying away from the DSLs until you've used a few of their tricks yourself.  The double-bang is in this category.  </p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 16109560,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "pnf@podsnap.com",
            "sender_full_name": "Peter Fraenkel (he) (S'13)",
            "sender_id": 2142,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "scaladays talk",
            "submessages": [],
            "timestamp": 1391011209,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/d495685876a5a195b6ef5fb9a269b6d0dcd5c5fe?x=x&version=1",
            "client": "website",
            "content": "<p>The standard pedagogy seems to introduce  <code>for</code> comprehensions with <code>to</code>  as just Scala's funky syntax for looping.  I guess it's OK to let beginners think that for a day or two, especially if they're skittish Java refugees, but the sooner they understand what's really going on, the faster they'll learn what Scala is really about.</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 16109686,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "pnf@podsnap.com",
            "sender_full_name": "Peter Fraenkel (he) (S'13)",
            "sender_id": 2142,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "scaladays talk",
            "submessages": [],
            "timestamp": 1391011406,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/d495685876a5a195b6ef5fb9a269b6d0dcd5c5fe?x=x&version=1",
            "client": "website",
            "content": "<p>Uhm.  I'll stop now.</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 16109690,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "pnf@podsnap.com",
            "sender_full_name": "Peter Fraenkel (he) (S'13)",
            "sender_id": 2142,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "scaladays talk",
            "submessages": [],
            "timestamp": 1391011417,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/d495685876a5a195b6ef5fb9a269b6d0dcd5c5fe?x=x&version=1",
            "client": "website",
            "content": "<p>Except that everyone should know about this <a href=\"http://docs.scala-lang.org/tutorials/FAQ/finding-symbols.html\" target=\"_blank\" title=\"http://docs.scala-lang.org/tutorials/FAQ/finding-symbols.html\">FAQ</a> on weird scala symbols, including the ubiquitous underscore.<br>\nNow I'll stop.</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 16109811,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "pnf@podsnap.com",
            "sender_full_name": "Peter Fraenkel (he) (S'13)",
            "sender_id": 2142,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "scaladays talk",
            "submessages": [],
            "timestamp": 1391011567,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/17f0b91da5342b9891469be52d28e4b0?d=identicon&version=1",
            "client": "desktop app Mac 0.4.2",
            "content": "<p>Amazing input, thanks <span class=\"user-mention\" data-user-email=\"pnf@podsnap.com\">@Peter Fraenkel (S'13)</span>! I'm totally clueless about <code>Xprint:parser</code> and the other one you mentioned. Going to explore that now. </p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 16113444,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "marcus@ljungblad.nu",
            "sender_full_name": "Marcus Ljungblad (F'13)",
            "sender_id": 2898,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "scaladays talk",
            "submessages": [],
            "timestamp": 1391015993,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/17f0b91da5342b9891469be52d28e4b0?d=identicon&version=1",
            "client": "desktop app Mac 0.4.2",
            "content": "<p>Definitely agree on staying away from DSLs until you know what they are. Problem is many libs sooner rather than later start introducing their own syntax. </p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 16113502,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "marcus@ljungblad.nu",
            "sender_full_name": "Marcus Ljungblad (F'13)",
            "sender_id": 2898,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "scaladays talk",
            "submessages": [],
            "timestamp": 1391016023,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/17f0b91da5342b9891469be52d28e4b0?d=identicon&version=1",
            "client": "desktop app Mac 0.4.2",
            "content": "<p><span class=\"user-mention\" data-user-email=\"pnf@podsnap.com\">@Peter Fraenkel (S'13)</span> do you have a good source/reference for the <code>for</code>-comprehension idea that you're talking about. Not sure I've encountered it myself. Perhaps because I'd already done some functional programming before beginning with Scala?</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 16128047,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "marcus@ljungblad.nu",
            "sender_full_name": "Marcus Ljungblad (F'13)",
            "sender_id": 2898,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "scaladays talk",
            "submessages": [],
            "timestamp": 1391031209,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/d495685876a5a195b6ef5fb9a269b6d0dcd5c5fe?x=x&version=1",
            "client": "website",
            "content": "<p>Try this:</p>\n<div class=\"codehilite\"><pre>scala -Xprint:parser -e &quot;for (i &lt;- 1 to 5; j &lt;- 1 to 4) yield i*j&quot;\n</pre></div>\n\n\n<p>Boilerplate aside, this turn into:</p>\n<div class=\"codehilite\"><pre>1.to(5).flatMap(((i) =&gt; 1.to(4).map(((j) =&gt; i.$times(j)))))\n</pre></div>\n\n\n<p>So this innocuous looking for-loop is really a sequence monad binding to a function that involves <code>List</code> as a functor fmap-ing to a function that happens to be a closure.  I only mention monads to establish myself as a <a href=\"http://blog.podsnap.com/arrogance.html\" target=\"_blank\" title=\"http://blog.podsnap.com/arrogance.html\">hypocrite</a>, but I do think it's important to understand that there are map operations going on here, because that fact is at the core of Scala as a functional language.</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 16129387,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "pnf@podsnap.com",
            "sender_full_name": "Peter Fraenkel (he) (S'13)",
            "sender_id": 2142,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "scaladays talk",
            "submessages": [],
            "timestamp": 1391032566,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/d495685876a5a195b6ef5fb9a269b6d0dcd5c5fe?x=x&version=1",
            "client": "website",
            "content": "<p>It might also be worth running the same code through <code>-Xprint:typer</code>  This one I can't do in my head, but you'll see all the implicit, pimpy stuff happening; that is, it shows how some apparently magical behavior is rooted in it also being an object-oriented language.</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 16129858,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "pnf@podsnap.com",
            "sender_full_name": "Peter Fraenkel (he) (S'13)",
            "sender_id": 2142,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "scaladays talk",
            "submessages": [],
            "timestamp": 1391032958,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/d495685876a5a195b6ef5fb9a269b6d0dcd5c5fe?x=x&version=1",
            "client": "ZulipiOS",
            "content": "<p>Ya know, I'm tempted to transcribe this to my blog. Since nobody reads my blog, this won't in any way affect your talk. </p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 16163437,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "pnf@podsnap.com",
            "sender_full_name": "Peter Fraenkel (he) (S'13)",
            "sender_id": 2142,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "scaladays talk",
            "submessages": [],
            "timestamp": 1391091038,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/17f0b91da5342b9891469be52d28e4b0?d=identicon&version=1",
            "client": "desktop app Mac 0.4.2",
            "content": "<p>You should totally do it! I submitted a proposal, but lets see what happens. Will refer to your blog for sure. </p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 16168308,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "marcus@ljungblad.nu",
            "sender_full_name": "Marcus Ljungblad (F'13)",
            "sender_id": 2898,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "scaladays talk",
            "submessages": [],
            "timestamp": 1391097933,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p>I didn't like his other talk very much, but this one is substantive: <a href=\"https://thenewcircle.com/s/post/1568/scala_collections_why_not_paul_phillips_video\" target=\"_blank\" title=\"https://thenewcircle.com/s/post/1568/scala_collections_why_not_paul_phillips_video\">https://thenewcircle.com/s/post/1568/scala_collections_why_not_paul_phillips_video</a></p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 16192536,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "corrections library",
            "submessages": [],
            "timestamp": 1391125992,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/d495685876a5a195b6ef5fb9a269b6d0dcd5c5fe?x=x&version=1",
            "client": "ZulipiOS",
            "content": "<p>Well, that hurt. It's like fearing you suffer from hallucinations and then learning that the monsters are real. </p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 16196820,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "pnf@podsnap.com",
            "sender_full_name": "Peter Fraenkel (he) (S'13)",
            "sender_id": 2142,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "corrections library",
            "submessages": [],
            "timestamp": 1391132114,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p>Interesting discussion: <a href=\"https://groups.google.com/forum/#!topic/scala-internals/R4fTU_5XVZs/discussion\" target=\"_blank\" title=\"https://groups.google.com/forum/#!topic/scala-internals/R4fTU_5XVZs/discussion\">https://groups.google.com/forum/#!topic/scala-internals/R4fTU_5XVZs/discussion</a></p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 16221885,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "more collections stuff",
            "submessages": [],
            "timestamp": 1391181939,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/d495685876a5a195b6ef5fb9a269b6d0dcd5c5fe?x=x&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"marcus@ljungblad.nu\">@Marcus Ljungblad (F'13)</span> <a href=\"http://blog.podsnap.com/scala-conspiracy.html\" target=\"_blank\" title=\"http://blog.podsnap.com/scala-conspiracy.html\">Scala for Beginners - The secret information \"they\" don't want you to know.</a>  I mentioned at the start that you're giving a talk, but I couldn't find anything to link to directly.</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 16332083,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "pnf@podsnap.com",
            "sender_full_name": "Peter Fraenkel (he) (S'13)",
            "sender_id": 2142,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "scaladays talk",
            "submessages": [],
            "timestamp": 1391396699,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/17f0b91da5342b9891469be52d28e4b0?d=identicon&version=1",
            "client": "desktop app Mac 0.4.2",
            "content": "<p>Oh, cool! Thanks :) It's just a proposal still though so I don't really know if I get to give the talk yet. </p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 16341636,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "marcus@ljungblad.nu",
            "sender_full_name": "Marcus Ljungblad (F'13)",
            "sender_id": 2898,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "scaladays talk",
            "submessages": [],
            "timestamp": 1391416278,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/17f0b91da5342b9891469be52d28e4b0?d=identicon&version=1",
            "client": "desktop app Mac 0.4.2",
            "content": "<p>This post is awesome! It's like the future half summary of what I had in mind. </p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 16341710,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "marcus@ljungblad.nu",
            "sender_full_name": "Marcus Ljungblad (F'13)",
            "sender_id": 2898,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "scaladays talk",
            "submessages": [],
            "timestamp": 1391416445,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p>Urgh, I really want to go to these talks :(</p>\n<p><a href=\"http://nescala.org/\" target=\"_blank\" title=\"http://nescala.org/\">http://nescala.org/</a></p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 16803805,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "nescala",
            "submessages": [],
            "timestamp": 1392137553,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"dschobel@gmail.com\">@Daniel Schobel (W'13)</span> are you going?</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 16803921,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "nescala",
            "submessages": [],
            "timestamp": 1392137685,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p>Looks like day 2 is free and open to all though.</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 16803971,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "nescala",
            "submessages": [],
            "timestamp": 1392137754,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/6f331605bee541a4c2c8da37a297786194212c15?x=x&version=2",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"alan@hackerschool.com\">@Alan O'Donnell</span> That looks like a lot of fun. I might go to Day 2.</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 16804877,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "zach.allaun+recurse-zulip@gmail.com",
            "sender_full_name": "Zach Allaun (he) (S'12)",
            "sender_id": 808,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "nescala",
            "submessages": [],
            "timestamp": 1392138744,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/7b22ad8fae879dc36792aa1391781fa2?d=identicon&version=1",
            "client": "desktop app Mac 0.4.2",
            "content": "<p>ack, did you get sold out somehow? :( tapad is going en masse.</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 16814800,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "yael@nyu.edu",
            "sender_full_name": "Yael Elmatad (she) (S'12)",
            "sender_id": 862,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "nescala",
            "submessages": [],
            "timestamp": 1392149828,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/7b22ad8fae879dc36792aa1391781fa2?d=identicon&version=1",
            "client": "desktop app Mac 0.4.2",
            "content": "<p>(<span class=\"user-mention\" data-user-email=\"alan@hackerschool.com\">@Alan O'Donnell</span> )</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 16814804,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "yael@nyu.edu",
            "sender_full_name": "Yael Elmatad (she) (S'12)",
            "sender_id": 862,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "nescala",
            "submessages": [],
            "timestamp": 1392149833,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p>Yeah day 1 ran out in about five seconds.</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 16814816,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "nescala",
            "submessages": [],
            "timestamp": 1392149854,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/7b22ad8fae879dc36792aa1391781fa2?d=identicon&version=1",
            "client": "desktop app Mac 0.4.2",
            "content": "<p>they opened a bunch more tickets</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 16814820,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "yael@nyu.edu",
            "sender_full_name": "Yael Elmatad (she) (S'12)",
            "sender_id": 862,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "nescala",
            "submessages": [],
            "timestamp": 1392149862,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/7b22ad8fae879dc36792aa1391781fa2?d=identicon&version=1",
            "client": "desktop app Mac 0.4.2",
            "content": "<p>twice i think</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 16814827,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "yael@nyu.edu",
            "sender_full_name": "Yael Elmatad (she) (S'12)",
            "sender_id": 862,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "nescala",
            "submessages": [],
            "timestamp": 1392149873,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p>It was kind of funny, all these Scala celebrities were on twitter going \"Wait, I can't come?\"</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 16814828,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "nescala",
            "submessages": [],
            "timestamp": 1392149874,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/7b22ad8fae879dc36792aa1391781fa2?d=identicon&version=1",
            "client": "desktop app Mac 0.4.2",
            "content": "<p>but yeah, now it's dead</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 16814830,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "yael@nyu.edu",
            "sender_full_name": "Yael Elmatad (she) (S'12)",
            "sender_id": 862,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "nescala",
            "submessages": [],
            "timestamp": 1392149876,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/7b22ad8fae879dc36792aa1391781fa2?d=identicon&version=1",
            "client": "desktop app Mac 0.4.2",
            "content": "<p>(sold out)</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 16814848,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "yael@nyu.edu",
            "sender_full_name": "Yael Elmatad (she) (S'12)",
            "sender_id": 862,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "nescala",
            "submessages": [],
            "timestamp": 1392149883,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p>Yeah I missed both :(</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 16814859,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "nescala",
            "submessages": [],
            "timestamp": 1392149884,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/7b22ad8fae879dc36792aa1391781fa2?d=identicon&version=1",
            "client": "desktop app Mac 0.4.2",
            "content": "<p>one of our engineers got the bigger place at NYU.  so it went from 100 -&gt; 200 spots</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 16814880,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "yael@nyu.edu",
            "sender_full_name": "Yael Elmatad (she) (S'12)",
            "sender_id": 862,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "nescala",
            "submessages": [],
            "timestamp": 1392149896,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p>Do me a favor and talk to Heather Miller :) I want to get her as a resident for HS.</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 16814894,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "nescala",
            "submessages": [],
            "timestamp": 1392149915,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/7b22ad8fae879dc36792aa1391781fa2?d=identicon&version=1",
            "client": "desktop app Mac 0.4.2",
            "content": "<p><span class=\"user-mention\" data-user-email=\"alan@hackerschool.com\">@Alan O'Donnell</span> i'm on the case.  I'm pretty excited about her talk.  My co-worker Oleksii said her talk was the most voted for</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 16815092,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "yael@nyu.edu",
            "sender_full_name": "Yael Elmatad (she) (S'12)",
            "sender_id": 862,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "nescala",
            "submessages": [],
            "timestamp": 1392150142,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/6f583488b0ceaaef4a19844132a81ec9?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"alan@hackerschool.com\">@Alan O'Donnell</span> yep, I'll be there.  +1 to what Yael said about joining the waiting list. I got in last week on the nth wave of ticket releases.</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 16854756,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "dschobel@gmail.com",
            "sender_full_name": "Daniel Schobel (W'13)",
            "sender_id": 837,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "nescala",
            "submessages": [],
            "timestamp": 1392216978,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/6f583488b0ceaaef4a19844132a81ec9?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"alan@hackerschool.com\">@Alan O'Donnell</span> also, twitter's hosting NY-scala next week and one of the maintainers of finagle is speaking so if you're still interested networking/distributed systems architecture in scala you might want to check that out: <a href=\"http://www.meetup.com/ny-scala/events/165562912/\" target=\"_blank\" title=\"http://www.meetup.com/ny-scala/events/165562912/\">http://www.meetup.com/ny-scala/events/165562912/</a></p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 16854967,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "dschobel@gmail.com",
            "sender_full_name": "Daniel Schobel (W'13)",
            "sender_id": 837,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "nescala",
            "submessages": [],
            "timestamp": 1392217300,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p>Oh cool.</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 16854978,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "nescala",
            "submessages": [],
            "timestamp": 1392217313,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/a604f6425b41d724539755eb2c457f29536f16d9?x=x&version=2",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"yael@nyu.edu\">@Yael Elmatad (S'12)</span> since you know the organizers you should try and squeeze <span class=\"user-mention\" data-user-email=\"alan@hackerschool.com\">@Alan O'Donnell</span> in. Pull some favors. </p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 16860978,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "sonali@recurse.com",
            "sender_full_name": "Sonali Sridhar",
            "sender_id": 812,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "nescala",
            "submessages": [],
            "timestamp": 1392224557,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/7b22ad8fae879dc36792aa1391781fa2?d=identicon&version=1",
            "client": "desktop app Mac 0.4.2",
            "content": "<p>I'll see what I can do, but I think we have people on our own team who are locked out :(</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 16860986,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "yael@nyu.edu",
            "sender_full_name": "Yael Elmatad (she) (S'12)",
            "sender_id": 862,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "nescala",
            "submessages": [],
            "timestamp": 1392224579,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/a604f6425b41d724539755eb2c457f29536f16d9?x=x&version=2",
            "client": "website",
            "content": "<p>All these people say they're coming and then it snows two inches and the whole hall is empty.</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 16860993,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "sonali@recurse.com",
            "sender_full_name": "Sonali Sridhar",
            "sender_id": 812,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "nescala",
            "submessages": [],
            "timestamp": 1392224584,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/a604f6425b41d724539755eb2c457f29536f16d9?x=x&version=2",
            "client": "website",
            "content": "<p>Also if you show up at the door, people don't turn you away necessarily. Just sayin'. There are tricks <span class=\"user-mention\" data-user-email=\"alan@hackerschool.com\">@Alan O'Donnell</span>  :). </p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 16861073,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "sonali@recurse.com",
            "sender_full_name": "Sonali Sridhar",
            "sender_id": 812,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "nescala",
            "submessages": [],
            "timestamp": 1392224676,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/d495685876a5a195b6ef5fb9a269b6d0dcd5c5fe?x=x&version=1",
            "client": "website",
            "content": "<p>I'm in on the second day.  If there's a blizzard, I'll try <span class=\"user-mention\" data-user-email=\"sonali@hackerschool.com\">@Sonali Sridhar</span> 's trick.</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 16866136,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "pnf@podsnap.com",
            "sender_full_name": "Peter Fraenkel (he) (S'13)",
            "sender_id": 2142,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "nescala",
            "submessages": [],
            "timestamp": 1392230953,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/7b22ad8fae879dc36792aa1391781fa2?d=identicon&version=1",
            "client": "desktop app Mac 0.4.2",
            "content": "<p>I would try Sonali's door trick :P</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 16868254,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "yael@nyu.edu",
            "sender_full_name": "Yael Elmatad (she) (S'12)",
            "sender_id": 862,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "nescala",
            "submessages": [],
            "timestamp": 1392233002,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/d495685876a5a195b6ef5fb9a269b6d0dcd5c5fe?x=x&version=1",
            "client": "website",
            "content": "<p>Alternatively, just claim to be someone too important to mess around with stinking badges.  I don't really look like Miles Sabin, but I could always say it's because I got new glasses.</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 16868655,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "pnf@podsnap.com",
            "sender_full_name": "Peter Fraenkel (he) (S'13)",
            "sender_id": 2142,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "nescala",
            "submessages": [],
            "timestamp": 1392233322,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/7b22ad8fae879dc36792aa1391781fa2?d=identicon&version=1",
            "client": "desktop app Mac 0.4.3",
            "content": "<p><a href=\"http://www.meetup.com/nescala/events/166931312/?a=ea1_grp&amp;rv=ea1&amp;_af_eid=166931312&amp;_af=event\" target=\"_blank\" title=\"http://www.meetup.com/nescala/events/166931312/?a=ea1_grp&amp;rv=ea1&amp;_af_eid=166931312&amp;_af=event\">http://www.meetup.com/nescala/events/166931312/?a=ea1_grp&amp;rv=ea1&amp;_af_eid=166931312&amp;_af=event</a></p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 17162321,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "yael@nyu.edu",
            "sender_full_name": "Yael Elmatad (she) (S'12)",
            "sender_id": 862,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "nescala",
            "submessages": [],
            "timestamp": 1392758181,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/21f6c434534e79bd2b670d2d4292aff0?d=identicon&version=1",
            "client": "desktop app Mac 0.4.3",
            "content": "<p>I plan on going there. Anybody else?</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 17163114,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "laura.bledaite@gmail.com",
            "sender_full_name": "Laura Pumpute (W'14)",
            "sender_id": 5000,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "nescala",
            "submessages": [],
            "timestamp": 1392758974,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/7b22ad8fae879dc36792aa1391781fa2?d=identicon&version=1",
            "client": "desktop app Mac 0.4.3",
            "content": "<p>I may go, i'm assuming a lot of my team at Tapad will be there.</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 17163583,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "yael@nyu.edu",
            "sender_full_name": "Yael Elmatad (she) (S'12)",
            "sender_id": 862,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "nescala",
            "submessages": [],
            "timestamp": 1392759476,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/3f4de4ea4908b6f6ac225959674a2e05bf25a1b7?x=x&version=2",
            "client": "desktop app Mac 0.4.1",
            "content": "<p>Anyone have a good recommendation of where to start with scala?  I keep hoping the coursera courses will come back, but I need to give myself a a good solid kick in the pants and get moving with this.  I'm coming from a Java background and when I look at scala code it makes me think  \"if Java an Python had a baby, this would be it\" if that helps narrow down where I am coming from.... :) thanks  <img alt=\":hellokitty:\" class=\"emoji\" src=\"https://humbug-user-uploads.s3.amazonaws.com/o59r0ehi3NrWh6Dx7GoQ17DnwIFjOM5cVDgk5nKjp6mz33_UfWuHpgOtZEy28u_d60vOkVroJiIicPlh/hello2.png\" title=\":hellokitty:\"></p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 17427010,
            "is_me_message": false,
            "last_edit_timestamp": 1393211143,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "ediebeer@gmail.com",
            "sender_full_name": "Edie Beer (F'12)",
            "sender_id": 896,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "where to start?",
            "submessages": [],
            "timestamp": 1393211053,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/03b0888e9d8908ef656cd0831bedb1e9754c974d?x=x&version=1",
            "client": "desktop app Mac 0.4.3",
            "content": "<p><span class=\"user-mention\" data-user-email=\"alan@hackerschool.com\">@Alan O'Donnell</span> recommended the MEAP book to me: <a href=\"http://www.manning.com/bjarnason/\" target=\"_blank\" title=\"http://www.manning.com/bjarnason/\">http://www.manning.com/bjarnason/</a>; it's an intro to FP. I've heard good things about Odersky's book as well: <a href=\"http://www.artima.com/shop/programming_in_scala_2ed\" target=\"_blank\" title=\"http://www.artima.com/shop/programming_in_scala_2ed\">http://www.artima.com/shop/programming_in_scala_2ed</a>. And this looks like a fantastic collection of resources for getting started: <a href=\"https://blog.stackmob.com/2013/01/resources-for-getting-started-with-functional-programming-and-scala/\" target=\"_blank\" title=\"https://blog.stackmob.com/2013/01/resources-for-getting-started-with-functional-programming-and-scala/\">https://blog.stackmob.com/2013/01/resources-for-getting-started-with-functional-programming-and-scala/</a>. Do take the coursera course when you have the opportunity, though. It's really well done. Even if you've gotten off the ground already, I think it will be worthwhile. Happy scalalaing :-).</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 17427458,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "andrea.fey@gmail.com",
            "sender_full_name": "Andrea Fey (W'14)",
            "sender_id": 5010,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "where to start?",
            "submessages": [],
            "timestamp": 1393211931,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/03b0888e9d8908ef656cd0831bedb1e9754c974d?x=x&version=1",
            "client": "desktop app Mac 0.4.3",
            "content": "<p><span class=\"user-mention\" data-user-email=\"ediebeer@gmail.com\">@Edith Beer (F'12)</span> ^</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 17427463,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "andrea.fey@gmail.com",
            "sender_full_name": "Andrea Fey (W'14)",
            "sender_id": 5010,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "where to start?",
            "submessages": [],
            "timestamp": 1393211951,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/d495685876a5a195b6ef5fb9a269b6d0dcd5c5fe?x=x&version=1",
            "client": "website",
            "content": "<p>At the beginning, and coming from a Java background, I found <a href=\"http://horstmann.com/scala/\" target=\"_blank\" title=\"http://horstmann.com/scala/\">Scala for the Impatient</a> more useful than Odersky's book.  With a bit more functional programming experience under my belt, I'm really enjoying the Chiusano/Bjarnason book.  I also wrote a very brief <a href=\"http://blog.podsnap.com/scala-conspiracy.html\" target=\"_blank\" title=\"http://blog.podsnap.com/scala-conspiracy.html\">note</a>, on some things I wish had been pointed out to me when I was starting.</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 17466913,
            "is_me_message": false,
            "last_edit_timestamp": 1393275800,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "pnf@podsnap.com",
            "sender_full_name": "Peter Fraenkel (he) (S'13)",
            "sender_id": 2142,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "where to start?",
            "submessages": [],
            "timestamp": 1393275786,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/3f4de4ea4908b6f6ac225959674a2e05bf25a1b7?x=x&version=2",
            "client": "desktop app Mac 0.4.1",
            "content": "<p>thank you!  </p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 17488577,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "ediebeer@gmail.com",
            "sender_full_name": "Edie Beer (F'12)",
            "sender_id": 896,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "where to start?",
            "submessages": [],
            "timestamp": 1393303111,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/d495685876a5a195b6ef5fb9a269b6d0dcd5c5fe?x=x&version=1",
            "client": "ZulipiOS",
            "content": "<p>Day 2 turned out to be a lot of fun. </p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 17788399,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "pnf@podsnap.com",
            "sender_full_name": "Peter Fraenkel (he) (S'13)",
            "sender_id": 2142,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "nescala",
            "submessages": [],
            "timestamp": 1393801867,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p>Thoughts? Did everyone have fun?</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 17791711,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "nescala",
            "submessages": [],
            "timestamp": 1393808806,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/6f583488b0ceaaef4a19844132a81ec9?d=identicon&version=1",
            "client": "website",
            "content": "<p>I really enjoyed it, Heather Miller on practical type level programming + Spiewak on data coherency were highlights.  Also learned about a new concurrency primitive (<a href=\"http://research.microsoft.com/en-us/projects/revisions/\" target=\"_blank\" title=\"http://research.microsoft.com/en-us/projects/revisions/\">http://research.microsoft.com/en-us/projects/revisions/</a>) so a productive weekend all in all :)</p>\n<p>Also, pretty sure I was in a session with <span class=\"user-mention\" data-user-email=\"pnf@podsnap.com\">@Peter Fraenkel (S'13)</span> at the end of the day today but I bailed before saying hi so... belated hi Peter!</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 17793468,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "dschobel@gmail.com",
            "sender_full_name": "Daniel Schobel (W'13)",
            "sender_id": 837,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "nescala",
            "submessages": [],
            "timestamp": 1393812465,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/d495685876a5a195b6ef5fb9a269b6d0dcd5c5fe?x=x&version=1",
            "client": "ZulipiOS",
            "content": "<p>Was it the extended whining about collection classes session (plus Guillaume's cool higher order contracts)? If so, </p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 17793653,
            "is_me_message": false,
            "last_edit_timestamp": 1394049929,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "pnf@podsnap.com",
            "sender_full_name": "Peter Fraenkel (he) (S'13)",
            "sender_id": 2142,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "nescala",
            "submessages": [],
            "timestamp": 1393812824,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/d495685876a5a195b6ef5fb9a269b6d0dcd5c5fe?x=x&version=1",
            "client": "ZulipiOS",
            "content": "<p>a belated hi from me as well!</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 17793679,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "pnf@podsnap.com",
            "sender_full_name": "Peter Fraenkel (he) (S'13)",
            "sender_id": 2142,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "nescala",
            "submessages": [],
            "timestamp": 1393812846,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p>Ugh, so many talks I want to watch :( Why does it take O(months) for conferences to put up videos?</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 17933329,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "nescala",
            "submessages": [],
            "timestamp": 1394032953,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/ddf79a11b9b2a19ed45394c4fd3167fb?d=identicon&version=1",
            "client": "website",
            "content": "<p>I'm fairly new to Scala and wondered if anyone can help. I am trying to translate this function to java:</p>\n<div class=\"codehilite\"><pre>val x = new JaccardScoreScript() { \n    @Override \n    protected ScriptDocValues.Longs docFieldLongs(String field)\n        Unknown macro: { return create List(14,46); }\n}\n</pre></div>\n\n\n<p>I am basically trying to override a function for test purposes, being docFieldLongs. This function usually returns ScriptDocValues.Longs:</p>\n<div class=\"codehilite\"><pre>protected ScriptDocValues.Longs docFieldLongs(String field) {\n        return (ScriptDocValues.Longs) doc().get(field);\n    }\n</pre></div>\n\n\n<p>This is all in Elasticsearch. <br>\nI'm stuck in two ways: 1) converting the <code>Unknown macro</code>,  secondly how you should override a function in Java for test purposes.<br>\nSorry if this is a Java/Scala question combined. I figured most people know Scala have experience with Java! Thanks in advance</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 18327364,
            "is_me_message": false,
            "last_edit_timestamp": 1394670723,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "ruby.childs1@gmail.com",
            "sender_full_name": "Ruby Childs (she) (F'12)",
            "sender_id": 883,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "help",
            "submessages": [],
            "timestamp": 1394669734,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/a179bb8c3fc4ab0975954f57d47fa6c53a8c2dad?x=x&version=2",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"ruby.childs1@gmail.com\">@Ruby Childs (F'12)</span> you should edit your message to use <code>~~~</code> around your code. It should format it better.</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 18327871,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "jay@jayschwa.net",
            "sender_full_name": "Jay Weisskopf Petacat (W2'17)",
            "sender_id": 829,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "help",
            "submessages": [],
            "timestamp": 1394670391,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/ddf79a11b9b2a19ed45394c4fd3167fb?d=identicon&version=1",
            "client": "website",
            "content": "<p>hmm that didn't work, unless I'm doing it wrong</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 18327971,
            "is_me_message": false,
            "last_edit_timestamp": 1394670579,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "ruby.childs1@gmail.com",
            "sender_full_name": "Ruby Childs (she) (F'12)",
            "sender_id": 883,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "help",
            "submessages": [],
            "timestamp": 1394670554,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/ddf79a11b9b2a19ed45394c4fd3167fb?d=identicon&version=1",
            "client": "website",
            "content": "<p>ooh now I get it not ~~~ but ```</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 18328062,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "ruby.childs1@gmail.com",
            "sender_full_name": "Ruby Childs (she) (F'12)",
            "sender_id": 883,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "help",
            "submessages": [],
            "timestamp": 1394670703,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/03b0888e9d8908ef656cd0831bedb1e9754c974d?x=x&version=1",
            "client": "desktop app Mac 0.4.3",
            "content": "<p>If I understand what you are trying to do, I think you want something like this:</p>\n<div class=\"codehilite\"><pre><span class=\"n\">public</span> <span class=\"k\">class</span> <span class=\"nc\">JaccardScoreScript</span> <span class=\"o\">{</span>\n    <span class=\"nc\">Map</span><span class=\"o\">&lt;</span><span class=\"nc\">String</span><span class=\"o\">,</span><span class=\"nc\">List</span><span class=\"o\">&lt;</span><span class=\"nc\">Long</span><span class=\"o\">&gt;&gt;</span> <span class=\"n\">mydocs</span> <span class=\"k\">=</span> <span class=\"k\">new</span> <span class=\"nc\">HashMap</span><span class=\"o\">&lt;&gt;();</span>\n    <span class=\"k\">private</span> <span class=\"nc\">Map</span><span class=\"o\">&lt;</span><span class=\"nc\">String</span><span class=\"o\">,</span><span class=\"nc\">List</span><span class=\"o\">&lt;</span><span class=\"nc\">Long</span><span class=\"o\">&gt;&gt;</span> <span class=\"n\">doc</span><span class=\"o\">()</span> <span class=\"o\">{</span>\n        <span class=\"k\">return</span> <span class=\"n\">mydocs</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n    <span class=\"k\">protected</span> <span class=\"nc\">List</span><span class=\"o\">&lt;</span><span class=\"nc\">Long</span><span class=\"o\">&gt;</span> <span class=\"n\">docFieldLongs</span><span class=\"o\">(</span><span class=\"nc\">String</span> <span class=\"n\">field</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"k\">return</span> <span class=\"n\">doc</span><span class=\"o\">().</span><span class=\"n\">get</span><span class=\"o\">(</span><span class=\"n\">field</span><span class=\"o\">);</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</pre></div>\n\n\n<p>If you want to override the docFieldLongs method, you need to extend the class:</p>\n<div class=\"codehilite\"><pre><span class=\"n\">public</span> <span class=\"k\">class</span> <span class=\"nc\">MockJaccardScoreScript</span> <span class=\"k\">extends</span> <span class=\"nc\">JaccardScoreScript</span> <span class=\"o\">{</span>\n    <span class=\"nc\">Long</span><span class=\"o\">[]</span> <span class=\"n\">longs</span> <span class=\"k\">=</span> <span class=\"o\">{</span><span class=\"mi\">14L</span><span class=\"o\">,</span> <span class=\"mi\">16L</span><span class=\"o\">};</span>\n    <span class=\"nd\">@Override</span>\n    <span class=\"k\">protected</span> <span class=\"nc\">List</span><span class=\"o\">&lt;</span><span class=\"nc\">Long</span><span class=\"o\">&gt;</span> <span class=\"n\">docFieldLongs</span><span class=\"o\">(</span><span class=\"nc\">String</span> <span class=\"n\">field</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"k\">return</span> <span class=\"nc\">Arrays</span><span class=\"o\">.</span><span class=\"n\">asList</span><span class=\"o\">(</span><span class=\"n\">longs</span><span class=\"o\">);</span>\n    <span class=\"o\">}</span>\n    <span class=\"n\">public</span> <span class=\"n\">static</span> <span class=\"n\">void</span> <span class=\"n\">main</span><span class=\"o\">(</span><span class=\"nc\">String</span><span class=\"o\">[]</span> <span class=\"n\">args</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"nc\">JaccardScoreScript</span> <span class=\"n\">script</span> <span class=\"k\">=</span> <span class=\"k\">new</span> <span class=\"nc\">MockJaccardScoreScript</span><span class=\"o\">();</span>\n        <span class=\"nc\">System</span><span class=\"o\">.</span><span class=\"n\">out</span><span class=\"o\">.</span><span class=\"n\">println</span><span class=\"o\">(</span><span class=\"s\">&quot;docFieldLongs: &quot;</span> <span class=\"o\">+</span> <span class=\"n\">script</span><span class=\"o\">.</span><span class=\"n\">docFieldLongs</span><span class=\"o\">(</span><span class=\"s\">&quot;anything&quot;</span><span class=\"o\">));</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</pre></div>\n\n\n<p>If you are using a test framework like JUnit, and all you want to do is return a specific List during testing, a better alternative is to use some mock framework. I love Mockito for it's simplicity; it took me about an hour to read the docs, install, and write my first suite of tests. Your test would look something like this:</p>\n<div class=\"codehilite\"><pre><span class=\"nd\">@Test</span>\n <span class=\"n\">public</span> <span class=\"n\">void</span> <span class=\"n\">testImportantMethod</span><span class=\"o\">()</span> <span class=\"o\">{</span>\n        <span class=\"nc\">JaccardScoreScript</span> <span class=\"n\">script</span> <span class=\"k\">=</span> <span class=\"n\">mock</span><span class=\"o\">(</span><span class=\"nc\">JaccardScoreScript</span><span class=\"o\">.</span><span class=\"n\">class</span><span class=\"o\">);</span>\n        <span class=\"n\">when</span><span class=\"o\">(</span><span class=\"n\">script</span><span class=\"o\">.</span><span class=\"n\">docFieldLongs</span><span class=\"o\">(</span><span class=\"n\">anyString</span><span class=\"o\">())).</span><span class=\"n\">thenReturn</span><span class=\"o\">(</span><span class=\"nc\">Arrays</span><span class=\"o\">.</span><span class=\"n\">asList</span><span class=\"o\">(</span><span class=\"k\">new</span> <span class=\"nc\">Long</span><span class=\"o\">[]</span> <span class=\"o\">{</span><span class=\"mi\">14L</span><span class=\"o\">,</span> <span class=\"mi\">16L</span><span class=\"o\">}));</span>\n        <span class=\"c1\">// your tests here</span>\n <span class=\"o\">}</span>\n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 18330254,
            "is_me_message": false,
            "last_edit_timestamp": 1394674960,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "andrea.fey@gmail.com",
            "sender_full_name": "Andrea Fey (W'14)",
            "sender_id": 5010,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "help",
            "submessages": [],
            "timestamp": 1394674833,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/d495685876a5a195b6ef5fb9a269b6d0dcd5c5fe?x=x&version=1",
            "client": "website",
            "content": "<p>Seems like more of the slides are up now.  Still only one talk.</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 18358370,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "pnf@podsnap.com",
            "sender_full_name": "Peter Fraenkel (he) (S'13)",
            "sender_id": 2142,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "nescala",
            "submessages": [],
            "timestamp": 1394726799,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"pnf@podsnap.com\">@Peter Fraenkel (S'13)</span> looks like a bunch of talks: <a href=\"https://thenewcircle.com/s/post/1574/ne_scala_2014?utm_campaign=nescala_2014&amp;utm_source=nescala_parent_post&amp;utm_medium=referral\" target=\"_blank\" title=\"https://thenewcircle.com/s/post/1574/ne_scala_2014?utm_campaign=nescala_2014&amp;utm_source=nescala_parent_post&amp;utm_medium=referral\">https://thenewcircle.com/s/post/1574/ne_scala_2014?utm_campaign=nescala_2014&amp;utm_source=nescala_parent_post&amp;utm_medium=referral</a></p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 18358770,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "nescala",
            "submessages": [],
            "timestamp": 1394727322,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p>I'm excited about the Spiewak talk.</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 18358777,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "nescala",
            "submessages": [],
            "timestamp": 1394727334,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/d495685876a5a195b6ef5fb9a269b6d0dcd5c5fe?x=x&version=1",
            "client": "website",
            "content": "<p>Cool.  Last I had checked, it was just \"Academese.\"</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 18359278,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "pnf@podsnap.com",
            "sender_full_name": "Peter Fraenkel (he) (S'13)",
            "sender_id": 2142,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "nescala",
            "submessages": [],
            "timestamp": 1394727907,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/ddf79a11b9b2a19ed45394c4fd3167fb?d=identicon&version=1",
            "client": "website",
            "content": "<p>Thanks <span class=\"user-mention\" data-user-email=\"andrea.fey@gmail.com\">@Andrea Fey (W'14)</span>  this is along the right lines, although docFieldLongs returns <code>ScriptDocValues.Longs</code> not a list.  Am happy to use mockito, but also have another function to deal with- getValues -&gt; the entire usage I'm trying to test is:</p>\n<div class=\"codehilite\"><pre>docFieldLongs(&quot;values&quot;).getValues();\n</pre></div>\n\n\n<p>I'm assuming I could override <code>getValues()</code> too?</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 18361284,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "ruby.childs1@gmail.com",
            "sender_full_name": "Ruby Childs (she) (F'12)",
            "sender_id": 883,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "help",
            "submessages": [],
            "timestamp": 1394730239,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/03b0888e9d8908ef656cd0831bedb1e9754c974d?x=x&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>Yes. You can override any Java method from the subclass unless it is marked as final.</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 18361517,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "andrea.fey@gmail.com",
            "sender_full_name": "Andrea Fey (W'14)",
            "sender_id": 5010,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "help",
            "submessages": [],
            "timestamp": 1394730534,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/ddf79a11b9b2a19ed45394c4fd3167fb?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"andrea.fey@gmail.com\">@Andrea Fey (W'14)</span> Thank you! I used Mockito before, but not like this. It seems it complains when using this method, as it says docFieldLongs has protected access in org.elasticsearch.script.AbstractSearchScript </p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 18361999,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "ruby.childs1@gmail.com",
            "sender_full_name": "Ruby Childs (she) (F'12)",
            "sender_id": 883,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "help",
            "submessages": [],
            "timestamp": 1394731174,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/03b0888e9d8908ef656cd0831bedb1e9754c974d?x=x&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>That is one challenge with Mockito. You can only use it to intercept calls to public methods.</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 18362092,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "andrea.fey@gmail.com",
            "sender_full_name": "Andrea Fey (W'14)",
            "sender_id": 5010,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "help",
            "submessages": [],
            "timestamp": 1394731270,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/ddf79a11b9b2a19ed45394c4fd3167fb?d=identicon&version=1",
            "client": "website",
            "content": "<p>This still doesn't seem to be working. I tried the first suggestion of overriding the function.:</p>\n<div class=\"codehilite\"><pre>    public class MockMaxiScoreScript extends MaxiScoreScript {\n        Long[] longs = {14L, 16L};\n        @Override\n        protected List&lt;Long&gt; docFieldLongs(String field) {\n            return Arrays.asList(longs);\n        }\n        public static void main(String[] args) {\n            MaxiScoreScript script = new MockMaxiScoreScript().ScoreScript();\n            System.out.println(&quot;docFieldLongs: &quot; + script.docFieldLongs(&quot;anything&quot;));\n        }\n    }\n</pre></div>\n\n\n<p>So it complains in a few ways: <br>\n1) It says I am attempting to use an incompatible return type being List&lt;Long&gt;, as the initial method returns ScriptDocValues. <br>\n2) Cannot access MockMaxiScoreScript within a static context<br>\n3) Complains docFieldLongs, where calling in the last line has protected access in org.elasticsearch.....</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 18362991,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "ruby.childs1@gmail.com",
            "sender_full_name": "Ruby Childs (she) (F'12)",
            "sender_id": 883,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "help",
            "submessages": [],
            "timestamp": 1394732223,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/03b0888e9d8908ef656cd0831bedb1e9754c974d?x=x&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>I'm just not familiar with elasticsearch. Is this something I could take a look at with you? I've tried to trace back what is happening, but it's hard without a concrete example of how you construct a MaxiScoreScript object generally.</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 18370874,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "andrea.fey@gmail.com",
            "sender_full_name": "Andrea Fey (W'14)",
            "sender_id": 5010,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "help",
            "submessages": [],
            "timestamp": 1394740105,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/ddf79a11b9b2a19ed45394c4fd3167fb?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"andrea.fey@gmail.com\">@Andrea Fey (W'14)</span> I would love it if you could take a look at it, but whenever you can-&gt; no rush! Maybe we can do a hangout or something. I'll send you them!</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 18405908,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "ruby.childs1@gmail.com",
            "sender_full_name": "Ruby Childs (she) (F'12)",
            "sender_id": 883,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "help",
            "submessages": [],
            "timestamp": 1394800762,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/d037119574d45efed8c1a23c7c321721?d=identicon&version=1",
            "client": "website",
            "content": "<p>lol code baby. Scala == Java[Heart]Python. I gotta learn Scala too. Did you find videos?</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 18426743,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "ohprecio@gmail.com",
            "sender_full_name": "Vincent Ohprecio (F'12)",
            "sender_id": 901,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "where to start?",
            "submessages": [],
            "timestamp": 1394825336,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/d037119574d45efed8c1a23c7c321721?d=identicon&version=1",
            "client": "website",
            "content": "<p>Found this non-beginner in scala starting soon <a href=\"https://www.coursera.org/course/progfun\" target=\"_blank\" title=\"https://www.coursera.org/course/progfun\">https://www.coursera.org/course/progfun</a></p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 18625602,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "ohprecio@gmail.com",
            "sender_full_name": "Vincent Ohprecio (F'12)",
            "sender_id": 901,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "where to start?",
            "submessages": [],
            "timestamp": 1395178842,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/ddf79a11b9b2a19ed45394c4fd3167fb?d=identicon&version=1",
            "client": "website",
            "content": "<p>I found the same course <span class=\"user-mention\" data-user-email=\"ohprecio@gmail.com\">@Vincent Ohprecio (F'12)</span>  suggested, which I used, but I didn't find that it wasn't for beginners, it just has a steep learning curve</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 18661464,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "ruby.childs1@gmail.com",
            "sender_full_name": "Ruby Childs (she) (F'12)",
            "sender_id": 883,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "where to start?",
            "submessages": [],
            "timestamp": 1395240682,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/3f4de4ea4908b6f6ac225959674a2e05bf25a1b7?x=x&version=2",
            "client": "desktop app Mac 0.4.3",
            "content": "<p>not videos, but looks like a decent collection of resources: <a href=\"http://twitter.github.io/scala_school/\" target=\"_blank\" title=\"http://twitter.github.io/scala_school/\">http://twitter.github.io/scala_school/</a>  <br>\nand I just signed up for the Coursera course... I've been rather anxious for them to offer it again. Particulary with having work deadlines to contend with, it's too easy to fall behind on my own goals.</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 18684877,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "ediebeer@gmail.com",
            "sender_full_name": "Edie Beer (F'12)",
            "sender_id": 896,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "where to start?",
            "submessages": [],
            "timestamp": 1395265449,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/03b0888e9d8908ef656cd0831bedb1e9754c974d?x=x&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p><a href=\"http://www.scalakoans.org/\" target=\"_blank\" title=\"http://www.scalakoans.org/\">Scala Koans</a> are supposed to be really good, too. I'm planning to slowly go through them hoping they will emphasize some key concepts which I don't pick up just by doing projects.</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 18689260,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "andrea.fey@gmail.com",
            "sender_full_name": "Andrea Fey (W'14)",
            "sender_id": 5010,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "where to start?",
            "submessages": [],
            "timestamp": 1395270484,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/d037119574d45efed8c1a23c7c321721?d=identicon&version=1",
            "client": "website",
            "content": "<p>here are some starter videos <a href=\"https://www.youtube.com/watch?v=uAdgow-5owM&amp;list=PLP9bW4yPvt8LUTHodIGypmw71zyl_bjPy\" target=\"_blank\" title=\"https://www.youtube.com/watch?v=uAdgow-5owM&amp;list=PLP9bW4yPvt8LUTHodIGypmw71zyl_bjPy\">https://www.youtube.com/watch?v=uAdgow-5owM&amp;list=PLP9bW4yPvt8LUTHodIGypmw71zyl_bjPy</a></p>\n<div class=\"message_inline_image\"><a href=\"https://www.youtube.com/watch?v=uAdgow-5owM&amp;list=PLP9bW4yPvt8LUTHodIGypmw71zyl_bjPy\" target=\"_blank\" title=\"https://www.youtube.com/watch?v=uAdgow-5owM&amp;list=PLP9bW4yPvt8LUTHodIGypmw71zyl_bjPy\"><img src=\"https://i.ytimg.com/vi/uAdgow-5owM/default.jpg\"></a></div>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 18772152,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "ohprecio@gmail.com",
            "sender_full_name": "Vincent Ohprecio (F'12)",
            "sender_id": 901,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "where to start?",
            "submessages": [],
            "timestamp": 1395421825,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p><a href=\"http://nurkiewicz.github.io/talks/2014/scalar/#/\" target=\"_blank\" title=\"http://nurkiewicz.github.io/talks/2014/scalar/#/\">http://nurkiewicz.github.io/talks/2014/scalar/#/</a></p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 19594567,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "fun wtfs",
            "submessages": [],
            "timestamp": 1396905381,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p>There are some good ones in there.</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 19594571,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "fun wtfs",
            "submessages": [],
            "timestamp": 1396905387,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/03b0888e9d8908ef656cd0831bedb1e9754c974d?x=x&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>Meta meta \"scala dark side\"; I click on the link and get output, but not the expected output, and I don't understand why.</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 19594898,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "andrea.fey@gmail.com",
            "sender_full_name": "Andrea Fey (W'14)",
            "sender_id": 5010,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "fun wtfs",
            "submessages": [],
            "timestamp": 1396905698,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/03b0888e9d8908ef656cd0831bedb1e9754c974d?x=x&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>I am playing around with partial functions and have run into something I don't understand. </p>\n<p>I have defined two partial functions (hashes), which I expect to take an optional second Boolean parameter:</p>\n<div class=\"codehilite\"><pre>    def SHA1 = hash(MessageDigest.getInstance(&quot;SHA-1&quot;))_\n    def MD5 = hash(MessageDigest.getInstance(&quot;MD5&quot;))_\n    private def hash(algorithm:HashAlgorithm)(s:String, urlencode:Boolean = false) = {\n        val form = if (urlencode) &quot;%%%02X&quot; else &quot;%02X&quot;\n        (algorithm.digest(s.getBytes) map(form format _)).mkString\n    }\n</pre></div>\n\n\n<p>When I call the function with both parameters, it compiles, but with just one parameter I get a compilation error:</p>\n<div class=\"codehilite\"><pre>   // I&#39;m OK\n    val test1 = Client.SHA1(Bcodr.bencode(metainfo.info), true)\n    // not enough arguments for method apply: (v1: String, v2: Boolean)String in trait Function2. Unspecified \n     value parameter v2.\n    val test2 =  Client.SHA1(Bcodr.bencode(metainfo.info)) \n</pre></div>\n\n\n<p>I just refactored this to use partial functions, and before I refactored I could force the hash function to use the default without any problem.</p>\n<p>Any ideas why the partial function implementation fails to permit default arguments?</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 20356046,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "andrea.fey@gmail.com",
            "sender_full_name": "Andrea Fey (W'14)",
            "sender_id": 5010,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "partial function defaults",
            "submessages": [],
            "timestamp": 1398109671,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/6f583488b0ceaaef4a19844132a81ec9?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"andrea.fey@gmail.com\">@Andrea Fey (W'14)</span>  if you paste your code into the repl you can watch the type inferencer fail to derive the type you think it's deriving</p>\n<div class=\"codehilite\"><pre>scala&gt; def SHA1 = hash(MessageDigest.getInstance(&quot;SHA-1&quot;))_\nSHA1: (String, Boolean) =&gt; String \n</pre></div>\n\n\n<p>you can find some workarounds <a href=\"http://stackoverflow.com/questions/5676301/scala-currying-and-default-arguments\" target=\"_blank\" title=\"http://stackoverflow.com/questions/5676301/scala-currying-and-default-arguments\">here</a></p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 20683582,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "dschobel@gmail.com",
            "sender_full_name": "Daniel Schobel (W'13)",
            "sender_id": 837,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "partial function defaults",
            "submessages": [],
            "timestamp": 1398483908,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/03b0888e9d8908ef656cd0831bedb1e9754c974d?x=x&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>Thanks, Daniel. FWIW I got a nice answer to my <a href=\"http://stackoverflow.com/questions/23205983/can-i-apply-argument-defaults-when-using-partial-functions-in-scala/23206255#23206255\" target=\"_blank\" title=\"http://stackoverflow.com/questions/23205983/can-i-apply-argument-defaults-when-using-partial-functions-in-scala/23206255#23206255\">question on SO</a>.</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 20690289,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "andrea.fey@gmail.com",
            "sender_full_name": "Andrea Fey (W'14)",
            "sender_id": 5010,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "partial function defaults",
            "submessages": [],
            "timestamp": 1398500187,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/6f583488b0ceaaef4a19844132a81ec9?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"andrea.fey@gmail.com\">@Andrea Fey (W'14)</span>  makes sense that it will fall down for positional args but it's a bummer that scala couldn't just force the caller to name the args and give us both partial application and default args as you're after.</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 20745780,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "dschobel@gmail.com",
            "sender_full_name": "Daniel Schobel (W'13)",
            "sender_id": 837,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "partial function defaults",
            "submessages": [],
            "timestamp": 1398615747,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/03b0888e9d8908ef656cd0831bedb1e9754c974d?x=x&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>Or maybe permit the caller to name the args if they are incomplete... It's an interesting design choice; I don't know if it's one of those things that's limited by the JVM.</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 20746268,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "andrea.fey@gmail.com",
            "sender_full_name": "Andrea Fey (W'14)",
            "sender_id": 5010,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "partial function defaults",
            "submessages": [],
            "timestamp": 1398616763,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/d495685876a5a195b6ef5fb9a269b6d0dcd5c5fe?x=x&version=1",
            "client": "website",
            "content": "<p>You could always do this:</p>\n<div class=\"codehilite\"><pre>scala&gt; :paste\n// Entering paste mode (ctrl-D to finish)\ncase class Bloink(v1:Int) {\n  def apply(v2:Int) = v1 + v2 + 10\n  def apply(v2:Int,v3:Int) = v1 + v2 + v3\n}\ndef flibber(v1:Int) = Bloink(v1)\n// Exiting paste mode, now interpreting.\ndefined class Bloink\nflibber: (v1: Int)Bloink\nscala&gt; flibber(1)(2)\nres0: Int = 13\nscala&gt; flibber(1)(2,3)\nres1: Int = 6\nscala&gt; val temp = flibber(1)\ntemp: Bloink = Bloink(1)\nscala&gt; temp(2)\nres2: Int = 13\nscala&gt; temp(2,3)\nres3: Int = 6\n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 20839471,
            "is_me_message": false,
            "last_edit_timestamp": 1398778988,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "pnf@podsnap.com",
            "sender_full_name": "Peter Fraenkel (he) (S'13)",
            "sender_id": 2142,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "partial function defaults",
            "submessages": [],
            "timestamp": 1398778964,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/dc9f215c22985887d9929b85b02c49ef?d=identicon&version=1",
            "client": "website",
            "content": "<p>So, I'm basically totally new to Scala, and I keep getting there \"diverging implicit expansion\" errors that I don't feel like I understand at all. I've been resolving them by a fairly trial and error method, which eventually tends to work but isn't satisfying. Can any of you explain what this even means?</p>\n<p>(Okay, I'm sort of lying here. I have vague theories. My current theory is that this is when you have an implicit val that for whatever reason can be expanded in multiple ways. But I'm not sure if that's right, or if so, how to figure out what ways it thinks it can be expanded and why (ideally with line numbers oh god please).)</p>\n<p>Haaaaaaalp?</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 24650591,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "dsucher@gmail.com",
            "sender_full_name": "Danielle E. Sucher (W'12)",
            "sender_id": 879,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "\"diverging implicit expansion\" error",
            "submessages": [],
            "timestamp": 1405139227,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"dsucher@gmail.com\">@Danielle E. Sucher (W'12)</span> interesting, I've never encountered that before.</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 24739678,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "\"diverging implicit expansion\" error",
            "submessages": [],
            "timestamp": 1405348882,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"dcbfernandez@gmail.com\">@Denise Fernandez (S'14)</span> <span class=\"user-mention\" data-user-email=\"marisa.reddy@gmail.com\">@Marisa P. Reddy (S'14)</span> <span class=\"user-mention\" data-user-email=\"georgiknox@gmail.com\">@Georgi Knox (S'14)</span> <span class=\"user-mention\" data-user-email=\"pnf@podsnap.com\">@Peter Fraenkel (S'13)</span>, trying to remember who else I mentioned <span class=\"user-mention\" data-user-email=\"nada.amin@gmail.com\">@Nada Amin</span>'s work on DOT to: here's a video of her talk from Scala Days: <a href=\"http://www.parleys.com/play/53a7d2d0e4b0543940d9e569/chapter3/about\" target=\"_blank\" title=\"http://www.parleys.com/play/53a7d2d0e4b0543940d9e569/chapter3/about\">http://www.parleys.com/play/53a7d2d0e4b0543940d9e569/chapter3/about</a></p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 24740275,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "dot",
            "submessages": [],
            "timestamp": 1405349603,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4d622076b203a9421a6dd2127aff0ad3?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"dsucher@gmail.com\">@Danielle E. Sucher (W'12)</span> hmm, does running the code with the -Xlog-implicits arg give you any more helpful information? </p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 24740279,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "dcbfernandez@gmail.com",
            "sender_full_name": "Denise Fernandez (S1'14)",
            "sender_id": 5877,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "\"diverging implicit expansion\" error",
            "submessages": [],
            "timestamp": 1405349612,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p>The rest of the videos are here: <a href=\"http://www.parleys.com/channel/53a7d269e4b0543940d9e535/presentations?sort=date&amp;state=public\" target=\"_blank\" title=\"http://www.parleys.com/channel/53a7d269e4b0543940d9e535/presentations?sort=date&amp;state=public\">http://www.parleys.com/channel/53a7d269e4b0543940d9e535/presentations?sort=date&amp;state=public</a></p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 24740370,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "dot",
            "submessages": [],
            "timestamp": 1405349688,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/dc9f215c22985887d9929b85b02c49ef?d=identicon&version=1",
            "client": "website",
            "content": "<p>Reading part of the compiler over the weekend helped. ^^</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 24742864,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "dsucher@gmail.com",
            "sender_full_name": "Danielle E. Sucher (W'12)",
            "sender_id": 879,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "\"diverging implicit expansion\" error",
            "submessages": [],
            "timestamp": 1405352876,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"dsucher@gmail.com\">@Danielle E. Sucher (W'12)</span> not necessarily going to help with this problem, but I bet you'd enjoy the talk :) <a href=\"http://www.parleys.com/play/53a7d2d0e4b0543940d9e569/chapter0/about\" target=\"_blank\" title=\"http://www.parleys.com/play/53a7d2d0e4b0543940d9e569/chapter0/about\">http://www.parleys.com/play/53a7d2d0e4b0543940d9e569/chapter0/about</a></p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 24742973,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "\"diverging implicit expansion\" error",
            "submessages": [],
            "timestamp": 1405352989,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/d037119574d45efed8c1a23c7c321721?d=identicon&version=1",
            "client": "website",
            "content": "<p>I've posted to Google Forums for help, but I was hoping someone on channel might be able to help out with my understand why my scala code works in the REPL but fails with the jar file.  my original ask is here:  <a href=\"https://groups.google.com/forum/#!topic/algebird/z2eo4PDXMHY\" target=\"_blank\" title=\"https://groups.google.com/forum/#!topic/algebird/z2eo4PDXMHY\">https://groups.google.com/forum/#!topic/algebird/z2eo4PDXMHY</a></p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 25705200,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "ohprecio@gmail.com",
            "sender_full_name": "Vincent Ohprecio (F'12)",
            "sender_id": 901,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "Scala REPL vs jar vs yak shaving",
            "submessages": [],
            "timestamp": 1407050734,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/03b0888e9d8908ef656cd0831bedb1e9754c974d?x=x&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>It's a bit hard to say what's going on with your project setup, but basically your com.googlecode.javaewah.EWAHCompressedBitmap is not on your classpath. If sbt finds it, that means sbt is adding the jar that classfile is in to the classpath either explicitly or implicitly. If you do something like <code>scala -cp path/to/jar</code> you add that path to the classpath. I'd be happy to take a look if you post a github repo, but I'm camping right now and not online a ton. May be tomorrow before I can get to it.</p>\n<p>Also, your post says you're new to Scala, but I don't know what your level of experience with Java is. Classpath issues can be tricky until you get the hang of things; basically don't assume your code has access to a jarfile without wiring it in. You might find more resources on hooking things in by searching the ethernet for Java classpath issues.</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 25716859,
            "is_me_message": false,
            "last_edit_timestamp": 1407082483,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "andrea.fey@gmail.com",
            "sender_full_name": "Andrea Fey (W'14)",
            "sender_id": 5010,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "Scala REPL vs jar vs yak shaving",
            "submessages": [],
            "timestamp": 1407080811,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/d037119574d45efed8c1a23c7c321721?d=identicon&version=1",
            "client": "website",
            "content": "<p>Oscar Boykin from Twitter who was the one of the original authors of Algebird posted a reply too. Thanks Andrea for helping out...both explanations helped fill in the magic behind the scenes with SBT.  It looks like this issue was a classpath JVM issue on my side. I'm new to the Java world too, so its been interesting self learning.</p>\n<p>I really didn't understand some the magic happening behind the scenes with SBT. (I know a little more now).  I added the two jars into the same directory.  Entered the command:<code>scala -cp \"*.jar\"</code> and it all magically worked.  Now I'm happily creating test monoids and using the library for HLL, CMS, Bloom Filters and other commutative functions.</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 25731821,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "ohprecio@gmail.com",
            "sender_full_name": "Vincent Ohprecio (F'12)",
            "sender_id": 901,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "Scala REPL vs jar vs yak shaving",
            "submessages": [],
            "timestamp": 1407116439,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/c18f60acffcf8b205f8c940d50e4859d?d=identicon&version=1",
            "client": "desktop app Windows 0.4.4",
            "content": "<p>I'm trying to read <a href=\"http://days2012.scala-lang.org/sites/days2012/files/bjarnason_trampolines.pdf\" target=\"_blank\" title=\"http://days2012.scala-lang.org/sites/days2012/files/bjarnason_trampolines.pdf\">this paper</a>, and I need help understanding the scala code there. I tried looking at the scala chapter from \"7 languages in 7 weeks\", but it doesn't get to this stuff. If you could spend like 15 min with me going through code snippets from this paper, it'd be super helpful. Thanks!</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 27113084,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "lohmataja@gmail.com",
            "sender_full_name": "Liuda Nikolaeva (SP1'18)",
            "sender_id": 6168,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "help reading scala",
            "submessages": [],
            "timestamp": 1409673626,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"lohmataja@gmail.com\">@Liuda Nikolaeva (S'14)</span> yep, happy to.</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 27114231,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "help reading scala",
            "submessages": [],
            "timestamp": 1409675329,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"nemanja@alum.mit.edu\">@Nemanja Stanarevic (S'14)</span> ^</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 27114234,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "help reading scala",
            "submessages": [],
            "timestamp": 1409675336,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p>Whoa: <a href=\"http://typelevel.org/blog/2014/09/02/typelevel-scala.html\" target=\"_blank\" title=\"http://typelevel.org/blog/2014/09/02/typelevel-scala.html\">http://typelevel.org/blog/2014/09/02/typelevel-scala.html</a></p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 27114497,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "forking the compiler!",
            "submessages": [],
            "timestamp": 1409675721,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/f6bd929465d6d225def8062d5a9d3f3f?d=identicon&version=1",
            "client": "website",
            "content": "<p>I'm curious what their plan for maintaining merge compatibility is when scala changes underneath them. They have a section devoted to talking about that but it basically just says that they have lot of experience and know what they're doing.</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 27118790,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "danluu@gmail.com",
            "sender_full_name": "Dan Luu (W'13)",
            "sender_id": 820,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "forking the compiler!",
            "submessages": [],
            "timestamp": 1409681898,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/f6bd929465d6d225def8062d5a9d3f3f?d=identicon&version=1",
            "client": "website",
            "content": "<p>Maybe they'll just fix a target scala version indefinitely?</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 27118799,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "danluu@gmail.com",
            "sender_full_name": "Dan Luu (W'13)",
            "sender_id": 820,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "forking the compiler!",
            "submessages": [],
            "timestamp": 1409681921,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/c767a6cea809146d9c84fb1cb1da69a1bb3c8d61?x=x&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>Anyone going to this tonight? <a href=\"http://www.eventbrite.com/e/a-deep-dive-into-reactive-programming-nyt-scalaz-streams-netflix-tickets-12838216451\" target=\"_blank\" title=\"http://www.eventbrite.com/e/a-deep-dive-into-reactive-programming-nyt-scalaz-streams-netflix-tickets-12838216451\">http://www.eventbrite.com/e/a-deep-dive-into-reactive-programming-nyt-scalaz-streams-netflix-tickets-12838216451</a></p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 27508896,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "nemanja@alum.mit.edu",
            "sender_full_name": "Nemanja Stanarevic (F2'15)",
            "sender_id": 6170,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "Deep Dive into Reactive Programming (@NYT at 7pm tonight)",
            "submessages": [],
            "timestamp": 1410378829,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/0407b27b4a5fc39e68f1642e536daee6?d=identicon&version=3",
            "client": "website",
            "content": "<p>AUGH if I had caught this earlier ... DRAT.</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 27774639,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "alan.chusuei@gmail.com",
            "sender_full_name": "Alan Chusuei (he) (F1'14)",
            "sender_id": 6424,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "Deep Dive into Reactive Programming (@NYT at 7pm tonight)",
            "submessages": [],
            "timestamp": 1410879792,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/0407b27b4a5fc39e68f1642e536daee6?d=identicon&version=3",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"nemanja@alum.mit.edu\">@Nemanja Stanarevic (S'14)</span> would love to see the stuff you're working on. Could use a static language after all this js i've been working on for the past two week.</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 27774665,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "alan.chusuei@gmail.com",
            "sender_full_name": "Alan Chusuei (he) (F1'14)",
            "sender_id": 6424,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "Deep Dive into Reactive Programming (@NYT at 7pm tonight)",
            "submessages": [],
            "timestamp": 1410879832,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/0407b27b4a5fc39e68f1642e536daee6?d=identicon&version=3",
            "client": "website",
            "content": "<p>weeks*</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 27774667,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "alan.chusuei@gmail.com",
            "sender_full_name": "Alan Chusuei (he) (F1'14)",
            "sender_id": 6424,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "Deep Dive into Reactive Programming (@NYT at 7pm tonight)",
            "submessages": [],
            "timestamp": 1410879834,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/0407b27b4a5fc39e68f1642e536daee6?d=identicon&version=3",
            "client": "website",
            "content": "<p>There's a play meetup that I'm heading to next week, anyone interested in going? <span class=\"user-mention\" data-user-email=\"nemanja@alum.mit.edu\">@Nemanja Stanarevic (S'14)</span> <br>\n<a href=\"http://www.meetup.com/Play-NYC/events/205214542/?a=me1_grp&amp;rv=me1&amp;_af_eid=205214542&amp;_af=event\" target=\"_blank\" title=\"http://www.meetup.com/Play-NYC/events/205214542/?a=me1_grp&amp;rv=me1&amp;_af_eid=205214542&amp;_af=event\">http://www.meetup.com/Play-NYC/events/205214542/?a=me1_grp&amp;rv=me1&amp;_af_eid=205214542&amp;_af=event</a></p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 27963636,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "alan.chusuei@gmail.com",
            "sender_full_name": "Alan Chusuei (he) (F1'14)",
            "sender_id": 6424,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "Play meetup",
            "submessages": [],
            "timestamp": 1411181914,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/c767a6cea809146d9c84fb1cb1da69a1bb3c8d61?x=x&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p><span class=\"user-mention\" data-user-email=\"alan.chusuei@gmail.com\">@Alan Chusuei (F1'14)</span> Thanks for the heads up, just signed up</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 27978263,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "nemanja@alum.mit.edu",
            "sender_full_name": "Nemanja Stanarevic (F2'15)",
            "sender_id": 6170,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "Play meetup",
            "submessages": [],
            "timestamp": 1411215474,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/d037119574d45efed8c1a23c7c321721?d=identicon&version=1",
            "client": "website",
            "content": "<p>JS and Types in an IDE is exciting with ScalaJS <a href=\"http://t.co/Uz21SZyPGH\" target=\"_blank\" title=\"http://t.co/Uz21SZyPGH\">http://t.co/Uz21SZyPGH</a></p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 28151622,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "ohprecio@gmail.com",
            "sender_full_name": "Vincent Ohprecio (F'12)",
            "sender_id": 901,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "ScalaJS",
            "submessages": [],
            "timestamp": 1411544229,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/9b7fe7ecbea69ba0bf0166b2d8c21b5f?d=identicon&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>Hi all, does anyone know anything about <code>sbt</code> and its various options for parallelizing tests? I'm looking for help with parallelizing tests for an existing Scala open source project.</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 31752532,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "nicholas.chammas@gmail.com",
            "sender_full_name": "Nicholas Chammas (F2'14)",
            "sender_id": 6686,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "sbt parallelizing test suites",
            "submessages": [],
            "timestamp": 1417560373,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/556318094ee6dbabf9570403d54e02f3?d=identicon&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p><span class=\"user-mention\" data-user-email=\"lizabeth.kent@gmail.com\">@Elizabeth Kent (W1'14)</span> may know that</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 31753328,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "tacla.yamada@gmail.com",
            "sender_full_name": "Pedro Tacla Yamada (F2'14)",
            "sender_id": 6682,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "sbt parallelizing test suites",
            "submessages": [],
            "timestamp": 1417561484,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/9b7fe7ecbea69ba0bf0166b2d8c21b5f?d=identicon&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>Also pinging <span class=\"user-mention\" data-user-email=\"nada.amin@gmail.com\">@Nada Amin</span>.</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 31753408,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "nicholas.chammas@gmail.com",
            "sender_full_name": "Nicholas Chammas (F2'14)",
            "sender_id": 6686,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "sbt parallelizing test suites",
            "submessages": [],
            "timestamp": 1417561612,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/a897e9d6a0e8aff13a39e0515c38ee2d9482c809?x=x&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>Hi all. Anyone have any good recs for getting started in Scala? Right now, I'm working off Odersky's Coursera course on FP in Scala (<a href=\"https://class.coursera.org/progfun-005\" target=\"_blank\" title=\"https://class.coursera.org/progfun-005\">https://class.coursera.org/progfun-005</a>) and Odersky's * Programming in Scala (2e)*. These are working pretty well, but figure it never hurts to ask! Also interested in pairing on Scala stuff once I get the lay of the land! :)</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 31761479,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "guest.austin@gmail.com",
            "sender_full_name": "Austin Guest (they) (SP2'19)",
            "sender_id": 6930,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "n00b resources",
            "submessages": [],
            "timestamp": 1417574386,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/3109983fe5041b0465e8d43eb378b08c749b5bd8?x=x&version=1",
            "client": "website",
            "content": "<p>I wrote this for my students: <a href=\"http://matt.might.net/articles/learning-scala-in-small-bites/\" target=\"_blank\" title=\"http://matt.might.net/articles/learning-scala-in-small-bites/\">http://matt.might.net/articles/learning-scala-in-small-bites/</a></p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 31761884,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "might@cs.utah.edu",
            "sender_full_name": "Matt Might",
            "sender_id": 6964,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "n00b resources",
            "submessages": [],
            "timestamp": 1417575151,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/a897e9d6a0e8aff13a39e0515c38ee2d9482c809?x=x&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>super helpful! thanks <span class=\"user-mention\" data-user-email=\"might@cs.utah.edu\">@Matt Might</span> </p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 31767292,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "guest.austin@gmail.com",
            "sender_full_name": "Austin Guest (they) (SP2'19)",
            "sender_id": 6930,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "n00b resources",
            "submessages": [],
            "timestamp": 1417585353,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/d495685876a5a195b6ef5fb9a269b6d0dcd5c5fe?x=x&version=1",
            "client": "website",
            "content": "<p>I wrote this  post on a few things I wish I'd been told earlier in the scala learning process: <a href=\"http://blog.podsnap.com/scala-conspiracy.html\" target=\"_blank\" title=\"http://blog.podsnap.com/scala-conspiracy.html\">http://blog.podsnap.com/scala-conspiracy.html</a></p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 31793585,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "pnf@podsnap.com",
            "sender_full_name": "Peter Fraenkel (he) (S'13)",
            "sender_id": 2142,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "n00b resources",
            "submessages": [],
            "timestamp": 1417632431,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/d495685876a5a195b6ef5fb9a269b6d0dcd5c5fe?x=x&version=1",
            "client": "website",
            "content": "<p>(I don't actually think there's a conspiracy.  At least one person took that part seriously.)</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 31793674,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "pnf@podsnap.com",
            "sender_full_name": "Peter Fraenkel (he) (S'13)",
            "sender_id": 2142,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "n00b resources",
            "submessages": [],
            "timestamp": 1417632552,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/9b7fe7ecbea69ba0bf0166b2d8c21b5f?d=identicon&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>To elaborate a bit on what I'm doing, I'm looking at <a href=\"https://github.com/apache/spark/blob/a975dc32799bb8a14f9e1c76defaaa7cfbaf8b53/project/SparkBuild.scala#L376-L420\" target=\"_blank\" title=\"https://github.com/apache/spark/blob/a975dc32799bb8a14f9e1c76defaaa7cfbaf8b53/project/SparkBuild.scala#L376-L420\">this block of code</a> and trying to understand the basics of how it works. It somehow defines how the unit tests for the Apache Spark project should be executed. If someone has the time to give a brief and high level overview of what this code does, I'd really appreciate it!</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 31795973,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "nicholas.chammas@gmail.com",
            "sender_full_name": "Nicholas Chammas (F2'14)",
            "sender_id": 6686,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "sbt parallelizing test suites",
            "submessages": [],
            "timestamp": 1417635501,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/9b7fe7ecbea69ba0bf0166b2d8c21b5f?d=identicon&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p><a href=\"https://databricks.com/blog/2014/06/02/exciting-performance-improvements-on-the-horizon-for-spark-sql.html\" target=\"_blank\" title=\"https://databricks.com/blog/2014/06/02/exciting-performance-improvements-on-the-horizon-for-spark-sql.html\">https://databricks.com/blog/2014/06/02/exciting-performance-improvements-on-the-horizon-for-spark-sql.html</a></p>\n<p><span class=\"user-mention\" data-user-email=\"lizabeth.kent@gmail.com\">@Elizabeth Kent (W1'14)</span> <span class=\"user-mention\" data-user-email=\"might@cs.utah.edu\">@Matt Might</span> <span class=\"user-mention\" data-user-email=\"fernando.neto@gmail.com\">@Fernando a Cunha Andrade Neto (W1'14)</span> This is the link I mentioned to y'all yesterday.</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 31853914,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "nicholas.chammas@gmail.com",
            "sender_full_name": "Nicholas Chammas (F2'14)",
            "sender_id": 6686,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "Runtime Reflection",
            "submessages": [],
            "timestamp": 1417729028,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/2249c2fb0fe071d1199464fd91ac8627?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"nicholas.chammas@gmail.com\">@Nicholas Chammas (F2'14)</span> Thanks! And now I'm subscribed to this stream :) </p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 31859734,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "lizabeth.kent@gmail.com",
            "sender_full_name": "Libby Kent (W1'14)",
            "sender_id": 6926,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "Runtime Reflection",
            "submessages": [],
            "timestamp": 1417736089,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"lizabeth.kent@gmail.com\">@Elizabeth Kent (W1'14)</span> do you use IntelliJ?</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 32412965,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "intellij",
            "submessages": [],
            "timestamp": 1418759634,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p>Does anyone know how to get IntelliJ to tell me the type of a method?</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 32413014,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "intellij",
            "submessages": [],
            "timestamp": 1418759657,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p>I can highlight an expression and press Shift-Ctrl-P and see the type, but I also want the type of a method call within an expression.</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 32413030,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "intellij",
            "submessages": [],
            "timestamp": 1418759686,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p>Eclipse just lets you mouse over stuff.</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 32413036,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "intellij",
            "submessages": [],
            "timestamp": 1418759696,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/48e493d515af67a1512d977689cd051b?d=identicon&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>Ctrl-J?</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 32413237,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "outofthemadness@gmail.com",
            "sender_full_name": "James A. Keene (he) (m2'18)",
            "sender_id": 887,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "intellij",
            "submessages": [],
            "timestamp": 1418759967,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/48e493d515af67a1512d977689cd051b?d=identicon&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>or Alt-=</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 32413248,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "outofthemadness@gmail.com",
            "sender_full_name": "James A. Keene (he) (m2'18)",
            "sender_id": 887,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "intellij",
            "submessages": [],
            "timestamp": 1418759983,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/48e493d515af67a1512d977689cd051b?d=identicon&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>if neither of those, I have no idea</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 32413252,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "outofthemadness@gmail.com",
            "sender_full_name": "James A. Keene (he) (m2'18)",
            "sender_id": 887,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "intellij",
            "submessages": [],
            "timestamp": 1418759995,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/48e493d515af67a1512d977689cd051b?d=identicon&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p><span class=\"user-mention\" data-user-email=\"alan@hackerschool.com\">@Alan O'Donnell</span> </p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 32413298,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "outofthemadness@gmail.com",
            "sender_full_name": "James A. Keene (he) (m2'18)",
            "sender_id": 887,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "intellij",
            "submessages": [],
            "timestamp": 1418760014,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"outofthemadness@gmail.com\">@James A. Keene (W1'14)</span> are you on a mac? Alt-= seems to make a \u00b1 sign :)</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 32413321,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "intellij",
            "submessages": [],
            "timestamp": 1418760057,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/48e493d515af67a1512d977689cd051b?d=identicon&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>I am, I just couldn't remember if you were too</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 32413339,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "outofthemadness@gmail.com",
            "sender_full_name": "James A. Keene (he) (m2'18)",
            "sender_id": 887,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "intellij",
            "submessages": [],
            "timestamp": 1418760081,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/48e493d515af67a1512d977689cd051b?d=identicon&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>wait, maybe I meant Cmd-=</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 32413357,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "outofthemadness@gmail.com",
            "sender_full_name": "James A. Keene (he) (m2'18)",
            "sender_id": 887,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "intellij",
            "submessages": [],
            "timestamp": 1418760113,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p>Seems like only Shift-Ctrl-P gives me any types (but I have to highlight an entire expression).</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 32413431,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "intellij",
            "submessages": [],
            "timestamp": 1418760196,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/d495685876a5a195b6ef5fb9a269b6d0dcd5c5fe?x=x&version=1",
            "client": "website",
            "content": "<p>Are there compelling advantages to IntelliJ over Eclipse for Scala?   Every time I try IntelliJ out, I spend a long time trying to get something along these lines to work before going back to Eclipse.  But I feel I might be missing something great.</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 32413434,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "pnf@podsnap.com",
            "sender_full_name": "Peter Fraenkel (he) (S'13)",
            "sender_id": 2142,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "intellij",
            "submessages": [],
            "timestamp": 1418760205,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"pnf@podsnap.com\">@Peter Fraenkel (S'13)</span> people kept saying IntelliJ was so good, but this was my favorite part of Scala in Eclipse :(</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 32413445,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "intellij",
            "submessages": [],
            "timestamp": 1418760230,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/2249c2fb0fe071d1199464fd91ac8627?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"alan@hackerschool.com\">@Alan O'Donnell</span>  cmd and mouse over? </p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 32413524,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "lizabeth.kent@gmail.com",
            "sender_full_name": "Libby Kent (W1'14)",
            "sender_id": 6926,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "intellij",
            "submessages": [],
            "timestamp": 1418760309,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"lizabeth.kent@gmail.com\">@Elizabeth Kent (W1'14)</span> yay :)</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 32413535,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "intellij",
            "submessages": [],
            "timestamp": 1418760329,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/2249c2fb0fe071d1199464fd91ac8627?d=identicon&version=1",
            "client": "website",
            "content": "<p>=)</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 32413619,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "lizabeth.kent@gmail.com",
            "sender_full_name": "Libby Kent (W1'14)",
            "sender_id": 6926,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "intellij",
            "submessages": [],
            "timestamp": 1418760421,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p>Can it tell me about implicits too?</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 32413717,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "intellij",
            "submessages": [],
            "timestamp": 1418760533,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p>Looks like you can put your mouse cursor where you think the implicit param is and press Cmd-Shift-P. Cool.</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 32414109,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "intellij",
            "submessages": [],
            "timestamp": 1418761060,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/2249c2fb0fe071d1199464fd91ac8627?d=identicon&version=1",
            "client": "website",
            "content": "<p>What about implicits? Like if your function takes implicits? what implicits are in scope? not sure how good the support is for implicits</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 32414113,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "lizabeth.kent@gmail.com",
            "sender_full_name": "Libby Kent (W1'14)",
            "sender_id": 6926,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "intellij",
            "submessages": [],
            "timestamp": 1418761062,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p>Yeah, I wanted to be able to hop to the implicit that's in scope. You can do that with Cmd-Shift-P.</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 32414165,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "intellij",
            "submessages": [],
            "timestamp": 1418761097,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p>I was hoping Cmd + Mouse would let me do the same thing, but oh well.</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 32414173,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "intellij",
            "submessages": [],
            "timestamp": 1418761114,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/2249c2fb0fe071d1199464fd91ac8627?d=identicon&version=1",
            "client": "website",
            "content": "<p>cool =)</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 32414275,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "lizabeth.kent@gmail.com",
            "sender_full_name": "Libby Kent (W1'14)",
            "sender_id": 6926,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "intellij",
            "submessages": [],
            "timestamp": 1418761263,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/dc9f215c22985887d9929b85b02c49ef?d=identicon&version=1",
            "client": "website",
            "content": "<p>I'm just getting started with intellij for scala recently, too. What are folks' favorite most useful tips with it so far?</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 32454115,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "dsucher@gmail.com",
            "sender_full_name": "Danielle E. Sucher (W'12)",
            "sender_id": 879,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "intellij",
            "submessages": [],
            "timestamp": 1418832165,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/a604f6425b41d724539755eb2c457f29536f16d9?x=x&version=2",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"liz.starin@gmail.com\">@Liz Starin (F2'14)</span> might have some tips for this as well... ^</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 32472062,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "sonali@recurse.com",
            "sender_full_name": "Sonali Sridhar",
            "sender_id": 812,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "intellij",
            "submessages": [],
            "timestamp": 1418854049,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/1cc017d4a92cb2d7fad4025f654ed396?d=identicon&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>Keyboard shortcuts! OMG, the keyboard shortcuts. And the debugging tools. And the refactoring tools.</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 32472111,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "liz.starin@gmail.com",
            "sender_full_name": "Liz Starin (SP1'16)",
            "sender_id": 6673,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "intellij",
            "submessages": [],
            "timestamp": 1418854096,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/1cc017d4a92cb2d7fad4025f654ed396?d=identicon&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>Oh, also: we used to call it Intelligent J at Amplify, as a joke.</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 32472131,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "liz.starin@gmail.com",
            "sender_full_name": "Liz Starin (SP1'16)",
            "sender_id": 6673,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "intellij",
            "submessages": [],
            "timestamp": 1418854157,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/1cc017d4a92cb2d7fad4025f654ed396?d=identicon&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>(There was a song...)</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 32472136,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "liz.starin@gmail.com",
            "sender_full_name": "Liz Starin (SP1'16)",
            "sender_id": 6673,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "intellij",
            "submessages": [],
            "timestamp": 1418854171,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/dc0740096986096748221be2e7b3a8d3?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"liz.starin@gmail.com\">@Liz Starin (F2'14)</span> I feel that if you say there was a song about IntelliJ, you've de facto signed up for a Thu night presentation...</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 32472270,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "mail@greghendershott.com",
            "sender_full_name": "Greg Hendershott (he) (F2'14)",
            "sender_id": 6678,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "intellij",
            "submessages": [],
            "timestamp": 1418854365,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/1cc017d4a92cb2d7fad4025f654ed396?d=identicon&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>I think <span class=\"user-mention\" data-user-email=\"harrington.richard@gmail.com\">@Richard Harrington (S'13)</span> should come in and give a guest presentation.</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 32472292,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "liz.starin@gmail.com",
            "sender_full_name": "Liz Starin (SP1'16)",
            "sender_id": 6673,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "intellij",
            "submessages": [],
            "timestamp": 1418854400,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/b9cde908e7fad091591e1063c830b9be?d=identicon&version=1",
            "client": "website",
            "content": "<p>INTELLIGENT J, INTELLIGENT J, HOW MANY KIDS DID YOU KILL TODAY? </p>\n<p>That line was actually Liz's. I can't remember any of the other verses, except one I wrote that I kind of imagined as an interjection in the voice of the Fresh Prince: \"Intellijent J, how did you do that?\" I was coming from JavaScript and Sublime and was quite impressed by the magical refactoring tools.</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 32499341,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "harrington.richard@gmail.com",
            "sender_full_name": "Richard Harrington (S'13)",
            "sender_id": 2162,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "intellij",
            "submessages": [],
            "timestamp": 1418908093,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p>Wow. It sounds like IntelliJ uses their own custom typechecker, not the real Scala presentation compiler, and they're not quite equivalent.</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 32867334,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "intellij",
            "submessages": [],
            "timestamp": 1419707907,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p>I feel like I'm stuck in an uncanny tooling valley: everything is so tantalizingly close to being super awesome, so every wtf is that much more painful.</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 32867341,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "intellij",
            "submessages": [],
            "timestamp": 1419707950,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p>At least with a crappy \"Vim + hop into sbt to compile stuff\" workflow you don't get your hopes up :/</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 32867389,
            "is_me_message": false,
            "last_edit_timestamp": 1419708029,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "intellij",
            "submessages": [],
            "timestamp": 1419708019,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/d495685876a5a195b6ef5fb9a269b6d0dcd5c5fe?x=x&version=1",
            "client": "website",
            "content": "<p>The custom type checker explains a lot.  I gave up on IJ after during some ridiculous adventure with nested types when it mysteriously approved of code that would later produce compiler errors.  Eclipse worked though.</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 32932746,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "pnf@podsnap.com",
            "sender_full_name": "Peter Fraenkel (he) (S'13)",
            "sender_id": 2142,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "intellij",
            "submessages": [],
            "timestamp": 1419864146,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/0407b27b4a5fc39e68f1642e536daee6?d=identicon&version=3",
            "client": "website",
            "content": "<p>Thought this was really useful, been guilty of this a lot: <a href=\"http://blog.originate.com/blog/2014/06/15/idiomatic-scala-your-options-do-not-match/\" target=\"_blank\" title=\"http://blog.originate.com/blog/2014/06/15/idiomatic-scala-your-options-do-not-match/\">http://blog.originate.com/blog/2014/06/15/idiomatic-scala-your-options-do-not-match/</a></p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 32936186,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "alan.chusuei@gmail.com",
            "sender_full_name": "Alan Chusuei (he) (F1'14)",
            "sender_id": 6424,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "Decomposition Option",
            "submessages": [],
            "timestamp": 1419871354,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p>I think he makes some good points, but argues a little past the point of defensibility. For example, his opening analogy between <code>if p return true else return false</code> and naked pattern matching on <code>Option</code>s doesn't make sense to me; the right analogy would be in terms of code like <code>if p return something else return somethingElse</code>.</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 32936393,
            "is_me_message": false,
            "last_edit_timestamp": 1419871781,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "Decomposition Option",
            "submessages": [],
            "timestamp": 1419871766,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p>I wonder if he thinks you should replace all conditionals with higher-order functions on Booleans?</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 32936434,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "Decomposition Option",
            "submessages": [],
            "timestamp": 1419871809,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p>Which you could totally do, by the way, but I think it would be overkill :)</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 32936462,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "Decomposition Option",
            "submessages": [],
            "timestamp": 1419871916,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/f6bd929465d6d225def8062d5a9d3f3f?d=identicon&version=1",
            "client": "website",
            "content": "<p>I haven't done scala for a while (maybe 1.5 years?), but his \"better\" examples strike me as more concise but otherwise not really better for experienced scala people, while being more obscure and harder to understand for beginners. I understand that some people like that tradeoff and prefer code that's full of opaque sigils like $ and whatnot, but I can't say I'm a fan of that.</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 32936566,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "danluu@gmail.com",
            "sender_full_name": "Dan Luu (W'13)",
            "sender_id": 820,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "Decomposition Option",
            "submessages": [],
            "timestamp": 1419872107,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/f6bd929465d6d225def8062d5a9d3f3f?d=identicon&version=1",
            "client": "website",
            "content": "<p>I mean, ok, yeah, that thing where if replaces a conditional with map makes sense. And I even use getOrElse all over because it's idiomatic, but I don't think it's actually better. Replacing 2 lines with 1 isn't something I'm really concerned about, but making sure that people can understand what I'm writing is something I'm concerned about.</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 32936676,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "danluu@gmail.com",
            "sender_full_name": "Dan Luu (W'13)",
            "sender_id": 820,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "Decomposition Option",
            "submessages": [],
            "timestamp": 1419872300,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/f6bd929465d6d225def8062d5a9d3f3f?d=identicon&version=1",
            "client": "website",
            "content": "<p>I guess what I'm saying is that there's an advantage to cultivating simple idioms, like Python does. I don't know Python, but I've successfully edited Python code to add features without blowing things up. I think that's much harder to do with idiomatic scala code.</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 32936748,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "danluu@gmail.com",
            "sender_full_name": "Dan Luu (W'13)",
            "sender_id": 820,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "Decomposition Option",
            "submessages": [],
            "timestamp": 1419872458,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/0407b27b4a5fc39e68f1642e536daee6?d=identicon&version=3",
            "client": "website",
            "content": "<p>I think the hard part about this is when an option is considered more of a monad than a wrapper over a null case? It's just that in my last job I was writing so many case statements (which should have been a code smell for me =P~~) but I thought they were necessary. </p>\n<p>I do agree with you that he might be going overboard with some of his examples.</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 32938108,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "alan.chusuei@gmail.com",
            "sender_full_name": "Alan Chusuei (he) (F1'14)",
            "sender_id": 6424,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "(no topic)",
            "submessages": [],
            "timestamp": 1419874945,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/d495685876a5a195b6ef5fb9a269b6d0dcd5c5fe?x=x&version=1",
            "client": "website",
            "content": "<p>To be fair, he's just riding the Scaladoc quote to its logical destination, so it's not entirely his fault, but use of the word \"idiomatic\" makes the argument not just dubious but objectively wrong.   It's not idiomatic unless most people are doing it.</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 32978857,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "pnf@podsnap.com",
            "sender_full_name": "Peter Fraenkel (he) (S'13)",
            "sender_id": 2142,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "Decomposition Option",
            "submessages": [],
            "timestamp": 1419955477,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/0407b27b4a5fc39e68f1642e536daee6?d=identicon&version=3",
            "client": "website",
            "content": "<p>Out of curiosity, is the meaning of \"idiomatic\" somewhat similar to \"canonical\"? I've heard both used, I'm not sure if those two are interchangeable? Especially in Scala coming from the Java world, I'm wondering if idiomatic/canonical even exists, since there's so many ways to do one task in Scala.</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 32983512,
            "is_me_message": false,
            "last_edit_timestamp": 1419963013,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "alan.chusuei@gmail.com",
            "sender_full_name": "Alan Chusuei (he) (F1'14)",
            "sender_id": 6424,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "Decomposition Option",
            "submessages": [],
            "timestamp": 1419962978,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/d495685876a5a195b6ef5fb9a269b6d0dcd5c5fe?x=x&version=1",
            "client": "website",
            "content": "<p>I think of an idiom as something that people have come to do, say or write frequently, but that doesn't follow inexorably from the linguistic or legal system in which it's embedded.  A canon is a rule, based in the authority or a person or institution.    So, driving on the left side of the road is canonical in these parts but doing so while belting out Bohemian Rhapsody is only an idiom.  Saying \"in these parts\" is idiomatic, but \"ten items or fewer\" is canonical.  Since <code>opt.fold(bar)(foo)</code> is said to follow from the wisdom of the Scalascrolls, it holds a certain canonical authority, but, if you look at code, it becomes pretty obvious that</p>\n<div class=\"codehilite\"><pre><span class=\"n\">opt</span> <span class=\"k\">match</span> <span class=\"o\">{</span>\n  <span class=\"k\">case</span> <span class=\"nc\">Some</span><span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"k\">=&gt;</span> <span class=\"n\">foo</span><span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">)</span>\n  <span class=\"k\">case</span> <span class=\"nc\">None</span> <span class=\"k\">=&gt;</span> <span class=\"n\">bar</span>\n<span class=\"o\">}</span>\n</pre></div>\n\n\n<p>is a popular idiom.</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 32992682,
            "is_me_message": false,
            "last_edit_timestamp": 1419980925,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "pnf@podsnap.com",
            "sender_full_name": "Peter Fraenkel (he) (S'13)",
            "sender_id": 2142,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "(no topic)",
            "submessages": [],
            "timestamp": 1419977807,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/0407b27b4a5fc39e68f1642e536daee6?d=identicon&version=3",
            "client": "website",
            "content": "<p>Cool that helps thanks! ^_^</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 33033431,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "alan.chusuei@gmail.com",
            "sender_full_name": "Alan Chusuei (he) (F1'14)",
            "sender_id": 6424,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "(no topic)",
            "submessages": [],
            "timestamp": 1420059308,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/a897e9d6a0e8aff13a39e0515c38ee2d9482c809?x=x&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>hi all. due to insurmountable tooling woes, i've finally given up the ghost on an ill-fated effort to write an android app in scala, but have really love the two weeks i spent getting to know the language and don't want to give up on learning it! does anyone have any suggestions for a fun project for an intermediate programmer looking to stretch themselves to work on to feel their way around the language? something that shows off its functional aspects -- immutable data structures and/or working with distributed systems -- would be of particular interest. i'm interested in mesh networks and network protocols generally. (and yes: i'm aware -- i could write a bittorrent client! :P)</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 33251624,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "guest.austin@gmail.com",
            "sender_full_name": "Austin Guest (they) (SP2'19)",
            "sender_id": 6930,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "fun learn-scala project?",
            "submessages": [],
            "timestamp": 1420522405,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/a897e9d6a0e8aff13a39e0515c38ee2d9482c809?x=x&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>okay: so gonna just bite the bullet and make a bit torrent client. there's a study group working through it right now in lots of different languages. i'm the only scala person. anyone wanna be my scala buddy?</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 33281452,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "guest.austin@gmail.com",
            "sender_full_name": "Austin Guest (they) (SP2'19)",
            "sender_id": 6930,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "fun learn-scala project?",
            "submessages": [],
            "timestamp": 1420575173,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/dc9f215c22985887d9929b85b02c49ef?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"guest.austin@gmail.com\">@Austin Guest (W1'14)</span> Haha, can I tweet this? \"OH 'okay: so gonna just bite the bullet and make a bit torrent client'\" (Also hihihi, I'm an alum and can't be your buddy but I'm working with scala nowadays and am happy to help any way I can from afar, yay yay do it!)</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 33605944,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "dsucher@gmail.com",
            "sender_full_name": "Danielle E. Sucher (W'12)",
            "sender_id": 879,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "fun learn-scala project?",
            "submessages": [],
            "timestamp": 1421162832,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/a897e9d6a0e8aff13a39e0515c38ee2d9482c809?x=x&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p><span class=\"user-mention\" data-user-email=\"dsucher@gmail.com\">@Danielle E. Sucher (W'12)</span> tweet away! (only in hacker school, right? i'm frustrated so... the easy thing? bittorrent client! ;)) and a remote buddy would be lovely! :) <br>\ncurrent progress: just finished writing the bencoder (in pure FP style using algebraic data types  -- huzzah!), just did a deep dive on how exactly bytes work, and am hunting around for a good solution to implement non-blocking IO in scala. (i need to do non-blocking io to handle concurrency when talking to lots of peers over sockets at the same time.)  so far the most appealing solution seems to involve using actors in akka (which also has built-in methods for sockets and http requests). <br>\nbut akka seems like a big beast that scares me a bit (particularly after tooling battles of yore). any suggestions on feeling my way into akka without getting sidetracked or alternate solutions for non-blocking io over sockets? <br>\nps: here's my bencoder as it currently stands: <a href=\"https://github.com/aguestuser/supreme_clientelle/blob/master/src/main/scala/supreme_clientelle/BCodr.scala\" target=\"_blank\" title=\"https://github.com/aguestuser/supreme_clientelle/blob/master/src/main/scala/supreme_clientelle/BCodr.scala\">https://github.com/aguestuser/supreme_clientelle/blob/master/src/main/scala/supreme_clientelle/BCodr.scala</a>  </p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 33612708,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "guest.austin@gmail.com",
            "sender_full_name": "Austin Guest (they) (SP2'19)",
            "sender_id": 6930,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "fun learn-scala project?",
            "submessages": [],
            "timestamp": 1421170357,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/dc9f215c22985887d9929b85b02c49ef?d=identicon&version=1",
            "client": "website",
            "content": "<p>I confess, I've never tried akka, sorry!</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 33614198,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "dsucher@gmail.com",
            "sender_full_name": "Danielle E. Sucher (W'12)",
            "sender_id": 879,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "fun learn-scala project?",
            "submessages": [],
            "timestamp": 1421172209,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/a897e9d6a0e8aff13a39e0515c38ee2d9482c809?x=x&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p><span class=\"user-mention\" data-user-email=\"dsucher@gmail.com\">@Danielle E. Sucher (W'12)</span> clue that i might not want to? other ways to do non-blocking io and/or concurrency? also: happy to dump anything i learn about akka back into this thread... :)</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 33615830,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "guest.austin@gmail.com",
            "sender_full_name": "Austin Guest (they) (SP2'19)",
            "sender_id": 6930,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "fun learn-scala project?",
            "submessages": [],
            "timestamp": 1421174189,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/d495685876a5a195b6ef5fb9a269b6d0dcd5c5fe?x=x&version=1",
            "client": "website",
            "content": "<p>In my sort of prejudiced opinion, Akka wouldn't be a great place to start for a Scala-learning project, because so much of what you get out of it will be specific to the Akka library. I would start with normal <code>Promises</code>/<code>Futures</code> and <code>map</code>, because that's the purest Scala experience.   If you want to add something new and shiny, you might take a look at <code>async</code>/<code>await</code>, which makes futures code a little more readable and is as of 2.11 part of core Scala.</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 33625896,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "pnf@podsnap.com",
            "sender_full_name": "Peter Fraenkel (he) (S'13)",
            "sender_id": 2142,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "fun learn-scala project?",
            "submessages": [],
            "timestamp": 1421184384,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/a897e9d6a0e8aff13a39e0515c38ee2d9482c809?x=x&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p><span class=\"user-mention\" data-user-email=\"pnf@podsnap.com\">@Peter Fraenkel (S'13)</span> thanks! that squares with my intution: it would be nice to learn scala (like anything) without too much framework/library magic at first -- particularly since im' at a place (HS) that's optimized for that. if not using Akka for non-blocking io, then i have to also find something to handle http requests and sockets. i see couple random libraries out there, but nothing native to the core Scala library. should i just take a first stab with the java classes for these purposes? (that's what i did for SHA-1 hashing and it turned out to work just fine...) or something else?</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 33630415,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "guest.austin@gmail.com",
            "sender_full_name": "Austin Guest (they) (SP2'19)",
            "sender_id": 6930,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "fun learn-scala project?",
            "submessages": [],
            "timestamp": 1421189289,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"pnf@podsnap.com\">@Peter Fraenkel (S'13)</span> yeah, what's the simplest way to get started with basic networking in Scala?</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 33664437,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "fun learn-scala project?",
            "submessages": [],
            "timestamp": 1421250085,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p>I've been looking at scalaz-stream, and it looks like they'll eventually have nice ways to interact with nio.</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 33664451,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "fun learn-scala project?",
            "submessages": [],
            "timestamp": 1421250118,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/d495685876a5a195b6ef5fb9a269b6d0dcd5c5fe?x=x&version=1",
            "client": "website",
            "content": "<p>Sadly, the answer is that you're getting started with basic networking in Java.  At this point, I'd probably do it with the non-blocking <code>java.nio</code> classes, though (caveat emptor) I haven't actually done it!  There's a fair amount of googleable experience combining it with scala.<br>\nTBH,  I'm surprised that there isn't a Scala wrapper more lightweight (and less opinionated) than Akka.  Maybe producing one should be a side effect of the project!</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 33666219,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "pnf@podsnap.com",
            "sender_full_name": "Peter Fraenkel (he) (S'13)",
            "sender_id": 2142,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "fun learn-scala project?",
            "submessages": [],
            "timestamp": 1421252610,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/d495685876a5a195b6ef5fb9a269b6d0dcd5c5fe?x=x&version=1",
            "client": "website",
            "content": "<p>I should admit that I have a slightly irrational antipathy towards Akka and the actor model, so my advice might be skewed.  I really don't like the <code>var</code> that every actor has up top.</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 33666511,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "pnf@podsnap.com",
            "sender_full_name": "Peter Fraenkel (he) (S'13)",
            "sender_id": 2142,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "fun learn-scala project?",
            "submessages": [],
            "timestamp": 1421253040,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/a897e9d6a0e8aff13a39e0515c38ee2d9482c809?x=x&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>thanks peter! trying to run a small test comparing the experience of doing a tutorial on futures (<a href=\"http://docs.scala-lang.org/overviews/core/futures.html\" target=\"_blank\" title=\"http://docs.scala-lang.org/overviews/core/futures.html\">http://docs.scala-lang.org/overviews/core/futures.html</a>) to one on akka actors (<a href=\"http://doc.akka.io/docs/akka/2.0.2/intro/getting-started-first-scala.html\" target=\"_blank\" title=\"http://doc.akka.io/docs/akka/2.0.2/intro/getting-started-first-scala.html\">http://doc.akka.io/docs/akka/2.0.2/intro/getting-started-first-scala.html</a>). then based on that, make a new hypothesis about whether it seems more expedient to implement the sockets piece of the bitttorrent client via futures+java.nio or actors+akka. <br>\n(as a side note, the first step of setting up this experiment was learning that scala's native actors library is deprecated in favor of akka's. see: <a href=\"http://docs.scala-lang.org/overviews/core/actors-migration-guide.html\" target=\"_blank\" title=\"http://docs.scala-lang.org/overviews/core/actors-migration-guide.html\">http://docs.scala-lang.org/overviews/core/actors-migration-guide.html</a>. wierd!)<br>\nwill let folks know how it goes! (and pointers to better ways in than these tutorials welcome!) :)</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 33671349,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "guest.austin@gmail.com",
            "sender_full_name": "Austin Guest (they) (SP2'19)",
            "sender_id": 6930,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "fun learn-scala project?",
            "submessages": [],
            "timestamp": 1421258338,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/d495685876a5a195b6ef5fb9a269b6d0dcd5c5fe?x=x&version=1",
            "client": "website",
            "content": "<p>You should also look at async.  It's essentially a way of dealing with futures without having to think about them being monads with <code>map</code> and <code>flatMap</code>.   The original <a href=\"https://github.com/scala/async\" target=\"_blank\" title=\"https://github.com/scala/async\">github project</a> has a good README, but the extension is now built into 2.11.</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 33686695,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "pnf@podsnap.com",
            "sender_full_name": "Peter Fraenkel (he) (S'13)",
            "sender_id": 2142,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "fun learn-scala project?",
            "submessages": [],
            "timestamp": 1421276637,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/d495685876a5a195b6ef5fb9a269b6d0dcd5c5fe?x=x&version=1",
            "client": "ZulipiOS",
            "content": "<p>Anyone here ever use <a href=\"https://github.com/rssh/scala-gopher/blob/master/README.md\" target=\"_blank\" title=\"https://github.com/rssh/scala-gopher/blob/master/README.md\">https://github.com/rssh/scala-gopher/blob/master/README.md</a> ?</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 33736540,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "pnf@podsnap.com",
            "sender_full_name": "Peter Fraenkel (he) (S'13)",
            "sender_id": 2142,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "Gopher",
            "submessages": [],
            "timestamp": 1421358921,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/a897e9d6a0e8aff13a39e0515c38ee2d9482c809?x=x&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p><span class=\"user-mention\" data-user-email=\"pnf@podsnap.com\">@Peter Fraenkel (S'13)</span> cool! checking it out. while i'm brain-picking, was curious if you had opinions on what tools to use for HTTP requests. i'm leaning toward a library called Dispatch (<a href=\"http://dispatch.databinder.net/Dispatch.html\" target=\"_blank\" title=\"http://dispatch.databinder.net/Dispatch.html\">http://dispatch.databinder.net/Dispatch.html</a>), which has the pros of  seeming pretty lightweight and being asyncronous. the alternative seems to be to use java.net.URLConnection library (<a href=\"http://stackoverflow.com/questions/2793150/using-java-net-urlconnection-to-fire-and-handle-http-requests\" target=\"_blank\" title=\"http://stackoverflow.com/questions/2793150/using-java-net-urlconnection-to-fire-and-handle-http-requests\">http://stackoverflow.com/questions/2793150/using-java-net-urlconnection-to-fire-and-handle-http-requests</a>), which seems a bit hairy. thoughts?</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 33776734,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "guest.austin@gmail.com",
            "sender_full_name": "Austin Guest (they) (SP2'19)",
            "sender_id": 6930,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "fun learn-scala project?",
            "submessages": [],
            "timestamp": 1421431423,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/d495685876a5a195b6ef5fb9a269b6d0dcd5c5fe?x=x&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"guest.austin@gmail.com\">@Austin Guest (W1'14)</span> I'd use Dispatch, but - and this will require some equivocation, so bear with me - I'd consider Akka too.  The argument is that HTTP requests in most languages require an external library of some sort, and Akka is pretty well accepted for these purposes and fairly vanilla Scala.  I still wouldn't use the Akka actor library, unless I specifically wanted to learn about that.</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 33857940,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "pnf@podsnap.com",
            "sender_full_name": "Peter Fraenkel (he) (S'13)",
            "sender_id": 2142,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "fun learn-scala project?",
            "submessages": [],
            "timestamp": 1421599978,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p>This is a super charming talk on ScalaJS: <a href=\"https://www.youtube.com/watch?v=Ksoi6AG9nbA\" target=\"_blank\" title=\"https://www.youtube.com/watch?v=Ksoi6AG9nbA\">https://www.youtube.com/watch?v=Ksoi6AG9nbA</a></p>\n<div class=\"message_inline_image\"><a href=\"https://www.youtube.com/watch?v=Ksoi6AG9nbA\" target=\"_blank\" title=\"https://www.youtube.com/watch?v=Ksoi6AG9nbA\"><img src=\"https://i.ytimg.com/vi/Ksoi6AG9nbA/default.jpg\"></a></div>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 33864774,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "js",
            "submessages": [],
            "timestamp": 1421617642,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p>Would anyone like to spend some time with me today learning how to use <a href=\"https://github.com/scalaz/scalaz-stream\" target=\"_blank\" title=\"https://github.com/scalaz/scalaz-stream\">https://github.com/scalaz/scalaz-stream</a>?</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 33930454,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "z-stream",
            "submessages": [],
            "timestamp": 1421764485,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p>I've looked into it a bit, but I'm not comfy yet. To be honest I'm not sure what my plan is, but it might be fun to load up a projector and wander around together.</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 33930505,
            "is_me_message": false,
            "last_edit_timestamp": 1421764588,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "z-stream",
            "submessages": [],
            "timestamp": 1421764577,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p>A few other interesting libraries to look at: scodec (including <a href=\"https://github.com/yzernik/bitcoin-scodec\" target=\"_blank\" title=\"https://github.com/yzernik/bitcoin-scodec\">https://github.com/yzernik/bitcoin-scodec</a>), http4s, scala-check, argonaut.</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 33930625,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "z-stream",
            "submessages": [],
            "timestamp": 1421764824,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/a897e9d6a0e8aff13a39e0515c38ee2d9482c809?x=x&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>i'm down! anyone else?</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 33934132,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "guest.austin@gmail.com",
            "sender_full_name": "Austin Guest (they) (SP2'19)",
            "sender_id": 6930,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "z-stream",
            "submessages": [],
            "timestamp": 1421770273,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/a897e9d6a0e8aff13a39e0515c38ee2d9482c809?x=x&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p><span class=\"user-mention\" data-user-email=\"lizabeth.kent@gmail.com\">@Libby Kent (W1'14)</span> ?</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 33934187,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "guest.austin@gmail.com",
            "sender_full_name": "Austin Guest (they) (SP2'19)",
            "sender_id": 6930,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "z-stream",
            "submessages": [],
            "timestamp": 1421770330,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/2249c2fb0fe071d1199464fd91ac8627?d=identicon&version=1",
            "client": "website",
            "content": "<p>Interesting, I know little to nothing about scalaz streams, but this could indeed be fun</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 33935149,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "lizabeth.kent@gmail.com",
            "sender_full_name": "Libby Kent (W1'14)",
            "sender_id": 6926,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "z-stream",
            "submessages": [],
            "timestamp": 1421771474,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/a897e9d6a0e8aff13a39e0515c38ee2d9482c809?x=x&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>cool! <span class=\"user-mention\" data-user-email=\"alan@hackerschool.com\">@Alan O'Donnell</span> : you've got two interested parties! proposals for when to throw up a projector and take a look at teh scalazzzzzz?</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 33936877,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "guest.austin@gmail.com",
            "sender_full_name": "Austin Guest (they) (SP2'19)",
            "sender_id": 6930,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "z-stream",
            "submessages": [],
            "timestamp": 1421773635,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/a897e9d6a0e8aff13a39e0515c38ee2d9482c809?x=x&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>for example: how's 3:30/4-ish? (should nailed down some stuff on the bittorrent thingie by then and be eager to explore...)</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 33938689,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "guest.austin@gmail.com",
            "sender_full_name": "Austin Guest (they) (SP2'19)",
            "sender_id": 6930,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "z-stream",
            "submessages": [],
            "timestamp": 1421775992,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p>Looks like I'd have to do this around 2pm. I've got interviews this afternoon.</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 33939139,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "z-stream",
            "submessages": [],
            "timestamp": 1421776608,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"guest.austin@gmail.com\">@Austin Guest (W1'14)</span>, <span class=\"user-mention\" data-user-email=\"lizabeth.kent@gmail.com\">@Libby Kent (W1'14)</span> </p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 33939150,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "z-stream",
            "submessages": [],
            "timestamp": 1421776623,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p>(Currently learning how to use nio2 and hook it into scalaz-stream stuff.)</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 33939161,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "z-stream",
            "submessages": [],
            "timestamp": 1421776652,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/a897e9d6a0e8aff13a39e0515c38ee2d9482c809?x=x&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>have 1-on-1 w/ sonali at 2... how's now?</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 33939205,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "guest.austin@gmail.com",
            "sender_full_name": "Austin Guest (they) (SP2'19)",
            "sender_id": 6930,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "z-stream",
            "submessages": [],
            "timestamp": 1421776688,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/a897e9d6a0e8aff13a39e0515c38ee2d9482c809?x=x&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>(<span class=\"user-mention\" data-user-email=\"alan@hackerschool.com\">@Alan O'Donnell</span> <span class=\"user-mention\" data-user-email=\"lizabeth.kent@gmail.com\">@Libby Kent (W1'14)</span> </p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 33939224,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "guest.austin@gmail.com",
            "sender_full_name": "Austin Guest (they) (SP2'19)",
            "sender_id": 6930,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "z-stream",
            "submessages": [],
            "timestamp": 1421776711,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p>I have a one on one with Nick :/</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 33939239,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "z-stream",
            "submessages": [],
            "timestamp": 1421776734,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p>Haha.</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 33939241,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "z-stream",
            "submessages": [],
            "timestamp": 1421776739,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p>We'll figure something out.</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 33939246,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "z-stream",
            "submessages": [],
            "timestamp": 1421776744,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/2249c2fb0fe071d1199464fd91ac8627?d=identicon&version=1",
            "client": "website",
            "content": "<p>Sorry was off zulip just tap me whenever :-)</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 33940720,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "lizabeth.kent@gmail.com",
            "sender_full_name": "Libby Kent (W1'14)",
            "sender_id": 6926,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "z-stream",
            "submessages": [],
            "timestamp": 1421778409,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/849c0e2e2c09df57ba091b26cf836d6a?d=identicon&version=1",
            "client": "website",
            "content": "<p>Hey guys,<br>\nJust stumbled upon this meetup group called \"Scala Stammtisch\", which looks pretty neat. They are hosting a meetup TODAY at 7 pm at the Meetup HQ, which is quite close to HS. Anyone interested in going? Here is the link of the meetup: <a href=\"http://www.meetup.com/Scala-Stammtisch/events/219556511/\" target=\"_blank\" title=\"http://www.meetup.com/Scala-Stammtisch/events/219556511/\">http://www.meetup.com/Scala-Stammtisch/events/219556511/</a></p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 33945777,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "bz2228@columbia.edu",
            "sender_full_name": "Bocheng Zhou (W2'15)",
            "sender_id": 7091,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "Scala Stammtisch",
            "submessages": [],
            "timestamp": 1421784678,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"lizabeth.kent@gmail.com\">@Libby Kent (W1'14)</span> <span class=\"user-mention\" data-user-email=\"guest.austin@gmail.com\">@Austin Guest (W1'14)</span>: quick update on my progress. I've been digging around in the scalaz-stream source code, trying to figure out how to get an echo server working. Bad news is something is wrong with my mental model with how <code>Process</code> and <code>Task</code> work, and I can't get my server to actually, you know, echo anything. But the good news is I learned how to use nio2 with Scala, and my initial sketches for how to hook nio2 into scalaz-stream are pretty much what scalaz-stream does internally in their <code>nio</code> package.</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 34032966,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "z-stream",
            "submessages": [],
            "timestamp": 1421933138,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p>Initial attempt:</p>\n<div class=\"codehilite\"><pre><span class=\"k\">import</span> <span class=\"nn\">scalaz.stream._</span>\n<span class=\"k\">import</span> <span class=\"nn\">java.net.InetSocketAddress</span>\n\n<span class=\"k\">object</span> <span class=\"nc\">Main</span> <span class=\"o\">{</span>\n  <span class=\"k\">def</span> <span class=\"n\">main</span><span class=\"o\">(</span><span class=\"n\">args</span><span class=\"k\">:</span> <span class=\"kt\">Array</span><span class=\"o\">[</span><span class=\"kt\">String</span><span class=\"o\">])</span> <span class=\"k\">:</span> <span class=\"kt\">Unit</span> <span class=\"o\">=</span> <span class=\"o\">{</span>\n      <span class=\"k\">val</span> <span class=\"n\">address</span> <span class=\"k\">=</span> <span class=\"k\">new</span> <span class=\"nc\">InetSocketAddress</span><span class=\"o\">(</span><span class=\"mi\">45679</span><span class=\"o\">)</span>\n      <span class=\"k\">implicit</span> <span class=\"k\">val</span> <span class=\"n\">acg</span> <span class=\"k\">=</span> <span class=\"n\">nio</span><span class=\"o\">.</span><span class=\"nc\">DefaultAsynchronousChannelGroup</span>\n      <span class=\"n\">nio</span><span class=\"o\">.</span><span class=\"n\">server</span><span class=\"o\">(</span><span class=\"n\">address</span><span class=\"o\">,</span> <span class=\"kc\">true</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">).</span><span class=\"n\">map</span> <span class=\"o\">{</span> <span class=\"n\">conn</span> <span class=\"k\">=&gt;</span>\n        <span class=\"n\">println</span><span class=\"o\">(</span><span class=\"s\">&quot;We got a connection!&quot;</span><span class=\"o\">)</span>\n        <span class=\"n\">conn</span><span class=\"o\">.</span><span class=\"n\">flatMap</span> <span class=\"o\">{</span> <span class=\"n\">ex</span> <span class=\"k\">=&gt;</span>\n          <span class=\"n\">ex</span><span class=\"o\">.</span><span class=\"n\">read</span><span class=\"o\">.</span><span class=\"n\">to</span><span class=\"o\">(</span><span class=\"n\">ex</span><span class=\"o\">.</span><span class=\"n\">write</span><span class=\"o\">)</span>\n        <span class=\"o\">}</span>\n      <span class=\"o\">}.</span><span class=\"n\">run</span><span class=\"o\">.</span><span class=\"n\">run</span>\n  <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 34033065,
            "is_me_message": false,
            "last_edit_timestamp": 1421933792,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "z-stream",
            "submessages": [],
            "timestamp": 1421933381,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/a897e9d6a0e8aff13a39e0515c38ee2d9482c809?x=x&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p><span class=\"user-mention\" data-user-email=\"alan@hackerschool.com\">@Alan O'Donnell</span> <span class=\"user-mention\" data-user-email=\"lizabeth.kent@gmail.com\">@Libby Kent (W1'14)</span> cool! down to pair (three-tuple?) on this today. only constraint is Mary's Git seminar at 11. Maybe right after that?</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 34033688,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "guest.austin@gmail.com",
            "sender_full_name": "Austin Guest (they) (SP2'19)",
            "sender_id": 6930,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "z-stream",
            "submessages": [],
            "timestamp": 1421934961,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p>Updated version that actually works:</p>\n<div class=\"codehilite\"><pre><span class=\"k\">object</span> <span class=\"nc\">Main</span> <span class=\"o\">{</span>  \n  <span class=\"k\">def</span> <span class=\"n\">main</span><span class=\"o\">(</span><span class=\"n\">args</span><span class=\"k\">:</span> <span class=\"kt\">Array</span><span class=\"o\">[</span><span class=\"kt\">String</span><span class=\"o\">])</span> <span class=\"k\">:</span> <span class=\"kt\">Unit</span> <span class=\"o\">=</span> <span class=\"o\">{</span>\n    <span class=\"k\">val</span> <span class=\"n\">address</span> <span class=\"k\">=</span> <span class=\"k\">new</span> <span class=\"nc\">InetSocketAddress</span><span class=\"o\">(</span><span class=\"mi\">45679</span><span class=\"o\">)</span>\n    <span class=\"k\">implicit</span> <span class=\"k\">val</span> <span class=\"n\">cg</span> <span class=\"k\">=</span> <span class=\"n\">nio</span><span class=\"o\">.</span><span class=\"nc\">DefaultAsynchronousChannelGroup</span>\n    <span class=\"n\">merge</span><span class=\"o\">.</span><span class=\"n\">mergeN</span><span class=\"o\">(</span><span class=\"n\">nio</span><span class=\"o\">.</span><span class=\"n\">server</span><span class=\"o\">(</span><span class=\"n\">address</span><span class=\"o\">,</span> <span class=\"kc\">true</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">).</span><span class=\"n\">map</span> <span class=\"o\">{</span> <span class=\"n\">conn</span> <span class=\"k\">=&gt;</span>\n      <span class=\"n\">println</span><span class=\"o\">(</span><span class=\"s\">&quot;We got a connection!&quot;</span><span class=\"o\">)</span>\n      <span class=\"n\">conn</span><span class=\"o\">.</span><span class=\"n\">flatMap</span> <span class=\"o\">{</span> <span class=\"n\">ex</span> <span class=\"k\">=&gt;</span>\n        <span class=\"n\">ex</span><span class=\"o\">.</span><span class=\"n\">read</span><span class=\"o\">.</span><span class=\"n\">to</span><span class=\"o\">(</span><span class=\"n\">ex</span><span class=\"o\">.</span><span class=\"n\">write</span><span class=\"o\">).</span><span class=\"n\">onFailure</span> <span class=\"o\">{</span> <span class=\"n\">e</span> <span class=\"k\">=&gt;</span> <span class=\"nc\">Process</span><span class=\"o\">.</span><span class=\"n\">empty</span> <span class=\"o\">}</span>\n      <span class=\"o\">}</span>\n    <span class=\"o\">}).</span><span class=\"n\">run</span><span class=\"o\">.</span><span class=\"n\">run</span>\n  <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 34038626,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "z-stream",
            "submessages": [],
            "timestamp": 1421942678,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p>So: I need to learn more about the <code>merge</code> module, as well as my janky exception handling strategy with <code>onFailure</code>.</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 34038643,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "z-stream",
            "submessages": [],
            "timestamp": 1421942719,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/2249c2fb0fe071d1199464fd91ac8627?d=identicon&version=1",
            "client": "website",
            "content": "<p>Very cool! Can we do it a little later? Any time after 3pm? </p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 34040250,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "lizabeth.kent@gmail.com",
            "sender_full_name": "Libby Kent (W1'14)",
            "sender_id": 6926,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "z-stream",
            "submessages": [],
            "timestamp": 1421944892,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"lizabeth.kent@gmail.com\">@Libby Kent (W1'14)</span> sure.</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 34040682,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "z-stream",
            "submessages": [],
            "timestamp": 1421945377,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/2249c2fb0fe071d1199464fd91ac8627?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"alan@hackerschool.com\">@Alan O'Donnell</span>  super, looking forward to it =)</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 34040734,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "lizabeth.kent@gmail.com",
            "sender_full_name": "Libby Kent (W1'14)",
            "sender_id": 6926,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "z-stream",
            "submessages": [],
            "timestamp": 1421945410,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/a897e9d6a0e8aff13a39e0515c38ee2d9482c809?x=x&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p><span class=\"user-mention\" data-user-email=\"alan@hackerschool.com\">@Alan O'Donnell</span>  <span class=\"user-mention\" data-user-email=\"lizabeth.kent@gmail.com\">@Libby Kent (W1'14)</span> me three! :)</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 34043425,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "guest.austin@gmail.com",
            "sender_full_name": "Austin Guest (they) (SP2'19)",
            "sender_id": 6930,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "z-stream",
            "submessages": [],
            "timestamp": 1421949111,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"lizabeth.kent@gmail.com\">@Libby Kent (W1'14)</span> <span class=\"user-mention\" data-user-email=\"guest.austin@gmail.com\">@Austin Guest (W1'14)</span> I'm going to start projectin'.</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 34051330,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "z-stream",
            "submessages": [],
            "timestamp": 1421958905,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/a897e9d6a0e8aff13a39e0515c38ee2d9482c809?x=x&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>heck yeah!</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 34051337,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "guest.austin@gmail.com",
            "sender_full_name": "Austin Guest (they) (SP2'19)",
            "sender_id": 6930,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "z-stream",
            "submessages": [],
            "timestamp": 1421958922,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/d495685876a5a195b6ef5fb9a269b6d0dcd5c5fe?x=x&version=1",
            "client": "website",
            "content": "<p>I've been messing around with CSP in Scala, basically trying to get as close as possible to Clojure's <code>core.async</code>,  with type safety but with as little reinvention as possible.  I was stymied for a while by the <code>alts</code> construction,  which is supposed to listen on a group of channels and then return a tuple of the first channel to respond and the value it responds with:  <code>(c,v)</code>.   Absent some Sabiny magic beyond my character's level, <code>alts</code> is going to have to return <code>(Chan[Any],Any)</code>,  which makes it difficult to cleanly deduce what type <code>v</code> is.<br>\nAfter much futzing around with macros, I finally tried defining <code>unapply</code> in the <code>Chan</code> class itself:</p>\n<div class=\"codehilite\"><pre>  <span class=\"k\">def</span> <span class=\"n\">unapply</span><span class=\"o\">(</span><span class=\"n\">cv</span><span class=\"k\">:</span><span class=\"o\">(</span><span class=\"kt\">Chan</span><span class=\"o\">[</span><span class=\"kt\">Any</span><span class=\"o\">],</span><span class=\"nc\">Any</span><span class=\"o\">))</span> <span class=\"k\">:</span> <span class=\"kt\">Option</span><span class=\"o\">[</span><span class=\"kt\">T</span><span class=\"o\">]</span> <span class=\"k\">=</span>   <span class=\"k\">if</span><span class=\"o\">(</span><span class=\"n\">cv</span><span class=\"o\">.</span><span class=\"n\">c</span><span class=\"o\">==</span><span class=\"k\">this</span><span class=\"o\">)</span>   <span class=\"nc\">Some</span><span class=\"o\">(</span><span class=\"n\">cv</span><span class=\"o\">.</span><span class=\"n\">_2</span><span class=\"o\">..</span><span class=\"n\">asInstanceOf</span><span class=\"o\">[</span><span class=\"kt\">T</span><span class=\"o\">])</span>   <span class=\"k\">else</span> <span class=\"nc\">None</span>  \n</pre></div>\n\n\n<p>which which I can now do:</p>\n<div class=\"codehilite\"><pre><span class=\"n\">alts</span><span class=\"o\">(</span><span class=\"n\">cNumber</span><span class=\"o\">,</span><span class=\"n\">cStrings</span><span class=\"o\">)</span> <span class=\"k\">match</span> <span class=\"o\">{</span>\n  <span class=\"k\">case</span> <span class=\"n\">cNumber</span><span class=\"o\">(</span><span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"k\">=&gt;</span> <span class=\"n\">println</span><span class=\"o\">(</span><span class=\"n\">i</span><span class=\"o\">/</span><span class=\"mi\">3</span><span class=\"o\">)</span>\n  <span class=\"k\">case</span> <span class=\"n\">cString</span><span class=\"o\">(</span><span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"k\">=&gt;</span><span class=\"n\">println</span><span class=\"o\">(</span><span class=\"s\">&quot;String is &quot;</span><span class=\"o\">+</span><span class=\"n\">s</span><span class=\"o\">)</span>\n<span class=\"o\">}</span>\n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 34056782,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "pnf@podsnap.com",
            "sender_full_name": "Peter Fraenkel (he) (S'13)",
            "sender_id": 2142,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "class method unapply = very cool",
            "submessages": [],
            "timestamp": 1421965018,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"pnf@podsnap.com\">@Peter Fraenkel (S'13)</span> can you even just have <code>unapply(cv: (Chan[T], T)): Option[T]</code>?</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 34059045,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "class method unapply = very cool",
            "submessages": [],
            "timestamp": 1421967632,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/d495685876a5a195b6ef5fb9a269b6d0dcd5c5fe?x=x&version=1",
            "client": "website",
            "content": "<p>You'd have to make <code>Chan</code> covariant in order for that to match the <code>Any</code> output of <code>alts</code>,  but since you might pass it around for writing, it can't be.   I think that's the usual problem with mutable collections.</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 34059276,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "pnf@podsnap.com",
            "sender_full_name": "Peter Fraenkel (he) (S'13)",
            "sender_id": 2142,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "class method unapply = very cool",
            "submessages": [],
            "timestamp": 1421967932,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"lizabeth.kent@gmail.com\">@Libby Kent (W1'14)</span> <span class=\"user-mention\" data-user-email=\"guest.austin@gmail.com\">@Austin Guest (W1'14)</span> I'm going to dig into scodec today: <a href=\"http://scodec.org/guide\" target=\"_blank\" title=\"http://scodec.org/guide\">scodec.org/guide</a>. I'll try whipping up  some BitTorrent protocol stuff.</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 34134104,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "scodec",
            "submessages": [],
            "timestamp": 1422114203,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p>Naturally, the first scodec-core example doesn't work <img alt=\":stuck_out_tongue_winking_eye:\" class=\"emoji\" src=\"static/third/gemoji/images/emoji/stuck_out_tongue_winking_eye.png\" title=\":stuck_out_tongue_winking_eye:\"> </p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 34134683,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "scodec",
            "submessages": [],
            "timestamp": 1422115617,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p>But the project has a gitter account (project-specific chatroom), pretty neat!</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 34135371,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "scodec",
            "submessages": [],
            "timestamp": 1422117444,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p>Interestingly, it looks like the issue I'm having only appears in eclipse... \u00af\\_(\u30c4)_/\u00af</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 34135637,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "scodec",
            "submessages": [],
            "timestamp": 1422118093,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/a897e9d6a0e8aff13a39e0515c38ee2d9482c809?x=x&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>:)</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 34137890,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "guest.austin@gmail.com",
            "sender_full_name": "Austin Guest (they) (SP2'19)",
            "sender_id": 6930,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "scodec",
            "submessages": [],
            "timestamp": 1422123914,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p>Good news: top minds are looking into the problem. The scodec gitter room (check out the link on the github project page) is pretty cool.</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 34169283,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "scodec",
            "submessages": [],
            "timestamp": 1422203681,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p>Cool, this is going to trigger a new release of the shapeless library and hopefully a fix to the presentation compiler.</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 34199347,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "scodec",
            "submessages": [],
            "timestamp": 1422278248,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/a897e9d6a0e8aff13a39e0515c38ee2d9482c809?x=x&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>saw that. that gitter room is awesome!</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 34200930,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "guest.austin@gmail.com",
            "sender_full_name": "Austin Guest (they) (SP2'19)",
            "sender_id": 6930,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "scodec",
            "submessages": [],
            "timestamp": 1422281433,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p>Awesome, issue got fixed. Pretty cool to chat with Miles Sabin.</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 34228904,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "scodec",
            "submessages": [],
            "timestamp": 1422316809,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p>To play with it, you need to run a local <code>1.8.0-SNAPSHOT</code> release of <code>scodec</code>, which you can do by git cloning scodec and then running <code>sbt publishLocal</code>.</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 34229689,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "scodec",
            "submessages": [],
            "timestamp": 1422318034,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p>For those of you on OSX, <code>JAVA_TOOL_OPTIONS='-Dfile.encoding=UTF8' sbt</code>will launch sbt with charset set to utf8 instead of ascii.</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 34232615,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "utf8",
            "submessages": [],
            "timestamp": 1422322848,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p>I'm going to stick that in my shell config.</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 34232618,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "utf8",
            "submessages": [],
            "timestamp": 1422322863,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p>Looks like <code>lein</code> must do something similar to make clojure use utf8.</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 34232827,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "utf8",
            "submessages": [],
            "timestamp": 1422323264,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/3d8a0205f76df6ec7742292f8635addd71801017?x=x&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p><span class=\"user-mention\" data-user-email=\"guest.austin@gmail.com\">@Austin Guest (W1'14)</span> The Spray library has a really nice HTTP client. It's asynchronous (built on Akka) and is actively being developed. It's got three API 'levels' (request-level, host-level and connection-level). When I started playing with it, I used the simpler request-level API, but recently I've been digging into the connection-level API. I played with Dispatch a bit about a year ago, and I definitely prefer Spray over Dispatch.  </p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 34261748,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "briandignan@gmail.com",
            "sender_full_name": "Brian Dignan (F'13)",
            "sender_id": 2886,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "fun learn-scala project?",
            "submessages": [],
            "timestamp": 1422377219,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/a897e9d6a0e8aff13a39e0515c38ee2d9482c809?x=x&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p><span class=\"user-mention\" data-user-email=\"briandignan@gmail.com\">@Brian Dignan (F'13)</span> cool! can you use the HTTP part of the Spray library without being tied to an actor-oriented architecture? </p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 34275592,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "guest.austin@gmail.com",
            "sender_full_name": "Austin Guest (they) (SP2'19)",
            "sender_id": 6930,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "fun learn-scala project?",
            "submessages": [],
            "timestamp": 1422393682,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/3d8a0205f76df6ec7742292f8635addd71801017?x=x&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p><span class=\"user-mention\" data-user-email=\"guest.austin@gmail.com\">@Austin Guest (W1'14)</span> You don't need to directly deal with (or know anything about) Actors to use Spray, but under the covers Spray uses Akka Actors, so Akka needs to be a dependency of your project. </p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 34276084,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "briandignan@gmail.com",
            "sender_full_name": "Brian Dignan (F'13)",
            "sender_id": 2886,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "fun learn-scala project?",
            "submessages": [],
            "timestamp": 1422394292,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p>Hat tip <span class=\"user-mention\" data-user-email=\"david.nolen@gmail.com\">@David Nolen</span> :) Sounds like Scala.JS is getting pretty reasonable: <a href=\"https://groups.google.com/forum/m/#!topic/scala-js/_1Sfb5Nj08w\" target=\"_blank\" title=\"https://groups.google.com/forum/m/#!topic/scala-js/_1Sfb5Nj08w\">https://groups.google.com/forum/m/#!topic/scala-js/_1Sfb5Nj08w</a></p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 34306398,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "js",
            "submessages": [],
            "timestamp": 1422453312,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/eac0aafb77a926e0ef53779ce873a472?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"alan@hackerschool.com\">@Alan O'Donnell</span> it's come a very long way, impressive work and we're definitely jealous of a couple of things they have with regards to the compilation pipeline</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 34306445,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "david.nolen@gmail.com",
            "sender_full_name": "David Nolen",
            "sender_id": 931,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "js",
            "submessages": [],
            "timestamp": 1422453389,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/3d8a0205f76df6ec7742292f8635addd71801017?x=x&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>Has anyone been to Scala Days before, or thinking about going this year? I just checked out the agenda. It looks pretty good.</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 34337664,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "briandignan@gmail.com",
            "sender_full_name": "Brian Dignan (F'13)",
            "sender_id": 2886,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "Scala Days 2015",
            "submessages": [],
            "timestamp": 1422495930,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"nada.amin@gmail.com\">@Nada Amin</span> <span class=\"user-mention\" data-user-email=\"pnf@podsnap.com\">@Peter Fraenkel (S'13)</span> I often see inferred, mouse-over types like <code>[x]Task[x]</code> in Eclipse (Task is scalaz's Future, basically--probably not relevant to my question, aside from it having a hole for another type). Any idea what that means?</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 34575754,
            "is_me_message": false,
            "last_edit_timestamp": 1422975986,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "odd type",
            "submessages": [],
            "timestamp": 1422975973,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/a897e9d6a0e8aff13a39e0515c38ee2d9482c809?x=x&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>Hi all. Been chugging away on my Bittorrent client, and, as a helper project to help me wrap my head around concurrency in Scala, worked on implementing a chat server with non-blocking IO. Here is where I'm at to date (due to a lot of GREAT HELP from <span class=\"user-mention\" data-user-email=\"alan@hackerschool.com\">@Alan O'Donnell</span> ): <a href=\"https://github.com/aguestuser/scat/tree/dba95189511ff2f42f3138396d5a07b49261605e/src/main/scala/scat\" target=\"_blank\" title=\"https://github.com/aguestuser/scat/tree/dba95189511ff2f42f3138396d5a07b49261605e/src/main/scala/scat\">https://github.com/aguestuser/scat/tree/dba95189511ff2f42f3138396d5a07b49261605e/src/main/scala/scat</a><br>\n/<br>\nAs per <span class=\"user-mention\" data-user-email=\"pnf@podsnap.com\">@Peter Fraenkel (S'13)</span> 's suggestion, I chose to avoid Akka and used Promises/Futures and Java's NIO2 library to handle concurrency. (Here are the wrappers I wrote around NIO2 to wrap Java's unsightly callbacks into Futures and get back into Scala-land: <a href=\"https://github.com/aguestuser/scat/blob/dba95189511ff2f42f3138396d5a07b49261605e/src/main/scala/scat/Socket.scala\" target=\"_blank\" title=\"https://github.com/aguestuser/scat/blob/dba95189511ff2f42f3138396d5a07b49261605e/src/main/scala/scat/Socket.scala\">https://github.com/aguestuser/scat/blob/dba95189511ff2f42f3138396d5a07b49261605e/src/main/scala/scat/Socket.scala</a>)<br>\n/<br>\nEverything works great and is very non-blocking, reactive, and functional EXCEPT: I can't figure out how to avoid race conditions when updating the list of clients the server is listening to as new connections come in without resorting to a mutable collection of clients that gets updated inside a mutex. (See here: <a href=\"https://github.com/aguestuser/scat/blob/dba95189511ff2f42f3138396d5a07b49261605e/src/main/scala/scat/Server.scala#L31\" target=\"_blank\" title=\"https://github.com/aguestuser/scat/blob/dba95189511ff2f42f3138396d5a07b49261605e/src/main/scala/scat/Server.scala#L31\">https://github.com/aguestuser/scat/blob/dba95189511ff2f42f3138396d5a07b49261605e/src/main/scala/scat/Server.scala#L31</a> and here:  <a href=\"https://github.com/aguestuser/scat/blob/dba95189511ff2f42f3138396d5a07b49261605e/src/main/scala/scat/Server.scala#L44\" target=\"_blank\" title=\"https://github.com/aguestuser/scat/blob/dba95189511ff2f42f3138396d5a07b49261605e/src/main/scala/scat/Server.scala#L44\">https://github.com/aguestuser/scat/blob/dba95189511ff2f42f3138396d5a07b49261605e/src/main/scala/scat/Server.scala#L44</a>)<br>\n/<br>\nCan anyone help me come up with a more purely functional way to tackle this problem? (It will surely pop up again when I need to concurrently update the list of pieces of the torrent file I have and need in the BitTorrent client, and I'd like to have a more elegant solution in my back pocket when I get there.) Then again -- if I'm not willing to use actors, and am committing to being reactive and multi-threaded, perhaps this is the best solution available?<br>\n/<br>\n All ears... and thanks in advance for any suggestions. :)</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 34583380,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "guest.austin@gmail.com",
            "sender_full_name": "Austin Guest (they) (SP2'19)",
            "sender_id": 6930,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "FP alternative to actors/mutex",
            "submessages": [],
            "timestamp": 1422986386,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/a897e9d6a0e8aff13a39e0515c38ee2d9482c809?x=x&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>more specifically (sort of rubber ducking here -- forgive me if taking up too much space): the race conditions / mutability problem arises when the server needs to figure out which clients to relay an incoming message to. the function that does the relaying is attached to the (client) socket from which the message needs to be relayed. that function is created at the time that each new client is added, and then runs in the background inside a future. <br>\n/<br>\nin my first (naive!) approach, i simply passed this function a new copy of an immutable set of clients each time a new client was added. but this presents an obvious problem: if Alice joins the chat room first, and then Bob joins, all of Bob's messages will be relayed to Alice, but Alice's messages won't go to anyone (since she was the only client in the room when the <code>relay</code> function for her socket got created, and thus she is the only client that her socket's <code>relay</code> function knows it's supposed to relay stuff to). when Charlie rolls around, he can talk to Bob and Alice, but Bob can still only talk to Alice... and so on...<br>\n/<br>\nto get around this, i tried calling the function that generates the<code>relay</code> function for Alice and Bob again (it's called <code>listen</code>, in turn generated by <code>accept</code> which is the function that actually registers new clients) when Charlie joins and passing it the updated copy of the client collection. but that won't work because Alice and Bob already have <code>relay</code> functions running inside of futures in the background and i get a runtime error! so then i'm stuck with making a mutable client set that each of the <code>relay</code> functions can access at such time as they are triggered to complete. this works provided i wrap updates to that mutable set inside a mutex (i used a <code>synchronize { _ }</code> block) in case Bob and Charlie join at the same time.<br>\n/<br>\nbut then i'm stuck with both mutation and mutexes, which as a n00b on the FP block, i seem to get the impression are horribly unfashionable. if thery're unfashionable but the only way to solve my problem, then i suppose i should stick with them. if there are other/better ways, i'd love to learn them.<br>\n/<br>\napologies for the rambling! hope that helps frame the question better! :)</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 34585739,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "guest.austin@gmail.com",
            "sender_full_name": "Austin Guest (they) (SP2'19)",
            "sender_id": 6930,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "FP alternative to actors/mutex",
            "submessages": [],
            "timestamp": 1422989214,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/d495685876a5a195b6ef5fb9a269b6d0dcd5c5fe?x=x&version=1",
            "client": "website",
            "content": "<p>Personally, I don't see anything that horrible about using an efficient, mutable structure like Java's ConcurrentHashMap.   There's a CSP-ish strategy where you have a tail-recursive function essentially looping, while listening on channels for either additions to the map or queries to it, then servicing them and recurring with the possibly modified map, but honestly that's just  hiding state in the call stack, while shoveling the locking problem out to the channel implementation. </p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 34593262,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "pnf@podsnap.com",
            "sender_full_name": "Peter Fraenkel (he) (S'13)",
            "sender_id": 2142,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "FP alternative to actors/mutex",
            "submessages": [],
            "timestamp": 1422998066,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"guest.austin@gmail.com\">@Austin Guest (W1'14)</span> here's the scalaz thread I started: <a href=\"https://groups.google.com/forum/#!topic/scalaz/Tqh-gEp8C8w\" target=\"_blank\" title=\"https://groups.google.com/forum/#!topic/scalaz/Tqh-gEp8C8w\">https://groups.google.com/forum/#!topic/scalaz/Tqh-gEp8C8w</a></p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 34625556,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "z-stream",
            "submessages": [],
            "timestamp": 1423059076,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p>I want to mess around with the linked tcp spec. It sounds like the <code>nio</code> package is getting abstracted away (makes sense).</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 34625657,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "z-stream",
            "submessages": [],
            "timestamp": 1423059306,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p>The <code>signal</code> idea for keeping track of server state sounds cool too, but I haven't tried it yet.</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 34625873,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "z-stream",
            "submessages": [],
            "timestamp": 1423059806,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/a897e9d6a0e8aff13a39e0515c38ee2d9482c809?x=x&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>super interesting! in the Nio spec, i  get hung up on <code>merge.mergeN</code> clues as to what's going on there?</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 34632527,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "guest.austin@gmail.com",
            "sender_full_name": "Austin Guest (they) (SP2'19)",
            "sender_id": 6930,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "z-stream",
            "submessages": [],
            "timestamp": 1423069298,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p>Yeah, that was a bit confusing. In words, <code>merge.mergeN</code> takes a stream of streams and turns it into a regular stream, trying to draw from the streams it has seen so far in a fair way.</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 34633837,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "z-stream",
            "submessages": [],
            "timestamp": 1423070806,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p>For example, let's say you have two <code>Process[Task, Int]</code>s, so two streams of Ints. You can imagine merging them together to get a single, merged stream of Ints, a <code>Process[Task, Int]</code>.</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 34633882,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "z-stream",
            "submessages": [],
            "timestamp": 1423070853,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p>What <code>merge.mergeN</code> does is merge an *unknown* number of <code>Process[Task, A]</code>s, which are arriving via a <code>Process[Task, Process[Task, A]]</code>. Bit of a mouthful.</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 34633940,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "z-stream",
            "submessages": [],
            "timestamp": 1423070908,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/a897e9d6a0e8aff13a39e0515c38ee2d9482c809?x=x&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>thanks <span class=\"user-mention\" data-user-email=\"pnf@podsnap.com\">@Peter Fraenkel (S'13)</span> was going to pair on this with <span class=\"user-mention\" data-user-email=\"samth@cs.indiana.edu\">@Sam Tobin-Hochstadt</span> today, who (i think?) had something similar to say about the CSP-ish strategy. will report back if we come up with anything interesting... <br>\n/<br>\nout of curiosity -- what are the advantages of a ConcurrentHashMap? as opposed to, say, updating a Scala HashSet inside a mutex? i'd been leaning toward a set because i could update it in (effectively) constant time (cf: <a href=\"http://docs.scala-lang.org/overviews/collections/performance-characteristics.html\" target=\"_blank\" title=\"http://docs.scala-lang.org/overviews/collections/performance-characteristics.html\">http://docs.scala-lang.org/overviews/collections/performance-characteristics.html</a>). <br>\n/<br>\nlooked at the docs for the ConcurrentHashMap (for anyone who's interested: <a href=\"http://docs.oracle.com/javase/7/docs/api/java/util/concurrent/ConcurrentHashMap.html\" target=\"_blank\" title=\"http://docs.oracle.com/javase/7/docs/api/java/util/concurrent/ConcurrentHashMap.html\">http://docs.oracle.com/javase/7/docs/api/java/util/concurrent/ConcurrentHashMap.html</a>)  and couldn't immediately tell how it was handling concurrency. am i to infer from the name that using this collection will eliminate the need to update it inside a mutex? how do i specify a <code>concurrencyLevel</code> parameter if i have no advance knowledge of how many clients the chat server might need to handle? <br>\n/<br>\nalso, perhaps the <code>Map</code> or <code>TrieMap</code> in <code>scala.collection.concurrent</code> might suffice? (<a href=\"http://www.scala-lang.org/api/current/index.html#scala.collection.concurrent.package\" target=\"_blank\" title=\"http://www.scala-lang.org/api/current/index.html#scala.collection.concurrent.package\">http://www.scala-lang.org/api/current/index.html#scala.collection.concurrent.package</a>). or the <code>SynchronizedMap</code> that Twitter's guide to concurrency in Scala suggests? (<a href=\"https://twitter.github.io/scala_school/concurrency.html#solutions\" target=\"_blank\" title=\"https://twitter.github.io/scala_school/concurrency.html#solutions\">https://twitter.github.io/scala_school/concurrency.html#solutions</a>) so many collections!!! <img alt=\":dizzy:\" class=\"emoji\" src=\"static/third/gemoji/images/emoji/dizzy.png\" title=\":dizzy:\"> </p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 34633960,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "guest.austin@gmail.com",
            "sender_full_name": "Austin Guest (they) (SP2'19)",
            "sender_id": 6930,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "FP alternative to actors/mutex",
            "submessages": [],
            "timestamp": 1423070944,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p>Also, a <code>Process[Task, A]</code> isn't really just a stream of <code>A</code>s; it's a stream of <code>A</code>s that can take little <code>Task</code>-sized steps along the way towards producing <code>A</code>s. So I think what merge.mergeN is doing is equitably stepping all of the <code>Process[Task, A]</code>s it's collected so far.</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 34634171,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "z-stream",
            "submessages": [],
            "timestamp": 1423071131,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/d495685876a5a195b6ef5fb9a269b6d0dcd5c5fe?x=x&version=1",
            "client": "ZulipiOS",
            "content": "<p>CHM does optimistic locking, so no mutex is grabbed unless there's contention for a particular key. Multiple threads can have at the map simultaneously, without having to linearize all access to the map.  The HS is essentially a HM where the values are all the same (irrelevant) Object. Note that the concurrency level is not number of clients, but the  number of map accesses you expect expect simultaneously. If you guess low, the worst that happens is that locking occurs more often. </p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 34647682,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "pnf@podsnap.com",
            "sender_full_name": "Peter Fraenkel (he) (S'13)",
            "sender_id": 2142,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "FP alternative to actors/mutex",
            "submessages": [],
            "timestamp": 1423087896,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/a897e9d6a0e8aff13a39e0515c38ee2d9482c809?x=x&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>Thanks <span class=\"user-mention\" data-user-email=\"pnf@podsnap.com\">@Peter Fraenkel (S'13)</span> <span class=\"user-mention\" data-user-email=\"samth@cs.indiana.edu\">@Sam Tobin-Hochstadt</span>  walked me through CHM and the difference between coarse-grained and fine grained mutexes today (along with the path not taken -- how you'd do it with actors). It was super-interesting! <br>\n/<br>\nAs a result, I switched to using CHMs and -- in a search for something to inspect in tests -- added a <code>logs</code> CHM. This was tricky (because I need to be able to sequence the logs), so I constructed the CHM as a map of <code>Date</code>s to to <code>String</code>s and a recursive call to unsuccessful calls of <code>logs replaceIfAbsent</code> in case two messages were logged at the same time, leaving me with an unordered hash map of logs with unique date keys that I can reconstruct in temporal order (or take the last 1 or 3 or whatever) -- albeit somewhat expensively -- after the fact.<br>\n/<br>\nAll in all it was super interesting!  Thanks for pointing me in that direction! (And here's the updated code: <a href=\"https://github.com/aguestuser/scat/tree/ab279ed57d3d3fc5748275762bde92faa04402fc/src\" target=\"_blank\" title=\"https://github.com/aguestuser/scat/tree/ab279ed57d3d3fc5748275762bde92faa04402fc/src\">https://github.com/aguestuser/scat/tree/ab279ed57d3d3fc5748275762bde92faa04402fc/src</a>)</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 34660895,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "guest.austin@gmail.com",
            "sender_full_name": "Austin Guest (they) (SP2'19)",
            "sender_id": 6930,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "FP alternative to actors/mutex",
            "submessages": [],
            "timestamp": 1423109227,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/3d8a0205f76df6ec7742292f8635addd71801017?x=x&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>Anyone know what's going on here?</p>\n<div class=\"codehilite\"><pre><span class=\"n\">scala</span><span class=\"o\">&gt;</span> <span class=\"k\">val</span> <span class=\"n\">x</span> <span class=\"k\">=</span> <span class=\"o\">{</span> <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"kc\">true</span><span class=\"o\">)</span> <span class=\"mi\">1</span> <span class=\"k\">else</span> <span class=\"mf\">2.0</span> <span class=\"o\">}</span> \n<span class=\"n\">x</span><span class=\"k\">:</span> <span class=\"kt\">Double</span> <span class=\"o\">=</span> <span class=\"mf\">1.0</span>\n\n<span class=\"n\">scala</span><span class=\"o\">&gt;</span> <span class=\"k\">val</span> <span class=\"n\">x</span> <span class=\"k\">=</span> <span class=\"o\">{</span> <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"kc\">true</span><span class=\"o\">)</span> <span class=\"mi\">1</span> <span class=\"k\">else</span> <span class=\"s\">&quot;1&quot;</span> <span class=\"o\">}</span>\n<span class=\"n\">x</span><span class=\"k\">:</span> <span class=\"kt\">Any</span> <span class=\"o\">=</span> <span class=\"mi\">1</span>\n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 34747917,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "briandignan@gmail.com",
            "sender_full_name": "Brian Dignan (F'13)",
            "sender_id": 2886,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "type inference oddity",
            "submessages": [],
            "timestamp": 1423256959,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/3d8a0205f76df6ec7742292f8635addd71801017?x=x&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>The second one is doing what I think it should do, because Any is the lowest common ancestor in the object hierarchy between Int and String, but the first one seems odd</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 34747988,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "briandignan@gmail.com",
            "sender_full_name": "Brian Dignan (F'13)",
            "sender_id": 2886,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "type inference oddity",
            "submessages": [],
            "timestamp": 1423257030,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/3d8a0205f76df6ec7742292f8635addd71801017?x=x&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>the LCA between Int and Double is AnyVal </p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 34748004,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "briandignan@gmail.com",
            "sender_full_name": "Brian Dignan (F'13)",
            "sender_id": 2886,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "type inference oddity",
            "submessages": [],
            "timestamp": 1423257068,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/3d8a0205f76df6ec7742292f8635addd71801017?x=x&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>So I'm wondering why it doesn't come out to be <code>x: AnyVal = 1.0</code></p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 34748090,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "briandignan@gmail.com",
            "sender_full_name": "Brian Dignan (F'13)",
            "sender_id": 2886,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "type inference oddity",
            "submessages": [],
            "timestamp": 1423257151,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/3d8a0205f76df6ec7742292f8635addd71801017?x=x&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>er actually I would think <code>x: AnyVal = 1</code>  since it's an Int instead of a double</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 34748126,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "briandignan@gmail.com",
            "sender_full_name": "Brian Dignan (F'13)",
            "sender_id": 2886,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "type inference oddity",
            "submessages": [],
            "timestamp": 1423257187,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"briandignan@gmail.com\">@Brian Dignan (F'13)</span> hmm, looks like this: <a href=\"http://www.scala-lang.org/files/archive/spec/2.11/03-types.html#weak-conformance\" target=\"_blank\" title=\"http://www.scala-lang.org/files/archive/spec/2.11/03-types.html#weak-conformance\">http://www.scala-lang.org/files/archive/spec/2.11/03-types.html#weak-conformance</a></p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 34754737,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "type inference oddity",
            "submessages": [],
            "timestamp": 1423265128,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p>Via the bit about \"numeric widening\" here: <a href=\"http://www.scala-lang.org/files/archive/spec/2.11/06-expressions.html\" target=\"_blank\" title=\"http://www.scala-lang.org/files/archive/spec/2.11/06-expressions.html\">http://www.scala-lang.org/files/archive/spec/2.11/06-expressions.html</a></p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 34754747,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "type inference oddity",
            "submessages": [],
            "timestamp": 1423265151,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p>For comparison:</p>\n<div class=\"codehilite\"><pre><span class=\"n\">scala</span><span class=\"o\">&gt;</span> <span class=\"nc\">List</span><span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mf\">1.0</span><span class=\"o\">)</span>\n<span class=\"n\">res</span><span class=\"k\">:</span> <span class=\"kt\">List</span><span class=\"o\">[</span><span class=\"kt\">Double</span><span class=\"o\">]</span> <span class=\"k\">=</span> <span class=\"nc\">List</span><span class=\"o\">(</span><span class=\"mf\">1.0</span><span class=\"o\">,</span> <span class=\"mf\">1.0</span><span class=\"o\">)</span>\n<span class=\"n\">scala</span><span class=\"o\">&gt;</span> <span class=\"nc\">List</span><span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">++</span> <span class=\"nc\">List</span><span class=\"o\">(</span><span class=\"mf\">1.0</span><span class=\"o\">)</span>\n<span class=\"n\">res</span><span class=\"k\">:</span> <span class=\"kt\">List</span><span class=\"o\">[</span><span class=\"kt\">AnyVal</span><span class=\"o\">]</span> <span class=\"k\">=</span> <span class=\"nc\">List</span><span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mf\">1.0</span><span class=\"o\">)</span>\n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 34755011,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "type inference oddity",
            "submessages": [],
            "timestamp": 1423265449,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/2249c2fb0fe071d1199464fd91ac8627?d=identicon&version=1",
            "client": "website",
            "content": "<p>I think it has to do with the implicit conversion int2Double<br>\ndefined on Int <a href=\"http://www.scala-lang.org/api/current/index.html#scala.Int\" target=\"_blank\" title=\"http://www.scala-lang.org/api/current/index.html#scala.Int\">http://www.scala-lang.org/api/current/index.html#scala.Int</a><br>\ni.e. you could add your own implicit like:</p>\n<div class=\"codehilite\"><pre><span class=\"k\">implicit</span> <span class=\"k\">def</span> <span class=\"n\">int2MyNum</span><span class=\"o\">(</span><span class=\"n\">i</span><span class=\"k\">:</span> <span class=\"kt\">Int</span><span class=\"o\">)</span><span class=\"k\">:</span> <span class=\"kt\">MyNum</span> <span class=\"o\">=</span> <span class=\"nc\">MyNum</span><span class=\"o\">(</span><span class=\"n\">i</span><span class=\"o\">)</span>\n<span class=\"k\">val</span> <span class=\"n\">x</span> <span class=\"k\">=</span> <span class=\"o\">{</span> <span class=\"k\">if</span><span class=\"o\">(</span><span class=\"kc\">true</span><span class=\"o\">)</span> <span class=\"nc\">MyNum</span><span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"k\">else</span> <span class=\"mi\">1</span> <span class=\"o\">}</span>\n<span class=\"n\">x</span><span class=\"k\">:</span> <span class=\"kt\">Any</span> <span class=\"o\">=</span> <span class=\"nc\">MyNum</span><span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"o\">)</span>\n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 34755757,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "lizabeth.kent@gmail.com",
            "sender_full_name": "Libby Kent (W1'14)",
            "sender_id": 6926,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "type inference oddity",
            "submessages": [],
            "timestamp": 1423266546,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/3d8a0205f76df6ec7742292f8635addd71801017?x=x&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p><span class=\"user-mention\" data-user-email=\"alan@hackerschool.com\">@Alan O'Donnell</span> Oh wow that's interesting. I never knew about that. With weak conformance / numeric widening, my understanding now is that Scala's type system essentially has an alternate class hierarchy for numeric types, because weak conformance only changes subtype relationships for numeric types</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 34757854,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "briandignan@gmail.com",
            "sender_full_name": "Brian Dignan (F'13)",
            "sender_id": 2886,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "type inference oddity",
            "submessages": [],
            "timestamp": 1423270479,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/3d8a0205f76df6ec7742292f8635addd71801017?x=x&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>So that made me wonder why it's not possible for Float to be a subclass of Double, Int a subclass of Float, etc </p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 34757988,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "briandignan@gmail.com",
            "sender_full_name": "Brian Dignan (F'13)",
            "sender_id": 2886,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "type inference oddity",
            "submessages": [],
            "timestamp": 1423270720,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/3d8a0205f76df6ec7742292f8635addd71801017?x=x&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>This block of code (which doesn't compile) helped me understand:</p>\n<div class=\"codehilite\"><pre><span class=\"k\">class</span> <span class=\"nc\">MyDouble</span><span class=\"o\">(</span> <span class=\"n\">num</span><span class=\"k\">:</span> <span class=\"kt\">Double</span> <span class=\"o\">)</span> <span class=\"o\">{</span>\n    <span class=\"k\">def</span> <span class=\"o\">+(</span><span class=\"n\">x</span><span class=\"k\">:</span> <span class=\"kt\">Int</span><span class=\"o\">)</span><span class=\"k\">:</span> <span class=\"kt\">Double</span> <span class=\"o\">=</span> <span class=\"n\">num</span> <span class=\"o\">+</span> <span class=\"n\">x</span>\n<span class=\"o\">}</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">MyInt</span><span class=\"o\">(</span> <span class=\"n\">num</span><span class=\"k\">:</span> <span class=\"kt\">Int</span> <span class=\"o\">)</span> <span class=\"k\">extends</span> <span class=\"nc\">MyDouble</span><span class=\"o\">(</span> <span class=\"n\">num</span> <span class=\"o\">)</span> <span class=\"o\">{</span>\n    <span class=\"k\">override</span> <span class=\"k\">def</span> <span class=\"o\">+(</span><span class=\"n\">x</span><span class=\"k\">:</span> <span class=\"kt\">Int</span><span class=\"o\">)</span><span class=\"k\">:</span> <span class=\"kt\">Int</span> <span class=\"o\">=</span> <span class=\"n\">num</span> <span class=\"o\">+</span> <span class=\"n\">x</span>\n<span class=\"o\">}</span>\n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 34757998,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "briandignan@gmail.com",
            "sender_full_name": "Brian Dignan (F'13)",
            "sender_id": 2886,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "type inference oddity",
            "submessages": [],
            "timestamp": 1423270762,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/3d8a0205f76df6ec7742292f8635addd71801017?x=x&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>The compiler has an issue with <code>override def +(x: Int): Int = num + x</code> because the return type (Int) doesn't match the return type of the inherited method (Double)</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 34758090,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "briandignan@gmail.com",
            "sender_full_name": "Brian Dignan (F'13)",
            "sender_id": 2886,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "type inference oddity",
            "submessages": [],
            "timestamp": 1423270860,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"lizabeth.kent@gmail.com\">@Libby Kent (W1'14)</span> I can't seem to figure out how to come up with an example, but I don't think it's an implicit conversion issue, or at least Eclipse doesn't think it is.</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 34758576,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "type inference oddity",
            "submessages": [],
            "timestamp": 1423271821,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p>This has made me realize I don't know the difference between <code>Int</code>, <code>Integer</code>, etc. But here's an example:</p>\n<div class=\"codehilite\"><pre><span class=\"n\">scala</span><span class=\"o\">&gt;</span> <span class=\"k\">implicit</span> <span class=\"k\">def</span> <span class=\"n\">integerToDouble</span><span class=\"o\">(</span><span class=\"n\">i</span><span class=\"k\">:</span> <span class=\"kt\">Integer</span><span class=\"o\">)</span><span class=\"k\">:</span> <span class=\"kt\">Double</span> <span class=\"o\">=</span> <span class=\"mf\">99.0</span>\n<span class=\"n\">scala</span><span class=\"o\">&gt;</span> <span class=\"nc\">List</span><span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mf\">1.0</span><span class=\"o\">)</span>\n<span class=\"n\">res</span><span class=\"k\">:</span> <span class=\"kt\">List</span><span class=\"o\">[</span><span class=\"kt\">Double</span><span class=\"o\">]</span> <span class=\"k\">=</span> <span class=\"nc\">List</span><span class=\"o\">(</span><span class=\"mf\">1.0</span><span class=\"o\">,</span> <span class=\"mf\">1.0</span><span class=\"o\">)</span>\n<span class=\"n\">scala</span><span class=\"o\">&gt;</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"k\">:</span> <span class=\"kt\">Integer</span><span class=\"o\">)</span> <span class=\"k\">:</span> <span class=\"kt\">Double</span>\n<span class=\"mf\">99.0</span>\n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 34758928,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "type inference oddity",
            "submessages": [],
            "timestamp": 1423272540,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/3d8a0205f76df6ec7742292f8635addd71801017?x=x&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>So for your second example:</p>\n<div class=\"codehilite\"><pre><span class=\"n\">scala</span><span class=\"o\">&gt;</span> <span class=\"nc\">List</span><span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">++</span> <span class=\"nc\">List</span><span class=\"o\">(</span><span class=\"mf\">1.0</span><span class=\"o\">)</span>\n<span class=\"n\">res3</span><span class=\"k\">:</span> <span class=\"kt\">List</span><span class=\"o\">[</span><span class=\"kt\">AnyVal</span><span class=\"o\">]</span> <span class=\"k\">=</span> <span class=\"nc\">List</span><span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mf\">1.0</span><span class=\"o\">)</span>\n</pre></div>\n\n\n<p>Does weak conformance not apply because it's operating on collections of numbers instead of just numbers?</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 34759070,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "briandignan@gmail.com",
            "sender_full_name": "Brian Dignan (F'13)",
            "sender_id": 2886,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "type inference oddity",
            "submessages": [],
            "timestamp": 1423272855,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p>I thought weak conformance did apply there--the implicit isn't being triggered at all.</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 34759082,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "type inference oddity",
            "submessages": [],
            "timestamp": 1423272926,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p>Hmm, interesting:</p>\n<div class=\"codehilite\"><pre><span class=\"k\">val</span> <span class=\"n\">i</span><span class=\"k\">:</span> <span class=\"kt\">Integer</span> <span class=\"o\">=</span> <span class=\"mi\">1</span>\n<span class=\"nc\">List</span><span class=\"o\">(</span><span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"mf\">1.0</span><span class=\"o\">)</span> <span class=\"k\">#</span> <span class=\"o\">--&gt;</span> <span class=\"nc\">List</span><span class=\"o\">[</span><span class=\"kt\">Any</span><span class=\"o\">]</span> <span class=\"k\">=</span> <span class=\"nc\">List</span><span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mf\">1.0</span><span class=\"o\">)</span>\n<span class=\"nc\">List</span><span class=\"o\">(</span><span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"k\">#</span> <span class=\"o\">--&gt;</span> <span class=\"nc\">List</span><span class=\"o\">[</span><span class=\"kt\">Any</span><span class=\"o\">]</span> <span class=\"k\">=</span> <span class=\"nc\">List</span><span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 34759343,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "type inference oddity",
            "submessages": [],
            "timestamp": 1423273504,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p>I think that makes sense though, since weak conformance only applies to <code>Int</code>s (a Scala thing), not <code>Integer</code>s, which sound like they're just <code>java.lang.Integer</code>s.</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 34759396,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "type inference oddity",
            "submessages": [],
            "timestamp": 1423273652,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p>So that behaves a lot more like what you were expecting <span class=\"user-mention\" data-user-email=\"briandignan@gmail.com\">@Brian Dignan (F'13)</span>.</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 34759399,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "type inference oddity",
            "submessages": [],
            "timestamp": 1423273672,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/3d8a0205f76df6ec7742292f8635addd71801017?x=x&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>ah right.. Good call on it not applying to java.lang.Integer. For a second there I was really confused :)</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 34759490,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "briandignan@gmail.com",
            "sender_full_name": "Brian Dignan (F'13)",
            "sender_id": 2886,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "type inference oddity",
            "submessages": [],
            "timestamp": 1423273847,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/3d8a0205f76df6ec7742292f8635addd71801017?x=x&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>I feel like the more that I've used Scala over the past ~16 months (since my HS batch), the more I've grown to like it</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 34759589,
            "is_me_message": false,
            "last_edit_timestamp": 1423274073,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "briandignan@gmail.com",
            "sender_full_name": "Brian Dignan (F'13)",
            "sender_id": 2886,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "scala is awesome!",
            "submessages": [],
            "timestamp": 1423274060,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/3d8a0205f76df6ec7742292f8635addd71801017?x=x&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>At this point I don't think I could ever go back to Java, there are just way too many features in Scala that I rely on now, and it's changed how I think about solving programming problems   </p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 34759701,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "briandignan@gmail.com",
            "sender_full_name": "Brian Dignan (F'13)",
            "sender_id": 2886,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "scala is awesome!",
            "submessages": [],
            "timestamp": 1423274392,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p><a href=\"https://github.com/RichRelevance/scalaz-netty\" target=\"_blank\" title=\"https://github.com/RichRelevance/scalaz-netty\">https://github.com/RichRelevance/scalaz-netty</a></p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 34780541,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "z-stream with Netty",
            "submessages": [],
            "timestamp": 1423328166,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p>Embedded in a Reddit discussion: <a href=\"http://www.reddit.com/r/scala/comments/2v5fqh/sbt_not_ready_for_the_corporate_world/coeq8ux\" target=\"_blank\" title=\"http://www.reddit.com/r/scala/comments/2v5fqh/sbt_not_ready_for_the_corporate_world/coeq8ux\">http://www.reddit.com/r/scala/comments/2v5fqh/sbt_not_ready_for_the_corporate_world/coeq8ux</a></p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 34847321,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "sbt guide",
            "submessages": [],
            "timestamp": 1423490964,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/a897e9d6a0e8aff13a39e0515c38ee2d9482c809?x=x&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>riddle me this...<br>\n<a href=\"https://gist.github.com/aguestuser/c45fe10cea8abb4ed0f4\" target=\"_blank\" title=\"https://gist.github.com/aguestuser/c45fe10cea8abb4ed0f4\">https://gist.github.com/aguestuser/c45fe10cea8abb4ed0f4</a></p>\n<p>which is just this:</p>\n<div class=\"codehilite\"><pre>\n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 35791433,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "guest.austin@gmail.com",
            "sender_full_name": "Austin Guest (they) (SP2'19)",
            "sender_id": 6930,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "type riddle...",
            "submessages": [],
            "timestamp": 1425082382,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/a897e9d6a0e8aff13a39e0515c38ee2d9482c809?x=x&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>which is just this:</p>\n<div class=\"codehilite\"><pre>  //Riddle me this...\n\n  //This compiles:\n\n  def plotGrowth[A,T[B] &lt;: Seq[B]](l: T[A], fn: T[A] =&gt; T[A]): Boolean = {\n    val intervals = (0 to 50).map(_ * l.size / 50)\n    intervals map { i =&gt;\n      val sub = l.take(i)\n      System.gc()\n      val start = System.nanoTime\n      val elapsed = (System.nanoTime - start)\n      println(s&quot;$i, $elapsed&quot;) }\n    true }\n\n  // As does this:\n\n  def plotGrowthA[A](l: ArrayBuffer[A], fn: ArrayBuffer[A] =&gt; ArrayBuffer[A]): Boolean = {\n    val intervals = (0 to 50).map(_ * l.size / 50)\n    intervals map { i =&gt;\n      val sub = l.take(i)\n      val elapsed = time(sub,fn)\n      println(s&quot;$i, $elapsed&quot;) }\n    true }\n\n  def plotGrowthL[A](l: List[A], fn: List[A] =&gt; List[A]): Boolean = {\n    val intervals = (0 to 50).map(_ * l.size / 50)\n    intervals map { i =&gt;\n      val sub = l.take(i)\n      val elapsed = time(sub,fn)\n      println(s&quot;$i, $elapsed&quot;) }\n    true }\n\n  def time[A,T[B] &lt;: Seq[B]](l: T[A], fn: T[A] =&gt; T[A]): Long = {\n    System.gc()\n    val start = System.nanoTime\n    fn(l)\n    (System.nanoTime - start) / 1000 /*to millis*/ }\n  // But this does not:\n\n  def plotGrowthDumb[A,T[B] &lt;: Seq[B]](l: T[A], fn: T[A] =&gt; T[A]): Boolean = {\n    val intervals = (0 to 50).map(_ * l.size / 50)\n    intervals map { i =&gt;\n      val sub = l.take(i)\n      val elapsed = time(sub,fn)\n      println(s&quot;$i, $elapsed&quot;) }\n    true }\n  def time[A,T[B] &lt;: Seq[B]](l: T[A], fn: T[A] =&gt; T[A]): Long = {\n    System.gc()\n    val start = System.nanoTime\n    fn(l)\n    (System.nanoTime - start) / 1000 /*to millis*/ }\n  // call to `time` on line 45 complains about the argument `fn`\n  // says it expects a function of type `Seq[A] =&gt; Seq[A]`\n  // but got one of type `T[A] =&gt; T[A]`\n\n  // anyone got any ideas? \n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 35791502,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "guest.austin@gmail.com",
            "sender_full_name": "Austin Guest (they) (SP2'19)",
            "sender_id": 6930,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "type riddle...",
            "submessages": [],
            "timestamp": 1425082461,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/a897e9d6a0e8aff13a39e0515c38ee2d9482c809?x=x&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p><span class=\"user-mention\" data-user-email=\"alan@hackerschool.com\">@Alan O'Donnell</span> ?</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 35791509,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "guest.austin@gmail.com",
            "sender_full_name": "Austin Guest (they) (SP2'19)",
            "sender_id": 6930,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "type riddle...",
            "submessages": [],
            "timestamp": 1425082477,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p>Hmm, I don't know. This example has made me realize I don't really understand how those bounds work.</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 35809759,
            "is_me_message": false,
            "last_edit_timestamp": 1425097847,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "type riddle...",
            "submessages": [],
            "timestamp": 1425096985,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"nada.amin@gmail.com\">@Nada Amin</span> any ideas?</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 35809769,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "type riddle...",
            "submessages": [],
            "timestamp": 1425097039,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p>Oh, actually, maybe I see the problem, but I don't see the solution ;)</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 35809909,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "type riddle...",
            "submessages": [],
            "timestamp": 1425097405,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p>I think what's happening is that when you call <code>val sub = l.take(i)</code>, you get back a <code>Seq[A]</code>, not a <code>T[A]</code> like you might have expected. You then call <code>time(sub, fn)</code>. Scala looks at the argument, <code>sub</code>, and infers that you're trying to call <code>time[A, Seq[A]]</code> (i.e. <code>time</code> but specialized to <code>T</code> --&gt; <code>Seq[A]</code>), and then expects to get passed a <code>Seq[A] =&gt; Seq[A]</code> function as its second argument.</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 35810006,
            "is_me_message": false,
            "last_edit_timestamp": 1425097611,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "type riddle...",
            "submessages": [],
            "timestamp": 1425097590,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p>But in fact, you're passing a <code>T[A] =&gt; T[A]</code>, which is *not* a subtype of <code>Seq[A] =&gt; Seq[A]</code>, because functions are contravariant in their argument type.</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 35810013,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "type riddle...",
            "submessages": [],
            "timestamp": 1425097668,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p>So one question I have is why <code>l.take</code> returns a <code>Seq[A]</code> and not a <code>T[A]</code>.</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 35810056,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "type riddle...",
            "submessages": [],
            "timestamp": 1425097718,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"nada.amin@gmail.com\">@Nada Amin</span> as a related question, what do underscores mean in type parameter sections? I'm used to seeing things like</p>\n<div class=\"codehilite\"><pre><span class=\"k\">import</span> <span class=\"nn\">scalaz.Functor</span>\n<span class=\"k\">def</span> <span class=\"n\">myFmap</span><span class=\"o\">[</span><span class=\"kt\">A</span>, <span class=\"kt\">B</span>, <span class=\"kt\">F</span><span class=\"o\">[</span><span class=\"k\">_</span><span class=\"o\">]</span> <span class=\"kt\">:</span> <span class=\"kt\">Functor</span><span class=\"o\">](</span><span class=\"n\">x</span><span class=\"k\">:</span> <span class=\"kt\">F</span><span class=\"o\">[</span><span class=\"kt\">A</span><span class=\"o\">])(</span><span class=\"n\">f</span><span class=\"k\">:</span> <span class=\"kt\">A</span> <span class=\"o\">=&gt;</span> <span class=\"n\">B</span><span class=\"o\">)</span><span class=\"k\">:</span> <span class=\"kt\">F</span><span class=\"o\">[</span><span class=\"kt\">B</span><span class=\"o\">]</span> <span class=\"k\">=</span> <span class=\"n\">implicitly</span><span class=\"o\">[</span><span class=\"kt\">Functor</span><span class=\"o\">[</span><span class=\"kt\">F</span><span class=\"o\">]].</span><span class=\"n\">map</span><span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">)(</span><span class=\"n\">f</span><span class=\"o\">)</span>\n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 35810330,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "type riddle...",
            "submessages": [],
            "timestamp": 1425098348,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p>But I can apparently type things like <code>[T[_] &lt;: Seq[_]]</code> in type parameter sections, and I'm not sure what that means.</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 35810334,
            "is_me_message": false,
            "last_edit_timestamp": 1425098403,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "type riddle...",
            "submessages": [],
            "timestamp": 1425098385,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p>I guess you could do something yucky like this:</p>\n<div class=\"codehilite\"><pre><span class=\"k\">def</span> <span class=\"n\">plotGrowthDumb</span><span class=\"o\">[</span><span class=\"kt\">A</span>, <span class=\"kt\">T</span><span class=\"o\">[</span><span class=\"kt\">A</span><span class=\"o\">]</span> <span class=\"k\">&lt;:</span> <span class=\"kt\">SeqLike</span><span class=\"o\">[</span><span class=\"kt\">A</span>, <span class=\"kt\">T</span><span class=\"o\">[</span><span class=\"kt\">A</span><span class=\"o\">]]](</span><span class=\"n\">l</span><span class=\"k\">:</span> <span class=\"kt\">T</span><span class=\"o\">[</span><span class=\"kt\">A</span><span class=\"o\">],</span> <span class=\"n\">fn</span><span class=\"k\">:</span> <span class=\"kt\">T</span><span class=\"o\">[</span><span class=\"kt\">A</span><span class=\"o\">]</span> <span class=\"k\">=&gt;</span> <span class=\"n\">T</span><span class=\"o\">[</span><span class=\"kt\">A</span><span class=\"o\">])</span><span class=\"k\">:</span> <span class=\"kt\">Boolean</span> <span class=\"o\">=</span> <span class=\"o\">{</span>\n    <span class=\"k\">val</span> <span class=\"n\">intervals</span> <span class=\"k\">=</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"n\">to</span> <span class=\"mi\">50</span><span class=\"o\">).</span><span class=\"n\">map</span><span class=\"o\">(</span><span class=\"k\">_</span> <span class=\"o\">*</span> <span class=\"n\">l</span><span class=\"o\">.</span><span class=\"n\">size</span> <span class=\"o\">/</span> <span class=\"mi\">50</span><span class=\"o\">)</span>\n    <span class=\"n\">intervals</span> <span class=\"n\">map</span> <span class=\"o\">{</span> <span class=\"n\">i</span> <span class=\"k\">=&gt;</span>\n      <span class=\"k\">val</span> <span class=\"n\">sub</span> <span class=\"k\">=</span> <span class=\"n\">l</span><span class=\"o\">.</span><span class=\"n\">take</span><span class=\"o\">(</span><span class=\"n\">i</span><span class=\"o\">)</span>\n      <span class=\"k\">val</span> <span class=\"n\">elapsed</span> <span class=\"k\">=</span> <span class=\"n\">time</span><span class=\"o\">(</span><span class=\"n\">sub</span><span class=\"o\">,</span><span class=\"n\">fn</span><span class=\"o\">)</span>\n      <span class=\"n\">println</span><span class=\"o\">(</span><span class=\"n\">s</span><span class=\"s\">&quot;$i, $elapsed&quot;</span><span class=\"o\">)</span> <span class=\"o\">}</span>\n    <span class=\"kc\">true</span>\n<span class=\"o\">}</span>\n\n<span class=\"k\">def</span> <span class=\"n\">time</span><span class=\"o\">[</span><span class=\"kt\">A</span>, <span class=\"kt\">T</span><span class=\"o\">[</span><span class=\"kt\">A</span><span class=\"o\">]</span> <span class=\"k\">&lt;:</span> <span class=\"kt\">SeqLike</span><span class=\"o\">[</span><span class=\"kt\">A</span>, <span class=\"kt\">T</span><span class=\"o\">[</span><span class=\"kt\">A</span><span class=\"o\">]]](</span><span class=\"n\">l</span><span class=\"k\">:</span> <span class=\"kt\">T</span><span class=\"o\">[</span><span class=\"kt\">A</span><span class=\"o\">],</span> <span class=\"n\">fn</span><span class=\"k\">:</span> <span class=\"kt\">T</span><span class=\"o\">[</span><span class=\"kt\">A</span><span class=\"o\">]</span> <span class=\"k\">=&gt;</span> <span class=\"n\">T</span><span class=\"o\">[</span><span class=\"kt\">A</span><span class=\"o\">])</span><span class=\"k\">:</span> <span class=\"kt\">Long</span> <span class=\"o\">=</span> <span class=\"o\">{</span>\n  <span class=\"nc\">System</span><span class=\"o\">.</span><span class=\"n\">gc</span><span class=\"o\">()</span>\n  <span class=\"k\">val</span> <span class=\"n\">start</span> <span class=\"k\">=</span> <span class=\"nc\">System</span><span class=\"o\">.</span><span class=\"n\">nanoTime</span>\n  <span class=\"n\">fn</span><span class=\"o\">(</span><span class=\"n\">l</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"nc\">System</span><span class=\"o\">.</span><span class=\"n\">nanoTime</span> <span class=\"o\">-</span> <span class=\"n\">start</span><span class=\"o\">)</span> <span class=\"o\">/</span> <span class=\"mi\">1000</span> <span class=\"cm\">/*to millis*/</span> \n<span class=\"o\">}</span>\n\n<span class=\"k\">val</span> <span class=\"n\">example</span> <span class=\"k\">=</span> <span class=\"n\">plotGrowthDumb</span><span class=\"o\">(</span><span class=\"nc\">List</span><span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"mi\">2</span><span class=\"o\">,</span><span class=\"mi\">3</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">xs</span><span class=\"k\">:</span> <span class=\"kt\">List</span><span class=\"o\">[</span><span class=\"kt\">Int</span><span class=\"o\">])</span> <span class=\"k\">=&gt;</span> <span class=\"n\">xs</span><span class=\"o\">)</span>\n<span class=\"k\">val</span> <span class=\"n\">example2</span> <span class=\"k\">=</span> <span class=\"n\">plotGrowthDumb</span><span class=\"o\">(</span><span class=\"nc\">Vector</span><span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"mi\">2</span><span class=\"o\">,</span><span class=\"mi\">3</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">xs</span><span class=\"k\">:</span> <span class=\"kt\">Vector</span><span class=\"o\">[</span><span class=\"kt\">Int</span><span class=\"o\">])</span> <span class=\"k\">=&gt;</span> <span class=\"n\">xs</span><span class=\"o\">)</span>\n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 35810757,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "type riddle...",
            "submessages": [],
            "timestamp": 1425099400,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/a897e9d6a0e8aff13a39e0515c38ee2d9482c809?x=x&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>yucky but it works! couple things my IDE had to teach me about some of the above:</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 35829319,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "guest.austin@gmail.com",
            "sender_full_name": "Austin Guest (they) (SP2'19)",
            "sender_id": 6930,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "type riddle...",
            "submessages": [],
            "timestamp": 1425145958,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/a897e9d6a0e8aff13a39e0515c38ee2d9482c809?x=x&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>if you use <code>A</code> all the way through, the <code>A</code>'s in the higher-kinded type paramaters (ie: <code>T[A]</code>, <code>SeqLike[A...</code>, etc.. are actually shadowing the initial <code>A</code>. that's why i introduced a <code>B</code> to go in the \"type hole\" (what you could otherwise leave as a wildcard (as in <code>T[_]</code> or, more interestingly, <code>Monoid[_]</code>).  with that refactor, your code from above works just great. it even works on mutable collections like ArrayBuffers (testing which -- since i wanted to test imperative QuickSort in-place on a mutable array v. functional Quicksort on a list -- was the original motivation for this code). huzzah!</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 35829320,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "guest.austin@gmail.com",
            "sender_full_name": "Austin Guest (they) (SP2'19)",
            "sender_id": 6930,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "type riddle...",
            "submessages": [],
            "timestamp": 1425145967,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/a897e9d6a0e8aff13a39e0515c38ee2d9482c809?x=x&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>and...</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 35829321,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "guest.austin@gmail.com",
            "sender_full_name": "Austin Guest (they) (SP2'19)",
            "sender_id": 6930,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "type riddle...",
            "submessages": [],
            "timestamp": 1425145974,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/a897e9d6a0e8aff13a39e0515c38ee2d9482c809?x=x&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>on the question of wildcards with higher-kinded type paramaters...</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 35829331,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "guest.austin@gmail.com",
            "sender_full_name": "Austin Guest (they) (SP2'19)",
            "sender_id": 6930,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "type riddle...",
            "submessages": [],
            "timestamp": 1425146010,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/a897e9d6a0e8aff13a39e0515c38ee2d9482c809?x=x&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>i can't contribute all that much except to say that in this instance, i originally used them (to say <code>T[_] &lt;: Seq[_]</code> for example), but...</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 35829380,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "guest.austin@gmail.com",
            "sender_full_name": "Austin Guest (they) (SP2'19)",
            "sender_id": 6930,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "type riddle...",
            "submessages": [],
            "timestamp": 1425146056,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/a897e9d6a0e8aff13a39e0515c38ee2d9482c809?x=x&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>when i did that, when i examined the types of the expressions inside the function body (<code>l.take(i)</code> for example) it would tell me it was thinking of them as <code>T[Any]</code> or <code>Seq[Any]</code></p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 35829401,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "guest.austin@gmail.com",
            "sender_full_name": "Austin Guest (they) (SP2'19)",
            "sender_id": 6930,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "type riddle...",
            "submessages": [],
            "timestamp": 1425146136,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p>What do you mean by shadowing the initial <code>A</code>?</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 35829454,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "type riddle...",
            "submessages": [],
            "timestamp": 1425146208,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/a897e9d6a0e8aff13a39e0515c38ee2d9482c809?x=x&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>to enforce the fact that the boxed types needed to be the same across <code>T</code> and <code>Seq</code> and within the function from <code>T</code> to <code>T</code> that i was benchmarking, i had to introduce an explicit type parameter inside the type hole. to make sure that paramater didn't shadow the <code>A</code> i was using to refer to the actual type i was operating on, i had to change the paramaters in the type hole to <code>B</code> (which is merely to say that the <code>Seq</code> of something had to correspond t the same something for which i had a <code>T</code> of something</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 35829465,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "guest.austin@gmail.com",
            "sender_full_name": "Austin Guest (they) (SP2'19)",
            "sender_id": 6930,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "type riddle...",
            "submessages": [],
            "timestamp": 1425146250,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/a897e9d6a0e8aff13a39e0515c38ee2d9482c809?x=x&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>\"What do you mean by shadowing the initial A?\"... well:</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 35829469,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "guest.austin@gmail.com",
            "sender_full_name": "Austin Guest (they) (SP2'19)",
            "sender_id": 6930,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "type riddle...",
            "submessages": [],
            "timestamp": 1425146257,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/a897e9d6a0e8aff13a39e0515c38ee2d9482c809?x=x&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>not sure if eclipse will give you this</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 35829475,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "guest.austin@gmail.com",
            "sender_full_name": "Austin Guest (they) (SP2'19)",
            "sender_id": 6930,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "type riddle...",
            "submessages": [],
            "timestamp": 1425146267,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/a897e9d6a0e8aff13a39e0515c38ee2d9482c809?x=x&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>but if you write that type signature (with higher-kinded types enabled in the editor's pre-compiler settings -- this was annoying!)</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 35829518,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "guest.austin@gmail.com",
            "sender_full_name": "Austin Guest (they) (SP2'19)",
            "sender_id": 6930,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "type riddle...",
            "submessages": [],
            "timestamp": 1425146298,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/a897e9d6a0e8aff13a39e0515c38ee2d9482c809?x=x&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>it will highlight the A</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 35829522,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "guest.austin@gmail.com",
            "sender_full_name": "Austin Guest (they) (SP2'19)",
            "sender_id": 6930,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "type riddle...",
            "submessages": [],
            "timestamp": 1425146308,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p>Not totally following :)</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 35829527,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "type riddle...",
            "submessages": [],
            "timestamp": 1425146332,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/a897e9d6a0e8aff13a39e0515c38ee2d9482c809?x=x&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>k. one sec</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 35829529,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "guest.austin@gmail.com",
            "sender_full_name": "Austin Guest (they) (SP2'19)",
            "sender_id": 6930,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "type riddle...",
            "submessages": [],
            "timestamp": 1425146350,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p>The code I pasted compiles in Eclipse. Does it not compile in IntelliJ?</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 35829530,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "type riddle...",
            "submessages": [],
            "timestamp": 1425146354,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/a897e9d6a0e8aff13a39e0515c38ee2d9482c809?x=x&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>so if you write: <code>plotGrowthDumb[A, T[A] &lt;: SeqLike[A, T[A]]]</code></p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 35829543,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "guest.austin@gmail.com",
            "sender_full_name": "Austin Guest (they) (SP2'19)",
            "sender_id": 6930,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "type riddle...",
            "submessages": [],
            "timestamp": 1425146390,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/a897e9d6a0e8aff13a39e0515c38ee2d9482c809?x=x&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>IntelliJ will highlight the <code>A</code> in <code>T[A]</code></p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 35829568,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "guest.austin@gmail.com",
            "sender_full_name": "Austin Guest (they) (SP2'19)",
            "sender_id": 6930,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "type riddle...",
            "submessages": [],
            "timestamp": 1425146404,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/a897e9d6a0e8aff13a39e0515c38ee2d9482c809?x=x&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>and it will say: \"suspicious shadowing by a Type Parameter\"</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 35829594,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "guest.austin@gmail.com",
            "sender_full_name": "Austin Guest (they) (SP2'19)",
            "sender_id": 6930,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "type riddle...",
            "submessages": [],
            "timestamp": 1425146425,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/a897e9d6a0e8aff13a39e0515c38ee2d9482c809?x=x&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>refering to the fact that we essentially named a variable the same thing as another variable we'd originally named</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 35829600,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "guest.austin@gmail.com",
            "sender_full_name": "Austin Guest (they) (SP2'19)",
            "sender_id": 6930,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "type riddle...",
            "submessages": [],
            "timestamp": 1425146459,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/a897e9d6a0e8aff13a39e0515c38ee2d9482c809?x=x&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>i'm not sure if this actually matters (in fact curious what type experts might have to say about it), but plugging in <code>B</code> so that it reads: <code>plotGrowthDumb[A, T[B] &lt;: SeqLike[B, T[B]]]</code> compiles and works</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 35829613,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "guest.austin@gmail.com",
            "sender_full_name": "Austin Guest (they) (SP2'19)",
            "sender_id": 6930,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "type riddle...",
            "submessages": [],
            "timestamp": 1425146520,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p>Ah, intersting. I figured I was saying <code>T[A]</code>, for that <code>A</code> I just mentioned, is a subtype of <code>Seq[A]</code>, also for that <code>A</code> I just mentioned.</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 35829657,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "type riddle...",
            "submessages": [],
            "timestamp": 1425146543,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/a897e9d6a0e8aff13a39e0515c38ee2d9482c809?x=x&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>with the full signatures being: <code>def plotGrowth[A,T[B] &lt;: SeqLike[B, T[B]]](l: T[A], fn: T[A] =&gt; T[A])</code></p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 35829659,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "guest.austin@gmail.com",
            "sender_full_name": "Austin Guest (they) (SP2'19)",
            "sender_id": 6930,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "type riddle...",
            "submessages": [],
            "timestamp": 1425146547,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/a897e9d6a0e8aff13a39e0515c38ee2d9482c809?x=x&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>yeah that's what i thought too! makes sense right?</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 35829667,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "guest.austin@gmail.com",
            "sender_full_name": "Austin Guest (they) (SP2'19)",
            "sender_id": 6930,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "type riddle...",
            "submessages": [],
            "timestamp": 1425146562,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p>Yeah, so this reinforces that I don't understand how type bounds work for higher-kinded types.</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 35829672,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "type riddle...",
            "submessages": [],
            "timestamp": 1425146578,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/a897e9d6a0e8aff13a39e0515c38ee2d9482c809?x=x&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>but the fact that the above works, seems to indicate that <code>B</code> is being used to specify a relationship between <code>T</code> and <code>Seq</code> and <code>A</code> is what gets passed into the argument parameters. eg: <code>l: T[A]</code> etc...</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 35829679,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "guest.austin@gmail.com",
            "sender_full_name": "Austin Guest (they) (SP2'19)",
            "sender_id": 6930,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "type riddle...",
            "submessages": [],
            "timestamp": 1425146608,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/a897e9d6a0e8aff13a39e0515c38ee2d9482c809?x=x&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>yeah: that has been very strongly reinforced for me by this whole excercise!</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 35829686,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "guest.austin@gmail.com",
            "sender_full_name": "Austin Guest (they) (SP2'19)",
            "sender_id": 6930,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "type riddle...",
            "submessages": [],
            "timestamp": 1425146623,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/a897e9d6a0e8aff13a39e0515c38ee2d9482c809?x=x&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>but hey: i can prove to myself that there are in fact some instances in which i might want to force myself to write imperative code!</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 35829712,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "guest.austin@gmail.com",
            "sender_full_name": "Austin Guest (they) (SP2'19)",
            "sender_id": 6930,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "type riddle...",
            "submessages": [],
            "timestamp": 1425146645,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/a897e9d6a0e8aff13a39e0515c38ee2d9482c809?x=x&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>ie: if i really really really care about the constant factor differences between the running time of my quicksort! ;D</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 35829731,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "guest.austin@gmail.com",
            "sender_full_name": "Austin Guest (they) (SP2'19)",
            "sender_id": 6930,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "type riddle...",
            "submessages": [],
            "timestamp": 1425146672,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/a897e9d6a0e8aff13a39e0515c38ee2d9482c809?x=x&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>(fortunately, i will likely not be in that position too much?)</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 35829739,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "guest.austin@gmail.com",
            "sender_full_name": "Austin Guest (they) (SP2'19)",
            "sender_id": 6930,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "type riddle...",
            "submessages": [],
            "timestamp": 1425146682,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/a897e9d6a0e8aff13a39e0515c38ee2d9482c809?x=x&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p><a href=\"https://docs.google.com/spreadsheets/d/1c2wsmFRHxL2uErgOWxwXfMjdcc5w9FHM0P94dxlsygc/edit#gid=77187768\" target=\"_blank\" title=\"https://docs.google.com/spreadsheets/d/1c2wsmFRHxL2uErgOWxwXfMjdcc5w9FHM0P94dxlsygc/edit#gid=77187768\">https://docs.google.com/spreadsheets/d/1c2wsmFRHxL2uErgOWxwXfMjdcc5w9FHM0P94dxlsygc/edit#gid=77187768</a></p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 35829755,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "guest.austin@gmail.com",
            "sender_full_name": "Austin Guest (they) (SP2'19)",
            "sender_id": 6930,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "type riddle...",
            "submessages": [],
            "timestamp": 1425146732,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/a897e9d6a0e8aff13a39e0515c38ee2d9482c809?x=x&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>also sort of interesting: using tail recursion does a pretty good job at coming close to what you'd get using a straight up while loop: <a href=\"https://docs.google.com/spreadsheets/d/1c2wsmFRHxL2uErgOWxwXfMjdcc5w9FHM0P94dxlsygc/edit#gid=1398130190\" target=\"_blank\" title=\"https://docs.google.com/spreadsheets/d/1c2wsmFRHxL2uErgOWxwXfMjdcc5w9FHM0P94dxlsygc/edit#gid=1398130190\">https://docs.google.com/spreadsheets/d/1c2wsmFRHxL2uErgOWxwXfMjdcc5w9FHM0P94dxlsygc/edit#gid=1398130190</a></p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 35829799,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "guest.austin@gmail.com",
            "sender_full_name": "Austin Guest (they) (SP2'19)",
            "sender_id": 6930,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "type riddle...",
            "submessages": [],
            "timestamp": 1425146787,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/a897e9d6a0e8aff13a39e0515c38ee2d9482c809?x=x&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>way to go scala compiler! <img alt=\":clap:\" class=\"emoji\" src=\"static/third/gemoji/images/emoji/clap.png\" title=\":clap:\"> </p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 35829809,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "guest.austin@gmail.com",
            "sender_full_name": "Austin Guest (they) (SP2'19)",
            "sender_id": 6930,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "type riddle...",
            "submessages": [],
            "timestamp": 1425146814,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/a897e9d6a0e8aff13a39e0515c38ee2d9482c809?x=x&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>in case anyone's curious, the resolution of this riddle in practice looks like this:<br>\n<a href=\"https://github.com/aguestuser/algorithms/blob/ca7eee8a73f986871182be024128a60c422d7087/src/main/scala/algos/benchmark/Benchmark.scala\" target=\"_blank\" title=\"https://github.com/aguestuser/algorithms/blob/ca7eee8a73f986871182be024128a60c422d7087/src/main/scala/algos/benchmark/Benchmark.scala\">https://github.com/aguestuser/algorithms/blob/ca7eee8a73f986871182be024128a60c422d7087/src/main/scala/algos/benchmark/Benchmark.scala</a></p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 35876131,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "guest.austin@gmail.com",
            "sender_full_name": "Austin Guest (they) (SP2'19)",
            "sender_id": 6930,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "type riddle...",
            "submessages": [],
            "timestamp": 1425243569,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/a897e9d6a0e8aff13a39e0515c38ee2d9482c809?x=x&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>used it on these set of sorting algorithms:<br>\n<a href=\"https://github.com/aguestuser/algorithms/blob/ca7eee8a73f986871182be024128a60c422d7087/src/main/scala/algos/sort/Sort.scala\" target=\"_blank\" title=\"https://github.com/aguestuser/algorithms/blob/ca7eee8a73f986871182be024128a60c422d7087/src/main/scala/algos/sort/Sort.scala\">https://github.com/aguestuser/algorithms/blob/ca7eee8a73f986871182be024128a60c422d7087/src/main/scala/algos/sort/Sort.scala</a></p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 35876133,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "guest.austin@gmail.com",
            "sender_full_name": "Austin Guest (they) (SP2'19)",
            "sender_id": 6930,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "type riddle...",
            "submessages": [],
            "timestamp": 1425243577,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/a897e9d6a0e8aff13a39e0515c38ee2d9482c809?x=x&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>to generate this nifty collection of benchmarks:<br>\n<a href=\"https://docs.google.com/spreadsheets/d/1c2wsmFRHxL2uErgOWxwXfMjdcc5w9FHM0P94dxlsygc/edit#gid=821246506\" target=\"_blank\" title=\"https://docs.google.com/spreadsheets/d/1c2wsmFRHxL2uErgOWxwXfMjdcc5w9FHM0P94dxlsygc/edit#gid=821246506\">https://docs.google.com/spreadsheets/d/1c2wsmFRHxL2uErgOWxwXfMjdcc5w9FHM0P94dxlsygc/edit#gid=821246506</a></p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 35876134,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "guest.austin@gmail.com",
            "sender_full_name": "Austin Guest (they) (SP2'19)",
            "sender_id": 6930,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "type riddle...",
            "submessages": [],
            "timestamp": 1425243580,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/a897e9d6a0e8aff13a39e0515c38ee2d9482c809?x=x&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>thanks <span class=\"user-mention\" data-user-email=\"alan@hackerschool.com\">@Alan O'Donnell</span> </p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 35876136,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "guest.austin@gmail.com",
            "sender_full_name": "Austin Guest (they) (SP2'19)",
            "sender_id": 6930,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "type riddle...",
            "submessages": [],
            "timestamp": 1425243586,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/a897e9d6a0e8aff13a39e0515c38ee2d9482c809?x=x&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>as an encore to solving the <code>plotGrowth</code> type signature riddle in another thread (so i could generate a bunch of cartesian plots to compare the run time of various sorting algorithms i'm learning) i thought it would be fun to try to test the sorting functions' outputs for linear (or quadratic) growth. but this proves a bit tricky. for example this does not work: <a href=\"https://github.com/aguestuser/algorithms/blob/ca7eee8a73f986871182be024128a60c422d7087/src/main/scala/algos/benchmark/Benchmark.scala#L30-L41\" target=\"_blank\" title=\"https://github.com/aguestuser/algorithms/blob/ca7eee8a73f986871182be024128a60c422d7087/src/main/scala/algos/benchmark/Benchmark.scala#L30-L41\">https://github.com/aguestuser/algorithms/blob/ca7eee8a73f986871182be024128a60c422d7087/src/main/scala/algos/benchmark/Benchmark.scala#L30-L41</a></p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 35876244,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "guest.austin@gmail.com",
            "sender_full_name": "Austin Guest (they) (SP2'19)",
            "sender_id": 6930,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "testing for linear growth",
            "submessages": [],
            "timestamp": 1425243775,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/a897e9d6a0e8aff13a39e0515c38ee2d9482c809?x=x&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>any leads on math/stats/graphing libraries in scala that could help me do this more elegantly (not to mention correctly)?</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 35876248,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "guest.austin@gmail.com",
            "sender_full_name": "Austin Guest (they) (SP2'19)",
            "sender_id": 6930,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "testing for linear growth",
            "submessages": [],
            "timestamp": 1425243803,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/e608c8cb27858cc5aaf7d0c1e57958d7?d=identicon&version=1",
            "client": "website",
            "content": "<p>Hi Austin! Have you considered using linear least squares algorithm for fitting a function to your data?<br>\nYou probably could use Breeze library as explained here: <a href=\"https://darrenjw.wordpress.com/2013/12/30/brief-introduction-to-scala-and-breeze-for-statistical-computing/\" target=\"_blank\" title=\"https://darrenjw.wordpress.com/2013/12/30/brief-introduction-to-scala-and-breeze-for-statistical-computing/\">https://darrenjw.wordpress.com/2013/12/30/brief-introduction-to-scala-and-breeze-for-statistical-computing/</a></p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 35876659,
            "is_me_message": false,
            "last_edit_timestamp": 1425244693,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "grzegorz.kossakowski@gmail.com",
            "sender_full_name": "Grzegorz Kossakowski",
            "sender_id": 7734,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "testing for linear growth",
            "submessages": [],
            "timestamp": 1425244653,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"guest.austin@gmail.com\">@Austin Guest (W1'14)</span> I got <span class=\"user-mention\" data-user-email=\"grzegorz.kossakowski@gmail.com\">@Grzegorz Kossakowski</span> to help me out :)</p>\n<div class=\"codehilite\"><pre><span class=\"k\">def</span> <span class=\"n\">plotGrowth</span><span class=\"o\">[</span><span class=\"kt\">A</span><span class=\"o\">](</span><span class=\"n\">l</span><span class=\"k\">:</span> <span class=\"kt\">Seq</span><span class=\"o\">[</span><span class=\"kt\">A</span><span class=\"o\">],</span> <span class=\"n\">fn</span><span class=\"k\">:</span> <span class=\"kt\">Seq</span><span class=\"o\">[</span><span class=\"kt\">A</span><span class=\"o\">]</span> <span class=\"k\">=&gt;</span> <span class=\"nc\">Seq</span><span class=\"o\">[</span><span class=\"kt\">A</span><span class=\"o\">])</span><span class=\"k\">:</span> <span class=\"kt\">Boolean</span> <span class=\"o\">=</span> <span class=\"o\">{</span>\n    <span class=\"k\">val</span> <span class=\"n\">intervals</span> <span class=\"k\">=</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"n\">to</span> <span class=\"mi\">50</span><span class=\"o\">).</span><span class=\"n\">map</span><span class=\"o\">(</span><span class=\"k\">_</span> <span class=\"o\">*</span> <span class=\"n\">l</span><span class=\"o\">.</span><span class=\"n\">size</span> <span class=\"o\">/</span> <span class=\"mi\">50</span><span class=\"o\">)</span>\n    <span class=\"n\">intervals</span> <span class=\"n\">map</span> <span class=\"o\">{</span> <span class=\"n\">i</span> <span class=\"k\">=&gt;</span>\n      <span class=\"k\">val</span> <span class=\"n\">sub</span> <span class=\"k\">=</span> <span class=\"n\">l</span><span class=\"o\">.</span><span class=\"n\">take</span><span class=\"o\">(</span><span class=\"n\">i</span><span class=\"o\">)</span>\n      <span class=\"k\">val</span> <span class=\"n\">elapsed</span> <span class=\"k\">=</span> <span class=\"n\">timeIt</span><span class=\"o\">(</span><span class=\"n\">sub</span><span class=\"o\">,</span> <span class=\"n\">fn</span><span class=\"o\">)</span>\n      <span class=\"n\">println</span><span class=\"o\">(</span><span class=\"n\">s</span><span class=\"s\">&quot;$i, $elapsed&quot;</span><span class=\"o\">)</span> \n    <span class=\"o\">}</span>\n    <span class=\"kc\">true</span>\n  <span class=\"o\">}</span>\n\n  <span class=\"k\">def</span> <span class=\"n\">timeIt</span><span class=\"o\">[</span><span class=\"kt\">A</span><span class=\"o\">](</span><span class=\"n\">as</span><span class=\"k\">:</span> <span class=\"kt\">Seq</span><span class=\"o\">[</span><span class=\"kt\">A</span><span class=\"o\">],</span> <span class=\"n\">f</span><span class=\"k\">:</span> <span class=\"kt\">Seq</span><span class=\"o\">[</span><span class=\"kt\">A</span><span class=\"o\">]</span> <span class=\"k\">=&gt;</span> <span class=\"nc\">Seq</span><span class=\"o\">[</span><span class=\"kt\">A</span><span class=\"o\">])</span><span class=\"k\">:</span> <span class=\"kt\">Long</span> <span class=\"o\">=</span> <span class=\"o\">{</span>\n    <span class=\"nc\">System</span><span class=\"o\">.</span><span class=\"n\">gc</span><span class=\"o\">()</span>\n    <span class=\"k\">val</span> <span class=\"n\">start</span> <span class=\"k\">=</span> <span class=\"nc\">System</span><span class=\"o\">.</span><span class=\"n\">nanoTime</span>\n    <span class=\"n\">f</span><span class=\"o\">(</span><span class=\"n\">as</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"nc\">System</span><span class=\"o\">.</span><span class=\"n\">nanoTime</span> <span class=\"o\">-</span> <span class=\"n\">start</span><span class=\"o\">)</span> <span class=\"o\">/</span> <span class=\"mi\">1000</span>\n  <span class=\"o\">}</span>\n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 35877466,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "type riddle...",
            "submessages": [],
            "timestamp": 1425246469,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/a897e9d6a0e8aff13a39e0515c38ee2d9482c809?x=x&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>wow! thanks <span class=\"user-mention\" data-user-email=\"alan@hackerschool.com\">@Alan O'Donnell</span>.  <span class=\"user-mention\" data-user-email=\"grzegorz.kossakowski@gmail.com\">@Grzegorz Kossakowski</span> -- v. excited to hear what you have to say about this sort of thing! the above is a LOT simpler, BUT... it doesn't seem to work for the following instance (in which i'm trying to benchmark the running time of quicksort implemented imperatively over an <code>ArrayBuffer</code>:</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 35877680,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "guest.austin@gmail.com",
            "sender_full_name": "Austin Guest (they) (SP2'19)",
            "sender_id": 6930,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "type riddle...",
            "submessages": [],
            "timestamp": 1425246875,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/a897e9d6a0e8aff13a39e0515c38ee2d9482c809?x=x&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<div class=\"codehilite\"><pre><span class=\"k\">lazy</span> <span class=\"k\">val</span> <span class=\"n\">wcr</span> <span class=\"k\">=</span> <span class=\"o\">(</span><span class=\"mi\">1000000</span> <span class=\"n\">to</span> <span class=\"mi\">1</span> <span class=\"n\">by</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"o\">)</span>\n<span class=\"k\">lazy</span> <span class=\"k\">val</span> <span class=\"n\">sab</span> <span class=\"k\">=</span> <span class=\"nc\">ArrayBuffer</span><span class=\"o\">(</span><span class=\"n\">wcr</span><span class=\"k\">:</span> <span class=\"k\">_</span><span class=\"kt\">*</span><span class=\"o\">)</span>\n\n<span class=\"n\">plotGrowth</span><span class=\"o\">[</span><span class=\"kt\">Int</span><span class=\"o\">](</span><span class=\"n\">wcab</span><span class=\"o\">,</span><span class=\"n\">qSort</span><span class=\"o\">[</span><span class=\"kt\">Int</span><span class=\"o\">])</span> <span class=\"c1\">// =&gt; won&#39;t compile. </span>\n<span class=\"c1\">// error message: &quot;Type mismatch: expected: (Seq[Int]) =&gt; Seq[Int], actual: (ArrayBuffer[Int]) =&gt; ArrayBuffer[Int]</span>\n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 35877900,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "guest.austin@gmail.com",
            "sender_full_name": "Austin Guest (they) (SP2'19)",
            "sender_id": 6930,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "type riddle...",
            "submessages": [],
            "timestamp": 1425247334,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/a897e9d6a0e8aff13a39e0515c38ee2d9482c809?x=x&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>the implementation of quick sort in question is:</p>\n<div class=\"codehilite\"><pre><span class=\"c1\">//imperative quicksort</span>\n  <span class=\"k\">def</span> <span class=\"n\">qSort</span><span class=\"o\">[</span><span class=\"kt\">A</span><span class=\"o\">](</span><span class=\"n\">as</span><span class=\"k\">:</span> <span class=\"kt\">ArrayBuffer</span><span class=\"o\">[</span><span class=\"kt\">A</span><span class=\"o\">])(</span><span class=\"k\">implicit</span> <span class=\"n\">o</span><span class=\"k\">:</span> <span class=\"kt\">Ordering</span><span class=\"o\">[</span><span class=\"kt\">A</span><span class=\"o\">])</span><span class=\"k\">:</span> <span class=\"kt\">ArrayBuffer</span><span class=\"o\">[</span><span class=\"kt\">A</span><span class=\"o\">]</span> <span class=\"k\">=</span> <span class=\"o\">{</span>\n\n    <span class=\"k\">def</span> <span class=\"n\">sort</span><span class=\"o\">(</span><span class=\"n\">l</span><span class=\"k\">:</span> <span class=\"kt\">Int</span><span class=\"o\">,</span> <span class=\"n\">r</span><span class=\"k\">:</span> <span class=\"kt\">Int</span><span class=\"o\">)</span><span class=\"k\">:</span> <span class=\"kt\">ArrayBuffer</span><span class=\"o\">[</span><span class=\"kt\">A</span><span class=\"o\">]</span> <span class=\"k\">=</span> <span class=\"o\">{</span>\n      <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">&gt;=</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"n\">as</span>\n      <span class=\"k\">else</span> <span class=\"o\">{</span>\n        <span class=\"k\">val</span> <span class=\"n\">p</span> <span class=\"k\">=</span> <span class=\"n\">choosePivot</span><span class=\"o\">(</span><span class=\"n\">l</span><span class=\"o\">,</span><span class=\"n\">r</span><span class=\"o\">)</span>\n        <span class=\"k\">val</span> <span class=\"n\">pp</span> <span class=\"k\">=</span> <span class=\"n\">partition</span><span class=\"o\">(</span><span class=\"n\">p</span><span class=\"o\">,</span><span class=\"n\">l</span><span class=\"o\">,</span><span class=\"n\">r</span><span class=\"o\">)</span>\n        <span class=\"n\">sort</span><span class=\"o\">(</span><span class=\"n\">l</span><span class=\"o\">,</span> <span class=\"n\">pp</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"o\">);</span> <span class=\"n\">sort</span><span class=\"o\">(</span><span class=\"n\">pp</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">}</span> <span class=\"o\">}</span>\n\n    <span class=\"k\">def</span> <span class=\"n\">partition</span><span class=\"o\">(</span><span class=\"n\">p</span><span class=\"k\">:</span> <span class=\"kt\">Int</span><span class=\"o\">,</span> <span class=\"n\">l</span><span class=\"k\">:</span> <span class=\"kt\">Int</span><span class=\"o\">,</span> <span class=\"n\">r</span><span class=\"k\">:</span> <span class=\"kt\">Int</span><span class=\"o\">)</span><span class=\"k\">:</span> <span class=\"kt\">Int</span> <span class=\"o\">=</span> <span class=\"o\">{</span>\n      <span class=\"k\">val</span> <span class=\"n\">piv</span> <span class=\"k\">=</span> <span class=\"n\">as</span><span class=\"o\">(</span><span class=\"n\">p</span><span class=\"o\">);</span> <span class=\"n\">swap</span><span class=\"o\">(</span><span class=\"n\">p</span><span class=\"o\">,</span><span class=\"n\">l</span><span class=\"o\">)</span>\n      <span class=\"nd\">@tailrec</span>\n      <span class=\"k\">def</span> <span class=\"n\">partitionOne</span><span class=\"o\">(</span><span class=\"n\">i</span><span class=\"k\">:</span> <span class=\"kt\">Int</span><span class=\"o\">,</span> <span class=\"n\">ll</span><span class=\"k\">:</span> <span class=\"kt\">Int</span><span class=\"o\">,</span> <span class=\"n\">rr</span><span class=\"k\">:</span> <span class=\"kt\">Int</span><span class=\"o\">)</span><span class=\"k\">:</span> <span class=\"kt\">Int</span> <span class=\"o\">=</span> <span class=\"o\">{</span>\n        <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">ll</span> <span class=\"o\">&gt;</span> <span class=\"n\">rr</span><span class=\"o\">)</span> <span class=\"o\">{</span> <span class=\"n\">swap</span><span class=\"o\">(</span><span class=\"n\">i</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"n\">l</span><span class=\"o\">);</span> <span class=\"n\">i</span><span class=\"o\">-</span><span class=\"mi\">1</span> <span class=\"o\">}</span>\n        <span class=\"k\">else</span> <span class=\"o\">{</span>\n          <span class=\"k\">val</span> <span class=\"n\">newI</span> <span class=\"k\">=</span> <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">o</span><span class=\"o\">.</span><span class=\"n\">compare</span><span class=\"o\">(</span><span class=\"n\">as</span><span class=\"o\">(</span><span class=\"n\">ll</span><span class=\"o\">),</span><span class=\"n\">piv</span><span class=\"o\">)</span> <span class=\"o\">&lt;</span> <span class=\"mi\">0</span><span class=\"o\">){</span><span class=\"n\">swap</span><span class=\"o\">(</span><span class=\"n\">ll</span><span class=\"o\">,</span> <span class=\"n\">i</span><span class=\"o\">);</span> <span class=\"n\">i</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"o\">}</span> <span class=\"k\">else</span> <span class=\"n\">i</span>\n          <span class=\"n\">partitionOne</span><span class=\"o\">(</span><span class=\"n\">newI</span><span class=\"o\">,</span><span class=\"n\">ll</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"n\">rr</span><span class=\"o\">)</span> <span class=\"o\">}</span> <span class=\"o\">}</span>\n      <span class=\"n\">partitionOne</span><span class=\"o\">(</span><span class=\"n\">l</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"n\">l</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">}</span>\n\n    <span class=\"k\">def</span> <span class=\"n\">choosePivot</span><span class=\"o\">(</span><span class=\"n\">l</span><span class=\"k\">:</span> <span class=\"kt\">Int</span><span class=\"o\">,</span> <span class=\"n\">r</span><span class=\"k\">:</span> <span class=\"kt\">Int</span><span class=\"o\">)</span><span class=\"k\">:</span> <span class=\"kt\">Int</span> <span class=\"o\">=</span> <span class=\"n\">l</span> <span class=\"o\">+</span> <span class=\"o\">(</span><span class=\"n\">random</span> <span class=\"o\">*</span> <span class=\"o\">(</span><span class=\"n\">abs</span><span class=\"o\">(</span><span class=\"n\">l</span><span class=\"o\">-</span><span class=\"n\">r</span><span class=\"o\">)+</span><span class=\"mi\">1</span><span class=\"o\">)).</span><span class=\"n\">toInt</span>\n    <span class=\"k\">def</span> <span class=\"n\">swap</span><span class=\"o\">(</span><span class=\"n\">i</span><span class=\"k\">:</span> <span class=\"kt\">Int</span><span class=\"o\">,</span> <span class=\"n\">j</span><span class=\"k\">:</span> <span class=\"kt\">Int</span><span class=\"o\">)</span> <span class=\"o\">{</span> <span class=\"k\">val</span> <span class=\"n\">t</span> <span class=\"k\">=</span> <span class=\"n\">as</span><span class=\"o\">(</span><span class=\"n\">i</span><span class=\"o\">);</span> <span class=\"n\">as</span><span class=\"o\">(</span><span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"k\">=</span> <span class=\"n\">as</span><span class=\"o\">(</span><span class=\"n\">j</span><span class=\"o\">);</span> <span class=\"n\">as</span><span class=\"o\">(</span><span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"k\">=</span> <span class=\"n\">t</span> <span class=\"o\">}</span>\n\n    <span class=\"n\">sort</span><span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">,</span><span class=\"n\">as</span><span class=\"o\">.</span><span class=\"n\">size</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">}</span>\n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 35877906,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "guest.austin@gmail.com",
            "sender_full_name": "Austin Guest (they) (SP2'19)",
            "sender_id": 6930,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "type riddle...",
            "submessages": [],
            "timestamp": 1425247360,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/a897e9d6a0e8aff13a39e0515c38ee2d9482c809?x=x&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>come to think of it.. noticing this fact a few days ago, is (i think) what originally sent me down the path of trying to figure out the type bound paramaters approach...</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 35877969,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "guest.austin@gmail.com",
            "sender_full_name": "Austin Guest (they) (SP2'19)",
            "sender_id": 6930,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "type riddle...",
            "submessages": [],
            "timestamp": 1425247505,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p>Haha you're right, <span class=\"user-mention\" data-user-email=\"grzegorz.kossakowski@gmail.com\">@Grzegorz Kossakowski</span> and I took another look and decided my <code>SeqLike</code> suggestion is what you need to do :)</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 35878538,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "type riddle...",
            "submessages": [],
            "timestamp": 1425248713,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p>We're trying to figure out if there's an easier way, since this is kind of silly ;)</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 35878548,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "type riddle...",
            "submessages": [],
            "timestamp": 1425248751,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/a897e9d6a0e8aff13a39e0515c38ee2d9482c809?x=x&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p><span class=\"user-mention\" data-user-email=\"grzegorz.kossakowski@gmail.com\">@Grzegorz Kossakowski</span> this looks like EXACTLY what i was looking for! will take it for a spin and report back! thanks for the pointer. :)</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 35878549,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "guest.austin@gmail.com",
            "sender_full_name": "Austin Guest (they) (SP2'19)",
            "sender_id": 6930,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "testing for linear growth",
            "submessages": [],
            "timestamp": 1425248758,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/a897e9d6a0e8aff13a39e0515c38ee2d9482c809?x=x&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>eagerly awaiting the results of your inquiry. :)</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 35878586,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "guest.austin@gmail.com",
            "sender_full_name": "Austin Guest (they) (SP2'19)",
            "sender_id": 6930,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "type riddle...",
            "submessages": [],
            "timestamp": 1425248773,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p>Do you really need to do that <code>take</code> thing?</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 35878642,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "type riddle...",
            "submessages": [],
            "timestamp": 1425248920,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p>Why not have a function that just times an operation on a single list, and then call it multiple times?</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 35878655,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "type riddle...",
            "submessages": [],
            "timestamp": 1425248977,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p>Also, we decided that IntelliJ's shadowing warning is bogus; you want to use <code>A</code> again.</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 35878710,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "type riddle...",
            "submessages": [],
            "timestamp": 1425249080,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/a897e9d6a0e8aff13a39e0515c38ee2d9482c809?x=x&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>well but the point is to measure big-O: ie limits on growth. so we need to time operations on lists (or vectors, or arrays) of increasingly large size in order to plot T(n)</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 35879909,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "guest.austin@gmail.com",
            "sender_full_name": "Austin Guest (they) (SP2'19)",
            "sender_id": 6930,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "type riddle...",
            "submessages": [],
            "timestamp": 1425251643,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/a897e9d6a0e8aff13a39e0515c38ee2d9482c809?x=x&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>so passing a single list wouldn't work for that.. because by the constraints of the problem statement, what we're trying to do is *precisely* measure a bunch of different lists (each of which is bigger than the last one by some constant factor)</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 35879954,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "guest.austin@gmail.com",
            "sender_full_name": "Austin Guest (they) (SP2'19)",
            "sender_id": 6930,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "type riddle...",
            "submessages": [],
            "timestamp": 1425251692,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/a897e9d6a0e8aff13a39e0515c38ee2d9482c809?x=x&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>(specifically: list of size 20,000; then list of size 40,0000; then list of size 60,000... list of size 1,000,000). </p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 35879960,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "guest.austin@gmail.com",
            "sender_full_name": "Austin Guest (they) (SP2'19)",
            "sender_id": 6930,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "type riddle...",
            "submessages": [],
            "timestamp": 1425251734,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/a897e9d6a0e8aff13a39e0515c38ee2d9482c809?x=x&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>unless i'm missing a simpler way to do that?</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 35879964,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "guest.austin@gmail.com",
            "sender_full_name": "Austin Guest (they) (SP2'19)",
            "sender_id": 6930,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "type riddle...",
            "submessages": [],
            "timestamp": 1425251740,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"guest.austin@gmail.com\">@Austin Guest (W1'14)</span> why can't you separately time each list?</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 35881996,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "type riddle...",
            "submessages": [],
            "timestamp": 1425255647,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p><code>List(twentyK, fourtyK, sixtyK).map(goTimeIt)</code>, basically.</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 35882007,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "type riddle...",
            "submessages": [],
            "timestamp": 1425255692,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/a897e9d6a0e8aff13a39e0515c38ee2d9482c809?x=x&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>because i'm trying to test from 20k to 1 million in 50 increments? (maybe just set those up as sample data?)</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 35883598,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "guest.austin@gmail.com",
            "sender_full_name": "Austin Guest (they) (SP2'19)",
            "sender_id": 6930,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "type riddle...",
            "submessages": [],
            "timestamp": 1425258936,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/a897e9d6a0e8aff13a39e0515c38ee2d9482c809?x=x&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>and because maybe i want to paramaterize (and change the number of increments or the size of the lists based on looking at the plots?</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 35883602,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "guest.austin@gmail.com",
            "sender_full_name": "Austin Guest (they) (SP2'19)",
            "sender_id": 6930,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "type riddle...",
            "submessages": [],
            "timestamp": 1425258955,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/a897e9d6a0e8aff13a39e0515c38ee2d9482c809?x=x&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>(which, in experience, i have)</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 35883625,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "guest.austin@gmail.com",
            "sender_full_name": "Austin Guest (they) (SP2'19)",
            "sender_id": 6930,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "type riddle...",
            "submessages": [],
            "timestamp": 1425258965,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p>Yeah, I'm saying just set up the data you want to time in a list, and then map the timing function over it.</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 35884328,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "type riddle...",
            "submessages": [],
            "timestamp": 1425260476,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/a897e9d6a0e8aff13a39e0515c38ee2d9482c809?x=x&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>gotcha. but i'm not sure that gets me out of the yucky type requirement?</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 35895558,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "guest.austin@gmail.com",
            "sender_full_name": "Austin Guest (they) (SP2'19)",
            "sender_id": 6930,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "type riddle...",
            "submessages": [],
            "timestamp": 1425282136,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/a897e9d6a0e8aff13a39e0515c38ee2d9482c809?x=x&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>suppose i made a list of 50 lists (each having 20,000... 1,000,000 elements). so far so good! </p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 35895562,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "guest.austin@gmail.com",
            "sender_full_name": "Austin Guest (they) (SP2'19)",
            "sender_id": 6930,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "type riddle...",
            "submessages": [],
            "timestamp": 1425282147,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/a897e9d6a0e8aff13a39e0515c38ee2d9482c809?x=x&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>but then i want to make a list of 50 array buffers and then a list of 50 vectors. this is because the main thing i want to benchmark is the relative growth rate of different functional/imperative implementations of different sorts over different collections.</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 35895566,
            "is_me_message": false,
            "last_edit_timestamp": 1425317917,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "guest.austin@gmail.com",
            "sender_full_name": "Austin Guest (they) (SP2'19)",
            "sender_id": 6930,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "type riddle...",
            "submessages": [],
            "timestamp": 1425282166,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/a897e9d6a0e8aff13a39e0515c38ee2d9482c809?x=x&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>for example: is merge sort on lists faster than merge sort on vectors. (spoiler: yes! by a fairly significant constant factor!).</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 35895570,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "guest.austin@gmail.com",
            "sender_full_name": "Austin Guest (they) (SP2'19)",
            "sender_id": 6930,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "type riddle...",
            "submessages": [],
            "timestamp": 1425282175,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/a897e9d6a0e8aff13a39e0515c38ee2d9482c809?x=x&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>so i still wind up having to have a <code>time</code> function that takes various subclasses of <code>Seq</code> and (as far as i can see) i still need the funky time signature to get it to work... unless i'm missing something?</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 35895573,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "guest.austin@gmail.com",
            "sender_full_name": "Austin Guest (they) (SP2'19)",
            "sender_id": 6930,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "type riddle...",
            "submessages": [],
            "timestamp": 1425282187,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/a897e9d6a0e8aff13a39e0515c38ee2d9482c809?x=x&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>maybe this graph makes it a bit clearer why i would want to go through so much trouble to do such a thing? <a href=\"/user_uploads/13/oD9yL1ZyCUuxow5BgkBhPoGi/sortruntimes.png\" target=\"_blank\" title=\"sortruntimes.png\">sortruntimes.png</a> </p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/13/oD9yL1ZyCUuxow5BgkBhPoGi/sortruntimes.png\" target=\"_blank\" title=\"sortruntimes.png\"><img src=\"/user_uploads/13/oD9yL1ZyCUuxow5BgkBhPoGi/sortruntimes.png\"></a></div>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 35895796,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "guest.austin@gmail.com",
            "sender_full_name": "Austin Guest (they) (SP2'19)",
            "sender_id": 6930,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "type riddle...",
            "submessages": [],
            "timestamp": 1425282717,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/a897e9d6a0e8aff13a39e0515c38ee2d9482c809?x=x&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>(ie: the point of the exercise was to make that graph... so as to make some decisions about what data structures i wanted to use in my implementations... etc)</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 35895940,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "guest.austin@gmail.com",
            "sender_full_name": "Austin Guest (they) (SP2'19)",
            "sender_id": 6930,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "type riddle...",
            "submessages": [],
            "timestamp": 1425282997,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/e608c8cb27858cc5aaf7d0c1e57958d7?d=identicon&version=1",
            "client": "website",
            "content": "<p>Hi <span class=\"user-mention\" data-user-email=\"guest.austin@gmail.com\">@Austin Guest (W1'14)</span>! I get now what you are trying to do and I think you got it right. You need this funky method signature. If take one step back and look what's going on you'll see it's rather sophisticated. The <code>take</code> method is parametrized by two type arguments:</p>\n<p>- type constructor that specifies what kind of collection the method will return (e.g. ArrayBuffer, List, Vector, etc.)<br>\n  - type of elements in the collection it returns (this type is being passed to the type constructor above)</p>\n<p>What's more, this type constructor is not an arbitrary type constructor, but such that applied to any type it gives you collection type (e.g. is a subtype of Seq).</p>\n<p>We don't have more concise way in Scala to express such type-level computations and constraints.</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 35911633,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "grzegorz.kossakowski@gmail.com",
            "sender_full_name": "Grzegorz Kossakowski",
            "sender_id": 7734,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "type riddle...",
            "submessages": [],
            "timestamp": 1425310187,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/e608c8cb27858cc5aaf7d0c1e57958d7?d=identicon&version=1",
            "client": "website",
            "content": "<p>Hi <span class=\"user-mention\" data-user-email=\"alan@hackerschool.com\">@Alan O'Donnell</span>! I checked scoping of existential type sugar we've talked about yesterday. So <code>List[_]</code> expands to <code>List[_$1] forSome { type _$1}</code>.</p>\n<p>You can verify this in REPL using <code>:power</code> mode:</p>\n<div class=\"codehilite\"><pre><span class=\"n\">reify</span> <span class=\"o\">{</span> <span class=\"k\">type</span> <span class=\"kt\">Foo</span> <span class=\"o\">=</span> <span class=\"nc\">List</span><span class=\"o\">[</span><span class=\"k\">_</span><span class=\"o\">]</span> <span class=\"o\">}</span>\n<span class=\"n\">res0</span><span class=\"k\">:</span> <span class=\"kt\">$r.intp.global.Expr</span><span class=\"o\">[</span><span class=\"kt\">Unit</span><span class=\"o\">]</span> <span class=\"k\">=</span>\n<span class=\"nc\">Expr</span><span class=\"o\">[</span><span class=\"kt\">Unit</span><span class=\"o\">]({</span>\n  <span class=\"k\">type</span> <span class=\"kt\">Foo</span> <span class=\"o\">=</span> <span class=\"n\">`package`</span><span class=\"o\">.</span><span class=\"nc\">List</span><span class=\"o\">[</span><span class=\"k\">_</span><span class=\"kt\">$1</span><span class=\"o\">]</span> <span class=\"k\">forSome</span> <span class=\"o\">{</span>\n    <span class=\"o\">&lt;</span><span class=\"n\">synthetic</span><span class=\"o\">&gt;</span> <span class=\"k\">type</span> <span class=\"k\">_</span><span class=\"kt\">$1</span>\n  <span class=\"o\">};</span>\n  <span class=\"o\">()</span>\n<span class=\"o\">})</span>\n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 35911831,
            "is_me_message": false,
            "last_edit_timestamp": 1425310382,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "grzegorz.kossakowski@gmail.com",
            "sender_full_name": "Grzegorz Kossakowski",
            "sender_id": 7734,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "scope of existential type",
            "submessages": [],
            "timestamp": 1425310372,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p>Ah, I'm going to have so much fun with that <code>:power</code> option :)</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 35912921,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "scope of existential type",
            "submessages": [],
            "timestamp": 1425311577,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/a897e9d6a0e8aff13a39e0515c38ee2d9482c809?x=x&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>cool beans!</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 35915168,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "guest.austin@gmail.com",
            "sender_full_name": "Austin Guest (they) (SP2'19)",
            "sender_id": 6930,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "scope of existential type",
            "submessages": [],
            "timestamp": 1425313698,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/a897e9d6a0e8aff13a39e0515c38ee2d9482c809?x=x&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>Trying to take the ocassion of just having implemented a bunch of sorting algorithms to test on randomized inputs (which I've never done before and seems like it would be useful on big data sets).</p>\n<p>So, for example, to test whether my implementation of merge sort correctly sorts a list of 10,000 *random* ints, I wrote the following:</p>\n<div class=\"codehilite\"><pre>  <span class=\"c1\">// property test</span>\n  <span class=\"k\">def</span> <span class=\"n\">didSort</span><span class=\"o\">[</span><span class=\"kt\">A</span>, <span class=\"kt\">T</span><span class=\"o\">[</span><span class=\"kt\">B</span><span class=\"o\">]</span> <span class=\"k\">&lt;:</span> <span class=\"kt\">SeqLike</span><span class=\"o\">[</span><span class=\"kt\">B</span>, <span class=\"kt\">T</span><span class=\"o\">[</span><span class=\"kt\">B</span><span class=\"o\">]]](</span><span class=\"n\">c1</span><span class=\"k\">:</span> <span class=\"kt\">T</span><span class=\"o\">[</span><span class=\"kt\">A</span><span class=\"o\">],</span> <span class=\"n\">c2</span><span class=\"k\">:</span> <span class=\"kt\">T</span><span class=\"o\">[</span><span class=\"kt\">A</span><span class=\"o\">])(</span><span class=\"k\">implicit</span> <span class=\"n\">o</span><span class=\"k\">:</span> <span class=\"kt\">Ordering</span><span class=\"o\">[</span><span class=\"kt\">A</span><span class=\"o\">])</span><span class=\"k\">:</span> <span class=\"kt\">Boolean</span> <span class=\"o\">=</span> <span class=\"o\">{</span>\n\n    <span class=\"k\">def</span> <span class=\"n\">sameSet</span><span class=\"o\">(</span><span class=\"n\">c1</span><span class=\"k\">:</span> <span class=\"kt\">T</span><span class=\"o\">[</span><span class=\"kt\">A</span><span class=\"o\">],</span> <span class=\"n\">c2</span><span class=\"k\">:</span> <span class=\"kt\">T</span><span class=\"o\">[</span><span class=\"kt\">A</span><span class=\"o\">])</span><span class=\"k\">:</span> <span class=\"kt\">Boolean</span> <span class=\"o\">=</span> <span class=\"n\">c1</span><span class=\"o\">.</span><span class=\"n\">toSet</span> <span class=\"o\">==</span> <span class=\"n\">c2</span><span class=\"o\">.</span><span class=\"n\">toSet</span>\n    <span class=\"k\">def</span> <span class=\"n\">sameSize</span><span class=\"o\">(</span><span class=\"n\">c1</span><span class=\"k\">:</span> <span class=\"kt\">T</span><span class=\"o\">[</span><span class=\"kt\">A</span><span class=\"o\">],</span> <span class=\"n\">c2</span><span class=\"k\">:</span> <span class=\"kt\">T</span><span class=\"o\">[</span><span class=\"kt\">A</span><span class=\"o\">])</span><span class=\"k\">:</span> <span class=\"kt\">Boolean</span> <span class=\"o\">=</span> <span class=\"n\">c1</span><span class=\"o\">.</span><span class=\"n\">size</span> <span class=\"o\">==</span> <span class=\"n\">c2</span><span class=\"o\">.</span><span class=\"n\">size</span>\n    <span class=\"c1\">//    def correctBounds(c1: T[A], c2: T[A]): Boolean = c1.min == c2.head &amp;&amp; c2.max == c2(c2.size-1)</span>\n    <span class=\"c1\">// i think the above is redundant if the other 3 hold?</span>\n    <span class=\"k\">def</span> <span class=\"n\">ordered</span><span class=\"o\">(</span><span class=\"n\">c</span><span class=\"k\">:</span> <span class=\"kt\">T</span><span class=\"o\">[</span><span class=\"kt\">A</span><span class=\"o\">])</span><span class=\"k\">:</span> <span class=\"kt\">Boolean</span> <span class=\"o\">=</span> <span class=\"o\">{</span>\n      <span class=\"nd\">@tailrec</span>\n      <span class=\"k\">def</span> <span class=\"n\">loop</span><span class=\"o\">(</span><span class=\"n\">lastRes</span><span class=\"k\">:</span> <span class=\"kt\">Boolean</span><span class=\"o\">,</span> <span class=\"n\">lastA</span><span class=\"k\">:</span> <span class=\"kt\">A</span><span class=\"o\">,</span> <span class=\"n\">as</span><span class=\"k\">:</span> <span class=\"kt\">T</span><span class=\"o\">[</span><span class=\"kt\">A</span><span class=\"o\">])</span><span class=\"k\">:</span> <span class=\"kt\">Boolean</span> <span class=\"o\">=</span> <span class=\"n\">as</span><span class=\"o\">.</span><span class=\"n\">size</span> <span class=\"k\">match</span> <span class=\"o\">{</span>\n        <span class=\"k\">case</span> <span class=\"mi\">0</span> <span class=\"k\">=&gt;</span> <span class=\"n\">lastRes</span>\n        <span class=\"k\">case</span> <span class=\"k\">_</span> <span class=\"k\">=&gt;</span>\n          <span class=\"k\">if</span> <span class=\"o\">(!</span><span class=\"n\">lastRes</span><span class=\"o\">)</span> <span class=\"kc\">false</span>\n          <span class=\"k\">else</span> <span class=\"n\">loop</span><span class=\"o\">(</span><span class=\"n\">lastRes</span> <span class=\"o\">&amp;&amp;</span> <span class=\"o\">(</span><span class=\"n\">o</span><span class=\"o\">.</span><span class=\"n\">compare</span><span class=\"o\">(</span><span class=\"n\">lastA</span><span class=\"o\">,</span><span class=\"n\">as</span><span class=\"o\">.</span><span class=\"n\">head</span><span class=\"o\">)</span> <span class=\"o\">&lt;=</span> <span class=\"mi\">0</span><span class=\"o\">),</span> <span class=\"n\">as</span><span class=\"o\">.</span><span class=\"n\">head</span><span class=\"o\">,</span> <span class=\"n\">as</span><span class=\"o\">.</span><span class=\"n\">tail</span><span class=\"o\">)</span> <span class=\"o\">}</span>\n      <span class=\"n\">loop</span><span class=\"o\">(</span><span class=\"n\">lastRes</span><span class=\"k\">=</span><span class=\"kc\">true</span><span class=\"o\">,</span><span class=\"n\">c</span><span class=\"o\">.</span><span class=\"n\">head</span><span class=\"o\">,</span><span class=\"n\">c</span><span class=\"o\">.</span><span class=\"n\">tail</span><span class=\"o\">)</span> <span class=\"o\">}</span>\n\n    <span class=\"n\">sameSet</span><span class=\"o\">(</span><span class=\"n\">c1</span><span class=\"o\">,</span><span class=\"n\">c2</span><span class=\"o\">)</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">sameSize</span><span class=\"o\">(</span><span class=\"n\">c1</span><span class=\"o\">,</span><span class=\"n\">c2</span><span class=\"o\">)</span> <span class=\"o\">&amp;&amp;</span>  <span class=\"n\">ordered</span><span class=\"o\">(</span><span class=\"n\">c2</span><span class=\"o\">)</span> <span class=\"cm\">/*&amp;&amp; correctBounds(c1,c2) */</span> <span class=\"o\">}</span>\n\n<span class=\"c1\">//sample data</span>\n<span class=\"k\">lazy</span> <span class=\"k\">val</span> <span class=\"n\">rl</span> <span class=\"k\">=</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"n\">to</span> <span class=\"mi\">10000</span><span class=\"o\">).</span><span class=\"n\">map</span><span class=\"o\">(</span><span class=\"k\">_</span> <span class=\"k\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">random</span> <span class=\"o\">*</span> <span class=\"mi\">10000</span><span class=\"o\">).</span><span class=\"n\">toInt</span><span class=\"o\">).</span><span class=\"n\">toList</span>\n\n<span class=\"c1\">// somewhere in my specs (using specs2):</span>\n<span class=\"s\">&quot;merge sort on a list&quot;</span> <span class=\"n\">should</span> <span class=\"o\">{</span>\n    <span class=\"c1\">//...</span>\n    <span class=\"s\">&quot;sort a list of 10,000 random ints&quot;</span> <span class=\"n\">in</span> <span class=\"o\">{</span>\n      <span class=\"n\">didSort</span><span class=\"o\">(</span><span class=\"n\">rl</span><span class=\"o\">,</span><span class=\"n\">mSort</span><span class=\"o\">(</span><span class=\"n\">rl</span><span class=\"o\">))</span> <span class=\"o\">===</span> <span class=\"kc\">true</span>\n    <span class=\"o\">}</span>\n   <span class=\"c1\">//...</span>\n  <span class=\"o\">}</span>\n</pre></div>\n\n\n<p>so here's the question: i'm told that what i just wrote is a \"properties-based test\" neat! i've heard those are cool! could i rewrite the above as a properties-based test in ScalaCheck? how would i do that?</p>\n<p>examination of the docs gets me as far as: \"yes, you could do that, and it would look something like...\"</p>\n<div class=\"codehilite\"><pre><span class=\"k\">import</span> <span class=\"nn\">org.scalacheck.Properties</span>\n<span class=\"k\">import</span> <span class=\"nn\">org.scalacheck.Prop.forAll</span>\n\n<span class=\"k\">object</span> <span class=\"nc\">SeqSpecification</span> <span class=\"k\">extends</span> <span class=\"nc\">Properties</span><span class=\"o\">(</span><span class=\"s\">&quot;Seq&quot;</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n  <span class=\"n\">property</span><span class=\"o\">(</span><span class=\"s\">&quot;sort&quot;</span><span class=\"o\">)</span> <span class=\"k\">=</span> <span class=\"n\">forAll</span> <span class=\"o\">{</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"k\">:</span> <span class=\"kt\">SomeSpecificationOfAsType</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"k\">:</span> <span class=\"kt\">SomeSpecificationOfBsType</span><span class=\"o\">)</span> <span class=\"k\">=&gt;</span>\n    <span class=\"c1\">//insert some version of `sameSet`, `sameSize`, and `ordered` here</span>\n  <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</pre></div>\n\n\n<p>and then i'm left with the questions: is this a good idea to pursue further? is this what ScalaCheck is supposed to be used for? how would i get the types right? where and how would i run my tests, etc..? also: if this is *not* what ScalaCheck is for... what is it for?</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 35934699,
            "is_me_message": false,
            "last_edit_timestamp": 1425333948,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "guest.austin@gmail.com",
            "sender_full_name": "Austin Guest (they) (SP2'19)",
            "sender_id": 6930,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "ScalaCheck for properties-based testing",
            "submessages": [],
            "timestamp": 1425333881,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/42e5e35fcf7a07bfbbd83456efe5c6821f87c9bc?x=x&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>how would I use this function?</p>\n<div class=\"codehilite\"><pre>  def endsWith(suffix: String*): File =&gt; Boolean = { file =&gt;\n    suffix.exists(file.getName.endsWith)\n  }\n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 35938762,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "virajosinha@gmail.com",
            "sender_full_name": "Viraj Sinha (SP1'15)",
            "sender_id": 7634,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "fancy function type",
            "submessages": [],
            "timestamp": 1425338253,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p><code>endsWith(\"a\", \"b\", \"not sure why a bunch of strings though\")(myFile)</code></p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 35938829,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "fancy function type",
            "submessages": [],
            "timestamp": 1425338324,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/e608c8cb27858cc5aaf7d0c1e57958d7?d=identicon&version=1",
            "client": "website",
            "content": "<p>Hi Viraj!<br>\nYou could use it like that: endsWith(\".scala\")(new File(\"My.scala\")</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 35938830,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "grzegorz.kossakowski@gmail.com",
            "sender_full_name": "Grzegorz Kossakowski",
            "sender_id": 7734,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "fancy function type",
            "submessages": [],
            "timestamp": 1425338326,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/e608c8cb27858cc5aaf7d0c1e57958d7?d=identicon&version=1",
            "client": "website",
            "content": "<p>Haha! I'm too slow :-(</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 35938854,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "grzegorz.kossakowski@gmail.com",
            "sender_full_name": "Grzegorz Kossakowski",
            "sender_id": 7734,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "fancy function type",
            "submessages": [],
            "timestamp": 1425338357,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p>Ha, your example is better though ;)</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 35938923,
            "is_me_message": false,
            "last_edit_timestamp": 1425338447,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "fancy function type",
            "submessages": [],
            "timestamp": 1425338440,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"virajosinha@gmail.com\">@Viraj Sinha (SP1'15)</span>, where does that function come from?</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 35938943,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "fancy function type",
            "submessages": [],
            "timestamp": 1425338469,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/42e5e35fcf7a07bfbbd83456efe5c6821f87c9bc?x=x&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>hah i figured it out  independently as well! the double parens notation is some sweet sugar though, I hadn't gotten that</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 35938954,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "virajosinha@gmail.com",
            "sender_full_name": "Viraj Sinha (SP1'15)",
            "sender_id": 7634,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "fancy function type",
            "submessages": [],
            "timestamp": 1425338485,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/42e5e35fcf7a07bfbbd83456efe5c6821f87c9bc?x=x&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p><span class=\"user-mention\" data-user-email=\"alan@hackerschool.com\">@Alan O'Donnell</span> it's a modified version of something I found on stackoverflow</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 35938961,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "virajosinha@gmail.com",
            "sender_full_name": "Viraj Sinha (SP1'15)",
            "sender_id": 7634,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "fancy function type",
            "submessages": [],
            "timestamp": 1425338499,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/42e5e35fcf7a07bfbbd83456efe5c6821f87c9bc?x=x&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>(with my modifications)</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 35938965,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "virajosinha@gmail.com",
            "sender_full_name": "Viraj Sinha (SP1'15)",
            "sender_id": 7634,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "fancy function type",
            "submessages": [],
            "timestamp": 1425338506,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p>Ah. I feel like it would be more common to see it as</p>\n<div class=\"codehilite\"><pre><span class=\"k\">def</span> <span class=\"n\">endsWith</span><span class=\"o\">(</span><span class=\"n\">suffices</span><span class=\"k\">:</span> <span class=\"kt\">List</span><span class=\"o\">[</span><span class=\"kt\">String</span><span class=\"o\">],</span> <span class=\"n\">file</span><span class=\"k\">:</span> <span class=\"kt\">File</span><span class=\"o\">)</span><span class=\"k\">:</span> <span class=\"kt\">Boolean</span> <span class=\"o\">=</span> <span class=\"n\">suffices</span><span class=\"o\">.</span><span class=\"n\">exist</span><span class=\"o\">(</span><span class=\"n\">file</span><span class=\"o\">.</span><span class=\"n\">getName</span><span class=\"o\">.</span><span class=\"n\">endsWith</span><span class=\"o\">)</span>\n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 35939030,
            "is_me_message": false,
            "last_edit_timestamp": 1425339164,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "fancy function type",
            "submessages": [],
            "timestamp": 1425338551,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p>That is, just put all the arguments in the signature.</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 35939043,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "fancy function type",
            "submessages": [],
            "timestamp": 1425338570,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/42e5e35fcf7a07bfbbd83456efe5c6821f87c9bc?x=x&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>that does make more sense esp for how i'd be using it.</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 35939138,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "virajosinha@gmail.com",
            "sender_full_name": "Viraj Sinha (SP1'15)",
            "sender_id": 7634,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "fancy function type",
            "submessages": [],
            "timestamp": 1425338666,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/42e5e35fcf7a07bfbbd83456efe5c6821f87c9bc?x=x&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>ok next question, if i wanted to take the first function as a generic, and make a function that checks if a file has a \"music\" file type...</p>\n<div class=\"codehilite\"><pre>  val musicFleExtensions: Array[String] = List(&quot;.mp3&quot;, &quot;.mp4&quot;, &quot;.flac&quot;, &quot;.ogg&quot;, &quot;.wav&quot;)\n\n  def endsWith(suffix: String*): File =&gt; Boolean = { file =&gt;\n    suffix.exists(file.getName.endsWith)\n  }\n\n  def isMusicFiletype: File =&gt; Boolean = endsWith(&quot;.mp3&quot;) // valid\n  def isMusicFiletype: File =&gt; Boolean = endsWith(musicFleExtensions) // invalid \n</pre></div>\n\n\n<p>how would I unpack the List of file extensions so that the variable number of args in endsWith can handle it?<br>\nor would it be better to just have endsWith take a List[String] in the first place?</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 35939593,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "virajosinha@gmail.com",
            "sender_full_name": "Viraj Sinha (SP1'15)",
            "sender_id": 7634,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "fancy function type",
            "submessages": [],
            "timestamp": 1425339195,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/42e5e35fcf7a07bfbbd83456efe5c6821f87c9bc?x=x&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>or should the list of extensions not be a List but a tuple instead</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 35939672,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "virajosinha@gmail.com",
            "sender_full_name": "Viraj Sinha (SP1'15)",
            "sender_id": 7634,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "fancy function type",
            "submessages": [],
            "timestamp": 1425339283,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/42e5e35fcf7a07bfbbd83456efe5c6821f87c9bc?x=x&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>or a one liner like this</p>\n<div class=\"codehilite\"><pre>  def isMusicFiletype(file: File): Boolean = musicFleExtensions.exists(file.getName.endsWith)\n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 35939848,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "virajosinha@gmail.com",
            "sender_full_name": "Viraj Sinha (SP1'15)",
            "sender_id": 7634,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "fancy function type",
            "submessages": [],
            "timestamp": 1425339563,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p>You can technically do this: <code>endsWith(musicFileExtensions: _*)</code>.</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 35950016,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "fancy function type",
            "submessages": [],
            "timestamp": 1425353157,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p>But this is why I don't really recommend the <code>String*</code> type; I'd just use <code>suffix: List[String]</code> instead, since then you can pass in a list of strings.</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 35950058,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "fancy function type",
            "submessages": [],
            "timestamp": 1425353196,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p>The syntax <code>String*</code> says <code>endsWith</code> takes an arbitrary number of  <code>String</code> *arguments*, so you can say <code>endsWith(this, that, etc)</code>. But when you try to call <code>endsWith(musicFileExtensions)</code>, you're passing a single argument that happens to be a list/array of strings, which isn't the right type. The goofy <code>: _*</code> syntax says, yeah, I know I'm not passing the right kind of thing, just splice it in though.</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 35950107,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "fancy function type",
            "submessages": [],
            "timestamp": 1425353290,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/d495685876a5a195b6ef5fb9a269b6d0dcd5c5fe?x=x&version=1",
            "client": "website",
            "content": "<p>There's some enthusiasm in my workplace for implementing <code>map</code>, <code>foreach</code> for certain collections/monads using macros.  If you write</p>\n<div class=\"codehilite\"><pre><span class=\"n\">blah</span><span class=\"o\">.</span><span class=\"n\">map</span><span class=\"o\">(</span><span class=\"s\">&quot;hi &quot;</span> <span class=\"o\">+</span> <span class=\"k\">_</span><span class=\"o\">)</span>\n</pre></div>\n\n\n<p>then, normally, the <code>_+</code> gets compiled into a <code>Function1</code>,  whose <code>apply</code> method is then called within the map.  With a macro implementation, you'll end up with something along the lines (assuming <code>blah</code> is a <code>TraversableOnce</code> and that it has some kind of ) like</p>\n<div class=\"codehilite\"><pre><span class=\"o\">{</span>\n   <span class=\"k\">val</span> <span class=\"n\">it$01</span> <span class=\"k\">=</span> <span class=\"n\">blah</span><span class=\"o\">.</span><span class=\"n\">iterator</span>\n   <span class=\"k\">val</span> <span class=\"n\">b$01</span> <span class=\"k\">=</span> <span class=\"n\">blah</span><span class=\"o\">.</span><span class=\"n\">genericBuilder</span><span class=\"o\">[</span><span class=\"kt\">String</span><span class=\"o\">]</span>\n   <span class=\"k\">while</span><span class=\"o\">(</span><span class=\"n\">it$01</span><span class=\"o\">.</span><span class=\"n\">hasNext</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n      <span class=\"k\">val</span> <span class=\"n\">e$01</span> <span class=\"k\">=</span> \n      <span class=\"n\">b$01</span> <span class=\"o\">+=</span> <span class=\"o\">(</span><span class=\"s\">&quot;hi &quot;</span> <span class=\"o\">+</span> <span class=\"n\">it$01</span><span class=\"o\">.</span><span class=\"n\">next</span> <span class=\"o\">)</span>\n   <span class=\"o\">}</span>\n  <span class=\"n\">b$01</span><span class=\"o\">.</span><span class=\"n\">result</span>\n</pre></div>\n\n\n<p>In theory, this can be faster and cause less memory churn, dangling closures, etc.  In practice, it definitely helps with something like <code>Range.foreach</code> (where the translation to <code>while</code> is what you're advised to do in performance-critical situations anyway), it seems sort of reasonable for something like <code>Option</code>, where a function call is heavy compared to the underlying logic.  It's also perhaps necessary within existing macro or macro-like frameworks such as <code>async</code>.<br>\nAnd it's amusingly arcane, with lots of semi-documented, deeply nested AST components.  For a masochist, it's much more fun than macros in a truly homoiconic language.<br>\nBut... it feels wrong somehow to be doing this a lot.  We end up with a lot of code that only a few people can understand, that is likely brittle (Scala macro semantics tends to change between version).  If it is truly necessary to do this sort of thing in Scala, then then that would seem to imply that Scala is not a good foundation to be building on.<br>\nAnyway, this is what I'm doing nowadays.</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 36012561,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "pnf@podsnap.com",
            "sender_full_name": "Peter Fraenkel (he) (S'13)",
            "sender_id": 2142,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "implementing monadic HOFs as macros",
            "submessages": [],
            "timestamp": 1425435997,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p>This looks pretty neat: <a href=\"https://skillsmatter.com/skillscasts/4916-metascala-a-tiny-diy-jvm\" target=\"_blank\" title=\"https://skillsmatter.com/skillscasts/4916-metascala-a-tiny-diy-jvm\">https://skillsmatter.com/skillscasts/4916-metascala-a-tiny-diy-jvm</a></p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 36044118,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "A JVM in Scala!",
            "submessages": [],
            "timestamp": 1425490963,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p>(You have to sign up, but skillsmatter has some cool talks.)</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 36044121,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "A JVM in Scala!",
            "submessages": [],
            "timestamp": 1425490981,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p><a href=\"https://github.com/lihaoyi/Metascala\" target=\"_blank\" title=\"https://github.com/lihaoyi/Metascala\">https://github.com/lihaoyi/Metascala</a></p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 36044131,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "A JVM in Scala!",
            "submessages": [],
            "timestamp": 1425490997,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/e608c8cb27858cc5aaf7d0c1e57958d7?d=identicon&version=1",
            "client": "website",
            "content": "<p>hi <span class=\"user-mention\" data-user-email=\"pnf@podsnap.com\">@Peter Fraenkel (S'13)</span> ! Are you around at HS to talk about it? I'm happy to give you some background on those problems and explain how we are solving performance problems in upstream Scala.</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 36044461,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "grzegorz.kossakowski@gmail.com",
            "sender_full_name": "Grzegorz Kossakowski",
            "sender_id": 7734,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "implementing monadic HOFs as macros",
            "submessages": [],
            "timestamp": 1425491433,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/e608c8cb27858cc5aaf7d0c1e57958d7?d=identicon&version=1",
            "client": "website",
            "content": "<p>For example, we plan <code>Range.foreach</code> to have native speed (as it was written using <code>while</code> loop manually) without involving any macros or any other work from the user.</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 36044504,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "grzegorz.kossakowski@gmail.com",
            "sender_full_name": "Grzegorz Kossakowski",
            "sender_id": 7734,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "implementing monadic HOFs as macros",
            "submessages": [],
            "timestamp": 1425491515,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/d495685876a5a195b6ef5fb9a269b6d0dcd5c5fe?x=x&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"grzegorz.kossakowski@gmail.com\">@Grzegorz Kossakowski</span> Not done with a compiler plugin either?</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 36047834,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "pnf@podsnap.com",
            "sender_full_name": "Peter Fraenkel (he) (S'13)",
            "sender_id": 2142,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "implementing monadic HOFs as macros",
            "submessages": [],
            "timestamp": 1425495174,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/e608c8cb27858cc5aaf7d0c1e57958d7?d=identicon&version=1",
            "client": "website",
            "content": "<p>Nope. It would be done by just optimizer. The idea is to inline <code>Range.foreach</code> and then optimize resulting code.</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 36061298,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "grzegorz.kossakowski@gmail.com",
            "sender_full_name": "Grzegorz Kossakowski",
            "sender_id": 7734,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "implementing monadic HOFs as macros",
            "submessages": [],
            "timestamp": 1425508975,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/e608c8cb27858cc5aaf7d0c1e57958d7?d=identicon&version=1",
            "client": "website",
            "content": "<p>This is happening now, see: <a href=\"https://github.com/scala/scala/pull/4312\" target=\"_blank\" title=\"https://github.com/scala/scala/pull/4312\">https://github.com/scala/scala/pull/4312</a></p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 36061407,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "grzegorz.kossakowski@gmail.com",
            "sender_full_name": "Grzegorz Kossakowski",
            "sender_id": 7734,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "implementing monadic HOFs as macros",
            "submessages": [],
            "timestamp": 1425509057,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/05737f7353d71ece81912e75bd95cf17?d=identicon&version=1",
            "client": "website",
            "content": "<p>Hey, in a project I came across a function defined such as </p>\n<div class=\"codehilite\"><pre>object Foo {\n  def isStopword(word: String) = {\n    stopwords = Set(&quot;a&quot;, &quot;and&quot;, &quot;to&quot;, ...)  // A small set of stop words\n    stopwords.contains(word)\n  }\n}\n</pre></div>\n\n\n<p>This function is actually called a lot and my first reaction was to move this Set of stop words directly into the object so that it's initialized only once instead of each time the function is called.</p>\n<p>But maybe the Scala compiler is smart enough to do it automatically. Do you guys know?</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 36068471,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "adrien.guillo@gmail.com",
            "sender_full_name": "Adrien Guillo (S1'17)",
            "sender_id": 6676,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "Compiler optimization",
            "submessages": [],
            "timestamp": 1425516210,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p>Huh. I would guess that the compiler doesn't do anything fancy, but I don't actually know. <span class=\"user-mention\" data-user-email=\"grzegorz.kossakowski@gmail.com\">@Grzegorz Kossakowski</span> ?</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 36071538,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "Compiler optimization",
            "submessages": [],
            "timestamp": 1425520661,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/e608c8cb27858cc5aaf7d0c1e57958d7?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"alan@hackerschool.com\">@Alan O'Donnell</span> I can't see the context of your question. What do you have in mind?</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 36073699,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "grzegorz.kossakowski@gmail.com",
            "sender_full_name": "Grzegorz Kossakowski",
            "sender_id": 7734,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "Compiler optimization",
            "submessages": [],
            "timestamp": 1425524268,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/05737f7353d71ece81912e75bd95cf17?d=identicon&version=1",
            "client": "website",
            "content": "<p>The compiler could rewrite something like this:</p>\n<div class=\"codehilite\"><pre><span class=\"k\">object</span> <span class=\"nc\">Foo</span> <span class=\"o\">{</span>\n  <span class=\"n\">stopwords</span> <span class=\"k\">=</span> <span class=\"nc\">Set</span><span class=\"o\">(</span><span class=\"s\">&quot;a&quot;</span><span class=\"o\">,</span> <span class=\"s\">&quot;and&quot;</span><span class=\"o\">,</span> <span class=\"s\">&quot;to&quot;</span><span class=\"o\">,</span> <span class=\"o\">...)</span>\n  <span class=\"k\">def</span> <span class=\"n\">isStopword</span><span class=\"o\">(</span><span class=\"n\">word</span><span class=\"k\">:</span> <span class=\"kt\">String</span><span class=\"o\">)</span> <span class=\"k\">=</span> <span class=\"n\">stopwords</span><span class=\"o\">.</span><span class=\"n\">contains</span><span class=\"o\">(</span><span class=\"n\">word</span><span class=\"o\">)</span>\n<span class=\"o\">}</span>\n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 36073760,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "adrien.guillo@gmail.com",
            "sender_full_name": "Adrien Guillo (S1'17)",
            "sender_id": 6676,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "Compiler optimization",
            "submessages": [],
            "timestamp": 1425524368,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/e608c8cb27858cc5aaf7d0c1e57958d7?d=identicon&version=1",
            "client": "website",
            "content": "<p>Oh, I see it now. No, compiler doesn't do anything fancy. Actually, it can't because it could lead to a memory leak.</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 36073761,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "grzegorz.kossakowski@gmail.com",
            "sender_full_name": "Grzegorz Kossakowski",
            "sender_id": 7734,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "Compiler optimization",
            "submessages": [],
            "timestamp": 1425524368,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/e608c8cb27858cc5aaf7d0c1e57958d7?d=identicon&version=1",
            "client": "website",
            "content": "<p>Imagine that <code>stopwords</code> was an array that consumes 1GB of memory.</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 36073819,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "grzegorz.kossakowski@gmail.com",
            "sender_full_name": "Grzegorz Kossakowski",
            "sender_id": 7734,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "Compiler optimization",
            "submessages": [],
            "timestamp": 1425524425,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/e608c8cb27858cc5aaf7d0c1e57958d7?d=identicon&version=1",
            "client": "website",
            "content": "<p>You might need it only in your method but if the compiler moved it out, you would end up with 1GB of memory locked down.</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 36073828,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "grzegorz.kossakowski@gmail.com",
            "sender_full_name": "Grzegorz Kossakowski",
            "sender_id": 7734,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "Compiler optimization",
            "submessages": [],
            "timestamp": 1425524450,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/05737f7353d71ece81912e75bd95cf17?d=identicon&version=1",
            "client": "website",
            "content": "<p>Right</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 36073830,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "adrien.guillo@gmail.com",
            "sender_full_name": "Adrien Guillo (S1'17)",
            "sender_id": 6676,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "Compiler optimization",
            "submessages": [],
            "timestamp": 1425524467,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/05737f7353d71ece81912e75bd95cf17?d=identicon&version=1",
            "client": "website",
            "content": "<p>Thank you</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 36073836,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "adrien.guillo@gmail.com",
            "sender_full_name": "Adrien Guillo (S1'17)",
            "sender_id": 6676,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "Compiler optimization",
            "submessages": [],
            "timestamp": 1425524497,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/e608c8cb27858cc5aaf7d0c1e57958d7?d=identicon&version=1",
            "client": "website",
            "content": "<p>You welcome!</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 36073864,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "grzegorz.kossakowski@gmail.com",
            "sender_full_name": "Grzegorz Kossakowski",
            "sender_id": 7734,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "Compiler optimization",
            "submessages": [],
            "timestamp": 1425524525,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p>Ah, interesting, I hadn't thought about that.</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 36074484,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "Compiler optimization",
            "submessages": [],
            "timestamp": 1425525718,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/d495685876a5a195b6ef5fb9a269b6d0dcd5c5fe?x=x&version=1",
            "client": "website",
            "content": "<p>Interesting.   I have to confess that, while I've messed around with ASTs (and implemented a bunch of monadic combinators as macros), I can't follow the compiler code so well.  I'd be grateful if you could walk me through it.  </p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 36097933,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "pnf@podsnap.com",
            "sender_full_name": "Peter Fraenkel (he) (S'13)",
            "sender_id": 2142,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "implementing monadic HOFs as macros",
            "submessages": [],
            "timestamp": 1425571559,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"joelburget@gmail.com\">@Joel Burget (SP1'15)</span> I'm curious what you think of this library: <a href=\"https://github.com/japgolly/scalajs-react\" target=\"_blank\" title=\"https://github.com/japgolly/scalajs-react\">https://github.com/japgolly/scalajs-react</a>.</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 36113929,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": ".js + react",
            "submessages": [],
            "timestamp": 1425587056,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p>Looks like they use lenses ;)</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 36113939,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": ".js + react",
            "submessages": [],
            "timestamp": 1425587065,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/f064a05448647a821438855810164407e4609eb9?x=x&version=2",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>looks quite nice!</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 36114049,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "joelburget@gmail.com",
            "sender_full_name": "Joel Burget (SP1'15)",
            "sender_id": 7624,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": ".js + react",
            "submessages": [],
            "timestamp": 1425587213,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/f064a05448647a821438855810164407e4609eb9?x=x&version=2",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>has a few features my library doesn't have</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 36114055,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "joelburget@gmail.com",
            "sender_full_name": "Joel Burget (SP1'15)",
            "sender_id": 7624,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": ".js + react",
            "submessages": [],
            "timestamp": 1425587221,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/f064a05448647a821438855810164407e4609eb9?x=x&version=2",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>definitely not qualified to speak on scala though</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 36114070,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "joelburget@gmail.com",
            "sender_full_name": "Joel Burget (SP1'15)",
            "sender_id": 7624,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": ".js + react",
            "submessages": [],
            "timestamp": 1425587249,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/f064a05448647a821438855810164407e4609eb9?x=x&version=2",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>no comment on the lens thing :P</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 36114157,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "joelburget@gmail.com",
            "sender_full_name": "Joel Burget (SP1'15)",
            "sender_id": 7624,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": ".js + react",
            "submessages": [],
            "timestamp": 1425587345,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/e608c8cb27858cc5aaf7d0c1e57958d7?d=identicon&version=1",
            "client": "website",
            "content": "<p>Sure. I'm around and free. Ping me when you are here.</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 36115949,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "grzegorz.kossakowski@gmail.com",
            "sender_full_name": "Grzegorz Kossakowski",
            "sender_id": 7734,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "implementing monadic HOFs as macros",
            "submessages": [],
            "timestamp": 1425589353,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/849c0e2e2c09df57ba091b26cf836d6a?d=identicon&version=1",
            "client": "website",
            "content": "<p>So I'm trying to make a monad instance in scala by extending <code>Monad</code> in scalaz. And I found <a href=\"http://stackoverflow.com/questions/20673717/make-an-arbitrary-class-in-scala-as-a-monad-instance\" target=\"_blank\" title=\"http://stackoverflow.com/questions/20673717/make-an-arbitrary-class-in-scala-as-a-monad-instance\">this post</a> on stackoverflow,  I'll paste the code here for convenience.</p>\n<div class=\"codehilite\"><pre><span class=\"k\">import</span> <span class=\"nn\">scalaz._</span><span class=\"o\">,</span> <span class=\"nc\">Scalaz</span><span class=\"o\">.</span><span class=\"k\">_</span>\n\n<span class=\"k\">sealed</span> <span class=\"k\">trait</span> <span class=\"nc\">Z</span><span class=\"o\">[</span><span class=\"kt\">T</span><span class=\"o\">]</span>\n<span class=\"nc\">case</span> <span class=\"k\">class</span> <span class=\"nc\">MyZLeft</span><span class=\"o\">[</span><span class=\"kt\">T</span><span class=\"o\">](</span><span class=\"n\">t</span><span class=\"k\">:</span> <span class=\"kt\">T</span><span class=\"o\">)</span> <span class=\"k\">extends</span> <span class=\"n\">Z</span><span class=\"o\">[</span><span class=\"kt\">T</span><span class=\"o\">]</span>\n<span class=\"k\">case</span> <span class=\"k\">class</span> <span class=\"nc\">MyZRight</span><span class=\"o\">[</span><span class=\"kt\">T</span><span class=\"o\">](</span><span class=\"n\">t</span><span class=\"k\">:</span> <span class=\"kt\">T</span><span class=\"o\">)</span> <span class=\"k\">extends</span> <span class=\"n\">Z</span><span class=\"o\">[</span><span class=\"kt\">T</span><span class=\"o\">]</span>\n\n<span class=\"k\">def</span> <span class=\"n\">swap</span><span class=\"o\">[</span><span class=\"kt\">T</span><span class=\"o\">](</span><span class=\"n\">z</span><span class=\"k\">:</span> <span class=\"kt\">Z</span><span class=\"o\">[</span><span class=\"kt\">T</span><span class=\"o\">])</span> <span class=\"k\">=</span> <span class=\"n\">z</span> <span class=\"k\">match</span> <span class=\"o\">{</span>\n  <span class=\"k\">case</span> <span class=\"nc\">MyZLeft</span><span class=\"o\">(</span><span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"k\">=&gt;</span> <span class=\"nc\">MyZRight</span><span class=\"o\">(</span><span class=\"n\">t</span><span class=\"o\">)</span>\n  <span class=\"k\">case</span> <span class=\"nc\">MyZRight</span><span class=\"o\">(</span><span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"k\">=&gt;</span> <span class=\"nc\">MyZLeft</span><span class=\"o\">(</span><span class=\"n\">t</span><span class=\"o\">)</span>\n<span class=\"o\">}</span>\n\n<span class=\"k\">implicit</span> <span class=\"k\">object</span> <span class=\"nc\">ZIsMonad</span> <span class=\"k\">extends</span> <span class=\"nc\">Monad</span><span class=\"o\">[</span><span class=\"kt\">Z</span><span class=\"o\">]</span> <span class=\"o\">{</span>\n  <span class=\"k\">def</span> <span class=\"n\">point</span><span class=\"o\">[</span><span class=\"kt\">A</span><span class=\"o\">](</span><span class=\"n\">a</span><span class=\"k\">:</span> <span class=\"o\">=&gt;</span> <span class=\"n\">A</span><span class=\"o\">)</span><span class=\"k\">:</span> <span class=\"kt\">Z</span><span class=\"o\">[</span><span class=\"kt\">A</span><span class=\"o\">]</span> <span class=\"k\">=</span> <span class=\"nc\">MyZRight</span><span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">)</span>\n  <span class=\"k\">def</span> <span class=\"n\">bind</span><span class=\"o\">[</span><span class=\"kt\">A</span>, <span class=\"kt\">B</span><span class=\"o\">](</span><span class=\"n\">fa</span><span class=\"k\">:</span> <span class=\"kt\">Z</span><span class=\"o\">[</span><span class=\"kt\">A</span><span class=\"o\">])(</span><span class=\"n\">f</span><span class=\"k\">:</span> <span class=\"kt\">A</span> <span class=\"o\">=&gt;</span> <span class=\"n\">Z</span><span class=\"o\">[</span><span class=\"kt\">B</span><span class=\"o\">])</span><span class=\"k\">:</span> <span class=\"kt\">Z</span><span class=\"o\">[</span><span class=\"kt\">B</span><span class=\"o\">]</span> <span class=\"k\">=</span> <span class=\"n\">fa</span> <span class=\"k\">match</span> <span class=\"o\">{</span>\n    <span class=\"k\">case</span> <span class=\"nc\">MyZLeft</span><span class=\"o\">(</span><span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"k\">=&gt;</span> <span class=\"n\">swap</span><span class=\"o\">(</span><span class=\"n\">f</span><span class=\"o\">(</span><span class=\"n\">t</span><span class=\"o\">))</span>\n    <span class=\"k\">case</span> <span class=\"nc\">MyZRight</span><span class=\"o\">(</span><span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"k\">=&gt;</span> <span class=\"n\">swap</span><span class=\"o\">(</span><span class=\"n\">f</span><span class=\"o\">(</span><span class=\"n\">t</span><span class=\"o\">))</span>\n  <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</pre></div>\n\n\n<p>I'm wondering why you need <code>implicit</code> at the beginning of the definition of <code>ZIsMonad</code>. I somewhat understand what <code>implicit</code>s do in Scala, but I don't know if the <code>implicit</code> in the above example is necessary.<br>\nAnd also one of the use cases is like this:</p>\n<div class=\"codehilite\"><pre><span class=\"k\">val</span> <span class=\"n\">z</span> <span class=\"k\">=</span> <span class=\"mf\">1.</span><span class=\"n\">point</span><span class=\"o\">[</span><span class=\"kt\">Z</span><span class=\"o\">]</span>\n</pre></div>\n\n\n<p>Is there some implicit converter somewhere that can convert <code>Int</code> to <code>Monad[Z]</code>? Or,  is it some other magic trick?</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 36345034,
            "is_me_message": false,
            "last_edit_timestamp": 1425940347,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "bz2228@columbia.edu",
            "sender_full_name": "Bocheng Zhou (W2'15)",
            "sender_id": 7091,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "Why do you need implicit here?",
            "submessages": [],
            "timestamp": 1425940293,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p>The <code>implicit</code> in front just says that your <code>ZIsMonad</code> should be available for implicit lookup whenever you need an implicit <code>Monad[Z]</code>.</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 36345531,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "Why do you need implicit here?",
            "submessages": [],
            "timestamp": 1425940679,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p>I wouldn't have thought the <code>1.point[Z]</code> would work.</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 36345612,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "Why do you need implicit here?",
            "submessages": [],
            "timestamp": 1425940758,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p>Unless the methods in an implicit object become implicitly available too?</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 36345673,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "Why do you need implicit here?",
            "submessages": [],
            "timestamp": 1425940833,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p>Yeah, that stuff doesn't compile for me :)</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 36346039,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "Why do you need implicit here?",
            "submessages": [],
            "timestamp": 1425941376,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/849c0e2e2c09df57ba091b26cf836d6a?d=identicon&version=1",
            "client": "website",
            "content": "<p>Hmm... It looks like it would compile in that accepted answer... I'm wondering why nobody pointed that out.</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 36346241,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "bz2228@columbia.edu",
            "sender_full_name": "Bocheng Zhou (W2'15)",
            "sender_id": 7091,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "Why do you need implicit here?",
            "submessages": [],
            "timestamp": 1425941659,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p>Ah, it does if you include the stuff at the bottom of the answer--I missed that part.</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 36346248,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "Why do you need implicit here?",
            "submessages": [],
            "timestamp": 1425941677,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<div class=\"codehilite\"><pre><span class=\"k\">implicit</span> <span class=\"k\">class</span> <span class=\"nc\">MonadPointer</span><span class=\"o\">[</span><span class=\"kt\">A</span><span class=\"o\">](</span><span class=\"n\">a</span><span class=\"k\">:</span> <span class=\"kt\">A</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n  <span class=\"k\">def</span> <span class=\"n\">point</span><span class=\"o\">[</span><span class=\"kt\">M</span><span class=\"o\">[</span><span class=\"k\">_</span><span class=\"o\">]</span><span class=\"kt\">:</span> <span class=\"kt\">Monad</span><span class=\"o\">]</span> <span class=\"k\">=</span> <span class=\"n\">implicitly</span><span class=\"o\">[</span><span class=\"kt\">Monad</span><span class=\"o\">[</span><span class=\"kt\">M</span><span class=\"o\">]].</span><span class=\"n\">point</span><span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">)</span>\n<span class=\"o\">}</span>\n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 36346253,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "Why do you need implicit here?",
            "submessages": [],
            "timestamp": 1425941688,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/849c0e2e2c09df57ba091b26cf836d6a?d=identicon&version=1",
            "client": "website",
            "content": "<p>I've been trying to use <code>compose</code> for function composition without success, the compiler always complains about type mismatch.  But when I tried to use <code>andThen</code>, the code compiles just fine.  I can't figure out why using <code>compose</code> won't compile. <br>\nHere's the code:</p>\n<div class=\"codehilite\"><pre><span class=\"k\">sealed</span> <span class=\"k\">trait</span> <span class=\"nc\">IO</span><span class=\"o\">[</span><span class=\"kt\">A</span><span class=\"o\">]</span> <span class=\"o\">{</span>\n  <span class=\"k\">def</span> <span class=\"n\">unit</span><span class=\"o\">[</span><span class=\"kt\">A</span><span class=\"o\">](</span><span class=\"n\">a</span> <span class=\"k\">:</span> <span class=\"kt\">A</span><span class=\"o\">)</span> <span class=\"k\">:</span> <span class=\"kt\">IO</span><span class=\"o\">[</span><span class=\"kt\">A</span><span class=\"o\">]</span> <span class=\"k\">=</span> <span class=\"nc\">Output</span><span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">)</span>\n  <span class=\"k\">def</span> <span class=\"n\">flatMap</span><span class=\"o\">[</span><span class=\"kt\">B</span><span class=\"o\">](</span><span class=\"n\">f</span> <span class=\"k\">:</span> <span class=\"kt\">A</span> <span class=\"o\">=&gt;</span> <span class=\"nc\">IO</span><span class=\"o\">[</span><span class=\"kt\">B</span><span class=\"o\">])</span> <span class=\"k\">:</span> <span class=\"kt\">IO</span><span class=\"o\">[</span><span class=\"kt\">B</span><span class=\"o\">]</span> <span class=\"k\">=</span> <span class=\"nc\">Sequence</span><span class=\"o\">(</span><span class=\"k\">this</span><span class=\"o\">,</span> <span class=\"n\">f</span><span class=\"o\">)</span>\n  <span class=\"c1\">//this doesn&#39;t compile!</span>\n  <span class=\"c1\">//type mismatch: found: A=&gt;B, required: ? =&gt; Nothing</span>\n  <span class=\"k\">def</span> <span class=\"n\">map</span><span class=\"o\">[</span><span class=\"kt\">B</span><span class=\"o\">](</span><span class=\"n\">f</span> <span class=\"k\">:</span> <span class=\"kt\">A</span> <span class=\"o\">=&gt;</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"k\">:</span> <span class=\"kt\">IO</span><span class=\"o\">[</span><span class=\"kt\">B</span><span class=\"o\">]</span> <span class=\"k\">=</span> <span class=\"n\">flatMap</span><span class=\"o\">((</span><span class=\"n\">unit</span> <span class=\"k\">_</span><span class=\"o\">)</span> <span class=\"n\">compose</span> <span class=\"n\">f</span><span class=\"o\">)</span>\n  <span class=\"c1\">// this compiles</span>\n  <span class=\"k\">def</span> <span class=\"n\">map</span><span class=\"o\">[</span><span class=\"kt\">B</span><span class=\"o\">](</span><span class=\"n\">f</span> <span class=\"k\">:</span> <span class=\"kt\">A</span> <span class=\"o\">=&gt;</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"k\">:</span> <span class=\"kt\">IO</span><span class=\"o\">[</span><span class=\"kt\">B</span><span class=\"o\">]</span> <span class=\"k\">=</span> <span class=\"n\">flatMap</span><span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">andThen</span> <span class=\"o\">(</span><span class=\"n\">unit</span> <span class=\"k\">_</span><span class=\"o\">))</span>\n<span class=\"o\">}</span> \n\n<span class=\"k\">case</span> <span class=\"k\">class</span> <span class=\"nc\">Output</span><span class=\"o\">[</span><span class=\"kt\">A</span><span class=\"o\">](</span><span class=\"n\">a</span> <span class=\"k\">:</span> <span class=\"kt\">A</span><span class=\"o\">)</span> <span class=\"k\">extends</span> <span class=\"nc\">IO</span><span class=\"o\">[</span><span class=\"kt\">A</span><span class=\"o\">]</span> \n<span class=\"k\">case</span> <span class=\"k\">class</span> <span class=\"nc\">Continue</span><span class=\"o\">[</span><span class=\"kt\">A</span><span class=\"o\">](</span><span class=\"n\">cont</span> <span class=\"k\">:</span> <span class=\"o\">()</span> <span class=\"o\">=&gt;</span> <span class=\"nc\">IO</span><span class=\"o\">[</span><span class=\"kt\">A</span><span class=\"o\">])</span> <span class=\"k\">extends</span> <span class=\"nc\">IO</span><span class=\"o\">[</span><span class=\"kt\">A</span><span class=\"o\">]</span> \n<span class=\"k\">case</span> <span class=\"k\">class</span> <span class=\"nc\">Sequence</span><span class=\"o\">[</span><span class=\"kt\">A</span>, <span class=\"kt\">B</span><span class=\"o\">](</span><span class=\"n\">prev</span> <span class=\"k\">:</span> <span class=\"kt\">IO</span><span class=\"o\">[</span><span class=\"kt\">A</span><span class=\"o\">],</span> <span class=\"n\">binder</span> <span class=\"k\">:</span> <span class=\"kt\">A</span> <span class=\"o\">=&gt;</span> <span class=\"nc\">IO</span><span class=\"o\">[</span><span class=\"kt\">B</span><span class=\"o\">])</span> <span class=\"k\">extends</span> <span class=\"nc\">IO</span><span class=\"o\">[</span><span class=\"kt\">B</span><span class=\"o\">]</span>\n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 36408566,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "bz2228@columbia.edu",
            "sender_full_name": "Bocheng Zhou (W2'15)",
            "sender_id": 7091,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "compose Vs. andThen",
            "submessages": [],
            "timestamp": 1426021031,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"bz2228@columbia.edu\">@Bocheng Zhou (W2'15)</span> this is a neat example of the limitations of Scala's type inference :)</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 36409005,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "compose Vs. andThen",
            "submessages": [],
            "timestamp": 1426021494,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p>What's happening (I think) is that when Scala tries to do type inference on <code>(unit _) compose f</code>, it proceeds left to right. It looks at <code>unit _</code> and types it as <code>Nothing =&gt; IO[Nothing]</code>; essentially <code>unit[Nothing]</code>.</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 36409107,
            "is_me_message": false,
            "last_edit_timestamp": 1426021745,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "compose Vs. andThen",
            "submessages": [],
            "timestamp": 1426021626,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p>(deleted)</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 36409137,
            "is_me_message": false,
            "last_edit_timestamp": 1426021750,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "compose Vs. andThen",
            "submessages": [],
            "timestamp": 1426021681,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"bz2228@columbia.edu\">@Bocheng Zhou (W2'15)</span> can we look at this in person?</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 36409327,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "compose Vs. andThen",
            "submessages": [],
            "timestamp": 1426021881,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/849c0e2e2c09df57ba091b26cf836d6a?d=identicon&version=1",
            "client": "website",
            "content": "<p>Sure</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 36409391,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "bz2228@columbia.edu",
            "sender_full_name": "Bocheng Zhou (W2'15)",
            "sender_id": 7091,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "compose Vs. andThen",
            "submessages": [],
            "timestamp": 1426021938,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/1c860d00a4cedc01147fbb2e0533c37b?d=identicon&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>I am struggling to design this function that must try several requests before potentially failing or yielding a result. I have drawn out a tree diagram maybe someone would like to help me?<a href=\"/user_uploads/13/Iqy_QervkBDGOfraOKOLf5nl/2015-03-12-112450.jpg\" target=\"_blank\" title=\"2015-03-12-112450.jpg\">2015-03-12-112450.jpg</a> </p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/13/Iqy_QervkBDGOfraOKOLf5nl/2015-03-12-112450.jpg\" target=\"_blank\" title=\"2015-03-12-112450.jpg\"><img src=\"/user_uploads/13/Iqy_QervkBDGOfraOKOLf5nl/2015-03-12-112450.jpg\"></a></div>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 36517419,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "corydominguez@gmail.com",
            "sender_full_name": "Cory Michael Dominguez (he) (SP1'15)",
            "sender_id": 7625,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "Futures and Either for branching http request structure",
            "submessages": [],
            "timestamp": 1426173938,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/1c860d00a4cedc01147fbb2e0533c37b?d=identicon&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>especially <span class=\"user-mention\" data-user-email=\"alan@hackerschool.com\">@Alan O'Donnell</span> : )</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 36517508,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "corydominguez@gmail.com",
            "sender_full_name": "Cory Michael Dominguez (he) (SP1'15)",
            "sender_id": 7625,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "Futures and Either for branching http request structure",
            "submessages": [],
            "timestamp": 1426174041,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/247a8c69d63cb8cea4b6a724be75816683bad39b?x=x&version=1",
            "client": "website",
            "content": "<p>Hello, I was wondering if scala.collection.concurrent.TrieMap (<a href=\"http://www.scala-lang.org/files/archive/nightly/docs/library/index.html#scala.collection.concurrent.TrieMap\" target=\"_blank\" title=\"http://www.scala-lang.org/files/archive/nightly/docs/library/index.html#scala.collection.concurrent.TrieMap\">http://www.scala-lang.org/files/archive/nightly/docs/library/index.html#scala.collection.concurrent.TrieMap</a>) is threadsafe to iterate over? It wasn't exactly clear to me when I was reading the documentation. In Java, synchronizedMap's iterator (<a href=\"http://docs.oracle.com/javase/8/docs/api/java/util/Collections.html#synchronizedMap-java.util.Map-\" target=\"_blank\" title=\"http://docs.oracle.com/javase/8/docs/api/java/util/Collections.html#synchronizedMap-java.util.Map-\">http://docs.oracle.com/javase/8/docs/api/java/util/Collections.html#synchronizedMap-java.util.Map-</a>) isn't threadsafe - you have to acquire a lock on the object. Is this also true in Scala? </p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 36520128,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "me@ggilmore.net",
            "sender_full_name": "Geoffrey Michael Henry Gilmore (he) (SP1'15)",
            "sender_id": 7639,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "Threadsafe TrieMap",
            "submessages": [],
            "timestamp": 1426176933,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/1c860d00a4cedc01147fbb2e0533c37b?d=identicon&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>Good question, I don't really know but in my experience when datastructures are labeled \"concurrent thread-safe lock-free\" as this is in the scala docs. It usually only applies to writes and not reads. Maybe someone else knows better?</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 36520313,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "corydominguez@gmail.com",
            "sender_full_name": "Cory Michael Dominguez (he) (SP1'15)",
            "sender_id": 7625,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "Threadsafe TrieMap",
            "submessages": [],
            "timestamp": 1426177141,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"pnf@podsnap.com\">@Peter Fraenkel (S'13)</span> <span class=\"user-mention\" data-user-email=\"nemanja@alum.mit.edu\">@Nemanja Stanarevic (S'14)</span> ?</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 36520786,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "Threadsafe TrieMap",
            "submessages": [],
            "timestamp": 1426177787,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/d495685876a5a195b6ef5fb9a269b6d0dcd5c5fe?x=x&version=1",
            "client": "website",
            "content": "<p>I believe it's threadsafe in that you're not going to crash, but you can infer limitations from a small portion of the code:</p>\n<div class=\"codehilite\"><pre>  <span class=\"k\">def</span> <span class=\"n\">iterator</span><span class=\"k\">:</span> <span class=\"kt\">Iterator</span><span class=\"o\">[(</span><span class=\"kt\">K</span>, <span class=\"kt\">V</span><span class=\"o\">)]</span> <span class=\"k\">=</span>\n    <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">nonReadOnly</span><span class=\"o\">)</span> <span class=\"n\">readOnlySnapshot</span><span class=\"o\">().</span><span class=\"n\">iterator</span>\n    <span class=\"k\">else</span> <span class=\"k\">new</span> <span class=\"nc\">TrieMapIterator</span><span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"k\">this</span><span class=\"o\">)</span>\n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 36523070,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "pnf@podsnap.com",
            "sender_full_name": "Peter Fraenkel (he) (S'13)",
            "sender_id": 2142,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "Threadsafe TrieMap",
            "submessages": [],
            "timestamp": 1426180401,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/d495685876a5a195b6ef5fb9a269b6d0dcd5c5fe?x=x&version=1",
            "client": "website",
            "content": "<p>Have you looked at <code>Try.recover</code>?</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 36523901,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "pnf@podsnap.com",
            "sender_full_name": "Peter Fraenkel (he) (S'13)",
            "sender_id": 2142,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "Futures and Either for branching http request structure",
            "submessages": [],
            "timestamp": 1426181461,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/1c860d00a4cedc01147fbb2e0533c37b?d=identicon&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>Yeah I have seen that. Right now I have a strategy using options and recoverWith, looks like this:</p>\n<div class=\"codehilite\"><pre>  <span class=\"k\">def</span> <span class=\"n\">registerComic</span><span class=\"o\">(</span><span class=\"n\">comic</span><span class=\"k\">:</span> <span class=\"kt\">Comic</span><span class=\"o\">)</span><span class=\"k\">:</span> <span class=\"kt\">Option</span><span class=\"o\">[</span><span class=\"kt\">Int</span><span class=\"o\">]</span> <span class=\"k\">=</span> <span class=\"o\">{</span>\n    <span class=\"k\">val</span> <span class=\"n\">postRes</span> <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"o\">.</span><span class=\"n\">post</span><span class=\"o\">(</span><span class=\"s\">&quot;comic&quot;</span><span class=\"o\">,</span> <span class=\"n\">comic</span><span class=\"o\">.</span><span class=\"n\">export</span><span class=\"o\">)</span>\n    <span class=\"k\">val</span> <span class=\"n\">patchRes</span> <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"o\">.</span><span class=\"n\">patch</span><span class=\"o\">(</span><span class=\"s\">&quot;comic&quot;</span><span class=\"o\">,</span> <span class=\"nc\">Map</span><span class=\"o\">(</span><span class=\"s\">&quot;id&quot;</span> <span class=\"o\">-&gt;</span> <span class=\"n\">s</span><span class=\"s\">&quot;eq.${comic.id}&quot;</span><span class=\"o\">),</span> <span class=\"n\">comic</span><span class=\"o\">.</span><span class=\"n\">export</span><span class=\"o\">)</span>\n    <span class=\"k\">val</span> <span class=\"n\">res</span> <span class=\"k\">=</span> <span class=\"n\">postRes</span><span class=\"o\">.</span><span class=\"n\">recoverWith</span><span class=\"o\">({</span><span class=\"k\">case</span> <span class=\"k\">_</span> <span class=\"k\">=&gt;</span> <span class=\"n\">patchRes</span><span class=\"o\">})</span>\n    <span class=\"k\">val</span> <span class=\"n\">result</span><span class=\"k\">:</span> <span class=\"kt\">Option</span><span class=\"o\">[</span><span class=\"kt\">Int</span><span class=\"o\">]</span> <span class=\"k\">=</span> <span class=\"n\">patchRes</span><span class=\"o\">().</span><span class=\"n\">map</span><span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"k\">=&gt;</span> <span class=\"n\">r</span><span class=\"o\">.</span><span class=\"n\">getStatusCode</span><span class=\"o\">)</span>\n    <span class=\"n\">result</span>\n  <span class=\"o\">}</span>\n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 36524043,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "corydominguez@gmail.com",
            "sender_full_name": "Cory Michael Dominguez (he) (SP1'15)",
            "sender_id": 7625,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "Futures and Either for branching http request structure",
            "submessages": [],
            "timestamp": 1426181651,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/1c860d00a4cedc01147fbb2e0533c37b?d=identicon&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>I suspect this is calling both post and patch requests even if the post is successful, which is not ideal. What I want is first try post then patch</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 36524069,
            "is_me_message": false,
            "last_edit_timestamp": 1426181754,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "corydominguez@gmail.com",
            "sender_full_name": "Cory Michael Dominguez (he) (SP1'15)",
            "sender_id": 7625,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "Futures and Either for branching http request structure",
            "submessages": [],
            "timestamp": 1426181729,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/d495685876a5a195b6ef5fb9a269b6d0dcd5c5fe?x=x&version=1",
            "client": "website",
            "content": "<p>What about:</p>\n<div class=\"codehilite\"><pre>  <span class=\"k\">def</span> <span class=\"n\">registerComic</span><span class=\"o\">(</span><span class=\"n\">comic</span><span class=\"k\">:</span> <span class=\"kt\">Comic</span><span class=\"o\">)</span><span class=\"k\">:</span> <span class=\"kt\">Option</span><span class=\"o\">[</span><span class=\"kt\">Int</span><span class=\"o\">]</span> <span class=\"k\">=</span> \n   <span class=\"k\">this</span><span class=\"o\">.</span><span class=\"n\">post</span><span class=\"o\">(</span><span class=\"s\">&quot;comic&quot;</span><span class=\"o\">,</span> <span class=\"n\">comic</span><span class=\"o\">.</span><span class=\"n\">export</span><span class=\"o\">).</span>\n        <span class=\"n\">recoverWith</span> <span class=\"o\">{</span><span class=\"k\">case</span> <span class=\"k\">_</span> <span class=\"k\">=&gt;</span> <span class=\"k\">this</span><span class=\"o\">.</span><span class=\"n\">patch</span><span class=\"o\">(</span><span class=\"s\">&quot;comic&quot;</span><span class=\"o\">,</span> <span class=\"nc\">Map</span><span class=\"o\">(</span><span class=\"s\">&quot;id&quot;</span> <span class=\"o\">-&gt;</span> <span class=\"n\">s</span><span class=\"s\">&quot;eq.${comic.id}&quot;</span><span class=\"o\">),</span> <span class=\"n\">comic</span><span class=\"o\">.</span><span class=\"n\">export</span><span class=\"o\">}</span> <span class=\"o\">.</span>\n        <span class=\"n\">map</span> <span class=\"o\">(</span><span class=\"k\">_</span><span class=\"o\">.</span><span class=\"n\">getStatusCode</span><span class=\"o\">)</span> <span class=\"o\">.</span>\n        <span class=\"n\">toOption</span>\n</pre></div>\n\n\n<p>Ideally, it would be <code>case Failure(Exception(e)) =&gt; doSomethingSpecificWithException</code> too.</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 36524460,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "pnf@podsnap.com",
            "sender_full_name": "Peter Fraenkel (he) (S'13)",
            "sender_id": 2142,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "Futures and Either for branching http request structure",
            "submessages": [],
            "timestamp": 1426182350,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/1c860d00a4cedc01147fbb2e0533c37b?d=identicon&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>That works,  However now it is entirely synced, I guess what I really want from this method is a Future[Option[Int]] so that all the comics will register concurrently.</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 36528899,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "corydominguez@gmail.com",
            "sender_full_name": "Cory Michael Dominguez (he) (SP1'15)",
            "sender_id": 7625,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "Futures and Either for branching http request structure",
            "submessages": [],
            "timestamp": 1426187336,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/d495685876a5a195b6ef5fb9a269b6d0dcd5c5fe?x=x&version=1",
            "client": "website",
            "content": "<p>You can wrap the entire thing in a future if you want.</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 36529745,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "pnf@podsnap.com",
            "sender_full_name": "Peter Fraenkel (he) (S'13)",
            "sender_id": 2142,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "Futures and Either for branching http request structure",
            "submessages": [],
            "timestamp": 1426188250,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/1c860d00a4cedc01147fbb2e0533c37b?d=identicon&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>Thanks I'll try that</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 36529806,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "corydominguez@gmail.com",
            "sender_full_name": "Cory Michael Dominguez (he) (SP1'15)",
            "sender_id": 7625,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "Futures and Either for branching http request structure",
            "submessages": [],
            "timestamp": 1426188363,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/d495685876a5a195b6ef5fb9a269b6d0dcd5c5fe?x=x&version=1",
            "client": "website",
            "content": "<p>Actually...  what web agent library are you using?  I.e. where is the post method coming from?</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 36529946,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "pnf@podsnap.com",
            "sender_full_name": "Peter Fraenkel (he) (S'13)",
            "sender_id": 2142,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "Futures and Either for branching http request structure",
            "submessages": [],
            "timestamp": 1426188528,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/1c860d00a4cedc01147fbb2e0533c37b?d=identicon&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>I am using dispatch, which is causing the probelms becuase I returns futures. The brute force method would be to just realize the futures and write a conditional but it doesn't feel like idiomatic scala and the dispatch site has some relevent examples that I feel are worth while disecting.</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 36535785,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "corydominguez@gmail.com",
            "sender_full_name": "Cory Michael Dominguez (he) (SP1'15)",
            "sender_id": 7625,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "Futures and Either for branching http request structure",
            "submessages": [],
            "timestamp": 1426195420,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/849c0e2e2c09df57ba091b26cf836d6a?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"alan@hackerschool.com\">@Alan O'Donnell</span> Hey, I'm revisiting the example, and <code>val z = 1.point[Z]</code> actually compiles just fine in my scalaIDE, and you don't need that stuff at the bottom of the answer. Here's the code:</p>\n<div class=\"codehilite\"><pre><span class=\"k\">import</span> <span class=\"nn\">scalaz._</span><span class=\"o\">,</span> <span class=\"nc\">Scalaz</span><span class=\"o\">.</span><span class=\"k\">_</span>\n<span class=\"k\">object</span> <span class=\"nc\">test</span> <span class=\"o\">{</span>\n  <span class=\"k\">sealed</span> <span class=\"k\">trait</span> <span class=\"nc\">Z</span><span class=\"o\">[</span><span class=\"kt\">T</span><span class=\"o\">]</span>\n  <span class=\"nc\">case</span> <span class=\"k\">class</span> <span class=\"nc\">MyZLeft</span><span class=\"o\">[</span><span class=\"kt\">T</span><span class=\"o\">](</span><span class=\"n\">t</span><span class=\"k\">:</span> <span class=\"kt\">T</span><span class=\"o\">)</span> <span class=\"k\">extends</span> <span class=\"n\">Z</span><span class=\"o\">[</span><span class=\"kt\">T</span><span class=\"o\">]</span>\n  <span class=\"k\">case</span> <span class=\"k\">class</span> <span class=\"nc\">MyZRight</span><span class=\"o\">[</span><span class=\"kt\">T</span><span class=\"o\">](</span><span class=\"n\">t</span><span class=\"k\">:</span> <span class=\"kt\">T</span><span class=\"o\">)</span> <span class=\"k\">extends</span> <span class=\"n\">Z</span><span class=\"o\">[</span><span class=\"kt\">T</span><span class=\"o\">]</span>\n\n  <span class=\"k\">def</span> <span class=\"n\">swap</span><span class=\"o\">[</span><span class=\"kt\">T</span><span class=\"o\">](</span><span class=\"n\">z</span><span class=\"k\">:</span> <span class=\"kt\">Z</span><span class=\"o\">[</span><span class=\"kt\">T</span><span class=\"o\">])</span> <span class=\"k\">=</span> <span class=\"n\">z</span> <span class=\"k\">match</span> <span class=\"o\">{</span>\n    <span class=\"k\">case</span> <span class=\"nc\">MyZLeft</span><span class=\"o\">(</span><span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"k\">=&gt;</span> <span class=\"nc\">MyZRight</span><span class=\"o\">(</span><span class=\"n\">t</span><span class=\"o\">)</span>\n    <span class=\"k\">case</span> <span class=\"nc\">MyZRight</span><span class=\"o\">(</span><span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"k\">=&gt;</span> <span class=\"nc\">MyZLeft</span><span class=\"o\">(</span><span class=\"n\">t</span><span class=\"o\">)</span>\n  <span class=\"o\">}</span>\n\n  <span class=\"k\">implicit</span> <span class=\"k\">object</span> <span class=\"nc\">ZIsMonad</span> <span class=\"k\">extends</span> <span class=\"nc\">Monad</span><span class=\"o\">[</span><span class=\"kt\">Z</span><span class=\"o\">]</span> <span class=\"o\">{</span>\n    <span class=\"k\">def</span> <span class=\"n\">point</span><span class=\"o\">[</span><span class=\"kt\">A</span><span class=\"o\">](</span><span class=\"n\">a</span><span class=\"k\">:</span> <span class=\"o\">=&gt;</span> <span class=\"n\">A</span><span class=\"o\">)</span><span class=\"k\">:</span> <span class=\"kt\">Z</span><span class=\"o\">[</span><span class=\"kt\">A</span><span class=\"o\">]</span> <span class=\"k\">=</span> <span class=\"nc\">MyZRight</span><span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">)</span>\n    <span class=\"k\">def</span> <span class=\"n\">bind</span><span class=\"o\">[</span><span class=\"kt\">A</span>, <span class=\"kt\">B</span><span class=\"o\">](</span><span class=\"n\">fa</span><span class=\"k\">:</span> <span class=\"kt\">Z</span><span class=\"o\">[</span><span class=\"kt\">A</span><span class=\"o\">])(</span><span class=\"n\">f</span><span class=\"k\">:</span> <span class=\"kt\">A</span> <span class=\"o\">=&gt;</span> <span class=\"n\">Z</span><span class=\"o\">[</span><span class=\"kt\">B</span><span class=\"o\">])</span><span class=\"k\">:</span> <span class=\"kt\">Z</span><span class=\"o\">[</span><span class=\"kt\">B</span><span class=\"o\">]</span> <span class=\"k\">=</span> <span class=\"n\">fa</span> <span class=\"k\">match</span> <span class=\"o\">{</span>\n      <span class=\"k\">case</span> <span class=\"nc\">MyZLeft</span><span class=\"o\">(</span><span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"k\">=&gt;</span> <span class=\"n\">swap</span><span class=\"o\">(</span><span class=\"n\">f</span><span class=\"o\">(</span><span class=\"n\">t</span><span class=\"o\">))</span>\n      <span class=\"k\">case</span> <span class=\"nc\">MyZRight</span><span class=\"o\">(</span><span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"k\">=&gt;</span> <span class=\"n\">swap</span><span class=\"o\">(</span><span class=\"n\">f</span><span class=\"o\">(</span><span class=\"n\">t</span><span class=\"o\">))</span>\n    <span class=\"o\">}</span>\n  <span class=\"o\">}</span>\n\n  <span class=\"k\">object</span> <span class=\"nc\">main</span> <span class=\"o\">{</span>\n    <span class=\"k\">def</span> <span class=\"n\">main</span><span class=\"o\">(</span><span class=\"n\">args</span> <span class=\"k\">:</span> <span class=\"kt\">Array</span><span class=\"o\">[</span><span class=\"kt\">String</span><span class=\"o\">])</span> <span class=\"k\">=</span> <span class=\"o\">{</span>\n      <span class=\"c1\">// This line compiles! WAT?!</span>\n      <span class=\"k\">val</span> <span class=\"n\">z</span> <span class=\"k\">=</span> <span class=\"mf\">1.</span><span class=\"n\">point</span><span class=\"o\">[</span><span class=\"kt\">Z</span><span class=\"o\">]</span>\n    <span class=\"o\">}</span>\n  <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 36535893,
            "is_me_message": false,
            "last_edit_timestamp": 1426195686,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "bz2228@columbia.edu",
            "sender_full_name": "Bocheng Zhou (W2'15)",
            "sender_id": 7091,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "Why do you need implicit here?",
            "submessages": [],
            "timestamp": 1426195545,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/849c0e2e2c09df57ba091b26cf836d6a?d=identicon&version=1",
            "client": "website",
            "content": "<p>Now I'm very confused...</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 36535954,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "bz2228@columbia.edu",
            "sender_full_name": "Bocheng Zhou (W2'15)",
            "sender_id": 7091,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "Why do you need implicit here?",
            "submessages": [],
            "timestamp": 1426195587,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/849c0e2e2c09df57ba091b26cf836d6a?d=identicon&version=1",
            "client": "website",
            "content": "<p>Or, were possible <code>implicit</code>s imported from <code>scalaz</code>?</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 36536202,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "bz2228@columbia.edu",
            "sender_full_name": "Bocheng Zhou (W2'15)",
            "sender_id": 7091,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "Why do you need implicit here?",
            "submessages": [],
            "timestamp": 1426195827,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p>Huh, weird. It doesn't for me <img alt=\":anguished:\" class=\"emoji\" src=\"static/third/gemoji/images/emoji/anguished.png\" title=\":anguished:\"> </p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 36540944,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "Why do you need implicit here?",
            "submessages": [],
            "timestamp": 1426201017,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p>Heh, shoot, it turns out I had my own <code>Monad</code> thing lying around in the same package, but in a different file :) So when I wrote <code>ZIsMonad extends Monad</code> I was actually extending my own Monad thing.</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 36544021,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "Why do you need implicit here?",
            "submessages": [],
            "timestamp": 1426205682,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p>So yeah, it does compile <img alt=\":stuck_out_tongue:\" class=\"emoji\" src=\"static/third/gemoji/images/emoji/stuck_out_tongue.png\" title=\":stuck_out_tongue:\"> </p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 36544025,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "Why do you need implicit here?",
            "submessages": [],
            "timestamp": 1426205696,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/d495685876a5a195b6ef5fb9a269b6d0dcd5c5fe?x=x&version=1",
            "client": "website",
            "content": "<p>Why are you converting it to an option at all?  Why not just keep it as a <code>Future[Int]</code>?</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 36574437,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "pnf@podsnap.com",
            "sender_full_name": "Peter Fraenkel (he) (S'13)",
            "sender_id": 2142,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "Futures and Either for branching http request structure",
            "submessages": [],
            "timestamp": 1426264591,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/849c0e2e2c09df57ba091b26cf836d6a?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"alan@hackerschool.com\">@Alan O'Donnell</span> Why does <code>val z = 1.point[Z]</code> compile? Looks like magic to me.</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 36671765,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "bz2228@columbia.edu",
            "sender_full_name": "Bocheng Zhou (W2'15)",
            "sender_id": 7091,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "Why do you need implicit here?",
            "submessages": [],
            "timestamp": 1426475554,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"bz2228@columbia.edu\">@Bocheng Zhou (W2'15)</span> yeah, that's magic :) When you <code>import Scalaz._</code>, you pull in...</p>\n<div class=\"codehilite\"><pre><span class=\"k\">object</span> <span class=\"nc\">Scalaz</span>\n  <span class=\"k\">extends</span> <span class=\"nc\">StateFunctions</span>        <span class=\"c1\">// Functions related to the state monad</span>\n  <span class=\"k\">with</span> <span class=\"n\">syntax</span><span class=\"o\">.</span><span class=\"nc\">ToTypeClassOps</span>    <span class=\"c1\">// syntax associated with type classes</span>\n  <span class=\"k\">with</span> <span class=\"n\">syntax</span><span class=\"o\">.</span><span class=\"nc\">ToDataOps</span>         <span class=\"c1\">// syntax associated with Scalaz data structures</span>\n  <span class=\"k\">with</span> <span class=\"n\">std</span><span class=\"o\">.</span><span class=\"nc\">AllInstances</span>         <span class=\"c1\">// Type class instances for the standard library types</span>\n  <span class=\"k\">with</span> <span class=\"n\">std</span><span class=\"o\">.</span><span class=\"nc\">AllFunctions</span>         <span class=\"c1\">// Functions related to standard library types</span>\n  <span class=\"k\">with</span> <span class=\"n\">syntax</span><span class=\"o\">.</span><span class=\"n\">std</span><span class=\"o\">.</span><span class=\"nc\">ToAllStdOps</span>   <span class=\"c1\">// syntax associated with standard library types</span>\n  <span class=\"k\">with</span> <span class=\"nc\">IdInstances</span>              <span class=\"c1\">// Identity type and instances</span>\n\n<span class=\"c1\">// so let&#39;s dive into syntax.ToTypeClassOps...</span>\n\n<span class=\"k\">trait</span> <span class=\"nc\">ToTypeClassOps</span>\n  <span class=\"k\">extends</span> <span class=\"nc\">ToSemigroupOps</span> <span class=\"k\">with</span> <span class=\"nc\">ToMonoidOps</span> <span class=\"k\">with</span> <span class=\"nc\">ToEqualOps</span> <span class=\"k\">with</span> <span class=\"nc\">ToLengthOps</span> <span class=\"k\">with</span> <span class=\"nc\">ToShowOps</span>\n  <span class=\"k\">with</span> <span class=\"nc\">ToOrderOps</span> <span class=\"k\">with</span> <span class=\"nc\">ToEnumOps</span> <span class=\"k\">with</span> <span class=\"nc\">ToMetricSpaceOps</span> <span class=\"k\">with</span> <span class=\"nc\">ToPlusEmptyOps</span> <span class=\"k\">with</span> <span class=\"nc\">ToEachOps</span> <span class=\"k\">with</span> <span class=\"nc\">ToIndexOps</span>\n  <span class=\"k\">with</span> <span class=\"nc\">ToFunctorOps</span> <span class=\"k\">with</span> <span class=\"nc\">ToContravariantOps</span> <span class=\"k\">with</span> <span class=\"nc\">ToApplyOps</span>\n  <span class=\"k\">with</span> <span class=\"nc\">ToApplicativeOps</span> <span class=\"k\">with</span> <span class=\"nc\">ToBindOps</span> <span class=\"k\">with</span> <span class=\"nc\">ToMonadOps</span> <span class=\"k\">with</span> <span class=\"nc\">ToComonadOps</span>\n  <span class=\"k\">with</span> <span class=\"nc\">ToBifoldableOps</span> <span class=\"k\">with</span> <span class=\"nc\">ToCozipOps</span>\n  <span class=\"k\">with</span> <span class=\"nc\">ToPlusOps</span> <span class=\"k\">with</span> <span class=\"nc\">ToApplicativePlusOps</span> <span class=\"k\">with</span> <span class=\"nc\">ToMonadPlusOps</span> <span class=\"k\">with</span> <span class=\"nc\">ToTraverseOps</span> <span class=\"k\">with</span> <span class=\"nc\">ToBifunctorOps</span>\n  <span class=\"k\">with</span> <span class=\"nc\">ToBitraverseOps</span> <span class=\"k\">with</span> <span class=\"nc\">ToComposeOps</span> <span class=\"k\">with</span> <span class=\"nc\">ToCategoryOps</span>\n  <span class=\"k\">with</span> <span class=\"nc\">ToArrowOps</span> <span class=\"k\">with</span> <span class=\"nc\">ToFoldableOps</span> <span class=\"k\">with</span> <span class=\"nc\">ToChoiceOps</span> <span class=\"k\">with</span> <span class=\"nc\">ToSplitOps</span> <span class=\"k\">with</span> <span class=\"nc\">ToZipOps</span> <span class=\"k\">with</span> <span class=\"nc\">ToUnzipOps</span> <span class=\"k\">with</span> <span class=\"nc\">ToMonadTellOps</span> <span class=\"k\">with</span> <span class=\"nc\">ToMonadListenOps</span> <span class=\"k\">with</span> <span class=\"nc\">ToMonadErrorOps</span>\n  <span class=\"k\">with</span> <span class=\"nc\">ToFoldable1Ops</span> <span class=\"k\">with</span> <span class=\"nc\">ToTraverse1Ops</span> <span class=\"k\">with</span> <span class=\"nc\">ToOptionalOps</span> <span class=\"k\">with</span> <span class=\"nc\">ToCatchableOps</span> <span class=\"k\">with</span> <span class=\"nc\">ToAlignOps</span>\n\n<span class=\"c1\">// so let&#39;s dive into ToApplicativeOps...</span>\n\n<span class=\"k\">trait</span> <span class=\"nc\">ToApplicativeOps</span> <span class=\"k\">extends</span> <span class=\"nc\">ToApplicativeOps0</span> <span class=\"k\">with</span> <span class=\"nc\">ToApplyOps</span> <span class=\"o\">{</span>\n  <span class=\"k\">implicit</span> <span class=\"k\">def</span> <span class=\"nc\">ToApplicativeOps</span><span class=\"o\">[</span><span class=\"kt\">F</span><span class=\"o\">[</span><span class=\"k\">_</span><span class=\"o\">]</span>,<span class=\"kt\">A</span><span class=\"o\">](</span><span class=\"n\">v</span><span class=\"k\">:</span> <span class=\"kt\">F</span><span class=\"o\">[</span><span class=\"kt\">A</span><span class=\"o\">])(</span><span class=\"k\">implicit</span> <span class=\"n\">F0</span><span class=\"k\">:</span> <span class=\"kt\">Applicative</span><span class=\"o\">[</span><span class=\"kt\">F</span><span class=\"o\">])</span> <span class=\"k\">=</span>\n    <span class=\"k\">new</span> <span class=\"nc\">ApplicativeOps</span><span class=\"o\">[</span><span class=\"kt\">F</span>,<span class=\"kt\">A</span><span class=\"o\">](</span><span class=\"n\">v</span><span class=\"o\">)</span>\n\n  <span class=\"c1\">////</span>\n  <span class=\"k\">implicit</span> <span class=\"k\">def</span> <span class=\"nc\">ApplicativeIdV</span><span class=\"o\">[</span><span class=\"kt\">A</span><span class=\"o\">](</span><span class=\"n\">v</span><span class=\"k\">:</span> <span class=\"o\">=&gt;</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"k\">=</span> <span class=\"k\">new</span> <span class=\"nc\">ApplicativeIdV</span><span class=\"o\">[</span><span class=\"kt\">A</span><span class=\"o\">]</span> <span class=\"o\">{</span>\n    <span class=\"k\">lazy</span> <span class=\"k\">val</span> <span class=\"n\">self</span> <span class=\"k\">=</span> <span class=\"n\">v</span>\n  <span class=\"o\">}</span>\n\n  <span class=\"k\">trait</span> <span class=\"nc\">ApplicativeIdV</span><span class=\"o\">[</span><span class=\"kt\">A</span><span class=\"o\">]</span> <span class=\"nc\">extends</span> <span class=\"nc\">Ops</span><span class=\"o\">[</span><span class=\"kt\">A</span><span class=\"o\">]</span> <span class=\"o\">{</span>\n    <span class=\"k\">def</span> <span class=\"n\">point</span><span class=\"o\">[</span><span class=\"kt\">F</span><span class=\"o\">[</span><span class=\"k\">_</span><span class=\"o\">]</span> <span class=\"kt\">:</span> <span class=\"kt\">Applicative</span><span class=\"o\">]</span><span class=\"k\">:</span> <span class=\"kt\">F</span><span class=\"o\">[</span><span class=\"kt\">A</span><span class=\"o\">]</span> <span class=\"k\">=</span> <span class=\"nc\">Applicative</span><span class=\"o\">[</span><span class=\"kt\">F</span><span class=\"o\">].</span><span class=\"n\">point</span><span class=\"o\">(</span><span class=\"n\">self</span><span class=\"o\">)</span>\n    <span class=\"k\">def</span> <span class=\"n\">pure</span><span class=\"o\">[</span><span class=\"kt\">F</span><span class=\"o\">[</span><span class=\"k\">_</span><span class=\"o\">]</span> <span class=\"kt\">:</span> <span class=\"kt\">Applicative</span><span class=\"o\">]</span><span class=\"k\">:</span> <span class=\"kt\">F</span><span class=\"o\">[</span><span class=\"kt\">A</span><span class=\"o\">]</span> <span class=\"k\">=</span> <span class=\"nc\">Applicative</span><span class=\"o\">[</span><span class=\"kt\">F</span><span class=\"o\">].</span><span class=\"n\">point</span><span class=\"o\">(</span><span class=\"n\">self</span><span class=\"o\">)</span>\n    <span class=\"k\">def</span> <span class=\"n\">\u03b7</span><span class=\"o\">[</span><span class=\"kt\">F</span><span class=\"o\">[</span><span class=\"k\">_</span><span class=\"o\">]</span> <span class=\"kt\">:</span> <span class=\"kt\">Applicative</span><span class=\"o\">]</span><span class=\"k\">:</span> <span class=\"kt\">F</span><span class=\"o\">[</span><span class=\"kt\">A</span><span class=\"o\">]</span> <span class=\"k\">=</span> <span class=\"nc\">Applicative</span><span class=\"o\">[</span><span class=\"kt\">F</span><span class=\"o\">].</span><span class=\"n\">point</span><span class=\"o\">(</span><span class=\"n\">self</span><span class=\"o\">)</span>\n  <span class=\"o\">}</span>  <span class=\"c1\">////</span>\n<span class=\"o\">}</span>\n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 36687083,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "Why do you need implicit here?",
            "submessages": [],
            "timestamp": 1426511620,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p>Haha and there you go! There's that <code>implicit def ApplicativeIdV</code>, which can implicitly wrap things into an Applicative. When you extend <code>Monad[Z]</code>, you also extend <code>Applicative[Z]</code>, so that's how we have an implementation for <code>point</code> to use in <code>Applicative[F].point(self)</code>.</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 36687222,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "Why do you need implicit here?",
            "submessages": [],
            "timestamp": 1426511929,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p>Do you use the Scala IDE? The only reason I could find this stuff was because the Scala IDE has good support for showing you where/which implicit conversions are happening.</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 36687233,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "Why do you need implicit here?",
            "submessages": [],
            "timestamp": 1426511985,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/849c0e2e2c09df57ba091b26cf836d6a?d=identicon&version=1",
            "client": "website",
            "content": "<p>So I think to use <code>for-yield</code> in scala you only have to define your own <code>flatMap</code> and <code>map</code>. But when  I'm trying to write something like <code>st &lt;- get[Stack]</code>, the compiler always complains \"value foreach is not a member of <code>State[Stack,Stack]</code>(the return type of <code>get[Stack]</code>)\".  </p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 36884122,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "bz2228@columbia.edu",
            "sender_full_name": "Bocheng Zhou (W2'15)",
            "sender_id": 7091,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "Do you really have to implement foreach to use for-yield?",
            "submessages": [],
            "timestamp": 1426798954,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"bz2228@columbia.edu\">@Bocheng Zhou (W2'15)</span> you must not be yielding at the end.</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 36896930,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "Do you really have to implement foreach to use for-yield?",
            "submessages": [],
            "timestamp": 1426816312,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p>When you use <code>for { ... } yield foo</code>, the <code>yield</code> part turns into a <code>map</code>. With no <code>yield</code>, it's a <code>foreach</code>.</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 36896971,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "Do you really have to implement foreach to use for-yield?",
            "submessages": [],
            "timestamp": 1426816340,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/849c0e2e2c09df57ba091b26cf836d6a?d=identicon&version=1",
            "client": "website",
            "content": "<p>Ah, yes!  I later found out. Sometimes you need to igonre some error messages emitted by the scalaIDE until you finish writing the whole thing.</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 36897118,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "bz2228@columbia.edu",
            "sender_full_name": "Bocheng Zhou (W2'15)",
            "sender_id": 7091,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "Do you really have to implement foreach to use for-yield?",
            "submessages": [],
            "timestamp": 1426816672,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/a897e9d6a0e8aff13a39e0515c38ee2d9482c809?x=x&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>Hi all. I'm using Specs2 for testing and am on the hunt for a good mocking library. Trying to decide between the Mockito (<a href=\"http://mockito.org/\" target=\"_blank\" title=\"http://mockito.org/\">http://mockito.org/</a>)  -- the Specs2 default, in Java -- and ScalaMock (<a href=\"http://scalamock.org/\" target=\"_blank\" title=\"http://scalamock.org/\">http://scalamock.org/</a>). </p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 36934630,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "guest.austin@gmail.com",
            "sender_full_name": "Austin Guest (they) (SP2'19)",
            "sender_id": 6930,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "mocking libraries - mockito v. scalamock",
            "submessages": [],
            "timestamp": 1426881310,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/a897e9d6a0e8aff13a39e0515c38ee2d9482c809?x=x&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>The standard \"X vs. Y\" Google search hasn't turned up much besides, the somewhat thin <a href=\"http://www.techwars.io/fight/mockito/scalamock/\" target=\"_blank\" title=\"http://www.techwars.io/fight/mockito/scalamock/\">http://www.techwars.io/fight/mockito/scalamock/</a> and the inconclusive <a href=\"http://tech.gilt.com/post/62430610230/which-scala-testing-tools-should-you-use\" target=\"_blank\" title=\"http://tech.gilt.com/post/62430610230/which-scala-testing-tools-should-you-use\">http://tech.gilt.com/post/62430610230/which-scala-testing-tools-should-you-use</a>. </p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 36934632,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "guest.austin@gmail.com",
            "sender_full_name": "Austin Guest (they) (SP2'19)",
            "sender_id": 6930,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "mocking libraries - mockito v. scalamock",
            "submessages": [],
            "timestamp": 1426881315,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/a897e9d6a0e8aff13a39e0515c38ee2d9482c809?x=x&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>Anyone have preferences? And/or intelligent criteria to guide the choice?</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 36934681,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "guest.austin@gmail.com",
            "sender_full_name": "Austin Guest (they) (SP2'19)",
            "sender_id": 6930,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "mocking libraries - mockito v. scalamock",
            "submessages": [],
            "timestamp": 1426881371,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/1c860d00a4cedc01147fbb2e0533c37b?d=identicon&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>I am also interested in an answer to this.</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 36935496,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "corydominguez@gmail.com",
            "sender_full_name": "Cory Michael Dominguez (he) (SP1'15)",
            "sender_id": 7625,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "mocking libraries - mockito v. scalamock",
            "submessages": [],
            "timestamp": 1426882431,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"guest.austin@gmail.com\">@Austin Guest (W1'14)</span> <span class=\"user-mention\" data-user-email=\"bz2228@columbia.edu\">@Bocheng Zhou (W2'15)</span> looks nice: <a href=\"https://gist.github.com/djspiewak/d93a9c4983f63721c41c\" target=\"_blank\" title=\"https://gist.github.com/djspiewak/d93a9c4983f63721c41c\">https://gist.github.com/djspiewak/d93a9c4983f63721c41c</a></p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37015274,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "z-stream intro",
            "submessages": [],
            "timestamp": 1427070273,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/a897e9d6a0e8aff13a39e0515c38ee2d9482c809?x=x&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>COOL! *this* is the guide i've been waiting for! been wanting to use this library BAD but holding off because getting in the front door felt so intimdating. thanks <span class=\"user-mention\" data-user-email=\"alan@hackerschool.com\">@Alan O'Donnell</span>!</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37018120,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "guest.austin@gmail.com",
            "sender_full_name": "Austin Guest (they) (SP2'19)",
            "sender_id": 6930,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "z-stream intro",
            "submessages": [],
            "timestamp": 1427075781,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/d5d15ea33fc144ca1fcf8b702df2849a?d=identicon&version=1",
            "client": "website",
            "content": "<p>I'm trying to work through Twitter's Scala tutorials and I'm already struggling! I brew installed sbt and it looks like, by default, it's setting me up with Scala 2.10.4 when I open a repl, but my co-workers say I should be using 2.11.0. I found <a href=\"http://www.scala-sbt.org/0.12.4/docs/Howto/scala.html\" target=\"_blank\" title=\"http://www.scala-sbt.org/0.12.4/docs/Howto/scala.html\">this page</a> but embarrassingly I can't even figure out where these commands are supposed to go. I tried them in the interactive mode that opens when you type \"sbt,\" but that's clearly not it either?</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37289416,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "lyndsey@uchicago.edu",
            "sender_full_name": "Lyndsey Jane Moulds (she/they) (F'13)",
            "sender_id": 2861,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "sbt help",
            "submessages": [],
            "timestamp": 1427509552,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/d5d15ea33fc144ca1fcf8b702df2849a?d=identicon&version=1",
            "client": "website",
            "content": "<p><a href=\"http://www.scala-sbt.org/\" target=\"_blank\" title=\"http://www.scala-sbt.org/\">http://www.scala-sbt.org/</a> keeps giving me 500s every other time I try to browse, too</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37289454,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "lyndsey@uchicago.edu",
            "sender_full_name": "Lyndsey Jane Moulds (she/they) (F'13)",
            "sender_id": 2861,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "sbt help",
            "submessages": [],
            "timestamp": 1427509602,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/d5d15ea33fc144ca1fcf8b702df2849a?d=identicon&version=1",
            "client": "website",
            "content": "<p>ok! I've figured out what a build definition is and why some of the things I was trying to do earlier were actually kind of hilarious. What I still haven't figured out is how to change the scala version used by default when I run 'sbt console.'</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37291390,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "lyndsey@uchicago.edu",
            "sender_full_name": "Lyndsey Jane Moulds (she/they) (F'13)",
            "sender_id": 2861,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "sbt help",
            "submessages": [],
            "timestamp": 1427513540,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"lyndsey@uchicago.edu\">@Lyndsey Moulds (F'13)</span> check this post out: <a href=\"http://www.reddit.com/r/scala/comments/2v5fqh/sbt_not_ready_for_the_corporate_world/coeq8ux\" target=\"_blank\" title=\"http://www.reddit.com/r/scala/comments/2v5fqh/sbt_not_ready_for_the_corporate_world/coeq8ux\">http://www.reddit.com/r/scala/comments/2v5fqh/sbt_not_ready_for_the_corporate_world/coeq8ux</a></p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37307232,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "sbt help",
            "submessages": [],
            "timestamp": 1427556109,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p>You can dynamically set the version of Scala to use with</p>\n<div class=\"codehilite\"><pre><span class=\"n\">sbt</span>\n<span class=\"o\">&gt;</span>  <span class=\"n\">set</span> <span class=\"n\">scalaVersion</span> <span class=\"o\">:=</span> <span class=\"s\">&quot;2.11.6&quot;</span>\n<span class=\"o\">&gt;</span> <span class=\"n\">console</span>\n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37307283,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "sbt help",
            "submessages": [],
            "timestamp": 1427556242,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/d5d15ea33fc144ca1fcf8b702df2849a?d=identicon&version=1",
            "client": "website",
            "content": "<p>aaand there it goes downloadin' 2.11.5! look at it go! Thanks <span class=\"user-mention\" data-user-email=\"alan@hackerschool.com\">@Alan O'Donnell</span> </p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37307339,
            "is_me_message": false,
            "last_edit_timestamp": 1427556337,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "lyndsey@uchicago.edu",
            "sender_full_name": "Lyndsey Jane Moulds (she/they) (F'13)",
            "sender_id": 2861,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "sbt help",
            "submessages": [],
            "timestamp": 1427556329,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/d5d15ea33fc144ca1fcf8b702df2849a?d=identicon&version=1",
            "client": "website",
            "content": "<p>or 2.11.0! or 2.11.6! or whatever I want!</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37307499,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "lyndsey@uchicago.edu",
            "sender_full_name": "Lyndsey Jane Moulds (she/they) (F'13)",
            "sender_id": 2861,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "sbt help",
            "submessages": [],
            "timestamp": 1427556616,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/1c860d00a4cedc01147fbb2e0533c37b?d=identicon&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>Hey <span class=\"user-mention\" data-user-email=\"*\">@all</span> This scala thread is active and I'll be camping it closely for the next few weeks if anyone wants help with scala. </p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37383160,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "corydominguez@gmail.com",
            "sender_full_name": "Cory Michael Dominguez (he) (SP1'15)",
            "sender_id": 7625,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "sbt help",
            "submessages": [],
            "timestamp": 1427732746,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/e608c8cb27858cc5aaf7d0c1e57958d7?d=identicon&version=1",
            "client": "website",
            "content": "<p>Same here! Happy to help with scala/sbt questions. I could run a small sbt workshop if you guys interested digging a bit more.</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37383254,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "grzegorz.kossakowski@gmail.com",
            "sender_full_name": "Grzegorz Kossakowski",
            "sender_id": 7734,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "sbt help",
            "submessages": [],
            "timestamp": 1427732841,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/dbbaab1a54e2028c675e39c17cc064dd?d=identicon&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>Yes plz</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37383270,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "pamela.selle@gmail.com",
            "sender_full_name": "Pam Selle (she) (m1'19)",
            "sender_id": 7653,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "sbt help",
            "submessages": [],
            "timestamp": 1427732862,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/d495685876a5a195b6ef5fb9a269b6d0dcd5c5fe?x=x&version=1",
            "client": "website",
            "content": "<p>Because it does exist, but produces a <code>CanBuildFrom</code> that builds <code>NoBuilder</code>s, whose <code>result</code> message throws, you can compile</p>\n<div class=\"codehilite\"><pre>  <span class=\"k\">def</span> <span class=\"n\">gimme</span><span class=\"o\">[</span><span class=\"kt\">A</span>,<span class=\"kt\">CC</span>,<span class=\"kt\">That</span><span class=\"o\">](</span><span class=\"n\">c</span><span class=\"k\">:</span><span class=\"kt\">CC</span><span class=\"o\">)(</span><span class=\"k\">implicit</span> <span class=\"n\">cbf</span><span class=\"k\">:</span> <span class=\"kt\">CanBuildFrom</span><span class=\"o\">[</span><span class=\"kt\">CC</span>,<span class=\"kt\">A</span>,<span class=\"kt\">That</span><span class=\"o\">])</span> <span class=\"k\">=</span> <span class=\"n\">cbf</span><span class=\"o\">().</span><span class=\"n\">result</span>\n  <span class=\"n\">println</span><span class=\"o\">(</span><span class=\"n\">gimme</span><span class=\"o\">(</span><span class=\"nc\">List</span><span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"mi\">2</span><span class=\"o\">,</span><span class=\"mi\">3</span><span class=\"o\">).</span><span class=\"n\">view</span><span class=\"o\">))</span>\n</pre></div>\n\n\n<p>and then get an <code>UnsupportedOperationException(\"TraversableViewBuilder.result\")</code> at runtime.<br>\nI can see why a <code>Builder</code> for <code>SeqView</code> doesn't make any sense, but it seems like Scala is going out of its way not to catch the mistake at compilation time.</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37436696,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "pnf@podsnap.com",
            "sender_full_name": "Peter Fraenkel (he) (S'13)",
            "sender_id": 2142,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "Why does TraversableLike.canBuildFrom exist?",
            "submessages": [],
            "timestamp": 1427812592,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/d495685876a5a195b6ef5fb9a269b6d0dcd5c5fe?x=x&version=1",
            "client": "website",
            "content": "<p>Seems like the idea is to keep the monadic method signatures the same as for normal collections, even though they never use their CanBuildFrom:<br>\n<a href=\"http://stackoverflow.com/questions/24462742/how-does-scala-collection-traversableview-nobuilder-work\" target=\"_blank\" title=\"http://stackoverflow.com/questions/24462742/how-does-scala-collection-traversableview-nobuilder-work\">http://stackoverflow.com/questions/24462742/how-does-scala-collection-traversableview-nobuilder-work</a><br>\nI still don't understand why it's necessary to keep implicit cbf in the signatures.</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37440723,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "pnf@podsnap.com",
            "sender_full_name": "Peter Fraenkel (he) (S'13)",
            "sender_id": 2142,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "Why does TraversableLike.canBuildFrom exist?",
            "submessages": [],
            "timestamp": 1427814194,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/1c860d00a4cedc01147fbb2e0533c37b?d=identicon&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p><span class=\"user-mention\" data-user-email=\"grzegorz.kossakowski@gmail.com\">@Grzegorz Kossakowski</span> If you are free sometime today can I get a code review from you? <a href=\"https://github.com/comicgator/maestro\" target=\"_blank\" title=\"https://github.com/comicgator/maestro\">https://github.com/comicgator/maestro</a> and <a href=\"https://github.com/comicgator/lurker\" target=\"_blank\" title=\"https://github.com/comicgator/lurker\">https://github.com/comicgator/lurker</a></p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37558555,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "corydominguez@gmail.com",
            "sender_full_name": "Cory Michael Dominguez (he) (SP1'15)",
            "sender_id": 7625,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "code review",
            "submessages": [],
            "timestamp": 1427999328,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/781a4ea07b4032f6a2e57c06b760ef3a?d=identicon&version=1",
            "client": "website",
            "content": "<p>Could someone who knows some Scala review a short (&lt;100 line) program with me?  I'm interested in improving the organization and making it more idiomatic, and struggling a bit with the object-functional thing.</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37846782,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "kmhigley@gmail.com",
            "sender_full_name": "Karl Higley (SP2'15)",
            "sender_id": 7868,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "Organizing code",
            "submessages": [],
            "timestamp": 1428509417,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/1c860d00a4cedc01147fbb2e0533c37b?d=identicon&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>Yeah are you free now?</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37848848,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "corydominguez@gmail.com",
            "sender_full_name": "Cory Michael Dominguez (he) (SP1'15)",
            "sender_id": 7625,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "Organizing code",
            "submessages": [],
            "timestamp": 1428512084,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/dbbaab1a54e2028c675e39c17cc064dd?d=identicon&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>Found it!! <span class=\"user-mention\" data-user-email=\"erisa85d@gmail.com\">@Erisa Dervishi  (SP2'15)</span> <span class=\"user-mention\" data-user-email=\"kmhigley@gmail.com\">@Karl Higley (SP2'15)</span> </p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 38169436,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "pamela.selle@gmail.com",
            "sender_full_name": "Pam Selle (she) (m1'19)",
            "sender_id": 7653,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "reactive programming coursera",
            "submessages": [],
            "timestamp": 1429113140,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/781a4ea07b4032f6a2e57c06b760ef3a?d=identicon&version=1",
            "client": "website",
            "content": "<p>Hooray!</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 38169439,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "kmhigley@gmail.com",
            "sender_full_name": "Karl Higley (SP2'15)",
            "sender_id": 7868,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "reactive programming coursera",
            "submessages": [],
            "timestamp": 1429113158,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/dbbaab1a54e2028c675e39c17cc064dd?d=identicon&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>I think you're both in here already because it didn't tell me you aren't</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 38169447,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "pamela.selle@gmail.com",
            "sender_full_name": "Pam Selle (she) (m1'19)",
            "sender_id": 7653,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "reactive programming coursera",
            "submessages": [],
            "timestamp": 1429113165,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/dbbaab1a54e2028c675e39c17cc064dd?d=identicon&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p><span class=\"user-mention\" data-user-email=\"erisa85d@gmail.com\">@Erisa Dervishi  (SP2'15)</span> </p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 38169451,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "pamela.selle@gmail.com",
            "sender_full_name": "Pam Selle (she) (m1'19)",
            "sender_id": 7653,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "reactive programming coursera",
            "submessages": [],
            "timestamp": 1429113171,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/6cfe3624e3978459cbade1099bada52720bb72e2?x=x&version=1",
            "client": "website",
            "content": "<p>Great</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 38169459,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "erisa85d@gmail.com",
            "sender_full_name": "Erisa Dervishi (SP2'15)",
            "sender_id": 7870,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "reactive programming coursera",
            "submessages": [],
            "timestamp": 1429113195,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p>I was a community TA for the first half of the course the last time they offered it (eventually I got distracted). Happy to help.</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 38170741,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "reactive programming coursera",
            "submessages": [],
            "timestamp": 1429114592,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/2249c2fb0fe071d1199464fd91ac8627?d=identicon&version=1",
            "client": "website",
            "content": "<p>I think <span class=\"user-mention\" data-user-email=\"virajosinha@gmail.com\">@Viraj Sinha (SP1'15)</span>  is interested too, we were talking about it last night. I took it before, fun class! </p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 38186863,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "lizabeth.kent@gmail.com",
            "sender_full_name": "Libby Kent (W1'14)",
            "sender_id": 6926,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "reactive programming coursera",
            "submessages": [],
            "timestamp": 1429133130,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/849c0e2e2c09df57ba091b26cf836d6a?d=identicon&version=1",
            "client": "website",
            "content": "<p>I'm very interested! Actually I think I'm going to RC tomorrow(Thursday) , so if you guys want to meet to talk about it, I will totally join.  I think maybe we can form a study group which meets on, say, Thursday?</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 38201261,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "bz2228@columbia.edu",
            "sender_full_name": "Bocheng Zhou (W2'15)",
            "sender_id": 7091,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "reactive programming coursera",
            "submessages": [],
            "timestamp": 1429155968,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/42e5e35fcf7a07bfbbd83456efe5c6821f87c9bc?x=x&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>Yup i'm interested</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 38218040,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "virajosinha@gmail.com",
            "sender_full_name": "Viraj Sinha (SP1'15)",
            "sender_id": 7634,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "reactive programming coursera",
            "submessages": [],
            "timestamp": 1429193200,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/a897e9d6a0e8aff13a39e0515c38ee2d9482c809?x=x&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>also interested!</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 38224266,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "guest.austin@gmail.com",
            "sender_full_name": "Austin Guest (they) (SP2'19)",
            "sender_id": 6930,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "reactive programming coursera",
            "submessages": [],
            "timestamp": 1429200891,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/f33ab270e7b7512fc38d9dad2644501b?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"alan@hackerschool.com\">@Alan O'Donnell</span> Curious, what are your thoughts on the course? Did you learn a lot? Anything negative to say about it? Around how much time did you spend on it?</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 38230947,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "ot@oskarthoren.com",
            "sender_full_name": "Oskar Thor\u00e9n (F'12)",
            "sender_id": 876,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "reactive programming coursera",
            "submessages": [],
            "timestamp": 1429209788,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p>It was fun to learn about Futures and <code>async</code>/<code>await</code>. The Scala IDE didn't work very well back then, so that was a pain. Some of the problem sets weren't super well thought out.</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 38231025,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "reactive programming coursera",
            "submessages": [],
            "timestamp": 1429209851,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p>I spent a fair amount of time answering questions in the forums (hence why I got to be a community TA). The psets only took a while when they were poorly thought-out.</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 38231047,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "reactive programming coursera",
            "submessages": [],
            "timestamp": 1429209896,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/f33ab270e7b7512fc38d9dad2644501b?d=identicon&version=1",
            "client": "website",
            "content": "<p>Cool, thanks!</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 38231061,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "ot@oskarthoren.com",
            "sender_full_name": "Oskar Thor\u00e9n (F'12)",
            "sender_id": 876,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "reactive programming coursera",
            "submessages": [],
            "timestamp": 1429209919,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p>Actually, probably the best part was the forums: there were some awesome TAs who posted really thoughtful answers.</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 38231130,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "reactive programming coursera",
            "submessages": [],
            "timestamp": 1429209979,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/f33ab270e7b7512fc38d9dad2644501b?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"alan@hackerschool.com\">@Alan O'Donnell</span>  Did you feel like it changed how you thought about making \"reactive\"/reliable applications? I.e. before you didn't really know but now you are confident on how to do so</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 38231299,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "ot@oskarthoren.com",
            "sender_full_name": "Oskar Thor\u00e9n (F'12)",
            "sender_id": 876,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "reactive programming coursera",
            "submessages": [],
            "timestamp": 1429210226,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/849c0e2e2c09df57ba091b26cf836d6a?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"me@oskarth.com\">@Oskar Thor\u00e9n (F'12)</span> <span class=\"user-mention\" data-user-email=\"alan@hackerschool.com\">@Alan O'Donnell</span> It seems they've made some changes to the course since the last offering, which was 1.5 years ago. <br>\nAccording to this:<br>\n<a href=\"https://typesafe.com/blog/principle-of-reactive-programming-coursera\" target=\"_blank\" title=\"https://typesafe.com/blog/principle-of-reactive-programming-coursera\">https://typesafe.com/blog/principle-of-reactive-programming-coursera</a></p>\n<blockquote>\n<p>In this course, Martin now covers Functional Reactive Programming (FRP), Erik has completely re-recorded his two weeks and Roland has redone the Akka Persistence part so that it covers the actual implementation.</p>\n</blockquote>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 38233202,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "bz2228@columbia.edu",
            "sender_full_name": "Bocheng Zhou (W2'15)",
            "sender_id": 7091,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "reactive programming coursera",
            "submessages": [],
            "timestamp": 1429212882,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/f33ab270e7b7512fc38d9dad2644501b?d=identicon&version=1",
            "client": "website",
            "content": "<p>That's good to know <span class=\"user-mention\" data-user-email=\"bz2228@columbia.edu\">@Bocheng Zhou (W2'15)</span>! Though I read somewhere that the Rx bit was confusing (lecture vsproblem-wise), which seems to be the only thing that hasn't changed</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 38233238,
            "is_me_message": false,
            "last_edit_timestamp": 1429213601,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "ot@oskarthoren.com",
            "sender_full_name": "Oskar Thor\u00e9n (F'12)",
            "sender_id": 876,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "reactive programming coursera",
            "submessages": [],
            "timestamp": 1429212961,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/f33ab270e7b7512fc38d9dad2644501b?d=identicon&version=1",
            "client": "website",
            "content": "<p>Doing the Elements of Computing Systems course and working through the Functional Programming in Scala book right now, so trying to decide if it's worth it to invest time in this course. It seems really cool to be able to build \"Netflix\"-like responsiveness etc, I'm just worried a lot of it is buzzword/marketing for typesafe kind of</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 38233324,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "ot@oskarthoren.com",
            "sender_full_name": "Oskar Thor\u00e9n (F'12)",
            "sender_id": 876,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "reactive programming coursera",
            "submessages": [],
            "timestamp": 1429213062,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/f33ab270e7b7512fc38d9dad2644501b?d=identicon&version=1",
            "client": "website",
            "content": "<p>Erik Meijer is definitely awesome</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 38233365,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "ot@oskarthoren.com",
            "sender_full_name": "Oskar Thor\u00e9n (F'12)",
            "sender_id": 876,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "reactive programming coursera",
            "submessages": [],
            "timestamp": 1429213087,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/6cfe3624e3978459cbade1099bada52720bb72e2?x=x&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"bz2228@columbia.edu\">@Bocheng Zhou (W2'15)</span>  we can definitely set up a study group that meets on Thursdays. Let's come up with a convenient time for all.</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 38234514,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "erisa85d@gmail.com",
            "sender_full_name": "Erisa Dervishi (SP2'15)",
            "sender_id": 7870,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "reactive programming coursera",
            "submessages": [],
            "timestamp": 1429214629,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/849c0e2e2c09df57ba091b26cf836d6a?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"erisa85d@gmail.com\">@Erisa Dervishi  (SP2'15)</span> Cool! According to the RC calendar, it seems Thursday afternoons have lots of empty slots. </p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 38235752,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "bz2228@columbia.edu",
            "sender_full_name": "Bocheng Zhou (W2'15)",
            "sender_id": 7091,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "reactive programming coursera",
            "submessages": [],
            "timestamp": 1429216184,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/c1441d6ab18b318b74f22575033417b4c0e8ba15?x=x&version=1",
            "client": "website",
            "content": "<p>I'd be open for weekly meetings. Thursdays are fine!</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 38235798,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "killpack@princeton.edu",
            "sender_full_name": "Dakota Killpack (SP2'15)",
            "sender_id": 7856,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "reactive programming coursera",
            "submessages": [],
            "timestamp": 1429216209,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/6cfe3624e3978459cbade1099bada52720bb72e2?x=x&version=1",
            "client": "website",
            "content": "<p>Hi guys I am using spark with scala, for a small project I am working on.<br>\nThe data consist of records with 3 fields of the following format: category sub_category items_per_sub_category<br>\nThe task is to find the top 25 sub_categories by  items_per_sub_category for each unique category.<br>\nI have done a bunch of transformations to the dataset, and the final RDD contains key-value records where the key is the category and the value is a PriorityQueue with the top 25 sub_categories. However when I submit the spark job I get the following error:</p>\n<div class=\"codehilite\"><pre>ERROR Executor: Exception in task 0.0 in stage 2.0 (TID 17)\njava.lang.UnsupportedOperationException: unsuitable as hash key\n    at scala.collection.mutable.PriorityQueue.hashCode(PriorityQueue.scala:226)\n    at scala.runtime.ScalaRunTime$.hash(ScalaRunTime.scala:210)\n    at scala.util.hashing.MurmurHash3.productHash(MurmurHash3.scala:63)\n    at scala.util.hashing.MurmurHash3$.productHash(MurmurHash3.scala:210)\n    at scala.runtime.ScalaRunTime$._hashCode(ScalaRunTime.scala:172)\n    at scala.Tuple2.hashCode(Tuple2.scala:19)\n    at scala.collection.mutable.FlatHashTable$HashUtils$class.elemHashCode(FlatHashTable.scala:391)\n    at scala.collection.mutable.HashSet.elemHashCode(HashSet.scala:41)\n    at scala.collection.mutable.FlatHashTable$class.findEntryImpl(FlatHashTable.scala:123)\n    at scala.collection.mutable.FlatHashTable$class.containsEntry(FlatHashTable.scala:119)\n    at scala.collection.mutable.HashSet.containsEntry(HashSet.scala:41)\n    at scala.collection.mutable.HashSet.contains(HashSet.scala:58)\n    at org.apache.spark.serializer.SerializationDebugger$SerializationDebugger.visit(SerializationDebugger.scala:78)\n    at org.apache.spark.serializer.SerializationDebugger$.find(SerializationDebugger.scala:58)\n    at org.apache.spark.serializer.SerializationDebugger$.improveException(SerializationDebugger.scala:39)\n    at org.apache.spark.serializer.JavaSerializationStream.writeObject(JavaSerializer.scala:47)\n    at org.apache.spark.storage.DiskBlockObjectWriter.write(BlockObjectWriter.scala:204)\n    at org.apache.spark.util.collection.ExternalSorter$$anonfun$writePartitionedFile$5$$anonfun$apply$2.apply(ExternalSorter.scala:759)\n    at org.apache.spark.util.collection.ExternalSorter$$anonfun$writePartitionedFile$5$$anonfun$apply$2.apply(ExternalSorter.scala:758)\n    at scala.collection.Iterator$class.foreach(Iterator.scala:727)\n    at org.apache.spark.util.collection.ExternalSorter$IteratorForPartition.foreach(ExternalSorter.scala:823)\n    at org.apache.spark.util.collection.ExternalSorter$$anonfun$writePartitionedFile$5.apply(ExternalSorter.scala:758)\n    at org.apache.spark.util.collection.ExternalSorter$$anonfun$writePartitionedFile$5.apply(ExternalSorter.scala:754)\n    at scala.collection.Iterator$class.foreach(Iterator.scala:727)\n    at scala.collection.AbstractIterator.foreach(Iterator.scala:1157)\n    at org.apache.spark.util.collection.ExternalSorter.writePartitionedFile(ExternalSorter.scala:754)\n    at org.apache.spark.shuffle.sort.SortShuffleWriter.write(SortShuffleWriter.scala:71)\n    at org.apache.spark.scheduler.ShuffleMapTask.runTask(ShuffleMapTask.scala:68)\n    at org.apache.spark.scheduler.ShuffleMapTask.runTask(ShuffleMapTask.scala:41)\n    at org.apache.spark.scheduler.Task.run(Task.scala:64)\n    at org.apache.spark.executor.Executor$TaskRunner.run(Executor.scala:203)\n    at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1145)\n    at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:615)\n    at java.lang.Thread.run(Thread.java:745)\n15/06/09 20:51:37 INFO TaskSetManager: Starting task 4.0 in stage 2.0 (TID 21, localhost, PROCESS_LOCAL, 1959 bytes)\n15/06/09 20:51:37 INFO Executor: Running task 4.0 in stage 2.0 (TID 21)\n15/06/09 20:51:37 WARN TaskSetManager: Lost task 0.0 in stage 2.0 (TID 17, localhost): java.lang.UnsupportedOperationException: unsuitable as hash key\n    at scala.collection.mutable.PriorityQueue.hashCode(PriorityQueue.scala:226)\n</pre></div>\n\n\n<p>From the error it looks like spark is trying to use  the priority queue which is mutable as a hashkey so the error makes sense, but I don't get why it is doing that since the value of the RDD record is a priority queue not the key.<br>\nps: I am using priorityqueues to keep trak of the top 25 sub_categories, per each category, and using the combineByKey function to do that. <br>\nMaybe there is a more straightforward solution to what I want to achieve, so any suggestion is appreciated :)</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 40863629,
            "is_me_message": false,
            "last_edit_timestamp": 1433902071,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "erisa85d@gmail.com",
            "sender_full_name": "Erisa Dervishi (SP2'15)",
            "sender_id": 7870,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "Spark",
            "submessages": [],
            "timestamp": 1433902022,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/781a4ea07b4032f6a2e57c06b760ef3a?d=identicon&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>Don't know if this will solve your problem, but I did find this while trying to track the error down in the source: <a href=\"https://github.com/apache/spark/blob/master/core/src/main/scala/org/apache/spark/util/BoundedPriorityQueue.scala\" target=\"_blank\" title=\"https://github.com/apache/spark/blob/master/core/src/main/scala/org/apache/spark/util/BoundedPriorityQueue.scala\">https://github.com/apache/spark/blob/master/core/src/main/scala/org/apache/spark/util/BoundedPriorityQueue.scala</a></p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 40885771,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "kmhigley@gmail.com",
            "sender_full_name": "Karl Higley (SP2'15)",
            "sender_id": 7868,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "Spark",
            "submessages": [],
            "timestamp": 1433943944,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/781a4ea07b4032f6a2e57c06b760ef3a?d=identicon&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>Unfortunately, like a lot of useful things in the Spark source, it's marked as private.</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 40885816,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "kmhigley@gmail.com",
            "sender_full_name": "Karl Higley (SP2'15)",
            "sender_id": 7868,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "Spark",
            "submessages": [],
            "timestamp": 1433943980,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/781a4ea07b4032f6a2e57c06b760ef3a?d=identicon&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>After digging through the Spark and Scala source mentioned in the stack trace, I still don't quite know why this is happening.  Could you share the code that produces this error?</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 40886479,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "kmhigley@gmail.com",
            "sender_full_name": "Karl Higley (SP2'15)",
            "sender_id": 7868,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "Spark",
            "submessages": [],
            "timestamp": 1433945110,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/05737f7353d71ece81912e75bd95cf17?d=identicon&version=1",
            "client": "website",
            "content": "<p>Use <code>top</code>, behind the hood it uses a PQ</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 40899915,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "adrien.guillo@gmail.com",
            "sender_full_name": "Adrien Guillo (S1'17)",
            "sender_id": 6676,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "Spark",
            "submessages": [],
            "timestamp": 1433960680,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/6cfe3624e3978459cbade1099bada52720bb72e2?x=x&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"kmhigley@gmail.com\">@Karl Higley (SP2'15)</span>  Here is the source code (change the ugly  local paths I am using in case you want to run it) :<br>\n<a href=\"https://github.com/erisa85/WikipediaPageView\" target=\"_blank\" title=\"https://github.com/erisa85/WikipediaPageView\">https://github.com/erisa85/WikipediaPageView</a></p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 40900681,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "erisa85d@gmail.com",
            "sender_full_name": "Erisa Dervishi (SP2'15)",
            "sender_id": 7870,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "Spark",
            "submessages": [],
            "timestamp": 1433961597,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/781a4ea07b4032f6a2e57c06b760ef3a?d=identicon&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>Could be wrong about this, but I think in order to use <code>top</code>, you'd first have to filter the RDD once for each category you care about.</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 40900791,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "kmhigley@gmail.com",
            "sender_full_name": "Karl Higley (SP2'15)",
            "sender_id": 7868,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "Spark",
            "submessages": [],
            "timestamp": 1433961678,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/781a4ea07b4032f6a2e57c06b760ef3a?d=identicon&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>...which would be a lot of passes over the whole dataset, if so.</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 40900823,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "kmhigley@gmail.com",
            "sender_full_name": "Karl Higley (SP2'15)",
            "sender_id": 7868,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "Spark",
            "submessages": [],
            "timestamp": 1433961712,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/6cfe3624e3978459cbade1099bada52720bb72e2?x=x&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"adrien.guillo@gmail.com\">@Adrien Guillo (F2'14)</span>  You can use top on the RDD itself, but I don't want that, I want the top 25 values for each unique key in a key-value RDD (or maybe I am not seeing the full picture)</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 40901000,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "erisa85d@gmail.com",
            "sender_full_name": "Erisa Dervishi (SP2'15)",
            "sender_id": 7870,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "Spark",
            "submessages": [],
            "timestamp": 1433961882,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/781a4ea07b4032f6a2e57c06b760ef3a?d=identicon&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p><span class=\"user-mention\" data-user-email=\"erisa85d@gmail.com\">@Erisa Dervishi  (SP2'15)</span> Point me to the data files I'd need to run this?</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 40901210,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "kmhigley@gmail.com",
            "sender_full_name": "Karl Higley (SP2'15)",
            "sender_id": 7868,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "Spark",
            "submessages": [],
            "timestamp": 1433962085,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/6cfe3624e3978459cbade1099bada52720bb72e2?x=x&version=1",
            "client": "website",
            "content": "<p>Download smth from here:<br>\n<a href=\"http://dumps.wikimedia.org/other/pagecounts-all-sites/2015/\" target=\"_blank\" title=\"http://dumps.wikimedia.org/other/pagecounts-all-sites/2015/\">http://dumps.wikimedia.org/other/pagecounts-all-sites/2015/</a></p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 40901239,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "erisa85d@gmail.com",
            "sender_full_name": "Erisa Dervishi (SP2'15)",
            "sender_id": 7870,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "Spark",
            "submessages": [],
            "timestamp": 1433962119,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/6cfe3624e3978459cbade1099bada52720bb72e2?x=x&version=1",
            "client": "website",
            "content": "<p>and the blacklist here:<br>\n<a href=\"https://s3.amazonaws.com/dd-interview-data/data_engineer/wikipedia/blacklist_domains_and_pages\" target=\"_blank\" title=\"https://s3.amazonaws.com/dd-interview-data/data_engineer/wikipedia/blacklist_domains_and_pages\">https://s3.amazonaws.com/dd-interview-data/data_engineer/wikipedia/blacklist_domains_and_pages</a></p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 40901284,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "erisa85d@gmail.com",
            "sender_full_name": "Erisa Dervishi (SP2'15)",
            "sender_id": 7870,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "Spark",
            "submessages": [],
            "timestamp": 1433962187,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/781a4ea07b4032f6a2e57c06b760ef3a?d=identicon&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>Cool, I'll give it a try.</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 40901662,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "kmhigley@gmail.com",
            "sender_full_name": "Karl Higley (SP2'15)",
            "sender_id": 7868,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "Spark",
            "submessages": [],
            "timestamp": 1433962609,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/6cfe3624e3978459cbade1099bada52720bb72e2?x=x&version=1",
            "client": "website",
            "content": "<p>thnx</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 40902010,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "erisa85d@gmail.com",
            "sender_full_name": "Erisa Dervishi (SP2'15)",
            "sender_id": 7870,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "Spark",
            "submessages": [],
            "timestamp": 1433962946,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/781a4ea07b4032f6a2e57c06b760ef3a?d=identicon&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>Good news!  I can replicate the issue. <img alt=\":smiley_cat:\" class=\"emoji\" src=\"static/third/gemoji/images/emoji/smiley_cat.png\" title=\":smiley_cat:\"> </p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 40902204,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "kmhigley@gmail.com",
            "sender_full_name": "Karl Higley (SP2'15)",
            "sender_id": 7868,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "Spark",
            "submessages": [],
            "timestamp": 1433963230,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/05737f7353d71ece81912e75bd95cf17?d=identicon&version=1",
            "client": "website",
            "content": "<p>yeah  I would do that in 3 steps, if you cache the initial RDD it's not going to be much slower (same complexity) and the code is going be much shorter / idiomatic.</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 40902958,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "adrien.guillo@gmail.com",
            "sender_full_name": "Adrien Guillo (S1'17)",
            "sender_id": 6676,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "Spark",
            "submessages": [],
            "timestamp": 1433964083,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/781a4ea07b4032f6a2e57c06b760ef3a?d=identicon&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>Looking at the API docs, just realized that combineByKey tries to hash partition the resulting RDD.</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 40911081,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "kmhigley@gmail.com",
            "sender_full_name": "Karl Higley (SP2'15)",
            "sender_id": 7868,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "Spark",
            "submessages": [],
            "timestamp": 1433973956,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/781a4ea07b4032f6a2e57c06b760ef3a?d=identicon&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>Wonder if you'd have more luck with aggregateByKey.</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 40911113,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "kmhigley@gmail.com",
            "sender_full_name": "Karl Higley (SP2'15)",
            "sender_id": 7868,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "Spark",
            "submessages": [],
            "timestamp": 1433973967,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/6cfe3624e3978459cbade1099bada52720bb72e2?x=x&version=1",
            "client": "website",
            "content": "<p>Tried aggregateByKey as well with no luck, ran into the same issue:</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 40955196,
            "is_me_message": false,
            "last_edit_timestamp": 1434046422,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "erisa85d@gmail.com",
            "sender_full_name": "Erisa Dervishi (SP2'15)",
            "sender_id": 7870,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "Spark",
            "submessages": [],
            "timestamp": 1434046183,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/6cfe3624e3978459cbade1099bada52720bb72e2?x=x&version=1",
            "client": "website",
            "content": "<p>ava.lang.UnsupportedOperationException: unsuitable as hash key<br>\n    at scala.collection.mutable.PriorityQueue.hashCode(PriorityQueue.scala:226)<br>\n    at scala.collection.mutable.FlatHashTable$HashUtils$class.elemHashCode(FlatHashTable.scala:391)</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 40955198,
            "is_me_message": false,
            "last_edit_timestamp": 1434046405,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "erisa85d@gmail.com",
            "sender_full_name": "Erisa Dervishi (SP2'15)",
            "sender_id": 7870,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "Spark",
            "submessages": [],
            "timestamp": 1434046185,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/3ad220596b601687b8785b5fbfa8ecbe?d=identicon&version=1",
            "client": "website",
            "content": "<p>When you have to make an HTTP request from a scala program, what do you use? akka-http? dispatch? java.net.URLConnection? opinions welcome!</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 41224861,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "bgmuthalaly@gmail.com",
            "sender_full_name": "Bert Muthalaly (S1'14)",
            "sender_id": 5871,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "http",
            "submessages": [],
            "timestamp": 1434556336,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/6cfe3624e3978459cbade1099bada52720bb72e2?x=x&version=1",
            "client": "website",
            "content": "<p>I haven't looked very closely to it, but I am planing to use spray libraries for my scala api requests . It has http client libraries that might be useful to you. Take a look here: <a href=\"http://spray.io/introduction/what-is-spray/\" target=\"_blank\" title=\"http://spray.io/introduction/what-is-spray/\">http://spray.io/introduction/what-is-spray/</a></p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 41233110,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "erisa85d@gmail.com",
            "sender_full_name": "Erisa Dervishi (SP2'15)",
            "sender_id": 7870,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "http",
            "submessages": [],
            "timestamp": 1434567402,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/a897e9d6a0e8aff13a39e0515c38ee2d9482c809?x=x&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>i've used dispatch in the past and it's good for simple one liner type stuff (clean DSL nice composition of futures, etc..) i also just got done reading the docs on <a href=\"http://doc.akka.io/docs/akka-stream-and-http-experimental/1.0-M2/scala.html\" target=\"_blank\" title=\"http://doc.akka.io/docs/akka-stream-and-http-experimental/1.0-M2/scala.html\">akka-stream</a> and akka-http (typesafe's replacement for spray, built on top of akka-stream, repurposing parts of spray that worked and learning from its shortcomings). think it's an incredibly exciting and well-designed stack. same clean DSL (including for routing), but many levels of abstraction at which you can go at it and the introduction of the representation of Flows (which have Sources, Sinks, are composable into Graphs of data pipelines, hide Actors under the hood so recover type safety and composability, etc..) is lovely!</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 41276005,
            "is_me_message": false,
            "last_edit_timestamp": 1434645178,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "guest.austin@gmail.com",
            "sender_full_name": "Austin Guest (they) (SP2'19)",
            "sender_id": 6930,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "http",
            "submessages": [],
            "timestamp": 1434644846,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/a897e9d6a0e8aff13a39e0515c38ee2d9482c809?x=x&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>ps: here are two talks from mathias doenitz from typesafe that i find very convincing in making the case for why the spray/akka-http stack is a winner:</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 41276107,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "guest.austin@gmail.com",
            "sender_full_name": "Austin Guest (they) (SP2'19)",
            "sender_id": 6930,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "http",
            "submessages": [],
            "timestamp": 1434644984,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/a897e9d6a0e8aff13a39e0515c38ee2d9482c809?x=x&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>(1) <a href=\"https://www.youtube.com/watch?v=fUuLJmWB__E\" target=\"_blank\" title=\"https://www.youtube.com/watch?v=fUuLJmWB__E\">on spray at NEScala 2012</a></p>\n<div class=\"message_inline_image\"><a href=\"https://www.youtube.com/watch?v=fUuLJmWB__E\" target=\"_blank\" title=\"https://www.youtube.com/watch?v=fUuLJmWB__E\"><img src=\"https://i.ytimg.com/vi/fUuLJmWB__E/default.jpg\"></a></div>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 41276174,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "guest.austin@gmail.com",
            "sender_full_name": "Austin Guest (they) (SP2'19)",
            "sender_id": 6930,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "http",
            "submessages": [],
            "timestamp": 1434645017,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/a897e9d6a0e8aff13a39e0515c38ee2d9482c809?x=x&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>(2) <a href=\"https://www.youtube.com/watch?v=y_slPbktLr0\" target=\"_blank\" title=\"https://www.youtube.com/watch?v=y_slPbktLr0\">on akka-http at NEScala 2015</a> (we were there and i missed it!)</p>\n<div class=\"message_inline_image\"><a href=\"https://www.youtube.com/watch?v=y_slPbktLr0\" target=\"_blank\" title=\"https://www.youtube.com/watch?v=y_slPbktLr0\"><img src=\"https://i.ytimg.com/vi/y_slPbktLr0/default.jpg\"></a></div>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 41276195,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "guest.austin@gmail.com",
            "sender_full_name": "Austin Guest (they) (SP2'19)",
            "sender_id": 6930,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "http",
            "submessages": [],
            "timestamp": 1434645059,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/f33ab270e7b7512fc38d9dad2644501b?d=identicon&version=1",
            "client": "website",
            "content": "<p>You can also use Apache HTTP, spray and akka have a lot of magic</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 41276355,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "ot@oskarthoren.com",
            "sender_full_name": "Oskar Thor\u00e9n (F'12)",
            "sender_id": 876,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "http",
            "submessages": [],
            "timestamp": 1434645275,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/f33ab270e7b7512fc38d9dad2644501b?d=identicon&version=1",
            "client": "website",
            "content": "<p>Something like this: <a href=\"http://alvinalexander.com/scala/scala-rest-client-apache-httpclient-restful-clients\" target=\"_blank\" title=\"http://alvinalexander.com/scala/scala-rest-client-apache-httpclient-restful-clients\">http://alvinalexander.com/scala/scala-rest-client-apache-httpclient-restful-clients</a></p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 41276385,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "ot@oskarthoren.com",
            "sender_full_name": "Oskar Thor\u00e9n (F'12)",
            "sender_id": 876,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "http",
            "submessages": [],
            "timestamp": 1434645329,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/f33ab270e7b7512fc38d9dad2644501b?d=identicon&version=1",
            "client": "website",
            "content": "<p>We used Apache at our last job, but that part unfortunately isn't open sourced</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 41276398,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "ot@oskarthoren.com",
            "sender_full_name": "Oskar Thor\u00e9n (F'12)",
            "sender_id": 876,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "http",
            "submessages": [],
            "timestamp": 1434645360,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/3ad220596b601687b8785b5fbfa8ecbe?d=identicon&version=1",
            "client": "website",
            "content": "<p>I initially looked at akka-http, but the client API docs literally read <code>(TODO)</code> (<a href=\"http://doc.akka.io/docs/akka-stream-and-http-experimental/1.0-M2/scala/http/client.html\" target=\"_blank\" title=\"http://doc.akka.io/docs/akka-stream-and-http-experimental/1.0-M2/scala/http/client.html\">http://doc.akka.io/docs/akka-stream-and-http-experimental/1.0-M2/scala/http/client.html</a>), which wasn't exactly confidence inspiring. I ended up wrapping java.net.URLConnection (it's pretty ad-hoc): </p>\n<div class=\"codehilite\"><pre><span class=\"k\">case</span> <span class=\"k\">class</span> <span class=\"nc\">HTTP</span><span class=\"o\">(</span><span class=\"n\">url</span><span class=\"k\">:</span> <span class=\"kt\">String</span><span class=\"o\">,</span> <span class=\"n\">authentication</span><span class=\"k\">:</span> <span class=\"kt\">Option</span><span class=\"o\">[</span><span class=\"kt\">Authentication</span><span class=\"o\">]</span> <span class=\"k\">=</span> <span class=\"nc\">None</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n  <span class=\"k\">def</span> <span class=\"n\">get</span> <span class=\"k\">=</span> <span class=\"k\">new</span> <span class=\"n\">java</span><span class=\"o\">.</span><span class=\"n\">net</span><span class=\"o\">.</span><span class=\"nc\">URL</span><span class=\"o\">(</span><span class=\"n\">url</span><span class=\"o\">).</span><span class=\"n\">openConnection</span><span class=\"o\">.</span><span class=\"n\">setAuth</span><span class=\"o\">(</span><span class=\"n\">authentication</span><span class=\"o\">).</span><span class=\"n\">read</span>\n\n  <span class=\"k\">def</span> <span class=\"n\">post</span><span class=\"o\">(</span><span class=\"n\">json</span><span class=\"k\">:</span> <span class=\"kt\">String</span><span class=\"o\">)</span> <span class=\"k\">=</span>\n    <span class=\"k\">new</span> <span class=\"n\">java</span><span class=\"o\">.</span><span class=\"n\">net</span><span class=\"o\">.</span><span class=\"nc\">URL</span><span class=\"o\">(</span><span class=\"n\">url</span><span class=\"o\">).</span><span class=\"n\">openConnection</span>\n      <span class=\"o\">.</span><span class=\"n\">setHeaders</span><span class=\"o\">(</span><span class=\"nc\">Map</span><span class=\"o\">(</span><span class=\"s\">&quot;Accept-Charset&quot;</span> <span class=\"o\">-&gt;</span> <span class=\"s\">&quot;utf-8&quot;</span><span class=\"o\">,</span> <span class=\"s\">&quot;Content-Type&quot;</span> <span class=\"o\">-&gt;</span> <span class=\"s\">&quot;application/json;charset=utf-8&quot;</span><span class=\"o\">))</span>\n      <span class=\"o\">.</span><span class=\"n\">setAuth</span><span class=\"o\">(</span><span class=\"n\">authentication</span><span class=\"o\">)</span>\n      <span class=\"o\">.</span><span class=\"n\">write</span><span class=\"o\">(</span><span class=\"n\">json</span><span class=\"o\">)</span>\n      <span class=\"o\">.</span><span class=\"n\">read</span>\n\n  <span class=\"k\">implicit</span> <span class=\"k\">class</span> <span class=\"nc\">RichConn</span><span class=\"o\">(</span><span class=\"n\">conn</span><span class=\"k\">:</span> <span class=\"kt\">java.net.URLConnection</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n    <span class=\"k\">private</span> <span class=\"k\">def</span> <span class=\"n\">base64</span><span class=\"o\">(</span><span class=\"n\">s</span><span class=\"k\">:</span> <span class=\"kt\">String</span><span class=\"o\">)</span> <span class=\"k\">=</span> <span class=\"n\">java</span><span class=\"o\">.</span><span class=\"n\">util</span><span class=\"o\">.</span><span class=\"nc\">Base64</span><span class=\"o\">.</span><span class=\"n\">getEncoder</span><span class=\"o\">.</span><span class=\"n\">encodeToString</span><span class=\"o\">(</span><span class=\"n\">s</span><span class=\"o\">.</span><span class=\"n\">getBytes</span><span class=\"o\">)</span>\n    <span class=\"k\">def</span> <span class=\"n\">setAuth</span><span class=\"o\">(</span><span class=\"n\">auth</span><span class=\"k\">:</span> <span class=\"kt\">Option</span><span class=\"o\">[</span><span class=\"kt\">Authentication</span><span class=\"o\">])</span> <span class=\"k\">=</span> <span class=\"o\">{</span>\n      <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">auth</span><span class=\"o\">.</span><span class=\"n\">isDefined</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"n\">println</span><span class=\"o\">(</span><span class=\"s\">&quot;Authenticating as &quot;</span> <span class=\"o\">+</span> <span class=\"n\">auth</span> <span class=\"o\">+</span> <span class=\"s\">&quot; for URL &quot;</span> <span class=\"o\">+</span> <span class=\"n\">conn</span><span class=\"o\">.</span><span class=\"n\">getURL</span><span class=\"o\">)</span>\n        <span class=\"n\">conn</span><span class=\"o\">.</span><span class=\"n\">setRequestProperty</span><span class=\"o\">(</span><span class=\"s\">&quot;Authorization&quot;</span><span class=\"o\">,</span> <span class=\"s\">&quot;Basic &quot;</span> <span class=\"o\">+</span> <span class=\"n\">base64</span><span class=\"o\">(</span><span class=\"n\">auth</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"o\">.</span><span class=\"n\">username</span> <span class=\"o\">+</span> <span class=\"s\">&quot;:&quot;</span> <span class=\"o\">+</span> <span class=\"n\">auth</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"o\">.</span><span class=\"n\">password</span><span class=\"o\">))</span>\n      <span class=\"o\">}</span>\n      <span class=\"n\">conn</span>\n    <span class=\"o\">}</span>\n    <span class=\"k\">def</span> <span class=\"n\">setHeaders</span><span class=\"o\">(</span><span class=\"n\">params</span><span class=\"k\">:</span> <span class=\"kt\">Map</span><span class=\"o\">[</span><span class=\"kt\">String</span>, <span class=\"kt\">String</span><span class=\"o\">])</span> <span class=\"k\">=</span> <span class=\"o\">{</span>\n      <span class=\"n\">params</span><span class=\"o\">.</span><span class=\"n\">foreach</span><span class=\"o\">((</span><span class=\"n\">kv</span><span class=\"o\">)</span> <span class=\"k\">=&gt;</span> <span class=\"n\">conn</span><span class=\"o\">.</span><span class=\"n\">setRequestProperty</span><span class=\"o\">(</span><span class=\"n\">kv</span><span class=\"o\">.</span><span class=\"n\">_1</span><span class=\"o\">,</span> <span class=\"n\">kv</span><span class=\"o\">.</span><span class=\"n\">_2</span><span class=\"o\">))</span>\n      <span class=\"n\">conn</span>\n    <span class=\"o\">}</span>\n    <span class=\"k\">def</span> <span class=\"n\">write</span><span class=\"o\">(</span><span class=\"n\">input</span><span class=\"k\">:</span> <span class=\"kt\">String</span><span class=\"o\">)</span> <span class=\"k\">=</span> <span class=\"o\">{</span>\n      <span class=\"n\">conn</span><span class=\"o\">.</span><span class=\"n\">setDoOutput</span><span class=\"o\">(</span><span class=\"kc\">true</span><span class=\"o\">)</span>\n      <span class=\"n\">conn</span><span class=\"o\">.</span><span class=\"n\">getOutputStream</span><span class=\"o\">.</span><span class=\"n\">write</span><span class=\"o\">(</span><span class=\"n\">input</span><span class=\"o\">.</span><span class=\"n\">getBytes</span><span class=\"o\">(</span><span class=\"s\">&quot;utf-8&quot;</span><span class=\"o\">))</span>\n      <span class=\"n\">conn</span>\n    <span class=\"o\">}</span>\n    <span class=\"k\">def</span> <span class=\"n\">read</span> <span class=\"k\">=</span> <span class=\"n\">scala</span><span class=\"o\">.</span><span class=\"n\">io</span><span class=\"o\">.</span><span class=\"nc\">Source</span><span class=\"o\">.</span><span class=\"n\">fromInputStream</span><span class=\"o\">(</span><span class=\"n\">conn</span><span class=\"o\">.</span><span class=\"n\">getInputStream</span><span class=\"o\">).</span><span class=\"n\">mkString</span>\n  <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</pre></div>\n\n\n<p>The <code>Option[Authentication]</code> is kind of smelly (and <code>scala.io.Source.fromInputStream</code> leaks connections D:) but otherwise this code has mostly stayed out of my way.</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 41432297,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "bgmuthalaly@gmail.com",
            "sender_full_name": "Bert Muthalaly (S1'14)",
            "sender_id": 5871,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "http",
            "submessages": [],
            "timestamp": 1434983354,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/3ad220596b601687b8785b5fbfa8ecbe?d=identicon&version=1",
            "client": "website",
            "content": "<p>oh, this approach is pretty similar to the one in the blog post <span class=\"user-mention\" data-user-email=\"me@oskarth.com\">@Oskar Thor\u00e9n (F'12)</span> linked, except using java.util instead of apache commons. </p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 41432702,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "bgmuthalaly@gmail.com",
            "sender_full_name": "Bert Muthalaly (S1'14)",
            "sender_id": 5871,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "http",
            "submessages": [],
            "timestamp": 1434983932,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/3ad220596b601687b8785b5fbfa8ecbe?d=identicon&version=1",
            "client": "website",
            "content": "<p>also kind of smelly: I ended up wrapping several invocations of this HTTP client in <code>Future {}</code>, and I suspect that my bias should probably be returning a <code>Future</code> from the HTTP client instead of wrapping at the call site. </p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 41432775,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "bgmuthalaly@gmail.com",
            "sender_full_name": "Bert Muthalaly (S1'14)",
            "sender_id": 5871,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "http",
            "submessages": [],
            "timestamp": 1434984015,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/a897e9d6a0e8aff13a39e0515c38ee2d9482c809?x=x&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p><span class=\"user-mention\" data-user-email=\"bgmuthalaly@gmail.com\">@Bert Muthalaly (S'14)</span> looks cool! (gonna dig in and give it a close read in a sec)!</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 41453821,
            "is_me_message": false,
            "last_edit_timestamp": 1435014517,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "guest.austin@gmail.com",
            "sender_full_name": "Austin Guest (they) (SP2'19)",
            "sender_id": 6930,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "http",
            "submessages": [],
            "timestamp": 1435014340,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/a897e9d6a0e8aff13a39e0515c38ee2d9482c809?x=x&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>and also... i think you were looking at an outdated version of the docs?</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 41453823,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "guest.austin@gmail.com",
            "sender_full_name": "Austin Guest (they) (SP2'19)",
            "sender_id": 6930,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "http",
            "submessages": [],
            "timestamp": 1435014356,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/a897e9d6a0e8aff13a39e0515c38ee2d9482c809?x=x&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>AFAIK this is the current (very nice!) set of docs for client side http requests: <a href=\"http://doc.akka.io/docs/akka-stream-and-http-experimental/current/scala/http/client-side/index.html\" target=\"_blank\" title=\"http://doc.akka.io/docs/akka-stream-and-http-experimental/current/scala/http/client-side/index.html\">http://doc.akka.io/docs/akka-stream-and-http-experimental/current/scala/http/client-side/index.html</a></p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 41453862,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "guest.austin@gmail.com",
            "sender_full_name": "Austin Guest (they) (SP2'19)",
            "sender_id": 6930,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "http",
            "submessages": [],
            "timestamp": 1435014389,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/a897e9d6a0e8aff13a39e0515c38ee2d9482c809?x=x&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>the version you linked to was for 1.0-M2. the current version is 1.0-RC3</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 41453873,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "guest.austin@gmail.com",
            "sender_full_name": "Austin Guest (they) (SP2'19)",
            "sender_id": 6930,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "http",
            "submessages": [],
            "timestamp": 1435014434,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/a897e9d6a0e8aff13a39e0515c38ee2d9482c809?x=x&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>which i figured out only by stripping away all the version numbers and landing on the index for the docs page here:</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 41453876,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "guest.austin@gmail.com",
            "sender_full_name": "Austin Guest (they) (SP2'19)",
            "sender_id": 6930,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "http",
            "submessages": [],
            "timestamp": 1435014453,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/a897e9d6a0e8aff13a39e0515c38ee2d9482c809?x=x&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p><a href=\"http://doc.akka.io/docs/akka-stream-and-http-experimental/\" target=\"_blank\" title=\"http://doc.akka.io/docs/akka-stream-and-http-experimental/\">http://doc.akka.io/docs/akka-stream-and-http-experimental/</a></p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 41453878,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "guest.austin@gmail.com",
            "sender_full_name": "Austin Guest (they) (SP2'19)",
            "sender_id": 6930,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "http",
            "submessages": [],
            "timestamp": 1435014459,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/a897e9d6a0e8aff13a39e0515c38ee2d9482c809?x=x&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>(clicking on \"current\" lands you on the homepage, from which i navigated to the docs i linked to)</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 41453925,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "guest.austin@gmail.com",
            "sender_full_name": "Austin Guest (they) (SP2'19)",
            "sender_id": 6930,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "http",
            "submessages": [],
            "timestamp": 1435014504,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/1c860d00a4cedc01147fbb2e0533c37b?d=identicon&version=1",
            "client": "website",
            "content": "<p>I use dispatch, the docs are a little scarce but reading the source and tests can give you some insights. There is also Spray-Client <a href=\"http://spray.io/documentation/1.2.2/spray-client/\" target=\"_blank\" title=\"http://spray.io/documentation/1.2.2/spray-client/\">http://spray.io/documentation/1.2.2/spray-client/</a> which I have used in tests, it can be good if you need to make and lot of http calls and handle them in a specific way.</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 41453987,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "corydominguez@gmail.com",
            "sender_full_name": "Cory Michael Dominguez (he) (SP1'15)",
            "sender_id": 7625,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "http",
            "submessages": [],
            "timestamp": 1435014669,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/a897e9d6a0e8aff13a39e0515c38ee2d9482c809?x=x&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>(posting haphazardly between tasks so begging major forgiveness if this isn't quite what you're after!)</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 41453997,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "guest.austin@gmail.com",
            "sender_full_name": "Austin Guest (they) (SP2'19)",
            "sender_id": 6930,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "http",
            "submessages": [],
            "timestamp": 1435014712,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/a897e9d6a0e8aff13a39e0515c38ee2d9482c809?x=x&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>ps: boooo on typesafe for constructing their docs in such a sloppy manner! and: props and love to <span class=\"user-mention\" data-user-email=\"bgmuthalaly@gmail.com\">@Bert Muthalaly (S'14)</span> for slogging through the handrolled java wrapper implementation. might have been a breeze for such a smart programmer, but i'll say for myself: whenever i have to dive deep enough to touch the java messiness, i find it requires an immense amount of patience and fortitude. so: kudos!</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 41477003,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "guest.austin@gmail.com",
            "sender_full_name": "Austin Guest (they) (SP2'19)",
            "sender_id": 6930,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "http",
            "submessages": [],
            "timestamp": 1435067864,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/6cfe3624e3978459cbade1099bada52720bb72e2?x=x&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"kmhigley@gmail.com\">@Karl Higley (SP2'15)</span>  in case you are still interested, though I solved it the hard way, there is this mllib library that does what I was looking for:</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 41482840,
            "is_me_message": false,
            "last_edit_timestamp": 1435076171,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "erisa85d@gmail.com",
            "sender_full_name": "Erisa Dervishi (SP2'15)",
            "sender_id": 7870,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "Spark",
            "submessages": [],
            "timestamp": 1435076150,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/6cfe3624e3978459cbade1099bada52720bb72e2?x=x&version=1",
            "client": "website",
            "content": "<p><a href=\"https://github.com/apache/spark/blob/master/mllib/src/main/scala/org/apache/spark/mllib/rdd/MLPairRDDFunctions.scala#L41\" target=\"_blank\" title=\"https://github.com/apache/spark/blob/master/mllib/src/main/scala/org/apache/spark/mllib/rdd/MLPairRDDFunctions.scala#L41\">https://github.com/apache/spark/blob/master/mllib/src/main/scala/org/apache/spark/mllib/rdd/MLPairRDDFunctions.scala#L41</a></p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 41482843,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "erisa85d@gmail.com",
            "sender_full_name": "Erisa Dervishi (SP2'15)",
            "sender_id": 7870,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "Spark",
            "submessages": [],
            "timestamp": 1435076153,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/a897e9d6a0e8aff13a39e0515c38ee2d9482c809?x=x&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>not sure if it's relevant to this pursuit (and apologies if it's not), but thought folks interested in spark more generally might be interested in the <a href=\"http://bigdatauniversity.com/bdu-wp/bdu-course/spark-fundamentals/\" target=\"_blank\" title=\"http://bigdatauniversity.com/bdu-wp/bdu-course/spark-fundamentals/\">big data university course on spark</a> that IBM just put out as part of their newly-announced <a href=\"http://www.ibm.com/analytics/us/en/technology/spark/\" target=\"_blank\" title=\"http://www.ibm.com/analytics/us/en/technology/spark/\">initiative to invest in / promote the project</a>. as someone looking to learn the stack, it caught my eye. does anyone else have any resources they particularly like for feeling their way into the stack?</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 41483311,
            "is_me_message": false,
            "last_edit_timestamp": 1435076701,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "guest.austin@gmail.com",
            "sender_full_name": "Austin Guest (they) (SP2'19)",
            "sender_id": 6930,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "Spark",
            "submessages": [],
            "timestamp": 1435076680,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/6cfe3624e3978459cbade1099bada52720bb72e2?x=x&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"guest.austin@gmail.com\">@Austin Guest (W1'14)</span>  Thnx for the suggestion</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 41483806,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "erisa85d@gmail.com",
            "sender_full_name": "Erisa Dervishi (SP2'15)",
            "sender_id": 7870,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "Spark",
            "submessages": [],
            "timestamp": 1435077348,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/781a4ea07b4032f6a2e57c06b760ef3a?d=identicon&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>I wondered how that turned out.  Thanks for the tip!</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 41484101,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "kmhigley@gmail.com",
            "sender_full_name": "Karl Higley (SP2'15)",
            "sender_id": 7868,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "Spark",
            "submessages": [],
            "timestamp": 1435077732,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/781a4ea07b4032f6a2e57c06b760ef3a?d=identicon&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>I didn't even know that MLlib added anything for pairwise RDDs.</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 41484114,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "kmhigley@gmail.com",
            "sender_full_name": "Karl Higley (SP2'15)",
            "sender_id": 7868,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "Spark",
            "submessages": [],
            "timestamp": 1435077754,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/3ad220596b601687b8785b5fbfa8ecbe?d=identicon&version=1",
            "client": "ZulipiOS",
            "content": "<p>ahh, THAT'S where the akka-http docs are!</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 41541736,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "bgmuthalaly@gmail.com",
            "sender_full_name": "Bert Muthalaly (S1'14)",
            "sender_id": 5871,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "http",
            "submessages": [],
            "timestamp": 1435176305,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/3ad220596b601687b8785b5fbfa8ecbe?d=identicon&version=1",
            "client": "ZulipiOS",
            "content": "<p>(and thanks for the kind words @austin guest :,) it wasn't so bad!)</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 41541769,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "bgmuthalaly@gmail.com",
            "sender_full_name": "Bert Muthalaly (S1'14)",
            "sender_id": 5871,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "http",
            "submessages": [],
            "timestamp": 1435176346,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/247a8c69d63cb8cea4b6a724be75816683bad39b?x=x&version=1",
            "client": "website",
            "content": "<p>Hey everyone, I'm learning the akka-streams library using the typesafe activator tutorial (gist here: <a href=\"https://gist.github.com/ggilmore/f5cc9201789e432cf9e9\" target=\"_blank\" title=\"https://gist.github.com/ggilmore/f5cc9201789e432cf9e9\">https://gist.github.com/ggilmore/f5cc9201789e432cf9e9</a>). I wanted to mess around with getting one of the flows in the path to emit messages in groups, as that is a use case that I'll have for my own project. So, I changed line 49 to </p>\n<div class=\"codehilite\"><pre><span class=\"n\">broadcast</span><span class=\"o\">.</span><span class=\"n\">groupedWithin</span><span class=\"o\">(</span><span class=\"mi\">5</span><span class=\"o\">,</span> <span class=\"mf\">7.</span><span class=\"n\">seconds</span><span class=\"o\">)</span> <span class=\"o\">~&gt;</span> <span class=\"n\">console</span>\n</pre></div>\n\n\n<p>so that the primes should print to the console in groups, but I got this compilation error: <a href=\"https://gist.github.com/ggilmore/3186741a6e7d6f715381\" target=\"_blank\" title=\"https://gist.github.com/ggilmore/3186741a6e7d6f715381\">https://gist.github.com/ggilmore/3186741a6e7d6f715381</a> and I don't really understand it/what I am doing incorrectly. Can anyone help me out? </p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 41876142,
            "is_me_message": false,
            "last_edit_timestamp": 1435860085,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "me@ggilmore.net",
            "sender_full_name": "Geoffrey Michael Henry Gilmore (he) (SP1'15)",
            "sender_id": 7639,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "Akka-Stream groupedWithin",
            "submessages": [],
            "timestamp": 1435859010,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/247a8c69d63cb8cea4b6a724be75816683bad39b?x=x&version=1",
            "client": "website",
            "content": "<p>I found this on /r/Scala, and I thought y'all may be interested: <a href=\"https://github.com/stephenmcd/curiodb\" target=\"_blank\" title=\"https://github.com/stephenmcd/curiodb\">https://github.com/stephenmcd/curiodb</a></p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 42197436,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "me@ggilmore.net",
            "sender_full_name": "Geoffrey Michael Henry Gilmore (he) (SP1'15)",
            "sender_id": 7639,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "Redis Clone with Akka + Scala",
            "submessages": [],
            "timestamp": 1436225738,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/a897e9d6a0e8aff13a39e0515c38ee2d9482c809?x=x&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>thanks <span class=\"user-mention\" data-user-email=\"ggilmore@mit.edu\">@Geoffrey Gilmore (SP1'15)</span> ! btw: looked at the reactive streams webinar yesterday. it was great!</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 42237543,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "guest.austin@gmail.com",
            "sender_full_name": "Austin Guest (they) (SP2'19)",
            "sender_id": 6930,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "Redis Clone with Akka + Scala",
            "submessages": [],
            "timestamp": 1436300576,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/d5d15ea33fc144ca1fcf8b702df2849a?d=identicon&version=1",
            "client": "website",
            "content": "<p>excuse my meganoob question but I legitimately can't figure this out by talking to anyone in my \"squad\" and am too embarrassed to ask anyone else</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 44253714,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "lyndsey@uchicago.edu",
            "sender_full_name": "Lyndsey Jane Moulds (she/they) (F'13)",
            "sender_id": 2861,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "scala scripting",
            "submessages": [],
            "timestamp": 1439480429,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/d5d15ea33fc144ca1fcf8b702df2849a?d=identicon&version=1",
            "client": "website",
            "content": "<p>I have only done a teeny bit of scala but I think it might be super-appropriate for a lil script I need to write at work to manipulate data and output a file</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 44253769,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "lyndsey@uchicago.edu",
            "sender_full_name": "Lyndsey Jane Moulds (she/they) (F'13)",
            "sender_id": 2861,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "scala scripting",
            "submessages": [],
            "timestamp": 1439480483,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/d5d15ea33fc144ca1fcf8b702df2849a?d=identicon&version=1",
            "client": "website",
            "content": "<p>I also need to reach out to a java lib ... basically, I'd use Clojure for this, but no one else at work knows it</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 44253802,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "lyndsey@uchicago.edu",
            "sender_full_name": "Lyndsey Jane Moulds (she/they) (F'13)",
            "sender_id": 2861,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "scala scripting",
            "submessages": [],
            "timestamp": 1439480517,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/d5d15ea33fc144ca1fcf8b702df2849a?d=identicon&version=1",
            "client": "website",
            "content": "<p>but everyone seems convinced that I'd need to like, dockerize both my node instance and my scala code and then make them talk to each other</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 44253901,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "lyndsey@uchicago.edu",
            "sender_full_name": "Lyndsey Jane Moulds (she/they) (F'13)",
            "sender_id": 2861,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "scala scripting",
            "submessages": [],
            "timestamp": 1439480573,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/d5d15ea33fc144ca1fcf8b702df2849a?d=identicon&version=1",
            "client": "website",
            "content": "<p>and I don't really understand why</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 44253906,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "lyndsey@uchicago.edu",
            "sender_full_name": "Lyndsey Jane Moulds (she/they) (F'13)",
            "sender_id": 2861,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "scala scripting",
            "submessages": [],
            "timestamp": 1439480577,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/d5d15ea33fc144ca1fcf8b702df2849a?d=identicon&version=1",
            "client": "website",
            "content": "<p>sorry, this is like, the most weird-ass stream of consciousness zulip polling</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 44253919,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "lyndsey@uchicago.edu",
            "sender_full_name": "Lyndsey Jane Moulds (she/they) (F'13)",
            "sender_id": 2861,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "scala scripting",
            "submessages": [],
            "timestamp": 1439480590,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/d5d15ea33fc144ca1fcf8b702df2849a?d=identicon&version=1",
            "client": "website",
            "content": "<p>basically, what can I use to fill in my knowledge between \"I have run static files using sbt\" and \"I can explain to people what we need to do to add a little scala to our stack and have it interact reliably with node\"?</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 44254020,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "lyndsey@uchicago.edu",
            "sender_full_name": "Lyndsey Jane Moulds (she/they) (F'13)",
            "sender_id": 2861,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "scala scripting",
            "submessages": [],
            "timestamp": 1439480648,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/d5d15ea33fc144ca1fcf8b702df2849a?d=identicon&version=1",
            "client": "website",
            "content": "<p>Given that I am seeing posts explaining how people are replacing their bash scripts with Scala, I don't understand why people are so hellbent on compartmentalizing it, or why the JVM would require that</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 44254055,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "lyndsey@uchicago.edu",
            "sender_full_name": "Lyndsey Jane Moulds (she/they) (F'13)",
            "sender_id": 2861,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "scala scripting",
            "submessages": [],
            "timestamp": 1439480686,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/3ad220596b601687b8785b5fbfa8ecbe?d=identicon&version=1",
            "client": "website",
            "content": "<p>the only reason I can think of that people might be averse to a scala script is JVM startup latency? (aside: the scala universe can be really confusing and I always feel like a meganoob when I'm working in it)</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 44254622,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "bgmuthalaly@gmail.com",
            "sender_full_name": "Bert Muthalaly (S1'14)",
            "sender_id": 5871,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "scala scripting",
            "submessages": [],
            "timestamp": 1439481110,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/3ad220596b601687b8785b5fbfa8ecbe?d=identicon&version=1",
            "client": "website",
            "content": "<p>hmm, maybe a more constructive thing to ask would be \"what are the constraints on this script?\"</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 44254714,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "bgmuthalaly@gmail.com",
            "sender_full_name": "Bert Muthalaly (S1'14)",
            "sender_id": 5871,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "scala scripting",
            "submessages": [],
            "timestamp": 1439481166,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/3ad220596b601687b8785b5fbfa8ecbe?d=identicon&version=1",
            "client": "website",
            "content": "<p>like if the thing is dockerized and you have a long-running scala process talking to a long-running node process, you don't pay the jvm/scala startup cost every time you need to invoke this job</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 44254764,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "bgmuthalaly@gmail.com",
            "sender_full_name": "Bert Muthalaly (S1'14)",
            "sender_id": 5871,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "scala scripting",
            "submessages": [],
            "timestamp": 1439481214,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/d5d15ea33fc144ca1fcf8b702df2849a?d=identicon&version=1",
            "client": "website",
            "content": "<p>Hmm, that's a good point. I've read about the overhead cost of starting up the JVM with regard to Clojure, but I think when people did benchmarking they mostly found that the JVM startup time was less than 100ms</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 44265919,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "lyndsey@uchicago.edu",
            "sender_full_name": "Lyndsey Jane Moulds (she/they) (F'13)",
            "sender_id": 2861,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "scala scripting",
            "submessages": [],
            "timestamp": 1439489267,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/d5d15ea33fc144ca1fcf8b702df2849a?d=identicon&version=1",
            "client": "website",
            "content": "<p>If I could get to a similar place with Scala, that'd be totally acceptable for my use case, I think</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 44265976,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "lyndsey@uchicago.edu",
            "sender_full_name": "Lyndsey Jane Moulds (she/they) (F'13)",
            "sender_id": 2861,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "scala scripting",
            "submessages": [],
            "timestamp": 1439489290,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/d5d15ea33fc144ca1fcf8b702df2849a?d=identicon&version=1",
            "client": "website",
            "content": "<p>At least for MVP</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 44265982,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "lyndsey@uchicago.edu",
            "sender_full_name": "Lyndsey Jane Moulds (she/they) (F'13)",
            "sender_id": 2861,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "scala scripting",
            "submessages": [],
            "timestamp": 1439489295,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/d5d15ea33fc144ca1fcf8b702df2849a?d=identicon&version=1",
            "client": "website",
            "content": "<p>But yeah, I will also have dependencies. Maybe worth just mocking something up.</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 44266001,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "lyndsey@uchicago.edu",
            "sender_full_name": "Lyndsey Jane Moulds (she/they) (F'13)",
            "sender_id": 2861,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "scala scripting",
            "submessages": [],
            "timestamp": 1439489315,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p>Yeah, not sure why you'd have to compartmentalize it.</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 44267044,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "scala scripting",
            "submessages": [],
            "timestamp": 1439490086,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p>What's the node stuff doing?</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 44267141,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "scala scripting",
            "submessages": [],
            "timestamp": 1439490147,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/b9888e7d73b8ee4743f44b1bd8dac2108ba9d29c?x=x&version=1",
            "client": "website",
            "content": "<p>has anyone here used scallop for command line argument parsing in scala? and tried to pass variables set in bash as scala arguments? AND, if those variables have spaces, say, like in a long SQL query, had everything blow up because scallop thinks that's more than one argument instead of one string? if i manually type my sql query as an argument it works fine, but if i set it as an env variable and then have my program look for that variable as an argument, scallop complains it's more than one. i'm having trouble figuring out what scallop sees in a bash variable that it doesn't see in my manually typed in string.</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 47229616,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "pickering.amanda@gmail.com",
            "sender_full_name": "Amanda Pickering (W1'14)",
            "sender_id": 6915,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "scallop",
            "submessages": [],
            "timestamp": 1442585508,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/3ad220596b601687b8785b5fbfa8ecbe?d=identicon&version=1",
            "client": "website",
            "content": "<p>there's a bash string interpretation gotcha that I just dealt with - if you use double quotes when setting the env var I think bash splits your string by whitespace and stores the array. if you use single quotes it doesn't</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 47233169,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "bgmuthalaly@gmail.com",
            "sender_full_name": "Bert Muthalaly (S1'14)",
            "sender_id": 5871,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "scallop",
            "submessages": [],
            "timestamp": 1442591744,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/3ad220596b601687b8785b5fbfa8ecbe?d=identicon&version=1",
            "client": "website",
            "content": "<p>maybe when you're setting the environment variable, bash is doing that splitting?</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 47233195,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "bgmuthalaly@gmail.com",
            "sender_full_name": "Bert Muthalaly (S1'14)",
            "sender_id": 5871,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "scallop",
            "submessages": [],
            "timestamp": 1442591765,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/3ad220596b601687b8785b5fbfa8ecbe?d=identicon&version=1",
            "client": "website",
            "content": "<p>every time I'm reminded of this I'm like \ud83d\ude13 computers</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 47233219,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "bgmuthalaly@gmail.com",
            "sender_full_name": "Bert Muthalaly (S1'14)",
            "sender_id": 5871,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "scallop",
            "submessages": [],
            "timestamp": 1442591795,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/b9888e7d73b8ee4743f44b1bd8dac2108ba9d29c?x=x&version=1",
            "client": "website",
            "content": "<p>hmm that didn't work, but putting double quotes around the bash variable name like \"$QUERY\" did</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 47365389,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "pickering.amanda@gmail.com",
            "sender_full_name": "Amanda Pickering (W1'14)",
            "sender_id": 6915,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "scallop",
            "submessages": [],
            "timestamp": 1442871873,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/b9888e7d73b8ee4743f44b1bd8dac2108ba9d29c?x=x&version=1",
            "client": "website",
            "content": "<p>thank youuuu!</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 47365392,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "pickering.amanda@gmail.com",
            "sender_full_name": "Amanda Pickering (W1'14)",
            "sender_id": 6915,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "scallop",
            "submessages": [],
            "timestamp": 1442871875,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/b9888e7d73b8ee4743f44b1bd8dac2108ba9d29c?x=x&version=1",
            "client": "website",
            "content": "<p><img alt=\":sweat:\" class=\"emoji\" src=\"static/third/gemoji/images/emoji/sweat.png\" title=\":sweat:\"> computers indeed</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 47365400,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "pickering.amanda@gmail.com",
            "sender_full_name": "Amanda Pickering (W1'14)",
            "sender_id": 6915,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "scallop",
            "submessages": [],
            "timestamp": 1442871887,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/a897e9d6a0e8aff13a39e0515c38ee2d9482c809?x=x&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>Hi all. Cakesolutions had a <a href=\"http://www.cakesolutions.net/teamblogs/demystifying-implicits-and-typeclasses-in-scala\" target=\"_blank\" title=\"http://www.cakesolutions.net/teamblogs/demystifying-implicits-and-typeclasses-in-scala\">great blog post </a> yesterday about using typeclass-driven syntactic sugar to provide the implicit evidence parameter for a function with a minimum of boilerplate. <br>\n|<br>\nThe post proceeds in a step-by-step fashion, with each step explaining implicits and typeclasses a bit more and stripping away a bit more boilerplate until it finally arrives at the following:<br>\n|</p>\n<div class=\"codehilite\"><pre><span class=\"k\">trait</span> <span class=\"nc\">CanFoo</span><span class=\"o\">[</span><span class=\"kt\">A</span><span class=\"o\">]</span> <span class=\"o\">{</span>\n  <span class=\"k\">def</span> <span class=\"n\">foos</span><span class=\"o\">(</span><span class=\"n\">x</span><span class=\"k\">:</span> <span class=\"kt\">A</span><span class=\"o\">)</span><span class=\"k\">:</span> <span class=\"kt\">String</span>\n<span class=\"o\">}</span>\n\n<span class=\"k\">object</span> <span class=\"nc\">CanFoo</span> <span class=\"o\">{</span>\n  <span class=\"k\">def</span> <span class=\"n\">apply</span><span class=\"o\">[</span><span class=\"kt\">A:CanFoo</span><span class=\"o\">]</span><span class=\"k\">:</span> <span class=\"kt\">CanFoo</span><span class=\"o\">[</span><span class=\"kt\">A</span><span class=\"o\">]</span> <span class=\"k\">=</span> <span class=\"n\">implicitly</span>\n<span class=\"o\">}</span>\n\n<span class=\"k\">case</span> <span class=\"k\">class</span> <span class=\"nc\">Wrapper</span><span class=\"o\">(</span><span class=\"n\">wrapped</span><span class=\"k\">:</span> <span class=\"kt\">String</span><span class=\"o\">)</span>\n\n<span class=\"k\">implicit</span> <span class=\"k\">object</span> <span class=\"nc\">WrapperCanFoo</span> <span class=\"k\">extends</span> <span class=\"nc\">CanFoo</span><span class=\"o\">[</span><span class=\"kt\">Wrapper</span><span class=\"o\">]</span> <span class=\"o\">{</span>\n  <span class=\"k\">def</span> <span class=\"n\">foos</span><span class=\"o\">(</span><span class=\"n\">x</span><span class=\"k\">:</span> <span class=\"kt\">Wrapper</span><span class=\"o\">)</span> <span class=\"k\">=</span> <span class=\"n\">x</span><span class=\"o\">.</span><span class=\"n\">wrapped</span>\n<span class=\"o\">}</span>\n\n<span class=\"k\">def</span> <span class=\"n\">foo</span><span class=\"o\">[</span><span class=\"kt\">A:CanFoo</span><span class=\"o\">](</span><span class=\"n\">thing</span><span class=\"k\">:</span> <span class=\"kt\">A</span><span class=\"o\">)</span> <span class=\"k\">=</span> <span class=\"nc\">CanFoo</span><span class=\"o\">[</span><span class=\"kt\">A</span><span class=\"o\">].</span><span class=\"n\">foos</span><span class=\"o\">(</span><span class=\"n\">thing</span><span class=\"o\">)</span>\n\n<span class=\"n\">foo</span><span class=\"o\">(</span><span class=\"nc\">Wrapper</span><span class=\"o\">(</span><span class=\"s\">&quot;hi&quot;</span><span class=\"o\">))</span>\n<span class=\"c1\">// &quot;hi&quot;</span>\n</pre></div>\n\n\n<p>|<br>\nWhich it glosses with: \"Here, <code>foo</code> calls <code>CanFoo.apply</code> to retrieve the evidence argument. Note how since the implicit parameter is in scope inside <code>foo</code>, it gets implicitly passed to <code>CanFoo.apply.</code>\"<br>\n|<br>\nWhich is awesome! But I wanna know: HOW? <br>\n|<br>\nHow exactly is it that the declaration of the type parameter <code>foo[A:CanFoo]</code>magically produces <code>CanFoo[A]</code> in scope of <code>foo</code>? And, more to the point: how/where is <code>CanFoo.apply</code> called in the first place? I see a method on <code>CanFoo[A]</code> being called (namely <code>foos</code>), I see <code>A:CanFoo</code> passed as a type parameter, and I know I have an implicit conversion from <code>A:CanFoo</code> to <code>CanFoo[A]</code> in my back pocket whenever I call <code>apply</code> on <code>CanFoo</code>. But I can't for the life of me figure out where the call to <code>apply</code> actually happens!<br>\n|<br>\nPerhaps there's something missing from my mental model of how something as basic as <code>apply</code> works? Can someone who groks this point the way?</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 47838115,
            "is_me_message": false,
            "last_edit_timestamp": 1443793885,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "guest.austin@gmail.com",
            "sender_full_name": "Austin Guest (they) (SP2'19)",
            "sender_id": 6930,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "implicit/typeclass sugar FTW! (?)",
            "submessages": [],
            "timestamp": 1443793610,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/1c860d00a4cedc01147fbb2e0533c37b?d=identicon&version=1",
            "client": "desktop app Mac 0.5.1",
            "content": "<p><span class=\"user-mention\" data-user-email=\"guest.austin@gmail.com\">@Austin Guest (W1'14)</span> Hey I was just getting puzzeled about this a month ago and this article really cleared it up for me. I know this is a super old post but I guess I am lucky that scala is not very poplular at RC since we were there.</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 52640402,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "corydominguez@gmail.com",
            "sender_full_name": "Cory Michael Dominguez (he) (SP1'15)",
            "sender_id": 7625,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "implicit/typeclass sugar FTW! (?)",
            "submessages": [],
            "timestamp": 1453844053,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/781a4ea07b4032f6a2e57c06b760ef3a?d=identicon&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>Suppose I have a sealed trait from a library that would be really handy to extend. Since I can't do that, what should I be doing instead?</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 53222680,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "kmhigley@gmail.com",
            "sender_full_name": "Karl Higley (SP2'15)",
            "sender_id": 7868,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "When you want to extend a sealed trait...",
            "submessages": [],
            "timestamp": 1455045503,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/781a4ea07b4032f6a2e57c06b760ef3a?d=identicon&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>Spark has a sealed Vector trait extended by DenseVector and SparseVector. I'm working with a large set of vectors, and in order to reduce the storage requirement, I want something like SparseBinaryVector (which would only store the indices of non-zero values). I could define a wrapper class that uses Spark's dense and sparse vectors under the hood along with my own sparse binary vectors.</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 53222681,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "kmhigley@gmail.com",
            "sender_full_name": "Karl Higley (SP2'15)",
            "sender_id": 7868,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "When you want to extend a sealed trait...",
            "submessages": [],
            "timestamp": 1455045510,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/781a4ea07b4032f6a2e57c06b760ef3a?d=identicon&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>Is there a better way?</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 53222686,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "kmhigley@gmail.com",
            "sender_full_name": "Karl Higley (SP2'15)",
            "sender_id": 7868,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "When you want to extend a sealed trait...",
            "submessages": [],
            "timestamp": 1455045512,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/781a4ea07b4032f6a2e57c06b760ef3a?d=identicon&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>I suppose I could create a SparseBinaryVector class and define an implicit conversion from SparseVector to SparseBinaryVector...</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 53222784,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "kmhigley@gmail.com",
            "sender_full_name": "Karl Higley (SP2'15)",
            "sender_id": 7868,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "When you want to extend a sealed trait...",
            "submessages": [],
            "timestamp": 1455045688,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/1c860d00a4cedc01147fbb2e0533c37b?d=identicon&version=1",
            "client": "desktop app Mac 0.5.1",
            "content": "<p>My first try would be to extend something a little further down the inheritance tree. Theoretically that trait is sealed for a reason.</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 53222833,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "corydominguez@gmail.com",
            "sender_full_name": "Cory Michael Dominguez (he) (SP1'15)",
            "sender_id": 7625,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "When you want to extend a sealed trait...",
            "submessages": [],
            "timestamp": 1455045741,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/781a4ea07b4032f6a2e57c06b760ef3a?d=identicon&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>Indeed it is. Sadly, the Spark JIRA indicates that they have no plans to add sparse binary vector support -- the ticket for it is \"won't fix\".</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 53222914,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "kmhigley@gmail.com",
            "sender_full_name": "Karl Higley (SP2'15)",
            "sender_id": 7868,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "When you want to extend a sealed trait...",
            "submessages": [],
            "timestamp": 1455045906,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/1c860d00a4cedc01147fbb2e0533c37b?d=identicon&version=1",
            "client": "desktop app Mac 0.5.1",
            "content": "<p>implicit conversion sounds like a good idea, so long as your workflow gets all the benifit from construction and you don't think you will ever need to convert back.</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 53222923,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "corydominguez@gmail.com",
            "sender_full_name": "Cory Michael Dominguez (he) (SP1'15)",
            "sender_id": 7625,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "When you want to extend a sealed trait...",
            "submessages": [],
            "timestamp": 1455045932,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/781a4ea07b4032f6a2e57c06b760ef3a?d=identicon&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>I won't need to convert back. What do you mean about construction?</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 53222968,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "kmhigley@gmail.com",
            "sender_full_name": "Karl Higley (SP2'15)",
            "sender_id": 7868,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "When you want to extend a sealed trait...",
            "submessages": [],
            "timestamp": 1455045999,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/781a4ea07b4032f6a2e57c06b760ef3a?d=identicon&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>(Sadly, none of the classes farther down the inheritance hierarchy fit the bill.)</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 53223048,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "kmhigley@gmail.com",
            "sender_full_name": "Karl Higley (SP2'15)",
            "sender_id": 7868,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "When you want to extend a sealed trait...",
            "submessages": [],
            "timestamp": 1455046132,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/1c860d00a4cedc01147fbb2e0533c37b?d=identicon&version=1",
            "client": "desktop app Mac 0.5.1",
            "content": "<p>I just read your message a little more thoroughly. You need it for storage but it needs to be compatible with SparseVector so a conversion will happend whenever Spark wants to interact with your objects . I don't know what the cost of that is.</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 53223147,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "corydominguez@gmail.com",
            "sender_full_name": "Cory Michael Dominguez (he) (SP1'15)",
            "sender_id": 7625,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "When you want to extend a sealed trait...",
            "submessages": [],
            "timestamp": 1455046263,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/1c860d00a4cedc01147fbb2e0533c37b?d=identicon&version=1",
            "client": "desktop app Mac 0.5.1",
            "content": "<p>it may not be that high</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 53223214,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "corydominguez@gmail.com",
            "sender_full_name": "Cory Michael Dominguez (he) (SP1'15)",
            "sender_id": 7625,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "When you want to extend a sealed trait...",
            "submessages": [],
            "timestamp": 1455046336,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/781a4ea07b4032f6a2e57c06b760ef3a?d=identicon&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>It seems like the cost will be acceptable, because the conversion is basically just throwing away half of the data.</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 53223234,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "kmhigley@gmail.com",
            "sender_full_name": "Karl Higley (SP2'15)",
            "sender_id": 7868,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "When you want to extend a sealed trait...",
            "submessages": [],
            "timestamp": 1455046371,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/781a4ea07b4032f6a2e57c06b760ef3a?d=identicon&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>(No reason to store values for binary vectors.)</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 53223244,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "kmhigley@gmail.com",
            "sender_full_name": "Karl Higley (SP2'15)",
            "sender_id": 7868,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "When you want to extend a sealed trait...",
            "submessages": [],
            "timestamp": 1455046391,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/1c860d00a4cedc01147fbb2e0533c37b?d=identicon&version=1",
            "client": "desktop app Mac 0.5.1",
            "content": "<p>sounds worth a try</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 53223259,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "corydominguez@gmail.com",
            "sender_full_name": "Cory Michael Dominguez (he) (SP1'15)",
            "sender_id": 7625,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "When you want to extend a sealed trait...",
            "submessages": [],
            "timestamp": 1455046415,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/781a4ea07b4032f6a2e57c06b760ef3a?d=identicon&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>And since I'm writing a library, there's a benefit to keeping the API consistent with the types Spark provides.</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 53223262,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "kmhigley@gmail.com",
            "sender_full_name": "Karl Higley (SP2'15)",
            "sender_id": 7868,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "When you want to extend a sealed trait...",
            "submessages": [],
            "timestamp": 1455046418,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/781a4ea07b4032f6a2e57c06b760ef3a?d=identicon&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>Yeah, I'll go that route. Thanks!</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 53223269,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "kmhigley@gmail.com",
            "sender_full_name": "Karl Higley (SP2'15)",
            "sender_id": 7868,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "When you want to extend a sealed trait...",
            "submessages": [],
            "timestamp": 1455046424,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/1c860d00a4cedc01147fbb2e0533c37b?d=identicon&version=1",
            "client": "desktop app Mac 0.5.1",
            "content": "<p>agreed</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 53223271,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "corydominguez@gmail.com",
            "sender_full_name": "Cory Michael Dominguez (he) (SP1'15)",
            "sender_id": 7625,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "When you want to extend a sealed trait...",
            "submessages": [],
            "timestamp": 1455046426,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/781a4ea07b4032f6a2e57c06b760ef3a?d=identicon&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>If I do actually need to treat the three kinds of vectors interchangeably, then is my best bet to extend each of the existing vector types and mixin a trait, define my own vector type and mixin the same trait, then depend on the trait?</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 53223706,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "kmhigley@gmail.com",
            "sender_full_name": "Karl Higley (SP2'15)",
            "sender_id": 7868,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "When you want to extend a sealed trait...",
            "submessages": [],
            "timestamp": 1455046985,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/781a4ea07b4032f6a2e57c06b760ef3a?d=identicon&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>I can't think of another way to do it, but I feel like I'm probably missing something.</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 53223712,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "kmhigley@gmail.com",
            "sender_full_name": "Karl Higley (SP2'15)",
            "sender_id": 7868,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "When you want to extend a sealed trait...",
            "submessages": [],
            "timestamp": 1455046999,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/1c860d00a4cedc01147fbb2e0533c37b?d=identicon&version=1",
            "client": "desktop app Mac 0.5.1",
            "content": "<p>Yeah maybe ask this in the programming stream, I don't think very many people follow the scala stream.</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 53229877,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "corydominguez@gmail.com",
            "sender_full_name": "Cory Michael Dominguez (he) (SP1'15)",
            "sender_id": 7625,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "When you want to extend a sealed trait...",
            "submessages": [],
            "timestamp": 1455057507,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/781a4ea07b4032f6a2e57c06b760ef3a?d=identicon&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>I'm in the middle of reading this and am finding it very helpful: <a href=\"https://lihaoyi.github.io/post/StrategicScalaStylePrincipleofLeastPower.html\" target=\"_blank\" title=\"https://lihaoyi.github.io/post/StrategicScalaStylePrincipleofLeastPower.html\">https://lihaoyi.github.io/post/StrategicScalaStylePrincipleofLeastPower.html</a></p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 53548587,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "kmhigley@gmail.com",
            "sender_full_name": "Karl Higley (SP2'15)",
            "sender_id": 7868,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "Style and the Principle of Least Power",
            "submessages": [],
            "timestamp": 1455829573,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/1c860d00a4cedc01147fbb2e0533c37b?d=identicon&version=1",
            "client": "desktop app Mac 0.5.1",
            "content": "<p>Cool thanks</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 53548595,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "corydominguez@gmail.com",
            "sender_full_name": "Cory Michael Dominguez (he) (SP1'15)",
            "sender_id": 7625,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "Style and the Principle of Least Power",
            "submessages": [],
            "timestamp": 1455829592,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p>Ooh, great find.</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 53548766,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "Style and the Principle of Least Power",
            "submessages": [],
            "timestamp": 1455829922,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/781a4ea07b4032f6a2e57c06b760ef3a?d=identicon&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>Found it here: <a href=\"https://twitter.com/odersky/status/698931574306447361\" target=\"_blank\" title=\"https://twitter.com/odersky/status/698931574306447361\">https://twitter.com/odersky/status/698931574306447361</a></p>\n<div class=\"inline-preview-twitter\"><div class=\"twitter-tweet\"><a href=\"https://twitter.com/odersky/status/698931574306447361\" target=\"_blank\"><img class=\"twitter-avatar\" src=\"https://pbs.twimg.com/profile_images/673909115/Martin_normal.JPG\"></a><p>Strategic Scala Style: Principle of Least Power by <a href=\"https://twitter.com/li_haoyi\" target=\"_blank\" title=\"https://twitter.com/li_haoyi\">@li_haoyi</a>. I recommend that every Scala programmer reads this. <a href=\"https://t.co/geEKkqMrVc\" target=\"_blank\" title=\"https://t.co/geEKkqMrVc\">http://lihaoyi.github.io/post/StrategicScalaStylePrincipleofLeastPower.html</a></p><span>- Martin Odersky (@odersky)</span></div></div>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 53548831,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "kmhigley@gmail.com",
            "sender_full_name": "Karl Higley (SP2'15)",
            "sender_id": 7868,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "Style and the Principle of Least Power",
            "submessages": [],
            "timestamp": 1455829996,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/781a4ea07b4032f6a2e57c06b760ef3a?d=identicon&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p><img alt=\":smile:\" class=\"emoji\" src=\"static/third/gemoji/images/emoji/smile.png\" title=\":smile:\"> </p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 53548837,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "kmhigley@gmail.com",
            "sender_full_name": "Karl Higley (SP2'15)",
            "sender_id": 7868,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "Style and the Principle of Least Power",
            "submessages": [],
            "timestamp": 1455830012,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/1c860d00a4cedc01147fbb2e0533c37b?d=identicon&version=1",
            "client": "desktop app Mac 0.5.1",
            "content": "<p>Strong rec</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 53548840,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "corydominguez@gmail.com",
            "sender_full_name": "Cory Michael Dominguez (he) (SP1'15)",
            "sender_id": 7625,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "Style and the Principle of Least Power",
            "submessages": [],
            "timestamp": 1455830027,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/781a4ea07b4032f6a2e57c06b760ef3a?d=identicon&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>Part two, on naming and operators: <a href=\"https://lihaoyi.github.io/post/StrategicScalaStyleConcisenessNames.html\" target=\"_blank\" title=\"https://lihaoyi.github.io/post/StrategicScalaStyleConcisenessNames.html\">https://lihaoyi.github.io/post/StrategicScalaStyleConcisenessNames.html</a></p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 53728504,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "kmhigley@gmail.com",
            "sender_full_name": "Karl Higley (SP2'15)",
            "sender_id": 7868,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "Style and the Principle of Least Power",
            "submessages": [],
            "timestamp": 1456246990,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p>Ah, cool :) Coming up with good names is probably my favorite part of programming.</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 53729670,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "Style and the Principle of Least Power",
            "submessages": [],
            "timestamp": 1456248832,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/d495685876a5a195b6ef5fb9a269b6d0dcd5c5fe?x=x&version=1",
            "client": "website",
            "content": "<p>These pieces are incredibly sane.  I am particularly delighted to see no mention of disjunction thingies for error handling.</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 53747540,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "pnf@podsnap.com",
            "sender_full_name": "Peter Fraenkel (he) (S'13)",
            "sender_id": 2142,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "Style and the Principle of Least Power",
            "submessages": [],
            "timestamp": 1456283100,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/d495685876a5a195b6ef5fb9a269b6d0dcd5c5fe?x=x&version=1",
            "client": "website",
            "content": "<p>I suddenly realize that the person I know who most highly extols these posts also manages to use the word \"catamorphism\" in every email he sends.  Go figure.</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 53747672,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "pnf@podsnap.com",
            "sender_full_name": "Peter Fraenkel (he) (S'13)",
            "sender_id": 2142,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "Style and the Principle of Least Power",
            "submessages": [],
            "timestamp": 1456283406,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/50a2b4e9d35c4ca468a478457fd8cc0fad6f2e45?x=x&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>Anyone who's taken Functional Programming Principles in Scala on Coursera care to share their solution to combinations from week6 (Anagrams.scala)?</p>\n<p><a href=\"https://class.coursera.org/progfun-005/assignment/view?assignment_id=17\" target=\"_blank\" title=\"https://class.coursera.org/progfun-005/assignment/view?assignment_id=17\">https://class.coursera.org/progfun-005/assignment/view?assignment_id=17</a></p>\n<div class=\"codehilite\"><pre> <span class=\"cm\">/** Returns the list of all subsets of the occurrence list.</span>\n<span class=\"cm\">   *  This includes the occurrence itself, i.e. `List((&#39;k&#39;, 1), (&#39;o&#39;, 1))`</span>\n<span class=\"cm\">   *  is a subset of `List((&#39;k&#39;, 1), (&#39;o&#39;, 1))`.</span>\n<span class=\"cm\">   *  It also include the empty subset `List()`.</span>\n<span class=\"cm\">   *</span>\n<span class=\"cm\">   *  Example: the subsets of the occurrence list `List((&#39;a&#39;, 2), (&#39;b&#39;, 2))` are:</span>\n<span class=\"cm\">   *</span>\n<span class=\"cm\">   *    List(</span>\n<span class=\"cm\">   *      List(),</span>\n<span class=\"cm\">   *      List((&#39;a&#39;, 1)),</span>\n<span class=\"cm\">   *      List((&#39;a&#39;, 2)),</span>\n<span class=\"cm\">   *      List((&#39;b&#39;, 1)),</span>\n<span class=\"cm\">   *      List((&#39;a&#39;, 1), (&#39;b&#39;, 1)),</span>\n<span class=\"cm\">   *      List((&#39;a&#39;, 2), (&#39;b&#39;, 1)),</span>\n<span class=\"cm\">   *      List((&#39;b&#39;, 2)),</span>\n<span class=\"cm\">   *      List((&#39;a&#39;, 1), (&#39;b&#39;, 2)),</span>\n<span class=\"cm\">   *      List((&#39;a&#39;, 2), (&#39;b&#39;, 2))</span>\n<span class=\"cm\">   *    )</span>\n<span class=\"cm\">   *</span>\n<span class=\"cm\">   *  Note that the order of the occurrence list subsets does not matter -- the subsets</span>\n<span class=\"cm\">   *  in the example above could have been displayed in some other order.</span>\n<span class=\"cm\">   */</span>\n\n  <span class=\"k\">type</span> <span class=\"kt\">Occurrences</span> <span class=\"o\">=</span> <span class=\"nc\">List</span><span class=\"o\">[(</span><span class=\"kt\">Char</span>, <span class=\"kt\">Int</span><span class=\"o\">)]</span>\n\n  <span class=\"k\">def</span> <span class=\"n\">combinations</span><span class=\"o\">(</span><span class=\"n\">occurrences</span><span class=\"k\">:</span> <span class=\"kt\">Occurrences</span><span class=\"o\">)</span><span class=\"k\">:</span> <span class=\"kt\">List</span><span class=\"o\">[</span><span class=\"kt\">Occurrences</span><span class=\"o\">]</span> <span class=\"k\">=</span> <span class=\"o\">???</span>\n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 53784592,
            "is_me_message": false,
            "last_edit_timestamp": 1456358037,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "ryanvergeront@gmail.com",
            "sender_full_name": "Ryan Vergeront (he) (F'13)",
            "sender_id": 2874,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "Idiomatic Combinations",
            "submessages": [],
            "timestamp": 1456357608,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/50a2b4e9d35c4ca468a478457fd8cc0fad6f2e45?x=x&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>This is what I came up with after looking at some other implementations online, but curious if anyone has an alternative solution they like:</p>\n<div class=\"codehilite\"><pre> <span class=\"k\">def</span> <span class=\"n\">combinations</span><span class=\"o\">(</span><span class=\"n\">occurrences</span><span class=\"k\">:</span> <span class=\"kt\">Occurrences</span><span class=\"o\">)</span><span class=\"k\">:</span> <span class=\"kt\">List</span><span class=\"o\">[</span><span class=\"kt\">Occurrences</span><span class=\"o\">]</span> <span class=\"k\">=</span> <span class=\"o\">{</span>\n    <span class=\"n\">occurrences</span><span class=\"o\">.</span><span class=\"n\">foldRight</span><span class=\"o\">(</span> <span class=\"nc\">List</span><span class=\"o\">[</span><span class=\"kt\">Occurrences</span><span class=\"o\">](</span><span class=\"nc\">List</span><span class=\"o\">())</span> <span class=\"o\">)</span> <span class=\"o\">{</span>\n      <span class=\"k\">case</span> <span class=\"o\">((</span><span class=\"n\">char</span><span class=\"o\">,</span> <span class=\"n\">count</span><span class=\"o\">),</span> <span class=\"n\">acc</span><span class=\"o\">)</span> <span class=\"k\">=&gt;</span>\n        <span class=\"n\">acc</span> <span class=\"o\">++</span>\n          <span class=\"o\">(</span><span class=\"k\">for</span> <span class=\"o\">{</span>\n            <span class=\"n\">combination</span> <span class=\"k\">&lt;-</span> <span class=\"n\">acc</span>\n            <span class=\"n\">n</span> <span class=\"k\">&lt;-</span> <span class=\"mi\">1</span> <span class=\"n\">to</span> <span class=\"n\">count</span>\n          <span class=\"o\">}</span> <span class=\"k\">yield</span> <span class=\"o\">(</span><span class=\"n\">char</span><span class=\"o\">,</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">::</span> <span class=\"n\">combination</span><span class=\"o\">)</span>\n    <span class=\"o\">}</span>\n  <span class=\"o\">}</span>\n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 53784650,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "ryanvergeront@gmail.com",
            "sender_full_name": "Ryan Vergeront (he) (F'13)",
            "sender_id": 2874,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "Idiomatic Combinations",
            "submessages": [],
            "timestamp": 1456357722,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/50a2b4e9d35c4ca468a478457fd8cc0fad6f2e45?x=x&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>Particularly wondering  about readabliity: i.e. clearer to use foldRight or pattern matching, etc.</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 53784713,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "ryanvergeront@gmail.com",
            "sender_full_name": "Ryan Vergeront (he) (F'13)",
            "sender_id": 2874,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "Idiomatic Combinations",
            "submessages": [],
            "timestamp": 1456357869,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/50a2b4e9d35c4ca468a478457fd8cc0fad6f2e45?x=x&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>I just finished the first Coursera course. I'm thinking about either doing the Principles of Reactive Programming course or working through Functional Programming in Scala. Anyone have opinions on which would be more worthwile?</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 54404842,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "ryanvergeront@gmail.com",
            "sender_full_name": "Ryan Vergeront (he) (F'13)",
            "sender_id": 2874,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "Functional Programming in Scala vs Principles of Reactive P",
            "submessages": [],
            "timestamp": 1457745965,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p>They cover pretty different material. FP in Scala is quite a deep, opinionated book. It's got a lot of cool stuff in it. The Coursera course is less about FP than, yeah, reactive programming :)</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 54405526,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "Functional Programming in Scala vs Principles of Reactive P",
            "submessages": [],
            "timestamp": 1457747733,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p>This looks pretty cool: <a href=\"http://rbmhtechnology.github.io/eventuate/index.html\" target=\"_blank\" title=\"http://rbmhtechnology.github.io/eventuate/index.html\">http://rbmhtechnology.github.io/eventuate/index.html</a></p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 54759724,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "eventuate",
            "submessages": [],
            "timestamp": 1458580394,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p>Akka actors that automatically persist an immutable event log.</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 54759744,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "eventuate",
            "submessages": [],
            "timestamp": 1458580438,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p><a href=\"http://krasserm.github.io/2015/05/25/akka-persistence-eventuate-comparison/\" target=\"_blank\" title=\"http://krasserm.github.io/2015/05/25/akka-persistence-eventuate-comparison/\">http://krasserm.github.io/2015/05/25/akka-persistence-eventuate-comparison/</a></p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 54759800,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "eventuate",
            "submessages": [],
            "timestamp": 1458580498,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p>Nice related talk about Akka Streams: <a href=\"https://www.youtube.com/watch?v=6VBn9V3S2aQ\" target=\"_blank\" title=\"https://www.youtube.com/watch?v=6VBn9V3S2aQ\">https://www.youtube.com/watch?v=6VBn9V3S2aQ</a></p>\n<div class=\"message_inline_image\"><a href=\"https://www.youtube.com/watch?v=6VBn9V3S2aQ\" target=\"_blank\" title=\"https://www.youtube.com/watch?v=6VBn9V3S2aQ\"><img src=\"https://i.ytimg.com/vi/6VBn9V3S2aQ/default.jpg\"></a></div>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 54814155,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "eventuate",
            "submessages": [],
            "timestamp": 1458683856,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p>Ooh, the little netstat demo about backpressure is pretty neat :) <a href=\"https://youtu.be/6VBn9V3S2aQ?t=2849\" target=\"_blank\" title=\"https://youtu.be/6VBn9V3S2aQ?t=2849\">https://youtu.be/6VBn9V3S2aQ?t=2849</a></p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 54814561,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "eventuate",
            "submessages": [],
            "timestamp": 1458684502,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p>Blah, just sigh venting. I keep getting my hopes up about using Scala IDEs. Intellij seems pretty nice, and many things about the scala support do work pretty well. But I run into little bugs in their (apparently homegrown) Scala typechecking/error reporting at least a couple times a day; snippets that scalac compiles fine get red squiggles, and snippets that scalac rejects get a pass. I guess it's really not such a big deal, but gah, it's so annoying!</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 54907855,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "intellij :(",
            "submessages": [],
            "timestamp": 1458873932,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/781a4ea07b4032f6a2e57c06b760ef3a?d=identicon&version=1",
            "client": "Android",
            "content": "<p>I just can't do Scala IDEs. Sublime at least has syntax highlighting and never* lies to me about what scalac will accept.</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 54909659,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "kmhigley@gmail.com",
            "sender_full_name": "Karl Higley (SP2'15)",
            "sender_id": 7868,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "intellij :(",
            "submessages": [],
            "timestamp": 1458877931,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/781a4ea07b4032f6a2e57c06b760ef3a?d=identicon&version=1",
            "client": "Android",
            "content": "<p>*(\"What, never?\" \"Well, hardly ever!\")</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 54909662,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "kmhigley@gmail.com",
            "sender_full_name": "Karl Higley (SP2'15)",
            "sender_id": 7868,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "intellij :(",
            "submessages": [],
            "timestamp": 1458877947,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p>Pretty fun reading to learn about functional data structures: <a href=\"https://github.com/stew/dogs\" target=\"_blank\" title=\"https://github.com/stew/dogs\">https://github.com/stew/dogs</a></p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 54925577,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "dogs",
            "submessages": [],
            "timestamp": 1458917045,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/a897e9d6a0e8aff13a39e0515c38ee2d9482c809?x=x&version=1",
            "client": "website",
            "content": "<p>Typelevel is coming out with so much cool stuff!</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 55512755,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "guest.austin@gmail.com",
            "sender_full_name": "Austin Guest (they) (SP2'19)",
            "sender_id": 6930,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "dogs",
            "submessages": [],
            "timestamp": 1459751332,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/a897e9d6a0e8aff13a39e0515c38ee2d9482c809?x=x&version=1",
            "client": "website",
            "content": "<p>Assume you've also looked at cats, etc...?</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 55512757,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "guest.austin@gmail.com",
            "sender_full_name": "Austin Guest (they) (SP2'19)",
            "sender_id": 6930,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "dogs",
            "submessages": [],
            "timestamp": 1459751356,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/a897e9d6a0e8aff13a39e0515c38ee2d9482c809?x=x&version=1",
            "client": "website",
            "content": "<p>Cf: the talk I (perhaps overoptimistically guaging scala-philia) shared in the programming stream: <a href=\"http://slides.com/kailuowang/deck-5#/\" target=\"_blank\" title=\"http://slides.com/kailuowang/deck-5#/\">http://slides.com/kailuowang/deck-5#/</a></p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 55512804,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "guest.austin@gmail.com",
            "sender_full_name": "Austin Guest (they) (SP2'19)",
            "sender_id": 6930,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "dogs",
            "submessages": [],
            "timestamp": 1459751460,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/a897e9d6a0e8aff13a39e0515c38ee2d9482c809?x=x&version=1",
            "client": "website",
            "content": "<p>^--- best talk i've seen since the one by dan abramov about why he made redux...</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 55512807,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "guest.austin@gmail.com",
            "sender_full_name": "Austin Guest (they) (SP2'19)",
            "sender_id": 6930,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "dogs",
            "submessages": [],
            "timestamp": 1459751475,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/a897e9d6a0e8aff13a39e0515c38ee2d9482c809?x=x&version=1",
            "client": "website",
            "content": "<p>Sadly, this is out of scope for the project I'm working on right now, but all these new libraries for doing React stuff in Scala have me salivating! See:</p>\n<ul>\n<li><a href=\"https://github.com/japgolly/scalajs-react\" target=\"_blank\" title=\"https://github.com/japgolly/scalajs-react\">scalajs-react</a></li>\n<li><a href=\"http://ochrons.github.io/diode/index.html\" target=\"_blank\" title=\"http://ochrons.github.io/diode/index.html\">diode</a> (basically redux in scala)</li>\n<li><a href=\"http://ochrons.github.io/scalajs-spa-tutorial/index.html\" target=\"_blank\" title=\"http://ochrons.github.io/scalajs-spa-tutorial/index.html\">this tutorial on making a single-page app with scalajs and diode</a></li>\n<li><a href=\"http://scala-bility.blogspot.com/2015/05/scalajs-and-react-building-application.html\" target=\"_blank\" title=\"http://scala-bility.blogspot.com/2015/05/scalajs-and-react-building-application.html\">this okay-enough blog post getting play on lobste.rs</a></li>\n</ul>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 55512991,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "guest.austin@gmail.com",
            "sender_full_name": "Austin Guest (they) (SP2'19)",
            "sender_id": 6930,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "React/Redux in Scala!",
            "submessages": [],
            "timestamp": 1459751923,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/a897e9d6a0e8aff13a39e0515c38ee2d9482c809?x=x&version=1",
            "client": "website",
            "content": "<p>Curious: has anyone poked around these libraries yet? Are they fun / worth the time investing in?</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 55512997,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "guest.austin@gmail.com",
            "sender_full_name": "Austin Guest (they) (SP2'19)",
            "sender_id": 6930,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "React/Redux in Scala!",
            "submessages": [],
            "timestamp": 1459751943,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/a897e9d6a0e8aff13a39e0515c38ee2d9482c809?x=x&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"alan@hackerschool.com\">@Alan O'Donnell</span> : catch your fancy for a Scala itch to scratch? ;)</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 55513000,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "guest.austin@gmail.com",
            "sender_full_name": "Austin Guest (they) (SP2'19)",
            "sender_id": 6930,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "React/Redux in Scala!",
            "submessages": [],
            "timestamp": 1459751958,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/a897e9d6a0e8aff13a39e0515c38ee2d9482c809?x=x&version=1",
            "client": "website",
            "content": "<p>And a question: does type-safety, etc... justify using this set of libraries for targeting javascript from a JVM-based language instead of the (by all accounts amazing) om?</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 55513179,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "guest.austin@gmail.com",
            "sender_full_name": "Austin Guest (they) (SP2'19)",
            "sender_id": 6930,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "React/Redux in Scala!",
            "submessages": [],
            "timestamp": 1459752413,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/d495685876a5a195b6ef5fb9a269b6d0dcd5c5fe?x=x&version=1",
            "client": "website",
            "content": "<p>The weird thing about IntelliJ is that its presentation compiler is completely separate from the actual build compiler.  That gives them some significant performance advantages, which makes sense because their \"compiler\" doesn't actually have to compile anything, but sets up a challenge to maintain consistency with multiple versions of the real compiler, and they're almost guaranteed to get it wrong occasionally.  Frankly, it's amazing how often they get it right.<br>\nI've often wondered why they don't at least assimilate build output into the gutter icons and highlighting, which they can do without any icky parsing, as they already subclass the <code>Reporter</code>, but they seem religiously opposed to this idea.</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 55666328,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "pnf@podsnap.com",
            "sender_full_name": "Peter Fraenkel (he) (S'13)",
            "sender_id": 2142,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "intellij :(",
            "submessages": [],
            "timestamp": 1460043465,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p>Yeah, I just can't imagine what that engineering meeting was like... \"So... how about we just write our own Scala typechecker?\"</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 55666726,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "intellij :(",
            "submessages": [],
            "timestamp": 1460044154,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/d495685876a5a195b6ef5fb9a269b6d0dcd5c5fe?x=x&version=1",
            "client": "website",
            "content": "<p>At least one participant in that meeting had recently shouted expletives at Eclipse, after it froze during a particularly complicated implicit resolution.<br>\nOur recent switch at work from Eclipse to IntelliJ highlighted the tradeoffs.  We have added several custom phases to the compiler, simultaneously ensuring (a) that Eclipse would be even slower, and (b) that IntelliJ would highlight spuriously while failing to catch real errors in practically every source file.<br>\n Across hundreds of developers, the overwhelming preference was to give up accuracy for speed.</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 55667503,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "pnf@podsnap.com",
            "sender_full_name": "Peter Fraenkel (he) (S'13)",
            "sender_id": 2142,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "intellij :(",
            "submessages": [],
            "timestamp": 1460045366,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/7de60303f6bb47bc3e678e090f9de36d?d=identicon&version=1",
            "client": "website",
            "content": "<p>Any advice on a good scala microframework? All I need is to serve a bunch of HTML + a tiny rest api probably. I'm leaning towards <a href=\"http://scalatra.org/\" target=\"_blank\" title=\"http://scalatra.org/\">http://scalatra.org/</a> but have pretty much no experience with any of the scala web frameworks so any advice appreciated :-)</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 59806870,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "jeremiejost@gmail.com",
            "sender_full_name": "J\u00e9r\u00e9mie Jost (he) (m5'20)",
            "sender_id": 9326,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "web microframework",
            "submessages": [],
            "timestamp": 1465309170,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/7de60303f6bb47bc3e678e090f9de36d?d=identicon&version=1",
            "client": "website",
            "content": "<p>Oh and I'll probably need to serialise stuff to a database, probably mongodb </p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 59807032,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "jeremiejost@gmail.com",
            "sender_full_name": "J\u00e9r\u00e9mie Jost (he) (m5'20)",
            "sender_id": 9326,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "web microframework",
            "submessages": [],
            "timestamp": 1465309304,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/7de60303f6bb47bc3e678e090f9de36d?d=identicon&version=1",
            "client": "website",
            "content": "<p>Giving Play! a shot. We'll see if I regret this...</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 59809305,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "jeremiejost@gmail.com",
            "sender_full_name": "J\u00e9r\u00e9mie Jost (he) (m5'20)",
            "sender_id": 9326,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "web microframework",
            "submessages": [],
            "timestamp": 1465310973,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/7de60303f6bb47bc3e678e090f9de36d?d=identicon&version=1",
            "client": "website",
            "content": "<p>Update: I regret this</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 59815003,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "jeremiejost@gmail.com",
            "sender_full_name": "J\u00e9r\u00e9mie Jost (he) (m5'20)",
            "sender_id": 9326,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "web microframework",
            "submessages": [],
            "timestamp": 1465315268,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/15194d13b82532c261bf87ca074e2ab5?d=identicon&version=1",
            "client": "website",
            "content": "<p>I've used unfiltered and spray before, and both were pretty easy to get started with. Haven't done too much web stuff recently but I think that I liked spray more because spray-routing's dsl was more fun to work with</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 59815780,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "aliang2344@gmail.com",
            "sender_full_name": "Andy Liang (F2'15)",
            "sender_id": 8684,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "web microframework",
            "submessages": [],
            "timestamp": 1465315837,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p>Haha, what didn't you like about Play?</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 59817399,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "web microframework",
            "submessages": [],
            "timestamp": 1465317111,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/7de60303f6bb47bc3e678e090f9de36d?d=identicon&version=1",
            "client": "website",
            "content": "<p>Is spray good for serving HTML/js too? I thought it was more suited for building RESTful apis</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 59821596,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "jeremiejost@gmail.com",
            "sender_full_name": "J\u00e9r\u00e9mie Jost (he) (m5'20)",
            "sender_id": 9326,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "web microframework",
            "submessages": [],
            "timestamp": 1465320422,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/7de60303f6bb47bc3e678e090f9de36d?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"alan@hackerschool.com\">@Alan O'Donnell</span> It seemed too big of a behemoth for my needs. Just generating the barebones project skeleton landed me with so much stuff! I spend more time downloading dependencies than coding.</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 59821726,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "jeremiejost@gmail.com",
            "sender_full_name": "J\u00e9r\u00e9mie Jost (he) (m5'20)",
            "sender_id": 9326,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "web microframework",
            "submessages": [],
            "timestamp": 1465320520,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/7de60303f6bb47bc3e678e090f9de36d?d=identicon&version=1",
            "client": "website",
            "content": "<p>I'm currently giving Scalatra a shot.</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 59821830,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "jeremiejost@gmail.com",
            "sender_full_name": "J\u00e9r\u00e9mie Jost (he) (m5'20)",
            "sender_id": 9326,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "web microframework",
            "submessages": [],
            "timestamp": 1465320604,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/d5d15ea33fc144ca1fcf8b702df2849a?d=identicon&version=1",
            "client": "website",
            "content": "<p>I have what I think is a really simple problem that seems to not have a particularly simple answer. I'm making a Twitter bot in Scala during my fake 20% time (like, 2% time) at work, and I'm struggling with figuring out how to manage API credentials on my local (development) machine.</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 60975542,
            "is_me_message": false,
            "last_edit_timestamp": 1466682286,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "lyndsey@uchicago.edu",
            "sender_full_name": "Lyndsey Jane Moulds (she/they) (F'13)",
            "sender_id": 2861,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "environment variables",
            "submessages": [],
            "timestamp": 1466682247,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/d5d15ea33fc144ca1fcf8b702df2849a?d=identicon&version=1",
            "client": "website",
            "content": "<p>When I use sys.env, it seems to be able to find e.g. my PATH variable, but not any of the ones I've defined locally on my machine. I assume this is because whatever sbt is doing with the JVM, it's loading with some environment that's not quite literally the one I'm working with e.g. in my shell, which makes sense... but I don't know how I'd pass it the configuration it needs</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 60975605,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "lyndsey@uchicago.edu",
            "sender_full_name": "Lyndsey Jane Moulds (she/they) (F'13)",
            "sender_id": 2861,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "environment variables",
            "submessages": [],
            "timestamp": 1466682409,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/d5d15ea33fc144ca1fcf8b702df2849a?d=identicon&version=1",
            "client": "website",
            "content": "<p>In short, I just want to store my Twitter credentials in a file I can .gitignore and have that intelligently dump my access tokens in where they're needed</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 60975610,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "lyndsey@uchicago.edu",
            "sender_full_name": "Lyndsey Jane Moulds (she/they) (F'13)",
            "sender_id": 2861,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "environment variables",
            "submessages": [],
            "timestamp": 1466682480,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/d5d15ea33fc144ca1fcf8b702df2849a?d=identicon&version=1",
            "client": "website",
            "content": "<p>(for reference, I have about four hours of experience with Scala and sbt combined at this point)</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 60975650,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "lyndsey@uchicago.edu",
            "sender_full_name": "Lyndsey Jane Moulds (she/they) (F'13)",
            "sender_id": 2861,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "environment variables",
            "submessages": [],
            "timestamp": 1466682536,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/d5d15ea33fc144ca1fcf8b702df2849a?d=identicon&version=1",
            "client": "website",
            "content": "<p>(oh: I've also done exactly what's described here, and that didn't work. <a href=\"http://samwize.com/2012/10/09/configure-your-local-environment-for-scala-on-heroku/\" target=\"_blank\" title=\"http://samwize.com/2012/10/09/configure-your-local-environment-for-scala-on-heroku/\">http://samwize.com/2012/10/09/configure-your-local-environment-for-scala-on-heroku/</a>)</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 60975824,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "lyndsey@uchicago.edu",
            "sender_full_name": "Lyndsey Jane Moulds (she/they) (F'13)",
            "sender_id": 2861,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "environment variables",
            "submessages": [],
            "timestamp": 1466682904,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"lyndsey@uchicago.edu\">@Lyndsey Moulds (F'13)</span> how are you defining environment variables locally on your machine?</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 60976032,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "environment variables",
            "submessages": [],
            "timestamp": 1466683315,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p>For example, I can run:</p>\n<div class=\"codehilite\"><pre>$ FOO=99 sbt\n...\n&gt; console\n...\nscala&gt; System.getenv(&quot;FOO&quot;)\nres0: String = 99\n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 60976088,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "environment variables",
            "submessages": [],
            "timestamp": 1466683427,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p>Sbt doesn't know what <code>.env</code> files are, since those are just a Heroku/foreman convention.</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 60976136,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "environment variables",
            "submessages": [],
            "timestamp": 1466683463,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p>Although maybe this plugin would help? <a href=\"https://github.com/mefellows/sbt-dotenv\" target=\"_blank\" title=\"https://github.com/mefellows/sbt-dotenv\">https://github.com/mefellows/sbt-dotenv</a></p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 60976150,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "environment variables",
            "submessages": [],
            "timestamp": 1466683542,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p>Actually, I kind of like this approach better: <a href=\"http://stackoverflow.com/a/20909045/238624\" target=\"_blank\" title=\"http://stackoverflow.com/a/20909045/238624\">http://stackoverflow.com/a/20909045/238624</a></p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 60976304,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "environment variables",
            "submessages": [],
            "timestamp": 1466683825,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p>You have to remember to <code>export (cat .env | xargs) &amp;&amp; sbt</code>, but that feels like the \"shell\" way to do this.</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 60976316,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "environment variables",
            "submessages": [],
            "timestamp": 1466683892,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p>Actually, nevermind, I guess that will dump the env variables into your shell? I'm not very good with shell programming :/</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 60976403,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "environment variables",
            "submessages": [],
            "timestamp": 1466684100,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/d5d15ea33fc144ca1fcf8b702df2849a?d=identicon&version=1",
            "client": "website",
            "content": "<p>I tried that plugin, but I think I was doing something wrong, because it didn't seem to have any effect. </p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 60976408,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "lyndsey@uchicago.edu",
            "sender_full_name": "Lyndsey Jane Moulds (she/they) (F'13)",
            "sender_id": 2861,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "environment variables",
            "submessages": [],
            "timestamp": 1466684112,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/d5d15ea33fc144ca1fcf8b702df2849a?d=identicon&version=1",
            "client": "website",
            "content": "<p><code>export $(cat .env | xargs) &amp;&amp; sbt</code>does work -- I'm not that concerned about dumping the env variables into my shell, I guess? Maybe I should be :P I just don't want to commit them.</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 60976420,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "lyndsey@uchicago.edu",
            "sender_full_name": "Lyndsey Jane Moulds (she/they) (F'13)",
            "sender_id": 2861,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "environment variables",
            "submessages": [],
            "timestamp": 1466684150,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p>Slightly simpler version that works for me in ZSH: <code>(export $(cat .env) &amp;&amp; sbt)</code>.</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 60976464,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "environment variables",
            "submessages": [],
            "timestamp": 1466684226,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p>I think the outer parens means that it all runs in a subshell, so no env pollution.</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 60976466,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "environment variables",
            "submessages": [],
            "timestamp": 1466684248,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/d5d15ea33fc144ca1fcf8b702df2849a?d=identicon&version=1",
            "client": "website",
            "content": "<p>oohh, that is preferable</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 60976468,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "lyndsey@uchicago.edu",
            "sender_full_name": "Lyndsey Jane Moulds (she/they) (F'13)",
            "sender_id": 2861,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "environment variables",
            "submessages": [],
            "timestamp": 1466684257,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/d5d15ea33fc144ca1fcf8b702df2849a?d=identicon&version=1",
            "client": "website",
            "content": "<p><a href=\"https://twitter.com/monadsarelike/status/745954845765603328\" target=\"_blank\" title=\"https://twitter.com/monadsarelike/status/745954845765603328\">https://twitter.com/monadsarelike/status/745954845765603328</a></p>\n<div class=\"inline-preview-twitter\"><div class=\"twitter-tweet\"><a href=\"https://twitter.com/monadsarelike/status/745954845765603328\" target=\"_blank\"><img class=\"twitter-avatar\" src=\"https://abs.twimg.com/sticky/default_profile_images/default_profile_6_normal.png\"></a><p>thanks Alan :D</p><span>- Helpful Monad Tips (@monadsarelike)</span></div></div>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 60976586,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "lyndsey@uchicago.edu",
            "sender_full_name": "Lyndsey Jane Moulds (she/they) (F'13)",
            "sender_id": 2861,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "environment variables",
            "submessages": [],
            "timestamp": 1466684501,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/d5d15ea33fc144ca1fcf8b702df2849a?d=identicon&version=1",
            "client": "website",
            "content": "<p>(it's going to tweet bad metaphors about understanding monads.)</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 60976592,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "lyndsey@uchicago.edu",
            "sender_full_name": "Lyndsey Jane Moulds (she/they) (F'13)",
            "sender_id": 2861,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "environment variables",
            "submessages": [],
            "timestamp": 1466684514,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p>Haha :)</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 60976639,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "environment variables",
            "submessages": [],
            "timestamp": 1466684590,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p>Haha, even easier: <code>env $(cat .env) sbt</code>, I figured there had to already be a built-in shell command for doing this.</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 60976795,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "environment variables",
            "submessages": [],
            "timestamp": 1466684938,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p>This blog post is great: <a href=\"https://tpolecat.github.io/2015/04/29/f-bounds.html\" target=\"_blank\" title=\"https://tpolecat.github.io/2015/04/29/f-bounds.html\">https://tpolecat.github.io/2015/04/29/f-bounds.html</a></p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 100809994,
            "is_me_message": false,
            "last_edit_timestamp": 1473177836,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "f-bounds, typeclasses",
            "submessages": [],
            "timestamp": 1473177727,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/76eabfebc63c7549301ce6e9508ac82f?d=identicon&version=1",
            "client": "website",
            "content": "<p>Nice, well written. The F-bounded <code>Class Enum&lt;E extends Enum&lt;E&gt;&gt;</code> in Java always seems like such a hack to me\u2026</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 100810787,
            "is_me_message": false,
            "last_edit_timestamp": 1473179235,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "harold@x.st",
            "sender_full_name": "Harold Cooper (he) (F2'16)",
            "sender_id": 9490,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "f-bounds, typeclasses",
            "submessages": [],
            "timestamp": 1473179166,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/76eabfebc63c7549301ce6e9508ac82f?d=identicon&version=1",
            "client": "website",
            "content": "<p>Though all of the <code>implicit</code> magic in his solution disturbs me slightly too, but you probably get used to that if you use scala regularly.</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 100810809,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "harold@x.st",
            "sender_full_name": "Harold Cooper (he) (F2'16)",
            "sender_id": 9490,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "f-bounds, typeclasses",
            "submessages": [],
            "timestamp": 1473179221,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p>Huh</p>\n<div class=\"codehilite\"><pre><span class=\"k\">val</span> <span class=\"n\">pets</span> <span class=\"k\">=</span> <span class=\"nc\">List</span><span class=\"o\">[</span><span class=\"kt\">T</span> <span class=\"k\">forSome</span> <span class=\"o\">{</span> <span class=\"k\">type</span> <span class=\"kt\">T</span> <span class=\"k\">&lt;:</span> <span class=\"kt\">Pet</span><span class=\"o\">[</span><span class=\"kt\">T</span><span class=\"o\">]</span> <span class=\"o\">}](</span><span class=\"nc\">Fish</span><span class=\"o\">(</span><span class=\"s\">&quot;alan&quot;</span><span class=\"o\">,</span> <span class=\"mi\">31</span><span class=\"o\">),</span> <span class=\"k\">new</span> <span class=\"nc\">Mammal</span><span class=\"o\">(</span><span class=\"s\">&quot;moe&quot;</span><span class=\"o\">))</span> <span class=\"c1\">// everything&#39;s ok</span>\n<span class=\"k\">val</span> <span class=\"n\">pets</span><span class=\"k\">:</span> <span class=\"kt\">List</span><span class=\"o\">[</span><span class=\"kt\">T</span> <span class=\"k\">forSome</span> <span class=\"o\">{</span> <span class=\"k\">type</span> <span class=\"kt\">T</span> <span class=\"k\">&lt;:</span> <span class=\"kt\">Pet</span><span class=\"o\">[</span><span class=\"kt\">T</span><span class=\"o\">]</span> <span class=\"o\">}]</span> <span class=\"k\">=</span> <span class=\"nc\">List</span><span class=\"o\">(</span><span class=\"nc\">Fish</span><span class=\"o\">(</span><span class=\"s\">&quot;alan&quot;</span><span class=\"o\">,</span> <span class=\"mi\">31</span><span class=\"o\">),</span> <span class=\"k\">new</span> <span class=\"nc\">Mammal</span><span class=\"o\">(</span><span class=\"s\">&quot;moe&quot;</span><span class=\"o\">))</span> <span class=\"c1\">// type error!</span>\n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 100849130,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "f-bounds, typeclasses",
            "submessages": [],
            "timestamp": 1473262479,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p>I had totally assumed those were equivalent lines of code.</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 100849139,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "f-bounds, typeclasses",
            "submessages": [],
            "timestamp": 1473262515,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p>Scala, lots of tricky corners...</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 100849188,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "f-bounds, typeclasses",
            "submessages": [],
            "timestamp": 1473262569,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/e7faded211620970d1a2140ce10e047d?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"alan@hackerschool.com\">@Alan O'Donnell</span>: any explanation for this one?</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 100853047,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "tu.stephenl@gmail.com",
            "sender_full_name": "Stephen Tu",
            "sender_id": 8555,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "f-bounds, typeclasses",
            "submessages": [],
            "timestamp": 1473269336,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p>I don't have one. It seems weird to me :/</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 100855200,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "f-bounds, typeclasses",
            "submessages": [],
            "timestamp": 1473272626,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/76eabfebc63c7549301ce6e9508ac82f?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"alan@hackerschool.com\">@Alan O'Donnell</span> I don't know much Scala, but it looks like the difference has to do with casting versus annotating?</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 100855586,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "harold@x.st",
            "sender_full_name": "Harold Cooper (he) (F2'16)",
            "sender_id": 9490,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "f-bounds, typeclasses",
            "submessages": [],
            "timestamp": 1473273121,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/76eabfebc63c7549301ce6e9508ac82f?d=identicon&version=1",
            "client": "website",
            "content": "<p>So in the first (cast) version, maybe it infers a different (incompatible) type before the cast</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 100855628,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "harold@x.st",
            "sender_full_name": "Harold Cooper (he) (F2'16)",
            "sender_id": 9490,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "f-bounds, typeclasses",
            "submessages": [],
            "timestamp": 1473273149,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p>Ah, is that casting in the first one? I thought it was just type hinting.</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 100855634,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "f-bounds, typeclasses",
            "submessages": [],
            "timestamp": 1473273166,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/76eabfebc63c7549301ce6e9508ac82f?d=identicon&version=1",
            "client": "website",
            "content": "<p>I don't know :p</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 100855639,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "harold@x.st",
            "sender_full_name": "Harold Cooper (he) (F2'16)",
            "sender_id": 9490,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "f-bounds, typeclasses",
            "submessages": [],
            "timestamp": 1473273180,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/76eabfebc63c7549301ce6e9508ac82f?d=identicon&version=1",
            "client": "website",
            "content": "<p>Oh I guess they're both the List() constructor function or something\u2026</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 100855651,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "harold@x.st",
            "sender_full_name": "Harold Cooper (he) (F2'16)",
            "sender_id": 9490,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "f-bounds, typeclasses",
            "submessages": [],
            "timestamp": 1473273199,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/76eabfebc63c7549301ce6e9508ac82f?d=identicon&version=1",
            "client": "website",
            "content": "<p>And the first specifies the type of the function, and the second doesn't, but then annotates the type</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 100855661,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "harold@x.st",
            "sender_full_name": "Harold Cooper (he) (F2'16)",
            "sender_id": 9490,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "f-bounds, typeclasses",
            "submessages": [],
            "timestamp": 1473273219,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/76eabfebc63c7549301ce6e9508ac82f?d=identicon&version=1",
            "client": "website",
            "content": "<p>so\u2026 I have no idea</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 100855672,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "harold@x.st",
            "sender_full_name": "Harold Cooper (he) (F2'16)",
            "sender_id": 9490,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "f-bounds, typeclasses",
            "submessages": [],
            "timestamp": 1473273232,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p>Yeah. I was pretty sure those were totally identical, but I guess not :)</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 100855674,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "f-bounds, typeclasses",
            "submessages": [],
            "timestamp": 1473273235,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/76eabfebc63c7549301ce6e9508ac82f?d=identicon&version=1",
            "client": "website",
            "content": "<p>I could imagine it being a variance issue <img alt=\":confused:\" class=\"emoji\" src=\"/static/third/gemoji/images/emoji/confused.png\" title=\":confused:\"> Haha I am too lazy to install scala to play with it, sorry for all the conjecture!</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 100855798,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "harold@x.st",
            "sender_full_name": "Harold Cooper (he) (F2'16)",
            "sender_id": 9490,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "f-bounds, typeclasses",
            "submessages": [],
            "timestamp": 1473273369,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"harold@x.st\">@Harold Cooper (S2'16)</span> haha, I think you were right all along, now I think it's just a casting issue.</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 100856853,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "f-bounds, typeclasses",
            "submessages": [],
            "timestamp": 1473275164,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p>I guess the <code>val pets: List... = ...</code> version is trying to cast the rhs, and that fails.</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 100856861,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "f-bounds, typeclasses",
            "submessages": [],
            "timestamp": 1473275199,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/76eabfebc63c7549301ce6e9508ac82f?d=identicon&version=1",
            "client": "website",
            "content": "<p>ah okay</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 100856868,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "harold@x.st",
            "sender_full_name": "Harold Cooper (he) (F2'16)",
            "sender_id": 9490,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "f-bounds, typeclasses",
            "submessages": [],
            "timestamp": 1473275222,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/76eabfebc63c7549301ce6e9508ac82f?d=identicon&version=1",
            "client": "website",
            "content": "<p><img alt=\":sports_medal:\" class=\"emoji\" src=\"/static/third/gemoji/images/emoji/sports_medal.png\" title=\":sports_medal:\"> conjecture wins! <img alt=\":trophy:\" class=\"emoji\" src=\"/static/third/gemoji/images/emoji/trophy.png\" title=\":trophy:\"> </p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 100856870,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "harold@x.st",
            "sender_full_name": "Harold Cooper (he) (F2'16)",
            "sender_id": 9490,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "f-bounds, typeclasses",
            "submessages": [],
            "timestamp": 1473275236,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p>:)</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 100856872,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "f-bounds, typeclasses",
            "submessages": [],
            "timestamp": 1473275239,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/76eabfebc63c7549301ce6e9508ac82f?d=identicon&version=1",
            "client": "website",
            "content": "<p>no need for actual facts</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 100856875,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "harold@x.st",
            "sender_full_name": "Harold Cooper (he) (F2'16)",
            "sender_id": 9490,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "f-bounds, typeclasses",
            "submessages": [],
            "timestamp": 1473275244,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/884d87696c5eef10e0b3d74e1649527367aa1332?x=x&version=1",
            "client": "website",
            "content": "<p>It's because the first instance of <code>pets</code> actually resolves (via type inference) to a <code>List[_]</code> (i.e. a list of anything: <code>List[T] forSome{type T}</code>), the bounds of which are enforced on the RHS when building the list but then forgotten (since the list is *immutable*, no further elements may be added, so the type becomes irrelevant).</p>\n<p>The second says  <code>pets</code> *must* be a list of some type whose upper bound is <code>pet</code>.  Using <code>List</code>  constructor without a type <code>[T]</code> gives you a list of the most general superclass of the constructor arguments, which is probably <code>Object</code>, which obviously exceeds the upper bound of <code>Pet</code>.</p>\n<p>Or at least that's my best guess...</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 100857664,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "mike@xichar.com",
            "sender_full_name": "Mike Nielsen (F1'16)",
            "sender_id": 100020,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "f-bounds, typeclasses",
            "submessages": [],
            "timestamp": 1473276779,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p>Yeah, I think the thing that confused me was I didn't actually realize <code>val x: T = ...</code> was a cast; I thought it was a type hint/annotation, e.g. writing <code>val pets: List[...] = ...</code> would guide the rhs to pick the right type. I guess in hindsight that was a pretty fundamental confusion?</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 100858878,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "f-bounds, typeclasses",
            "submessages": [],
            "timestamp": 1473278953,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/76eabfebc63c7549301ce6e9508ac82f?d=identicon&version=1",
            "client": "website",
            "content": "<p>I also thought that, since I think that's more what an explicit <code>::</code> would do in Haskell?</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 100858998,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "harold@x.st",
            "sender_full_name": "Harold Cooper (he) (F2'16)",
            "sender_id": 9490,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "f-bounds, typeclasses",
            "submessages": [],
            "timestamp": 1473279171,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/884d87696c5eef10e0b3d74e1649527367aa1332?x=x&version=1",
            "client": "website",
            "content": "<p>I don't really think of them as a 'cast' (as I am familiar with the term from Java &amp; C).  They really are the type *definition* of the val.</p>\n<p>Since there always is a type definition for a <code>val</code> (which you don't need to write explicitly because the compiler can and will infer it),</p>\n<p><code>val x: T = ...</code><br>\nis equivalent to<br>\n<code>final T x = ...</code><br>\nin Java</p>\n<p>If that's what you meant, then please accept my apologies.</p>\n<p>The compiler will put a hurtin' on you if your type definition on a <code>val</code> and the type of the RHS don't match.</p>\n<p>So <code>val pets: List[...]</code> doesn't guide the RHS but instead causes the compiler to issue an error if your RHS is not of type <code>List[...]</code>.</p>\n<p>On the other hand, <code>val pets = List[...]</code> will cause the compiler to *infer* the minimum required type definition for <code>pets</code></p>\n<p>I'm very new at Scala, but I've decided it's good style to always use explicit types on function definitions, for example, since the value (and thus the type) of the function is always that of the last expression evaluated before the function runs off the end (an explicit 'return' is unnecessary):  the compiler will become angry  if your function has 2 'exit expressions' with different types.  </p>\n<p>Also, if I have a complicated expression, I use an explicit type on the LHS just to convince myself I didn't mess up.  Just because the Scala compiler *will* infer types doesn't mean it's good practice to *rely* on it...</p>\n<p>Maybe once I have a more natural feel for Scala I will quit doing that, but for now that's one of my two rules of thumb (the other is to define implicits [which make me a little uneasy] either in a package object or very close to where they are used).</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 100860093,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "mike@xichar.com",
            "sender_full_name": "Mike Nielsen (F1'16)",
            "sender_id": 100020,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "f-bounds, typeclasses",
            "submessages": [],
            "timestamp": 1473281381,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p>But my question then is why wouldn't <code>val pets: List[...]</code> have convinced the <code>List</code> instantiation on the rhs to pick up the right type? That's what I expected to happen: I figured the type annotation would guide the inference on the right hand side, but it doesn't seem to.</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 100860868,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "f-bounds, typeclasses",
            "submessages": [],
            "timestamp": 1473282804,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p>Hmm, maybe cast isn't the right word though.</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 100860871,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "f-bounds, typeclasses",
            "submessages": [],
            "timestamp": 1473282834,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/76eabfebc63c7549301ce6e9508ac82f?d=identicon&version=1",
            "client": "website",
            "content": "<p>I think annotating the lhs has no effect on the rhs \u2014 is it legal to annotate values (as opposed to variables) in scala?</p>\n<p>If so, you could move the annotation to the rhs and maybe that would actually affect inference.</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 100860931,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "harold@x.st",
            "sender_full_name": "Harold Cooper (he) (F2'16)",
            "sender_id": 9490,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "f-bounds, typeclasses",
            "submessages": [],
            "timestamp": 1473282922,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/884d87696c5eef10e0b3d74e1649527367aa1332?x=x&version=1",
            "client": "website",
            "content": "<p>Moving the type definition to the <code>List</code> constructor does indeed affect the type of the <code>List</code>; the *inferred* type of the <code>List</code>, should you leave the type definition off, is the most general subclass of the items in the list.  So <code>List(1,2,3)</code> is inferred to be <code>List[Int]</code>;  <code>List(1,2.5)</code> is inferred to be <code>List[AnyVal]</code>; List(1,\"hi\") is inferred to be <code>List[Any]</code>.  </p>\n<p>However, you *can* do <code>val x: List[Double] = List(1,2,3)</code>.  So contrary to what I said earlier, the LHS *can* influence the RHS since you can't do <code>val x1 = List(1,2,3); val x2:List[Double] = x1</code> ; I suspect the first case is a little compiler magic to make life, uhh, easier?</p>\n<p>You can define implicit type conversions that will allow you to do the 2nd case, which makes Scala as wonderful and wacky as it is.</p>\n<p>I've lost the context on how Pets, Mammals and Fish are defined, so don't have a much more specific answer on why the example is as it is, although I'll try to chase it down.</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 100862178,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "mike@xichar.com",
            "sender_full_name": "Mike Nielsen (F1'16)",
            "sender_id": 100020,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "f-bounds, typeclasses",
            "submessages": [],
            "timestamp": 1473285377,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/884d87696c5eef10e0b3d74e1649527367aa1332?x=x&version=1",
            "client": "website",
            "content": "<p>I didn't mean to say the \"most general subclass\" above; it's really the \"most specific common ancestor class\".</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 100862235,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "mike@xichar.com",
            "sender_full_name": "Mike Nielsen (F1'16)",
            "sender_id": 100020,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "f-bounds, typeclasses",
            "submessages": [],
            "timestamp": 1473285494,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p>Thought this was a really thoughtful talk: <a href=\"https://www.youtube.com/watch?v=m2YsD5cgnzI\" target=\"_blank\" title=\"https://www.youtube.com/watch?v=m2YsD5cgnzI\">https://www.youtube.com/watch?v=m2YsD5cgnzI</a></p>\n<div class=\"message_inline_image\"><a href=\"https://www.youtube.com/watch?v=m2YsD5cgnzI\" target=\"_blank\" title=\"https://www.youtube.com/watch?v=m2YsD5cgnzI\"><img src=\"https://i.ytimg.com/vi/m2YsD5cgnzI/default.jpg\"></a></div>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 100903090,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "file system operations",
            "submessages": [],
            "timestamp": 1473377279,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p>The library he's talking about, <a href=\"https://github.com/pathikrit/better-files\" target=\"_blank\" title=\"https://github.com/pathikrit/better-files\">https://github.com/pathikrit/better-files</a>, sounds like it'd be a fun read.</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 100903134,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "file system operations",
            "submessages": [],
            "timestamp": 1473377350,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p>Plus a really interesting thread: <a href=\"https://github.com/scala/slip/issues/19\" target=\"_blank\" title=\"https://github.com/scala/slip/issues/19\">https://github.com/scala/slip/issues/19</a></p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 100903986,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "file system operations",
            "submessages": [],
            "timestamp": 1473379348,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/b4d94d953db52e1e7cfc3724b95a6dc906fa9d58?x=x&version=2",
            "client": "website",
            "content": "<p>OH I'd like to watch this.</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 100908770,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "me@ballingt.com",
            "sender_full_name": "Tom Ballinger (he) (W'12)",
            "sender_id": 807,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "file system operations",
            "submessages": [],
            "timestamp": 1473391342,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/b4d94d953db52e1e7cfc3724b95a6dc906fa9d58?x=x&version=2",
            "client": "website",
            "content": "<p>And the internet at RC let me youtube-dl it down, Dropbox it up, and Dropbox it down in 8 minutes, would have been so much faster if I had used better youtube-dl flags!</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 100908813,
            "is_me_message": false,
            "last_edit_timestamp": 1473391762,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "me@ballingt.com",
            "sender_full_name": "Tom Ballinger (he) (W'12)",
            "sender_id": 807,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "file system operations",
            "submessages": [],
            "timestamp": 1473391451,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/d495685876a5a195b6ef5fb9a269b6d0dcd5c5fe?x=x&version=1",
            "client": "website",
            "content": "<p>This is interesting.  If you turn on debugging bilge (<code>-Ytyper-debug -Yinfer-debug -Ydebug</code>) for the <code>List[Double]</code> example, you'll see stuff like this:</p>\n<div class=\"codehilite\"><pre>Warning:scalac: |    |    |    |-- List(1, 2, 3) : pt=List[scala.this.Double] BYVALmode-EXPRmode (site: value giggle  in Boffo, a TermSymbol with flags private[this]) \n\nWarning:scalac: |    |    |    |    |-- List BYVALmode-EXPRmode-FUNmode-POLYmode (silent: value giggle  in Boffo, a TermSymbol with flags private[this]) \n\nWarning:scalac: |    |    |    |    |    |-- immutable.this.List.apply BYVALmode-EXPRmode-FUNmode-POLYmode (silent: value giggle  in Boffo, a TermSymbol with flags private[this]) \n\nWarning:scalac: |    |    |    |    |    |    [adapt] [A](&lt;param&gt; xs: scala.this.&lt;repeated&gt;[A])immutable.this.List[A] adapted to [A](&lt;param&gt; xs: scala.this.&lt;repeated&gt;[A])immutable.this.List[A]\n\nWarning:scalac: |    |    |    |    |    |    \\-&gt; (&lt;param&gt; xs: scala.this.&lt;repeated&gt;[A])immutable.this.List[A]\n\nWarning:scalac: |    |    |    |    |    [adapt] immutable.this.List.type adapted to [A](&lt;param&gt; xs: scala.this.&lt;repeated&gt;[A])immutable.this.List[A]\n\nWarning:scalac: |    |    |    |    |    \\-&gt; (&lt;param&gt; xs: scala.this.&lt;repeated&gt;[A])immutable.this.List[A]\n\nWarning:scalac: |    |    |    |    |-- 1 : pt=scala.this.Double BYVALmode-EXPRmode-POLYmode (site: value giggle  in Boffo, a TermSymbol with flags private[this]) \n\nWarning:scalac: |    |    |    |    |    \\-&gt; scala.this.Double(1.0)\n\nWarning:scalac: |    |    |    |    |-- 2 : pt=scala.this.Double BYVALmode-EXPRmode-POLYmode (site: value giggle  in Boffo, a TermSymbol with flags private[this]) \n\nWarning:scalac: |    |    |    |    |    \\-&gt; scala.this.Double(2.0)\n\nWarning:scalac: |    |    |    |    |-- 3 : pt=scala.this.Double BYVALmode-EXPRmode-POLYmode (site: value giggle  in Boffo, a TermSymbol with flags private[this]) \n\nWarning:scalac: |    |    |    |    |    \\-&gt; scala.this.Double(3.0)\n\nWarning:scalac: |    |    |    |    \\-&gt; immutable.this.List[scala.this.Double]\n</pre></div>\n\n\n<p>So the typer knows it's expected to produce a <code>List[Double]</code> by calling <code>List.apply[A](as: A*): List[A]</code>, and correctly infers that each argument should be cast to <code>Double</code>.  </p>\n<p>When we look at the existential, we get</p>\n<div class=\"codehilite\"><pre>Warning:scalac: |    |    |    |-- List(Fish(&quot;alan&quot;, 31), new Kitty.&lt;init&gt;(&quot;moe&quot;)) : pt=List[T forSome { type T &lt;: &lt;empty&gt;.this.Pet[T] }] BYVALmode-EXPRmode (site: value pets2  in Boffo, a TermSymbol with flags private[this]) \n\nWarning:scalac: |    |    |    |    |-- List BYVALmode-EXPRmode-FUNmode-POLYmode (silent: value pets2  in Boffo, a TermSymbol with flags private[this]) \n\nWarning:scalac: |    |    |    |    |    |-- immutable.this.List.apply BYVALmode-EXPRmode-FUNmode-POLYmode (silent: value pets2  in Boffo, a TermSymbol with flags private[this]) \n\nWarning:scalac: |    |    |    |    |-- Fish(&quot;alan&quot;, 31) : pt=T forSome { type T &lt;: &lt;empty&gt;.this.Pet[T] } BYVALmode-EXPRmode-POLYmode (site: value pets2  in Boffo, a TermSymbol with flags private[this]) \n\nWarning:scalac: |    |    |    |    |    |-- Fish BYVALmode-EXPRmode-FUNmode-POLYmode (silent: value pets2  in Boffo, a TermSymbol with flags private[this]) \n\nWarning:scalac: |    |    |    |    |    |    |-- Fish.apply BYVALmode-EXPRmode-FUNmode-POLYmode (silent: value pets2  in Boffo, a TermSymbol with flags private[this]) \n\nWarning:scalac: |    |    |    |    |    |    [adapt] &lt;empty&gt;.this.Fish.type adapted to (&lt;param&gt; name: String, &lt;param&gt; age: scala.this.Int)&lt;empty&gt;.this.Fish\n\nWarning:scalac: |    |    |    |    |    |    \\-&gt; (&lt;param&gt; name: String, &lt;param&gt; age: scala.this.Int)&lt;empty&gt;.this.Fish\n\nWarning:scalac: |    |    |    |    |    |-- &quot;alan&quot; : pt=String BYVALmode-EXPRmode (silent: value pets2  in Boffo, a TermSymbol with flags private[this]) \n\nWarning:scalac: |    |    |    |    |    |    \\-&gt; lang.this.String(&quot;alan&quot;)\n\nWarning:scalac: |    |    |    |    |    |-- 31 : pt=scala.this.Int BYVALmode-EXPRmode (silent: value pets2  in Boffo, a TermSymbol with flags private[this]) \n\nWarning:scalac: |    |    |    |    |    |    \\-&gt; scala.this.Int(31)\n\nWarning:scalac: |    |    |    |    |-- new Kitty.&lt;init&gt;(&quot;moe&quot;) : pt=T forSome { type T &lt;: &lt;empty&gt;.this.Pet[T] } BYVALmode-EXPRmode-POLYmode (site: value pets2  in Boffo, a TermSymbol with flags private[this]) \n\nWarning:scalac: |    |    |    |    |    |-- new Kitty.&lt;init&gt; BYVALmode-EXPRmode-FUNmode-POLYmode (silent: value pets2  in Boffo, a TermSymbol with flags private[this]) \n\nWarning:scalac: |    |    |    |    |    |    |-- new Kitty EXPRmode-POLYmode-QUALmode (silent: value pets2  in Boffo, a TermSymbol with flags private[this]) \n\nWarning:scalac: |    |    |    |    |    |    |    |-- Kitty FUNmode-TYPEmode (silent: value pets2  in Boffo, a TermSymbol with flags private[this]) \n\nWarning:scalac: |    |    |    |    |    |    \\-&gt; (&lt;param&gt; name: String)&lt;empty&gt;.this.Kitty\n\nWarning:scalac: |    |    |    |    |    |-- &quot;moe&quot; : pt=String BYVALmode-EXPRmode (site: value pets2  in Boffo, a TermSymbol with flags private[this]) \n\nWarning:scalac: |    |    |    |    |    |    \\-&gt; lang.this.String(&quot;moe&quot;)\n\nWarning:scalac: |    |    |    |    \\-&gt; &lt;error&gt;\n</pre></div>\n\n\n<p>Notice how the vertical line for the <code>Fish(\"alan\")</code> block slams right into the <code>Kitty(\"moe\")</code> block without the expected <code>\\-&gt; T forSome ...</code><br>\nSo the specific failure is in casting the individual argument to <code>List.apply</code>, rather than in the casting of <code>List.apply</code>.  </p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 101118698,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "pnf@podsnap.com",
            "sender_full_name": "Peter Fraenkel (he) (S'13)",
            "sender_id": 2142,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "f-bounds, typeclasses",
            "submessages": [],
            "timestamp": 1473894778,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/884d87696c5eef10e0b3d74e1649527367aa1332?x=x&version=1",
            "client": "website",
            "content": "<p>Cool.  I didn't know how to do that.</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 101140627,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "mike@xichar.com",
            "sender_full_name": "Mike Nielsen (F1'16)",
            "sender_id": 100020,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "f-bounds, typeclasses",
            "submessages": [],
            "timestamp": 1473951447,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/d495685876a5a195b6ef5fb9a269b6d0dcd5c5fe?x=x&version=1",
            "client": "website",
            "content": "<p>I also tried it out in 2.12 and dotty, with the same results, which is disappointing.  The <a href=\"https://github.com/scala/scala/blob/2.12.x/src/compiler/scala/tools/nsc/typechecker/Typers.scala\" target=\"_blank\" title=\"https://github.com/scala/scala/blob/2.12.x/src/compiler/scala/tools/nsc/typechecker/Typers.scala\">typer code</a> is pretty gruesome, but it's occasionally possible to learn things by stepping through it in the debugger.</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 101147509,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "pnf@podsnap.com",
            "sender_full_name": "Peter Fraenkel (he) (S'13)",
            "sender_id": 2142,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "f-bounds, typeclasses",
            "submessages": [],
            "timestamp": 1473964524,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p>Looks pretty good: <a href=\"https://leanpub.com/mastering-advanced-scala\" target=\"_blank\" title=\"https://leanpub.com/mastering-advanced-scala\">https://leanpub.com/mastering-advanced-scala</a></p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 101280805,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "ebook on advanced topics",
            "submessages": [],
            "timestamp": 1474299841,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/a897e9d6a0e8aff13a39e0515c38ee2d9482c809?x=x&version=1",
            "client": "website",
            "content": "<p>cool!</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 101291490,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "guest.austin@gmail.com",
            "sender_full_name": "Austin Guest (they) (SP2'19)",
            "sender_id": 6930,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "ebook on advanced topics",
            "submessages": [],
            "timestamp": 1474319441,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/d495685876a5a195b6ef5fb9a269b6d0dcd5c5fe?x=x&version=1",
            "client": "website",
            "content": "<p>It does look nice.  Know anyone who's paid to look at the non-free part?</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 101317173,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "pnf@podsnap.com",
            "sender_full_name": "Peter Fraenkel (he) (S'13)",
            "sender_id": 2142,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "ebook on advanced topics",
            "submessages": [],
            "timestamp": 1474382679,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/cc979dfc088d7ca86c02fbfdb5f0fd93?d=identicon&version=1",
            "client": "website",
            "content": "<p>Does anyone have any idea if it's possible to replicate <a href=\"http://research.microsoft.com/en-us/um/people/simonpj/papers/list-comp/applicativedo.pdf\" target=\"_blank\" title=\"http://research.microsoft.com/en-us/um/people/simonpj/papers/list-comp/applicativedo.pdf\">this</a> in Scala? I was thinking that maybe using macros but I've never used them in Scala so I don't know how powerful they are</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 101401301,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "miguelvilag@gmail.com",
            "sender_full_name": "Miguel Vil\u00e1 (F1'16)",
            "sender_id": 100037,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "Applicative do notation in scala",
            "submessages": [],
            "timestamp": 1474568608,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/15194d13b82532c261bf87ca074e2ab5?d=identicon&version=1",
            "client": "website",
            "content": "<p>I think it's sort of possible in regular scala without macros</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 101403596,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "aliang2344@gmail.com",
            "sender_full_name": "Andy Liang (F2'15)",
            "sender_id": 8684,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "Applicative do notation in scala",
            "submessages": [],
            "timestamp": 1474572569,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/15194d13b82532c261bf87ca074e2ab5?d=identicon&version=1",
            "client": "website",
            "content": "<div class=\"codehilite\"><pre>  <span class=\"k\">class</span> <span class=\"nc\">DoStep</span><span class=\"o\">[</span><span class=\"kt\">A</span>, <span class=\"kt\">B</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"k\">val</span> <span class=\"n\">aToB</span><span class=\"k\">:</span> <span class=\"kt\">A</span> <span class=\"o\">=&gt;</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n    <span class=\"k\">def</span> <span class=\"n\">apply</span><span class=\"o\">(</span><span class=\"n\">in</span><span class=\"k\">:</span> <span class=\"kt\">A</span><span class=\"o\">)</span><span class=\"k\">:</span> <span class=\"kt\">B</span> <span class=\"o\">=</span> <span class=\"n\">aToB</span><span class=\"o\">(</span><span class=\"n\">in</span><span class=\"o\">)</span>\n    <span class=\"c1\">//combines steps together</span>\n    <span class=\"k\">def</span> <span class=\"o\">~[</span><span class=\"kt\">C</span><span class=\"o\">](</span><span class=\"n\">that</span><span class=\"k\">:</span> <span class=\"kt\">DoStep</span><span class=\"o\">[</span><span class=\"kt\">B</span>, <span class=\"kt\">C</span><span class=\"o\">])</span><span class=\"k\">:</span> <span class=\"kt\">DoStep</span><span class=\"o\">[</span><span class=\"kt\">A</span>, <span class=\"kt\">C</span><span class=\"o\">]</span> <span class=\"k\">=</span> <span class=\"o\">{</span>\n      <span class=\"k\">val</span> <span class=\"n\">bToC</span> <span class=\"k\">=</span> <span class=\"n\">that</span><span class=\"o\">.</span><span class=\"n\">aToB</span>\n      <span class=\"k\">val</span> <span class=\"n\">aToC</span> <span class=\"k\">=</span> <span class=\"n\">aToB</span><span class=\"o\">.</span><span class=\"n\">andThen</span><span class=\"o\">(</span><span class=\"n\">bToC</span><span class=\"o\">)</span>\n      <span class=\"k\">new</span> <span class=\"nc\">DoStep</span><span class=\"o\">(</span><span class=\"n\">aToC</span><span class=\"o\">)</span>\n    <span class=\"o\">}</span>\n  <span class=\"o\">}</span>\n\n  <span class=\"k\">def</span> <span class=\"n\">step</span><span class=\"o\">[</span><span class=\"kt\">A</span>, <span class=\"kt\">B</span><span class=\"o\">](</span><span class=\"n\">fn</span><span class=\"k\">:</span> <span class=\"kt\">A</span> <span class=\"o\">=&gt;</span> <span class=\"n\">B</span><span class=\"o\">)</span><span class=\"k\">:</span> <span class=\"kt\">DoStep</span><span class=\"o\">[</span><span class=\"kt\">A</span>, <span class=\"kt\">B</span><span class=\"o\">]</span> <span class=\"k\">=</span> <span class=\"k\">new</span> <span class=\"nc\">DoStep</span><span class=\"o\">(</span><span class=\"n\">fn</span><span class=\"o\">)</span>\n\n  <span class=\"k\">def</span> <span class=\"n\">doPipeline</span><span class=\"o\">[</span><span class=\"kt\">In</span>, <span class=\"kt\">Out</span><span class=\"o\">](</span><span class=\"n\">i</span><span class=\"k\">:</span> <span class=\"kt\">In</span><span class=\"o\">)(</span><span class=\"n\">megastep</span><span class=\"k\">:</span> <span class=\"o\">=&gt;</span> <span class=\"nc\">DoStep</span><span class=\"o\">[</span><span class=\"kt\">In</span>, <span class=\"kt\">Out</span><span class=\"o\">])</span><span class=\"k\">:</span> <span class=\"kt\">Out</span> <span class=\"o\">=</span> <span class=\"n\">megastep</span><span class=\"o\">(</span><span class=\"n\">i</span><span class=\"o\">)</span>\n\n  <span class=\"c1\">// apply the Some(3) to the pipeline</span>\n  <span class=\"k\">val</span> <span class=\"n\">result</span> <span class=\"k\">=</span> <span class=\"n\">doPipeline</span><span class=\"o\">[</span><span class=\"kt\">Option</span><span class=\"o\">[</span><span class=\"kt\">Int</span><span class=\"o\">]</span>, <span class=\"kt\">String</span><span class=\"o\">](</span><span class=\"nc\">Some</span><span class=\"o\">(</span><span class=\"mi\">3</span><span class=\"o\">))</span> <span class=\"o\">{</span>\n    <span class=\"n\">step</span><span class=\"o\">((</span><span class=\"n\">input</span><span class=\"k\">:</span> <span class=\"kt\">Option</span><span class=\"o\">[</span><span class=\"kt\">Int</span><span class=\"o\">])</span> <span class=\"k\">=&gt;</span> <span class=\"o\">{</span><span class=\"n\">input</span><span class=\"o\">.</span><span class=\"n\">getOrElse</span><span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">)})</span> <span class=\"o\">~</span> <span class=\"c1\">//get value or 0 in not exists</span>\n    <span class=\"n\">step</span><span class=\"o\">(</span><span class=\"n\">int</span> <span class=\"k\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">int</span> <span class=\"o\">+</span> <span class=\"mi\">2</span><span class=\"o\">).</span><span class=\"n\">toString</span><span class=\"o\">)</span> <span class=\"o\">~</span> <span class=\"c1\">// add 2, and convert to string</span>\n    <span class=\"n\">step</span><span class=\"o\">(</span><span class=\"n\">str</span> <span class=\"k\">=&gt;</span> <span class=\"n\">str</span><span class=\"o\">.</span><span class=\"n\">toUpperCase</span><span class=\"o\">())</span> <span class=\"c1\">//convert to uppercast</span>\n  <span class=\"o\">}</span>\n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 101403598,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "aliang2344@gmail.com",
            "sender_full_name": "Andy Liang (F2'15)",
            "sender_id": 8684,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "Applicative do notation in scala",
            "submessages": [],
            "timestamp": 1474572580,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/15194d13b82532c261bf87ca074e2ab5?d=identicon&version=1",
            "client": "website",
            "content": "<p>I'm not super familiar with how do notation in haskell works though so let me know if I'm missing the point</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 101403645,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "aliang2344@gmail.com",
            "sender_full_name": "Andy Liang (F2'15)",
            "sender_id": 8684,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "Applicative do notation in scala",
            "submessages": [],
            "timestamp": 1474572614,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/15194d13b82532c261bf87ca074e2ab5?d=identicon&version=1",
            "client": "website",
            "content": "<p>it falls to overloading the ~ operator to get something reasonably close to how haskell looks. also, you have to provide type annotations for the first lambda. not sure if there's a clever way around that</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 101403730,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "aliang2344@gmail.com",
            "sender_full_name": "Andy Liang (F2'15)",
            "sender_id": 8684,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "Applicative do notation in scala",
            "submessages": [],
            "timestamp": 1474572794,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p>Haskell's do notation is basically just <code>for</code> syntax in Scala.</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 101404293,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "Applicative do notation in scala",
            "submessages": [],
            "timestamp": 1474573988,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p>No idea how easy/impossible it would be to write <code>for</code> syntax in Scala that notices when it can turn into applicative operations. I'm guessing hard :)</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 101404349,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "Applicative do notation in scala",
            "submessages": [],
            "timestamp": 1474574091,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/d495685876a5a195b6ef5fb9a269b6d0dcd5c5fe?x=x&version=1",
            "client": "website",
            "content": "<p>The <a href=\"http://www.47deg.com/blog/fetch-scala-library\" target=\"_blank\" title=\"http://www.47deg.com/blog/fetch-scala-library\">fetch</a> people would have wanted an applicative <code>for</code> for the same reason Marlow does, and they apparently didn't try.</p>\n<p>I'm pretty sure you can't do it with normal macros, because the desugaring is done in the  very first compiler phase, during parsing, after which the AST is already in monadic form.  I've poked around a bit at the new <a href=\"http://scalamacros.org/paperstalks/2016-06-17-Metaprogramming20.pdf\" target=\"_blank\" title=\"http://scalamacros.org/paperstalks/2016-06-17-Metaprogramming20.pdf\">scalameta</a> <a href=\"https://github.com/scalameta/scalameta\" target=\"_blank\" title=\"https://github.com/scalameta/scalameta\">stuff</a>, which does seem to do some <a href=\"https://github.com/scalameta/paradise/blob/master/plugin/src/main/scala/org/scalameta/paradise/parser/HijackSyntaxAnalyzer.scala\" target=\"_blank\" title=\"https://github.com/scalameta/paradise/blob/master/plugin/src/main/scala/org/scalameta/paradise/parser/HijackSyntaxAnalyzer.scala\">fiddling</a> at the parsing stage, but I *think* that's just for recording source location links. </p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 102224882,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "pnf@podsnap.com",
            "sender_full_name": "Peter Fraenkel (he) (S'13)",
            "sender_id": 2142,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "Applicative do notation in scala",
            "submessages": [],
            "timestamp": 1476448520,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p>Neat, that looks like a cool library.</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 102227392,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "Applicative do notation in scala",
            "submessages": [],
            "timestamp": 1476454195,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/cc979dfc088d7ca86c02fbfdb5f0fd93?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"pnf@podsnap.com\">@Peter Fraenkel (S'13)</span> I see what you mean by the desugaring thing. I did a <a href=\"https://miguel-vila.github.io/jupyter_notebooks/towards-an-applicative-macro-1.html\" target=\"_blank\" title=\"https://miguel-vila.github.io/jupyter_notebooks/towards-an-applicative-macro-1.html\">very small proof of concept</a> modifying the ast generated by the desugaring. This may be less than ideal but maybe it's possible.</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 102235490,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "miguelvilag@gmail.com",
            "sender_full_name": "Miguel Vil\u00e1 (F1'16)",
            "sender_id": 100037,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "Applicative do notation in scala",
            "submessages": [],
            "timestamp": 1476469559,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/d495685876a5a195b6ef5fb9a269b6d0dcd5c5fe?x=x&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"miguelvilag@gmail.com\">@Miguel Vil\u00e1 (F1'16)</span> That's really nice work!.  I suspect it's going to be difficult to handle exhaustively, given the ridiculous breadth of possible <code>for</code> expansions, but you might be justified in banning certain features (such as <code>=</code> assignment in the comprehension).  <br>\nBtw, have you played with lhs quasiquotes (i.e. extractors)?  They make a lot of things easier.</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 102239268,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "pnf@podsnap.com",
            "sender_full_name": "Peter Fraenkel (he) (S'13)",
            "sender_id": 2142,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "Applicative do notation in scala",
            "submessages": [],
            "timestamp": 1476476421,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/cc979dfc088d7ca86c02fbfdb5f0fd93?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"pnf@podsnap.com\">@Peter Fraenkel (S'13)</span> hmmm,  for some reason the first time I tried matching with quasiquotes they didn't work for me, I guess I was not passing a tree. I rewrote it to this: <a href=\"/user_uploads/13/g5_tY6qqkTAXgMrxWutjnpYw/Screenshot-from-2016-10-14-16-51-42.png\" target=\"_blank\" title=\"Screenshot-from-2016-10-14-16-51-42.png\">Screenshot-from-2016-10-14-16-51-42.png</a> </p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/13/g5_tY6qqkTAXgMrxWutjnpYw/Screenshot-from-2016-10-14-16-51-42.png\" target=\"_blank\" title=\"Screenshot-from-2016-10-14-16-51-42.png\"><img src=\"/user_uploads/13/g5_tY6qqkTAXgMrxWutjnpYw/Screenshot-from-2016-10-14-16-51-42.png\"></a></div>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 102240412,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "miguelvilag@gmail.com",
            "sender_full_name": "Miguel Vil\u00e1 (F1'16)",
            "sender_id": 100037,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "Applicative do notation in scala",
            "submessages": [],
            "timestamp": 1476478508,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/cc979dfc088d7ca86c02fbfdb5f0fd93?d=identicon&version=1",
            "client": "website",
            "content": "<p>hmmm I tried using quasiquotes matches in the sbt project and it didn't work. They work in the Jupyter notebook / REPL, though</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 102242474,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "miguelvilag@gmail.com",
            "sender_full_name": "Miguel Vil\u00e1 (F1'16)",
            "sender_id": 100037,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "Applicative do notation in scala",
            "submessages": [],
            "timestamp": 1476482048,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/d495685876a5a195b6ef5fb9a269b6d0dcd5c5fe?x=x&version=1",
            "client": "website",
            "content": "<p>That's not totally surprising.  There seems to be quite a lot of variety in the way scala represents apparently simple method applications, and then the REPL mangles things quite a bit too.  Usually, I end up having to write macros with a complicated traverse and match strategy.<br>\nBut... have you looked at all at scalameta?  I just started playing with it (delayed by misguided attempts to get a scala environment on windows to work).   The interesting thing for you purposes is that  it captures parse information, so you have access to an AST that includes <code>for</code> structure.  For example, I this looks promising:</p>\n<div class=\"codehilite\"><pre> scala&gt; val t = q&quot;for(i &lt;- l1; j &lt;- l2) yield i+j&quot;\n t: meta.Term.ForYield = for (i &lt;- l1; j &lt;- l2) yield i + j\n\n scala&gt; t.tokens\n res15: scala.meta.tokens.Tokens = Tokens(, for,  , (, i,  , &lt;-,  , l1, ;,  , j,  , &lt;-,  , l\\\n 2, ),  , yield,  , i,  , +,  , j, )\n\n scala&gt; t.structure\n res16: String = Term.ForYield(Seq(Enumerator.Generator(Pat.Var.Term(Term.Name(&quot;i&quot;)), Term.N\\\n ame(&quot;l1&quot;)), Enumerator.Generator(Pat.Var.Term(Term.Name(&quot;j&quot;)), Term.Name(&quot;l2&quot;))), Term.Appl\\\n yInfix(Term.Name(&quot;i&quot;), Term.Name(&quot;+&quot;), Nil, Seq(Term.Name(&quot;j&quot;))))\n\n scala&gt; val q&quot;for (..$es) yield $y&quot; = t\n es: scala.collection.immutable.Seq[scala.meta.Enumerator] = List(i &lt;- l1, j &lt;- l2)\n y: scala.meta.Term = i + j\n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 102299952,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "pnf@podsnap.com",
            "sender_full_name": "Peter Fraenkel (he) (S'13)",
            "sender_id": 2142,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "Applicative do notation in scala",
            "submessages": [],
            "timestamp": 1476635014,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/d495685876a5a195b6ef5fb9a269b6d0dcd5c5fe?x=x&version=1",
            "client": "website",
            "content": "<p>Btw, I've been really interested in Haxl/Fetch/Stitch/Muse recently.  I have a blog post in the works that tries to show how you can get around the need for applicatives by making the fetches fully asynchronous. </p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 102300081,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "pnf@podsnap.com",
            "sender_full_name": "Peter Fraenkel (he) (S'13)",
            "sender_id": 2142,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "Applicative do notation in scala",
            "submessages": [],
            "timestamp": 1476635358,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/cc979dfc088d7ca86c02fbfdb5f0fd93?d=identicon&version=1",
            "client": "website",
            "content": "<p>Wow, scala meta looks really cool! I'm just beginning to learn about macros but I will look look into scala meta.</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 102335551,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "miguelvilag@gmail.com",
            "sender_full_name": "Miguel Vil\u00e1 (F1'16)",
            "sender_id": 100037,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "Applicative do notation in scala",
            "submessages": [],
            "timestamp": 1476722938,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/21b9cce736cbbe8e0761bbb33863c7d3112d0136?x=x&version=2",
            "client": "website",
            "content": "<p>With these somewhat reasonable definitions:</p>\n<div class=\"codehilite\"><pre><span></span>abstract class MyList[+T] {\n  def head: T\n  def tail: MyList[T]\n  def isEmpty: Boolean\n}\n\ncase class MyCons[T](val head: T, var tail: MyList[T]) extends MyList[T] {\n  def isEmpty = true\n}\n\nobject MyNil extends MyList[Nothing] {\n  def head = throw new Error(&quot;Cannot take the head of the empty list.&quot;)\n  def tail = throw new Error(&quot;Cannot take the tail of the empty list.&quot;)\n  def isEmpty = true\n}\n\ndef fn(xs: MyList[Any]) = xs match {\n  case x: MyCons[Any] =&gt; x.tail = MyCons(&quot;hi&quot;, MyNil)\n}\n</pre></div>\n\n\n<p>You can do the following:</p>\n<div class=\"codehilite\"><pre><span></span>scala&gt; val x = MyCons(1, MyCons(2, MyNil))\nx: MyCons[Int] = MyCons(1,MyCons(2,MyNil$@31eb7290))\n\nscala&gt; fn(x)\n\nscala&gt; x\nres10: MyCons[Int] = MyCons(1,MyCons(hi,MyNil$@31eb7290))\n\nscala&gt; x.tail\nres11: MyList[Int] = MyCons(hi,MyNil$@31eb7290)\n\nscala&gt; x.tail.head\njava.lang.ClassCastException: java.lang.String cannot be cast to java.lang.Integer\n    at scala.runtime.BoxesRunTime.unboxToInt(BoxesRunTime.java:106)\n    at .&lt;init&gt;(&lt;console&gt;:13)\n    at .&lt;clinit&gt;(&lt;console&gt;)\n...\n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 103939742,
            "is_me_message": false,
            "last_edit_timestamp": 1480243248,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "michaelmalis2@gmail.com",
            "sender_full_name": "Michael Malis (SP2'19)",
            "sender_id": 8099,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "I tricked the type system",
            "submessages": [],
            "timestamp": 1480243019,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/21b9cce736cbbe8e0761bbb33863c7d3112d0136?x=x&version=2",
            "client": "website",
            "content": "<p>So apparently, creating a non-covariant subclass of a covariant class can render the superclass non-covariant.</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 103939787,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "michaelmalis2@gmail.com",
            "sender_full_name": "Michael Malis (SP2'19)",
            "sender_id": 8099,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "I tricked the type system",
            "submessages": [],
            "timestamp": 1480243142,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/21b9cce736cbbe8e0761bbb33863c7d3112d0136?x=x&version=2",
            "client": "website",
            "content": "<p>Maybe you shouldn't be able to pattern match a covariant object against non-covariant patterns, at least without an explicit cast.</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 103939968,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "michaelmalis2@gmail.com",
            "sender_full_name": "Michael Malis (SP2'19)",
            "sender_id": 8099,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "I tricked the type system",
            "submessages": [],
            "timestamp": 1480243627,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/d495685876a5a195b6ef5fb9a269b6d0dcd5c5fe?x=x&version=1",
            "client": "website",
            "content": "<p>It seems to much harder to trick the type system when you avoid mutation:</p>\n<div class=\"codehilite\"><pre><span></span> <span class=\"k\">def</span> <span class=\"n\">gn</span><span class=\"o\">[</span><span class=\"kt\">Any</span><span class=\"o\">](</span><span class=\"n\">xs</span><span class=\"k\">:</span> <span class=\"kt\">Any</span><span class=\"o\">)</span><span class=\"k\">:</span> <span class=\"kt\">MyList</span><span class=\"o\">[</span><span class=\"kt\">Any</span><span class=\"o\">]</span> <span class=\"k\">=</span> <span class=\"n\">xs</span> <span class=\"k\">match</span> <span class=\"o\">{</span>\n  <span class=\"k\">case</span> <span class=\"nc\">MyCons</span><span class=\"o\">(</span><span class=\"n\">h</span><span class=\"o\">,</span><span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"k\">=&gt;</span> <span class=\"nc\">MyCons</span><span class=\"o\">(</span><span class=\"n\">h</span><span class=\"o\">,</span><span class=\"nc\">MyCons</span><span class=\"o\">(</span><span class=\"s\">&quot;hi&quot;</span><span class=\"o\">,</span> <span class=\"nc\">MyNil</span><span class=\"o\">))</span>\n<span class=\"o\">}</span>\n</pre></div>\n\n\n<p>won't,compile, while</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">def</span> <span class=\"n\">hn</span><span class=\"o\">[</span><span class=\"kt\">T</span> <span class=\"k\">&gt;:</span> <span class=\"kt\">String</span><span class=\"o\">](</span><span class=\"n\">xs</span><span class=\"k\">:</span> <span class=\"kt\">MyList</span><span class=\"o\">[</span><span class=\"kt\">T</span><span class=\"o\">])</span><span class=\"k\">:</span> <span class=\"kt\">MyList</span><span class=\"o\">[</span><span class=\"kt\">T</span><span class=\"o\">]</span> <span class=\"k\">=</span> <span class=\"n\">xs</span> <span class=\"k\">match</span> <span class=\"o\">{</span>\n  <span class=\"k\">case</span> <span class=\"nc\">MyCons</span><span class=\"o\">(</span><span class=\"n\">h</span><span class=\"o\">,</span><span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"k\">=&gt;</span> <span class=\"nc\">MyCons</span><span class=\"o\">(</span><span class=\"n\">h</span><span class=\"o\">,</span><span class=\"nc\">MyCons</span><span class=\"o\">(</span><span class=\"s\">&quot;hi&quot;</span><span class=\"o\">,</span> <span class=\"nc\">MyNil</span><span class=\"o\">))</span>\n<span class=\"o\">}</span>\n</pre></div>\n\n\n<p>does the  \"right thing\":<br>\n ```.scala<br>\nscala&gt; hn(MyCons(1,MyCons(1,MyNil)))<br>\nres1: MyList[Any] = MyCons(1,MyCons(hi,MyNil$@3f49cc43))</p>\n<p>scala&gt; hn(MyCons(\"1\",MyCons(\"1\",MyNil)))<br>\nres2: MyList[String] = MyCons(1,MyCons(hi,MyNil$@3f49cc43))</p>\n<div class=\"codehilite\"><pre><span></span>\n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 104223549,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "pnf@podsnap.com",
            "sender_full_name": "Peter Fraenkel (he) (S'13)",
            "sender_id": 2142,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "I tricked the type system",
            "submessages": [],
            "timestamp": 1480865449,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/496fbbeedd9a0153d3c3810c9bc4ce2435428a8a?x=x&version=1",
            "client": "desktop app Mac 0.5.2",
            "content": "<p>hey all, pretty new to scala still learning my way around the syntax. wondering if there is such thing as a <code>distinctBy()</code> function. eg it would take a list of tuples and <code>distinct()</code> them by a specified element. concretely =&gt;</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">val</span> <span class=\"n\">a</span> <span class=\"k\">=</span> <span class=\"nc\">Array</span><span class=\"o\">((</span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"mi\">2</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"mi\">3</span><span class=\"o\">))</span>\n<span class=\"n\">a</span><span class=\"o\">.</span><span class=\"n\">distinctBy</span><span class=\"o\">(</span><span class=\"k\">_</span><span class=\"o\">.</span><span class=\"n\">_1</span><span class=\"o\">)</span>\n<span class=\"n\">res1</span><span class=\"k\">:</span> <span class=\"kt\">Array</span><span class=\"o\">[(</span><span class=\"kt\">Int</span>,<span class=\"kt\">Int</span><span class=\"o\">)]</span> <span class=\"k\">=</span> <span class=\"nc\">Array</span><span class=\"o\">((</span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"mi\">2</span><span class=\"o\">))</span>\n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 104279326,
            "is_me_message": false,
            "last_edit_timestamp": 1481044032,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "markostam@gmail.com",
            "sender_full_name": "Marko Stamenovic (F2'16)",
            "sender_id": 100185,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "distinctBy function?",
            "submessages": [],
            "timestamp": 1480989819,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/03b0888e9d8908ef656cd0831bedb1e9754c974d?x=x&version=1",
            "client": "website",
            "content": "<p>Scala's groupBy returns a map of distinct key to traversable, so you could group by then iterate over the result and take just the first value. <a href=\"http://markusjais.com/the-groupby-method-from-scalas-collection-library/\" target=\"_blank\" title=\"http://markusjais.com/the-groupby-method-from-scalas-collection-library/\">http://markusjais.com/the-groupby-method-from-scalas-collection-library/</a></p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 104280011,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "andrea.fey@gmail.com",
            "sender_full_name": "Andrea Fey (W'14)",
            "sender_id": 5010,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "distinctBy function?",
            "submessages": [],
            "timestamp": 1480991257,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/496fbbeedd9a0153d3c3810c9bc4ce2435428a8a?x=x&version=1",
            "client": "desktop app Mac 0.5.2",
            "content": "<p>this usually works but my use-case is for a <code>lazy val</code> fed by an infinite stream. i want to take the first 8 tuples which have a <code>distinct(_._1)</code> value. consider my code below:</p>\n<div class=\"codehilite\"><pre><span></span>  <span class=\"k\">def</span> <span class=\"n\">bruteForceCrack2</span> <span class=\"o\">(</span><span class=\"n\">doorID</span><span class=\"k\">:</span> <span class=\"kt\">String</span><span class=\"o\">)</span> <span class=\"k\">=</span> <span class=\"o\">{</span>\n    <span class=\"k\">var</span> <span class=\"n\">seen</span> <span class=\"k\">=</span> <span class=\"nc\">Set</span><span class=\"o\">[</span><span class=\"kt\">Any</span><span class=\"o\">]()</span>\n    <span class=\"k\">def</span> <span class=\"n\">distinctByFirst</span> <span class=\"o\">(</span><span class=\"n\">tup</span> <span class=\"k\">:</span> <span class=\"o\">(</span><span class=\"kt\">Any</span><span class=\"o\">,</span><span class=\"kt\">Any</span><span class=\"o\">))</span> <span class=\"k\">:</span> <span class=\"kt\">Boolean</span> <span class=\"o\">=</span> <span class=\"o\">{</span>\n      <span class=\"k\">if</span> <span class=\"o\">(!</span><span class=\"n\">seen</span><span class=\"o\">.</span><span class=\"n\">contains</span><span class=\"o\">(</span><span class=\"n\">tup</span><span class=\"o\">.</span><span class=\"n\">_1</span><span class=\"o\">))</span> <span class=\"o\">{</span>\n        <span class=\"n\">seen</span> <span class=\"o\">+=</span> <span class=\"n\">tup</span><span class=\"o\">.</span><span class=\"n\">_1</span>\n        <span class=\"kc\">true</span>\n      <span class=\"o\">}</span>\n      <span class=\"k\">else</span> <span class=\"o\">{</span><span class=\"kc\">false</span><span class=\"o\">}</span>\n    <span class=\"o\">}</span>\n    <span class=\"c1\">// lazily evaluate a brute force attack</span>\n    <span class=\"k\">lazy</span> <span class=\"k\">val</span> <span class=\"n\">passwordCheck</span> <span class=\"k\">=</span> <span class=\"nc\">Stream</span><span class=\"o\">.</span><span class=\"n\">from</span><span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">).</span>\n      <span class=\"n\">map</span><span class=\"o\">(</span><span class=\"n\">doorID</span> <span class=\"o\">+</span> <span class=\"k\">_</span><span class=\"o\">).</span>\n      <span class=\"n\">map</span><span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"k\">=&gt;</span> <span class=\"n\">hash</span><span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">)).</span>\n      <span class=\"n\">filter</span><span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"k\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">)==</span><span class=\"s\">&quot;0&quot;</span> <span class=\"o\">&amp;</span> <span class=\"n\">x</span><span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"o\">)==</span><span class=\"s\">&quot;0&quot;</span> <span class=\"o\">&amp;</span> <span class=\"n\">hex2int</span><span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"o\">))</span> <span class=\"o\">&lt;</span> <span class=\"mi\">8</span><span class=\"o\">)).</span>\n      <span class=\"n\">map</span><span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"k\">=&gt;</span> <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">(</span><span class=\"mi\">3</span><span class=\"o\">).</span><span class=\"n\">length</span> <span class=\"o\">==</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"o\">),</span><span class=\"s\">&quot;0&quot;</span><span class=\"o\">)</span> <span class=\"k\">else</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"o\">),</span><span class=\"n\">x</span><span class=\"o\">(</span><span class=\"mi\">3</span><span class=\"o\">)(</span><span class=\"mi\">0</span><span class=\"o\">))).</span>\n      <span class=\"n\">filter</span><span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"k\">=&gt;</span> <span class=\"n\">distinctByFirst</span><span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">))</span>\n    <span class=\"k\">val</span> <span class=\"n\">unsorted</span> <span class=\"k\">=</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"n\">to</span> <span class=\"mi\">7</span><span class=\"o\">).</span><span class=\"n\">map</span><span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"k\">=&gt;</span> <span class=\"n\">passwordCheck</span><span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">))</span>\n    <span class=\"n\">unsorted</span><span class=\"o\">.</span><span class=\"n\">sortBy</span><span class=\"o\">(</span><span class=\"k\">_</span><span class=\"o\">.</span><span class=\"n\">_1</span><span class=\"o\">).</span><span class=\"n\">map</span><span class=\"o\">(</span><span class=\"k\">_</span><span class=\"o\">.</span><span class=\"n\">_2</span><span class=\"o\">).</span><span class=\"n\">mkString</span><span class=\"o\">(</span><span class=\"s\">&quot;&quot;</span><span class=\"o\">)</span>\n  <span class=\"o\">}</span>\n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 104303114,
            "is_me_message": false,
            "last_edit_timestamp": 1481326415,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "markostam@gmail.com",
            "sender_full_name": "Marko Stamenovic (F2'16)",
            "sender_id": 100185,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "distinctBy function?",
            "submessages": [],
            "timestamp": 1481043788,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/496fbbeedd9a0153d3c3810c9bc4ce2435428a8a?x=x&version=1",
            "client": "desktop app Mac 0.5.2",
            "content": "<p>i tried subbing in a <code>groupBy</code> instead of filtering by my self defined <code>distinctByFirst</code> and the parent function basically just runs forever without returning. is there a better/more idiomatic solution for this use case or is the self-defined <code>distinctBy</code> a decent way to go?</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 104303213,
            "is_me_message": false,
            "last_edit_timestamp": 1481044529,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "markostam@gmail.com",
            "sender_full_name": "Marko Stamenovic (F2'16)",
            "sender_id": 100185,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "distinctBy function?",
            "submessages": [],
            "timestamp": 1481043938,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/d495685876a5a195b6ef5fb9a269b6d0dcd5c5fe?x=x&version=1",
            "client": "website",
            "content": "<p>Martin Odersky gave a talk at my company yesterday.  It was his <a href=\"http://www.slideshare.net/Odersky/scala-days-nyc-2016\" target=\"_blank\" title=\"http://www.slideshare.net/Odersky/scala-days-nyc-2016\">standard roadshow</a>, but there was time for questions afterwards, and I got to ask a question about Rob/tpolecat's blog post.  Specifically, I was wondering if any of the cool stuff coming up for dotty (union classes especially) would make the typeclass implementation any cleaner, i.e. will you still have to do</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">val</span> <span class=\"n\">pets</span> <span class=\"k\">=</span> <span class=\"nc\">List</span><span class=\"o\">[(</span><span class=\"kt\">A</span>, <span class=\"kt\">Pet</span><span class=\"o\">[</span><span class=\"kt\">A</span><span class=\"o\">])</span> <span class=\"k\">forSome</span> <span class=\"o\">{</span> <span class=\"k\">type</span> <span class=\"kt\">A</span> <span class=\"o\">}]((</span><span class=\"nc\">Fish</span><span class=\"o\">(</span><span class=\"err\">\u2026</span><span class=\"o\">),</span> <span class=\"n\">implicitly</span><span class=\"o\">[</span><span class=\"kt\">Pet</span><span class=\"o\">[</span><span class=\"kt\">Fish</span><span class=\"o\">]]),</span> <span class=\"o\">(</span><span class=\"nc\">Kitty</span><span class=\"o\">(</span><span class=\"err\">\u2026</span><span class=\"o\">),</span> <span class=\"n\">implicitly</span><span class=\"o\">[</span><span class=\"kt\">Pet</span><span class=\"o\">[</span><span class=\"kt\">Kitty</span><span class=\"o\">]]))</span>\n</pre></div>\n\n\n<p>(presumably not exactly, since <code>forSome</code> is going away, but, generally, do you need to capture the implicits explicitly in a tuple).  Well, the anwer is that he sort of remembers having an answer once, but asked me to mail him the link...<br>\nAs I was composing the mail, I did the usual RC thing of realizing that I don't entirely know what I'm talking about and thought I should try to replicate it in Haskell before demanding more Haskelly  typeclasses .  It seems like in Haskell, you end up doing something very similar, by creating an existentially quantified wrapper class.  I.e., assuming you have</p>\n<div class=\"codehilite\"><pre><span></span>  <span class=\"kr\">class</span> <span class=\"kt\">Pet</span> <span class=\"n\">a</span> <span class=\"kr\">where</span>\n     <span class=\"n\">renamed</span> <span class=\"ow\">::</span> <span class=\"kt\">String</span> <span class=\"ow\">-&gt;</span> <span class=\"n\">a</span> <span class=\"ow\">-&gt;</span> <span class=\"n\">a</span>\n<span class=\"nf\">with</span> <span class=\"n\">instances</span> <span class=\"n\">for</span> <span class=\"kt\">Fish</span> <span class=\"n\">and</span> <span class=\"kt\">Kitty</span><span class=\"p\">,</span>\n<span class=\"kr\">instance</span> <span class=\"kt\">Pet</span> <span class=\"kt\">Fish</span> <span class=\"kr\">where</span>\n  <span class=\"n\">renamed</span> <span class=\"n\">s</span> <span class=\"p\">(</span><span class=\"kt\">Fish</span> <span class=\"n\">a</span><span class=\"p\">)</span> <span class=\"ow\">=</span> <span class=\"kt\">Fish</span> <span class=\"n\">s</span>\n<span class=\"kr\">instance</span> <span class=\"kt\">Pet</span> <span class=\"kt\">Cat</span> <span class=\"kr\">where</span>\n  <span class=\"n\">renamed</span> <span class=\"n\">s</span> <span class=\"p\">(</span><span class=\"kt\">Cat</span> <span class=\"n\">a</span><span class=\"p\">)</span> <span class=\"ow\">=</span> <span class=\"kt\">Cat</span> <span class=\"n\">s</span> \n</pre></div>\n\n\n<p>you can't just do</p>\n<div class=\"codehilite\"><pre><span></span>  <span class=\"n\">pets</span> <span class=\"ow\">::</span> <span class=\"p\">[</span><span class=\"kt\">Pet</span><span class=\"p\">]</span>\n</pre></div>\n\n\n<p>but end up with something like</p>\n<div class=\"codehilite\"><pre><span></span>  <span class=\"kr\">data</span> <span class=\"kt\">Collar</span> <span class=\"ow\">=</span> <span class=\"n\">forall</span> <span class=\"n\">a</span><span class=\"o\">.</span> <span class=\"kt\">Pet</span> <span class=\"n\">a</span> <span class=\"ow\">=&gt;</span> <span class=\"kt\">Collar</span> <span class=\"n\">a</span>\n  <span class=\"n\">pets</span> <span class=\"ow\">::</span> <span class=\"p\">[</span><span class=\"kt\">Collar</span><span class=\"p\">]</span>\n  <span class=\"n\">pets</span> <span class=\"ow\">=</span> <span class=\"p\">[</span><span class=\"kt\">Collar</span> <span class=\"p\">(</span><span class=\"kt\">Cat</span> <span class=\"s\">&quot;Joe&quot;</span><span class=\"p\">),</span> <span class=\"kt\">Collar</span><span class=\"p\">(</span><span class=\"kt\">Fish</span> <span class=\"s\">&quot;Jim&quot;</span><span class=\"p\">)]</span>\n  <span class=\"n\">fmap</span> <span class=\"p\">(</span><span class=\"nf\">\\</span><span class=\"p\">(</span><span class=\"kt\">Collar</span> <span class=\"n\">p</span><span class=\"p\">)</span> <span class=\"ow\">-&gt;</span> <span class=\"p\">(</span><span class=\"kt\">Collar</span> <span class=\"p\">(</span><span class=\"n\">renamed</span> <span class=\"s\">&quot;Jeff&quot;</span> <span class=\"n\">p</span><span class=\"p\">)))</span> <span class=\"n\">pets</span>\n</pre></div>\n\n\n<p>If I'd wanted to avoid tuples in Scala, we could have done almost the same thing</p>\n<div class=\"codehilite\"><pre><span></span>  <span class=\"k\">case</span> <span class=\"k\">class</span> <span class=\"nc\">Collar</span><span class=\"o\">[</span><span class=\"kt\">A</span><span class=\"o\">](</span><span class=\"n\">a</span><span class=\"k\">:</span> <span class=\"kt\">A</span><span class=\"o\">)(</span><span class=\"k\">implicit</span> <span class=\"k\">val</span> <span class=\"n\">p</span><span class=\"k\">:</span> <span class=\"kt\">Pet</span><span class=\"o\">[</span><span class=\"kt\">A</span><span class=\"o\">])</span>\n  <span class=\"k\">val</span> <span class=\"n\">pets</span> <span class=\"k\">=</span> <span class=\"nc\">List</span><span class=\"o\">(</span><span class=\"nc\">Collar</span><span class=\"o\">(</span><span class=\"nc\">Fish</span><span class=\"o\">(</span><span class=\"err\">\u2026</span><span class=\"o\">)),</span> <span class=\"nc\">Collar</span><span class=\"o\">(</span><span class=\"nc\">Cat</span><span class=\"o\">(</span><span class=\"err\">\u2026</span><span class=\"o\">)))</span>\n  <span class=\"n\">pets</span><span class=\"o\">.</span><span class=\"n\">map</span> <span class=\"o\">{</span><span class=\"k\">case</span> <span class=\"n\">c</span><span class=\"nd\">@Collar</span><span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"k\">=&gt;</span> <span class=\"n\">c</span><span class=\"o\">.</span><span class=\"n\">p</span><span class=\"o\">.</span><span class=\"n\">renamed</span><span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">,</span><span class=\"s\">&quot;Jeff&quot;</span><span class=\"o\">)}</span>\n</pre></div>\n\n\n<p>If something apparently called impredicative polymorphism existed in Haskell, we could have done <code>pets :: [forall. Pet a =&gt; a]</code>, which would have been cool.</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 104468893,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "pnf@podsnap.com",
            "sender_full_name": "Peter Fraenkel (he) (S'13)",
            "sender_id": 2142,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "f-bounds, typeclasses",
            "submessages": [],
            "timestamp": 1481382694,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/36e38f07213a4459a526a3334d690aa09a75b04d?x=x&version=3",
            "client": "website",
            "content": "<p>A reading group is starting up: Functional Programming in Scala! Tentatively, we will meet on Fridays 1pm at 455, but open to changing times. By next Friday, we will finish part 1 (6 chapters), as we are keeping open the possibility of finishing the book in 4-5 weeks (batch end) This is probably not the right forum to learn FP from scratch; however the only request is that you can present two instructive exercises at every meeting, because it's a book that you learn by doing, not just by reading.  Pls post/rsvp if you're interested but time doesn't suit<br>\n<a href=\"https://www.manning.com/books/functional-programming-in-scala\" target=\"_blank\" title=\"https://www.manning.com/books/functional-programming-in-scala\">https://www.manning.com/books/functional-programming-in-scala</a></p>\n<p>rsvp init<br>\nrsvp set duration 1h<br>\nrsvp set time 13:00<br>\nrsvp set date Friday 4/14<br>\nrsvp set location Lovelace<br>\nrsvp set description <span class=\"user-mention\" data-user-email=\"abylaw@gmail.com\" data-user-id=\"100830\">@Andrea Law (SP2'17)</span> on ch.3 <span class=\"user-mention\" data-user-email=\"cfactora93@gmail.com\" data-user-id=\"100519\">@Carl Joshua Factora (SP1'17)</span> on ch.4 <span class=\"user-mention\" data-user-email=\"xianny@gmail.com\" data-user-id=\"100527\">@Xianny Ng (SP1'17)</span> on ch.5 <span class=\"user-mention\" data-user-email=\"danlaudk@yahoo.dk\" data-user-id=\"100522\">@Daniel Lau (SP2'17)</span> on ch.6</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 109328502,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "dclau04@gmail.com",
            "sender_full_name": "Daniel Lau (he) (SP2'17)",
            "sender_id": 100522,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "FP in Scala reading group (red book)",
            "submessages": [],
            "timestamp": 1491589351,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/0ddf86bf31f43bb32425becd9876aed31ba9796d?x=x&version=1",
            "client": "ZulipPython",
            "content": "<p>This thread is now an RSVPBot event! Type <code>rsvp help</code> for more options.</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 109328503,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "rsvp_bot-bot@students.hackerschool.com",
            "sender_full_name": "RSVPBot",
            "sender_id": 7960,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "FP in Scala reading group (red book)",
            "submessages": [],
            "timestamp": 1491589351,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/f9168c90ac77e5592118339e9859e5f3?d=identicon&version=1",
            "client": "website",
            "content": "<p>rsvp maybe</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 109328940,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f622",
                    "emoji_name": "cry",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "cfactora93@gmail.com",
                        "full_name": "Carl Joshua Factora (SP1'17)",
                        "id": 100519
                    },
                    "user_id": 100519
                }
            ],
            "recipient_id": 22644,
            "sender_email": "montecristoh@gmail.com",
            "sender_full_name": "Alberto Zaccagni (SP1'17)",
            "sender_id": 100509,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "FP in Scala reading group (red book)",
            "submessages": [],
            "timestamp": 1491590126,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/57ee4628e40dfdc98e509d3cb7d823c7dfaf5eae?x=x&version=4",
            "client": "website",
            "content": "<p><a href=\"/user_uploads/13/3EPh-BOm1y_QvXwDiR14TGFY/pasted_image.png\" target=\"_blank\" title=\"pasted_image.png\">pasted image</a> </p>\n<p>TFW you realize that every FP book starts exactly the same way (including <a href=\"http://project-lamp.org\" target=\"_blank\" title=\"http://project-lamp.org\">your own</a>). Kappa.</p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/13/3EPh-BOm1y_QvXwDiR14TGFY/pasted_image.png\" target=\"_blank\" title=\"pasted image\"><img src=\"/user_uploads/13/3EPh-BOm1y_QvXwDiR14TGFY/pasted_image.png\"></a></div>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 109329778,
            "is_me_message": false,
            "last_edit_timestamp": 1491591900,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "cfactora93@gmail.com",
            "sender_full_name": "Carl Joshua Factora (SP1'17)",
            "sender_id": 100519,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "FP in Scala reading group (red book)",
            "submessages": [],
            "timestamp": 1491591541,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/f9168c90ac77e5592118339e9859e5f3?d=identicon&version=1",
            "client": "website",
            "content": "<p>Hah.</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 109330663,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "montecristoh@gmail.com",
            "sender_full_name": "Alberto Zaccagni (SP1'17)",
            "sender_id": 100509,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "FP in Scala reading group (red book)",
            "submessages": [],
            "timestamp": 1491593083,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/3e4fdd2de583e91a56da5e9bf76d4cd0?d=identicon&version=1",
            "client": "website",
            "content": "<p>rsvp maybe</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 109334027,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "jose.evelio.martinez.saiz@gmail.com",
            "sender_full_name": "Jose Evelio Martinez Saiz (SP1'17)",
            "sender_id": 100529,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "FP in Scala reading group (red book)",
            "submessages": [],
            "timestamp": 1491598899,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/21b9cce736cbbe8e0761bbb33863c7d3112d0136?x=x&version=2",
            "client": "website",
            "content": "<p>Can I join? I'm an alum currently in SF so I would have to video chat in.</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 109405251,
            "is_me_message": false,
            "last_edit_timestamp": 1491772548,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "michaelmalis2@gmail.com",
            "sender_full_name": "Michael Malis (SP2'19)",
            "sender_id": 8099,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "FP in Scala reading group (red book)",
            "submessages": [],
            "timestamp": 1491772326,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/36e38f07213a4459a526a3334d690aa09a75b04d?x=x&version=3",
            "client": "website",
            "content": "<p>wld love for u to join. do u know if we have equipment at RC for it? a standing camera and good [mic&amp;speaker] that works for a room (eg sits on tabletop) wld be super</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 109405800,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "dclau04@gmail.com",
            "sender_full_name": "Daniel Lau (he) (SP2'17)",
            "sender_id": 100522,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "FP in Scala reading group (red book)",
            "submessages": [],
            "timestamp": 1491773770,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/21b9cce736cbbe8e0761bbb33863c7d3112d0136?x=x&version=2",
            "client": "website",
            "content": "<p>I think you can just use Google Hangouts or <a href=\"http://appear.in\" target=\"_blank\" title=\"http://appear.in\">appear.in</a>.</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 109411170,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "michaelmalis2@gmail.com",
            "sender_full_name": "Michael Malis (SP2'19)",
            "sender_id": 8099,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "FP in Scala reading group (red book)",
            "submessages": [],
            "timestamp": 1491786294,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/36e38f07213a4459a526a3334d690aa09a75b04d?x=x&version=3",
            "client": "website",
            "content": "<p>let's try it.  does the time work for you?</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 109415066,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "dclau04@gmail.com",
            "sender_full_name": "Daniel Lau (he) (SP2'17)",
            "sender_id": 100522,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "FP in Scala reading group (red book)",
            "submessages": [],
            "timestamp": 1491795405,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/21b9cce736cbbe8e0761bbb33863c7d3112d0136?x=x&version=2",
            "client": "website",
            "content": "<p>I can do either 1pm or 2pm ET on a weekday, or I can do anytime after 1pm ET on the weekend. The existing schedule should work fine.</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 109416840,
            "is_me_message": false,
            "last_edit_timestamp": 1491799682,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "michaelmalis2@gmail.com",
            "sender_full_name": "Michael Malis (SP2'19)",
            "sender_id": 8099,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "FP in Scala reading group (red book)",
            "submessages": [],
            "timestamp": 1491799637,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/57ee4628e40dfdc98e509d3cb7d823c7dfaf5eae?x=x&version=4",
            "client": "website",
            "content": "<p>I'm getting triggered about how many times this book tells me about how awesome currying is, and then shows how Scala just doesn't use it by default. <a href=\"/user_uploads/13/hBZhkvPiKvpgHW8271rRUyC9/pasted_image.png\" target=\"_blank\" title=\"pasted_image.png\">pasted image</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/13/hBZhkvPiKvpgHW8271rRUyC9/pasted_image.png\" target=\"_blank\" title=\"pasted image\"><img src=\"/user_uploads/13/hBZhkvPiKvpgHW8271rRUyC9/pasted_image.png\"></a></div>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 109440408,
            "is_me_message": false,
            "last_edit_timestamp": 1491848352,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "cfactora93@gmail.com",
            "sender_full_name": "Carl Joshua Factora (SP1'17)",
            "sender_id": 100519,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "Curry is yummy",
            "submessages": [],
            "timestamp": 1491848330,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/57ee4628e40dfdc98e509d3cb7d823c7dfaf5eae?x=x&version=4",
            "client": "website",
            "content": "<p>bruh</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 109440497,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "cfactora93@gmail.com",
            "sender_full_name": "Carl Joshua Factora (SP1'17)",
            "sender_id": 100519,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "Curry is yummy",
            "submessages": [],
            "timestamp": 1491848426,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/36e38f07213a4459a526a3334d690aa09a75b04d?x=x&version=3",
            "client": "website",
            "content": "<p>let's hold to 1pm Friday. Friendly reminder that if u havne't started reading, u can still knock over a chapter a day (&amp; do an exercise)   to be ready for friday! <span class=\"user-mention\" data-user-email=\"montecristoh@gmail.com\" data-user-id=\"100509\">@Alberto Zaccagni (SP1'17)</span> fyi</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 109476167,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "dclau04@gmail.com",
            "sender_full_name": "Daniel Lau (he) (SP2'17)",
            "sender_id": 100522,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "FP in Scala reading group (red book)",
            "submessages": [],
            "timestamp": 1491922698,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/0e5310d577f719e57009db6273218242?d=identicon&version=1",
            "client": "website",
            "content": "<p>rsvp yes</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 109480342,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "xianny@gmail.com",
            "sender_full_name": "Xianny Ng (SP1'17)",
            "sender_id": 100527,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "FP in Scala reading group (red book)",
            "submessages": [],
            "timestamp": 1491930297,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/0e5310d577f719e57009db6273218242?d=identicon&version=1",
            "client": "website",
            "content": "<p>uhhhh does anyone mind if we change to 2pm friday? there is a 12:30 - 1:30 jobs profile session</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 109480356,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "xianny@gmail.com",
            "sender_full_name": "Xianny Ng (SP1'17)",
            "sender_id": 100527,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "FP in Scala reading group (red book)",
            "submessages": [],
            "timestamp": 1491930323,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/57ee4628e40dfdc98e509d3cb7d823c7dfaf5eae?x=x&version=4",
            "client": "website",
            "content": "<p>Any time on friday really works for me.</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 109489825,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "cfactora93@gmail.com",
            "sender_full_name": "Carl Joshua Factora (SP1'17)",
            "sender_id": 100519,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "FP in Scala reading group (red book)",
            "submessages": [],
            "timestamp": 1491945824,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/36e38f07213a4459a526a3334d690aa09a75b04d?x=x&version=3",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"michaelmalis2@gmail.com\" data-user-id=\"8099\">@Michael Malis (S1'15)</span> rsvp set time 14:00  (instead of 13:00 ET)</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 109497716,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "dclau04@gmail.com",
            "sender_full_name": "Daniel Lau (he) (SP2'17)",
            "sender_id": 100522,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "FP in Scala reading group (red book)",
            "submessages": [],
            "timestamp": 1491961656,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/36e38f07213a4459a526a3334d690aa09a75b04d?x=x&version=3",
            "client": "website",
            "content": "<p>rsvp set time 14:00<br>\nrsvp add to calendar</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 109497757,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "dclau04@gmail.com",
            "sender_full_name": "Daniel Lau (he) (SP2'17)",
            "sender_id": 100522,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "FP in Scala reading group (red book)",
            "submessages": [],
            "timestamp": 1491961686,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/0ddf86bf31f43bb32425becd9876aed31ba9796d?x=x&version=1",
            "client": "ZulipPython",
            "content": "<p>Event <a href=\"https://www.google.com/calendar/event?eid=bTVmdG00MTVvODczOHVlb3VucXFhYTNkYWcgaGFja2Vyc2Nob29sLmNvbV9sM250ZTdmc2cybml0ZDZkdDVkdThmdnU0b0Bn\" target=\"_blank\" title=\"https://www.google.com/calendar/event?eid=bTVmdG00MTVvODczOHVlb3VucXFhYTNkYWcgaGFja2Vyc2Nob29sLmNvbV9sM250ZTdmc2cybml0ZDZkdDVkdThmdnU0b0Bn\">added to 455 Broadway Calendar</a>!</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 109497759,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "rsvp_bot-bot@students.hackerschool.com",
            "sender_full_name": "RSVPBot",
            "sender_id": 7960,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "FP in Scala reading group (red book)",
            "submessages": [],
            "timestamp": 1491961688,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/21b9cce736cbbe8e0761bbb33863c7d3112d0136?x=x&version=2",
            "client": "website",
            "content": "<p>Ack.</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 109499340,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "michaelmalis2@gmail.com",
            "sender_full_name": "Michael Malis (SP2'19)",
            "sender_id": 8099,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "FP in Scala reading group (red book)",
            "submessages": [],
            "timestamp": 1491965068,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/21b9cce736cbbe8e0761bbb33863c7d3112d0136?x=x&version=2",
            "client": "website",
            "content": "<p>By the way, how difficult should the exercises we come up with be. Should they be something like in the book (e.g. implement a function that does X), something like implement a small project (e.g. implement a program for playing Conway's game of life), or somewhere in between?</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 109499413,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "michaelmalis2@gmail.com",
            "sender_full_name": "Michael Malis (SP2'19)",
            "sender_id": 8099,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "FP in Scala reading group (red book)",
            "submessages": [],
            "timestamp": 1491965255,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/57ee4628e40dfdc98e509d3cb7d823c7dfaf5eae?x=x&version=4",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"michaelmalis2@gmail.com\" data-user-id=\"8099\">@Michael Malis (S1'15)</span> I would say closer to the former, but still somewhere in between</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 109499867,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "cfactora93@gmail.com",
            "sender_full_name": "Carl Joshua Factora (SP1'17)",
            "sender_id": 100519,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "FP in Scala reading group (red book)",
            "submessages": [],
            "timestamp": 1491966244,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/36e38f07213a4459a526a3334d690aa09a75b04d?x=x&version=3",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"michaelmalis2@gmail.com\" data-user-id=\"8099\">@Michael Malis (S1'15)</span> <span class=\"user-mention\" data-user-email=\"cfactora93@gmail.com\" data-user-id=\"100519\">@Carl Joshua Factora (SP1'17)</span> oh, I may not have communicated this right. I had in mind  two exercises <em>from the book</em> (even tho they need not be actually labelled Exercises) So long as they're instructive. Or were u kidding? <img alt=\":relieved:\" class=\"emoji\" src=\"/static/generated/emoji/images/emoji/unicode/1f60c.png\" title=\":relieved:\"></p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 109501492,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "dclau04@gmail.com",
            "sender_full_name": "Daniel Lau (he) (SP2'17)",
            "sender_id": 100522,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "FP in Scala reading group (red book)",
            "submessages": [],
            "timestamp": 1491969855,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/21b9cce736cbbe8e0761bbb33863c7d3112d0136?x=x&version=2",
            "client": "website",
            "content": "<p>Oh, I thought they we were supposed to come up with our own exercises.</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 109504638,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "michaelmalis2@gmail.com",
            "sender_full_name": "Michael Malis (SP2'19)",
            "sender_id": 8099,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "FP in Scala reading group (red book)",
            "submessages": [],
            "timestamp": 1491977519,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/d495685876a5a195b6ef5fb9a269b6d0dcd5c5fe?x=x&version=1",
            "client": "website",
            "content": "<p>I think the reason for this is that, sincce the JVM doesn't support it natively, Scala has to explicitly instantiate <code>Function1</code>s, such that</p>\n<div class=\"codehilite\"><pre><span></span>   <span class=\"k\">def</span> <span class=\"n\">foo</span><span class=\"o\">(</span><span class=\"n\">i</span><span class=\"k\">:</span> <span class=\"kt\">Int</span><span class=\"o\">)(</span><span class=\"n\">j</span><span class=\"k\">:</span> <span class=\"kt\">Int</span><span class=\"o\">)(</span><span class=\"n\">k</span><span class=\"k\">:</span> <span class=\"kt\">Int</span><span class=\"o\">)</span> <span class=\"k\">=</span> <span class=\"n\">i</span> <span class=\"o\">+</span> <span class=\"n\">j</span> <span class=\"o\">+</span><span class=\"n\">k</span>\n</pre></div>\n\n\n<p>is implemented as</p>\n<div class=\"codehilite\"><pre><span></span>  <span class=\"k\">def</span> <span class=\"n\">foo</span><span class=\"o\">(</span><span class=\"n\">i</span><span class=\"k\">:</span> <span class=\"kt\">Int</span><span class=\"o\">)</span> <span class=\"k\">=</span> <span class=\"k\">new</span> <span class=\"nc\">Function1</span> <span class=\"o\">[</span><span class=\"kt\">Int</span>,<span class=\"kt\">Int</span><span class=\"o\">]{</span><span class=\"k\">def</span> <span class=\"n\">apply</span><span class=\"o\">(</span><span class=\"n\">j</span><span class=\"k\">:</span> <span class=\"kt\">Int</span><span class=\"o\">)</span> <span class=\"k\">=</span> <span class=\"k\">new</span> <span class=\"nc\">Function1</span><span class=\"o\">[</span><span class=\"kt\">Int</span>,<span class=\"kt\">Int</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"k\">def</span> <span class=\"n\">apply</span><span class=\"o\">(</span><span class=\"n\">k</span><span class=\"k\">:</span> <span class=\"kt\">Int</span><span class=\"o\">)</span> <span class=\"k\">=</span> <span class=\"n\">i</span> <span class=\"o\">+</span> <span class=\"n\">j</span> <span class=\"o\">+</span> <span class=\"n\">k</span><span class=\"o\">}}</span>\n</pre></div>\n\n\n<p>This may be a little better in Scala 12, which takes advantage of Java 8's lambda capabilities.</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 109531478,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "pnf@podsnap.com",
            "sender_full_name": "Peter Fraenkel (he) (S'13)",
            "sender_id": 2142,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "Curry is yummy",
            "submessages": [],
            "timestamp": 1492031262,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/21b9cce736cbbe8e0761bbb33863c7d3112d0136?x=x&version=2",
            "client": "website",
            "content": "<p>Hmm... I think Scala doesn't support currying by default because it supports functions with a variable number of arguments instead. Let's say I have a function with the signature <code>f(x: Int, y: Int = 10)</code>. If Scala had currying by default, calling <code>f</code> by writing <code>f(x)</code> is ambiguous since it could be interpreted as either <code>f(x, 10)</code> or <code>y =&gt; f(x, y)</code>.</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 109536226,
            "is_me_message": false,
            "last_edit_timestamp": 1492041359,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "michaelmalis2@gmail.com",
            "sender_full_name": "Michael Malis (SP2'19)",
            "sender_id": 8099,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "Curry is yummy",
            "submessages": [],
            "timestamp": 1492040290,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/57ee4628e40dfdc98e509d3cb7d823c7dfaf5eae?x=x&version=4",
            "client": "website",
            "content": "<p>Not really an excuse, imo. The Scala Compiler should proactively handle functions that take multiple arguments and desugar them to be curried. For example:</p>\n<p><code>f(x,y)</code> should be the same thing as <code>f(x)(y)</code> and so on. There really isn't much of reason to <em>not</em> do that except for technicalities in the compiler implementation. The laundry list of benefits of having implicit currying in a functional language is just simply well worth it.</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 109540859,
            "is_me_message": false,
            "last_edit_timestamp": 1492050401,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "cfactora93@gmail.com",
            "sender_full_name": "Carl Joshua Factora (SP1'17)",
            "sender_id": 100519,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "Curry is yummy",
            "submessages": [],
            "timestamp": 1492050374,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/57ee4628e40dfdc98e509d3cb7d823c7dfaf5eae?x=x&version=4",
            "client": "website",
            "content": "<p>But yeah... I understand why it isn't currently like that (JVM stuff), but pls Scala. Can I haz implicit currying for my functions? :D</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 109540868,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "cfactora93@gmail.com",
            "sender_full_name": "Carl Joshua Factora (SP1'17)",
            "sender_id": 100519,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "Curry is yummy",
            "submessages": [],
            "timestamp": 1492050476,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/d495685876a5a195b6ef5fb9a269b6d0dcd5c5fe?x=x&version=1",
            "client": "website",
            "content": "<p>Y'know....  I  think we can make this happen with either a compiler plugin (tedious) or the new scalameta stuff (might not be hard).   It would look like an annotation (actually a macro) on the class definition  and another (just a normal annotation) on methods to be auto-converted, e.g.</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"nd\">@autoCurryMethods</span> <span class=\"k\">class</span> <span class=\"nc\">Foo</span> <span class=\"o\">{</span>\n   <span class=\"nd\">@autoCurry</span> <span class=\"k\">def</span> <span class=\"n\">foo</span><span class=\"o\">(</span><span class=\"n\">i</span><span class=\"k\">:</span> <span class=\"kt\">Int</span><span class=\"o\">,</span> <span class=\"n\">j</span><span class=\"k\">:</span> <span class=\"kt\">Int</span><span class=\"o\">,</span> <span class=\"n\">k</span><span class=\"k\">:</span> <span class=\"kt\">Int</span><span class=\"o\">)</span> <span class=\"k\">=</span> <span class=\"n\">i</span> <span class=\"o\">+</span> <span class=\"n\">j</span> <span class=\"o\">+</span> <span class=\"n\">k</span>\n<span class=\"o\">}</span>\n</pre></div>\n\n\n<p>would turn into</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">class</span> <span class=\"nc\">Foo</span> <span class=\"o\">{</span>\n   <span class=\"k\">def</span> <span class=\"n\">foo</span><span class=\"o\">(</span><span class=\"n\">i</span><span class=\"k\">:</span> <span class=\"kt\">Int</span><span class=\"o\">,</span> <span class=\"n\">j</span><span class=\"k\">:</span> <span class=\"kt\">Int</span><span class=\"o\">,</span> <span class=\"n\">k</span><span class=\"k\">:</span> <span class=\"kt\">Int</span><span class=\"o\">)</span><span class=\"k\">:</span> <span class=\"kt\">Int</span>  <span class=\"o\">=</span> <span class=\"n\">i</span> <span class=\"o\">+</span> <span class=\"n\">j</span> <span class=\"o\">+</span> <span class=\"n\">k</span>\n   <span class=\"k\">def</span> <span class=\"n\">foo</span><span class=\"o\">(</span><span class=\"n\">i</span><span class=\"k\">:</span> <span class=\"kt\">Int</span><span class=\"o\">)(</span><span class=\"n\">j</span><span class=\"k\">:</span> <span class=\"kt\">Int</span><span class=\"o\">)(</span><span class=\"n\">k</span><span class=\"k\">:</span> <span class=\"kt\">Int</span><span class=\"o\">)</span><span class=\"k\">:</span> <span class=\"kt\">Int</span>  <span class=\"o\">=</span> <span class=\"n\">foo</span><span class=\"o\">(</span><span class=\"n\">i</span><span class=\"o\">,</span><span class=\"n\">j</span><span class=\"o\">,</span><span class=\"n\">k</span><span class=\"o\">)</span>\n   <span class=\"k\">def</span> <span class=\"n\">foo</span><span class=\"o\">(</span><span class=\"n\">i</span><span class=\"k\">:</span> <span class=\"kt\">Int</span><span class=\"o\">,</span> <span class=\"n\">j</span><span class=\"k\">:</span> <span class=\"kt\">Int</span><span class=\"o\">)</span> <span class=\"k\">=</span> <span class=\"n\">foo</span><span class=\"o\">(</span><span class=\"n\">i</span><span class=\"o\">)(</span><span class=\"n\">j</span><span class=\"o\">)</span>\n<span class=\"o\">}</span>\n</pre></div>\n\n\n<p>The main problems I worry about are around type inference.  <br>\nI think I might skip work today and come in for alumni Thursday and give this a try.  Is anyone interested in pairing ?</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 109558230,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "pnf@podsnap.com",
            "sender_full_name": "Peter Fraenkel (he) (S'13)",
            "sender_id": 2142,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "Curry is yummy",
            "submessages": [],
            "timestamp": 1492090859,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/57ee4628e40dfdc98e509d3cb7d823c7dfaf5eae?x=x&version=4",
            "client": "website",
            "content": "<p>That sounds fire. I'm pairing with another RCer today on our project, so when were you thinking of dropping by?</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 109559705,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "cfactora93@gmail.com",
            "sender_full_name": "Carl Joshua Factora (SP1'17)",
            "sender_id": 100519,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "Curry is yummy",
            "submessages": [],
            "timestamp": 1492093784,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/0e5310d577f719e57009db6273218242?d=identicon&version=1",
            "client": "website",
            "content": "<p>someone cancelled calendar event! i dont know anything about that. still down to meet tomorrow</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 109564150,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "xianny@gmail.com",
            "sender_full_name": "Xianny Ng (SP1'17)",
            "sender_id": 100527,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "FP in Scala reading group (red book)",
            "submessages": [],
            "timestamp": 1492100567,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/57ee4628e40dfdc98e509d3cb7d823c7dfaf5eae?x=x&version=4",
            "client": "website",
            "content": "<p>same. Still down af.</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 109564166,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "cfactora93@gmail.com",
            "sender_full_name": "Carl Joshua Factora (SP1'17)",
            "sender_id": 100519,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "FP in Scala reading group (red book)",
            "submessages": [],
            "timestamp": 1492100591,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/f9168c90ac77e5592118339e9859e5f3?d=identicon&version=1",
            "client": "website",
            "content": "<p>Still coming to see if something I would enjoy</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 109564178,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "montecristoh@gmail.com",
            "sender_full_name": "Alberto Zaccagni (SP1'17)",
            "sender_id": 100509,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "FP in Scala reading group (red book)",
            "submessages": [],
            "timestamp": 1492100622,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/21b9cce736cbbe8e0761bbb33863c7d3112d0136?x=x&version=2",
            "client": "ZulipAndroid",
            "content": "<p>I'm still up for it.</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 109564314,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "michaelmalis2@gmail.com",
            "sender_full_name": "Michael Malis (SP2'19)",
            "sender_id": 8099,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "FP in Scala reading group (red book)",
            "submessages": [],
            "timestamp": 1492100803,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/d495685876a5a195b6ef5fb9a269b6d0dcd5c5fe?x=x&version=1",
            "client": "website",
            "content": "<p>Here now...</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 109567351,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "pnf@podsnap.com",
            "sender_full_name": "Peter Fraenkel (he) (S'13)",
            "sender_id": 2142,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "Curry is yummy",
            "submessages": [],
            "timestamp": 1492105796,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/d495685876a5a195b6ef5fb9a269b6d0dcd5c5fe?x=x&version=1",
            "client": "website",
            "content": "<p>Initial stab at this, <a href=\"https://github.com/pnf/scalameta-examples/tree/master/src/main/scala/curry\" target=\"_blank\" title=\"https://github.com/pnf/scalameta-examples/tree/master/src/main/scala/curry\">here</a>.</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 109567627,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "pnf@podsnap.com",
            "sender_full_name": "Peter Fraenkel (he) (S'13)",
            "sender_id": 2142,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "Curry is yummy",
            "submessages": [],
            "timestamp": 1492106206,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/0e5310d577f719e57009db6273218242?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"ormatt@outlook.com\" data-user-id=\"100918\">@Or Mattatia (SP2'17)</span>  you might be interested</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 109569734,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "xianny@gmail.com",
            "sender_full_name": "Xianny Ng (SP1'17)",
            "sender_id": 100527,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "FP in Scala reading group (red book)",
            "submessages": [],
            "timestamp": 1492109500,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/d495685876a5a195b6ef5fb9a269b6d0dcd5c5fe?x=x&version=1",
            "client": "website",
            "content": "<p>Updated on  <a href=\"https://github.com/pnf/scalameta-examples/tree/master/src/main/scala/curry\" target=\"_blank\" title=\"https://github.com/pnf/scalameta-examples/tree/master/src/main/scala/curry\">github</a>.  As <span class=\"user-mention\" data-user-email=\"cfactora93@gmail.com\" data-user-id=\"100519\">@Carl Joshua Factora (SP1'17)</span>  and I discovered, we can generate the fully curried <code>f(i)(j)(k)</code> but the partially curried <code>f(i,j)(k)</code>form is ambiguous under type erasure (though I can't figure out why).</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 109603345,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "+1",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "cfactora93@gmail.com",
                        "full_name": "Carl Joshua Factora (SP1'17)",
                        "id": 100519
                    },
                    "user_id": 100519
                }
            ],
            "recipient_id": 22644,
            "sender_email": "pnf@podsnap.com",
            "sender_full_name": "Peter Fraenkel (he) (S'13)",
            "sender_id": 2142,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "Curry is yummy",
            "submessages": [],
            "timestamp": 1492182826,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/36e38f07213a4459a526a3334d690aa09a75b04d?x=x&version=3",
            "client": "website",
            "content": "<p><a href=\"https://plus.google.com/hangouts/_/calendar/ZGNsYXUwNEBnbWFpbC5jb20.f8jj0gs4s7l9bkhk80b0vv4tn8?authuser=0\" target=\"_blank\" title=\"https://plus.google.com/hangouts/_/calendar/ZGNsYXUwNEBnbWFpbC5jb20.f8jj0gs4s7l9bkhk80b0vv4tn8?authuser=0\">https://plus.google.com/hangouts/_/calendar/ZGNsYXUwNEBnbWFpbC5jb20.f8jj0gs4s7l9bkhk80b0vv4tn8?authuser=0</a></p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 109609203,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "dclau04@gmail.com",
            "sender_full_name": "Daniel Lau (he) (SP2'17)",
            "sender_id": 100522,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "FP in Scala reading group (red book)",
            "submessages": [],
            "timestamp": 1492192563,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/21b9cce736cbbe8e0761bbb33863c7d3112d0136?x=x&version=2",
            "client": "website",
            "content": "<div class=\"codehilite\"><pre><span></span>  def foldRight2[A, B](l: List[A], start: B)(f: (A, B) =&gt; B): B = {\n    val startFn: B =&gt; B = identity\n    val reducer: (B =&gt; B, A) =&gt; B =&gt; B = (acc: B =&gt; B, a: A) =&gt; (b: B) =&gt; acc(f(a, b))\n    foldLeft(l, startFn)(reducer)(start)\n  }\n\n  def foldLeft2[A, B](l: List[A], start: B)(f: (B, A) =&gt; B): B = {\n    val startFn: B =&gt; B = identity\n    val reducer: (A, B =&gt; B) =&gt; B =&gt; B = (a: A, acc: B =&gt; B) =&gt; (b: B) =&gt; acc(f(b, a))\n    foldRight(l, startFn)(reducer)(start)\n  }\n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 109611538,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "michaelmalis2@gmail.com",
            "sender_full_name": "Michael Malis (SP2'19)",
            "sender_id": 8099,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "FoldLeft and FoldRight",
            "submessages": [],
            "timestamp": 1492196673,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/496fbbeedd9a0153d3c3810c9bc4ce2435428a8a?x=x&version=1",
            "client": "website",
            "content": "<p>rsvp maybe</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 109618581,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "markostam@gmail.com",
            "sender_full_name": "Marko Stamenovic (F2'16)",
            "sender_id": 100185,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "FP in Scala reading group (red book)",
            "submessages": [],
            "timestamp": 1492209125,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/496fbbeedd9a0153d3c3810c9bc4ce2435428a8a?x=x&version=1",
            "client": "website",
            "content": "<p>this sounds rad</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 109618582,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "markostam@gmail.com",
            "sender_full_name": "Marko Stamenovic (F2'16)",
            "sender_id": 100185,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "FP in Scala reading group (red book)",
            "submessages": [],
            "timestamp": 1492209127,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/f9168c90ac77e5592118339e9859e5f3?d=identicon&version=1",
            "client": "website",
            "content": "<p>I finished chapter 1 and 2 with exercises, I saw there are <strong>loads</strong> of exercises in chapter 3, I don't think I can make it till chapter 5 for Monday morning, but I am working for it :D</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 109655871,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f389",
                    "emoji_name": "tada",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "cfactora93@gmail.com",
                        "full_name": "Carl Joshua Factora (SP1'17)",
                        "id": 100519
                    },
                    "user_id": 100519
                }
            ],
            "recipient_id": 22644,
            "sender_email": "montecristoh@gmail.com",
            "sender_full_name": "Alberto Zaccagni (SP1'17)",
            "sender_id": 100509,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "FP in Scala reading group (red book)",
            "submessages": [],
            "timestamp": 1492301136,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/36e38f07213a4459a526a3334d690aa09a75b04d?x=x&version=3",
            "client": "website",
            "content": "<p>am catching up on laziness (or it's catching up on me)</p>\n<p>Am looking at chapter 5 <a href=\"https://github.com/danlaudk/fpinscalaRC/blob/master/answerkey/laziness/02.answer.scala\" target=\"_blank\" title=\"https://github.com/danlaudk/fpinscalaRC/blob/master/answerkey/laziness/02.answer.scala\">exercise 2</a>, and don't understand why we want  <code>h()</code> in <code>def take()</code> instead of just <code>h</code></p>\n<div class=\"codehilite\"><pre><span></span>def take(n: Int): Stream[A] = this match {\n  case Cons(h, t) if n &gt; 1 =&gt; cons(h(), t().take(n - 1))\n  case Cons(h, _) if n == 1 =&gt; cons(h(), empty)\n  case _ =&gt; empty\n}\n</pre></div>\n\n\n<p>Also, are the class definitions in the <em>pdf</em> possibly superceded by the definitions in the <em>github</em>? For example, I don't understand why after copypasting the <em>pdf's</em> definitions, putting in:</p>\n<div class=\"codehilite\"><pre><span></span>val x = Stream.cons(5, Stream.cons(6,Stream.empty())) //works\nprint x.uncons // doesn&#39;t compile\n// soln 02.answer above doesn&#39;t compile\n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 109682646,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "dclau04@gmail.com",
            "sender_full_name": "Daniel Lau (he) (SP2'17)",
            "sender_id": 100522,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "FP in Scala reading group (red book)",
            "submessages": [],
            "timestamp": 1492367965,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/36e38f07213a4459a526a3334d690aa09a75b04d?x=x&version=3",
            "client": "website",
            "content": "<p>rsvp set duration 1h<br>\nrsvp set time 13:00<br>\nrsvp set date Monday<br>\nrsvp set location Lovelace<br>\nsame hangout <a href=\"https://plus.google.com/hangouts/_/calendar/ZGNsYXUwNEBnbWFpbC5jb20.f8jj0gs4s7l9bkhk80b0vv4tn8?authuser=0\" target=\"_blank\" title=\"https://plus.google.com/hangouts/_/calendar/ZGNsYXUwNEBnbWFpbC5jb20.f8jj0gs4s7l9bkhk80b0vv4tn8?authuser=0\">link</a><br>\nrsvp set description <span class=\"user-mention\" data-user-email=\"montecristoh@gmail.com\" data-user-id=\"100509\">@Alberto Zaccagni (SP1'17)</span> on ch.2 thru x, <span class=\"user-mention\" data-user-email=\"daniel@danielespeset.com\" data-user-id=\"845\">@Daniel Espeset (W'13)</span> Lau (SP2'17) on ch.6,  <span class=\"user-mention\" data-user-email=\"xianny@gmail.com\" data-user-id=\"100527\">@Xianny Ng (SP1'17)</span> Ng (SP1'17) on ch.7</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 109686434,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "dclau04@gmail.com",
            "sender_full_name": "Daniel Lau (he) (SP2'17)",
            "sender_id": 100522,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "FP in Scala reading group (red book)",
            "submessages": [],
            "timestamp": 1492376974,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/21b9cce736cbbe8e0761bbb33863c7d3112d0136?x=x&version=2",
            "client": "website",
            "content": "<p>It's because <code>h</code> is a function. I believe Scala has some syntactic sugar around when you use <code>=&gt; T</code> as a parameter that allows you to avoid adding the parens in that one case.</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 109687936,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "michaelmalis2@gmail.com",
            "sender_full_name": "Michael Malis (SP2'19)",
            "sender_id": 8099,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "FP in Scala reading group (red book)",
            "submessages": [],
            "timestamp": 1492380586,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/21b9cce736cbbe8e0761bbb33863c7d3112d0136?x=x&version=2",
            "client": "website",
            "content": "<p>Hmm... I just realized my company has its quarterly all-hands meeting today at the same time as the book club so I won't be able to make it today.</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 109713566,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f615",
                    "emoji_name": "confused",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "cfactora93@gmail.com",
                        "full_name": "Carl Joshua Factora (SP1'17)",
                        "id": 100519
                    },
                    "user_id": 100519
                }
            ],
            "recipient_id": 22644,
            "sender_email": "michaelmalis2@gmail.com",
            "sender_full_name": "Michael Malis (SP2'19)",
            "sender_id": 8099,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "FP in Scala reading group (red book)",
            "submessages": [],
            "timestamp": 1492442942,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/57ee4628e40dfdc98e509d3cb7d823c7dfaf5eae?x=x&version=4",
            "client": "website",
            "content": "<p>Thanks <span class=\"user-mention\" data-user-email=\"heneli@kailahi.com\" data-user-id=\"100771\">@Heneli Ta'angafala Kailahi (SP2'17)</span> I've realized why my experience reading through chapters 7-9 wasn't the greatest experience I've had reading a book on functional programming. I'll fill you all in on Friday, but as a spoiler, go <a href=\"https://byorgey.wordpress.com/2009/01/12/abstraction-intuition-and-the-monad-tutorial-fallacy/\" target=\"_blank\" title=\"https://byorgey.wordpress.com/2009/01/12/abstraction-intuition-and-the-monad-tutorial-fallacy/\">here</a>.</p>\n<p>Cheers!</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 109766299,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "cfactora93@gmail.com",
            "sender_full_name": "Carl Joshua Factora (SP1'17)",
            "sender_id": 100519,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "FP in Scala reading group (red book)",
            "submessages": [],
            "timestamp": 1492543726,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/d495685876a5a195b6ef5fb9a269b6d0dcd5c5fe?x=x&version=1",
            "client": "website",
            "content": "<p>Ha!  I love that post.</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 109768033,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f642",
                    "emoji_name": "simple_smile",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "cfactora93@gmail.com",
                        "full_name": "Carl Joshua Factora (SP1'17)",
                        "id": 100519
                    },
                    "user_id": 100519
                }
            ],
            "recipient_id": 22644,
            "sender_email": "pnf@podsnap.com",
            "sender_full_name": "Peter Fraenkel (he) (S'13)",
            "sender_id": 2142,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "FP in Scala reading group (red book)",
            "submessages": [],
            "timestamp": 1492546152,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p>Heh, yeah. I have my own functor/applicative/monad spiel, but I try to keep it discrete :)</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 109770857,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "FP in Scala reading group (red book)",
            "submessages": [],
            "timestamp": 1492550415,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/36e38f07213a4459a526a3334d690aa09a75b04d?x=x&version=3",
            "client": "website",
            "content": "<p>rsvp set date Friday<br>\nrsvp set duration 1h<br>\nrsvp set time 13:00<br>\nrsvp set location Lovelace<br>\nrsvp add to calendar<br>\nsame hangout <a href=\"https://plus.google.com/hangouts/_/calendar/ZGNsYXUwNEBnbWFpbC5jb20.f8jj0gs4s7l9bkhk80b0vv4tn8?authuser=0\" target=\"_blank\" title=\"https://plus.google.com/hangouts/_/calendar/ZGNsYXUwNEBnbWFpbC5jb20.f8jj0gs4s7l9bkhk80b0vv4tn8?authuser=0\">link</a><br>\nrsvp set description <span class=\"user-mention\" data-user-email=\"xianny@gmail.com\" data-user-id=\"100527\">@Xianny Ng (SP1'17)</span> on Ch.7 <br>\n<span class=\"user-mention\" data-user-email=\"michaelmalis2@gmail.com\" data-user-id=\"8099\">@Michael Malis (S1'15)</span>  <span class=\"user-mention\" data-user-email=\"cfactora93@gmail.com\" data-user-id=\"100519\">@Carl Joshua Factora (SP1'17)</span>  on ch.8, <br>\n<span class=\"user-mention\" data-user-email=\"abylaw@gmail.com\" data-user-id=\"100830\">@Andrea Law (SP2'17)</span>   <span class=\"user-mention\" data-user-email=\"danlaudk@yahoo.dk\" data-user-id=\"100522\">@Daniel Lau (SP2'17)</span> on ch.9</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 109777161,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "dclau04@gmail.com",
            "sender_full_name": "Daniel Lau (he) (SP2'17)",
            "sender_id": 100522,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "FP in Scala reading group (red book)",
            "submessages": [],
            "timestamp": 1492562725,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/0ddf86bf31f43bb32425becd9876aed31ba9796d?x=x&version=1",
            "client": "ZulipPython",
            "content": "<p>Event <a href=\"https://www.google.com/calendar/event?eid=bzNtMmhvcXRyODNkdWltNDZnc2Y1MmV2amsgaGFja2Vyc2Nob29sLmNvbV9sM250ZTdmc2cybml0ZDZkdDVkdThmdnU0b0Bn\" target=\"_blank\" title=\"https://www.google.com/calendar/event?eid=bzNtMmhvcXRyODNkdWltNDZnc2Y1MmV2amsgaGFja2Vyc2Nob29sLmNvbV9sM250ZTdmc2cybml0ZDZkdDVkdThmdnU0b0Bn\">added to 455 Broadway Calendar</a>!</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 109777167,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "rsvp_bot-bot@students.hackerschool.com",
            "sender_full_name": "RSVPBot",
            "sender_id": 7960,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "FP in Scala reading group (red book)",
            "submessages": [],
            "timestamp": 1492562730,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/36e38f07213a4459a526a3334d690aa09a75b04d?x=x&version=3",
            "client": "website",
            "content": "<p>on Friday, at 12:30, tentatively, i'd like to do <em>remedial scala chapter 6, last three pages</em> .   I neglected to highlight things that might be instructive for 7,8,9 . Namely, i) for-comprehensions if ur not in the habit of using them. ii) what is this use of <code>_ &lt;-</code>   inside the for-comp . iii) a simple candy machine application before getting into the more involved versions of 7,8,9.  But if nobody is interested or can make it, we can just launch into ch.7 at 1pm</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 109826211,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "dclau04@gmail.com",
            "sender_full_name": "Daniel Lau (he) (SP2'17)",
            "sender_id": 100522,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "FP in Scala reading group (red book)",
            "submessages": [],
            "timestamp": 1492658708,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/57ee4628e40dfdc98e509d3cb7d823c7dfaf5eae?x=x&version=4",
            "client": "website",
            "content": "<p>This still happening? Seems like it's just me and Dan.</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 109890345,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "cfactora93@gmail.com",
            "sender_full_name": "Carl Joshua Factora (SP1'17)",
            "sender_id": 100519,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "FP in Scala reading group (red book)",
            "submessages": [],
            "timestamp": 1492792850,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/36e38f07213a4459a526a3334d690aa09a75b04d?x=x&version=3",
            "client": "website",
            "content": "<p>hangout <a href=\"https://plus.google.com/hangouts/_/calendar/ZGNsYXUwNEBnbWFpbC5jb20.f8jj0gs4s7l9bkhk80b0vv4tn8?authuser=0\" target=\"_blank\" title=\"https://plus.google.com/hangouts/_/calendar/ZGNsYXUwNEBnbWFpbC5jb20.f8jj0gs4s7l9bkhk80b0vv4tn8?authuser=0\">link</a> in case X and A are dialling in. Alberto is not in</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 109890545,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "dclau04@gmail.com",
            "sender_full_name": "Daniel Lau (he) (SP2'17)",
            "sender_id": 100522,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "FP in Scala reading group (red book)",
            "submessages": [],
            "timestamp": 1492793219,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/21b9cce736cbbe8e0761bbb33863c7d3112d0136?x=x&version=2",
            "client": "website",
            "content": "<p>I'll be there in a few.</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 109891180,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "michaelmalis2@gmail.com",
            "sender_full_name": "Michael Malis (SP2'19)",
            "sender_id": 8099,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "FP in Scala reading group (red book)",
            "submessages": [],
            "timestamp": 1492794284,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/21b9cce736cbbe8e0761bbb33863c7d3112d0136?x=x&version=2",
            "client": "website",
            "content": "<p>I'm here.</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 109891462,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "michaelmalis2@gmail.com",
            "sender_full_name": "Michael Malis (SP2'19)",
            "sender_id": 8099,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "FP in Scala reading group (red book)",
            "submessages": [],
            "timestamp": 1492794833,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/21b9cce736cbbe8e0761bbb33863c7d3112d0136?x=x&version=2",
            "client": "website",
            "content": "<p>I'm in the hangout.</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 109891506,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "michaelmalis2@gmail.com",
            "sender_full_name": "Michael Malis (SP2'19)",
            "sender_id": 8099,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "FP in Scala reading group (red book)",
            "submessages": [],
            "timestamp": 1492794847,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/36e38f07213a4459a526a3334d690aa09a75b04d?x=x&version=3",
            "client": "website",
            "content": "<p>rsvp set time 14:00<br>\nrsvp set location Lovelace<br>\nrsvp set date Monday<br>\nrsvp description just booking the room for reading group</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 110184239,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "dclau04@gmail.com",
            "sender_full_name": "Daniel Lau (he) (SP2'17)",
            "sender_id": 100522,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "FP in Scala reading group (red book)",
            "submessages": [],
            "timestamp": 1493411423,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/36e38f07213a4459a526a3334d690aa09a75b04d?x=x&version=3",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"montecristoh@gmail.com\" data-user-id=\"100509\">@Alberto Zaccagni (SP1'17)</span> <span class=\"user-mention\" data-user-email=\"abylaw@gmail.com\" data-user-id=\"100830\">@Andrea Law (SP2'17)</span> <span class=\"user-mention\" data-user-email=\"heneli@kailahi.com\" data-user-id=\"100771\">@Heneli Ta'angafala Kailahi (SP2'17)</span> <span class=\"user-mention\" data-user-email=\"xianny@gmail.com\" data-user-id=\"100527\">@Xianny Ng (SP1'17)</span>   monadic Carl is on at Monday 2.15pm Lovelace. (we postponed from Fri)</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 110261630,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "dclau04@gmail.com",
            "sender_full_name": "Daniel Lau (he) (SP2'17)",
            "sender_id": 100522,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "FP in Scala reading group (red book)",
            "submessages": [],
            "timestamp": 1493601538,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/36e38f07213a4459a526a3334d690aa09a75b04d?x=x&version=3",
            "client": "website",
            "content": "<p>For next Friday: in chapter 13 (IO Effects), the MEAP is substantially different from the final copy ( and maybe onwardsfrom 13). Ensure you're reading the real copy (ping me if u want it). I'll eventually print out a copy for the library</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 110261681,
            "is_me_message": false,
            "last_edit_timestamp": 1493601652,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "dclau04@gmail.com",
            "sender_full_name": "Daniel Lau (he) (SP2'17)",
            "sender_id": 100522,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "FP in Scala reading group (red book)",
            "submessages": [],
            "timestamp": 1493601622,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/ac25c0f0dbfaa3e0d68634873943e63bdd41139c?x=x&version=1",
            "client": "website",
            "content": "<blockquote>\n<p>monadic Carl is on at Monday 2.15pm Lovelace.</p>\n</blockquote>\n<p>Looking forward to it!  I will bring a burrito. ;-)</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 110282647,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "paul@paulwmorris.com",
            "sender_full_name": "Paul Morris (he) (SP1'17)",
            "sender_id": 100524,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "FP in Scala reading group (red book)",
            "submessages": [],
            "timestamp": 1493651402,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/57ee4628e40dfdc98e509d3cb7d823c7dfaf5eae?x=x&version=4",
            "client": "website",
            "content": "<p><img alt=\":+1:\" class=\"emoji\" src=\"/static/generated/emoji/images/emoji/unicode/1f44d.png\" title=\":+1:\"></p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 110282981,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "cfactora93@gmail.com",
            "sender_full_name": "Carl Joshua Factora (SP1'17)",
            "sender_id": 100519,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "FP in Scala reading group (red book)",
            "submessages": [],
            "timestamp": 1493651979,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/f9168c90ac77e5592118339e9859e5f3?d=identicon&version=1",
            "client": "website",
            "content": "<p>Hello Scala-devs (how are Scala devs called BTW? Scalars? Scalers? Ah, \"scala\" in italian means stair :D), anyway, I'm trying to come to the talk prepared, do you think this is accurate? <a href=\"http://adit.io/posts/2013-04-17-functors,_applicatives,_and_monads_in_pictures.html\" target=\"_blank\" title=\"http://adit.io/posts/2013-04-17-functors,_applicatives,_and_monads_in_pictures.html\">http://adit.io/posts/2013-04-17-functors,_applicatives,_and_monads_in_pictures.html</a></p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 110285253,
            "is_me_message": false,
            "last_edit_timestamp": 1493655884,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "montecristoh@gmail.com",
            "sender_full_name": "Alberto Zaccagni (SP1'17)",
            "sender_id": 100509,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "FP in Scala reading group (red book)",
            "submessages": [],
            "timestamp": 1493655867,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/57ee4628e40dfdc98e509d3cb7d823c7dfaf5eae?x=x&version=4",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"montecristoh@gmail.com\" data-user-id=\"100509\">@Alberto Zaccagni (SP1'17)</span> One of my favorite posts</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 110285856,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "cfactora93@gmail.com",
            "sender_full_name": "Carl Joshua Factora (SP1'17)",
            "sender_id": 100519,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "FP in Scala reading group (red book)",
            "submessages": [],
            "timestamp": 1493656985,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/0e5310d577f719e57009db6273218242?d=identicon&version=1",
            "client": "website",
            "content": "<p>I'll try to phone in because I miss you guys! but I will be completely unprepared</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 110286687,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "xianny@gmail.com",
            "sender_full_name": "Xianny Ng (SP1'17)",
            "sender_id": 100527,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "FP in Scala reading group (red book)",
            "submessages": [],
            "timestamp": 1493658512,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p>I think I'm in the minority, but I actually don't super like that post. I think there's a nicer/simpler way to understand Applicatives, and (assuming I'm remembering correctly) I don't think the post gives much insight into why some things are functors but not applicatives, or are applicatives but aren't quite monads, etc.</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 110287429,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "FP in Scala reading group (red book)",
            "submessages": [],
            "timestamp": 1493659772,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p>I'll try to give it another read-through though.</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 110287483,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "FP in Scala reading group (red book)",
            "submessages": [],
            "timestamp": 1493659813,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/f9168c90ac77e5592118339e9859e5f3?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"alan@hackerschool.com\" data-user-id=\"813\">@Alan O'Donnell</span> I would be interested in seeing a blog post that explores those areas you feel are missing, do you have anything to suggest?</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 110287643,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "montecristoh@gmail.com",
            "sender_full_name": "Alberto Zaccagni (SP1'17)",
            "sender_id": 100509,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "FP in Scala reading group (red book)",
            "submessages": [],
            "timestamp": 1493660081,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/6485c74622306264ff53449c6f0ca540?d=identicon&version=1",
            "client": "website",
            "content": "<p>I have one to suggest! <a href=\"http://blog.functorial.com/posts/2015-12-06-Counterexamples.html\" target=\"_blank\" title=\"http://blog.functorial.com/posts/2015-12-06-Counterexamples.html\">http://blog.functorial.com/posts/2015-12-06-Counterexamples.html</a></p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 110287656,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "+1",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "montecristoh@gmail.com",
                        "full_name": "Alberto Zaccagni (SP1'17)",
                        "id": 100509
                    },
                    "user_id": 100509
                }
            ],
            "recipient_id": 22644,
            "sender_email": "iain@mccoy.id.au",
            "sender_full_name": "Iain McCoy (he) (SP2'17)",
            "sender_id": 100806,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "FP in Scala reading group (red book)",
            "submessages": [],
            "timestamp": 1493660121,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p>Ah, yeah, that one does have good examples.</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 110287710,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "FP in Scala reading group (red book)",
            "submessages": [],
            "timestamp": 1493660222,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p>I've been meaning to write my own blog post on this for a while, haha :)</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 110287716,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "FP in Scala reading group (red book)",
            "submessages": [],
            "timestamp": 1493660235,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p>I should swing by sometime and talk out loud about my understanding, I feel like it's not quite tight enough yet for a blog post.</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 110287805,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "FP in Scala reading group (red book)",
            "submessages": [],
            "timestamp": 1493660401,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/f9168c90ac77e5592118339e9859e5f3?d=identicon&version=1",
            "client": "website",
            "content": "<p>I would like to hear more about the subject given that I'm just starting! SP1 will finish in 3 days though :D</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 110287880,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "montecristoh@gmail.com",
            "sender_full_name": "Alberto Zaccagni (SP1'17)",
            "sender_id": 100509,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "FP in Scala reading group (red book)",
            "submessages": [],
            "timestamp": 1493660507,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/36e38f07213a4459a526a3334d690aa09a75b04d?x=x&version=3",
            "client": "website",
            "content": "<p><a href=\"https://plus.google.com/hangouts/_/calendar/ZGNsYXUwNEBnbWFpbC5jb20.f8jj0gs4s7l9bkhk80b0vv4tn8?authuser=0\" target=\"_blank\" title=\"https://plus.google.com/hangouts/_/calendar/ZGNsYXUwNEBnbWFpbC5jb20.f8jj0gs4s7l9bkhk80b0vv4tn8?authuser=0\">https://plus.google.com/hangouts/_/calendar/ZGNsYXUwNEBnbWFpbC5jb20.f8jj0gs4s7l9bkhk80b0vv4tn8?authuser=0</a></p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 110289879,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "dclau04@gmail.com",
            "sender_full_name": "Daniel Lau (he) (SP2'17)",
            "sender_id": 100522,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "FP in Scala reading group (red book)",
            "submessages": [],
            "timestamp": 1493663311,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p>This is a talk about Purescript, but it's a nice example of cool things you can do with applicatives :) <a href=\"https://www.youtube.com/watch?v=iTSosG7vUyI\" target=\"_blank\" title=\"https://www.youtube.com/watch?v=iTSosG7vUyI\">https://www.youtube.com/watch?v=iTSosG7vUyI</a></p>\n<div class=\"youtube-video message_inline_image\"><a data-id=\"iTSosG7vUyI\" href=\"https://www.youtube.com/watch?v=iTSosG7vUyI\" target=\"_blank\" title=\"https://www.youtube.com/watch?v=iTSosG7vUyI\"><img src=\"https://i.ytimg.com/vi/iTSosG7vUyI/default.jpg\"></a></div>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 110421531,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f642",
                    "emoji_name": "simple_smile",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "dclau04@gmail.com",
                        "full_name": "Daniel Lau (he) (SP2'17)",
                        "id": 100522
                    },
                    "user_id": 100522
                }
            ],
            "recipient_id": 22644,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "FP in Scala reading group (red book)",
            "submessages": [],
            "timestamp": 1493925793,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p>I actually wrote a library for JS/flow that uses a similar idea: <a href=\"https://github.com/cqfd/orthoformal/\" target=\"_blank\" title=\"https://github.com/cqfd/orthoformal/\">https://github.com/cqfd/orthoformal/</a></p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 110421585,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "FP in Scala reading group (red book)",
            "submessages": [],
            "timestamp": 1493925872,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p>I'm gonna have to give <code>purescript-flare</code> a closer look.</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 110421588,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "FP in Scala reading group (red book)",
            "submessages": [],
            "timestamp": 1493925897,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/36e38f07213a4459a526a3334d690aa09a75b04d?x=x&version=3",
            "client": "website",
            "content": "<p>rsvp set time 15:00<br>\nrsvp set date today</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 110455336,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "dclau04@gmail.com",
            "sender_full_name": "Daniel Lau (he) (SP2'17)",
            "sender_id": 100522,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "FP in Scala reading group (red book)",
            "submessages": [],
            "timestamp": 1493997475,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/36e38f07213a4459a526a3334d690aa09a75b04d?x=x&version=3",
            "client": "website",
            "content": "<p>rsvp set location Lovelace</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 110455386,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "dclau04@gmail.com",
            "sender_full_name": "Daniel Lau (he) (SP2'17)",
            "sender_id": 100522,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "FP in Scala reading group (red book)",
            "submessages": [],
            "timestamp": 1493997518,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/36e38f07213a4459a526a3334d690aa09a75b04d?x=x&version=3",
            "client": "website",
            "content": "<p><a href=\"https://plus.google.com/hangouts/_/calendar/ZGNsYXUwNEBnbWFpbC5jb20.f8jj0gs4s7l9bkhk80b0vv4tn8?authuser=0\" target=\"_blank\" title=\"https://plus.google.com/hangouts/_/calendar/ZGNsYXUwNEBnbWFpbC5jb20.f8jj0gs4s7l9bkhk80b0vv4tn8?authuser=0\">hangout</a></p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 110459954,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "dclau04@gmail.com",
            "sender_full_name": "Daniel Lau (he) (SP2'17)",
            "sender_id": 100522,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "FP in Scala reading group (red book)",
            "submessages": [],
            "timestamp": 1494005350,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/57ee4628e40dfdc98e509d3cb7d823c7dfaf5eae?x=x&version=4",
            "client": "website",
            "content": "<p>i will attend via hangouts :P</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 110460022,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "cfactora93@gmail.com",
            "sender_full_name": "Carl Joshua Factora (SP1'17)",
            "sender_id": 100519,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "FP in Scala reading group (red book)",
            "submessages": [],
            "timestamp": 1494005436,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/21b9cce736cbbe8e0761bbb33863c7d3112d0136?x=x&version=2",
            "client": "website",
            "content": "<p>Are you going to join the hangout above?</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 110463598,
            "is_me_message": false,
            "last_edit_timestamp": 1494011870,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "michaelmalis2@gmail.com",
            "sender_full_name": "Michael Malis (SP2'19)",
            "sender_id": 8099,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "FP in Scala reading group (red book)",
            "submessages": [],
            "timestamp": 1494011854,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/21b9cce736cbbe8e0761bbb33863c7d3112d0136?x=x&version=2",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"cfactora93@gmail.com\" data-user-id=\"100519\">@Carl Joshua Factora (SP1'17)</span> ^</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 110463654,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "michaelmalis2@gmail.com",
            "sender_full_name": "Michael Malis (SP2'19)",
            "sender_id": 8099,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "FP in Scala reading group (red book)",
            "submessages": [],
            "timestamp": 1494011944,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/57ee4628e40dfdc98e509d3cb7d823c7dfaf5eae?x=x&version=4",
            "client": "website",
            "content": "<p>Well, I accidentally slept too long. I guess that's what happens when you don't go home at a reasonable time lmao</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 110467484,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "cfactora93@gmail.com",
            "sender_full_name": "Carl Joshua Factora (SP1'17)",
            "sender_id": 100519,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "FP in Scala reading group (red book)",
            "submessages": [],
            "timestamp": 1494019006,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/57ee4628e40dfdc98e509d3cb7d823c7dfaf5eae?x=x&version=4",
            "client": "website",
            "content": "<p>I'm sorry guys.</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 110467485,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "cfactora93@gmail.com",
            "sender_full_name": "Carl Joshua Factora (SP1'17)",
            "sender_id": 100519,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "FP in Scala reading group (red book)",
            "submessages": [],
            "timestamp": 1494019006,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/36e38f07213a4459a526a3334d690aa09a75b04d?x=x&version=3",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"michaelmalis2@gmail.com\" data-user-id=\"8099\">@Michael Malis (S1'15)</span> <a href=\"http://eed3si9n.com/herding-cats/Free-monads.html\" target=\"_blank\" title=\"http://eed3si9n.com/herding-cats/Free-monads.html\">http://eed3si9n.com/herding-cats/Free-monads.html</a> is one place that mentions 'monad transformers' as a somewhat alternative to freemonad-interpreter. Maybe  <span class=\"user-mention\" data-user-email=\"cfactora93@gmail.com\" data-user-id=\"100519\">@Carl Joshua Factora (SP1'17)</span> can explain the relation once he rises from his slumber <img alt=\":wink:\" class=\"emoji\" src=\"/static/generated/emoji/images/emoji/unicode/1f609.png\" title=\":wink:\"> <br>\n (Cats library, by the way, was recommended to me by several ppl at NE Scala conference as the library to start with, as opposed to the more mature but bloated scalaz library)</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 110469638,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "dclau04@gmail.com",
            "sender_full_name": "Daniel Lau (he) (SP2'17)",
            "sender_id": 100522,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "free monad, interpreters, transformers",
            "submessages": [],
            "timestamp": 1494023240,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/d495685876a5a195b6ef5fb9a269b6d0dcd5c5fe?x=x&version=1",
            "client": "website",
            "content": "<p>After my NGW presentation, I managed to create an alternative to <code>.collect</code> over partial functions that is as performant:</p>\n<div class=\"codehilite\"><pre><span></span> <span class=\"k\">object</span> <span class=\"nc\">Perhaps</span> <span class=\"o\">{</span>\n   <span class=\"k\">implicit</span> <span class=\"k\">class</span> <span class=\"nc\">PerhapsOps</span><span class=\"o\">[</span><span class=\"kt\">A</span>, <span class=\"kt\">I</span><span class=\"o\">[</span><span class=\"kt\">A</span><span class=\"o\">]</span> <span class=\"k\">&lt;:</span> <span class=\"kt\">Iterable</span><span class=\"o\">[</span><span class=\"kt\">A</span><span class=\"o\">]](</span><span class=\"k\">val</span> <span class=\"n\">repr</span><span class=\"k\">:</span> <span class=\"kt\">I</span><span class=\"o\">[</span><span class=\"kt\">A</span><span class=\"o\">])</span> <span class=\"k\">extends</span> <span class=\"nc\">AnyVal</span> <span class=\"o\">{</span>\n     <span class=\"nd\">@inline</span> <span class=\"k\">final</span> <span class=\"k\">def</span> <span class=\"n\">omap</span><span class=\"o\">[</span><span class=\"kt\">B</span><span class=\"o\">](</span><span class=\"n\">f</span><span class=\"k\">:</span> <span class=\"kt\">A</span> <span class=\"o\">=&gt;</span> <span class=\"nc\">Option</span><span class=\"o\">[</span><span class=\"kt\">B</span><span class=\"o\">])(</span><span class=\"k\">implicit</span> <span class=\"n\">bf</span><span class=\"k\">:</span> <span class=\"kt\">CanBuildFrom</span><span class=\"o\">[</span><span class=\"kt\">I</span><span class=\"o\">[</span><span class=\"kt\">A</span><span class=\"o\">]</span>, <span class=\"kt\">B</span>, <span class=\"kt\">I</span><span class=\"o\">[</span><span class=\"kt\">B</span><span class=\"o\">]])</span><span class=\"k\">:</span> <span class=\"kt\">I</span><span class=\"o\">[</span><span class=\"kt\">B</span><span class=\"o\">]</span> <span class=\"k\">=</span> <span class=\"o\">{</span>\n       <span class=\"k\">val</span> <span class=\"o\">(</span><span class=\"n\">b</span><span class=\"o\">,</span><span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"k\">=</span> <span class=\"o\">(</span><span class=\"n\">bf</span><span class=\"o\">(</span><span class=\"n\">repr</span><span class=\"o\">),</span> <span class=\"n\">repr</span><span class=\"o\">.</span><span class=\"n\">iterator</span><span class=\"o\">)</span>\n       <span class=\"k\">while</span> <span class=\"o\">(</span><span class=\"n\">i</span><span class=\"o\">.</span><span class=\"n\">hasNext</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n         <span class=\"k\">val</span> <span class=\"n\">o</span> <span class=\"k\">=</span> <span class=\"n\">f</span><span class=\"o\">(</span><span class=\"n\">i</span><span class=\"o\">.</span><span class=\"n\">next</span><span class=\"o\">)</span>\n         <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">o</span><span class=\"o\">.</span><span class=\"n\">isDefined</span><span class=\"o\">)</span>  <span class=\"n\">b</span> <span class=\"o\">+=</span> <span class=\"n\">o</span><span class=\"o\">.</span><span class=\"n\">get</span>\n       <span class=\"o\">}</span>\n       <span class=\"n\">b</span><span class=\"o\">.</span><span class=\"n\">result</span><span class=\"o\">()</span>\n     <span class=\"o\">}</span>\n   <span class=\"o\">}</span>\n <span class=\"o\">}</span>\n<span class=\"k\">import</span> <span class=\"nn\">Perhaps._</span>\n<span class=\"n\">inputs</span><span class=\"o\">.</span><span class=\"n\">omap</span> <span class=\"o\">{</span>\n    <span class=\"k\">case</span> <span class=\"mi\">1</span> <span class=\"k\">=&gt;</span> <span class=\"nc\">Some</span><span class=\"o\">(</span><span class=\"s\">&quot;hello&quot;</span><span class=\"o\">)</span>\n    <span class=\"k\">case</span> <span class=\"mi\">2</span> <span class=\"k\">=&gt;</span> <span class=\"nc\">Some</span><span class=\"o\">(</span><span class=\"s\">&quot;goodbye&quot;</span><span class=\"o\">)</span>\n    <span class=\"k\">case</span> <span class=\"k\">_</span> <span class=\"k\">=&gt;</span> <span class=\"nc\">None</span>\n  <span class=\"o\">}</span>\n</pre></div>\n\n\n<p>is equivalent to but slightly faster than</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">inputs</span><span class=\"o\">.</span><span class=\"n\">collect</span> <span class=\"o\">{</span>\n    <span class=\"k\">case</span> <span class=\"mi\">1</span> <span class=\"k\">=&gt;</span> <span class=\"s\">&quot;hello&quot;</span>\n    <span class=\"k\">case</span> <span class=\"mi\">2</span> <span class=\"k\">=&gt;</span> <span class=\"s\">&quot;goodbye&quot;</span>\n  <span class=\"o\">}</span>\n</pre></div>\n\n\n<p>and much faster than</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">inputs</span><span class=\"o\">.</span><span class=\"n\">flatMap</span> <span class=\"o\">{</span>\n    <span class=\"k\">case</span> <span class=\"mi\">1</span> <span class=\"k\">=&gt;</span> <span class=\"nc\">Some</span><span class=\"o\">(</span><span class=\"s\">&quot;hello&quot;</span><span class=\"o\">)</span>\n    <span class=\"k\">case</span> <span class=\"mi\">2</span> <span class=\"k\">=&gt;</span> <span class=\"nc\">Some</span><span class=\"o\">(</span><span class=\"s\">&quot;goodbye&quot;</span><span class=\"o\">)</span>\n      <span class=\"k\">case</span> <span class=\"k\">_</span> <span class=\"k\">=&gt;</span> <span class=\"nc\">None</span>\n  <span class=\"o\">}</span>\n</pre></div>\n\n\n<p>The <code>@inline</code> is not strictly necessary, since scala 2.12 will inline <code>omap</code> anyway.</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 110823906,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "pnf@podsnap.com",
            "sender_full_name": "Peter Fraenkel (he) (S'13)",
            "sender_id": 2142,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "partial function avoidance",
            "submessages": [],
            "timestamp": 1494799173,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/93d282d6055362015e3b084156917587f20b5f62?x=x&version=3",
            "client": "website",
            "content": "<p>I'm reading the book Learning Scala and there is an exercise that is very simple but i cannot make it work. It says: \"Another way to load external Scala code is to paste it into the REPL in\u201craw\u201dmode, where the code is compiled as if it were actually in a proper source file. To do this, type :paste -raw, hit Return, and then paste the contents of your greetings file. After exiting \u201cpaste\u201d mode you should see the greeting.</p>\n<p>What I'm doing:<br>\nscala&gt; :paste -raw<br>\nprintln(\"Hello world\")<br>\n&lt;ctrl + D&gt;</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 111246594,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "lizparody@gmail.com",
            "sender_full_name": "Liz Parody (S1'17)",
            "sender_id": 101115,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": ":paste -raw",
            "submessages": [],
            "timestamp": 1495641728,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/93d282d6055362015e3b084156917587f20b5f62?x=x&version=3",
            "client": "website",
            "content": "<p>But is not working... can somebody help me with the :past -raw command?</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 111246600,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "lizparody@gmail.com",
            "sender_full_name": "Liz Parody (S1'17)",
            "sender_id": 101115,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": ":paste -raw",
            "submessages": [],
            "timestamp": 1495641768,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/05737f7353d71ece81912e75bd95cf17?d=identicon&version=1",
            "client": "website",
            "content": "<p>I think it's <code>:paste</code></p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 111246700,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "+1",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "lizparody@gmail.com",
                        "full_name": "Liz Parody (S1'17)",
                        "id": 101115
                    },
                    "user_id": 101115
                }
            ],
            "recipient_id": 22644,
            "sender_email": "adrien.guillo@gmail.com",
            "sender_full_name": "Adrien Guillo (S1'17)",
            "sender_id": 6676,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": ":paste -raw",
            "submessages": [],
            "timestamp": 1495641926,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/48e493d515af67a1512d977689cd051b?d=identicon&version=1",
            "client": "website",
            "content": "<p>did you hit enter after pasting the code (and before ctrl-d)?</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 111247844,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "outofthemadness@gmail.com",
            "sender_full_name": "James A. Keene (he) (m2'18)",
            "sender_id": 887,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": ":paste -raw",
            "submessages": [],
            "timestamp": 1495643952,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/93d282d6055362015e3b084156917587f20b5f62?x=x&version=3",
            "client": "website",
            "content": "<p>Can anyone help me? I have this question in scala: Convert the number 128 to a Char, a String, a Double, and then back to an Int. Do you expect the original amount to be retained? Do you need any special con\u2010 version functions for this?</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 111488581,
            "is_me_message": false,
            "last_edit_timestamp": 1496175179,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "lizparody@gmail.com",
            "sender_full_name": "Liz Parody (S1'17)",
            "sender_id": 101115,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "Question",
            "submessages": [],
            "timestamp": 1496175164,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/93d282d6055362015e3b084156917587f20b5f62?x=x&version=3",
            "client": "website",
            "content": "<p>I did this</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 111488601,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "lizparody@gmail.com",
            "sender_full_name": "Liz Parody (S1'17)",
            "sender_id": 101115,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "Question",
            "submessages": [],
            "timestamp": 1496175206,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/93d282d6055362015e3b084156917587f20b5f62?x=x&version=3",
            "client": "website",
            "content": "<p>var x: Char = '128'</p>\n<p>and then I was trying to convert it into a String with toString... but it doesn't work <img alt=\":joy:\" class=\"emoji\" src=\"/static/generated/emoji/images/emoji/unicode/1f602.png\" title=\":joy:\"></p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 111488654,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "lizparody@gmail.com",
            "sender_full_name": "Liz Parody (S1'17)",
            "sender_id": 101115,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "Question",
            "submessages": [],
            "timestamp": 1496175290,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/93d282d6055362015e3b084156917587f20b5f62?x=x&version=3",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"dclau04@gmail.com\" data-user-id=\"100522\">@Daniel Lau (SP2'17)</span> or <span class=\"user-mention\" data-user-email=\"iain@mccoy.id.au\" data-user-id=\"100806\">@Iain McCoy (SP2'17)</span> Do you know? can you help me? <img alt=\":ok_woman:\" class=\"emoji\" src=\"/static/generated/emoji/images/emoji/unicode/1f646.png\" title=\":ok_woman:\"></p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 111488790,
            "is_me_message": false,
            "last_edit_timestamp": 1496175626,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "lizparody@gmail.com",
            "sender_full_name": "Liz Parody (S1'17)",
            "sender_id": 101115,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "Question",
            "submessages": [],
            "timestamp": 1496175528,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/05737f7353d71ece81912e75bd95cf17?d=identicon&version=1",
            "client": "website",
            "content": "<p>Conversions in Scala are performed using <code>toX</code> methods such as <code>toDouble</code>, <code>toChar</code>, <code>toInt</code>, etc...</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 111489143,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "adrien.guillo@gmail.com",
            "sender_full_name": "Adrien Guillo (S1'17)",
            "sender_id": 6676,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "Question",
            "submessages": [],
            "timestamp": 1496176178,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/05737f7353d71ece81912e75bd95cf17?d=identicon&version=1",
            "client": "website",
            "content": "<p><code>toString</code> is a bit tricky because all objects come with a default implementation, which most of the time doesn't do what you want</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 111489194,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "adrien.guillo@gmail.com",
            "sender_full_name": "Adrien Guillo (S1'17)",
            "sender_id": 6676,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "Question",
            "submessages": [],
            "timestamp": 1496176219,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/8a9b08b64c56bb538e7186683d09e33fc557226b?x=x&version=2",
            "client": "website",
            "content": "<p>Hey Liz, single quotes are used to denote \"literal symbol\" in Scala (if you're familiar with Ruby, it's equivalent to using : before an identifier)<br>\nYou probably want to cast from type to type, which you can do with <code>asInstanceOf[Type]</code><br>\nFor example, in your case you can do: <code>val asChar = 128.asInstanceOf[Char]</code></p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 111489411,
            "is_me_message": false,
            "last_edit_timestamp": 1496176643,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "hackerschool@sunahsuh.com",
            "sender_full_name": "Sunah Suh (she) (S'12)",
            "sender_id": 878,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "Question",
            "submessages": [],
            "timestamp": 1496176633,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/93d282d6055362015e3b084156917587f20b5f62?x=x&version=3",
            "client": "website",
            "content": "<p>Thanks <span class=\"user-mention\" data-user-email=\"hackerschool@sunahsuh.com\" data-user-id=\"878\">@Sunah Suh (S'12)</span> and <span class=\"user-mention\" data-user-email=\"adrien.guillo@gmail.com\" data-user-id=\"6676\">@Adrien Guillo (S1'17)</span></p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 111492428,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "lizparody@gmail.com",
            "sender_full_name": "Liz Parody (S1'17)",
            "sender_id": 101115,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "Question",
            "submessages": [],
            "timestamp": 1496181937,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/93d282d6055362015e3b084156917587f20b5f62?x=x&version=3",
            "client": "website",
            "content": "<p>and <span class=\"user-mention\" data-user-email=\"dclau04@gmail.com\" data-user-id=\"100522\">@Daniel Lau (SP2'17)</span></p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 111492430,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "lizparody@gmail.com",
            "sender_full_name": "Liz Parody (S1'17)",
            "sender_id": 101115,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "Question",
            "submessages": [],
            "timestamp": 1496181948,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/93d282d6055362015e3b084156917587f20b5f62?x=x&version=3",
            "client": "website",
            "content": "<p><img alt=\":tulip:\" class=\"emoji\" src=\"/static/generated/emoji/images/emoji/unicode/1f337.png\" title=\":tulip:\"></p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 111492479,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "lizparody@gmail.com",
            "sender_full_name": "Liz Parody (S1'17)",
            "sender_id": 101115,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "Question",
            "submessages": [],
            "timestamp": 1496181996,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/36e38f07213a4459a526a3334d690aa09a75b04d?x=x&version=3",
            "client": "website",
            "content": "<p>S1 2017 batch voted to have both a 'big data'/data engineering beginners club workshop. <span class=\"user-mention\" data-user-email=\"seth+recurse@schori.org\" data-user-id=\"100786\">@Seth Schori (SP2'17)</span>  <a href=\"https://recurse.zulipchat.com/#narrow/stream/455.20Broadway/topic/Beginners.20Club.20(4.2E0)\" target=\"_blank\" title=\"https://recurse.zulipchat.com/#narrow/stream/455.20Broadway/topic/Beginners.20Club.20(4.2E0)\">posted</a> looking for alums/speakers in nyc. Maybe someone on this stream feels qualified? (spark ;) dbs? more? )Hopper would be more than filled</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 111568352,
            "is_me_message": false,
            "last_edit_timestamp": 1496343909,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "dclau04@gmail.com",
            "sender_full_name": "Daniel Lau (he) (SP2'17)",
            "sender_id": 100522,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "beginners club 'big data'",
            "submessages": [],
            "timestamp": 1496343635,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/93d282d6055362015e3b084156917587f20b5f62?x=x&version=3",
            "client": "website",
            "content": "<p>I would loved to be an alumn! of this workshop :D</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 111568850,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "lizparody@gmail.com",
            "sender_full_name": "Liz Parody (S1'17)",
            "sender_id": 101115,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "beginners club 'big data'",
            "submessages": [],
            "timestamp": 1496344537,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/d495685876a5a195b6ef5fb9a269b6d0dcd5c5fe?x=x&version=1",
            "client": "website",
            "content": "<p>I am unappealingly proud of myself for discovering a bug:<br>\n<a href=\"https://github.com/scala/collection-strawman/issues/127\" target=\"_blank\" title=\"https://github.com/scala/collection-strawman/issues/127\">https://github.com/scala/collection-strawman/issues/127</a></p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 112539451,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "pnf@podsnap.com",
            "sender_full_name": "Peter Fraenkel (he) (S'13)",
            "sender_id": 2142,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "laziness in the collections rewrite",
            "submessages": [],
            "timestamp": 1498328568,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/a4e1f602882ac013a0e19b85c17366e4256f3fe3?x=x&version=2",
            "client": "ZulipMobile",
            "content": "<p>Anyone going to NE Scala conf in boston this weekend?</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 123669641,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "bonnie.eisenman@gmail.com",
            "sender_full_name": "Bonnie Eisenman (she) (m5'20)",
            "sender_id": 105050,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "NE Scala",
            "submessages": [],
            "timestamp": 1520971096,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/a4e1f602882ac013a0e19b85c17366e4256f3fe3?x=x&version=2",
            "client": "website",
            "content": "<p>Doe anyone know why am I able to have a class extend...nothing? e.g. <code>Foo extends { ... }</code>?</p>\n<p>Example here: <a href=\"https://scalafiddle.io/sf/fEg27qj/1\" target=\"_blank\" title=\"https://scalafiddle.io/sf/fEg27qj/1\">https://scalafiddle.io/sf/fEg27qj/1</a><br>\nI know this is a silly thing to do, but I found it in some real code and I'm curious about why it doesn't generate a compiler error.<br>\nAlso, I took a peek at the java code using scalap - points to anyone who can guess what <code>class Foo</code> ends up extending. ;)</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 124903814,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "bonnie.eisenman@gmail.com",
            "sender_full_name": "Bonnie Eisenman (she) (m5'20)",
            "sender_id": 105050,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "extending nothing",
            "submessages": [],
            "timestamp": 1523395188,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p>Hmm, I checked the Scala language reference, and there are only two \"extends {\" I can find. (<a href=\"http://www.scala-lang.org/docu/files/ScalaReference.pdf\" target=\"_blank\" title=\"http://www.scala-lang.org/docu/files/ScalaReference.pdf\">http://www.scala-lang.org/docu/files/ScalaReference.pdf</a>). I guess it's extending an anonymous class?</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 124907608,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "extending nothing",
            "submessages": [],
            "timestamp": 1523401366,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p>I also tried doing e.g.</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"o\">&gt;</span> <span class=\"nc\">Foo</span><span class=\"o\">(</span><span class=\"s\">&quot;hmm&quot;</span><span class=\"o\">).</span><span class=\"n\">getClass</span><span class=\"o\">.</span><span class=\"n\">getSuperclass</span>\n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 124907620,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "extending nothing",
            "submessages": [],
            "timestamp": 1523401414,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p>I'm not really sure what the output means\u2014it's been longer than I thought since I've looked at much Scala :/</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 124907670,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "extending nothing",
            "submessages": [],
            "timestamp": 1523401485,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/a4e1f602882ac013a0e19b85c17366e4256f3fe3?x=x&version=2",
            "client": "website",
            "content": "<p>It actually ends up extending <code>AnyRef</code>. Which....OK. But why is that allowed?? I think the syntax pretty clearly indicates an error.</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 124909338,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "bonnie.eisenman@gmail.com",
            "sender_full_name": "Bonnie Eisenman (she) (m5'20)",
            "sender_id": 105050,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "extending nothing",
            "submessages": [],
            "timestamp": 1523404537,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/a4e1f602882ac013a0e19b85c17366e4256f3fe3?x=x&version=2",
            "client": "website",
            "content": "<p>Oh, ugh, example 5.18 shows an example. That just seems...terrible.</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 124909396,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "bonnie.eisenman@gmail.com",
            "sender_full_name": "Bonnie Eisenman (she) (m5'20)",
            "sender_id": 105050,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "extending nothing",
            "submessages": [],
            "timestamp": 1523404627,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/a4e1f602882ac013a0e19b85c17366e4256f3fe3?x=x&version=2",
            "client": "website",
            "content": "<p>Example 5.1.8<br>\nEarly definitions are particularly useful for traits, which do not have normal constructor parameters. Example:</p>\n<div class=\"codehilite\"><pre><span></span>trait Greeting {\nval name: String\nval msg = &quot;How are you, &quot;+name\n}\n\nclass C extends {\nval name = &quot;Bob&quot;\n} with Greeting {\nprintln(msg)\n}\n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 124909405,
            "is_me_message": false,
            "last_edit_timestamp": 1523404701,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "bonnie.eisenman@gmail.com",
            "sender_full_name": "Bonnie Eisenman (she) (m5'20)",
            "sender_id": 105050,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "extending nothing",
            "submessages": [],
            "timestamp": 1523404673,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/a4e1f602882ac013a0e19b85c17366e4256f3fe3?x=x&version=2",
            "client": "website",
            "content": "<p>....relatedly, I was trying to search the spec, since that PDF is for 2.9. Looks like the best way is to just grep through the repo? <a href=\"https://github.com/scala/scala/tree/2.12.x/spec\" target=\"_blank\" title=\"https://github.com/scala/scala/tree/2.12.x/spec\">https://github.com/scala/scala/tree/2.12.x/spec</a></p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 124909522,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "bonnie.eisenman@gmail.com",
            "sender_full_name": "Bonnie Eisenman (she) (m5'20)",
            "sender_id": 105050,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "extending nothing",
            "submessages": [],
            "timestamp": 1523404842,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p>Yeah, definitely a tough question to google :) \"scala extends nothing\" \"scala extends no class\" wersdfasdf</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 124916268,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "extending nothing",
            "submessages": [],
            "timestamp": 1523419498,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/a4e1f602882ac013a0e19b85c17366e4256f3fe3?x=x&version=2",
            "client": "website",
            "content": "<p>Reading the spec, it sounds like this is \"expected behavior\". I guess early definitions are a hackaround for messy trait inheritance?</p>\n<p>I'm probably going to blogpost this and then have people on twitter correct me. xD</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 124916672,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "bonnie.eisenman@gmail.com",
            "sender_full_name": "Bonnie Eisenman (she) (m5'20)",
            "sender_id": 105050,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "extending nothing",
            "submessages": [],
            "timestamp": 1523420382,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/570b5294859a4650f5c6c4f866b6fba3e34af02b?x=x&version=2",
            "client": "website",
            "content": "<p>Woah. This is the strangest bit of scala I think I've ever seen!  How did you discover that it extends <code>AnyRef</code>? All I can coax out of it is <code>java.lang.Object</code>.</p>\n<p>I also couldn't get it to compile without the trait.</p>\n<div class=\"codehilite\"><pre><span></span>scala&gt; class Foo extends { val bar=&quot;asdf&quot; } { val baz = &quot;qwer&quot; }\n&lt;console&gt;:1: error: &#39;;&#39; expected but &#39;{&#39; found.\nclass Foo extends { val bar=&quot;asdf&quot; } { val baz = &quot;qwer&quot; }\n</pre></div>\n\n\n<p>but it works if there is a trait in there</p>\n<div class=\"codehilite\"><pre><span></span>scala&gt; trait T { val a = &quot;x&quot; }\ndefined trait T\n\nscala&gt; class Foo extends { val bar=&quot;asdf&quot; } with T { val baz = &quot;qwer&quot; }\ndefined class Foo\n\nscala&gt; new Foo().baz\nres10: String = qwer\n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 124934819,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "tobinyehle@gmail.com",
            "sender_full_name": "Tobin Yehle (he) (SP1'20)",
            "sender_id": 105607,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "extending nothing",
            "submessages": [],
            "timestamp": 1523458207,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/570b5294859a4650f5c6c4f866b6fba3e34af02b?x=x&version=2",
            "client": "website",
            "content": "<p>I'm also a bit confused about when this would really be useful. The <code>Greeting</code> example works if you define <code>msg</code> using <code>def</code> or <code>lazy val</code>. Maybe this isn't always possible, but I can't think of an example that wouldn't work.</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 124934837,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "tobinyehle@gmail.com",
            "sender_full_name": "Tobin Yehle (he) (SP1'20)",
            "sender_id": 105607,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "extending nothing",
            "submessages": [],
            "timestamp": 1523458250,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/a4e1f602882ac013a0e19b85c17366e4256f3fe3?x=x&version=2",
            "client": "website",
            "content": "<p>I've seen some pretty gnarly trait inheritance and I'm guessing that early definitions let you get around circular trait dependencies. Which feels like a pretty major code smell....</p>\n<p>Here's my actual code sample. I was reading the <code>scalap</code> output wrong! It actually extends <code>scala.runtime.AbstractFunction1[scala.Predef.String, Hello.Foo]</code>.</p>\n<p><a href=\"https://gist.github.com/bonniee/b5ba9096c8c6a63b3f2e1c3b104bd6f9\" target=\"_blank\" title=\"https://gist.github.com/bonniee/b5ba9096c8c6a63b3f2e1c3b104bd6f9\">https://gist.github.com/bonniee/b5ba9096c8c6a63b3f2e1c3b104bd6f9</a></p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 124943580,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "bonnie.eisenman@gmail.com",
            "sender_full_name": "Bonnie Eisenman (she) (m5'20)",
            "sender_id": 105050,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "extending nothing",
            "submessages": [],
            "timestamp": 1523470874,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/a4e1f602882ac013a0e19b85c17366e4256f3fe3?x=x&version=2",
            "client": "website",
            "content": "<p>Once I figure this out I'm adding it to <a href=\"http://twitter.com/validscala\" target=\"_blank\" title=\"http://twitter.com/validscala\">twitter.com/validscala</a></p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 124943630,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "bonnie.eisenman@gmail.com",
            "sender_full_name": "Bonnie Eisenman (she) (m5'20)",
            "sender_id": 105050,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "extending nothing",
            "submessages": [],
            "timestamp": 1523470934,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/a4e1f602882ac013a0e19b85c17366e4256f3fe3?x=x&version=2",
            "client": "website",
            "content": "<p>ALSO if you hate trait inheritance, like me, here's another awful brainteaser that I actually encountered in the wild. <a href=\"https://gist.github.com/bonniee/dafcbc319dac5de7cf8925b870dd24f5\" target=\"_blank\" title=\"https://gist.github.com/bonniee/dafcbc319dac5de7cf8925b870dd24f5\">https://gist.github.com/bonniee/dafcbc319dac5de7cf8925b870dd24f5</a></p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 124943640,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "bonnie.eisenman@gmail.com",
            "sender_full_name": "Bonnie Eisenman (she) (m5'20)",
            "sender_id": 105050,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "extending nothing",
            "submessages": [],
            "timestamp": 1523470956,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/d495685876a5a195b6ef5fb9a269b6d0dcd5c5fe?x=x&version=1",
            "client": "website",
            "content": "<p>I think this is for structural (duck) typing, e.g.</p>\n<div class=\"codehilite\"><pre><span></span>   def bleh(f: { def bar: String }) = &quot;hello &quot; + f.bar\n</pre></div>\n\n\n<p>The <code>{def bar: String}</code> type is well defined within the Scala compiler but as you showed has no corresponding interface in java-land, so <code>f.bar</code> gets called at runtime by reflection.</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 124948930,
            "is_me_message": false,
            "last_edit_timestamp": 1523478384,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "pnf@podsnap.com",
            "sender_full_name": "Peter Fraenkel (he) (S'13)",
            "sender_id": 2142,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "extending nothing",
            "submessages": [],
            "timestamp": 1523478361,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/a4e1f602882ac013a0e19b85c17366e4256f3fe3?x=x&version=2",
            "client": "website",
            "content": "<p>Hmm. <span class=\"user-mention\" data-user-id=\"2142\">@Peter Fraenkel (S'13)</span> how would that fit with the usage of <code>extends</code>?  I'm not sure how structural typing applies to my example.</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 124949464,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "bonnie.eisenman@gmail.com",
            "sender_full_name": "Bonnie Eisenman (she) (m5'20)",
            "sender_id": 105050,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "extending nothing",
            "submessages": [],
            "timestamp": 1523479101,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/a4e1f602882ac013a0e19b85c17366e4256f3fe3?x=x&version=2",
            "client": "website",
            "content": "<p>Ohh interesting. So something like:</p>\n<div class=\"codehilite\"><pre><span></span>case class Foo(bar: String) extends {\n  val hello: String = &quot;saluton,&quot;\n}\n\ndef greeting(foo: {def hello: String } ) = foo.hello + &quot; Bonnie&quot;\n\nprintln(greeting(Foo(&quot;bar&quot;))) // &quot;Saluton, Bonnie&quot;\n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 124949586,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "bonnie.eisenman@gmail.com",
            "sender_full_name": "Bonnie Eisenman (she) (m5'20)",
            "sender_id": 105050,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "extending nothing",
            "submessages": [],
            "timestamp": 1523479298,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/d495685876a5a195b6ef5fb9a269b6d0dcd5c5fe?x=x&version=1",
            "client": "website",
            "content": "<p>I don't think it's actually useful, as <code>class A extends { def x = \"hi\" }</code> and <code>class A { def x = \"hi\"}</code> seem to compile identically.</p>\n<div class=\"codehilite\"><pre><span></span>\u279c  dev cat Foo.scala\nclass A extends { def bar = &quot;hi&quot; }\nclass B { def bar = &quot;hi&quot; }\n\u279c  dev ~/dist/scala-2.12.5/bin/scalac Foo.scala\n\u279c  dev javap A\nCompiled from &quot;Foo.scala&quot;\npublic class A {\n  public java.lang.String bar();\n  public A();\n}\n\u279c  dev javap B\nCompiled from &quot;Foo.scala&quot;\npublic class B {\n  public java.lang.String bar();\n  public B();\n}\n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 124950648,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "pnf@podsnap.com",
            "sender_full_name": "Peter Fraenkel (he) (S'13)",
            "sender_id": 2142,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "extending nothing",
            "submessages": [],
            "timestamp": 1523480778,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/d495685876a5a195b6ef5fb9a269b6d0dcd5c5fe?x=x&version=1",
            "client": "website",
            "content": "<p>(erroneous comment removed)</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 124950847,
            "is_me_message": false,
            "last_edit_timestamp": 1523481091,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "pnf@podsnap.com",
            "sender_full_name": "Peter Fraenkel (he) (S'13)",
            "sender_id": 2142,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "extending nothing",
            "submessages": [],
            "timestamp": 1523481036,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/d495685876a5a195b6ef5fb9a269b6d0dcd5c5fe?x=x&version=1",
            "client": "website",
            "content": "<p>In fact, they seem to get converted to the more normal form during parsing:</p>\n<div class=\"codehilite\"><pre><span></span>\u279c  dev scala -Xprint:parser  -e &#39;class A extends { def x = 1 }&#39;\n[[syntax trees at end of                    parser]] // scalacmd5412871133657338\n191.scala\npackage &lt;empty&gt; {\n  class A extends scala.AnyRef {\n    def &lt;init&gt;() = {\n      super.&lt;init&gt;();\n      ()\n    };\n    def x = 1\n  }\n}\n\u279c  dev scala -Xprint:parser  -e &#39;class B { def x = 1 }&#39;\n[[syntax trees at end of                    parser]] // scalacmd8936412637628867361.scala\npackage &lt;empty&gt; {\n  class B extends scala.AnyRef {\n    def &lt;init&gt;() = {\n      super.&lt;init&gt;();\n      ()\n    };\n    def x = 1\n  }\n}\n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 124951037,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "pnf@podsnap.com",
            "sender_full_name": "Peter Fraenkel (he) (S'13)",
            "sender_id": 2142,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "extending nothing",
            "submessages": [],
            "timestamp": 1523481287,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/a4e1f602882ac013a0e19b85c17366e4256f3fe3?x=x&version=2",
            "client": "website",
            "content": "<p>Hmmmm. OK, interesting.</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 124959329,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "bonnie.eisenman@gmail.com",
            "sender_full_name": "Bonnie Eisenman (she) (m5'20)",
            "sender_id": 105050,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "extending nothing",
            "submessages": [],
            "timestamp": 1523494265,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p>This paper <a href=\"https://arxiv.org/pdf/1803.10228.pdf\" target=\"_blank\" title=\"https://arxiv.org/pdf/1803.10228.pdf\">https://arxiv.org/pdf/1803.10228.pdf</a> on using delimited continuations to do very succinct reverse-mode autodifferentiation got me playing around with them again. They're pretty fun and mind-bending if you haven't used them before :) Scala has a compiler plugin for them: <a href=\"https://github.com/scala/scala-continuations\" target=\"_blank\" title=\"https://github.com/scala/scala-continuations\">https://github.com/scala/scala-continuations</a></p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 128166864,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "delimited continuations",
            "submessages": [],
            "timestamp": 1529150582,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/d495685876a5a195b6ef5fb9a269b6d0dcd5c5fe?x=x&version=1",
            "client": "website",
            "content": "<p>This is an exciting paper on the particular effectiveness of graal on optimizing scala collections:<br>\n<a href=\"http://aleksandar-prokopec.com/resources/docs/graal-collections.pdf\" target=\"_blank\" title=\"http://aleksandar-prokopec.com/resources/docs/graal-collections.pdf\">http://aleksandar-prokopec.com/resources/docs/graal-collections.pdf</a><br>\nI'd seen a few talks on scala+graal, but they all treated the graal JIT as a wonderful new black box, with very little discussion of why it was more or less effective in different applications.   I think it's a huge deal to be able to write idiomatic scala (i.e. with combinators) without a performance penalty.</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 130169103,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "pnf@podsnap.com",
            "sender_full_name": "Peter Fraenkel (he) (S'13)",
            "sender_id": 2142,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "Unreasonable effectiveness of graal on scalas collections",
            "submessages": [],
            "timestamp": 1532374439,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/a4e1f602882ac013a0e19b85c17366e4256f3fe3?x=x&version=2",
            "client": "website",
            "content": "<p>Graal has made a huuuge difference for my team (~10% increase in throughput), so that's neat to see.</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 130175046,
            "is_me_message": false,
            "last_edit_timestamp": 1532381220,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "bonnie.eisenman@gmail.com",
            "sender_full_name": "Bonnie Eisenman (she) (m5'20)",
            "sender_id": 105050,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "Unreasonable effectiveness of graal on scalas collections",
            "submessages": [],
            "timestamp": 1532381157,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/d495685876a5a195b6ef5fb9a269b6d0dcd5c5fe?x=x&version=1",
            "client": "website",
            "content": "<p>It's nice to finally see some explanation of why graal benefits some code more than others.  I was getting frustrated having to think of it as some kind of magic.</p>\n<p>In Chris Thalinger's interesting but frustrating NYC Scaladays talk, he suggested that Java code tended not to benefit as much because of unconscious mutual optimization of C2 and user code over the decades.  I asked if he had a theory for why the reported improvement for scalac itself was so much greater than what he reported for twitter code, and his explanation was basically that scalac code sucked, which I found unhelpful.</p>\n<p>On interesting bit is that he let slip - in violation of Oracle's ridiculous contract - that the enterprise edition increased performance about twice as much.</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 130280308,
            "is_me_message": false,
            "last_edit_timestamp": 1532530858,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "pnf@podsnap.com",
            "sender_full_name": "Peter Fraenkel (he) (S'13)",
            "sender_id": 2142,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "Unreasonable effectiveness of graal on scalas collections",
            "submessages": [],
            "timestamp": 1532530832,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/f6bd929465d6d225def8062d5a9d3f3f?d=identicon&version=1",
            "client": "website",
            "content": "<p>Is there a (non-style focused) static analysis tool people would recommend for scala? Ideally, I'm looking for something like coverity, but for scala. Relatively low false positive rate, and some easy way to filter for \"serious\" bugs.</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 132310009,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "danluu@gmail.com",
            "sender_full_name": "Dan Luu (W'13)",
            "sender_id": 820,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "static analysis",
            "submessages": [],
            "timestamp": 1534520494,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/d495685876a5a195b6ef5fb9a269b6d0dcd5c5fe?x=x&version=1",
            "client": "ZulipMobile",
            "content": "<p>I'm not sure why, but I made a macro that sort of does what Simon Marlow's Haskell applicative-do does, but in Scala. Sort of. Mostly,  I came away from the experience very frustrated with Cats.  <br>\n<a href=\"http://blog.podsnap.com/apply.html\" target=\"_blank\" title=\"http://blog.podsnap.com/apply.html\">http://blog.podsnap.com/apply.html</a></p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 136079995,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "pnf@podsnap.com",
            "sender_full_name": "Peter Fraenkel (he) (S'13)",
            "sender_id": 2142,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "Applicative-aware for-notation",
            "submessages": [],
            "timestamp": 1539907263,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/36e38f07213a4459a526a3334d690aa09a75b04d?x=x&version=3",
            "client": "website",
            "content": "<p>I'm up for a job interview, am rusty in pairing, and would love to do a 30min pairing exercise around Twitter's Offer Broker  <a href=\"http://twitter.github.io/effectivescala/#Twitter's%20standard%20libraries-Offer/Broker\" target=\"_blank\" title=\"http://twitter.github.io/effectivescala/#Twitter's%20standard%20libraries-Offer/Broker\">link</a> (no prior knowledge of this or really anything required, but knowledge of actor, message or concurrency systems would be incidentally awesome). If this sounds fun to you, and u could do it on Wed or Thur afternoon anytime, pls ping me? (new york time afternoon. dublin times: 4-9pm) <span class=\"user-mention\" data-user-id=\"9326\">@J\u00e9r\u00e9mie Jost (S1'16)</span> <span class=\"user-mention\" data-user-id=\"105607\">@Tobin Yehle (m1'18)</span> <span class=\"user-mention\" data-user-id=\"129931\">@Ratan Rai Sur (F2'18)</span></p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 136801638,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "dclau04@gmail.com",
            "sender_full_name": "Daniel Lau (he) (SP2'17)",
            "sender_id": 100522,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "pairing sometime next two days",
            "submessages": [],
            "timestamp": 1540928600,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/63b77375e584014392d0b8ae86b020d1?d=identicon&version=1",
            "client": "website",
            "content": "<p>I could help tomorrow!</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 136801723,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f603",
                    "emoji_name": "smiley",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "dclau04@gmail.com",
                        "full_name": "Daniel Lau (he) (SP2'17)",
                        "id": 100522
                    },
                    "user_id": 100522
                }
            ],
            "recipient_id": 22644,
            "sender_email": "ratan.r.sur@gmail.com",
            "sender_full_name": "Ratan (Rai) Sur (he) (SP1'19)",
            "sender_id": 129931,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "pairing sometime next two days",
            "submessages": [],
            "timestamp": 1540928655,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/63b77375e584014392d0b8ae86b020d1?d=identicon&version=1",
            "client": "ZulipMobile",
            "content": "<p>I'm using Akka in my current project so I'm familiar with the actor system</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 136802323,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "ratan.r.sur@gmail.com",
            "sender_full_name": "Ratan (Rai) Sur (he) (SP1'19)",
            "sender_id": 129931,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "pairing sometime next two days",
            "submessages": [],
            "timestamp": 1540929280,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/570b5294859a4650f5c6c4f866b6fba3e34af02b?x=x&version=2",
            "client": "ZulipMobile",
            "content": "<p>I could pair tomorrow or Thursday, and I have also been using akka lately! <span class=\"emoji emoji-1f63a\" title=\"smiley cat\">:smiley_cat:</span></p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 136814102,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "tobinyehle@gmail.com",
            "sender_full_name": "Tobin Yehle (he) (SP1'20)",
            "sender_id": 105607,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "pairing sometime next two days",
            "submessages": [],
            "timestamp": 1540941271,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/36e38f07213a4459a526a3334d690aa09a75b04d?x=x&version=3",
            "client": "ZulipAndroid",
            "content": "<p>Ratan, pm'd u yesterday</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 136841522,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "dclau04@gmail.com",
            "sender_full_name": "Daniel Lau (he) (SP2'17)",
            "sender_id": 100522,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "pairing sometime next two days",
            "submessages": [],
            "timestamp": 1540984888,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/a4e1f602882ac013a0e19b85c17366e4256f3fe3?x=x&version=2",
            "client": "website",
            "content": "<p>Pop quiz: what should this print, and why?</p>\n<p><a href=\"https://scalafiddle.io/sf/zA6NCkF/0\" target=\"_blank\" title=\"https://scalafiddle.io/sf/zA6NCkF/0\">https://scalafiddle.io/sf/zA6NCkF/0</a></p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 157365851,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f926",
                    "emoji_name": "face_palm",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "mauricio@collares.org",
                        "full_name": "Mauricio Collares (he) (W2'19)",
                        "id": 158563
                    },
                    "user_id": 158563
                }
            ],
            "recipient_id": 22644,
            "sender_email": "bonnie.eisenman@gmail.com",
            "sender_full_name": "Bonnie Eisenman (she) (m5'20)",
            "sender_id": 105050,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "tiny puzzle",
            "submessages": [],
            "timestamp": 1549039203,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p>Lol <span aria-label=\"face palm\" class=\"emoji emoji-1f926\" role=\"img\" title=\"face palm\">:face_palm:</span></p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 157366348,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "tiny puzzle",
            "submessages": [],
            "timestamp": 1549039624,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/a4e1f602882ac013a0e19b85c17366e4256f3fe3?x=x&version=2",
            "client": "website",
            "content": "<p>Naturally this is related to a real bug that my team encountered in prod <span aria-label=\"joy cat\" class=\"emoji emoji-1f639\" role=\"img\" title=\"joy cat\">:joy_cat:</span></p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 157366380,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "bonnie.eisenman@gmail.com",
            "sender_full_name": "Bonnie Eisenman (she) (m5'20)",
            "sender_id": 105050,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "tiny puzzle",
            "submessages": [],
            "timestamp": 1549039657,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/1c860d00a4cedc01147fbb2e0533c37b?d=identicon&version=1",
            "client": "website",
            "content": "<div class=\"codehilite\"><pre><span></span>val predicate = true\n\nval result = (if (predicate) {\n  1\n} else {\n  2\n}) + 10\n</pre></div>\n\n\n<p>is 11... so parenthesis for the win? I this because the parenthesis causes the conditional to be evaluated before the addition operator?</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 157367642,
            "is_me_message": false,
            "last_edit_timestamp": 1549040889,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "corydominguez@gmail.com",
            "sender_full_name": "Cory Michael Dominguez (he) (SP1'15)",
            "sender_id": 7625,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "tiny puzzle",
            "submessages": [],
            "timestamp": 1549040795,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/21b9cce736cbbe8e0761bbb33863c7d3112d0136?x=x&version=2",
            "client": "website",
            "content": "<p>I think it's being parsed as:</p>\n<div class=\"codehilite\"><pre><span></span>if (predicate) &lt;expression1&gt; else &lt;expression2&gt;\n</pre></div>\n\n\n<p>Where <code>expression2</code> is</p>\n<div class=\"codehilite\"><pre><span></span>{ 2 } + 10\n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 157369197,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "michaelmalis2@gmail.com",
            "sender_full_name": "Michael Malis (SP2'19)",
            "sender_id": 8099,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "tiny puzzle",
            "submessages": [],
            "timestamp": 1549042063,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/a4e1f602882ac013a0e19b85c17366e4256f3fe3?x=x&version=2",
            "client": "website",
            "content": "<p>yeah, it's parsed as if -&gt; block else -&gt; block, rather than the if/else being treated as a single block</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 157369361,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "bonnie.eisenman@gmail.com",
            "sender_full_name": "Bonnie Eisenman (she) (m5'20)",
            "sender_id": 105050,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "tiny puzzle",
            "submessages": [],
            "timestamp": 1549042197,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/a4e1f602882ac013a0e19b85c17366e4256f3fe3?x=x&version=2",
            "client": "website",
            "content": "<p>er...what <span class=\"user-mention\" data-user-id=\"8099\">@Michael Malis (S1'15)</span> said ;)</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 157369412,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "bonnie.eisenman@gmail.com",
            "sender_full_name": "Bonnie Eisenman (she) (m5'20)",
            "sender_id": 105050,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "tiny puzzle",
            "submessages": [],
            "timestamp": 1549042208,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/a4e1f602882ac013a0e19b85c17366e4256f3fe3?x=x&version=2",
            "client": "website",
            "content": "<p>If anyone has similarly fun examples to share, I run the @validscala account on twitter. <a href=\"http://twitter.com/validscala\" target=\"_blank\" title=\"http://twitter.com/validscala\">http://twitter.com/validscala</a></p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 157369652,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "bonnie.eisenman@gmail.com",
            "sender_full_name": "Bonnie Eisenman (she) (m5'20)",
            "sender_id": 105050,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "tiny puzzle",
            "submessages": [],
            "timestamp": 1549042441,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/f6bd929465d6d225def8062d5a9d3f3f?d=identicon&version=1",
            "client": "website",
            "content": "<p>Is there a list of Scala performance issues written down anywhere? I've skimmed \"Scala High Performance Programming\", which has some stuff, but it's definitely missing some basic things that can cause serious performance problems.</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 165937329,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "danluu@gmail.com",
            "sender_full_name": "Dan Luu (W'13)",
            "sender_id": 820,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "Scala performance gotchas",
            "submessages": [],
            "timestamp": 1558127621,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/d495685876a5a195b6ef5fb9a269b6d0dcd5c5fe?x=x&version=1",
            "client": "website",
            "content": "<p>I don't know of an official list, but here are some that I run into a lot:<br>\n  1. <code>map</code> over <code>Set</code> can result in unexpected dominance of hash and equality methods.    I'd estimate that this shows up in at least half of all performance audits, and in about half again the semantics are actually a bug.<br>\n  2. deep call stacks, usually from <code>map</code>/<code>flatMap</code> in innocent-looking <code>for</code> comprehensions, don't always get inlined correctly.  That's probably why there are more than a thousand <code>while</code> loops in the scala compiler itself.  graal helps to some extent, but tight-loop performance is never deterministic when implemented via combinators, especially virtual method combinators (which is almost all of them).<br>\n  3. gratuitous (I tend to think pompous) use of <code>Option</code> and <code>Either</code> instead of simple conditionals.  <br>\n  4. case-matches and destructuring can involve a frightening profusion of <code>unapply</code> calls. <br>\n  5. C2 is just batshit crazy.</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 166035796,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "pnf@podsnap.com",
            "sender_full_name": "Peter Fraenkel (he) (S'13)",
            "sender_id": 2142,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "Scala performance gotchas",
            "submessages": [],
            "timestamp": 1558292725,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/a4e1f602882ac013a0e19b85c17366e4256f3fe3?x=x&version=2",
            "client": "website",
            "content": "<p><span aria-label=\"eyes\" class=\"emoji emoji-1f440\" role=\"img\" title=\"eyes\">:eyes:</span> I'd be interested in this if you pull together a list <span class=\"user-mention\" data-user-id=\"820\">@Dan Luu (W'13)</span> .</p>\n<p><span class=\"user-mention\" data-user-id=\"2142\">@Peter Fraenkel (S'13)</span> that's a useful list, thanks! I've definitely run into 2, 3, and 4.</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 166091630,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "bonnie.eisenman@gmail.com",
            "sender_full_name": "Bonnie Eisenman (she) (m5'20)",
            "sender_id": 105050,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "Scala performance gotchas",
            "submessages": [],
            "timestamp": 1558364166,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/d495685876a5a195b6ef5fb9a269b6d0dcd5c5fe?x=x&version=1",
            "client": "ZulipMobile",
            "content": "<p>I got pretty obsessed with tracking down what turned out to be an example of 5.<br>\n<a href=\"http://blog.podsnap.com/rollo.html\" target=\"_blank\" title=\"http://blog.podsnap.com/rollo.html\">http://blog.podsnap.com/rollo.html</a></p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 166096417,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "pnf@podsnap.com",
            "sender_full_name": "Peter Fraenkel (he) (S'13)",
            "sender_id": 2142,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "Scala performance gotchas",
            "submessages": [],
            "timestamp": 1558367739,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/d495685876a5a195b6ef5fb9a269b6d0dcd5c5fe?x=x&version=1",
            "client": "ZulipMobile",
            "content": "<p>6. Surprising memory consumption, churn and snowballing serialization due to chains of captured $outer.</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 166130651,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "pnf@podsnap.com",
            "sender_full_name": "Peter Fraenkel (he) (S'13)",
            "sender_id": 2142,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "Scala performance gotchas",
            "submessages": [],
            "timestamp": 1558397047,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/d495685876a5a195b6ef5fb9a269b6d0dcd5c5fe?x=x&version=1",
            "client": "ZulipMobile",
            "content": "<p>which, twistedly, is a particular problem with virtuously lazy constructs.</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 166130804,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "pnf@podsnap.com",
            "sender_full_name": "Peter Fraenkel (he) (S'13)",
            "sender_id": 2142,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "Scala performance gotchas",
            "submessages": [],
            "timestamp": 1558397255,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/d495685876a5a195b6ef5fb9a269b6d0dcd5c5fe?x=x&version=1",
            "client": "ZulipMobile",
            "content": "<p>7. The zero-sophistication principal for immutable builders means they take no advantage of bounded mutation and just repeatedly call immutable append.</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 166130897,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "pnf@podsnap.com",
            "sender_full_name": "Peter Fraenkel (he) (S'13)",
            "sender_id": 2142,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "Scala performance gotchas",
            "submessages": [],
            "timestamp": 1558397361,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/d495685876a5a195b6ef5fb9a269b6d0dcd5c5fe?x=x&version=1",
            "client": "ZulipMobile",
            "content": "<p>8. Speaking, per 6, of virtue, string context interpolation is much more expensive than + concatenation, which Java knows how to builderify.</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 166131000,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "pnf@podsnap.com",
            "sender_full_name": "Peter Fraenkel (he) (S'13)",
            "sender_id": 2142,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "Scala performance gotchas",
            "submessages": [],
            "timestamp": 1558397518,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/d495685876a5a195b6ef5fb9a269b6d0dcd5c5fe?x=x&version=1",
            "client": "ZulipMobile",
            "content": "<p>PartialFunctions result in double execution of filter predicates</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 166131082,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "pnf@podsnap.com",
            "sender_full_name": "Peter Fraenkel (he) (S'13)",
            "sender_id": 2142,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "Scala performance gotchas",
            "submessages": [],
            "timestamp": 1558397638,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/d495685876a5a195b6ef5fb9a269b6d0dcd5c5fe?x=x&version=1",
            "client": "ZulipMobile",
            "content": "<p>(9)</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 166131133,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "pnf@podsnap.com",
            "sender_full_name": "Peter Fraenkel (he) (S'13)",
            "sender_id": 2142,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "Scala performance gotchas",
            "submessages": [],
            "timestamp": 1558397656,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/d495685876a5a195b6ef5fb9a269b6d0dcd5c5fe?x=x&version=1",
            "client": "ZulipMobile",
            "content": "<p>10. Misleading profiling due to safepoint bias.</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 166131233,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "pnf@podsnap.com",
            "sender_full_name": "Peter Fraenkel (he) (S'13)",
            "sender_id": 2142,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "Scala performance gotchas",
            "submessages": [],
            "timestamp": 1558397789,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/f6bd929465d6d225def8062d5a9d3f3f?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-id=\"105050\">@Bonnie Eisenman (m1'18)</span> I don't think I'm really qualified to try to write the comprehensive list. Give me... two years <span aria-label=\"smile\" class=\"emoji emoji-263a\" role=\"img\" title=\"smile\">:smile:</span></p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 166423337,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "danluu@gmail.com",
            "sender_full_name": "Dan Luu (W'13)",
            "sender_id": 820,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "Scala performance gotchas",
            "submessages": [],
            "timestamp": 1558674028,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/f6bd929465d6d225def8062d5a9d3f3f?d=identicon&version=1",
            "client": "website",
            "content": "<p>I think one more item, arguably included in the ones above, is that the scala compiler can produce really complicated code that can blow past the default JVM compiled method size limit, which causes the method to run interpreted, even if it's very hot. I think one common way to do this is with pattern matching + \"advanced\" features, but there are probably a lot of other ways to write innocent looking code that blows up.</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 166423424,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "danluu@gmail.com",
            "sender_full_name": "Dan Luu (W'13)",
            "sender_id": 820,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "Scala performance gotchas",
            "submessages": [],
            "timestamp": 1558674149,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/a4e1f602882ac013a0e19b85c17366e4256f3fe3?x=x&version=2",
            "client": "Internal",
            "content": "<p>Ha! It doesn\u2019t have to be comprehensive to be useful though ;)</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 166453718,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "bonnie.eisenman@gmail.com",
            "sender_full_name": "Bonnie Eisenman (she) (m5'20)",
            "sender_id": 105050,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "Scala performance gotchas",
            "submessages": [],
            "timestamp": 1558705571,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/d495685876a5a195b6ef5fb9a269b6d0dcd5c5fe?x=x&version=1",
            "client": "website",
            "content": "<p>Is there a maximum size for compilation?  I knew about the 35 bytes for inlining.</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 166476116,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "pnf@podsnap.com",
            "sender_full_name": "Peter Fraenkel (he) (S'13)",
            "sender_id": 2142,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "Scala performance gotchas",
            "submessages": [],
            "timestamp": 1558721176,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/d495685876a5a195b6ef5fb9a269b6d0dcd5c5fe?x=x&version=1",
            "client": "website",
            "content": "<p>One thing that I know affects inlining is the prevalence of virtual methods.  Here, graal does a much better job, inlining the a switch statement over the most popular receiver types.</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 166476700,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "pnf@podsnap.com",
            "sender_full_name": "Peter Fraenkel (he) (S'13)",
            "sender_id": 2142,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "Scala performance gotchas",
            "submessages": [],
            "timestamp": 1558721645,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/f6bd929465d6d225def8062d5a9d3f3f?d=identicon&version=1",
            "client": "website",
            "content": "<p>I think the default is 8k bytecodes. You can override this with <code>-XX:-DontCompileHugeMethods\ufeff</code>, but compiling huge methods can give you poor performance, too, so you may be choosing between two different bad things. This sounds absurdly large, but, IIRC, we've hit this with what looks like boring serialization/deserialization code.</p>\n<p>There's also a hard limit that throws a runtime error at 64k (or at least there used to be, not sure if this is still true).</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 166481980,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "danluu@gmail.com",
            "sender_full_name": "Dan Luu (W'13)",
            "sender_id": 820,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "Scala performance gotchas",
            "submessages": [],
            "timestamp": 1558725387,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/d495685876a5a195b6ef5fb9a269b6d0dcd5c5fe?x=x&version=1",
            "client": "website",
            "content": "<p>8k is pretty big, and especially big for the kind of methods that end up in tight loops, but it's worth checking.  Presumably this shows up in PrintCompilation.</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 166501268,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "pnf@podsnap.com",
            "sender_full_name": "Peter Fraenkel (he) (S'13)",
            "sender_id": 2142,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "Scala performance gotchas",
            "submessages": [],
            "timestamp": 1558744261,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/f6bd929465d6d225def8062d5a9d3f3f?d=identicon&version=1",
            "client": "website",
            "content": "<p>It's possible you won't see this as much because you have better optimized code :-).</p>\n<p>I think it's pretty easy for our teams to throw money at a problem to make it go away, so we have a lot of high-overhead code. I was just looking at a large service that basically wraps tensorflow and 1% of CPU time is spent in tensorflow. 5% is spent in the library we have that wraps tensorflow and converts from our \"standard\" ML record format to what tensorflow \"speaks\". Not sure what the other 94% is yet, but a lot of it appears to be even more conversions.</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 166506789,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "danluu@gmail.com",
            "sender_full_name": "Dan Luu (W'13)",
            "sender_id": 820,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "Scala performance gotchas",
            "submessages": [],
            "timestamp": 1558753655,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/d495685876a5a195b6ef5fb9a269b6d0dcd5c5fe?x=x&version=1",
            "client": "website",
            "content": "<p>It's also possible that we don't see this because scala-specific performance issues are overwhelmed by other problems.  <span aria-label=\"sad\" class=\"emoji emoji-2639\" role=\"img\" title=\"sad\">:sad:</span></p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 166532632,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "pnf@podsnap.com",
            "sender_full_name": "Peter Fraenkel (he) (S'13)",
            "sender_id": 2142,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "Scala performance gotchas",
            "submessages": [],
            "timestamp": 1558799291,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/d495685876a5a195b6ef5fb9a269b6d0dcd5c5fe?x=x&version=1",
            "client": "website",
            "content": "<p>I've learned that #8 was fixed in 2.12.7; string interpolation is now as efficient as string concatenation.<br>\nAlternate #8: <code>MapLike#mapValues</code> doesn't do what you think.  Instead, it returns a wrapper with <code>.get</code> overridden to apply the transformation every time its called.<br>\n11. You end up doing O(n) appends to <code>List</code> all the time, because scala's default <code>Seq</code> is a list.</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 167005319,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "pnf@podsnap.com",
            "sender_full_name": "Peter Fraenkel (he) (S'13)",
            "sender_id": 2142,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "Scala performance gotchas",
            "submessages": [],
            "timestamp": 1559315639,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/d495685876a5a195b6ef5fb9a269b6d0dcd5c5fe?x=x&version=1",
            "client": "website",
            "content": "<p>12. <code>val (a,b) = (1,2)</code> expands to an atrocity that creates a whole anonymous class, checks to make sure that <code>(1,2)</code> is not <code>null</code>, extracts the 1 and 2 and  creates a new tuple out of them to store as <code>x$1</code> in  his anonymous class, then creates an instance of the class, and assigns a = thing.x$1._1, b = thing.c$1._2.</p>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 167007037,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "pnf@podsnap.com",
            "sender_full_name": "Peter Fraenkel (he) (S'13)",
            "sender_id": 2142,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "Scala performance gotchas",
            "submessages": [],
            "timestamp": 1559316796,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/36e38f07213a4459a526a3334d690aa09a75b04d?x=x&version=3",
            "client": "website",
            "content": "<p>zio seems to be the hip scala library these days, and there's a related project <a href=\"https://youtube.com/watch?v=OwmHgL9F_9Q\">zio-prelude</a> which claims to rethink  the functional building blocks like Ap Monad with other 'primitives' that leverage Scala's variance system (as opposed to using Haskell/category theory). Would anyone be interested in a pairing session in two weeks' time to do some standard FP exercises but with this library to test it out?</p>\n<div class=\"youtube-video message_inline_image\"><a data-id=\"OwmHgL9F_9Q\" href=\"https://youtube.com/watch?v=OwmHgL9F_9Q\"><img src=\"https://i.ytimg.com/vi/OwmHgL9F_9Q/default.jpg\"></a></div>",
            "content_type": "text/html",
            "display_recipient": "scala",
            "flags": [
                "read",
                "historical"
            ],
            "id": 210610017,
            "is_me_message": false,
            "last_edit_timestamp": 1600514228,
            "reactions": [],
            "recipient_id": 22644,
            "sender_email": "dclau04@gmail.com",
            "sender_full_name": "Daniel Lau (he) (SP2'17)",
            "sender_id": 100522,
            "sender_realm_str": "recurse",
            "stream_id": 20286,
            "subject": "zio prelude",
            "submessages": [],
            "timestamp": 1600514062,
            "topic_links": [],
            "type": "stream"
        }
    ],
    "msg": "",
    "result": "success"
}
