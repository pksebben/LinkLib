{
    "anchor": 0,
    "found_anchor": false,
    "found_newest": true,
    "found_oldest": true,
    "history_limited": false,
    "messages": [
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/1000/1cd87892343b6620726b112851f0b66cbda4a68f?x=x&version=4",
            "client": "Internal",
            "content": "<p>Welcome to <a class=\"stream\" data-stream-id=\"105021\" href=\"/#narrow/stream/zig\">#zig</a>.</p>\n<p><strong>Description</strong>: get your zig on</p>",
            "content_type": "text/html",
            "display_recipient": "zig",
            "flags": [
                "read",
                "historical"
            ],
            "id": 118166308,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 111261,
            "sender_email": "welcome-bot@zulip.com",
            "sender_full_name": "Welcome Bot",
            "sender_id": 100007,
            "sender_realm_str": "zulipcore",
            "stream_id": 105021,
            "subject": "hello",
            "submessages": [],
            "timestamp": 1510070725,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/1920d37780c9a711b0030870b0c726098e0efb10?x=x&version=2",
            "client": "website",
            "content": "<p>all your codebase are belong to us</p>",
            "content_type": "text/html",
            "display_recipient": "zig",
            "flags": [
                "read",
                "historical"
            ],
            "id": 118166780,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 111261,
            "sender_email": "superjoe30@gmail.com",
            "sender_full_name": "Andrew Kelley (he) (SP1'17)",
            "sender_id": 2911,
            "sender_realm_str": "recurse",
            "stream_id": 105021,
            "subject": "hello",
            "submessages": [],
            "timestamp": 1510071407,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/1920d37780c9a711b0030870b0c726098e0efb10?x=x&version=2",
            "client": "website",
            "content": "<p>zulip is too hard for me to use but I'm available on IRC, google groups, GitHub, reddit. <a href=\"http://ziglang.org/\" target=\"_blank\" title=\"http://ziglang.org/\">http://ziglang.org/</a></p>",
            "content_type": "text/html",
            "display_recipient": "zig",
            "flags": [
                "read",
                "historical"
            ],
            "id": 118166798,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 111261,
            "sender_email": "superjoe30@gmail.com",
            "sender_full_name": "Andrew Kelley (he) (SP1'17)",
            "sender_id": 2911,
            "sender_realm_str": "recurse",
            "stream_id": 105021,
            "subject": "hello",
            "submessages": [],
            "timestamp": 1510071462,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/78359dd9d3cf59abacfa85565edc1eb2?d=identicon&version=1",
            "client": "website",
            "content": "<p>haha ok. well you know right now it's just the two of us in here, right? :)</p>",
            "content_type": "text/html",
            "display_recipient": "zig",
            "flags": [
                "read",
                "historical"
            ],
            "id": 118166853,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 111261,
            "sender_email": "jeffowler@gmail.com",
            "sender_full_name": "Jeff Fowler (W'14)",
            "sender_id": 4998,
            "sender_realm_str": "recurse",
            "stream_id": 105021,
            "subject": "hello",
            "submessages": [],
            "timestamp": 1510071506,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/78359dd9d3cf59abacfa85565edc1eb2?d=identicon&version=1",
            "client": "website",
            "content": "<p>I was just surprised you hadn't made a stream!</p>",
            "content_type": "text/html",
            "display_recipient": "zig",
            "flags": [
                "read",
                "historical"
            ],
            "id": 118166858,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 111261,
            "sender_email": "jeffowler@gmail.com",
            "sender_full_name": "Jeff Fowler (W'14)",
            "sender_id": 4998,
            "sender_realm_str": "recurse",
            "stream_id": 105021,
            "subject": "hello",
            "submessages": [],
            "timestamp": 1510071524,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/391eb183c3474a15bf9ad0e87d3ff118?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-id=\"2911\">@Andrew Kelley (SP1'17)</span> Your talk was awesome, informative and fun!</p>\n<p>I'm starting to wonder if zig would be a good intermediate language to target in transplantation. This is due to the simplicity and lack of features, yet much more approachable then ASM or LLVM. A toy project I might use to try this out would be trans-piling either Go or Ocaml to Zig and comparing the inputs to outputs for clarity. My main goal would be whether a user well versed in there favorite language could understand the Zig that's produced by the trans-piler well enough they could debug issues at that level of abstraction.</p>\n<p>My other options have always leaned on Rust, but I've held back due to their compiler snail and the difficultly in translating other languages into readable Rust code. &lt;-- I think this would be really hard to get right and would likely result in too much change during translation making it harder for non-rusteacens to understand their code, and worst case the only option is to produce such ugly rust that even reusteacens can't understand it.</p>\n<p>It's here that I feel the simplicity of features in Zig might really make it a great trans-pile target.</p>",
            "content_type": "text/html",
            "display_recipient": "zig",
            "flags": [
                "read",
                "historical"
            ],
            "id": 124251197,
            "is_me_message": false,
            "last_edit_timestamp": 1522112198,
            "reactions": [],
            "recipient_id": 111261,
            "sender_email": "ghthor@gmail.com",
            "sender_full_name": "Will Drengwitz (he) (W1'17)",
            "sender_id": 7099,
            "sender_realm_str": "recurse",
            "stream_id": 105021,
            "subject": "Zig as an IL transpile target",
            "submessages": [],
            "timestamp": 1522111793,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/1920d37780c9a711b0030870b0c726098e0efb10?x=x&version=2",
            "client": "Internal",
            "content": "<p>Thanks for the compliment!</p>\n<p>I think you would want to emit LLVM IR.  This would give you source-level<br>\ndebugging support and would be strictly faster than targeting zig since zig<br>\nultimately targets LLVM anyway.</p>\n<p>On the other hand, what targeting zig would give you is getting a self<br>\ncontained static binary that runs out of the box. LLVM can make object<br>\nfiles but the object files it produces depend on libgcc and a subset of<br>\nlibc. Zig breaks this dependency.</p>\n<p>Either way feel free to show me progress, I'd be curious to see what you<br>\ncome up with.</p>",
            "content_type": "text/html",
            "display_recipient": "zig",
            "flags": [
                "read",
                "historical"
            ],
            "id": 124252425,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 111261,
            "sender_email": "superjoe30@gmail.com",
            "sender_full_name": "Andrew Kelley (he) (SP1'17)",
            "sender_id": 2911,
            "sender_realm_str": "recurse",
            "stream_id": 105021,
            "subject": "Zig as an IL transpile target",
            "submessages": [],
            "timestamp": 1522114493,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/78359dd9d3cf59abacfa85565edc1eb2?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-id=\"2911\">@Andrew Kelley (SP1'17)</span> I'm curious, since seeing as how zig has it's own IR that comes before the llvm generation step, would targeting _that_ instead have any benefits in a transpilation situation?</p>",
            "content_type": "text/html",
            "display_recipient": "zig",
            "flags": [
                "read",
                "historical"
            ],
            "id": 124262303,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 111261,
            "sender_email": "jeffowler@gmail.com",
            "sender_full_name": "Jeff Fowler (W'14)",
            "sender_id": 4998,
            "sender_realm_str": "recurse",
            "stream_id": 105021,
            "subject": "Zig as an IL transpile target",
            "submessages": [],
            "timestamp": 1522136347,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/1920d37780c9a711b0030870b0c726098e0efb10?x=x&version=2",
            "client": "website",
            "content": "<p>Yes, that would be more useful than Zig source directly, because it's more powerful and more directly correlates to LLVM. However Zig's IR is not generalized; it is special cased to Zig. Some instructions have pointers to types - it would not be possible to serialize them and deserialize them, and there is no external API exposing this functionality. And I don't think that would be desirable to add - we already have LLVM to fill that role.</p>",
            "content_type": "text/html",
            "display_recipient": "zig",
            "flags": [
                "read",
                "historical"
            ],
            "id": 124274877,
            "is_me_message": false,
            "last_edit_timestamp": 1522161234,
            "reactions": [],
            "recipient_id": 111261,
            "sender_email": "superjoe30@gmail.com",
            "sender_full_name": "Andrew Kelley (he) (SP1'17)",
            "sender_id": 2911,
            "sender_realm_str": "recurse",
            "stream_id": 105021,
            "subject": "Zig as an IL transpile target",
            "submessages": [],
            "timestamp": 1522161208,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/1920d37780c9a711b0030870b0c726098e0efb10?x=x&version=2",
            "client": "website",
            "content": "<p><a href=\"https://shritesh.github.io/zigfmt-web/\" target=\"_blank\" title=\"https://shritesh.github.io/zigfmt-web/\">https://shritesh.github.io/zigfmt-web/</a><br>\n<a href=\"https://shritesh.github.io/zig-wasm-dom/\" target=\"_blank\" title=\"https://shritesh.github.io/zig-wasm-dom/\">https://shritesh.github.io/zig-wasm-dom/</a></p>",
            "content_type": "text/html",
            "display_recipient": "zig",
            "flags": [
                "read",
                "historical"
            ],
            "id": 165560361,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 111261,
            "sender_email": "superjoe30@gmail.com",
            "sender_full_name": "Andrew Kelley (he) (SP1'17)",
            "sender_id": 2911,
            "sender_realm_str": "recurse",
            "stream_id": 105021,
            "subject": "links from demo",
            "submessages": [],
            "timestamp": 1557775228,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/1920d37780c9a711b0030870b0c726098e0efb10?x=x&version=2",
            "client": "website",
            "content": "<p>Hey everybody thanks for coming to the workshop! I'm going to be around NGW to pair if anyone wants to!</p>",
            "content_type": "text/html",
            "display_recipient": "zig",
            "flags": [
                "read",
                "historical"
            ],
            "id": 165571261,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 111261,
            "sender_email": "superjoe30@gmail.com",
            "sender_full_name": "Andrew Kelley (he) (SP1'17)",
            "sender_id": 2911,
            "sender_realm_str": "recurse",
            "stream_id": 105021,
            "subject": "links from demo",
            "submessages": [],
            "timestamp": 1557783148,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/36716766e555f85a2c18cf8f358d6f63ccc077d9?x=x&version=2",
            "client": "website",
            "content": "<p>I'm only halfway through, but already there have been a couple mentions of Zig is this episode of the changelog as an example of languages doing interesting stuff w/ LLVM. The episode is about go and more specifically TinyGo.<br>\n<a href=\"https://changelog.com/podcast/354\" target=\"_blank\" title=\"https://changelog.com/podcast/354\">https://changelog.com/podcast/354</a></p>",
            "content_type": "text/html",
            "display_recipient": "zig",
            "flags": [
                "read",
                "historical"
            ],
            "id": 173132232,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "+1",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "superjoe30@gmail.com",
                        "full_name": "Andrew Kelley (he) (SP1'17)",
                        "id": 2911
                    },
                    "user_id": 2911
                }
            ],
            "recipient_id": 111261,
            "sender_email": "mattg@leema.org",
            "sender_full_name": "Matthew Graham (he) (F1'18)",
            "sender_id": 125276,
            "sender_realm_str": "recurse",
            "stream_id": 105021,
            "subject": "zig mentioned on the changelog podcast",
            "submessages": [],
            "timestamp": 1565716515,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/4ca492e9d3c12616bdd949e4acdd86eee90766a6?x=x&version=4",
            "client": "ZulipElectron",
            "content": "<p>I want to count the frequency of characters on stdin. Here's what I have so far:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kr\">const</span><span class=\"w\"> </span><span class=\"n\">std</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nb\">@import</span><span class=\"p\">(</span><span class=\"s\">&quot;std&quot;</span><span class=\"p\">);</span><span class=\"w\"></span>\n\n<span class=\"kr\">const</span><span class=\"w\"> </span><span class=\"n\">io</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">std</span><span class=\"p\">.</span><span class=\"n\">io</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"kr\">const</span><span class=\"w\"> </span><span class=\"n\">os</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">std</span><span class=\"p\">.</span><span class=\"n\">os</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"kr\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"n\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"o\">!</span><span class=\"kt\">void</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kr\">const</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">std</span><span class=\"p\">.</span><span class=\"n\">heap</span><span class=\"p\">.</span><span class=\"n\">page_allocator</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kr\">const</span><span class=\"w\"> </span><span class=\"n\">map</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">std</span><span class=\"p\">.</span><span class=\"n\">AutoHashMap</span><span class=\"p\">(</span><span class=\"kt\">u8</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">u64</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kr\">const</span><span class=\"w\"> </span><span class=\"n\">stdout</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">std</span><span class=\"p\">.</span><span class=\"n\">io</span><span class=\"p\">.</span><span class=\"n\">getStdOut</span><span class=\"p\">().</span><span class=\"n\">outStream</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kr\">const</span><span class=\"w\"> </span><span class=\"n\">stream</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">std</span><span class=\"p\">.</span><span class=\"n\">io</span><span class=\"p\">.</span><span class=\"n\">getStdIn</span><span class=\"p\">().</span><span class=\"n\">inStream</span><span class=\"p\">();</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"kr\">var</span><span class=\"w\"> </span><span class=\"n\">buf</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"mi\">1024</span><span class=\"p\">]</span><span class=\"kt\">u8</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"kc\">undefined</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"k\">while</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"k\">try</span><span class=\"w\"> </span><span class=\"n\">stream</span><span class=\"p\">.</span><span class=\"n\">readUntilDelimiterOrEof</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">buf</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"se\">&#39;\\n&#39;</span><span class=\"p\">))</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"n\">line</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">line</span><span class=\"p\">.</span><span class=\"n\">len</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"k\">break</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"w\">        </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">line</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"n\">c</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"kr\">var</span><span class=\"w\"> </span><span class=\"n\">entry</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">map</span><span class=\"p\">.</span><span class=\"n\">getOrPut</span><span class=\"p\">(</span><span class=\"n\">c</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n\n\n<p>But when I run it (<code>echo \"hi hello\" | zig run main.zig</code>) I get this compiler output:</p>\n<div class=\"codehilite\"><pre><span></span><code>./main.zig:20:38: error: expected type &#39;*std.hash_map.HashMap(u8,u64,std.hash_map.getAutoHashFn(u8).hash,std.hash_map.getAutoEqlFn(u8).eql,true)&#39;, found &#39;u8&#39;\n            var entry = map.getOrPut(c);\n                                     ^\n/usr/local/bin/lib/zig/std/start.zig:257:40: note: referenced here\n            const result = root.main() catch |err| {\n</code></pre></div>\n\n\n<p>I'm brand new to Zig so I'm not sure how to read that type error ... but I thought I told it that I want a map of u8 -&gt; u64, so shouldn't it be happy that I am passing a u8 to <code>getOrPut</code>? What am I doing wrong? Thanks!</p>",
            "content_type": "text/html",
            "display_recipient": "zig",
            "flags": [
                "read",
                "historical"
            ],
            "id": 209185246,
            "is_me_message": false,
            "last_edit_timestamp": 1599331670,
            "reactions": [],
            "recipient_id": 111261,
            "sender_email": "dan@dmiller.dev",
            "sender_full_name": "Dan Miller (he) (F1'20)",
            "sender_id": 327414,
            "sender_realm_str": "recurse",
            "stream_id": 105021,
            "subject": "putting characters in a hashmap",
            "submessages": [],
            "timestamp": 1599322934,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/78359dd9d3cf59abacfa85565edc1eb2?d=identicon&version=1",
            "client": "website",
            "content": "<p>you are missing a step, the line</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kr\">const</span><span class=\"w\"> </span><span class=\"n\">map</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">std</span><span class=\"p\">.</span><span class=\"n\">AutoHashMap</span><span class=\"p\">(</span><span class=\"kt\">u8</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">u64</span><span class=\"p\">);</span><span class=\"w\"></span>\n</code></pre></div>\n\n\n<p>doesn't return an 'instance', it returns a struct type  definition which you can then initialize like</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"w\"> </span><span class=\"kr\">const</span><span class=\"w\"> </span><span class=\"n\">std</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nb\">@import</span><span class=\"p\">(</span><span class=\"s\">&quot;std&quot;</span><span class=\"p\">);</span><span class=\"w\"></span>\n\n<span class=\"kr\">const</span><span class=\"w\"> </span><span class=\"n\">io</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">std</span><span class=\"p\">.</span><span class=\"n\">io</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"kr\">const</span><span class=\"w\"> </span><span class=\"n\">os</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">std</span><span class=\"p\">.</span><span class=\"n\">os</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"kr\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"n\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"o\">!</span><span class=\"kt\">void</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kr\">var</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">std</span><span class=\"p\">.</span><span class=\"n\">heap</span><span class=\"p\">.</span><span class=\"n\">page_allocator</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kr\">const</span><span class=\"w\"> </span><span class=\"n\">stdout</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">std</span><span class=\"p\">.</span><span class=\"n\">io</span><span class=\"p\">.</span><span class=\"n\">getStdOut</span><span class=\"p\">().</span><span class=\"n\">outStream</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kr\">const</span><span class=\"w\"> </span><span class=\"n\">stream</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">std</span><span class=\"p\">.</span><span class=\"n\">io</span><span class=\"p\">.</span><span class=\"n\">getStdIn</span><span class=\"p\">().</span><span class=\"n\">inStream</span><span class=\"p\">();</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"kr\">var</span><span class=\"w\"> </span><span class=\"n\">buf</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"mi\">1024</span><span class=\"p\">]</span><span class=\"kt\">u8</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"kc\">undefined</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"kr\">const</span><span class=\"w\"> </span><span class=\"n\">Map</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">std</span><span class=\"p\">.</span><span class=\"n\">AutoHashMap</span><span class=\"p\">(</span><span class=\"kt\">u8</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">u64</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kr\">var</span><span class=\"w\"> </span><span class=\"n\">map</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Map</span><span class=\"p\">.</span><span class=\"n\">init</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">);</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"k\">while</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"k\">try</span><span class=\"w\"> </span><span class=\"n\">stream</span><span class=\"p\">.</span><span class=\"n\">readUntilDelimiterOrEof</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">buf</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"se\">&#39;\\n&#39;</span><span class=\"p\">))</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"n\">line</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">line</span><span class=\"p\">.</span><span class=\"n\">len</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"k\">break</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"w\">        </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">line</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"n\">c</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"kr\">var</span><span class=\"w\"> </span><span class=\"n\">entry</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">map</span><span class=\"p\">.</span><span class=\"n\">getOrPut</span><span class=\"p\">(</span><span class=\"n\">c</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n\n\n<p>I'm being careful with OOP terminology because while it's convenient it's not really the underlying abstraction so it is useful to think of this in more C terms. with that caveat, <code>init</code> is a \"static class method\"</p>\n<p>the state of zig is such that the best way to suss out usage is to go straight to the std lib code and read the integrated tests. I got that from here: </p>\n<p><a href=\"https://github.com/ziglang/zig/blob/master/lib/std/hash_map.zig#L830-L831\">https://github.com/ziglang/zig/blob/master/lib/std/hash_map.zig#L830-L831</a></p>",
            "content_type": "text/html",
            "display_recipient": "zig",
            "flags": [
                "read",
                "historical"
            ],
            "id": 209210221,
            "is_me_message": false,
            "last_edit_timestamp": 1599373806,
            "reactions": [],
            "recipient_id": 111261,
            "sender_email": "jeffowler@gmail.com",
            "sender_full_name": "Jeff Fowler (W'14)",
            "sender_id": 4998,
            "sender_realm_str": "recurse",
            "stream_id": 105021,
            "subject": "putting characters in a hashmap",
            "submessages": [],
            "timestamp": 1599369742,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/78359dd9d3cf59abacfa85565edc1eb2?d=identicon&version=1",
            "client": "website",
            "content": "<p>the error btw is complaining that you are not passing <code>self</code> to the method you're calling (because it's an \"instance method\" and you are calling it as a \"static method\") I wrote about that calling convention <a href=\"https://blog.jfo.click/hello-hello-world/\">here</a></p>",
            "content_type": "text/html",
            "display_recipient": "zig",
            "flags": [
                "read",
                "historical"
            ],
            "id": 209214387,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 111261,
            "sender_email": "jeffowler@gmail.com",
            "sender_full_name": "Jeff Fowler (W'14)",
            "sender_id": 4998,
            "sender_realm_str": "recurse",
            "stream_id": 105021,
            "subject": "putting characters in a hashmap",
            "submessages": [],
            "timestamp": 1599378877,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/4ca492e9d3c12616bdd949e4acdd86eee90766a6?x=x&version=4",
            "client": "ZulipElectron",
            "content": "<p>Ahh, I see. That works, thanks <span class=\"user-mention\" data-user-id=\"4998\">@Jeff Fowler (W'14)</span> !</p>",
            "content_type": "text/html",
            "display_recipient": "zig",
            "flags": [
                "read",
                "historical"
            ],
            "id": 209231091,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 111261,
            "sender_email": "dan@dmiller.dev",
            "sender_full_name": "Dan Miller (he) (F1'20)",
            "sender_id": 327414,
            "sender_realm_str": "recurse",
            "stream_id": 105021,
            "subject": "putting characters in a hashmap",
            "submessages": [],
            "timestamp": 1599408273,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/4ca492e9d3c12616bdd949e4acdd86eee90766a6?x=x&version=4",
            "client": "ZulipElectron",
            "content": "<p>Hello zig folks!</p>\n<p>In <a href=\"https://github.com/jazzdan/sysprog/blob/master/genealogy/main.zig#L52\">this code</a> why is the type of <code>p</code> <code>*const Person</code>? I would have expected it to be <code>*Person</code>. Since it is const I can't modify the struct later which is something I want to do in my code:</p>\n<div class=\"codehilite\"><pre><span></span><code>./main.zig:60:35: error: expected type &#39;*Person&#39;, found &#39;*const Person&#39;\n            handleField(fieldNum, p, field);\n</code></pre></div>\n\n\n<p>Then if I change the function to take a <code>*const Person</code> I can't modify it:</p>\n<div class=\"codehilite\"><pre><span></span><code>./main.zig:19:18: error: cannot assign to constant\n        p.name = field;\n</code></pre></div>\n\n\n<p>Am I going about this all wrong? Thanks :)</p>",
            "content_type": "text/html",
            "display_recipient": "zig",
            "flags": [
                "read",
                "historical"
            ],
            "id": 210624988,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 111261,
            "sender_email": "dan@dmiller.dev",
            "sender_full_name": "Dan Miller (he) (F1'20)",
            "sender_id": 327414,
            "sender_realm_str": "recurse",
            "stream_id": 105021,
            "subject": "How to un-const something?",
            "submessages": [],
            "timestamp": 1600535454,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/0aac726e8ce27b55809824e7f6de77e7?d=identicon&version=1",
            "client": "website",
            "content": "<p><code>var p = &amp;Person{...}</code> is equivalent to <code>const tmp = Person{...}; var p = &amp;tmp;</code>. Since tmp is const, the pointer must also be const. You can just do <code>var p = Person{...}</code> and later <code>handleField(fieldNum, &amp;p, field)</code>.</p>\n<p>Also, in the function above you are creating each <code>Person</code> on the stack and then storing pointers to that stack location, which will disappear as soon as the function exits. Heap allocation is not automatic in languages like zig and c, you have to explicitly ask for it. You probably want something more like:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"c1\">// allocate some space on the heap</span>\n<span class=\"n\">p</span><span class=\"p\">.</span><span class=\"n\">mother</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"p\">.</span><span class=\"n\">create</span><span class=\"p\">(</span><span class=\"n\">Person</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"k\">catch</span><span class=\"w\"> </span><span class=\"nb\">@panic</span><span class=\"p\">(</span><span class=\"s\">&quot;Out of memory&quot;</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"c1\">// write to the newly allocated space</span>\n<span class=\"n\">p</span><span class=\"p\">.</span><span class=\"n\">mother</span><span class=\"p\">.</span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Person</span><span class=\"p\">{...};</span><span class=\"w\"></span>\n</code></pre></div>",
            "content_type": "text/html",
            "display_recipient": "zig",
            "flags": [
                "read",
                "historical"
            ],
            "id": 210630145,
            "is_me_message": false,
            "last_edit_timestamp": 1600544346,
            "reactions": [],
            "recipient_id": 111261,
            "sender_email": "jamie@scattered-thoughts.net",
            "sender_full_name": "Jamie Brandon (he) (W1'20)",
            "sender_id": 863,
            "sender_realm_str": "recurse",
            "stream_id": 105021,
            "subject": "How to un-const something?",
            "submessages": [],
            "timestamp": 1600542241,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/4ca492e9d3c12616bdd949e4acdd86eee90766a6?x=x&version=4",
            "client": "ZulipElectron",
            "content": "<p>This totally worked, thank you for the explanation!</p>",
            "content_type": "text/html",
            "display_recipient": "zig",
            "flags": [
                "read",
                "historical"
            ],
            "id": 210804859,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 111261,
            "sender_email": "dan@dmiller.dev",
            "sender_full_name": "Dan Miller (he) (F1'20)",
            "sender_id": 327414,
            "sender_realm_str": "recurse",
            "stream_id": 105021,
            "subject": "How to un-const something?",
            "submessages": [],
            "timestamp": 1600725018,
            "topic_links": [],
            "type": "stream"
        }
    ],
    "msg": "",
    "result": "success"
}
